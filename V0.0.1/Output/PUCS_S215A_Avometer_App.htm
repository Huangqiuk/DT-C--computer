<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\PUCS_S215A_Avometer_App.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\PUCS_S215A_Avometer_App.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Apr 22 09:22:08 2024
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Avoment_Process &rArr; Avoment_RevDataParse &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4f]">AvomentRevDataTimeout</a> from metercontrol.o(i.AvomentRevDataTimeout) referenced from metercontrol.o(i.Avoment_Init)
 <LI><a href="#[53]">Avoment_ReportMeasureResultACK</a> from metercontrol.o(i.Avoment_ReportMeasureResultACK) referenced from uartprotocol.o(i.UART_PROTOCOL_CmdFrameProcess)
 <LI><a href="#[50]">Avoment_StartInit</a> from metercontrol.o(i.Avoment_StartInit) referenced from metercontrol.o(i.Avoment_Init)
 <LI><a href="#[4]">BusFault_Handler</a> from n32l40x_it.o(i.BusFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[40]">CAN_RX0_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[41]">CAN_RX1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[42]">CAN_SCE_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3f]">CAN_TX_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[20]">COMP_1_2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[15]">DMA_Channel1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[16]">DMA_Channel2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[17]">DMA_Channel3_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[18]">DMA_Channel4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[19]">DMA_Channel5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1a]">DMA_Channel6_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1b]">DMA_Channel7_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1c]">DMA_Channel8_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from n32l40x_it.o(i.DebugMon_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from n32l40x_it.o(i.HardFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[51]">KeyScanTimeCallBack</a> from key.o(i.KeyScanTimeCallBack) referenced from key.o(i.KEY_Init)
 <LI><a href="#[45]">LCD_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[44]">LPTIM_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3b]">LPUART_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[43]">LPUART_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[47]">MMU_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from n32l40x_it.o(i.MemManage_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from n32l40x_it.o(i.NMI_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[49]">RAMC_PERR_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from n32l40x_it.o(i.RCC_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[46]">SAC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from n32l40x_it.o(i.SVC_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[56]">SysRest</a> from uartprotocol.o(i.SysRest) referenced from uartprotocol.o(i.Uart2_CmdRstACK)
 <LI><a href="#[9]">SysTick_Handler</a> from n32l40x_it.o(i.SysTick_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_n32l40x.o(i.SystemInit) referenced from startup_n32l40x.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3d]">TIM6_IRQHandler</a> from timer.o(i.TIM6_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3e]">TIM7_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4a]">TIM9_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[52]">TIMER_DoNothing</a> from timer.o(i.TIMER_DoNothing) referenced from timer.o(i.TIMER_Init)
 <LI><a href="#[48]">TSC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[55]">UART_DRIVE_AddTxArray</a> from uartdrive.o(i.UART_DRIVE_AddTxArray) referenced from uartprotocol.o(i.UART_PROTOCOL_Init)
 <LI><a href="#[54]">UART_PROTOCOL_MacProcess</a> from uartprotocol.o(i.UART_PROTOCOL_MacProcess) referenced from uartprotocol.o(i.UART_PROTOCOL_Init)
 <LI><a href="#[4b]">UCDR_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from debug.o(i.USART1_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from metercontrol.o(i.USART2_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from uartdrive.o(i.USART3_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1e]">USB_HP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1f]">USB_LP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from n32l40x_it.o(i.UsageFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32l40x.o(.text)
 <LI><a href="#[57]">fputc</a> from debug.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[58]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[73]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[11d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[11f]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[120]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[121]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTIM_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPUART_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RAMC_PERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UCDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ReportMeasureResultACK
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimeCallBack
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimeCallBack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimeCallBack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ReportMeasureResultACK
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Process
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimeCallBack
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Process
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimeCallBack
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimeCallBack
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimeCallBack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[128]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[5e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[66]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[64]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[111]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[129]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[12a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[12b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[12c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[83]"></a>ADC1_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc1.o(i.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADC1_Init &rArr; ADC1_DEVICE_Config &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[7a]"></a>ADC_ConfigClk</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, n32l40x_adc.o(i.ADC_ConfigClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConfigClk
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdcPllClk
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdcHclk
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
</UL>

<P><STRONG><a name="[7d]"></a>ADC_ConfigRegularChannel</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, n32l40x_adc.o(i.ADC_ConfigRegularChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_ConfigRegularChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC1_Value
</UL>

<P><STRONG><a name="[7e]"></a>ADC_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
</UL>

<P><STRONG><a name="[82]"></a>ADC_EnableSoftwareStartConv</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_EnableSoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC1_Value
</UL>

<P><STRONG><a name="[81]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
</UL>

<P><STRONG><a name="[c4]"></a>ADC_GetDat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_GetDat))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC1_Value
</UL>

<P><STRONG><a name="[c3]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC1_Value
</UL>

<P><STRONG><a name="[7f]"></a>ADC_GetFlagStatusNew</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_GetFlagStatusNew))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
</UL>

<P><STRONG><a name="[7c]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, n32l40x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
</UL>

<P><STRONG><a name="[80]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
</UL>

<P><STRONG><a name="[86]"></a>APP_ReportMsg</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, uartprotocol.o(i.APP_ReportMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = APP_ReportMsg &rArr; UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddFrame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_CmdRstACK
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_CmdAskVersionACK
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[4f]"></a>AvomentRevDataTimeout</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, metercontrol.o(i.AvomentRevDataTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvomentRevDataTimeout &rArr; LED_Reversal
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reversal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> metercontrol.o(i.Avoment_Init)
</UL>
<P><STRONG><a name="[8c]"></a>Avoment_ControlPin_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, metercontrol.o(i.Avoment_ControlPin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Avoment_ControlPin_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Init
</UL>

<P><STRONG><a name="[9d]"></a>Avoment_FormatGetNum</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, metercontrol.o(i.Avoment_FormatGetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Avoment_FormatGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
</UL>

<P><STRONG><a name="[95]"></a>Avoment_FormatGetSymbol</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, metercontrol.o(i.Avoment_FormatGetSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Avoment_FormatGetSymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Process
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
</UL>

<P><STRONG><a name="[8e]"></a>Avoment_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, metercontrol.o(i.Avoment_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Avoment_Init &rArr; Avoment_Uart2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Uart2_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ControlPin_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>Avoment_Process</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, metercontrol.o(i.Avoment_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Avoment_Process &rArr; Avoment_RevDataParse &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_StateEnter
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ShortPressDown
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_SetPTGear
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_FormatGetSymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>Avoment_ReportMeasureResultACK</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, metercontrol.o(i.Avoment_ReportMeasureResultACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Avoment_ReportMeasureResultACK &rArr; MultimeterSendMsgToMaistr &rArr; UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultimeterSendMsgToMaistr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayReset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDateStableAndReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartprotocol.o(i.UART_PROTOCOL_CmdFrameProcess)
</UL>
<P><STRONG><a name="[92]"></a>Avoment_RevDataParse</STRONG> (Thumb, 266 bytes, Stack size 64 bytes, metercontrol.o(i.Avoment_RevDataParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Avoment_RevDataParse &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_FormatGetSymbol
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_FormatGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Process
</UL>

<P><STRONG><a name="[93]"></a>Avoment_SetPTGear</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, metercontrol.o(i.Avoment_SetPTGear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Avoment_SetPTGear
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Process
</UL>

<P><STRONG><a name="[96]"></a>Avoment_ShortPressDown</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, metercontrol.o(i.Avoment_ShortPressDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Avoment_ShortPressDown &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Process
</UL>

<P><STRONG><a name="[50]"></a>Avoment_StartInit</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, metercontrol.o(i.Avoment_StartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Avoment_StartInit &rArr; Avoment_StitchGear
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_StitchGear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> metercontrol.o(i.Avoment_Init)
</UL>
<P><STRONG><a name="[94]"></a>Avoment_StateEnter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, metercontrol.o(i.Avoment_StateEnter))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_StitchGear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Process
</UL>

<P><STRONG><a name="[a2]"></a>Avoment_StitchGear</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, metercontrol.o(i.Avoment_StitchGear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Avoment_StitchGear
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_StateEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimeCallBack
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_StartInit
</UL>

<P><STRONG><a name="[8f]"></a>Avoment_Uart2_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, metercontrol.o(i.Avoment_Uart2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Avoment_Uart2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>CheckDateStableAndReport</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, metercontrol.o(i.CheckDateStableAndReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CheckDateStableAndReport &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ReportMeasureResultACK
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_FormatGetSymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Process
</UL>

<P><STRONG><a name="[de]"></a>ConfigMRVoltage1V</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_n32l40x.o(i.ConfigMRVoltage1V))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>Debug_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug.o(i.Debug_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Debug_Init &rArr; UART1_DRIVER_HwInit &rArr; UART1_GPIO_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DRIVER_HwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>Delayms</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(i.Delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPrameToLocal
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ShortPressDown
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ControlPin_Init
</UL>

<P><STRONG><a name="[bf]"></a>FLASH_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashWriteWordArray
</UL>

<P><STRONG><a name="[cc]"></a>FLASH_ClockInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, n32l40x_flash.o(i.FLASH_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[c1]"></a>FLASH_GetSTS</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_GetSTS))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[ca]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashWriteWordArray
</UL>

<P><STRONG><a name="[b0]"></a>FLASH_PrefetchBufSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_PrefetchBufSet))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[be]"></a>FLASH_ProgramWord</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, n32l40x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashWriteWordArrayAndCheck
</UL>

<P><STRONG><a name="[af]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[c8]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashWriteWordArray
</UL>

<P><STRONG><a name="[c0]"></a>FLASH_WaitForLastOpt</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, n32l40x_flash.o(i.FLASH_WaitForLastOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetSTS
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>

<P><STRONG><a name="[79]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 484 bytes, Stack size 20 bytes, n32l40x_gpio.o(i.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_HwInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Uart2_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ControlPin_Init
</UL>

<P><STRONG><a name="[78]"></a>GPIO_InitStruct</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_InitStruct))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_HwInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Uart2_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ControlPin_Init
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reversal
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ShortPressDown
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_SetPTGear
</UL>

<P><STRONG><a name="[89]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reversal
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ShortPressDown
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_SetPTGear
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvomentRevDataTimeout
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIN_RelayCtrl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayReset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHM_RelayCtrl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_HwInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ControlPin_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvomentRevDataTimeout
</UL>

<P><STRONG><a name="[c2]"></a>Get_ADC1_Value</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, adc1.o(i.Get_ADC1_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_ADC1_Value &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSoftwareStartConv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRegularChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimeCallBack
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>IAP_FlashReadWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iap.o(i.IAP_FlashReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashWriteWordArrayAndCheck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashReadWordArray
</UL>

<P><STRONG><a name="[c5]"></a>IAP_FlashReadWordArray</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, iap.o(i.IAP_FlashReadWordArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IAP_FlashReadWordArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPrameToLocal
</UL>

<P><STRONG><a name="[c7]"></a>IAP_FlashWriteWordArray</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, iap.o(i.IAP_FlashWriteWordArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IAP_FlashWriteWordArray &rArr; IAP_FlashWriteWordArrayAndCheck &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashWriteWordArrayAndCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteAppBin2
</UL>

<P><STRONG><a name="[c9]"></a>IAP_FlashWriteWordArrayAndCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, iap.o(i.IAP_FlashWriteWordArrayAndCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IAP_FlashWriteWordArrayAndCheck &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashWriteWordArray
</UL>

<P><STRONG><a name="[cb]"></a>IAP_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iap.o(i.IAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_Init &rArr; FLASH_ClockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>IAP_WriteAppBin2</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, iap.o(i.IAP_WriteAppBin2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IAP_WriteAppBin2 &rArr; IAP_FlashWriteWordArray &rArr; IAP_FlashWriteWordArrayAndCheck &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashWriteWordArray
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPrameToLocal
</UL>

<P><STRONG><a name="[d0]"></a>KEY_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = KEY_Init &rArr; ADC1_Init &rArr; ADC1_DEVICE_Config &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>KeyScanTimeCallBack</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, key.o(i.KeyScanTimeCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = KeyScanTimeCallBack &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_StitchGear
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC1_Value
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.KEY_Init)
</UL>
<P><STRONG><a name="[d1]"></a>LED_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LED_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>LED_Reversal</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led.o(i.LED_Reversal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Reversal
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvomentRevDataTimeout
</UL>

<P><STRONG><a name="[d2]"></a>LoadPrameToLocal</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iap.o(i.LoadPrameToLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LoadPrameToLocal &rArr; IAP_WriteAppBin2 &rArr; IAP_FlashWriteWordArray &rArr; IAP_FlashWriteWordArrayAndCheck &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteAppBin2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashReadWordArray
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>MesureType_SwitchToGears</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uartprotocol.o(i.MesureType_SwitchToGears))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[9b]"></a>MultimeterSendMsgToMaistr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, state.o(i.MultimeterSendMsgToMaistr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MultimeterSendMsgToMaistr &rArr; UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddFrame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ReportMeasureResultACK
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32l40x_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHse
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetIntStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigInt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Uart2_Init
</UL>

<P><STRONG><a name="[d7]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[d8]"></a>OHM_RelayCtrl</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, source_relay.o(i.OHM_RelayCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OHM_RelayCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[d5]"></a>RCC_ClrIntPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[7b]"></a>RCC_ConfigAdc1mClk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigAdc1mClk))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
</UL>

<P><STRONG><a name="[85]"></a>RCC_ConfigAdcHclk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigAdcHclk))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
</UL>

<P><STRONG><a name="[84]"></a>RCC_ConfigAdcPllClk</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigAdcPllClk))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
</UL>

<P><STRONG><a name="[ac]"></a>RCC_ConfigHclk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigHclk))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[aa]"></a>RCC_ConfigHse</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigHse))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[d4]"></a>RCC_ConfigInt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[ad]"></a>RCC_ConfigPclk1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigPclk1))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[ae]"></a>RCC_ConfigPclk2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigPclk2))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[b1]"></a>RCC_ConfigPll</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, n32l40x_rcc.o(i.RCC_ConfigPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_ConfigPll
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[b4]"></a>RCC_ConfigSysclk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigSysclk))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>RCC_DeInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[77]"></a>RCC_EnableAHBPeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAHBPeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
</UL>

<P><STRONG><a name="[a3]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAPB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Uart2_Init
</UL>

<P><STRONG><a name="[ea]"></a>RCC_EnableAPB1PeriphReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAPB1PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[76]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAPB2PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_HwInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DEVICE_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Uart2_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ControlPin_Init
</UL>

<P><STRONG><a name="[e9]"></a>RCC_EnableAPB2PeriphReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAPB2PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[b6]"></a>RCC_EnableHsi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableHsi))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[b2]"></a>RCC_EnablePll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnablePll))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 302 bytes, Stack size 20 bytes, n32l40x_rcc.o(i.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[b3]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32l40x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHseStable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHsiStable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>RCC_GetIntStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[b5]"></a>RCC_GetSysclkSrc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_GetSysclkSrc))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32l40x_it.o(i.RCC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_IRQHandler &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetIntStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClrIntPendingBit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>RCC_WaitHseStable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, n32l40x_rcc.o(i.RCC_WaitHseStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitHseStable &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[b7]"></a>RCC_WaitHsiStable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, n32l40x_rcc.o(i.RCC_WaitHsiStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitHsiStable &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>

<P><STRONG><a name="[da]"></a>RTC_TamperCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rtc.o(i.RTC_TamperCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_HwInit
</UL>

<P><STRONG><a name="[9c]"></a>RelayReset</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, source_relay.o(i.RelayReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RelayReset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_ReportMeasureResultACK
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[d9]"></a>Relay_HwInit</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, source_relay.o(i.Relay_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Relay_HwInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>SYSTEM_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system.o(i.SYSTEM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSTEM_Init &rArr; CLOCK_Configuration &rArr; RCC_WaitHseStable &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>SysRest</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uartprotocol.o(i.SysRest))
<BR>[Address Reference Count : 1]<UL><LI> uartprotocol.o(i.Uart2_CmdRstACK)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, system_n32l40x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, system_n32l40x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_IRQHandler &rArr; TIMER_CALLBACK_OnTimer &rArr; TIMER_AddToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CALLBACK_OnTimer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TIMER_AddTask</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, timer.o(i.TIMER_AddTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER_AddTask
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_CmdRstACK
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Init
</UL>

<P><STRONG><a name="[e2]"></a>TIMER_AddToQueue</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, timer.o(i.TIMER_AddToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_AddToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CALLBACK_OnTimer
</UL>

<P><STRONG><a name="[e1]"></a>TIMER_CALLBACK_OnTimer</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, timer.o(i.TIMER_CALLBACK_OnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_CALLBACK_OnTimer &rArr; TIMER_AddToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>TIMER_DoNothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.TIMER_DoNothing))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_Init)
</UL>
<P><STRONG><a name="[e3]"></a>TIMER_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, timer.o(i.TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER_Init &rArr; TIMER_InitTimerx &rArr; TIMx_INT_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartTimerx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitTimerx
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>TIMER_InitTimerx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i.TIMER_InitTimerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER_InitTimerx &rArr; TIMx_INT_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[108]"></a>TIMER_ResetTimer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TIMER_ResetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>TIMER_StartTimerx</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.TIMER_StartTimerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_StartTimerx
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[117]"></a>TIMER_TaskQueueProcess</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timer.o(i.TIMER_TaskQueueProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_TaskQueueProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>TIM_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[e0]"></a>TIM_ClrIntPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>TIM_ConfigInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[e8]"></a>TIM_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, n32l40x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[e7]"></a>TIM_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartTimerx
</UL>

<P><STRONG><a name="[df]"></a>TIM_GetIntStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, n32l40x_tim.o(i.TIM_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>TIM_InitTimeBase</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_InitTimeBase))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[e6]"></a>TIMx_INT_Init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, timer.o(i.TIMx_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMx_INT_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitTimerx
</UL>

<P><STRONG><a name="[55]"></a>UART_DRIVE_AddTxArray</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, uartdrive.o(i.UART_DRIVE_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DRIVE_AddTxArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartprotocol.o(i.UART_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[ef]"></a>UART_DRIVE_BC_SendData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_BC_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DRIVE_BC_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_BC_StartTx
</UL>

<P><STRONG><a name="[f2]"></a>UART_DRIVE_BC_StartTx</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, uartdrive.o(i.UART_DRIVE_BC_StartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_DRIVE_BC_StartTx &rArr; UART_DRIVE_BC_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_BC_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_TxProcess
</UL>

<P><STRONG><a name="[f5]"></a>UART_DRIVE_DataStructInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DRIVE_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Init
</UL>

<P><STRONG><a name="[f3]"></a>UART_DRIVE_HwInit</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, uartdrive.o(i.UART_DRIVE_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART_DRIVE_HwInit &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Init
</UL>

<P><STRONG><a name="[f4]"></a>UART_DRIVE_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UART_DRIVE_Init &rArr; UART_DRIVE_HwInit &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>UART_DRIVE_Process</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_DRIVE_Process &rArr; UART_DRIVE_TxProcess &rArr; UART_DRIVE_BC_StartTx &rArr; UART_DRIVE_BC_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_TxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>UART_DRIVE_RegisterDataSendService</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uartdrive.o(i.UART_DRIVE_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[f7]"></a>UART_DRIVE_TxProcess</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_TxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_DRIVE_TxProcess &rArr; UART_DRIVE_BC_StartTx &rArr; UART_DRIVE_BC_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_BC_StartTx
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Process
</UL>

<P><STRONG><a name="[f8]"></a>UART_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, uartprotocol.o(i.UART_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_PROTOCOL_CmdFrameProcess &rArr; Uart2_CmdRstACK &rArr; APP_ReportMsg &rArr; UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIN_RelayCtrl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayReset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHM_RelayCtrl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_StitchGear
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_CmdRstACK
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_CmdAskVersionACK
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MesureType_SwitchToGears
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReportMsg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[105]"></a>UART_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uartprotocol.o(i.UART_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[fe]"></a>UART_PROTOCOL_DataStructInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, uartprotocol.o(i.UART_PROTOCOL_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[fd]"></a>UART_PROTOCOL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uartprotocol.o(i.UART_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_PROTOCOL_Init &rArr; UART_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_RegisterDataSendService
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_DataStructInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_RegisterDataSendService
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>UART_PROTOCOL_MacProcess</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, uartprotocol.o(i.UART_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_PROTOCOL_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartprotocol.o(i.UART_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[101]"></a>UART_PROTOCOL_Process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uartprotocol.o(i.UART_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_PROTOCOL_Process &rArr; UART_PROTOCOL_CmdFrameProcess &rArr; Uart2_CmdRstACK &rArr; APP_ReportMsg &rArr; UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxStateProcess
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_RxFIFOProcess
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>UART_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uartprotocol.o(i.UART_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[102]"></a>UART_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, uartprotocol.o(i.UART_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_PROTOCOL_RxFIFOProcess &rArr; UART_CheckSUM_
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckSUM_
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[87]"></a>UART_PROTOCOL_TxAddData</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uartprotocol.o(i.UART_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultimeterSendMsgToMaistr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReportMsg
</UL>

<P><STRONG><a name="[88]"></a>UART_PROTOCOL_TxAddFrame</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, uartprotocol.o(i.UART_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultimeterSendMsgToMaistr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReportMsg
</UL>

<P><STRONG><a name="[103]"></a>UART_PROTOCOL_TxStateProcess</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, uartprotocol.o(i.UART_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, debug.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, metercontrol.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uartdrive.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>USART_ConfigInt</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, n32l40x_usart.o(i.USART_ConfigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Uart2_Init
</UL>

<P><STRONG><a name="[a6]"></a>USART_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Uart2_Init
</UL>

<P><STRONG><a name="[f1]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_BC_SendData
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>USART_GetIntStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, n32l40x_usart.o(i.USART_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>USART_Init</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, n32l40x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Uart2_Init
</UL>

<P><STRONG><a name="[107]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32l40x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_BC_SendData
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f9]"></a>Uart2_CmdAskVersionACK</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, uartprotocol.o(i.Uart2_CmdAskVersionACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uart2_CmdAskVersionACK &rArr; APP_ReportMsg &rArr; UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReportMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[fa]"></a>Uart2_CmdRstACK</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uartprotocol.o(i.Uart2_CmdRstACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Uart2_CmdRstACK &rArr; APP_ReportMsg &rArr; UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReportMsg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>VIN_RelayCtrl</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, source_relay.o(i.VIN_RelayCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VIN_RelayCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[10a]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
</UL>

<P><STRONG><a name="[12f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[130]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[11a]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[10c]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[10d]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[10e]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[10f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[110]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[112]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[131]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[132]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[118]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[57]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, debug.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[cf]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteAppBin2
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = main &rArr; Avoment_Process &rArr; Avoment_RevDataParse &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TaskQueueProcess
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_HwInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPrameToLocal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Process
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ce]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteAppBin2
</UL>

<P><STRONG><a name="[9f]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Avoment_RevDataParse
</UL>

<P><STRONG><a name="[119]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[dd]"></a>SetSysClock</STRONG> (Thumb, 218 bytes, Stack size 12 bytes, system_n32l40x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigMRVoltage1V
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a8]"></a>CLOCK_Configuration</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, system.o(i.CLOCK_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_Configuration &rArr; RCC_WaitHseStable &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHseStable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHse
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHsiStable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePll
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableHsi
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPll
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHclk
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[d6]"></a>NVIC_Configuration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[104]"></a>UART_CheckSUM_</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, uartprotocol.o(i.UART_CheckSUM_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_CheckSUM_
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[bd]"></a>UART1_DRIVER_HwInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug.o(i.UART1_DRIVER_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UART1_DRIVER_HwInit &rArr; UART1_GPIO_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Init
</UL>

<P><STRONG><a name="[ee]"></a>UART1_GPIO_Config</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, debug.o(i.UART1_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART1_GPIO_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DRIVER_HwInit
</UL>

<P><STRONG><a name="[75]"></a>ADC1_DEVICE_Config</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, adc1.o(i.ADC1_DEVICE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC1_DEVICE_Config &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatusNew
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSoftwareStartConv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRegularChannel
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdc1mClk
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[113]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10b]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[115]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[114]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
