<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\APP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\APP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Oct 22 15:35:22 2024
<BR><P>
<H3>Maximum Stack Usage =        392 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; STATE_Process &rArr; STEP_Process_SegUartUpgrade &rArr; uartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0_1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[39]">ADC2_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[49]">ADC_CALLBACK_SetScanRequest</a> from adc.o(i.ADC_CALLBACK_SetScanRequest) referenced from adc.o(i.ADC_Start)
 <LI><a href="#[4a]">AVO_PROTOCOL_MacProcess</a> from avoprotocol.o(i.AVO_PROTOCOL_MacProcess) referenced from avoprotocol.o(i.AVO_PROTOCOL_Init)
 <LI><a href="#[4b]">AVO_UART_AddTxArray</a> from avodrive.o(i.AVO_UART_AddTxArray) referenced from avoprotocol.o(i.AVO_PROTOCOL_Init)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32f10x_it.o(i.BusFault_Handler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[4d]">CAN_DRIVE_AddTxArray</a> from canprotocolupdt.o(i.CAN_DRIVE_AddTxArray) referenced from canprotocol_3a.o(i.CAN_PROTOCOL1_Init)
 <LI><a href="#[4d]">CAN_DRIVE_AddTxArray</a> from canprotocolupdt.o(i.CAN_DRIVE_AddTxArray) referenced from canprotocolupgb.o(i.CAN_PROTOCOL_Init)
 <LI><a href="#[56]">CAN_PROTOCOL1_SendCmdChangeColor</a> from canprotocol_3a.o(i.CAN_PROTOCOL1_SendCmdChangeColor) referenced from state.o(i.STEP_Process_CmCanUpgrade)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from spiflash.o(i.DMA0_Channel1_IRQHandler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from spiflash.o(i.DMA0_Channel2_IRQHandler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[42]">DMA1_Channel0_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[45]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[4e]">DUT_PROTOCOL_MacProcess</a> from dutuartprotocol.o(i.DUT_PROTOCOL_MacProcess) referenced from dutuartprotocol.o(i.DUT_PROTOCOL_Init)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32f10x_it.o(i.DebugMon_Handler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[53]">DutTimeOut</a> from stsprotocol.o(i.DutTimeOut) referenced from main.o(i.Key_Info)
 <LI><a href="#[53]">DutTimeOut</a> from stsprotocol.o(i.DutTimeOut) referenced 2 times from stsprotocol.o(i.STS_PROTOCOL_CmdFrameProcess)
 <LI><a href="#[3a]">EXMC_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32f10x_it.o(i.HardFault_Handler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[59]">IAP_JumpToAppFun</a> from iap.o(i.IAP_JumpToAppFun) referenced from stsprotocol.o(i.STS_PROTOCOL_CmdFrameProcess)
 <LI><a href="#[50]">KEYMSG_CALLBACK_Scan</a> from keymsgprocess.o(i.KEYMSG_CALLBACK_Scan) referenced from keymsgprocess.o(i.KEYMSG_Init)
 <LI><a href="#[51]">KEYMSG_ServiceDoNothing</a> from keymsgprocess.o(i.KEYMSG_ServiceDoNothing) referenced from keymsgprocess.o(i.KEYMSG_StopAllService)
 <LI><a href="#[52]">KEY_CALLBACK_Scan</a> from key.o(i.KEY_CALLBACK_Scan) referenced from key.o(i.KEY_Init)
 <LI><a href="#[60]">Key_Info</a> from main.o(i.Key_Info) referenced from main.o(i.main)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32f10x_it.o(i.MemManage_Handler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32f10x_it.o(i.NMI_Handler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[58]">OperateVerTimeOut</a> from stsprotocol.o(i.OperateVerTimeOut) referenced from stsprotocol.o(i.STS_PROTOCOL_CmdFrameProcess)
 <LI><a href="#[54]">POWER_PROTOCOL_MacProcess</a> from powerprotocol.o(i.POWER_PROTOCOL_MacProcess) referenced from powerprotocol.o(i.POWER_PROTOCOL_Init)
 <LI><a href="#[55]">POWER_UART_AddTxArray</a> from powerdrive.o(i.POWER_UART_AddTxArray) referenced from powerprotocol.o(i.POWER_PROTOCOL_Init)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32f10x_it.o(i.PendSV_Handler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[f]">RCU_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[61]">Report_Identity</a> from stsprotocol.o(i.Report_Identity) referenced from main.o(i.main)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.All_GND_Test)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from canprotocolupdt.o(i.CAN_CmdFrameProcess)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from powerprotocol.o(i.POWER_PROTOCOL_CmdFrameProcess)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_BrakeCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_BrakeUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_CalibrationCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_CalibrationUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced 2 times from state.o(i.STEP_Process_CmCanUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_DerailleurCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_DerailleurUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_HbeamCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_HbeamUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_HeadLightCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_HeadLightUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_LbeamCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_LbeamUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_Left_TurnSignalCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_Left_TurnSignalUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_Right_TurnSignalCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_Right_TurnSignalUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_SegUartUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_ThrottleCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_ThrottleUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_VlkCanTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_VlkUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_XM_BrakeUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_XM_HeadLightUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_XM_Left_TurnSignalUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_XM_Right_TurnSignalUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_XM_ThrottleUartTest)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.UART_Test)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.addTimeOutTimer)
 <LI><a href="#[5a]">STS_PROTOCOL_MacProcess</a> from stsprotocol.o(i.STS_PROTOCOL_MacProcess) referenced from stsprotocol.o(i.STS_PROTOCOL_Init)
 <LI><a href="#[5b]">STS_UART_AddTxArray</a> from stsdrive.o(i.STS_UART_AddTxArray) referenced from stsprotocol.o(i.STS_PROTOCOL_Init)
 <LI><a href="#[6]">SVC_Handler</a> from gd32f10x_it.o(i.SVC_Handler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_gd32f10x.o(i.SystemInit) referenced from startup_gd32f10x_xd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[3c]">TIMER4_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[40]">TIMER5_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[41]">TIMER6_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[5c]">TIMER_DoNothing</a> from timer.o(i.TIMER_DoNothing) referenced from timer.o(i.TIMER_Init)
 <LI><a href="#[5c]">TIMER_DoNothing</a> from timer.o(i.TIMER_DoNothing) referenced from timer.o(i.TIMER_KillTask)
 <LI><a href="#[3e]">UART3_IRQHandler</a> from dutuartdrive.o(i.UART3_IRQHandler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[4f]">UART_DRIVE_AddTxArray</a> from dutuartdrive.o(i.UART_DRIVE_AddTxArray) referenced from dutuartprotocol.o(i.DUT_PROTOCOL_Init)
 <LI><a href="#[4f]">UART_DRIVE_AddTxArray</a> from dutuartdrive.o(i.UART_DRIVE_AddTxArray) referenced from uartprotocol3.o(i.UART_PROTOCOL4_Init)
 <LI><a href="#[4f]">UART_DRIVE_AddTxArray</a> from dutuartdrive.o(i.UART_DRIVE_AddTxArray) referenced from uartprotocol.o(i.UART_PROTOCOL_Init)
 <LI><a href="#[4f]">UART_DRIVE_AddTxArray</a> from dutuartdrive.o(i.UART_DRIVE_AddTxArray) referenced from uartprotocolxm.o(i.UART_PROTOCOL_XM_Init)
 <LI><a href="#[5d]">UART_PROTOCOL4_MacProcess</a> from uartprotocol3.o(i.UART_PROTOCOL4_MacProcess) referenced from uartprotocol3.o(i.UART_PROTOCOL4_Init)
 <LI><a href="#[5e]">UART_PROTOCOL_XM_MacProcess</a> from uartprotocolxm.o(i.UART_PROTOCOL_XM_MacProcess) referenced from uartprotocolxm.o(i.UART_PROTOCOL_XM_Init)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from avodrive.o(i.USART0_IRQHandler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from stsdrive.o(i.USART1_IRQHandler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from powerdrive.o(i.USART2_IRQHandler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[1d]">USBD_HP_CAN0_TX_IRQHandler</a> from canprotocoltest.o(i.USBD_HP_CAN0_TX_IRQHandler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[1e]">USBD_LP_CAN0_RX0_IRQHandler</a> from canprotocoltest.o(i.USBD_LP_CAN0_RX0_IRQHandler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[34]">USBD_WKUP_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32f10x_it.o(i.UsageFault_Handler) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f10x_xd.o(.text) referenced from startup_gd32f10x_xd.o(RESET)
 <LI><a href="#[57]">WriteFlagTimeOut</a> from stsprotocol.o(i.WriteFlagTimeOut) referenced from stsprotocol.o(i.STS_PROTOCOL_CmdFrameProcess)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f10x_xd.o(.text)
 <LI><a href="#[5f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[5f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(.text)
</UL>
<P><STRONG><a name="[214]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[62]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[75]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[215]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[216]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[217]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[218]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[219]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[21a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_DataStructInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CURRENT_Read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ADC_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ADC_Read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ea]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[127]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
</UL>

<P><STRONG><a name="[12d]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
</UL>

<P><STRONG><a name="[e7]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[220]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[63]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[222]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[223]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[224]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[225]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[226]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>ADC_AddDataToBuff</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, adc.o(i.ADC_AddDataToBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_AddDataToBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Process
</UL>

<P><STRONG><a name="[76]"></a>ADC_BaseInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(i.ADC_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_BaseInit &rArr; ADC_LevelHwInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InitStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>ADC_CALLBACK_SetScanRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.ADC_CALLBACK_SetScanRequest))
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.ADC_Start)
</UL>
<P><STRONG><a name="[7a]"></a>ADC_HwInit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, avopin.o(i.ADC_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_HwInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>ADC_InitStruct</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, adc.o(i.ADC_InitStruct))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BaseInit
</UL>

<P><STRONG><a name="[77]"></a>ADC_LevelHwInit</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, adc.o(i.ADC_LevelHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_LevelHwInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BaseInit
</UL>

<P><STRONG><a name="[8a]"></a>ADC_Process</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, adc.o(i.ADC_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Process &rArr; ADC_AddDataToBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_data_read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddDataToBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>ADC_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adc.o(i.ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_Start &rArr; TIMER_KillTask
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BaseInit
</UL>

<P><STRONG><a name="[90]"></a>AVO_PIN_Init</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, avopin.o(i.AVO_PIN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AVO_PIN_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>AVO_PIN_Reset</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, avopin.o(i.AVO_PIN_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AVO_PIN_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_CmdFrameProcess
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
</UL>

<P><STRONG><a name="[9d]"></a>AVO_PROTOCOL_CheckSUM</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, avoprotocol.o(i.AVO_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AVO_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[93]"></a>AVO_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 1162 bytes, Stack size 32 bytes, avoprotocol.o(i.AVO_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AVO_PROTOCOL_CmdFrameProcess &rArr; Vertical_Scrolling_Display &rArr; Display_YX &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Process
</UL>

<P><STRONG><a name="[9e]"></a>AVO_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, avoprotocol.o(i.AVO_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[97]"></a>AVO_PROTOCOL_DataStructInit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, avoprotocol.o(i.AVO_PROTOCOL_DataStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Init
</UL>

<P><STRONG><a name="[96]"></a>AVO_PROTOCOL_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, avoprotocol.o(i.AVO_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AVO_PROTOCOL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_RegisterDataSendService
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_DataStructInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_RegisterDataSendService
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>AVO_PROTOCOL_MacProcess</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, avoprotocol.o(i.AVO_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVO_PROTOCOL_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avoprotocol.o(i.AVO_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[9a]"></a>AVO_PROTOCOL_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, avoprotocol.o(i.AVO_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AVO_PROTOCOL_Process &rArr; AVO_PROTOCOL_CmdFrameProcess &rArr; Vertical_Scrolling_Display &rArr; Display_YX &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_TxStateProcess
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_RxFIFOProcess
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>AVO_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, avoprotocol.o(i.AVO_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Init
</UL>

<P><STRONG><a name="[9b]"></a>AVO_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, avoprotocol.o(i.AVO_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AVO_PROTOCOL_RxFIFOProcess &rArr; AVO_PROTOCOL_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Process
</UL>

<P><STRONG><a name="[9f]"></a>AVO_PROTOCOL_Send_Type_Chl</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, avoprotocol.o(i.AVO_PROTOCOL_Send_Type_Chl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AVO_PROTOCOL_Send_Type_Chl &rArr; AVO_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_TxAddFrame
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
</UL>

<P><STRONG><a name="[a0]"></a>AVO_PROTOCOL_TxAddData</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, avoprotocol.o(i.AVO_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AVO_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
</UL>

<P><STRONG><a name="[a1]"></a>AVO_PROTOCOL_TxAddFrame</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, avoprotocol.o(i.AVO_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AVO_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
</UL>

<P><STRONG><a name="[9c]"></a>AVO_PROTOCOL_TxStateProcess</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, avoprotocol.o(i.AVO_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVO_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Process
</UL>

<P><STRONG><a name="[4b]"></a>AVO_UART_AddTxArray</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, avodrive.o(i.AVO_UART_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVO_UART_AddTxArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avoprotocol.o(i.AVO_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[b2]"></a>AVO_UART_DataStructureInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, avodrive.o(i.AVO_UART_DataStructureInit))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_Init
</UL>

<P><STRONG><a name="[a2]"></a>AVO_UART_HwInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, avodrive.o(i.AVO_UART_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AVO_UART_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_Init
</UL>

<P><STRONG><a name="[af]"></a>AVO_UART_IR_StartSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, avodrive.o(i.AVO_UART_IR_StartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVO_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_TxProcess
</UL>

<P><STRONG><a name="[b1]"></a>AVO_UART_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, avodrive.o(i.AVO_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AVO_UART_Init &rArr; AVO_UART_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>AVO_UART_Process</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, avodrive.o(i.AVO_UART_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AVO_UART_Process &rArr; AVO_UART_TxProcess &rArr; AVO_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_TxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>AVO_UART_RegisterDataSendService</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, avodrive.o(i.AVO_UART_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Init
</UL>

<P><STRONG><a name="[b4]"></a>AVO_UART_TxProcess</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, avodrive.o(i.AVO_UART_TxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AVO_UART_TxProcess &rArr; AVO_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_IR_StartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_Process
</UL>

<P><STRONG><a name="[b5]"></a>All_GND_Test</STRONG> (Thumb, 928 bytes, Stack size 24 bytes, state.o(i.All_GND_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = All_GND_Test &rArr; Display_YX_Format &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>CAN_AddSum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, canprotocolupdt.o(i.CAN_AddSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_AddSum
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddFrame
</UL>

<P><STRONG><a name="[e4]"></a>CAN_CheckSum</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, canprotocolupdt.o(i.CAN_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxFIFOProcess
</UL>

<P><STRONG><a name="[bd]"></a>CAN_CmdFrameProcess</STRONG> (Thumb, 1224 bytes, Stack size 48 bytes, canprotocolupdt.o(i.CAN_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN_CmdFrameProcess &rArr; TIMER_KillTask
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_DT
</UL>

<P><STRONG><a name="[e5]"></a>CAN_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, canprotocolupdt.o(i.CAN_ConfirmTempCmdFrameBuff))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxFIFOProcess
</UL>

<P><STRONG><a name="[4d]"></a>CAN_DRIVE_AddTxArray</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, canprotocolupdt.o(i.CAN_DRIVE_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_DRIVE_AddTxArray
</UL>
<BR>[Address Reference Count : 2]<UL><LI> canprotocolupgb.o(i.CAN_PROTOCOL_Init)
<LI> canprotocol_3a.o(i.CAN_PROTOCOL1_Init)
</UL>
<P><STRONG><a name="[12e]"></a>CAN_DataStructureInit</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, canprotocolupdt.o(i.CAN_DataStructureInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
</UL>

<P><STRONG><a name="[be]"></a>CAN_HW_Init</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, canprotocolupdt.o(i.CAN_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
</UL>

<P><STRONG><a name="[1ff]"></a>CAN_MacProcess</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, canprotocolupdt.o(i.CAN_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>CAN_PROTOCOL1_CheckSUM</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_PROTOCOL1_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_RxFIFOProcess
</UL>

<P><STRONG><a name="[c5]"></a>CAN_PROTOCOL1_CmdFrameProcess</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_PROTOCOL1_CmdFrameProcess &rArr; STS_UART_AddTxArray
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_AddTxArray
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_3A
</UL>

<P><STRONG><a name="[cb]"></a>CAN_PROTOCOL1_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_ConfirmTempCmdFrameBuff))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_RxFIFOProcess
</UL>

<P><STRONG><a name="[c7]"></a>CAN_PROTOCOL1_DataStructInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_DataStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
</UL>

<P><STRONG><a name="[c6]"></a>CAN_PROTOCOL1_Init</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CAN_PROTOCOL1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_RegisterDataSendService
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[1fe]"></a>CAN_PROTOCOL1_MacProcess</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_PROTOCOL1_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>CAN_PROTOCOL1_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
</UL>

<P><STRONG><a name="[c9]"></a>CAN_PROTOCOL1_RxFIFOProcess</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_PROTOCOL1_RxFIFOProcess &rArr; CAN_PROTOCOL1_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_ConfirmTempCmdFrameBuff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_3A
</UL>

<P><STRONG><a name="[56]"></a>CAN_PROTOCOL1_SendCmdChangeColor</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_SendCmdChangeColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_PROTOCOL1_SendCmdChangeColor &rArr; CAN_PROTOCOL1_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddFrame
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state.o(i.STEP_Process_CmCanUpgrade)
</UL>
<P><STRONG><a name="[cc]"></a>CAN_PROTOCOL1_TxAddData</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_PROTOCOL1_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdChangeColor
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[cd]"></a>CAN_PROTOCOL1_TxAddFrame</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_PROTOCOL1_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdChangeColor
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[d2]"></a>CAN_PROTOCOL1_TxStateProcess</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_PROTOCOL1_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_3A
</UL>

<P><STRONG><a name="[ce]"></a>CAN_PROTOCOL_DataStructInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Init
</UL>

<P><STRONG><a name="[cf]"></a>CAN_PROTOCOL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_PROTOCOL_Init &rArr; CAN_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_RegisterDataSendService
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_DataStructInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
</UL>

<P><STRONG><a name="[202]"></a>CAN_PROTOCOL_MacProcess</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_PROTOCOL_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>CAN_PROTOCOL_Process_3A</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canprotocol_3a.o(i.CAN_PROTOCOL_Process_3A))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_PROTOCOL_Process_3A &rArr; CAN_PROTOCOL1_RxFIFOProcess &rArr; CAN_PROTOCOL1_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxStateProcess
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_RxFIFOProcess
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>CAN_PROTOCOL_Process_DT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canprotocolupdt.o(i.CAN_PROTOCOL_Process_DT))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CAN_PROTOCOL_Process_DT &rArr; CAN_CmdFrameProcess &rArr; TIMER_KillTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateProcess
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxFIFOProcess
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[d6]"></a>CAN_PROTOCOL_Process_Test</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canprotocoltest.o(i.CAN_PROTOCOL_Process_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CAN_PROTOCOL_Process_Test &rArr; CAN_TEST_CmdFrameProcess &rArr; Vertical_Scrolling_Display &rArr; Display_YX &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_TxStateProcess
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_RxFIFOProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>CAN_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Init
</UL>

<P><STRONG><a name="[da]"></a>CAN_PROTOCOL_TEST_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, canprotocoltest.o(i.CAN_PROTOCOL_TEST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAN_PROTOCOL_TEST_Init &rArr; CAN_TEST_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_TxStateInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[de]"></a>CAN_PROTOCOL_TEST_SendCmdAck</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, canprotocoltest.o(i.CAN_PROTOCOL_TEST_SendCmdAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_PROTOCOL_TEST_SendCmdAck &rArr; CAN_PROTOCOL_TEST_TxAddFrame &rArr; CAN_TEST_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_TxAddFrame
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_SendCmdAck
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[e1]"></a>CAN_PROTOCOL_TEST_SendCmdParamAck</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, canprotocoltest.o(i.CAN_PROTOCOL_TEST_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_PROTOCOL_TEST_SendCmdParamAck &rArr; CAN_PROTOCOL_TEST_TxAddFrame &rArr; CAN_TEST_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_TxAddFrame
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_SendCmdParamAck
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[df]"></a>CAN_PROTOCOL_TEST_TxAddData</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, canprotocoltest.o(i.CAN_PROTOCOL_TEST_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_PROTOCOL_TEST_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_WriteFlag
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdParamAck
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdAck
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[e0]"></a>CAN_PROTOCOL_TEST_TxAddFrame</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, canprotocoltest.o(i.CAN_PROTOCOL_TEST_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_PROTOCOL_TEST_TxAddFrame &rArr; CAN_TEST_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_AddSum
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_WriteFlag
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdParamAck
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdAck
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[e3]"></a>CAN_PROTOCOL_TEST_WriteFlag</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, canprotocoltest.o(i.CAN_PROTOCOL_TEST_WriteFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_PROTOCOL_TEST_WriteFlag &rArr; CAN_PROTOCOL_TEST_TxAddFrame &rArr; CAN_TEST_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_TxAddFrame
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_WriteFlag
</UL>

<P><STRONG><a name="[d4]"></a>CAN_RxFIFOProcess</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, canprotocolupdt.o(i.CAN_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_RxFIFOProcess &rArr; CAN_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfirmTempCmdFrameBuff
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_DT
</UL>

<P><STRONG><a name="[e2]"></a>CAN_TEST_AddSum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, canprotocoltest.o(i.CAN_TEST_AddSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TEST_AddSum
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_TxAddFrame
</UL>

<P><STRONG><a name="[f0]"></a>CAN_TEST_CheckSum</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, canprotocoltest.o(i.CAN_TEST_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_TEST_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_RxFIFOProcess
</UL>

<P><STRONG><a name="[d8]"></a>CAN_TEST_CmdFrameProcess</STRONG> (Thumb, 1816 bytes, Stack size 152 bytes, canprotocoltest.o(i.CAN_TEST_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CAN_TEST_CmdFrameProcess &rArr; Vertical_Scrolling_Display &rArr; Display_YX &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChangeTime
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_AddTxArray
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamTwoAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToChar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdParamAck
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdAck
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_Test
</UL>

<P><STRONG><a name="[f1]"></a>CAN_TEST_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, canprotocoltest.o(i.CAN_TEST_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TEST_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_RxFIFOProcess
</UL>

<P><STRONG><a name="[1b8]"></a>CAN_TEST_DRIVE_AddTxArray</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, canprotocoltest.o(i.CAN_TEST_DRIVE_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_TEST_DRIVE_AddTxArray
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_MacProcess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[dc]"></a>CAN_TEST_DataStructureInit</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, canprotocoltest.o(i.CAN_TEST_DataStructureInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_TEST_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
</UL>

<P><STRONG><a name="[db]"></a>CAN_TEST_HW_Init</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, canprotocoltest.o(i.CAN_TEST_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN_TEST_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
</UL>

<P><STRONG><a name="[200]"></a>CAN_TEST_MacProcess</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, canprotocoltest.o(i.CAN_TEST_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_TEST_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>CAN_TEST_RxFIFOProcess</STRONG> (Thumb, 362 bytes, Stack size 28 bytes, canprotocoltest.o(i.CAN_TEST_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_TEST_RxFIFOProcess &rArr; CAN_TEST_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_ConfirmTempCmdFrameBuff
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_Test
</UL>

<P><STRONG><a name="[f2]"></a>CAN_TEST_TxEnterState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, canprotocoltest.o(i.CAN_TEST_TxEnterState))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_Tx_FillAndSend
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_TxStateProcess
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_TxStateInit
</UL>

<P><STRONG><a name="[dd]"></a>CAN_TEST_TxStateInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canprotocoltest.o(i.CAN_TEST_TxStateInit))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_TxEnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
</UL>

<P><STRONG><a name="[d9]"></a>CAN_TEST_TxStateProcess</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, canprotocoltest.o(i.CAN_TEST_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CAN_TEST_TxStateProcess &rArr; CAN_TEST_Tx_FillAndSend &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_Tx_FillAndSend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_TxEnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_Test
</UL>

<P><STRONG><a name="[f3]"></a>CAN_TEST_Tx_FillAndSend</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, canprotocoltest.o(i.CAN_TEST_Tx_FillAndSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_TEST_Tx_FillAndSend &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_TxEnterState
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_TxStateProcess
</UL>

<P><STRONG><a name="[1fb]"></a>CAN_TEST_Tx_NextFram</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, canprotocoltest.o(i.CAN_TEST_Tx_NextFram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TEST_Tx_NextFram
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>CAN_TxEnterState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, canprotocolupdt.o(i.CAN_TxEnterState))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateProcess
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateInit
</UL>

<P><STRONG><a name="[f5]"></a>CAN_TxStateInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canprotocolupdt.o(i.CAN_TxStateInit))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxEnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
</UL>

<P><STRONG><a name="[d5]"></a>CAN_TxStateProcess</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, canprotocolupdt.o(i.CAN_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CAN_TxStateProcess &rArr; CAN_Tx_FillAndSend &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxEnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_DT
</UL>

<P><STRONG><a name="[f7]"></a>CAN_Tx_FillAndSend</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, canprotocolupdt.o(i.CAN_Tx_FillAndSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_Tx_FillAndSend &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxEnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateProcess
</UL>

<P><STRONG><a name="[1fc]"></a>CAN_Tx_NextFram</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, canprotocolupdt.o(i.CAN_Tx_NextFram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Tx_NextFram
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>CHANGE_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dutuartdrive.o(i.CHANGE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CHANGE_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[b6]"></a>Clear_All_Lines</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd2004.o(i.Clear_All_Lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Clear_All_Lines &rArr; Clear_Line &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[f9]"></a>Clear_Line</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lcd2004.o(i.Clear_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Clear_Line &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
</UL>

<P><STRONG><a name="[fb]"></a>DAC0_output</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, avopin.o(i.DAC0_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC0_output
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_software_trigger_enable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
</UL>

<P><STRONG><a name="[ff]"></a>DAC1_output</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, avopin.o(i.DAC1_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC1_output
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_software_trigger_enable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
</UL>

<P><STRONG><a name="[100]"></a>DAC_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, avopin.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DAC_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_wave_mode_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_disable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_output_buffer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spiflash.o(i.DMA0_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA0_Channel1_IRQHandler &rArr; dma_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_disable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spiflash.o(i.DMA0_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA0_Channel2_IRQHandler &rArr; dma_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_disable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>DUTCTRL_BusInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dutctl.o(i.DUTCTRL_BusInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DUTCTRL_BusInit &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>DUT_PROTOCOL_CheckSUM</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DUT_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[117]"></a>DUT_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 1824 bytes, Stack size 144 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DUT_PROTOCOL_CmdFrameProcess &rArr; Vertical_Scrolling_Display &rArr; Display_YX &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChangeTime
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_AddTxArray
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamTwoAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToChar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdAck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[120]"></a>DUT_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[11b]"></a>DUT_PROTOCOL_DataStructInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_DataStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
</UL>

<P><STRONG><a name="[11a]"></a>DUT_PROTOCOL_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DUT_PROTOCOL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_RegisterDataSendService
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_DataStructInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_RegisterDataSendService
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[4e]"></a>DUT_PROTOCOL_MacProcess</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DUT_PROTOCOL_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dutuartprotocol.o(i.DUT_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[11d]"></a>DUT_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
</UL>

<P><STRONG><a name="[11e]"></a>DUT_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DUT_PROTOCOL_RxFIFOProcess &rArr; DUT_PROTOCOL_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[118]"></a>DUT_PROTOCOL_SendCmdAck</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_SendCmdAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DUT_PROTOCOL_SendCmdAck &rArr; DUT_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddFrame
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_SendCmdAck
</UL>

<P><STRONG><a name="[119]"></a>DUT_PROTOCOL_SendCmdParamAck</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DUT_PROTOCOL_SendCmdParamAck &rArr; DUT_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddFrame
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_SendCmdParamAck
</UL>

<P><STRONG><a name="[123]"></a>DUT_PROTOCOL_SendCmdTwoParamAck</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_SendCmdTwoParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DUT_PROTOCOL_SendCmdTwoParamAck &rArr; DUT_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddFrame
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
</UL>

<P><STRONG><a name="[121]"></a>DUT_PROTOCOL_TxAddData</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DUT_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_WriteFlag
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdTwoParamAck
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdAck
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[122]"></a>DUT_PROTOCOL_TxAddFrame</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DUT_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_WriteFlag
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdTwoParamAck
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdAck
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[126]"></a>DUT_PROTOCOL_TxStateProcess</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DUT_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[124]"></a>DUT_PROTOCOL_WriteFlag</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, dutuartprotocol.o(i.DUT_PROTOCOL_WriteFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DUT_PROTOCOL_WriteFlag &rArr; DUT_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddFrame
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_WriteFlag
</UL>

<P><STRONG><a name="[125]"></a>DUT_UART_PROTOCOL_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dutuartprotocol.o(i.DUT_UART_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DUT_UART_PROTOCOL_Process &rArr; DUT_PROTOCOL_CmdFrameProcess &rArr; Vertical_Scrolling_Display &rArr; Display_YX &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxStateProcess
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_RxFIFOProcess
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>Delayms</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, avopin.o(i.Delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_lcd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[b7]"></a>Display_Centered</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd2004.o(i.Display_Centered))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display_Centered &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_lcd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[128]"></a>Display_YX</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lcd2004.o(i.Display_YX))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display_YX &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
</UL>

<P><STRONG><a name="[ba]"></a>Display_YX_Format</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, lcd2004.o(i.Display_YX_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Display_YX_Format &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_lcd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
</UL>

<P><STRONG><a name="[12a]"></a>DutInfoUpdata</STRONG> (Thumb, 858 bytes, Stack size 144 bytes, dutinfo.o(i.DutInfoUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DutInfoUpdata &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Init
</UL>

<P><STRONG><a name="[53]"></a>DutTimeOut</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stsprotocol.o(i.DutTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DutTimeOut &rArr; STS_PROTOCOL_SendCmdParamAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.Key_Info)
<LI> stsprotocol.o(i.STS_PROTOCOL_CmdFrameProcess)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>HexToChar</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stringoperation.o(i.HexToChar))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[1f3]"></a>HexToCharHigh</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stringoperation.o(i.HexToCharHigh))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
</UL>

<P><STRONG><a name="[1f4]"></a>HexToCharLow</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stringoperation.o(i.HexToCharLow))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
</UL>

<P><STRONG><a name="[113]"></a>IAP_CTRL_CAN_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[12f]"></a>IAP_CTRL_CAN_SendCmdNoAck</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_SendCmdNoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IAP_CTRL_CAN_SendCmdNoAck &rArr; IAP_CTRL_CAN_TxAddFrame &rArr; CAN_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddFrame
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[132]"></a>IAP_CTRL_CAN_SendUpDataPacket</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_SendUpDataPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IAP_CTRL_CAN_SendUpDataPacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddFrame
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[130]"></a>IAP_CTRL_CAN_TxAddData</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IAP_CTRL_CAN_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
</UL>

<P><STRONG><a name="[131]"></a>IAP_CTRL_CAN_TxAddFrame</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IAP_CTRL_CAN_TxAddFrame &rArr; CAN_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_AddSum
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
</UL>

<P><STRONG><a name="[59]"></a>IAP_JumpToAppFun</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, iap.o(i.IAP_JumpToAppFun))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_RunAPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stsprotocol.o(i.STS_PROTOCOL_CmdFrameProcess)
</UL>
<P><STRONG><a name="[134]"></a>IAP_RunAPP</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, iap.o(i.IAP_RunAPP))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_JumpToAppFun
</UL>

<P><STRONG><a name="[135]"></a>Init_Lcd</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, lcd2004.o(i.Init_Lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Init_Lcd &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_lcd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>KEYMSG_CALLBACK_Scan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keymsgprocess.o(i.KEYMSG_CALLBACK_Scan))
<BR>[Address Reference Count : 1]<UL><LI> keymsgprocess.o(i.KEYMSG_Init)
</UL>
<P><STRONG><a name="[141]"></a>KEYMSG_ClearGlobalMaskRequest</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, keymsgprocess.o(i.KEYMSG_ClearGlobalMaskRequest))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CALLBACK_Scan
</UL>

<P><STRONG><a name="[137]"></a>KEYMSG_Init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, keymsgprocess.o(i.KEYMSG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = KEYMSG_Init &rArr; TIMER_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_StopAllService
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[139]"></a>KEYMSG_MsgProcess</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, keymsgprocess.o(i.KEYMSG_MsgProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEYMSG_MsgProcess &rArr; KEYMSG_ThrowMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_ThrowMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_Process
</UL>

<P><STRONG><a name="[13b]"></a>KEYMSG_Process</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, keymsgprocess.o(i.KEYMSG_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = KEYMSG_Process &rArr; KEYMSG_MsgProcess &rArr; KEYMSG_ThrowMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_ServiceProcess
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_ScanProcess
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_MsgProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>KEYMSG_RegisterKeyScanCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keymsgprocess.o(i.KEYMSG_RegisterKeyScanCallback))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[20f]"></a>KEYMSG_RegisterMsgService</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, keymsgprocess.o(i.KEYMSG_RegisterMsgService))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>KEYMSG_ScanProcess</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, keymsgprocess.o(i.KEYMSG_ScanProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEYMSG_ScanProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_Process
</UL>

<P><STRONG><a name="[51]"></a>KEYMSG_ServiceDoNothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keymsgprocess.o(i.KEYMSG_ServiceDoNothing))
<BR>[Address Reference Count : 1]<UL><LI> keymsgprocess.o(i.KEYMSG_StopAllService)
</UL>
<P><STRONG><a name="[13d]"></a>KEYMSG_ServiceProcess</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, keymsgprocess.o(i.KEYMSG_ServiceProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEYMSG_ServiceProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_Process
</UL>

<P><STRONG><a name="[138]"></a>KEYMSG_StopAllService</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, keymsgprocess.o(i.KEYMSG_StopAllService))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KEYMSG_StopAllService
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_Init
</UL>

<P><STRONG><a name="[13a]"></a>KEYMSG_ThrowMsg</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, keymsgprocess.o(i.KEYMSG_ThrowMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEYMSG_ThrowMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_MsgProcess
</UL>

<P><STRONG><a name="[13e]"></a>KEY_ADC_Read</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, avopin.o(i.KEY_ADC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = KEY_ADC_Read &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_data_read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[52]"></a>KEY_CALLBACK_Scan</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, key.o(i.KEY_CALLBACK_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY_CALLBACK_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_ClearGlobalMaskRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.KEY_Init)
</UL>
<P><STRONG><a name="[142]"></a>KEY_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KEY_Init &rArr; KEYMSG_Init &rArr; TIMER_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_RegisterKeyScanCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>Key_Info</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.Key_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Key_Info &rArr; STS_PROTOCOL_SendCmdAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OperateVerTimeOut</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stsprotocol.o(i.OperateVerTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OperateVerTimeOut &rArr; STS_PROTOCOL_SendCmdParamAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stsprotocol.o(i.STS_PROTOCOL_CmdFrameProcess)
</UL>
<P><STRONG><a name="[147]"></a>PARAM_Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, param.o(i.PARAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PARAM_Init &rArr; DutInfoUpdata &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>POWER_ON_Information</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd2004.o(i.POWER_ON_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = POWER_ON_Information &rArr; Vertical_Scrolling_Display &rArr; Display_YX &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>POWER_PROTOCOL_CheckSUM</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, powerprotocol.o(i.POWER_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = POWER_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[14b]"></a>POWER_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 1290 bytes, Stack size 48 bytes, powerprotocol.o(i.POWER_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = POWER_PROTOCOL_CmdFrameProcess &rArr; Clear_All_Lines &rArr; Clear_Line &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdParamAck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdAck
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_Process
</UL>

<P><STRONG><a name="[156]"></a>POWER_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, powerprotocol.o(i.POWER_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[14f]"></a>POWER_PROTOCOL_DataStructInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, powerprotocol.o(i.POWER_PROTOCOL_DataStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_Init
</UL>

<P><STRONG><a name="[14e]"></a>POWER_PROTOCOL_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerprotocol.o(i.POWER_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_PROTOCOL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_RegisterDataSendService
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_DataStructInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_RegisterDataSendService
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>POWER_PROTOCOL_MacProcess</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, powerprotocol.o(i.POWER_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_PROTOCOL_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerprotocol.o(i.POWER_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[152]"></a>POWER_PROTOCOL_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerprotocol.o(i.POWER_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = POWER_PROTOCOL_Process &rArr; POWER_PROTOCOL_CmdFrameProcess &rArr; Clear_All_Lines &rArr; Clear_Line &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxStateProcess
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_RxFIFOProcess
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>POWER_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerprotocol.o(i.POWER_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_Init
</UL>

<P><STRONG><a name="[153]"></a>POWER_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, powerprotocol.o(i.POWER_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = POWER_PROTOCOL_RxFIFOProcess &rArr; POWER_PROTOCOL_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_Process
</UL>

<P><STRONG><a name="[14d]"></a>POWER_PROTOCOL_SendCmdAck</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, powerprotocol.o(i.POWER_PROTOCOL_SendCmdAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = POWER_PROTOCOL_SendCmdAck &rArr; POWER_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[14c]"></a>POWER_PROTOCOL_SendCmdParamAck</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, powerprotocol.o(i.POWER_PROTOCOL_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = POWER_PROTOCOL_SendCmdParamAck &rArr; POWER_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationCanTest
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[eb]"></a>POWER_PROTOCOL_TxAddData</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, powerprotocol.o(i.POWER_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = POWER_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdParamAck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdAck
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[ec]"></a>POWER_PROTOCOL_TxAddFrame</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, powerprotocol.o(i.POWER_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = POWER_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdParamAck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdAck
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[154]"></a>POWER_PROTOCOL_TxStateProcess</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, powerprotocol.o(i.POWER_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_Process
</UL>

<P><STRONG><a name="[55]"></a>POWER_UART_AddTxArray</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, powerdrive.o(i.POWER_UART_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_UART_AddTxArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerprotocol.o(i.POWER_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[15b]"></a>POWER_UART_DataStructureInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, powerdrive.o(i.POWER_UART_DataStructureInit))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_Init
</UL>

<P><STRONG><a name="[157]"></a>POWER_UART_HwInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, powerdrive.o(i.POWER_UART_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = POWER_UART_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_Init
</UL>

<P><STRONG><a name="[158]"></a>POWER_UART_IR_StartSendData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, powerdrive.o(i.POWER_UART_IR_StartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_TxProcess
</UL>

<P><STRONG><a name="[15a]"></a>POWER_UART_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, powerdrive.o(i.POWER_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = POWER_UART_Init &rArr; POWER_UART_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>POWER_UART_Process</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerdrive.o(i.POWER_UART_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = POWER_UART_Process &rArr; POWER_UART_TxProcess &rArr; POWER_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_TxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>POWER_UART_RegisterDataSendService</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerdrive.o(i.POWER_UART_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_Init
</UL>

<P><STRONG><a name="[15d]"></a>POWER_UART_TxProcess</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, powerdrive.o(i.POWER_UART_TxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = POWER_UART_TxProcess &rArr; POWER_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_IR_StartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_Process
</UL>

<P><STRONG><a name="[15e]"></a>PWM_OUT1_Init</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, pwm.o(i.PWM_OUT1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PWM_OUT1_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>PWM_OUT1_Start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pwm.o(i.PWM_OUT1_Start))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Report_Identity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stsprotocol.o(i.Report_Identity))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Report_Identity &rArr; STS_PROTOCOL_SendCmdAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[173]"></a>SELECT_PROTOCOL_SendCmdAck</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stsprotocol.o(i.SELECT_PROTOCOL_SendCmdAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SELECT_PROTOCOL_SendCmdAck &rArr; CAN_PROTOCOL_TEST_SendCmdAck &rArr; CAN_PROTOCOL_TEST_TxAddFrame &rArr; CAN_TEST_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdAck
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdAck
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[175]"></a>SELECT_PROTOCOL_SendCmdParamAck</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stsprotocol.o(i.SELECT_PROTOCOL_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SELECT_PROTOCOL_SendCmdParamAck &rArr; CAN_PROTOCOL_TEST_SendCmdParamAck &rArr; CAN_PROTOCOL_TEST_TxAddFrame &rArr; CAN_TEST_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdParamAck
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdParamAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[177]"></a>SELECT_PROTOCOL_WriteFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stsprotocol.o(i.SELECT_PROTOCOL_WriteFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SELECT_PROTOCOL_WriteFlag &rArr; UART_PROTOCOL_XM_SendCmdTwoParamAck &rArr; UART_PROTOCOL_XM_TxAddFrame &rArr; calCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_WriteFlag
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdTwoParamAck
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_WriteFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[179]"></a>SPI_FLASH_EraseBlock</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_EraseBlock &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseRoom
</UL>

<P><STRONG><a name="[17d]"></a>SPI_FLASH_EraseRoom</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, spiflash.o(i.SPI_FLASH_EraseRoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_FLASH_EraseRoom &rArr; SPI_FLASH_EraseSector &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[148]"></a>SPI_FLASH_EraseSector</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_EraseSector &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseRoom
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[12b]"></a>SPI_FLASH_ReadArray</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, spiflash.o(i.SPI_FLASH_ReadArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[17b]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
</UL>

<P><STRONG><a name="[17c]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spiflash.o(i.SPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
</UL>

<P><STRONG><a name="[149]"></a>SPI_FLASH_WriteArray</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, spiflash.o(i.SPI_FLASH_WriteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[181]"></a>SPI_FLASH_WriteByte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spiflash.o(i.SPI_FLASH_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_FLASH_WriteByte &rArr; SPI_FLASH_WriteWithErase &rArr; SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[17a]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spiflash.o(i.SPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
</UL>

<P><STRONG><a name="[180]"></a>SPI_FLASH_WritePage</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, spiflash.o(i.SPI_FLASH_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
</UL>

<P><STRONG><a name="[183]"></a>SPI_FLASH_WriteWithCheck</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, spiflash.o(i.SPI_FLASH_WriteWithCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_FLASH_WriteWithCheck &rArr; SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[182]"></a>SPI_FLASH_WriteWithErase</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, spiflash.o(i.SPI_FLASH_WriteWithErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_FLASH_WriteWithErase &rArr; SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteByte
</UL>

<P><STRONG><a name="[186]"></a>SPIx_FLASH_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, spiflash.o(i.SPIx_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SPIx_FLASH_Init &rArr; DMAy_SPIx_Configuration &rArr; NVIC_DMAy_Configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>STATE_EnterState</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, state.o(i.STATE_EnterState))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterState
</UL>

<P><STRONG><a name="[20e]"></a>STATE_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state.o(i.STATE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>STATE_Process</STRONG> (Thumb, 506 bytes, Stack size 8 bytes, state.o(i.STATE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = STATE_Process &rArr; STEP_Process_SegUartUpgrade &rArr; uartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Process
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Process
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_UART_PROTOCOL_Process
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_Test
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_3A
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_DT
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>STATE_SwitchStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, state.o(i.STATE_SwitchStep))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_CmdFrameProcess
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
</UL>
<BR>[Address Reference Count : 32]<UL><LI> state.o(i.STEP_Process_BrakeCanTest)
<LI> state.o(i.STEP_Process_BrakeUartTest)
<LI> powerprotocol.o(i.POWER_PROTOCOL_CmdFrameProcess)
<LI> state.o(i.STEP_Process_CalibrationCanTest)
<LI> state.o(i.STEP_Process_CalibrationUartTest)
<LI> state.o(i.STEP_Process_CmCanUpgrade)
<LI> state.o(i.STEP_Process_DerailleurCanTest)
<LI> state.o(i.STEP_Process_DerailleurUartTest)
<LI> state.o(i.STEP_Process_HbeamCanTest)
<LI> state.o(i.STEP_Process_HbeamUartTest)
<LI> state.o(i.STEP_Process_HeadLightCanTest)
<LI> state.o(i.STEP_Process_HeadLightUartTest)
<LI> state.o(i.STEP_Process_LbeamCanTest)
<LI> state.o(i.STEP_Process_LbeamUartTest)
<LI> state.o(i.STEP_Process_Left_TurnSignalCanTest)
<LI> state.o(i.STEP_Process_Left_TurnSignalUartTest)
<LI> state.o(i.STEP_Process_Right_TurnSignalCanTest)
<LI> state.o(i.STEP_Process_Right_TurnSignalUartTest)
<LI> state.o(i.STEP_Process_SegUartUpgrade)
<LI> state.o(i.STEP_Process_ThrottleCanTest)
<LI> state.o(i.STEP_Process_ThrottleUartTest)
<LI> state.o(i.STEP_Process_VlkCanTest)
<LI> state.o(i.STEP_Process_VlkUartTest)
<LI> state.o(i.STEP_Process_XM_BrakeUartTest)
<LI> state.o(i.STEP_Process_XM_HeadLightUartTest)
<LI> state.o(i.STEP_Process_XM_Left_TurnSignalUartTest)
<LI> state.o(i.STEP_Process_XM_Right_TurnSignalUartTest)
<LI> state.o(i.STEP_Process_XM_ThrottleUartTest)
<LI> state.o(i.UART_Test)
<LI> state.o(i.addTimeOutTimer)
<LI> state.o(i.All_GND_Test)
<LI> canprotocolupdt.o(i.CAN_CmdFrameProcess)
</UL>
<P><STRONG><a name="[19d]"></a>STEP_Process_BrakeCanTest</STRONG> (Thumb, 828 bytes, Stack size 24 bytes, state.o(i.STEP_Process_BrakeCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STEP_Process_BrakeCanTest &rArr; CAN_PROTOCOL_TEST_Init &rArr; CAN_TEST_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_output
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdParamAck
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[193]"></a>STEP_Process_BrakeUartTest</STRONG> (Thumb, 832 bytes, Stack size 24 bytes, state.o(i.STEP_Process_BrakeUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEP_Process_BrakeUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_output
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1a0]"></a>STEP_Process_CalibrationCanTest</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, state.o(i.STEP_Process_CalibrationCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STEP_Process_CalibrationCanTest &rArr; POWER_PROTOCOL_SendCmdParamAck &rArr; POWER_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdParamAck
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[196]"></a>STEP_Process_CalibrationUartTest</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, state.o(i.STEP_Process_CalibrationUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STEP_Process_CalibrationUartTest &rArr; Clear_All_Lines &rArr; Clear_Line &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdParamAck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1a1]"></a>STEP_Process_CmCanUpgrade</STRONG> (Thumb, 1116 bytes, Stack size 104 bytes, state.o(i.STEP_Process_CmCanUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = STEP_Process_CmCanUpgrade &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddFrame
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddData
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimeOutTimer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1a3]"></a>STEP_Process_CmUartUpgrade</STRONG> (Thumb, 822 bytes, Stack size 32 bytes, state.o(i.STEP_Process_CmUartUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = STEP_Process_CmUartUpgrade &rArr; uartProtocol_SendOnePacket_Hex &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_TxAddFrame
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_TxAddData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[19e]"></a>STEP_Process_DerailleurCanTest</STRONG> (Thumb, 878 bytes, Stack size 32 bytes, state.o(i.STEP_Process_DerailleurCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = STEP_Process_DerailleurCanTest &rArr; CAN_PROTOCOL_TEST_Init &rArr; CAN_TEST_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[194]"></a>STEP_Process_DerailleurUartTest</STRONG> (Thumb, 882 bytes, Stack size 32 bytes, state.o(i.STEP_Process_DerailleurUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STEP_Process_DerailleurUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[199]"></a>STEP_Process_HbeamCanTest</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, state.o(i.STEP_Process_HbeamCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = STEP_Process_HbeamCanTest &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdTwoParamAck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[18f]"></a>STEP_Process_HbeamUartTest</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, state.o(i.STEP_Process_HbeamUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STEP_Process_HbeamUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdTwoParamAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[197]"></a>STEP_Process_HeadLightCanTest</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, state.o(i.STEP_Process_HeadLightCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STEP_Process_HeadLightCanTest &rArr; CAN_PROTOCOL_TEST_Init &rArr; CAN_TEST_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[18d]"></a>STEP_Process_HeadLightUartTest</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, state.o(i.STEP_Process_HeadLightUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STEP_Process_HeadLightUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[198]"></a>STEP_Process_LbeamCanTest</STRONG> (Thumb, 668 bytes, Stack size 32 bytes, state.o(i.STEP_Process_LbeamCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = STEP_Process_LbeamCanTest &rArr; CAN_PROTOCOL_TEST_Init &rArr; CAN_TEST_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdTwoParamAck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[18e]"></a>STEP_Process_LbeamUartTest</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, state.o(i.STEP_Process_LbeamUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STEP_Process_LbeamUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdTwoParamAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[19a]"></a>STEP_Process_Left_TurnSignalCanTest</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, state.o(i.STEP_Process_Left_TurnSignalCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STEP_Process_Left_TurnSignalCanTest &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[190]"></a>STEP_Process_Left_TurnSignalUartTest</STRONG> (Thumb, 664 bytes, Stack size 24 bytes, state.o(i.STEP_Process_Left_TurnSignalUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEP_Process_Left_TurnSignalUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdTwoParamAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[19b]"></a>STEP_Process_Right_TurnSignalCanTest</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, state.o(i.STEP_Process_Right_TurnSignalCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STEP_Process_Right_TurnSignalCanTest &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[191]"></a>STEP_Process_Right_TurnSignalUartTest</STRONG> (Thumb, 662 bytes, Stack size 24 bytes, state.o(i.STEP_Process_Right_TurnSignalUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEP_Process_Right_TurnSignalUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdTwoParamAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1a4]"></a>STEP_Process_SegUartUpgrade</STRONG> (Thumb, 606 bytes, Stack size 144 bytes, state.o(i.STEP_Process_SegUartUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = STEP_Process_SegUartUpgrade &rArr; uartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_TxAddFrame
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_TxAddData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[19c]"></a>STEP_Process_ThrottleCanTest</STRONG> (Thumb, 778 bytes, Stack size 24 bytes, state.o(i.STEP_Process_ThrottleCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STEP_Process_ThrottleCanTest &rArr; CAN_PROTOCOL_TEST_Init &rArr; CAN_TEST_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_VCC_TEST_EN
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdParamAck
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[192]"></a>STEP_Process_ThrottleUartTest</STRONG> (Thumb, 796 bytes, Stack size 24 bytes, state.o(i.STEP_Process_ThrottleUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEP_Process_ThrottleUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdParamAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_VCC_TEST_EN
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[19f]"></a>STEP_Process_VlkCanTest</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, state.o(i.STEP_Process_VlkCanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STEP_Process_VlkCanTest &rArr; CAN_PROTOCOL_TEST_Init &rArr; CAN_TEST_HW_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[195]"></a>STEP_Process_VlkUartTest</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, state.o(i.STEP_Process_VlkUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEP_Process_VlkUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1aa]"></a>STEP_Process_XM_BrakeUartTest</STRONG> (Thumb, 810 bytes, Stack size 24 bytes, state.o(i.STEP_Process_XM_BrakeUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEP_Process_XM_BrakeUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_output
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdAck
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1a6]"></a>STEP_Process_XM_HeadLightUartTest</STRONG> (Thumb, 694 bytes, Stack size 32 bytes, state.o(i.STEP_Process_XM_HeadLightUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STEP_Process_XM_HeadLightUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdParamAck
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1a7]"></a>STEP_Process_XM_Left_TurnSignalUartTest</STRONG> (Thumb, 684 bytes, Stack size 24 bytes, state.o(i.STEP_Process_XM_Left_TurnSignalUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEP_Process_XM_Left_TurnSignalUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdParamAck
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1a8]"></a>STEP_Process_XM_Right_TurnSignalUartTest</STRONG> (Thumb, 682 bytes, Stack size 24 bytes, state.o(i.STEP_Process_XM_Right_TurnSignalUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEP_Process_XM_Right_TurnSignalUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdParamAck
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1a9]"></a>STEP_Process_XM_ThrottleUartTest</STRONG> (Thumb, 772 bytes, Stack size 24 bytes, state.o(i.STEP_Process_XM_ThrottleUartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEP_Process_XM_ThrottleUartTest &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_VCC_TEST_EN
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdAck
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[1c6]"></a>STS_PROTOCOL_CheckSUM</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stsprotocol.o(i.STS_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STS_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[1b7]"></a>STS_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 4274 bytes, Stack size 152 bytes, stsprotocol.o(i.STS_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = STS_PROTOCOL_CmdFrameProcess &rArr; SPI_FLASH_WriteByte &rArr; SPI_FLASH_WriteWithErase &rArr; SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChangeTime
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseRoom
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdAck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdParamAck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_SendCmdAck
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddFrame
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_TxAddData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_SendCmdAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_AddTxArray
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHANGE_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_Scrolling_Display
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_5VOUT_EN
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CURRENT_Read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ADC_Read
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddFrame
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddData
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdAck
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ADC_Read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_DRIVE_AddTxArray
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_TxAddFrame
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_TxAddData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_SendCmdAck
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TEST_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterState
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_WriteFlag
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_SendCmdParamAck
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_SendCmdAck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_Process
</UL>

<P><STRONG><a name="[1c7]"></a>STS_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stsprotocol.o(i.STS_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[1c0]"></a>STS_PROTOCOL_DataStructInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stsprotocol.o(i.STS_PROTOCOL_DataStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_Init
</UL>

<P><STRONG><a name="[1bf]"></a>STS_PROTOCOL_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stsprotocol.o(i.STS_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STS_PROTOCOL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_RegisterDataSendService
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_DataStructInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_RegisterDataSendService
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>STS_PROTOCOL_MacProcess</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stsprotocol.o(i.STS_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STS_PROTOCOL_MacProcess &rArr; CAN_TEST_DRIVE_AddTxArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_AddTxArray
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_DRIVE_AddTxArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stsprotocol.o(i.STS_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[1c3]"></a>STS_PROTOCOL_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stsprotocol.o(i.STS_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = STS_PROTOCOL_Process &rArr; STS_PROTOCOL_CmdFrameProcess &rArr; SPI_FLASH_WriteByte &rArr; SPI_FLASH_WriteWithErase &rArr; SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxStateProcess
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_RxFIFOProcess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c2]"></a>STS_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stsprotocol.o(i.STS_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_Init
</UL>

<P><STRONG><a name="[1c4]"></a>STS_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stsprotocol.o(i.STS_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STS_PROTOCOL_RxFIFOProcess &rArr; STS_PROTOCOL_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_Process
</UL>

<P><STRONG><a name="[144]"></a>STS_PROTOCOL_SendCmdAck</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stsprotocol.o(i.STS_PROTOCOL_SendCmdAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STS_PROTOCOL_SendCmdAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Identity
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Info
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[bb]"></a>STS_PROTOCOL_SendCmdParamAck</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stsprotocol.o(i.STS_PROTOCOL_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STS_PROTOCOL_SendCmdParamAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutTimeOut
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlagTimeOut
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateVerTimeOut
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[ef]"></a>STS_PROTOCOL_SendCmdParamTwoAck</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stsprotocol.o(i.STS_PROTOCOL_SendCmdParamTwoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STS_PROTOCOL_SendCmdParamTwoAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[e8]"></a>STS_PROTOCOL_TxAddData</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stsprotocol.o(i.STS_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STS_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdAck
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamTwoAck
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[e9]"></a>STS_PROTOCOL_TxAddFrame</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, stsprotocol.o(i.STS_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdAck
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamTwoAck
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[1c5]"></a>STS_PROTOCOL_TxStateProcess</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stsprotocol.o(i.STS_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STS_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_Process
</UL>

<P><STRONG><a name="[5b]"></a>STS_UART_AddTxArray</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stsdrive.o(i.STS_UART_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STS_UART_AddTxArray
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_CmdFrameProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stsprotocol.o(i.STS_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[1cb]"></a>STS_UART_DataStructureInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stsdrive.o(i.STS_UART_DataStructureInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_Init
</UL>

<P><STRONG><a name="[1c8]"></a>STS_UART_HwInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stsdrive.o(i.STS_UART_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STS_UART_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_Init
</UL>

<P><STRONG><a name="[1c9]"></a>STS_UART_IR_StartSendData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stsdrive.o(i.STS_UART_IR_StartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STS_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_TxProcess
</UL>

<P><STRONG><a name="[1ca]"></a>STS_UART_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stsdrive.o(i.STS_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STS_UART_Init &rArr; STS_UART_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cc]"></a>STS_UART_Process</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stsdrive.o(i.STS_UART_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STS_UART_Process &rArr; STS_UART_TxProcess &rArr; STS_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_TxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1]"></a>STS_UART_RegisterDataSendService</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stsdrive.o(i.STS_UART_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_Init
</UL>

<P><STRONG><a name="[1cd]"></a>STS_UART_TxProcess</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stsdrive.o(i.STS_UART_TxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STS_UART_TxProcess &rArr; STS_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_IR_StartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_Process
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[1ce]"></a>SYSTEM_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system.o(i.SYSTEM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSTEM_Init &rArr; RCC_HSE_Configuration &rArr; rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, system_gd32f10x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, system_gd32f10x.o(i.SystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(.text)
</UL>
<P><STRONG><a name="[1b4]"></a>THROTTLE_VCC_TEST_EN</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, avopin.o(i.THROTTLE_VCC_TEST_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = THROTTLE_VCC_TEST_EN &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
</UL>

<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER1_IRQHandler &rArr; TIMER_CALLBACK_OnTimer &rArr; TIMER_AddToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CALLBACK_OnTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>TIMER_AddTask</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, timer.o(i.TIMER_AddTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER_AddTask
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Info
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimeOutTimer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
</UL>

<P><STRONG><a name="[1d5]"></a>TIMER_AddToQueue</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, timer.o(i.TIMER_AddToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_AddToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CALLBACK_OnTimer
</UL>

<P><STRONG><a name="[1d4]"></a>TIMER_CALLBACK_OnTimer</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, timer.o(i.TIMER_CALLBACK_OnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER_CALLBACK_OnTimer &rArr; TIMER_AddToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>TIMER_ChangeTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.TIMER_ChangeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_ChangeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[5c]"></a>TIMER_DoNothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.TIMER_DoNothing))
<BR>[Address Reference Count : 2]<UL><LI> timer.o(i.TIMER_Init)
<LI> timer.o(i.TIMER_KillTask)
</UL>
<P><STRONG><a name="[1d6]"></a>TIMER_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timer.o(i.TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TIMER_Init &rArr; TIMER_InitTimerx &rArr; TIMx_INT_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartTimerx
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitTimerx
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d7]"></a>TIMER_InitTimerx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TIMER_InitTimerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIMER_InitTimerx &rArr; TIMx_INT_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[8e]"></a>TIMER_KillTask</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, timer.o(i.TIMER_KillTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER_KillTask
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
</UL>

<P><STRONG><a name="[b9]"></a>TIMER_ResetTimer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(i.TIMER_ResetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleCanTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationUartTest
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CalibrationCanTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
</UL>

<P><STRONG><a name="[1d8]"></a>TIMER_StartTimerx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIMER_StartTimerx))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[210]"></a>TIMER_TaskQueueProcess</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timer.o(i.TIMER_TaskQueueProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_TaskQueueProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d9]"></a>TIMx_INT_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, timer.o(i.TIMx_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIMx_INT_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitTimerx
</UL>

<P><STRONG><a name="[3e]"></a>UART3_IRQHandler</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, dutuartdrive.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART3_IRQHandler &rArr; STS_PROTOCOL_SendCmdParamAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART_DRIVE_AddTxArray</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, dutuartdrive.o(i.UART_DRIVE_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DRIVE_AddTxArray
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_MacProcess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Address Reference Count : 4]<UL><LI> dutuartprotocol.o(i.DUT_PROTOCOL_Init)
<LI> uartprotocol3.o(i.UART_PROTOCOL4_Init)
<LI> uartprotocol.o(i.UART_PROTOCOL_Init)
<LI> uartprotocolxm.o(i.UART_PROTOCOL_XM_Init)
</UL>
<P><STRONG><a name="[1e2]"></a>UART_DRIVE_DataStructInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dutuartdrive.o(i.UART_DRIVE_DataStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
</UL>

<P><STRONG><a name="[1e0]"></a>UART_DRIVE_HwInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, dutuartdrive.o(i.UART_DRIVE_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
</UL>

<P><STRONG><a name="[1e1]"></a>UART_DRIVE_IR_StartSendData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dutuartdrive.o(i.UART_DRIVE_IR_StartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DRIVE_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_TxProcess
</UL>

<P><STRONG><a name="[114]"></a>UART_DRIVE_InitSelect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dutuartdrive.o(i.UART_DRIVE_InitSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_ThrottleUartTest
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[18b]"></a>UART_DRIVE_Process</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dutuartdrive.o(i.UART_DRIVE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_DRIVE_Process &rArr; UART_DRIVE_TxProcess &rArr; UART_DRIVE_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_TxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>UART_DRIVE_RegisterDataSendService</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dutuartdrive.o(i.UART_DRIVE_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_Init
</UL>

<P><STRONG><a name="[1e3]"></a>UART_DRIVE_TxProcess</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dutuartdrive.o(i.UART_DRIVE_TxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_DRIVE_TxProcess &rArr; UART_DRIVE_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_IR_StartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Process
</UL>

<P><STRONG><a name="[1e9]"></a>UART_PROTOCOL4_CheckSUM</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, uartprotocol3.o(i.UART_PROTOCOL4_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_PROTOCOL4_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_RxFIFOProcess
</UL>

<P><STRONG><a name="[1e4]"></a>UART_PROTOCOL4_CmdFrameProcess</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, uartprotocol3.o(i.UART_PROTOCOL4_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_PROTOCOL4_CmdFrameProcess &rArr; STS_UART_AddTxArray
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_AddTxArray
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[1ea]"></a>UART_PROTOCOL4_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, uartprotocol3.o(i.UART_PROTOCOL4_ConfirmTempCmdFrameBuff))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_RxFIFOProcess
</UL>

<P><STRONG><a name="[1e5]"></a>UART_PROTOCOL4_DataStructInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, uartprotocol3.o(i.UART_PROTOCOL4_DataStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_Init
</UL>

<P><STRONG><a name="[116]"></a>UART_PROTOCOL4_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uartprotocol3.o(i.UART_PROTOCOL4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PROTOCOL4_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_RegisterDataSendService
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_RegisterDataSendService
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[5d]"></a>UART_PROTOCOL4_MacProcess</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, uartprotocol3.o(i.UART_PROTOCOL4_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_PROTOCOL4_MacProcess &rArr; UART_PROTOCOL_XM_MacProcess &rArr; DUT_PROTOCOL_MacProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_MacProcess
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartprotocol3.o(i.UART_PROTOCOL4_Init)
</UL>
<P><STRONG><a name="[1e6]"></a>UART_PROTOCOL4_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uartprotocol3.o(i.UART_PROTOCOL4_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_Init
</UL>

<P><STRONG><a name="[1e8]"></a>UART_PROTOCOL4_RxFIFOProcess</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, uartprotocol3.o(i.UART_PROTOCOL4_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_PROTOCOL4_RxFIFOProcess &rArr; UART_PROTOCOL4_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_ConfirmTempCmdFrameBuff
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[1af]"></a>UART_PROTOCOL4_TxAddData</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, uartprotocol3.o(i.UART_PROTOCOL4_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_PROTOCOL4_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[1b0]"></a>UART_PROTOCOL4_TxAddFrame</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, uartprotocol3.o(i.UART_PROTOCOL4_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_PROTOCOL4_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[1ed]"></a>UART_PROTOCOL4_TxStateProcess</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uartprotocol3.o(i.UART_PROTOCOL4_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_PROTOCOL4_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[1eb]"></a>UART_PROTOCOL_DataStructInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, uartprotocol.o(i.UART_PROTOCOL_DataStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[115]"></a>UART_PROTOCOL_Init</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, uartprotocol.o(i.UART_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_PROTOCOL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_RegisterDataSendService
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[1e7]"></a>UART_PROTOCOL_MacProcess</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uartprotocol.o(i.UART_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_PROTOCOL_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_MacProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_MacProcess
</UL>

<P><STRONG><a name="[1a2]"></a>UART_PROTOCOL_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uartprotocol.o(i.UART_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_PROTOCOL_Process &rArr; UART_PROTOCOL4_RxFIFOProcess &rArr; UART_PROTOCOL4_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_TxStateProcess
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_RxFIFOProcess
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ec]"></a>UART_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uartprotocol.o(i.UART_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[1b1]"></a>UART_PROTOCOL_SendCmdParamAck</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uartprotocol.o(i.UART_PROTOCOL_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_PROTOCOL_SendCmdParamAck &rArr; UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddFrame
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[1ee]"></a>UART_PROTOCOL_TxAddData</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, uartprotocol.o(i.UART_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
</UL>

<P><STRONG><a name="[1ef]"></a>UART_PROTOCOL_TxAddFrame</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, uartprotocol.o(i.UART_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
</UL>

<P><STRONG><a name="[1f0]"></a>UART_PROTOCOL_XM_CheckSUM</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_PROTOCOL_XM_CheckSUM &rArr; calCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_RxFIFOProcess
</UL>

<P><STRONG><a name="[1f2]"></a>UART_PROTOCOL_XM_CmdFrameProcess</STRONG> (Thumb, 1494 bytes, Stack size 144 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = UART_PROTOCOL_XM_CmdFrameProcess &rArr; UART_PROTOCOL_XM_SendCmdParamAck &rArr; UART_PROTOCOL_XM_TxAddFrame &rArr; calCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_TxAddData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamTwoAck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_TxAddData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddFrame
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddData
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdParamAck
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdAck
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToCharLow
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToCharHigh
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Process
</UL>

<P><STRONG><a name="[1f9]"></a>UART_PROTOCOL_XM_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_ConfirmTempCmdFrameBuff))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_RxFIFOProcess
</UL>

<P><STRONG><a name="[1f5]"></a>UART_PROTOCOL_XM_DataStructInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_DataStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Init
</UL>

<P><STRONG><a name="[1b5]"></a>UART_PROTOCOL_XM_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PROTOCOL_XM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_RegisterDataSendService
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_RegisterDataSendService
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[5e]"></a>UART_PROTOCOL_XM_MacProcess</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_PROTOCOL_XM_MacProcess &rArr; DUT_PROTOCOL_MacProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_MacProcess
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL4_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartprotocolxm.o(i.UART_PROTOCOL_XM_Init)
</UL>
<P><STRONG><a name="[1a5]"></a>UART_PROTOCOL_XM_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = UART_PROTOCOL_XM_Process &rArr; UART_PROTOCOL_XM_CmdFrameProcess &rArr; UART_PROTOCOL_XM_SendCmdParamAck &rArr; UART_PROTOCOL_XM_TxAddFrame &rArr; calCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxStateProcess
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_RxFIFOProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f6]"></a>UART_PROTOCOL_XM_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Init
</UL>

<P><STRONG><a name="[1f7]"></a>UART_PROTOCOL_XM_RxFIFOProcess</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_PROTOCOL_XM_RxFIFOProcess &rArr; UART_PROTOCOL_XM_CheckSUM &rArr; calCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_ConfirmTempCmdFrameBuff
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Process
</UL>

<P><STRONG><a name="[174]"></a>UART_PROTOCOL_XM_SendCmdAck</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_SendCmdAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_PROTOCOL_XM_SendCmdAck &rArr; UART_PROTOCOL_XM_TxAddFrame &rArr; calCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddFrame
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_ThrottleUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_SendCmdAck
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
</UL>

<P><STRONG><a name="[176]"></a>UART_PROTOCOL_XM_SendCmdParamAck</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_PROTOCOL_XM_SendCmdParamAck &rArr; UART_PROTOCOL_XM_TxAddFrame &rArr; calCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddFrame
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_SendCmdParamAck
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
</UL>

<P><STRONG><a name="[178]"></a>UART_PROTOCOL_XM_SendCmdTwoParamAck</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_SendCmdTwoParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_PROTOCOL_XM_SendCmdTwoParamAck &rArr; UART_PROTOCOL_XM_TxAddFrame &rArr; calCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddFrame
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT_PROTOCOL_WriteFlag
</UL>

<P><STRONG><a name="[1b9]"></a>UART_PROTOCOL_XM_TxAddData</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_PROTOCOL_XM_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdTwoParamAck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdParamAck
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdAck
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
</UL>

<P><STRONG><a name="[1ba]"></a>UART_PROTOCOL_XM_TxAddFrame</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_PROTOCOL_XM_TxAddFrame &rArr; calCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdTwoParamAck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdParamAck
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_SendCmdAck
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CmdFrameProcess
</UL>

<P><STRONG><a name="[1f8]"></a>UART_PROTOCOL_XM_TxStateProcess</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uartprotocolxm.o(i.UART_PROTOCOL_XM_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_PROTOCOL_XM_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Process
</UL>

<P><STRONG><a name="[18c]"></a>UART_Test</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, state.o(i.UART_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART_Test &rArr; Display_YX_Format &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_All_Lines
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Send_Type_Chl
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, avodrive.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, stsdrive.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, powerdrive.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART2_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, canprotocoltest.o(i.USBD_HP_CAN0_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_HP_CAN0_TX_IRQHandler &rArr; CAN_TEST_Tx_FillAndSend &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_Tx_NextFram
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_Tx_FillAndSend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_NextFram
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, canprotocoltest.o(i.USBD_LP_CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LP_CAN0_RX0_IRQHandler &rArr; STS_PROTOCOL_SendCmdParamAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_MacProcess
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_message_length_get
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_MacProcess
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_MacProcess
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>USB_ADC_Read</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, avopin.o(i.USB_ADC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_ADC_Read &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_data_read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[1be]"></a>USB_CURRENT_Read</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, avopin.o(i.USB_CURRENT_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_CURRENT_Read &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_data_read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_xd.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>Vertical_Scrolling_Display</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lcd2004.o(i.Vertical_Scrolling_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Vertical_Scrolling_Display &rArr; Display_YX &rArr; wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_ON_Information
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_PROTOCOL_CmdFrameProcess
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_CmdFrameProcess
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_CmdFrameProcess
</UL>

<P><STRONG><a name="[136]"></a>WR_DATA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd2004.o(i.WR_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_lcd
</UL>

<P><STRONG><a name="[57]"></a>WriteFlagTimeOut</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stsprotocol.o(i.WriteFlagTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteFlagTimeOut &rArr; STS_PROTOCOL_SendCmdParamAck &rArr; STS_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_SendCmdParamAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stsprotocol.o(i.STS_PROTOCOL_CmdFrameProcess)
</UL>
<P><STRONG><a name="[1bb]"></a>_5VOUT_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, avopin.o(i._5VOUT_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _5VOUT_EN &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[203]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[228]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[12c]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
</UL>

<P><STRONG><a name="[229]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[22a]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[205]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22b]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[22c]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[22d]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[129]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
</UL>

<P><STRONG><a name="[22e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[22f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[230]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[87]"></a>adc_calibration_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[83]"></a>adc_channel_length_config</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_channel_length_config))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[82]"></a>adc_data_alignment_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[7c]"></a>adc_deinit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32f10x_adc.o(i.adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[85]"></a>adc_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[88]"></a>adc_external_trigger_config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[81]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[13f]"></a>adc_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CURRENT_Read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ADC_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ADC_Read
</UL>

<P><STRONG><a name="[8b]"></a>adc_flag_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Process
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CURRENT_Read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ADC_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ADC_Read
</UL>

<P><STRONG><a name="[7f]"></a>adc_mode_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[84]"></a>adc_regular_channel_config</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, gd32f10x_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Process
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CURRENT_Read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ADC_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ADC_Read
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[8c]"></a>adc_regular_data_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_regular_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Process
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CURRENT_Read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ADC_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ADC_Read
</UL>

<P><STRONG><a name="[89]"></a>adc_software_trigger_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Process
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CURRENT_Read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ADC_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ADC_Read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[80]"></a>adc_special_function_config</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gd32f10x_adc.o(i.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[1ad]"></a>addTimeOutTimer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, state.o(i.addTimeOutTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = addTimeOutTimer &rArr; TIMER_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[1f1]"></a>calCrc16</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uartprotocolxm.o(i.calCrc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_TxAddFrame
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_CheckSUM
</UL>

<P><STRONG><a name="[c1]"></a>can_deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f10x_can.o(i.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[c3]"></a>can_filter_init</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, gd32f10x_can.o(i.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[c2]"></a>can_init</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, gd32f10x_can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[1fa]"></a>can_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_can.o(i.can_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_can.o(i.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_Tx_FillAndSend
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[1fd]"></a>can_message_receive</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, gd32f10x_can.o(i.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>can_message_transmit</STRONG> (Thumb, 178 bytes, Stack size 12 bytes, gd32f10x_can.o(i.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_Tx_FillAndSend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
</UL>

<P><STRONG><a name="[201]"></a>can_receive_message_length_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_can.o(i.can_receive_message_length_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>can_struct_para_init</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, gd32f10x_can.o(i.can_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[fd]"></a>dac_data_set</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gd32f10x_dac.o(i.dac_data_set))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_output
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
</UL>

<P><STRONG><a name="[fc]"></a>dac_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_dac.o(i.dac_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_output
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
</UL>

<P><STRONG><a name="[103]"></a>dac_output_buffer_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_dac.o(i.dac_output_buffer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[fe]"></a>dac_software_trigger_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_dac.o(i.dac_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_output
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_output
</UL>

<P><STRONG><a name="[101]"></a>dac_trigger_disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_dac.o(i.dac_trigger_disable))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[102]"></a>dac_wave_mode_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f10x_dac.o(i.dac_wave_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[106]"></a>dma_channel_disable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>dma_circulation_disable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_circulation_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_circulation_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[10b]"></a>dma_deinit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[10f]"></a>dma_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_dma.o(i.dma_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[10e]"></a>dma_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[107]"></a>dma_interrupt_disable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[105]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_dma.o(i.dma_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gd32f10x_dma.o(i.dma_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>dma_memory_to_memory_disable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_memory_to_memory_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_to_memory_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[1bc]"></a>enterState</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, stsprotocol.o(i.enterState))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[185]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
</UL>

<P><STRONG><a name="[92]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Reset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_lcd
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_VCC_TEST_EN
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_5VOUT_EN
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[b8]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_lcd
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_VCC_TEST_EN
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_5VOUT_EN
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[7e]"></a>gpio_init</STRONG> (Thumb, 148 bytes, Stack size 28 bytes, gd32f10x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_CmdFrameProcess
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHANGE_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_VCC_TEST_EN
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Test
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Right_TurnSignalUartTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_Left_TurnSignalUartTest
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_HeadLightUartTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_XM_BrakeUartTest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkUartTest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_VlkCanTest
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalUartTest
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Right_TurnSignalCanTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalUartTest
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Left_TurnSignalCanTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamUartTest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LbeamCanTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightUartTest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HeadLightCanTest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamUartTest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HbeamCanTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeUartTest
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_BrakeCanTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_GND_Test
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_5VOUT_EN
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_CmdFrameProcess
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[140]"></a>gpio_input_bit_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CALLBACK_Scan
</UL>

<P><STRONG><a name="[bf]"></a>gpio_pin_remap_config</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, gd32f10x_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_VCC_TEST_EN
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = main &rArr; STATE_Process &rArr; STEP_Process_SegUartUpgrade &rArr; uartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_XM_Process
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Process
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TaskQueueProcess
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_Process
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_Process
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_PROTOCOL_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_Process
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_Process
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_PROTOCOL_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_ON_Information
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_StopAllService
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_RegisterMsgService
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYMSG_Process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUT_UART_PROTOCOL_Process
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_Test
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_3A
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_Process
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Process
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PROTOCOL_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Process
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BaseInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[184]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
</UL>

<P><STRONG><a name="[ac]"></a>nvic_irq_enable</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32f10x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DMAy_Configuration
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[146]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[1d0]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[7d]"></a>rcu_adc_clock_config</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_adc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
</UL>

<P><STRONG><a name="[16c]"></a>rcu_ahb_clock_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_ahb_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[16d]"></a>rcu_apb1_clock_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_apb1_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[16e]"></a>rcu_apb2_clock_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_apb2_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[213]"></a>rcu_clock_freq_get</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, gd32f10x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[169]"></a>rcu_deinit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gd32f10x_rcu.o(i.rcu_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[211]"></a>rcu_flag_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[16a]"></a>rcu_osci_on</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[16b]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, gd32f10x_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[7b]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_PIN_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_HwInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHANGE_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_VCC_TEST_EN
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_5VOUT_EN
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LevelHwInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_HW_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[20c]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[20b]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[16f]"></a>rcu_pll_config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32f10x_rcu.o(i.rcu_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[172]"></a>rcu_predv0_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_predv0_config))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[170]"></a>rcu_system_clock_source_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_system_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[171]"></a>rcu_system_clock_source_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_system_clock_source_get))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[109]"></a>spi_dma_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_dma_disable))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[110]"></a>spi_dma_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_dma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[189]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
</UL>

<P><STRONG><a name="[17f]"></a>spi_i2s_data_receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[17e]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[187]"></a>spi_i2s_deinit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32f10x_spi.o(i.spi_i2s_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
</UL>

<P><STRONG><a name="[108]"></a>spi_i2s_flag_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>spi_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
</UL>

<P><STRONG><a name="[164]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
</UL>

<P><STRONG><a name="[160]"></a>timer_channel_output_config</STRONG> (Thumb, 464 bytes, Stack size 12 bytes, gd32f10x_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
</UL>

<P><STRONG><a name="[161]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
</UL>

<P><STRONG><a name="[162]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
</UL>

<P><STRONG><a name="[163]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
</UL>

<P><STRONG><a name="[1da]"></a>timer_deinit</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, gd32f10x_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[165]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartTimerx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
</UL>

<P><STRONG><a name="[1db]"></a>timer_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[15f]"></a>timer_init</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, gd32f10x_timer.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
</UL>

<P><STRONG><a name="[1dc]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[1d3]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OUT1_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurUartTest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_DerailleurCanTest
</UL>

<P><STRONG><a name="[1b3]"></a>uartProtocol_SendOnePacket</STRONG> (Thumb, 134 bytes, Stack size 184 bytes, uartprotocol.o(i.uartProtocol_SendOnePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddFrame
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
</UL>

<P><STRONG><a name="[1ae]"></a>uartProtocol_SendOnePacket_Hex</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, uartprotocol.o(i.uartProtocol_SendOnePacket_Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uartProtocol_SendOnePacket_Hex &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddFrame
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[a4]"></a>usart_baudrate_set</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gd32f10x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[1de]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_IR_StartSendData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_IR_StartSendData
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_IR_StartSendData
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_IR_StartSendData
</UL>

<P><STRONG><a name="[a3]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[ae]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[159]"></a>usart_flag_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_IR_StartSendData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_IR_StartSendData
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_IR_StartSendData
</UL>

<P><STRONG><a name="[a9]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[a8]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[1df]"></a>usart_interrupt_disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>usart_interrupt_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_IR_StartSendData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_IR_StartSendData
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_IR_StartSendData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_IR_StartSendData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[1dd]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, gd32f10x_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[ab]"></a>usart_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[a6]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[aa]"></a>usart_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[a5]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_UART_HwInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVO_UART_HwInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_UART_HwInit
</UL>

<P><STRONG><a name="[fa]"></a>wr_lcd</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcd2004.o(i.wr_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wr_lcd &rArr; Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Centered
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Line
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_YX_Format
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10a]"></a>DMAy_SPIx_Configuration</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, spiflash.o(i.DMAy_SPIx_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DMAy_SPIx_Configuration &rArr; NVIC_DMAy_Configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_enable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_disable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_disable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DMAy_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
</UL>

<P><STRONG><a name="[111]"></a>NVIC_DMAy_Configuration</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spiflash.o(i.NVIC_DMAy_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_DMAy_Configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[145]"></a>NVIC_Configuration</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system.o(i.NVIC_Configuration))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[168]"></a>RCC_HSE_Configuration</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, system.o(i.RCC_HSE_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_HSE_Configuration &rArr; rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_config
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_predv0_config
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_pll_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_apb2_clock_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_apb1_clock_config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ahb_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[20d]"></a>dma_periph_and_channel_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_dma.o(i.dma_periph_and_channel_check))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_disable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>

<P><STRONG><a name="[212]"></a>system_clock_108m_hxtal</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, system_gd32f10x.o(i.system_clock_108m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[1d1]"></a>system_clock_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_gd32f10x.o(i.system_clock_config))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_108m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[206]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[204]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[209]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[208]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
