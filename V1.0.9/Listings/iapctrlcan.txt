; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\iapctrlcan.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\iapctrlcan.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\iapctrlcan.crf User\iapCtrlCan.c]
                          THUMB

                          AREA ||i.CAN_AddSum||, CODE, READONLY, ALIGN=1

                  CAN_AddSum PROC
;;;1103   // 对传入的命令帧进行校验，返回校验结果
;;;1104   BOOL CAN_AddSum(uint8 *buff, uint32 len)
000000  b510              PUSH     {r4,lr}
;;;1105   {
000002  4602              MOV      r2,r0
;;;1106   	uint8 cc = 0;
000004  2300              MOVS     r3,#0
;;;1107   	uint16 i = 0;
000006  2400              MOVS     r4,#0
;;;1108   
;;;1109   	if (NULL == buff)
000008  b90a              CBNZ     r2,|L1.14|
;;;1110   	{
;;;1111   		return FALSE;
00000a  2000              MOVS     r0,#0
                  |L1.12|
;;;1112   	}
;;;1113   
;;;1114   	// 从命令头开始，到校验码之前的一个字节，依次进行异或运算
;;;1115   	for (i = 0; i < len; i++)
;;;1116   	{
;;;1117   		cc ^= buff[i];
;;;1118   	}
;;;1119   
;;;1120   	cc = ~cc;
;;;1121   
;;;1122   	// 添加校验码
;;;1123   	buff[len] = cc;
;;;1124   
;;;1125   	return TRUE;
;;;1126   }
00000c  bd10              POP      {r4,pc}
                  |L1.14|
00000e  2400              MOVS     r4,#0                 ;1115
000010  e003              B        |L1.26|
                  |L1.18|
000012  5d10              LDRB     r0,[r2,r4]            ;1117
000014  4043              EORS     r3,r3,r0              ;1117
000016  1c60              ADDS     r0,r4,#1              ;1115
000018  b284              UXTH     r4,r0                 ;1115
                  |L1.26|
00001a  428c              CMP      r4,r1                 ;1115
00001c  d3f9              BCC      |L1.18|
00001e  43d8              MVNS     r0,r3                 ;1120
000020  b2c3              UXTB     r3,r0                 ;1120
000022  5453              STRB     r3,[r2,r1]            ;1123
000024  2001              MOVS     r0,#1                 ;1125
000026  e7f1              B        |L1.12|
;;;1127   
                          ENDP


                          AREA ||i.CAN_CheckSum||, CODE, READONLY, ALIGN=1

                  CAN_CheckSum PROC
;;;1075   // 对传入的命令帧进行校验，返回校验结果
;;;1076   BOOL CAN_CheckSum(uint8 *buff, uint32 len)
000000  b510              PUSH     {r4,lr}
;;;1077   {
000002  4602              MOV      r2,r0
;;;1078   	uint8 cc = 0;
000004  2300              MOVS     r3,#0
;;;1079   	uint16 i = 0;
000006  2400              MOVS     r4,#0
;;;1080   
;;;1081   	if (NULL == buff)
000008  b90a              CBNZ     r2,|L2.14|
;;;1082   	{
;;;1083   		return FALSE;
00000a  2000              MOVS     r0,#0
                  |L2.12|
;;;1084   	}
;;;1085   
;;;1086   	// 从命令头开始，到校验码之前的一个字节，依次进行异或运算
;;;1087   	for (i = 0; i < (len - CAN_CHECK_BYTE_SIZE); i++)
;;;1088   	{
;;;1089   		cc ^= buff[i];
;;;1090   	}
;;;1091   
;;;1092   	cc = ~cc;
;;;1093   
;;;1094   	// 判断计算得到的校验码与命令帧中的校验码是否相同
;;;1095   	if (buff[len - 1] != cc)
;;;1096   	{
;;;1097   		return FALSE;
;;;1098   	}
;;;1099   
;;;1100   	return TRUE;
;;;1101   }
00000c  bd10              POP      {r4,pc}
                  |L2.14|
00000e  2400              MOVS     r4,#0                 ;1087
000010  e003              B        |L2.26|
                  |L2.18|
000012  5d10              LDRB     r0,[r2,r4]            ;1089
000014  4043              EORS     r3,r3,r0              ;1089
000016  1c60              ADDS     r0,r4,#1              ;1087
000018  b284              UXTH     r4,r0                 ;1087
                  |L2.26|
00001a  1e48              SUBS     r0,r1,#1              ;1087
00001c  42a0              CMP      r0,r4                 ;1087
00001e  d8f8              BHI      |L2.18|
000020  43d8              MVNS     r0,r3                 ;1092
000022  b2c3              UXTB     r3,r0                 ;1092
000024  1e48              SUBS     r0,r1,#1              ;1095
000026  5c10              LDRB     r0,[r2,r0]            ;1095
000028  4298              CMP      r0,r3                 ;1095
00002a  d001              BEQ      |L2.48|
00002c  2000              MOVS     r0,#0                 ;1097
00002e  e7ed              B        |L2.12|
                  |L2.48|
000030  2001              MOVS     r0,#1                 ;1100
000032  e7eb              B        |L2.12|
;;;1102   
                          ENDP


                          AREA ||i.CAN_CmdFrameProcess||, CODE, READONLY, ALIGN=2

                  CAN_CmdFrameProcess PROC
;;;568    // CAN命令帧缓冲区处理
;;;569    void CAN_CmdFrameProcess(CAN_CB *pCB)
000000  b5fe              PUSH     {r1-r7,lr}
;;;570    {
000002  4605              MOV      r5,r0
;;;571    	CAN_CMD cmd = IAP_CTRL_CAN_CMD_EMPTY;
000004  2700              MOVS     r7,#0
;;;572    	CAN_CMD_FRAME *pCmdFrame = NULL;
000006  2400              MOVS     r4,#0
;;;573    	uint8 sourceBuffSelect = CAN_DEVICE_SOURCE_ID_MAX;
000008  2601              MOVS     r6,#1
;;;574    	volatile uint32 temp = 0;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;575    	volatile uint16 length;
;;;576    	volatile uint8 errStatus;
;;;577    	volatile uint16 i;
;;;578    
;;;579    	// 参数合法性检验
;;;580    	if (NULL == pCB)
00000e  b905              CBNZ     r5,|L3.18|
                  |L3.16|
;;;581    	{
;;;582    		return;
;;;583    	}
;;;584    
;;;585    	// 循环判断是否有数据需要处理
;;;586    	for (sourceBuffSelect = 0; sourceBuffSelect < CAN_DEVICE_SOURCE_ID_MAX; sourceBuffSelect++)
;;;587    	{
;;;588    		// 命令帧缓冲区为空，退出
;;;589    		if (pCB->rx.rxEachNode[sourceBuffSelect].head == pCB->rx.rxEachNode[sourceBuffSelect].end)
;;;590    		{
;;;591    			continue;
;;;592    		}
;;;593    
;;;594    		// 获取当前要处理的命令帧指针
;;;595    		pCmdFrame = &pCB->rx.rxEachNode[sourceBuffSelect].cmdQueue[pCB->rx.rxEachNode[sourceBuffSelect].head];
;;;596    
;;;597    		// 命令头非法，退出
;;;598    		if (CAN_CMD_HEAD != pCmdFrame->buff[CAN_CMD_HEAD_INDEX])
;;;599    		{
;;;600    			// 删除命令帧
;;;601    			pCB->rx.rxEachNode[sourceBuffSelect].head++;
;;;602    			pCB->rx.rxEachNode[sourceBuffSelect].head %= CAN_RX_QUEUE_SIZE;
;;;603    			continue;
;;;604    		}
;;;605    
;;;606    		// 命令头合法，则提取命令
;;;607    		cmd = (CAN_CMD)(pCmdFrame->buff[CAN_CMD_CMD_INDEX]);
;;;608    
;;;609    		switch (dut_info.ID)
;;;610    		{
;;;611    		case DUT_TYPE_NULL:
;;;612    			break;
;;;613    
;;;614    		case DUT_TYPE_CM: // 通用仪表升级
;;;615    			switch (cmd)
;;;616    			{
;;;617    			case IAP_CTRL_CAN_CMD_EMPTY: // 0x00 空命令
;;;618    				break;
;;;619    
;;;620    			case IAP_CTRL_CAN_CMD_UP_PROJECT_APPLY:
;;;621    				if (!dut_info.dutPowerOnAllow) // 只接收一次eco请求
;;;622    				{
;;;623    					STATE_SwitchStep(STEP_CM_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST);
;;;624    					dut_info.dutPowerOnAllow = TRUE; // 不再接收eco请求
;;;625    				}
;;;626    				break;
;;;627    
;;;628    			case IAP_CTRL_CAN_CMD_UP_PROJECT_READY: // 0x03：DUT工程模式准备就绪
;;;629    				if (dut_info.reconnectionFlag)
;;;630    				{
;;;631    					if (dut_info.reconnectionRepeatOne)
;;;632    					{
;;;633    						if (dut_info.appUpFlag)
;;;634    						{
;;;635    							STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_APP_WRITE);
;;;636    						}
;;;637    						else if (dut_info.uiUpFlag)
;;;638    						{
;;;639    							STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_UI_WRITE);
;;;640    						}
;;;641    					}
;;;642    					break;
;;;643    				}
;;;644    				// 选择升级
;;;645    				if (dut_info.appUpFlag)
;;;646    				{
;;;647    					STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_APP_EAR);
;;;648    				}
;;;649    				else if (dut_info.uiUpFlag)
;;;650    				{
;;;651    					STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_UI_EAR);
;;;652    				}
;;;653    				else if (dut_info.configUpFlag)
;;;654    				{
;;;655    					STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;656    				}
;;;657    				break;
;;;658    
;;;659    			case IAP_CTRL_CAN_CMD_UP_UI_DATA_ERASE_ACK: // 0x13,DUT_UI擦写成功
;;;660    				// 提取DUT_UI擦除结果
;;;661    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;662    				// 擦除失败
;;;663    				if (0 == temp)
;;;664    				{
;;;665    					// 擦除失败再擦除一次
;;;666    					STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_UI_EAR);
;;;667    					break;
;;;668    				}
;;;669    				// 擦除成功
;;;670    				STATE_SwitchStep(STEP_CM_CAN_UPGRADE_UI_EAR_RESUALT);
;;;671    				break;
;;;672    
;;;673    			case IAP_CTRL_CAN_CMD_UP_UI_DATA_WRITE_RESULT: // 0x15	//DUT_UI写入结果
;;;674    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;675    
;;;676    				if (0 == temp)
;;;677    				{
;;;678    					dut_info.currentUiSize--; // 应答失败重发上一包数据
;;;679    				}
;;;680    				if (dut_info.currentUiSize < dut_info.uiSize)
;;;681    				{
;;;682    					STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_UI_WRITE);
;;;683    				}
;;;684    				else
;;;685    				{
;;;686    					STATE_SwitchStep(STEP_CM_CAN_UPGRADE_UI_UP_SUCCESS);
;;;687    				}
;;;688    				break;
;;;689    
;;;690    			case IAP_CTRL_CAN_CMD_DOWN_IAP_ERASE_FLASH: // 0x24		//DUT_APP擦写
;;;691    				break;
;;;692    
;;;693    			case IAP_CTRL_CAN_CMD_UP_IAP_ERASE_FLASH_RESULT: // 0x25			//DUT_APP擦写结果查询
;;;694    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;695    				// 擦除失败
;;;696    				if (0 == temp)
;;;697    				{
;;;698    					// 擦除失败再擦除一次
;;;699    					STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_APP_EAR);
;;;700    					TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;701    					// TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;702    					break;
;;;703    				}
;;;704    				STATE_SwitchStep(STEP_CM_CAN_UPGRADE_APP_EAR_RESUALT);
;;;705    				break;
;;;706    
;;;707    			case IAP_CTRL_CAN_CMD_UP_IAP_WRITE_FLASH_RESULT: // 0x27		//DUT_APP写入结果
;;;708    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;709    
;;;710    				if (0 == temp)
;;;711    				{
;;;712    					if (0 < dut_info.currentAppSize)
;;;713    					{
;;;714    						dut_info.currentAppSize--;
;;;715    					}
;;;716    					break;
;;;717    				}
;;;718    				if (dut_info.currentAppSize < dut_info.appSize)
;;;719    				{
;;;720    					STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_APP_WRITE);
;;;721    				}
;;;722    				else
;;;723    				{
;;;724    					STATE_SwitchStep(STEP_CM_CAN_UPGRADE_APP_UP_SUCCESS);
;;;725    				}
;;;726    				break;
;;;727    
;;;728    			case IAP_CTRL_CAN_CMD_UP_UPDATA_FINISH_RESULT: // 0x2B  			//DUT写入结果确定
;;;729    				STATE_SwitchStep(STEP_CM_CAN_UPGRADE_ITEM_FINISH);
;;;730    				break;
;;;731    
;;;732    			default:
;;;733    				break;
;;;734    			}
;;;735    			break;
;;;736    
;;;737    		// 华芯微特升级
;;;738    		case DUT_TYPE_HUAXIN:
;;;739    			switch (cmd)
;;;740    			{
;;;741    			case IAP_CTRL_CAN_CMD_EMPTY: // 0x00 空命令
;;;742    				break;
;;;743    
;;;744    			// 收到仪表eco请求
;;;745    			case IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK: // 0x02
;;;746    				if (dut_info.appUpFlag || dut_info.uiUpFlag)
;;;747    				{
;;;748    					if (!dut_info.dutPowerOnAllow) // 只接收一次eco请求
;;;749    					{
;;;750    						STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST);
;;;751    						dut_info.dutPowerOnAllow = TRUE; // 不再接收eco请求
;;;752    					}
;;;753    				}
;;;754    				else if (dut_info.configUpFlag)
;;;755    				{
;;;756    					STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;757    				}
;;;758    
;;;759    				break;
;;;760    
;;;761    			case IAP_CTRL_CAN_CMD_UP_PROJECT_READY: // 0x03：DUT工程模式准备就绪
;;;762    				// 选择升级
;;;763    				if (dut_info.appUpFlag)
;;;764    				{
;;;765    					STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_APP_EAR);
;;;766    				}
;;;767    				else if (dut_info.uiUpFlag)
;;;768    				{
;;;769    					STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_EAR);
;;;770    				}
;;;771    				else if (dut_info.configUpFlag)
;;;772    				{
;;;773    					STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;774    				}
;;;775    				break;
;;;776    
;;;777    			case IAP_CTRL_CAN_HUAXIN_CMD_APP_EAR: // 0x05：DUT_APP擦写结果查询
;;;778    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;779    				// 擦除失败
;;;780    				if (0 == temp)
;;;781    				{
;;;782    					// 擦除失败再擦除一次
;;;783    					STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_APP_EAR);
;;;784    					break;
;;;785    				}
;;;786    				dut_info.currentAppSize = 0;
;;;787    				STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_APP_WRITE);
;;;788    				break;
;;;789    
;;;790    			case IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP: // 0x06：DUT_APP写入结果
;;;791    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;792    
;;;793    				if (0 == temp)
;;;794    				{
;;;795    					if (0 < dut_info.currentAppSize)
;;;796    					{
;;;797    						dut_info.currentAppSize--;
;;;798    					}
;;;799    				}
;;;800    				if (dut_info.currentAppSize < dut_info.appSize)
;;;801    				{
;;;802    					STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_APP_WRITE);
;;;803    				}
;;;804    				else
;;;805    				{
;;;806    					STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_APP_UP_SUCCESS);
;;;807    				}
;;;808    				break;
;;;809    
;;;810    			case IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP_COMPLETE: // 0x07：DUT写入结果确定
;;;811    				STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_ITEM_FINISH);
;;;812    				break;
;;;813    
;;;814    			case IAP_CTRL_CAN_CMD_UP_UI_DATA_ERASE_ACK: // 0x13：DUT_UI擦写成功
;;;815    				// 提取DUT_UI擦除结果
;;;816    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;817    				// 擦除失败
;;;818    				if (0 == temp)
;;;819    				{
;;;820    					// 擦除失败再擦除一次
;;;821    					STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_EAR);
;;;822    					break;
;;;823    				}
;;;824    				// 擦除成功
;;;825    				dut_info.currentUiSize = 0;
;;;826    				STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_WRITE);
;;;827    				break;
;;;828    
;;;829    			case IAP_CTRL_CAN_CMD_UP_UI_DATA_WRITE_RESULT: // 0x15：DUT_UI写入结果
;;;830    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;831    
;;;832    				if (0 == temp)
;;;833    				{
;;;834    					dut_info.currentUiSize--; // 应答失败重发上一包数据
;;;835    				}
;;;836    				if (dut_info.currentUiSize < dut_info.uiSize)
;;;837    				{
;;;838    					STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_WRITE);
;;;839    				}
;;;840    				else
;;;841    				{
;;;842    					STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_UI_UP_SUCCESS);
;;;843    				}
;;;844    				break;
;;;845    
;;;846    			case IAP_CTRL_CAN_CMD_UP_UPDATA_FINISH_RESULT:
;;;847    				STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_ITEM_FINISH);
;;;848    				break;
;;;849    
;;;850    			default:
;;;851    				break;
;;;852    			}
;;;853    			break;
;;;854    
;;;855    		case DUT_TYPE_SEG: // 段码屏
;;;856    			// 执行命令帧
;;;857    			switch (cmd)
;;;858    			{
;;;859    			// 收到仪表发送的ECO请求
;;;860    			case IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK: // 02
;;;861    				if (!dut_info.dutPowerOnAllow)
;;;862    				{
;;;863    					// 延时50ms允许进入工程模式
;;;864    					STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST);
;;;865    					dut_info.dutPowerOnAllow = TRUE; // 不在接收eco请求
;;;866    				}
;;;867    				break;
;;;868    
;;;869    			// 仪表回应准备就绪
;;;870    			case IAP_CTRL_CAN_CMD_UP_PROJECT_READY: // 03
;;;871    				if (dut_info.appUpFlag)
;;;872    				{
;;;873    					STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_EAR); // 擦除app
;;;874    				}
;;;875    				break;
;;;876    
;;;877    			case IAP_CTRL_CAN_CMD_SEG_RUN_APP_ACK: // 04
;;;878    				if (dut_info.configUpFlag)
;;;879    				{
;;;880    					STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;881    				}
;;;882    				else
;;;883    				{
;;;884    				}
;;;885    				break;
;;;886    			case IAP_CTRL_CAN_HUAXIN_CMD_APP_EAR: // 05
;;;887    				STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_APP_EAR_RESUALT);
;;;888    				// 提取DUT_UI擦除结果
;;;889    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;890    
;;;891    				// 擦除失败
;;;892    				if (0 == temp)
;;;893    				{
;;;894    					// 擦除失败再擦除一次
;;;895    					STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_EAR); // 擦除app
;;;896    					break;
;;;897    				}
;;;898    				// 擦除成功
;;;899    				dut_info.currentAppSize = 0;
;;;900    				STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_WRITE);
;;;901    
;;;902    				break;
;;;903    			case IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP: // 06,app写入
;;;904    				temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;905    				if (0 == temp) // 如果仪表写入失败
;;;906    				{
;;;907    					dut_info.currentAppSize--;
;;;908    				}
;;;909    
;;;910    				if (dut_info.currentAppSize < dut_info.appSize)
;;;911    				{
;;;912    					STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_WRITE);
;;;913    				}
;;;914    				else
;;;915    				{
;;;916    					STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_APP_UP_SUCCESS);
;;;917    				}
;;;918    				break;
;;;919    
;;;920    			case IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP_COMPLETE: // 07，升级项结束，开始升级下一项
;;;921    				STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_ITEM_FINISH);
;;;922    				break;
;;;923    
;;;924    			default:
;;;925    				break;
;;;926    			}
;;;927    			break;
;;;928    
;;;929    		// 开阳升级流程
;;;930    		case DUT_TYPE_KAIYANG:
;;;931    			// 执行命令帧
;;;932    			switch (cmd)
;;;933    			{
;;;934    			// 收到仪表发送的ECO请求
;;;935    			case IAP_CTRL_CAN_CMD_UP_PROJECT_APPLY: // 01
;;;936    				if (!dut_info.dutPowerOnAllow)
;;;937    				{
;;;938    					STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_UP_ALLOW);
;;;939    					dut_info.dutPowerOnAllow = TRUE; // 不在接收eco请求
;;;940    				}
;;;941    				break;
;;;942    
;;;943    			// 仪表回应准备就绪
;;;944    			case IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK: // 02
;;;945    				if (dut_info.appUpFlag)
;;;946    				{
;;;947    					dut_info.currentAppSize = 0;
;;;948    					STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_APP_WRITE);
;;;949    					TIMER_AddTask(TIMER_ID_DUT_TIMEOUT, 
;;;950    								1000, 
;;;951    								STATE_SwitchStep, 
;;;952    								STEP_KAIYANG_CAN_UPGRADE_SEND_APP_AGAIN, 
;;;953    								TIMER_LOOP_FOREVER, 
;;;954    								ACTION_MODE_ADD_TO_QUEUE);
;;;955    				}
;;;956    				else if (dut_info.uiUpFlag)
;;;957    				{
;;;958    					dut_info.currentUiSize = 0;
;;;959    					STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_UI_WRITE);
;;;960    					TIMER_AddTask(TIMER_ID_DUT_TIMEOUT, 
;;;961    								1000, 
;;;962    								STATE_SwitchStep, 
;;;963    								STEP_KAIYANG_CAN_UPGRADE_SEND_UI_AGAIN, 
;;;964    								TIMER_LOOP_FOREVER, 
;;;965    								ACTION_MODE_ADD_TO_QUEUE);
;;;966    				}
;;;967    				break;
;;;968    
;;;969    			case IAP_CTRL_CAN_CMD_UP_PROJECT_READY: // 03
;;;970    				if (dut_info.appUpFlag)
;;;971    				{
;;;972    					if (dut_info.currentAppSize < dut_info.appSize - 1)
;;;973    					{
;;;974    						if (pCmdFrame->buff[CAN_CMD_DATA1_INDEX])
;;;975    						{
;;;976    							dut_info.currentAppSize++;
;;;977    						}
;;;978    //						else
;;;979    //						{
;;;980    //							if (0 < dut_info.currentAppSize)
;;;981    //							{
;;;982    //								dut_info.currentAppSize--;
;;;983    //							}
;;;984    //						}
;;;985    						STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_APP_WRITE);
;;;986    					}
;;;987    					else
;;;988    					{
;;;989    						STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_APP_UP_SUCCESS);
;;;990    					}
;;;991    				}
;;;992    				else if (dut_info.uiUpFlag)
;;;993    				{
;;;994    					if (dut_info.currentUiSize < dut_info.uiSize - 1)
;;;995    					{
;;;996    						if (pCmdFrame->buff[CAN_CMD_DATA1_INDEX])
;;;997    						{
;;;998    							dut_info.currentUiSize++;
;;;999    						}
;;;1000   //						else
;;;1001   //						{
;;;1002   //							if (0 < dut_info.currentUiSize)
;;;1003   //							{
;;;1004   //								dut_info.currentUiSize--;
;;;1005   //							}
;;;1006   //						}
;;;1007   						STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_UI_WRITE);
;;;1008   					}
;;;1009   					else
;;;1010   					{
;;;1011   						STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_APP_UP_SUCCESS);
;;;1012   					}
;;;1013   				}
;;;1014   
;;;1015   				break;
;;;1016   			case IAP_CTRL_CAN_CMD_SEG_RUN_APP_ACK: // 04
;;;1017   				if (pCmdFrame->buff[CAN_CMD_DATA1_INDEX])
;;;1018   				{
;;;1019   					// 升级成功
;;;1020   					if (dut_info.appUpFlag)
;;;1021   					{
;;;1022   						dut_info.appUpSuccesss = TRUE;
;;;1023   						dut_info.appUpFlag = FALSE;
;;;1024   					}
;;;1025   					else if (dut_info.uiUpFlag)
;;;1026   					{
;;;1027   						dut_info.uiUpSuccesss = TRUE;
;;;1028   						dut_info.uiUpFlag = FALSE;
;;;1029   					}
;;;1030   				}
;;;1031   				else // 升级失败
;;;1032   				{
;;;1033   					if (dut_info.appUpFlag)
;;;1034   					{
;;;1035   						dut_info.appUpFaile = TRUE;
;;;1036   						dut_info.appUpFlag = FALSE;
;;;1037   					}
;;;1038   					else if (dut_info.uiUpFlag)
;;;1039   					{
;;;1040   						dut_info.appUpFaile = TRUE;
;;;1041   						dut_info.uiUpFlag = FALSE;
;;;1042   					}
;;;1043   				}
;;;1044   				TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1045   				STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_ITEM_FINISH);
;;;1046   				break;
;;;1047   
;;;1048   			default:
;;;1049   				break;
;;;1050   			}
;;;1051   			break;
;;;1052   
;;;1053   		default:
;;;1054   			break;
;;;1055   		}
;;;1056   		// 删除命令帧
;;;1057   		pCB->rx.rxEachNode[sourceBuffSelect].head++;
;;;1058   		pCB->rx.rxEachNode[sourceBuffSelect].head %= CAN_RX_QUEUE_SIZE;
;;;1059   	}
;;;1060   }
000010  bdfe              POP      {r1-r7,pc}
                  |L3.18|
000012  2600              MOVS     r6,#0                 ;586
000014  e2e1              B        |L3.1498|
                  |L3.22|
000016  f24050c9          MOV      r0,#0x5c9             ;589
00001a  4370              MULS     r0,r6,r0              ;589
00001c  f1050194          ADD      r1,r5,#0x94           ;589
000020  eb010080          ADD      r0,r1,r0,LSL #2       ;589
000024  f5005080          ADD      r0,r0,#0x1000         ;589
000028  f8b02720          LDRH     r2,[r0,#0x720]        ;589
00002c  f24050c9          MOV      r0,#0x5c9             ;589
000030  4370              MULS     r0,r6,r0              ;589
000032  eb010080          ADD      r0,r1,r0,LSL #2       ;589
000036  f5005080          ADD      r0,r0,#0x1000         ;589
00003a  f8b00722          LDRH     r0,[r0,#0x722]        ;589
00003e  4282              CMP      r2,r0                 ;589
000040  d100              BNE      |L3.68|
000042  e2c8              B        |L3.1494|
                  |L3.68|
000044  f24050c9          MOV      r0,#0x5c9             ;595
000048  4370              MULS     r0,r6,r0              ;595
00004a  f1050194          ADD      r1,r5,#0x94           ;595
00004e  eb010280          ADD      r2,r1,r0,LSL #2       ;595
000052  f24050c9          MOV      r0,#0x5c9             ;595
000056  4370              MULS     r0,r6,r0              ;595
000058  eb010080          ADD      r0,r1,r0,LSL #2       ;595
00005c  f5005080          ADD      r0,r0,#0x1000         ;595
000060  f8b00720          LDRH     r0,[r0,#0x720]        ;595
000064  eb000180          ADD      r1,r0,r0,LSL #2       ;595
000068  eb011040          ADD      r0,r1,r0,LSL #5       ;595
00006c  eb020480          ADD      r4,r2,r0,LSL #2       ;595
000070  7920              LDRB     r0,[r4,#4]            ;598
000072  2855              CMP      r0,#0x55              ;598
000074  d030              BEQ      |L3.216|
000076  f24050c9          MOV      r0,#0x5c9             ;601
00007a  4370              MULS     r0,r6,r0              ;601
00007c  f1050194          ADD      r1,r5,#0x94           ;601
000080  eb010080          ADD      r0,r1,r0,LSL #2       ;601
000084  f5005080          ADD      r0,r0,#0x1000         ;601
000088  f8b00720          LDRH     r0,[r0,#0x720]        ;601
00008c  1c40              ADDS     r0,r0,#1              ;601
00008e  b282              UXTH     r2,r0                 ;601
000090  f24050c9          MOV      r0,#0x5c9             ;601
000094  4370              MULS     r0,r6,r0              ;601
000096  eb010080          ADD      r0,r1,r0,LSL #2       ;601
00009a  f5005080          ADD      r0,r0,#0x1000         ;601
00009e  f8a02720          STRH     r2,[r0,#0x720]        ;601
0000a2  f24050c9          MOV      r0,#0x5c9             ;602
0000a6  4370              MULS     r0,r6,r0              ;602
0000a8  eb010080          ADD      r0,r1,r0,LSL #2       ;602
0000ac  f5005080          ADD      r0,r0,#0x1000         ;602
0000b0  f8b00720          LDRH     r0,[r0,#0x720]        ;602
0000b4  2128              MOVS     r1,#0x28              ;602
0000b6  fb90f2f1          SDIV     r2,r0,r1              ;602
0000ba  fb010012          MLS      r0,r1,r2,r0           ;602
0000be  b282              UXTH     r2,r0                 ;602
0000c0  f24050c9          MOV      r0,#0x5c9             ;602
0000c4  4370              MULS     r0,r6,r0              ;602
0000c6  f1050194          ADD      r1,r5,#0x94           ;602
0000ca  eb010080          ADD      r0,r1,r0,LSL #2       ;602
0000ce  f5005080          ADD      r0,r0,#0x1000         ;602
0000d2  f8a02720          STRH     r2,[r0,#0x720]        ;602
0000d6  e27e              B        |L3.1494|
                  |L3.216|
0000d8  7967              LDRB     r7,[r4,#5]            ;607
0000da  48fb              LDR      r0,|L3.1224|
0000dc  7d80              LDRB     r0,[r0,#0x16]         ;609  ; dut_info
0000de  2806              CMP      r0,#6                 ;609
0000e0  d270              BCS      |L3.452|
0000e2  e8dff000          TBB      [pc,r0]               ;609
0000e6  036f              DCB      0x03,0x6f
0000e8  04a9f5f4          DCB      0x04,0xa9,0xf5,0xf4
0000ec  e241              B        |L3.1394|
0000ee  2f15              CMP      r7,#0x15              ;615
0000f0  d055              BEQ      |L3.414|
0000f2  dc07              BGT      |L3.260|
0000f4  b17f              CBZ      r7,|L3.278|
0000f6  2f01              CMP      r7,#1                 ;615
0000f8  d00e              BEQ      |L3.280|
0000fa  2f03              CMP      r7,#3                 ;615
0000fc  d018              BEQ      |L3.304|
0000fe  2f13              CMP      r7,#0x13              ;615
                  |L3.256|
000100  d171              BNE      |L3.486|
000102  e040              B        |L3.390|
                  |L3.260|
000104  2f24              CMP      r7,#0x24              ;615
000106  d062              BEQ      |L3.462|
000108  2f25              CMP      r7,#0x25              ;615
00010a  d061              BEQ      |L3.464|
00010c  2f27              CMP      r7,#0x27              ;615
00010e  d070              BEQ      |L3.498|
000110  2f2b              CMP      r7,#0x2b              ;615
000112  d1f5              BNE      |L3.256|
000114  e089              B        |L3.554|
                  |L3.278|
000116  e08d              B        |L3.564|
                  |L3.280|
000118  48eb              LDR      r0,|L3.1224|
00011a  f8900038          LDRB     r0,[r0,#0x38]         ;621  ; dut_info
00011e  b930              CBNZ     r0,|L3.302|
000120  2011              MOVS     r0,#0x11              ;623
000122  f7fffffe          BL       STATE_SwitchStep
000126  2001              MOVS     r0,#1                 ;624
000128  49e7              LDR      r1,|L3.1224|
00012a  f8810038          STRB     r0,[r1,#0x38]         ;624
                  |L3.302|
00012e  e081              B        |L3.564|
                  |L3.304|
000130  48e5              LDR      r0,|L3.1224|
000132  f8900045          LDRB     r0,[r0,#0x45]         ;629  ; dut_info
000136  b188              CBZ      r0,|L3.348|
000138  48e3              LDR      r0,|L3.1224|
00013a  f8900046          LDRB     r0,[r0,#0x46]         ;631  ; dut_info
00013e  b160              CBZ      r0,|L3.346|
000140  48e1              LDR      r0,|L3.1224|
000142  7e40              LDRB     r0,[r0,#0x19]         ;633  ; dut_info
000144  b118              CBZ      r0,|L3.334|
000146  2019              MOVS     r0,#0x19              ;635
000148  f7fffffe          BL       STATE_SwitchStep
00014c  e005              B        |L3.346|
                  |L3.334|
00014e  48de              LDR      r0,|L3.1224|
000150  7ec0              LDRB     r0,[r0,#0x1b]         ;637  ; dut_info
000152  b110              CBZ      r0,|L3.346|
000154  2015              MOVS     r0,#0x15              ;639
000156  f7fffffe          BL       STATE_SwitchStep
                  |L3.346|
00015a  e06b              B        |L3.564|
                  |L3.348|
00015c  48da              LDR      r0,|L3.1224|
00015e  7e40              LDRB     r0,[r0,#0x19]         ;645  ; dut_info
000160  b118              CBZ      r0,|L3.362|
000162  2017              MOVS     r0,#0x17              ;647
000164  f7fffffe          BL       STATE_SwitchStep
000168  e00c              B        |L3.388|
                  |L3.362|
00016a  48d7              LDR      r0,|L3.1224|
00016c  7ec0              LDRB     r0,[r0,#0x1b]         ;649  ; dut_info
00016e  b118              CBZ      r0,|L3.376|
000170  2013              MOVS     r0,#0x13              ;651
000172  f7fffffe          BL       STATE_SwitchStep
000176  e005              B        |L3.388|
                  |L3.376|
000178  48d3              LDR      r0,|L3.1224|
00017a  7e80              LDRB     r0,[r0,#0x1a]         ;653  ; dut_info
00017c  b110              CBZ      r0,|L3.388|
00017e  2040              MOVS     r0,#0x40              ;655
000180  f7fffffe          BL       STATE_SwitchStep
                  |L3.388|
000184  e056              B        |L3.564|
                  |L3.390|
000186  79e0              LDRB     r0,[r4,#7]            ;661
000188  9002              STR      r0,[sp,#8]            ;661
00018a  9802              LDR      r0,[sp,#8]            ;663
00018c  b918              CBNZ     r0,|L3.406|
00018e  2013              MOVS     r0,#0x13              ;666
000190  f7fffffe          BL       STATE_SwitchStep
000194  e04e              B        |L3.564|
                  |L3.406|
000196  2014              MOVS     r0,#0x14              ;670
000198  f7fffffe          BL       STATE_SwitchStep
00019c  e04a              B        |L3.564|
                  |L3.414|
00019e  79e0              LDRB     r0,[r4,#7]            ;674
0001a0  9002              STR      r0,[sp,#8]            ;674
0001a2  9802              LDR      r0,[sp,#8]            ;676
0001a4  b920              CBNZ     r0,|L3.432|
0001a6  48c8              LDR      r0,|L3.1224|
0001a8  6b00              LDR      r0,[r0,#0x30]         ;678  ; dut_info
0001aa  1e40              SUBS     r0,r0,#1              ;678
0001ac  49c6              LDR      r1,|L3.1224|
0001ae  6308              STR      r0,[r1,#0x30]         ;678  ; dut_info
                  |L3.432|
0001b0  48c5              LDR      r0,|L3.1224|
0001b2  6b00              LDR      r0,[r0,#0x30]         ;680  ; dut_info
0001b4  49c4              LDR      r1,|L3.1224|
0001b6  6a49              LDR      r1,[r1,#0x24]         ;680  ; dut_info
0001b8  4288              CMP      r0,r1                 ;680
0001ba  d204              BCS      |L3.454|
0001bc  2015              MOVS     r0,#0x15              ;682
0001be  f7fffffe          BL       STATE_SwitchStep
0001c2  e003              B        |L3.460|
                  |L3.452|
0001c4  e1d4              B        |L3.1392|
                  |L3.454|
0001c6  2016              MOVS     r0,#0x16              ;686
0001c8  f7fffffe          BL       STATE_SwitchStep
                  |L3.460|
0001cc  e032              B        |L3.564|
                  |L3.462|
0001ce  e031              B        |L3.564|
                  |L3.464|
0001d0  79e0              LDRB     r0,[r4,#7]            ;694
0001d2  9002              STR      r0,[sp,#8]            ;694
0001d4  9802              LDR      r0,[sp,#8]            ;696
0001d6  b940              CBNZ     r0,|L3.490|
0001d8  2017              MOVS     r0,#0x17              ;699
0001da  f7fffffe          BL       STATE_SwitchStep
0001de  2008              MOVS     r0,#8                 ;700
0001e0  f7fffffe          BL       TIMER_ResetTimer
0001e4  e026              B        |L3.564|
                  |L3.486|
0001e6  e024              B        |L3.562|
0001e8  e003              B        |L3.498|
                  |L3.490|
0001ea  2018              MOVS     r0,#0x18              ;704
0001ec  f7fffffe          BL       STATE_SwitchStep
0001f0  e020              B        |L3.564|
                  |L3.498|
0001f2  79e0              LDRB     r0,[r4,#7]            ;708
0001f4  9002              STR      r0,[sp,#8]            ;708
0001f6  9802              LDR      r0,[sp,#8]            ;710
0001f8  b948              CBNZ     r0,|L3.526|
0001fa  48b3              LDR      r0,|L3.1224|
0001fc  6ac0              LDR      r0,[r0,#0x2c]         ;712  ; dut_info
0001fe  2800              CMP      r0,#0                 ;712
000200  d904              BLS      |L3.524|
000202  48b1              LDR      r0,|L3.1224|
000204  6ac0              LDR      r0,[r0,#0x2c]         ;714  ; dut_info
000206  1e40              SUBS     r0,r0,#1              ;714
000208  49af              LDR      r1,|L3.1224|
00020a  62c8              STR      r0,[r1,#0x2c]         ;714  ; dut_info
                  |L3.524|
00020c  e012              B        |L3.564|
                  |L3.526|
00020e  48ae              LDR      r0,|L3.1224|
000210  6ac0              LDR      r0,[r0,#0x2c]         ;718  ; dut_info
000212  49ad              LDR      r1,|L3.1224|
000214  6a09              LDR      r1,[r1,#0x20]         ;718  ; dut_info
000216  4288              CMP      r0,r1                 ;718
000218  d203              BCS      |L3.546|
00021a  2019              MOVS     r0,#0x19              ;720
00021c  f7fffffe          BL       STATE_SwitchStep
000220  e002              B        |L3.552|
                  |L3.546|
000222  201a              MOVS     r0,#0x1a              ;724
000224  f7fffffe          BL       STATE_SwitchStep
                  |L3.552|
000228  e004              B        |L3.564|
                  |L3.554|
00022a  201b              MOVS     r0,#0x1b              ;729
00022c  f7fffffe          BL       STATE_SwitchStep
000230  e000              B        |L3.564|
                  |L3.562|
000232  bf00              NOP                            ;733
                  |L3.564|
000234  bf00              NOP                            ;618
000236  e19c              B        |L3.1394|
000238  2f06              CMP      r7,#6                 ;739
00023a  d051              BEQ      |L3.736|
00023c  dc07              BGT      |L3.590|
00023e  b17f              CBZ      r7,|L3.608|
000240  2f02              CMP      r7,#2                 ;739
000242  d00e              BEQ      |L3.610|
000244  2f03              CMP      r7,#3                 ;739
000246  d025              BEQ      |L3.660|
000248  2f05              CMP      r7,#5                 ;739
00024a  d170              BNE      |L3.814|
00024c  e037              B        |L3.702|
                  |L3.590|
00024e  2f07              CMP      r7,#7                 ;739
000250  d061              BEQ      |L3.790|
000252  2f13              CMP      r7,#0x13              ;739
000254  d063              BEQ      |L3.798|
000256  2f15              CMP      r7,#0x15              ;739
000258  d072              BEQ      |L3.832|
00025a  2f2b              CMP      r7,#0x2b              ;739
00025c  d167              BNE      |L3.814|
00025e  e086              B        |L3.878|
                  |L3.608|
000260  e08a              B        |L3.888|
                  |L3.610|
000262  4899              LDR      r0,|L3.1224|
000264  7e40              LDRB     r0,[r0,#0x19]         ;746  ; dut_info
000266  b910              CBNZ     r0,|L3.622|
000268  4897              LDR      r0,|L3.1224|
00026a  7ec0              LDRB     r0,[r0,#0x1b]         ;746  ; dut_info
00026c  b158              CBZ      r0,|L3.646|
                  |L3.622|
00026e  4896              LDR      r0,|L3.1224|
000270  f8900038          LDRB     r0,[r0,#0x38]         ;748  ; dut_info
000274  b968              CBNZ     r0,|L3.658|
000276  2021              MOVS     r0,#0x21              ;750
000278  f7fffffe          BL       STATE_SwitchStep
00027c  2001              MOVS     r0,#1                 ;751
00027e  4992              LDR      r1,|L3.1224|
000280  f8810038          STRB     r0,[r1,#0x38]         ;751
000284  e005              B        |L3.658|
                  |L3.646|
000286  4890              LDR      r0,|L3.1224|
000288  7e80              LDRB     r0,[r0,#0x1a]         ;754  ; dut_info
00028a  b110              CBZ      r0,|L3.658|
00028c  2040              MOVS     r0,#0x40              ;756
00028e  f7fffffe          BL       STATE_SwitchStep
                  |L3.658|
000292  e071              B        |L3.888|
                  |L3.660|
000294  488c              LDR      r0,|L3.1224|
000296  7e40              LDRB     r0,[r0,#0x19]         ;763  ; dut_info
000298  b118              CBZ      r0,|L3.674|
00029a  2023              MOVS     r0,#0x23              ;765
00029c  f7fffffe          BL       STATE_SwitchStep
0002a0  e00c              B        |L3.700|
                  |L3.674|
0002a2  4889              LDR      r0,|L3.1224|
0002a4  7ec0              LDRB     r0,[r0,#0x1b]         ;767  ; dut_info
0002a6  b118              CBZ      r0,|L3.688|
0002a8  2027              MOVS     r0,#0x27              ;769
0002aa  f7fffffe          BL       STATE_SwitchStep
0002ae  e005              B        |L3.700|
                  |L3.688|
0002b0  4885              LDR      r0,|L3.1224|
0002b2  7e80              LDRB     r0,[r0,#0x1a]         ;771  ; dut_info
0002b4  b110              CBZ      r0,|L3.700|
0002b6  2040              MOVS     r0,#0x40              ;773
0002b8  f7fffffe          BL       STATE_SwitchStep
                  |L3.700|
0002bc  e05c              B        |L3.888|
                  |L3.702|
0002be  79e0              LDRB     r0,[r4,#7]            ;778
0002c0  9002              STR      r0,[sp,#8]            ;778
0002c2  9802              LDR      r0,[sp,#8]            ;780
0002c4  b928              CBNZ     r0,|L3.722|
0002c6  2023              MOVS     r0,#0x23              ;783
0002c8  f7fffffe          BL       STATE_SwitchStep
0002cc  e054              B        |L3.888|
0002ce  e0a7              B        |L3.1056|
0002d0  e054              B        |L3.892|
                  |L3.722|
0002d2  2000              MOVS     r0,#0                 ;786
0002d4  497c              LDR      r1,|L3.1224|
0002d6  62c8              STR      r0,[r1,#0x2c]         ;786  ; dut_info
0002d8  2025              MOVS     r0,#0x25              ;787
0002da  f7fffffe          BL       STATE_SwitchStep
0002de  e04b              B        |L3.888|
                  |L3.736|
0002e0  79e0              LDRB     r0,[r4,#7]            ;791
0002e2  9002              STR      r0,[sp,#8]            ;791
0002e4  9802              LDR      r0,[sp,#8]            ;793
0002e6  b940              CBNZ     r0,|L3.762|
0002e8  4877              LDR      r0,|L3.1224|
0002ea  6ac0              LDR      r0,[r0,#0x2c]         ;795  ; dut_info
0002ec  2800              CMP      r0,#0                 ;795
0002ee  d904              BLS      |L3.762|
0002f0  4875              LDR      r0,|L3.1224|
0002f2  6ac0              LDR      r0,[r0,#0x2c]         ;797  ; dut_info
0002f4  1e40              SUBS     r0,r0,#1              ;797
0002f6  4974              LDR      r1,|L3.1224|
0002f8  62c8              STR      r0,[r1,#0x2c]         ;797  ; dut_info
                  |L3.762|
0002fa  4873              LDR      r0,|L3.1224|
0002fc  6ac0              LDR      r0,[r0,#0x2c]         ;800  ; dut_info
0002fe  4972              LDR      r1,|L3.1224|
000300  6a09              LDR      r1,[r1,#0x20]         ;800  ; dut_info
000302  4288              CMP      r0,r1                 ;800
000304  d203              BCS      |L3.782|
000306  2025              MOVS     r0,#0x25              ;802
000308  f7fffffe          BL       STATE_SwitchStep
00030c  e002              B        |L3.788|
                  |L3.782|
00030e  2026              MOVS     r0,#0x26              ;806
000310  f7fffffe          BL       STATE_SwitchStep
                  |L3.788|
000314  e030              B        |L3.888|
                  |L3.790|
000316  202b              MOVS     r0,#0x2b              ;811
000318  f7fffffe          BL       STATE_SwitchStep
00031c  e02c              B        |L3.888|
                  |L3.798|
00031e  79e0              LDRB     r0,[r4,#7]            ;816
000320  9002              STR      r0,[sp,#8]            ;816
000322  9802              LDR      r0,[sp,#8]            ;818
000324  b928              CBNZ     r0,|L3.818|
000326  2027              MOVS     r0,#0x27              ;821
000328  f7fffffe          BL       STATE_SwitchStep
00032c  e024              B        |L3.888|
                  |L3.814|
00032e  e022              B        |L3.886|
000330  e006              B        |L3.832|
                  |L3.818|
000332  2000              MOVS     r0,#0                 ;825
000334  4964              LDR      r1,|L3.1224|
000336  6308              STR      r0,[r1,#0x30]         ;825  ; dut_info
000338  2029              MOVS     r0,#0x29              ;826
00033a  f7fffffe          BL       STATE_SwitchStep
00033e  e01b              B        |L3.888|
                  |L3.832|
000340  79e0              LDRB     r0,[r4,#7]            ;830
000342  9002              STR      r0,[sp,#8]            ;830
000344  9802              LDR      r0,[sp,#8]            ;832
000346  b920              CBNZ     r0,|L3.850|
000348  485f              LDR      r0,|L3.1224|
00034a  6b00              LDR      r0,[r0,#0x30]         ;834  ; dut_info
00034c  1e40              SUBS     r0,r0,#1              ;834
00034e  495e              LDR      r1,|L3.1224|
000350  6308              STR      r0,[r1,#0x30]         ;834  ; dut_info
                  |L3.850|
000352  485d              LDR      r0,|L3.1224|
000354  6b00              LDR      r0,[r0,#0x30]         ;836  ; dut_info
000356  495c              LDR      r1,|L3.1224|
000358  6a49              LDR      r1,[r1,#0x24]         ;836  ; dut_info
00035a  4288              CMP      r0,r1                 ;836
00035c  d203              BCS      |L3.870|
00035e  2029              MOVS     r0,#0x29              ;838
000360  f7fffffe          BL       STATE_SwitchStep
000364  e002              B        |L3.876|
                  |L3.870|
000366  202a              MOVS     r0,#0x2a              ;842
000368  f7fffffe          BL       STATE_SwitchStep
                  |L3.876|
00036c  e004              B        |L3.888|
                  |L3.878|
00036e  202b              MOVS     r0,#0x2b              ;847
000370  f7fffffe          BL       STATE_SwitchStep
000374  e000              B        |L3.888|
                  |L3.886|
000376  bf00              NOP                            ;851
                  |L3.888|
000378  bf00              NOP                            ;742
00037a  e0fa              B        |L3.1394|
                  |L3.892|
00037c  1eb8              SUBS     r0,r7,#2              ;857
00037e  2806              CMP      r0,#6                 ;857
000380  d24b              BCS      |L3.1050|
000382  e8dff000          TBB      [pc,r0]               ;857
000386  030f              DCB      0x03,0x0f
000388  161d2f46          DCB      0x16,0x1d,0x2f,0x46
00038c  484e              LDR      r0,|L3.1224|
00038e  f8900038          LDRB     r0,[r0,#0x38]         ;861  ; dut_info
000392  b930              CBNZ     r0,|L3.930|
000394  202e              MOVS     r0,#0x2e              ;864
000396  f7fffffe          BL       STATE_SwitchStep
00039a  2001              MOVS     r0,#1                 ;865
00039c  494a              LDR      r1,|L3.1224|
00039e  f8810038          STRB     r0,[r1,#0x38]         ;865
                  |L3.930|
0003a2  e03b              B        |L3.1052|
0003a4  4848              LDR      r0,|L3.1224|
0003a6  7e40              LDRB     r0,[r0,#0x19]         ;871  ; dut_info
0003a8  b110              CBZ      r0,|L3.944|
0003aa  2030              MOVS     r0,#0x30              ;873
0003ac  f7fffffe          BL       STATE_SwitchStep
                  |L3.944|
0003b0  e034              B        |L3.1052|
0003b2  4845              LDR      r0,|L3.1224|
0003b4  7e80              LDRB     r0,[r0,#0x1a]         ;878  ; dut_info
0003b6  b110              CBZ      r0,|L3.958|
0003b8  2040              MOVS     r0,#0x40              ;880
0003ba  f7fffffe          BL       STATE_SwitchStep
                  |L3.958|
0003be  e02d              B        |L3.1052|
0003c0  2031              MOVS     r0,#0x31              ;887
0003c2  f7fffffe          BL       STATE_SwitchStep
0003c6  79e0              LDRB     r0,[r4,#7]            ;889
0003c8  9002              STR      r0,[sp,#8]            ;889
0003ca  9802              LDR      r0,[sp,#8]            ;892
0003cc  b918              CBNZ     r0,|L3.982|
0003ce  2030              MOVS     r0,#0x30              ;895
0003d0  f7fffffe          BL       STATE_SwitchStep
0003d4  e022              B        |L3.1052|
                  |L3.982|
0003d6  2000              MOVS     r0,#0                 ;899
0003d8  493b              LDR      r1,|L3.1224|
0003da  62c8              STR      r0,[r1,#0x2c]         ;899  ; dut_info
0003dc  2032              MOVS     r0,#0x32              ;900
0003de  f7fffffe          BL       STATE_SwitchStep
0003e2  e01b              B        |L3.1052|
0003e4  79e0              LDRB     r0,[r4,#7]            ;904
0003e6  9002              STR      r0,[sp,#8]            ;904
0003e8  9802              LDR      r0,[sp,#8]            ;905
0003ea  b920              CBNZ     r0,|L3.1014|
0003ec  4836              LDR      r0,|L3.1224|
0003ee  6ac0              LDR      r0,[r0,#0x2c]         ;907  ; dut_info
0003f0  1e40              SUBS     r0,r0,#1              ;907
0003f2  4935              LDR      r1,|L3.1224|
0003f4  62c8              STR      r0,[r1,#0x2c]         ;907  ; dut_info
                  |L3.1014|
0003f6  4834              LDR      r0,|L3.1224|
0003f8  6ac0              LDR      r0,[r0,#0x2c]         ;910  ; dut_info
0003fa  4933              LDR      r1,|L3.1224|
0003fc  6a09              LDR      r1,[r1,#0x20]         ;910  ; dut_info
0003fe  4288              CMP      r0,r1                 ;910
000400  d203              BCS      |L3.1034|
000402  2032              MOVS     r0,#0x32              ;912
000404  f7fffffe          BL       STATE_SwitchStep
000408  e002              B        |L3.1040|
                  |L3.1034|
00040a  2033              MOVS     r0,#0x33              ;916
00040c  f7fffffe          BL       STATE_SwitchStep
                  |L3.1040|
000410  e004              B        |L3.1052|
000412  2034              MOVS     r0,#0x34              ;921
000414  f7fffffe          BL       STATE_SwitchStep
000418  e000              B        |L3.1052|
                  |L3.1050|
00041a  bf00              NOP                            ;925
                  |L3.1052|
00041c  bf00              NOP                            ;867
00041e  e0a8              B        |L3.1394|
                  |L3.1056|
000420  2f01              CMP      r7,#1                 ;932
000422  d006              BEQ      |L3.1074|
000424  2f02              CMP      r7,#2                 ;932
000426  d010              BEQ      |L3.1098|
000428  2f03              CMP      r7,#3                 ;932
00042a  d038              BEQ      |L3.1182|
00042c  2f04              CMP      r7,#4                 ;932
00042e  d177              BNE      |L3.1312|
000430  e06a              B        |L3.1288|
                  |L3.1074|
000432  4825              LDR      r0,|L3.1224|
000434  f8900038          LDRB     r0,[r0,#0x38]         ;936  ; dut_info
000438  b930              CBNZ     r0,|L3.1096|
00043a  2038              MOVS     r0,#0x38              ;938
00043c  f7fffffe          BL       STATE_SwitchStep
000440  2001              MOVS     r0,#1                 ;939
000442  4921              LDR      r1,|L3.1224|
000444  f8810038          STRB     r0,[r1,#0x38]         ;939
                  |L3.1096|
000448  e090              B        |L3.1388|
                  |L3.1098|
00044a  481f              LDR      r0,|L3.1224|
00044c  7e40              LDRB     r0,[r0,#0x19]         ;945  ; dut_info
00044e  b188              CBZ      r0,|L3.1140|
000450  2000              MOVS     r0,#0                 ;947
000452  491d              LDR      r1,|L3.1224|
000454  62c8              STR      r0,[r1,#0x2c]         ;947  ; dut_info
000456  2039              MOVS     r0,#0x39              ;948
000458  f7fffffe          BL       STATE_SwitchStep
00045c  2001              MOVS     r0,#1                 ;949
00045e  1e81              SUBS     r1,r0,#2              ;949
000460  233a              MOVS     r3,#0x3a              ;949
000462  4a1a              LDR      r2,|L3.1228|
000464  e9cd1000          STRD     r1,r0,[sp,#0]         ;949
000468  f44f717a          MOV      r1,#0x3e8             ;949
00046c  2008              MOVS     r0,#8                 ;949
00046e  f7fffffe          BL       TIMER_AddTask
000472  e013              B        |L3.1180|
                  |L3.1140|
000474  4814              LDR      r0,|L3.1224|
000476  7ec0              LDRB     r0,[r0,#0x1b]         ;956  ; dut_info
000478  b180              CBZ      r0,|L3.1180|
00047a  2000              MOVS     r0,#0                 ;958
00047c  4912              LDR      r1,|L3.1224|
00047e  6308              STR      r0,[r1,#0x30]         ;958  ; dut_info
000480  203c              MOVS     r0,#0x3c              ;959
000482  f7fffffe          BL       STATE_SwitchStep
000486  2001              MOVS     r0,#1                 ;960
000488  1e81              SUBS     r1,r0,#2              ;960
00048a  233d              MOVS     r3,#0x3d              ;960
00048c  4a0f              LDR      r2,|L3.1228|
00048e  e9cd1000          STRD     r1,r0,[sp,#0]         ;960
000492  f44f717a          MOV      r1,#0x3e8             ;960
000496  2008              MOVS     r0,#8                 ;960
000498  f7fffffe          BL       TIMER_AddTask
                  |L3.1180|
00049c  e066              B        |L3.1388|
                  |L3.1182|
00049e  480a              LDR      r0,|L3.1224|
0004a0  7e40              LDRB     r0,[r0,#0x19]         ;970  ; dut_info
0004a2  b1c8              CBZ      r0,|L3.1240|
0004a4  4808              LDR      r0,|L3.1224|
0004a6  6ac1              LDR      r1,[r0,#0x2c]         ;972  ; dut_info
0004a8  6a00              LDR      r0,[r0,#0x20]         ;972  ; dut_info
0004aa  1e40              SUBS     r0,r0,#1              ;972
0004ac  4281              CMP      r1,r0                 ;972
0004ae  d20f              BCS      |L3.1232|
0004b0  79e0              LDRB     r0,[r4,#7]            ;974
0004b2  b120              CBZ      r0,|L3.1214|
0004b4  4804              LDR      r0,|L3.1224|
0004b6  6ac0              LDR      r0,[r0,#0x2c]         ;976  ; dut_info
0004b8  1c40              ADDS     r0,r0,#1              ;976
0004ba  4903              LDR      r1,|L3.1224|
0004bc  62c8              STR      r0,[r1,#0x2c]         ;976  ; dut_info
                  |L3.1214|
0004be  2039              MOVS     r0,#0x39              ;985
0004c0  f7fffffe          BL       STATE_SwitchStep
0004c4  e01f              B        |L3.1286|
0004c6  0000              DCW      0x0000
                  |L3.1224|
                          DCD      dut_info
                  |L3.1228|
                          DCD      STATE_SwitchStep
                  |L3.1232|
0004d0  203b              MOVS     r0,#0x3b              ;989
0004d2  f7fffffe          BL       STATE_SwitchStep
0004d6  e016              B        |L3.1286|
                  |L3.1240|
0004d8  4842              LDR      r0,|L3.1508|
0004da  7ec0              LDRB     r0,[r0,#0x1b]         ;992  ; dut_info
0004dc  b198              CBZ      r0,|L3.1286|
0004de  4841              LDR      r0,|L3.1508|
0004e0  6b01              LDR      r1,[r0,#0x30]         ;994  ; dut_info
0004e2  6a40              LDR      r0,[r0,#0x24]         ;994  ; dut_info
0004e4  1e40              SUBS     r0,r0,#1              ;994
0004e6  4281              CMP      r1,r0                 ;994
0004e8  d20a              BCS      |L3.1280|
0004ea  79e0              LDRB     r0,[r4,#7]            ;996
0004ec  b120              CBZ      r0,|L3.1272|
0004ee  483d              LDR      r0,|L3.1508|
0004f0  6b00              LDR      r0,[r0,#0x30]         ;998  ; dut_info
0004f2  1c40              ADDS     r0,r0,#1              ;998
0004f4  493b              LDR      r1,|L3.1508|
0004f6  6308              STR      r0,[r1,#0x30]         ;998  ; dut_info
                  |L3.1272|
0004f8  203c              MOVS     r0,#0x3c              ;1007
0004fa  f7fffffe          BL       STATE_SwitchStep
0004fe  e002              B        |L3.1286|
                  |L3.1280|
000500  203b              MOVS     r0,#0x3b              ;1011
000502  f7fffffe          BL       STATE_SwitchStep
                  |L3.1286|
000506  e031              B        |L3.1388|
                  |L3.1288|
000508  79e0              LDRB     r0,[r4,#7]            ;1017
00050a  b1a0              CBZ      r0,|L3.1334|
00050c  4835              LDR      r0,|L3.1508|
00050e  7e40              LDRB     r0,[r0,#0x19]         ;1020  ; dut_info
000510  b138              CBZ      r0,|L3.1314|
000512  2001              MOVS     r0,#1                 ;1022
000514  4933              LDR      r1,|L3.1508|
000516  f881003b          STRB     r0,[r1,#0x3b]         ;1022
00051a  2000              MOVS     r0,#0                 ;1023
00051c  7648              STRB     r0,[r1,#0x19]         ;1023
00051e  e01d              B        |L3.1372|
                  |L3.1312|
000520  e023              B        |L3.1386|
                  |L3.1314|
000522  4830              LDR      r0,|L3.1508|
000524  7ec0              LDRB     r0,[r0,#0x1b]         ;1025  ; dut_info
000526  b1c8              CBZ      r0,|L3.1372|
000528  2001              MOVS     r0,#1                 ;1027
00052a  492e              LDR      r1,|L3.1508|
00052c  f881003a          STRB     r0,[r1,#0x3a]         ;1027
000530  2000              MOVS     r0,#0                 ;1028
000532  76c8              STRB     r0,[r1,#0x1b]         ;1028
000534  e012              B        |L3.1372|
                  |L3.1334|
000536  482b              LDR      r0,|L3.1508|
000538  7e40              LDRB     r0,[r0,#0x19]         ;1033  ; dut_info
00053a  b130              CBZ      r0,|L3.1354|
00053c  2001              MOVS     r0,#1                 ;1035
00053e  4929              LDR      r1,|L3.1508|
000540  f8810035          STRB     r0,[r1,#0x35]         ;1035
000544  2000              MOVS     r0,#0                 ;1036
000546  7648              STRB     r0,[r1,#0x19]         ;1036
000548  e008              B        |L3.1372|
                  |L3.1354|
00054a  4826              LDR      r0,|L3.1508|
00054c  7ec0              LDRB     r0,[r0,#0x1b]         ;1038  ; dut_info
00054e  b128              CBZ      r0,|L3.1372|
000550  2001              MOVS     r0,#1                 ;1040
000552  4924              LDR      r1,|L3.1508|
000554  f8810035          STRB     r0,[r1,#0x35]         ;1040
000558  2000              MOVS     r0,#0                 ;1041
00055a  76c8              STRB     r0,[r1,#0x1b]         ;1041
                  |L3.1372|
00055c  2008              MOVS     r0,#8                 ;1044
00055e  f7fffffe          BL       TIMER_KillTask
000562  203f              MOVS     r0,#0x3f              ;1045
000564  f7fffffe          BL       STATE_SwitchStep
000568  e000              B        |L3.1388|
                  |L3.1386|
00056a  bf00              NOP                            ;1049
                  |L3.1388|
00056c  bf00              NOP                            ;941
00056e  e000              B        |L3.1394|
                  |L3.1392|
000570  bf00              NOP                            ;1054
                  |L3.1394|
000572  bf00              NOP                            ;612
000574  f24050c9          MOV      r0,#0x5c9             ;1057
000578  4370              MULS     r0,r6,r0              ;1057
00057a  f1050194          ADD      r1,r5,#0x94           ;1057
00057e  eb010080          ADD      r0,r1,r0,LSL #2       ;1057
000582  f5005080          ADD      r0,r0,#0x1000         ;1057
000586  f8b00720          LDRH     r0,[r0,#0x720]        ;1057
00058a  1c40              ADDS     r0,r0,#1              ;1057
00058c  b282              UXTH     r2,r0                 ;1057
00058e  f24050c9          MOV      r0,#0x5c9             ;1057
000592  4370              MULS     r0,r6,r0              ;1057
000594  eb010080          ADD      r0,r1,r0,LSL #2       ;1057
000598  f5005080          ADD      r0,r0,#0x1000         ;1057
00059c  f8a02720          STRH     r2,[r0,#0x720]        ;1057
0005a0  f24050c9          MOV      r0,#0x5c9             ;1058
0005a4  4370              MULS     r0,r6,r0              ;1058
0005a6  eb010080          ADD      r0,r1,r0,LSL #2       ;1058
0005aa  f5005080          ADD      r0,r0,#0x1000         ;1058
0005ae  f8b00720          LDRH     r0,[r0,#0x720]        ;1058
0005b2  2128              MOVS     r1,#0x28              ;1058
0005b4  fb90f2f1          SDIV     r2,r0,r1              ;1058
0005b8  fb010012          MLS      r0,r1,r2,r0           ;1058
0005bc  b282              UXTH     r2,r0                 ;1058
0005be  f24050c9          MOV      r0,#0x5c9             ;1058
0005c2  4370              MULS     r0,r6,r0              ;1058
0005c4  f1050194          ADD      r1,r5,#0x94           ;1058
0005c8  eb010080          ADD      r0,r1,r0,LSL #2       ;1058
0005cc  f5005080          ADD      r0,r0,#0x1000         ;1058
0005d0  f8a02720          STRH     r2,[r0,#0x720]        ;1058
0005d4  bf00              NOP                            ;591
                  |L3.1494|
0005d6  1c70              ADDS     r0,r6,#1              ;586
0005d8  b2c6              UXTB     r6,r0                 ;586
                  |L3.1498|
0005da  2e01              CMP      r6,#1                 ;586
0005dc  f6ffad1b          BLT      |L3.22|
0005e0  bf00              NOP      
0005e2  e515              B        |L3.16|
;;;1061   
                          ENDP

                  |L3.1508|
                          DCD      dut_info

                          AREA ||i.CAN_ConfirmTempCmdFrameBuff||, CODE, READONLY, ALIGN=1

                  CAN_ConfirmTempCmdFrameBuff PROC
;;;1128   // 将临时缓冲区添加到命令帧缓冲区中，其本质操作是承认临时缓冲区数据有效
;;;1129   BOOL CAN_ConfirmTempCmdFrameBuff(CAN_CB *pCB, uint8 sourceSelect)
000000  b570              PUSH     {r4-r6,lr}
;;;1130   {
000002  4602              MOV      r2,r0
;;;1131   	CAN_CMD_FRAME *pCmdFrame = NULL;
000004  2300              MOVS     r3,#0
;;;1132   
;;;1133   	// 参数合法性检验
;;;1134   	if (NULL == pCB)
000006  b90a              CBNZ     r2,|L4.12|
;;;1135   	{
;;;1136   		return FALSE;
000008  2000              MOVS     r0,#0
                  |L4.10|
;;;1137   	}
;;;1138   
;;;1139   	// 临时缓冲区为空，不予添加
;;;1140   	pCmdFrame = &pCB->rx.rxEachNode[sourceSelect].cmdQueue[pCB->rx.rxEachNode[sourceSelect].end];
;;;1141   
;;;1142   	if (0 == pCmdFrame->length)
;;;1143   	{
;;;1144   		return FALSE;
;;;1145   	}
;;;1146   
;;;1147   	// 添加
;;;1148   	pCB->rx.rxEachNode[sourceSelect].end++;
;;;1149   	pCB->rx.rxEachNode[sourceSelect].end %= CAN_RX_QUEUE_SIZE;
;;;1150   	// 该行的作用是将新的添加位置有效数据个数清零，以便将这个位置当做临时帧缓冲区
;;;1151   	pCB->rx.rxEachNode[sourceSelect].cmdQueue[pCB->rx.rxEachNode[sourceSelect].end].length = 0;
;;;1152   
;;;1153   	return TRUE;
;;;1154   }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  f24050c9          MOV      r0,#0x5c9             ;1140
000010  4348              MULS     r0,r1,r0              ;1140
000012  f1020494          ADD      r4,r2,#0x94           ;1140
000016  eb040580          ADD      r5,r4,r0,LSL #2       ;1140
00001a  f24050c9          MOV      r0,#0x5c9             ;1140
00001e  4348              MULS     r0,r1,r0              ;1140
000020  eb040080          ADD      r0,r4,r0,LSL #2       ;1140
000024  f5005080          ADD      r0,r0,#0x1000         ;1140
000028  f8b00722          LDRH     r0,[r0,#0x722]        ;1140
00002c  eb000480          ADD      r4,r0,r0,LSL #2       ;1140
000030  eb041040          ADD      r0,r4,r0,LSL #5       ;1140
000034  eb050380          ADD      r3,r5,r0,LSL #2       ;1140
000038  f8b30090          LDRH     r0,[r3,#0x90]         ;1142
00003c  b908              CBNZ     r0,|L4.66|
00003e  2000              MOVS     r0,#0                 ;1144
000040  e7e3              B        |L4.10|
                  |L4.66|
000042  f24050c9          MOV      r0,#0x5c9             ;1148
000046  4348              MULS     r0,r1,r0              ;1148
000048  f1020494          ADD      r4,r2,#0x94           ;1148
00004c  eb040080          ADD      r0,r4,r0,LSL #2       ;1148
000050  f5005080          ADD      r0,r0,#0x1000         ;1148
000054  f8b00722          LDRH     r0,[r0,#0x722]        ;1148
000058  1c40              ADDS     r0,r0,#1              ;1148
00005a  b285              UXTH     r5,r0                 ;1148
00005c  f24050c9          MOV      r0,#0x5c9             ;1148
000060  4348              MULS     r0,r1,r0              ;1148
000062  eb040080          ADD      r0,r4,r0,LSL #2       ;1148
000066  f5005080          ADD      r0,r0,#0x1000         ;1148
00006a  f8a05722          STRH     r5,[r0,#0x722]        ;1148
00006e  f24050c9          MOV      r0,#0x5c9             ;1149
000072  4348              MULS     r0,r1,r0              ;1149
000074  eb040080          ADD      r0,r4,r0,LSL #2       ;1149
000078  f5005080          ADD      r0,r0,#0x1000         ;1149
00007c  f8b00722          LDRH     r0,[r0,#0x722]        ;1149
000080  2428              MOVS     r4,#0x28              ;1149
000082  fb90f5f4          SDIV     r5,r0,r4              ;1149
000086  fb040015          MLS      r0,r4,r5,r0           ;1149
00008a  b285              UXTH     r5,r0                 ;1149
00008c  f24050c9          MOV      r0,#0x5c9             ;1149
000090  4348              MULS     r0,r1,r0              ;1149
000092  f1020494          ADD      r4,r2,#0x94           ;1149
000096  eb040080          ADD      r0,r4,r0,LSL #2       ;1149
00009a  f5005080          ADD      r0,r0,#0x1000         ;1149
00009e  f8a05722          STRH     r5,[r0,#0x722]        ;1149
0000a2  2500              MOVS     r5,#0                 ;1151
0000a4  f24050c9          MOV      r0,#0x5c9             ;1151
0000a8  4348              MULS     r0,r1,r0              ;1151
0000aa  eb040680          ADD      r6,r4,r0,LSL #2       ;1151
0000ae  f24050c9          MOV      r0,#0x5c9             ;1151
0000b2  4348              MULS     r0,r1,r0              ;1151
0000b4  eb040080          ADD      r0,r4,r0,LSL #2       ;1151
0000b8  f5005080          ADD      r0,r0,#0x1000         ;1151
0000bc  f8b00722          LDRH     r0,[r0,#0x722]        ;1151
0000c0  eb000480          ADD      r4,r0,r0,LSL #2       ;1151
0000c4  eb041040          ADD      r0,r4,r0,LSL #5       ;1151
0000c8  eb060080          ADD      r0,r6,r0,LSL #2       ;1151
0000cc  f8a05090          STRH     r5,[r0,#0x90]         ;1151
0000d0  2001              MOVS     r0,#1                 ;1153
0000d2  e79a              B        |L4.10|
;;;1155   
                          ENDP


                          AREA ||i.CAN_DRIVE_AddTxArray||, CODE, READONLY, ALIGN=2

                  CAN_DRIVE_AddTxArray PROC
;;;1198   // 向发送缓冲区中添加一条待发送序列
;;;1199   BOOL CAN_DRIVE_AddTxArray(uint32 id, uint8 *pArray, uint8 length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1200   {
000004  4605              MOV      r5,r0
;;;1201   	uint16 i;
;;;1202   	uint16 head = sysCanCB.tx.head;
000006  482c              LDR      r0,|L5.184|
000008  f8b06158          LDRH     r6,[r0,#0x158]
;;;1203   	uint16 end = sysCanCB.tx.end;
00000c  f8b0415a          LDRH     r4,[r0,#0x15a]
;;;1204   
;;;1205   	// 参数检验
;;;1206   	if ((NULL == pArray) || (0 == length))
000010  b101              CBZ      r1,|L5.20|
000012  b912              CBNZ     r2,|L5.26|
                  |L5.20|
;;;1207   	{
;;;1208   		return FALSE;
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;1209   	}
;;;1210   
;;;1211   	// 发送缓冲区已满，不予接收
;;;1212   	if ((end + 1) % CAN_TX_QUEUE_SIZE == head)
;;;1213   	{
;;;1214   		return FALSE;
;;;1215   	}
;;;1216   
;;;1217   	sysCanCB.tx.cmdQueue[end].deviceID = id;
;;;1218   
;;;1219   	for (i = 0; i < length; i++)
;;;1220   	{
;;;1221   		sysCanCB.tx.cmdQueue[end].buff[i] = *pArray++;
;;;1222   	}
;;;1223   	sysCanCB.tx.cmdQueue[end].length = length;
;;;1224   
;;;1225   	// 发送环形队列更新位置
;;;1226   	sysCanCB.tx.end++;
;;;1227   	sysCanCB.tx.end %= CAN_TX_QUEUE_SIZE;
;;;1228   	sysCanCB.tx.cmdQueue[sysCanCB.tx.end].length = 0;
;;;1229   
;;;1230   	return TRUE;
;;;1231   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L5.26|
00001a  1c60              ADDS     r0,r4,#1              ;1212
00001c  271e              MOVS     r7,#0x1e              ;1212
00001e  fb90fcf7          SDIV     r12,r0,r7             ;1212
000022  fb07001c          MLS      r0,r7,r12,r0          ;1212
000026  42b0              CMP      r0,r6                 ;1212
000028  d101              BNE      |L5.46|
00002a  2000              MOVS     r0,#0                 ;1214
00002c  e7f3              B        |L5.22|
                  |L5.46|
00002e  eb040084          ADD      r0,r4,r4,LSL #2       ;1217
000032  eb001044          ADD      r0,r0,r4,LSL #5       ;1217
000036  4f21              LDR      r7,|L5.188|
000038  f8475020          STR      r5,[r7,r0,LSL #2]     ;1217
00003c  2300              MOVS     r3,#0                 ;1219
00003e  e00d              B        |L5.92|
                  |L5.64|
000040  f8117b01          LDRB     r7,[r1],#1            ;1221
000044  eb040084          ADD      r0,r4,r4,LSL #2       ;1221
000048  eb001044          ADD      r0,r0,r4,LSL #5       ;1221
00004c  f8dfc06c          LDR      r12,|L5.188|
000050  eb0c0080          ADD      r0,r12,r0,LSL #2      ;1221
000054  1d00              ADDS     r0,r0,#4              ;1221
000056  54c7              STRB     r7,[r0,r3]            ;1221
000058  1c58              ADDS     r0,r3,#1              ;1219
00005a  b283              UXTH     r3,r0                 ;1219
                  |L5.92|
00005c  4293              CMP      r3,r2                 ;1219
00005e  dbef              BLT      |L5.64|
000060  eb040084          ADD      r0,r4,r4,LSL #2       ;1223
000064  eb001044          ADD      r0,r0,r4,LSL #5       ;1223
000068  4f14              LDR      r7,|L5.188|
00006a  eb070080          ADD      r0,r7,r0,LSL #2       ;1223
00006e  f8a02090          STRH     r2,[r0,#0x90]         ;1223
000072  4811              LDR      r0,|L5.184|
000074  f8b0015a          LDRH     r0,[r0,#0x15a]        ;1226
000078  1c40              ADDS     r0,r0,#1              ;1226
00007a  b287              UXTH     r7,r0                 ;1226
00007c  480e              LDR      r0,|L5.184|
00007e  f8a0715a          STRH     r7,[r0,#0x15a]        ;1226
000082  f8b0015a          LDRH     r0,[r0,#0x15a]        ;1227
000086  271e              MOVS     r7,#0x1e              ;1227
000088  fb90fcf7          SDIV     r12,r0,r7             ;1227
00008c  fb07001c          MLS      r0,r7,r12,r0          ;1227
000090  b287              UXTH     r7,r0                 ;1227
000092  4809              LDR      r0,|L5.184|
000094  f8a0715a          STRH     r7,[r0,#0x15a]        ;1227
000098  2700              MOVS     r7,#0                 ;1228
00009a  f8b0015a          LDRH     r0,[r0,#0x15a]        ;1228
00009e  eb000c80          ADD      r12,r0,r0,LSL #2      ;1228
0000a2  eb0c1040          ADD      r0,r12,r0,LSL #5      ;1228
0000a6  f8dfc014          LDR      r12,|L5.188|
0000aa  eb0c0080          ADD      r0,r12,r0,LSL #2      ;1228
0000ae  f8a07090          STRH     r7,[r0,#0x90]         ;1228
0000b2  2001              MOVS     r0,#1                 ;1230
0000b4  e7af              B        |L5.22|
;;;1232   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L5.184|
                          DCD      sysCanCB+0x27b8
                  |L5.188|
                          DCD      sysCanCB+0x17b8

                          AREA ||i.CAN_DataStructureInit||, CODE, READONLY, ALIGN=1

                  CAN_DataStructureInit PROC
;;;113    // 数据结构初始化
;;;114    void CAN_DataStructureInit(CAN_CB *pCB)
000000  b530              PUSH     {r4,r5,lr}
;;;115    {
000002  4601              MOV      r1,r0
;;;116    	uint8 i;
;;;117    	uint8 j;
;;;118    
;;;119    	// 参数合法性检验
;;;120    	if (NULL == pCB)
000004  b901              CBNZ     r1,|L6.8|
                  |L6.6|
;;;121    	{
;;;122    		return;
;;;123    	}
;;;124    
;;;125    	pCB->tx.txBusy = FALSE;
;;;126    	pCB->tx.index = 0;
;;;127    	pCB->tx.head = 0;
;;;128    	pCB->tx.end = 0;
;;;129    	for (i = 0; i < CAN_TX_QUEUE_SIZE; i++)
;;;130    	{
;;;131    		pCB->tx.cmdQueue[i].length = 0;
;;;132    	}
;;;133    
;;;134    	for (i = 0; i < CAN_DEVICE_SOURCE_ID_MAX; i++)
;;;135    	{
;;;136    		pCB->rxFIFO.rxFIFOEachNode[i].head = 0;
;;;137    		pCB->rxFIFO.rxFIFOEachNode[i].end = 0;
;;;138    		pCB->rxFIFO.rxFIFOEachNode[i].currentProcessIndex = 0;
;;;139    	}
;;;140    
;;;141    	for (i = 0; i < CAN_DEVICE_SOURCE_ID_MAX; i++)
;;;142    	{
;;;143    		for (j = 0; j < CAN_RX_QUEUE_SIZE; j++)
;;;144    		{
;;;145    			pCB->rx.rxEachNode[i].cmdQueue[j].length = 0;
;;;146    		}
;;;147    		pCB->rx.rxEachNode[i].head = 0;
;;;148    		pCB->rx.rxEachNode[i].end = 0;
;;;149    	}
;;;150    }
000006  bd30              POP      {r4,r5,pc}
                  |L6.8|
000008  2400              MOVS     r4,#0                 ;125
00000a  f24173b8          MOV      r3,#0x17b8            ;125
00000e  440b              ADD      r3,r3,r1              ;125
000010  f5035380          ADD      r3,r3,#0x1000         ;125
000014  f883415e          STRB     r4,[r3,#0x15e]        ;125
000018  f24173b8          MOV      r3,#0x17b8            ;126
00001c  440b              ADD      r3,r3,r1              ;126
00001e  f5035380          ADD      r3,r3,#0x1000         ;126
000022  f8a3415c          STRH     r4,[r3,#0x15c]        ;126
000026  f24173b8          MOV      r3,#0x17b8            ;127
00002a  440b              ADD      r3,r3,r1              ;127
00002c  f5035380          ADD      r3,r3,#0x1000         ;127
000030  f8a34158          STRH     r4,[r3,#0x158]        ;127
000034  f24173b8          MOV      r3,#0x17b8            ;128
000038  440b              ADD      r3,r3,r1              ;128
00003a  f5035380          ADD      r3,r3,#0x1000         ;128
00003e  f8a3415a          STRH     r4,[r3,#0x15a]        ;128
000042  2000              MOVS     r0,#0                 ;129
000044  e00d              B        |L6.98|
                  |L6.70|
000046  2300              MOVS     r3,#0                 ;131
000048  eb000480          ADD      r4,r0,r0,LSL #2       ;131
00004c  eb041440          ADD      r4,r4,r0,LSL #5       ;131
000050  f24175b8          MOV      r5,#0x17b8            ;131
000054  440d              ADD      r5,r5,r1              ;131
000056  eb050484          ADD      r4,r5,r4,LSL #2       ;131
00005a  f8a43090          STRH     r3,[r4,#0x90]         ;131
00005e  1c43              ADDS     r3,r0,#1              ;129
000060  b2d8              UXTB     r0,r3                 ;129
                  |L6.98|
000062  281e              CMP      r0,#0x1e              ;129
000064  dbef              BLT      |L6.70|
000066  2000              MOVS     r0,#0                 ;134
000068  e01a              B        |L6.160|
                  |L6.106|
00006a  2300              MOVS     r3,#0                 ;136
00006c  eb0004c0          ADD      r4,r0,r0,LSL #3       ;136
000070  eb041480          ADD      r4,r4,r0,LSL #6       ;136
000074  eb010444          ADD      r4,r1,r4,LSL #1       ;136
000078  f8a4308c          STRH     r3,[r4,#0x8c]         ;136
00007c  eb0004c0          ADD      r4,r0,r0,LSL #3       ;137
000080  eb041480          ADD      r4,r4,r0,LSL #6       ;137
000084  eb010444          ADD      r4,r1,r4,LSL #1       ;137
000088  f8a4308e          STRH     r3,[r4,#0x8e]         ;137
00008c  eb0004c0          ADD      r4,r0,r0,LSL #3       ;138
000090  eb041480          ADD      r4,r4,r0,LSL #6       ;138
000094  eb010444          ADD      r4,r1,r4,LSL #1       ;138
000098  f8a43090          STRH     r3,[r4,#0x90]         ;138
00009c  1c43              ADDS     r3,r0,#1              ;134
00009e  b2d8              UXTB     r0,r3                 ;134
                  |L6.160|
0000a0  2801              CMP      r0,#1                 ;134
0000a2  dbe2              BLT      |L6.106|
0000a4  2000              MOVS     r0,#0                 ;141
0000a6  e02c              B        |L6.258|
                  |L6.168|
0000a8  2200              MOVS     r2,#0                 ;143
0000aa  e011              B        |L6.208|
                  |L6.172|
0000ac  2500              MOVS     r5,#0                 ;145
0000ae  f24053c9          MOV      r3,#0x5c9             ;145
0000b2  4343              MULS     r3,r0,r3              ;145
0000b4  f1010494          ADD      r4,r1,#0x94           ;145
0000b8  eb040383          ADD      r3,r4,r3,LSL #2       ;145
0000bc  eb020482          ADD      r4,r2,r2,LSL #2       ;145
0000c0  eb041442          ADD      r4,r4,r2,LSL #5       ;145
0000c4  eb030384          ADD      r3,r3,r4,LSL #2       ;145
0000c8  f8a35090          STRH     r5,[r3,#0x90]         ;145
0000cc  1c53              ADDS     r3,r2,#1              ;143
0000ce  b2da              UXTB     r2,r3                 ;143
                  |L6.208|
0000d0  2a28              CMP      r2,#0x28              ;143
0000d2  dbeb              BLT      |L6.172|
0000d4  2500              MOVS     r5,#0                 ;147
0000d6  f24053c9          MOV      r3,#0x5c9             ;147
0000da  4343              MULS     r3,r0,r3              ;147
0000dc  f1010494          ADD      r4,r1,#0x94           ;147
0000e0  eb040383          ADD      r3,r4,r3,LSL #2       ;147
0000e4  f5035380          ADD      r3,r3,#0x1000         ;147
0000e8  f8a35720          STRH     r5,[r3,#0x720]        ;147
0000ec  f24053c9          MOV      r3,#0x5c9             ;148
0000f0  4343              MULS     r3,r0,r3              ;148
0000f2  eb040383          ADD      r3,r4,r3,LSL #2       ;148
0000f6  f5035380          ADD      r3,r3,#0x1000         ;148
0000fa  f8a35722          STRH     r5,[r3,#0x722]        ;148
0000fe  1c43              ADDS     r3,r0,#1              ;141
000100  b2d8              UXTB     r0,r3                 ;141
                  |L6.258|
000102  2801              CMP      r0,#1                 ;141
000104  dbd0              BLT      |L6.168|
000106  bf00              NOP      
000108  e77d              B        |L6.6|
;;;151    
                          ENDP


                          AREA ||i.CAN_HW_Init||, CODE, READONLY, ALIGN=2

                  CAN_HW_Init PROC
;;;1285   // 功能函数：CAN初始化
;;;1286   void CAN_HW_Init(uint16 bund)
000000  b510              PUSH     {r4,lr}
;;;1287   {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;1288   	can_parameter_struct can_parameter;
;;;1289   	can_filter_parameter_struct can_filter;
;;;1290   
;;;1291   	// 时钟分配与使能
;;;1292   	rcu_periph_clock_enable(RCU_CAN0);
000006  f2407019          MOV      r0,#0x719
00000a  f7fffffe          BL       rcu_periph_clock_enable
;;;1293   	// rcu_periph_clock_enable(RCU_GPIOB);
;;;1294   	rcu_periph_clock_enable(RCU_GPIOA); // 后加
00000e  f2406002          MOV      r0,#0x602
000012  f7fffffe          BL       rcu_periph_clock_enable
;;;1295   	rcu_periph_clock_enable(RCU_AF);
000016  f44f60c0          MOV      r0,#0x600
00001a  f7fffffe          BL       rcu_periph_clock_enable
;;;1296   
;;;1297   	// 配置CAN的接收中断
;;;1298   	nvic_irq_enable(USBD_LP_CAN0_RX0_IRQn, 1, 0);
00001e  2200              MOVS     r2,#0
000020  2101              MOVS     r1,#1
000022  2014              MOVS     r0,#0x14
000024  f7fffffe          BL       nvic_irq_enable
;;;1299   
;;;1300   	// 配置CAN邮箱空中断
;;;1301   	nvic_irq_enable(USBD_HP_CAN0_TX_IRQn, 2, 0);
000028  2200              MOVS     r2,#0
00002a  2102              MOVS     r1,#2
00002c  2013              MOVS     r0,#0x13
00002e  f7fffffe          BL       nvic_irq_enable
;;;1302   
;;;1303   	// CAN管脚重映射到PB8-9
;;;1304   	//	gpio_pin_remap_config(GPIO_CAN_PARTIAL_REMAP,ENABLE);
;;;1305   
;;;1306   	/* configure CAN0 GPIO */
;;;1307   	gpio_init(GPIOA, GPIO_MODE_IPU, GPIO_OSPEED_50MHZ, GPIO_PIN_11);
000032  f44f6300          MOV      r3,#0x800
000036  2203              MOVS     r2,#3
000038  2148              MOVS     r1,#0x48
00003a  4834              LDR      r0,|L7.268|
00003c  f7fffffe          BL       gpio_init
;;;1308   	gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_12);
000040  f44f5380          MOV      r3,#0x1000
000044  2203              MOVS     r2,#3
000046  2118              MOVS     r1,#0x18
000048  4830              LDR      r0,|L7.268|
00004a  f7fffffe          BL       gpio_init
;;;1309   
;;;1310   	can_struct_para_init(CAN_INIT_STRUCT, &can_parameter);
00004e  a905              ADD      r1,sp,#0x14
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       can_struct_para_init
;;;1311   	can_struct_para_init(CAN_INIT_STRUCT, &can_filter);
000056  4669              MOV      r1,sp
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       can_struct_para_init
;;;1312   
;;;1313   	/* initialize CAN register */
;;;1314   	can_deinit(CAN0);
00005e  482c              LDR      r0,|L7.272|
000060  f7fffffe          BL       can_deinit
;;;1315   
;;;1316   	/* initialize CAN parameters */
;;;1317   	can_parameter.time_triggered = DISABLE;
000064  2000              MOVS     r0,#0
000066  f88d0018          STRB     r0,[sp,#0x18]
;;;1318   	can_parameter.auto_bus_off_recovery = ENABLE;
00006a  2001              MOVS     r0,#1
00006c  f88d0019          STRB     r0,[sp,#0x19]
;;;1319   	can_parameter.auto_wake_up = DISABLE;
000070  2000              MOVS     r0,#0
000072  f88d001a          STRB     r0,[sp,#0x1a]
;;;1320   	can_parameter.no_auto_retrans = DISABLE;
000076  f88d001b          STRB     r0,[sp,#0x1b]
;;;1321   	can_parameter.rec_fifo_overwrite = DISABLE;
00007a  f88d001c          STRB     r0,[sp,#0x1c]
;;;1322   	can_parameter.trans_fifo_order = DISABLE;
00007e  f88d001d          STRB     r0,[sp,#0x1d]
;;;1323   	can_parameter.working_mode = CAN_NORMAL_MODE;
000082  f88d0014          STRB     r0,[sp,#0x14]
;;;1324   
;;;1325   	// 波特率计算：36MHz / (1+6+1) / 36 = 125K bit
;;;1326   	can_parameter.resync_jump_width = CAN_BT_SJW_1TQ;
000086  f88d0015          STRB     r0,[sp,#0x15]
;;;1327   	can_parameter.time_segment_1 = CAN_BT_BS1_6TQ;// 6
00008a  2005              MOVS     r0,#5
00008c  f88d0016          STRB     r0,[sp,#0x16]
;;;1328   	can_parameter.time_segment_2 = CAN_BT_BS2_1TQ;// 1
000090  2000              MOVS     r0,#0
000092  f88d0017          STRB     r0,[sp,#0x17]
;;;1329   	if (CAN_BAUD_RATE_125K == bund)
000096  2c7d              CMP      r4,#0x7d
000098  d103              BNE      |L7.162|
;;;1330   	{
;;;1331   		can_parameter.prescaler = 36;
00009a  2024              MOVS     r0,#0x24
00009c  f8ad001e          STRH     r0,[sp,#0x1e]
0000a0  e00f              B        |L7.194|
                  |L7.162|
;;;1332   	}
;;;1333   	else if (CAN_BAUD_RATE_250K == bund)
0000a2  2cfa              CMP      r4,#0xfa
0000a4  d103              BNE      |L7.174|
;;;1334   	{
;;;1335   		can_parameter.prescaler = 18;
0000a6  2012              MOVS     r0,#0x12
0000a8  f8ad001e          STRH     r0,[sp,#0x1e]
0000ac  e009              B        |L7.194|
                  |L7.174|
;;;1336   	}
;;;1337   	else if (CAN_BAUD_RATE_500K == bund)
0000ae  f5b47ffa          CMP      r4,#0x1f4
0000b2  d103              BNE      |L7.188|
;;;1338   	{
;;;1339   		can_parameter.prescaler = 9;
0000b4  2009              MOVS     r0,#9
0000b6  f8ad001e          STRH     r0,[sp,#0x1e]
0000ba  e002              B        |L7.194|
                  |L7.188|
;;;1340   	}
;;;1341   	else
;;;1342   	{
;;;1343   		can_parameter.prescaler = 36;
0000bc  2024              MOVS     r0,#0x24
0000be  f8ad001e          STRH     r0,[sp,#0x1e]
                  |L7.194|
;;;1344   	}
;;;1345   
;;;1346   	/* initialize CAN */
;;;1347   	can_init(CAN0, &can_parameter);
0000c2  a905              ADD      r1,sp,#0x14
0000c4  4812              LDR      r0,|L7.272|
0000c6  f7fffffe          BL       can_init
;;;1348   
;;;1349   	/* initialize filter */
;;;1350   	can_filter.filter_number = 1;
0000ca  2001              MOVS     r0,#1
0000cc  f8ad000a          STRH     r0,[sp,#0xa]
;;;1351   	can_filter.filter_mode = CAN_FILTERMODE_MASK;
0000d0  2000              MOVS     r0,#0
0000d2  f8ad000c          STRH     r0,[sp,#0xc]
;;;1352   	can_filter.filter_bits = CAN_FILTERBITS_32BIT;
0000d6  2001              MOVS     r0,#1
0000d8  f8ad000e          STRH     r0,[sp,#0xe]
;;;1353   	can_filter.filter_list_high = 0x0000;
0000dc  2000              MOVS     r0,#0
0000de  f8ad0000          STRH     r0,[sp,#0]
;;;1354   	can_filter.filter_list_low = 0x0000;
0000e2  f8ad0002          STRH     r0,[sp,#2]
;;;1355   	can_filter.filter_mask_high = 0x0000;
0000e6  f8ad0004          STRH     r0,[sp,#4]
;;;1356   	can_filter.filter_mask_low = 0x0000;
0000ea  f8ad0006          STRH     r0,[sp,#6]
;;;1357   	can_filter.filter_fifo_number = CAN_FIFO0;
0000ee  f8ad0008          STRH     r0,[sp,#8]
;;;1358   	can_filter.filter_enable = ENABLE;
0000f2  2001              MOVS     r0,#1
0000f4  f88d0010          STRB     r0,[sp,#0x10]
;;;1359   
;;;1360   	can_filter_init(&can_filter);
0000f8  4668              MOV      r0,sp
0000fa  f7fffffe          BL       can_filter_init
;;;1361   
;;;1362   	/* enable can receive FIFO0 not empty interrupt */
;;;1363   	can_interrupt_enable(CAN0, CAN_INT_RFNE0);
0000fe  2102              MOVS     r1,#2
000100  4803              LDR      r0,|L7.272|
000102  f7fffffe          BL       can_interrupt_enable
;;;1364   }
000106  b008              ADD      sp,sp,#0x20
000108  bd10              POP      {r4,pc}
;;;1365   
                          ENDP

00010a  0000              DCW      0x0000
                  |L7.268|
                          DCD      0x40010800
                  |L7.272|
                          DCD      0x40006400

                          AREA ||i.CAN_MacProcess||, CODE, READONLY, ALIGN=2

                  CAN_MacProcess PROC
;;;354    // CAN 报文接收处理函数(注意根据具体模块修改)
;;;355    void CAN_MacProcess(uint16 standarID, uint8 *data, uint8 length)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;356    {
000004  4604              MOV      r4,r0
000006  4615              MOV      r5,r2
;;;357    	uint16 end;
;;;358    	uint16 head;
;;;359    	uint8 i;
;;;360    	int8 sourceBuffSelect = CAN_DEVICE_SOURCE_ID_MAX; // 节点缓存区编号选择
000008  2001              MOVS     r0,#1
;;;361    
;;;362    	// 参数合法性判断
;;;363    	if (NULL == data)
00000a  b909              CBNZ     r1,|L8.16|
                  |L8.12|
;;;364    	{
;;;365    		return;
;;;366    	}
;;;367    
;;;368    	// 标准帧判断
;;;369    	if (standarID > 0x7FF)
;;;370    	{
;;;371    		return;
;;;372    	}
;;;373    
;;;374    	// 取出目标节点
;;;375    	//	destinationID = standarID & 0x07FF;
;;;376    
;;;377    	// 不是发给自身ID的数据直接丢掉
;;;378    	//	if (CAN_DEVICE_ID_HMI != destinationID)
;;;379    	//	{
;;;380    	//		return;
;;;381    	//	}
;;;382    
;;;383    	// 已经使能
;;;384    	if (CAN_RX_DEVICE_PUC)
;;;385    	{
;;;386    		sourceBuffSelect = CAN_RX_DEVICE_PUC - 1;
;;;387    	}
;;;388    
;;;389    	// 没有合适的源节点
;;;390    	if ((sourceBuffSelect >= CAN_DEVICE_SOURCE_ID_MAX) || (sourceBuffSelect < 0))
;;;391    	{
;;;392    		return;
;;;393    	}
;;;394    
;;;395    	// 取相应缓存区结构体数据
;;;396    	end = sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end;
;;;397    	head = sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].head;
;;;398    
;;;399    	// ■■环形列队，入队■■
;;;400    	//  一级缓冲区已满，不予接收
;;;401    	if ((end + 1) % CAN_RX_FIFO_SIZE == head)
;;;402    	{
;;;403    		return;
;;;404    	}
;;;405    
;;;406    	for (i = 0; i < length; i++)
;;;407    	{
;;;408    		// 单个字节读取，并放入FIFO中
;;;409    		sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].buff[sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end] = *data++;
;;;410    
;;;411    		sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end++;
;;;412    
;;;413    		// 一级缓冲区已满，不予接收
;;;414    		if ((sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end + 1) % CAN_RX_FIFO_SIZE == head)
;;;415    		{
;;;416    			break;
;;;417    		}
;;;418    
;;;419    		sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end %= CAN_RX_FIFO_SIZE;
;;;420    	}
;;;421    }
00000c  e8bd83f0          POP      {r4-r9,pc}
                  |L8.16|
000010  f5b46f00          CMP      r4,#0x800             ;369
000014  db00              BLT      |L8.24|
000016  e7f9              B        |L8.12|
                  |L8.24|
000018  2000              MOVS     r0,#0                 ;386
00001a  2801              CMP      r0,#1                 ;390
00001c  da01              BGE      |L8.34|
00001e  2800              CMP      r0,#0                 ;390
000020  da00              BGE      |L8.36|
                  |L8.34|
000022  e7f3              B        |L8.12|
                  |L8.36|
000024  eb0007c0          ADD      r7,r0,r0,LSL #3       ;396
000028  eb071780          ADD      r7,r7,r0,LSL #6       ;396
00002c  f8dfc0ec          LDR      r12,|L8.284|
000030  eb0c0747          ADD      r7,r12,r7,LSL #1      ;396
000034  f8b7608e          LDRH     r6,[r7,#0x8e]         ;396
000038  eb0007c0          ADD      r7,r0,r0,LSL #3       ;397
00003c  eb071780          ADD      r7,r7,r0,LSL #6       ;397
000040  eb0c0747          ADD      r7,r12,r7,LSL #1      ;397
000044  f8b7208c          LDRH     r2,[r7,#0x8c]         ;397
000048  1c77              ADDS     r7,r6,#1              ;401
00004a  f04f0c8c          MOV      r12,#0x8c             ;401
00004e  fb97f8fc          SDIV     r8,r7,r12             ;401
000052  fb0c7718          MLS      r7,r12,r8,r7          ;401
000056  4297              CMP      r7,r2                 ;401
000058  d100              BNE      |L8.92|
00005a  e7d7              B        |L8.12|
                  |L8.92|
00005c  2300              MOVS     r3,#0                 ;406
00005e  e057              B        |L8.272|
                  |L8.96|
000060  f8117b01          LDRB     r7,[r1],#1            ;409
000064  eb000cc0          ADD      r12,r0,r0,LSL #3      ;409
000068  eb0c1c80          ADD      r12,r12,r0,LSL #6     ;409
00006c  f8df80ac          LDR      r8,|L8.284|
000070  eb080c4c          ADD      r12,r8,r12,LSL #1     ;409
000074  eb0008c0          ADD      r8,r0,r0,LSL #3       ;409
000078  eb081880          ADD      r8,r8,r0,LSL #6       ;409
00007c  f8df909c          LDR      r9,|L8.284|
000080  eb090848          ADD      r8,r9,r8,LSL #1       ;409
000084  f8b8808e          LDRH     r8,[r8,#0x8e]         ;409
000088  f80c7008          STRB     r7,[r12,r8]           ;409
00008c  eb0007c0          ADD      r7,r0,r0,LSL #3       ;411
000090  eb071780          ADD      r7,r7,r0,LSL #6       ;411
000094  46cc              MOV      r12,r9                ;411
000096  eb0c0747          ADD      r7,r12,r7,LSL #1      ;411
00009a  f8b7708e          LDRH     r7,[r7,#0x8e]         ;411
00009e  1c7f              ADDS     r7,r7,#1              ;411
0000a0  eb000cc0          ADD      r12,r0,r0,LSL #3      ;411
0000a4  eb0c1c80          ADD      r12,r12,r0,LSL #6     ;411
0000a8  46c8              MOV      r8,r9                 ;411
0000aa  eb080c4c          ADD      r12,r8,r12,LSL #1     ;411
0000ae  f8ac708e          STRH     r7,[r12,#0x8e]        ;411
0000b2  eb0007c0          ADD      r7,r0,r0,LSL #3       ;414
0000b6  eb071780          ADD      r7,r7,r0,LSL #6       ;414
0000ba  46c4              MOV      r12,r8                ;414
0000bc  eb0c0747          ADD      r7,r12,r7,LSL #1      ;414
0000c0  f8b7708e          LDRH     r7,[r7,#0x8e]         ;414
0000c4  1c7f              ADDS     r7,r7,#1              ;414
0000c6  f04f0c8c          MOV      r12,#0x8c             ;414
0000ca  fb97f8fc          SDIV     r8,r7,r12             ;414
0000ce  fb0c7718          MLS      r7,r12,r8,r7          ;414
0000d2  4297              CMP      r7,r2                 ;414
0000d4  d100              BNE      |L8.216|
0000d6  e01d              B        |L8.276|
                  |L8.216|
0000d8  eb0007c0          ADD      r7,r0,r0,LSL #3       ;419
0000dc  eb071780          ADD      r7,r7,r0,LSL #6       ;419
0000e0  f8dfc038          LDR      r12,|L8.284|
0000e4  eb0c0747          ADD      r7,r12,r7,LSL #1      ;419
0000e8  f8b7708e          LDRH     r7,[r7,#0x8e]         ;419
0000ec  f04f0c8c          MOV      r12,#0x8c             ;419
0000f0  fb97f8fc          SDIV     r8,r7,r12             ;419
0000f4  fb0c7718          MLS      r7,r12,r8,r7          ;419
0000f8  eb000cc0          ADD      r12,r0,r0,LSL #3      ;419
0000fc  eb0c1c80          ADD      r12,r12,r0,LSL #6     ;419
000100  f8df8018          LDR      r8,|L8.284|
000104  eb080c4c          ADD      r12,r8,r12,LSL #1     ;419
000108  f8ac708e          STRH     r7,[r12,#0x8e]        ;419
00010c  1c5f              ADDS     r7,r3,#1              ;406
00010e  b2fb              UXTB     r3,r7                 ;406
                  |L8.272|
000110  42ab              CMP      r3,r5                 ;406
000112  dba5              BLT      |L8.96|
                  |L8.276|
000114  bf00              NOP                            ;416
000116  bf00              NOP      
000118  e778              B        |L8.12|
;;;422    
                          ENDP

00011a  0000              DCW      0x0000
                  |L8.284|
                          DCD      sysCanCB

                          AREA ||i.CAN_PROTOCOL_Process_DT||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_Process_DT PROC
;;;1062   // CAN处理测试过程函数
;;;1063   void CAN_PROTOCOL_Process_DT(void)
000000  b510              PUSH     {r4,lr}
;;;1064   {
;;;1065   	// CAN接收FIFO缓冲区处理
;;;1066   	CAN_RxFIFOProcess(&sysCanCB);
000002  4804              LDR      r0,|L9.20|
000004  f7fffffe          BL       CAN_RxFIFOProcess
;;;1067   
;;;1068   	// CAN接收命令缓冲区处理
;;;1069   	CAN_CmdFrameProcess(&sysCanCB);
000008  4802              LDR      r0,|L9.20|
00000a  f7fffffe          BL       CAN_CmdFrameProcess
;;;1070   
;;;1071   	// CAN发送状态机处理过程
;;;1072   	CAN_TxStateProcess();
00000e  f7fffffe          BL       CAN_TxStateProcess
;;;1073   }
000012  bd10              POP      {r4,pc}
;;;1074   
                          ENDP

                  |L9.20|
                          DCD      sysCanCB

                          AREA ||i.CAN_RxFIFOProcess||, CODE, READONLY, ALIGN=1

                  CAN_RxFIFOProcess PROC
;;;423    // 一级报文接收缓冲区处理，从一级接收缓冲区中取出一个字节添加到命令帧缓冲区中
;;;424    void CAN_RxFIFOProcess(CAN_CB *pCB)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;425    {
000004  4607              MOV      r7,r0
;;;426    	uint16 end;
;;;427    	uint16 head;
;;;428    	CAN_CMD_FRAME *pCmdFrame = NULL;
000006  2500              MOVS     r5,#0
;;;429    	CAN_RX_FIFO *pRxFIFO = NULL;
000008  2400              MOVS     r4,#0
;;;430    	uint16 length = 0;
00000a  46a3              MOV      r11,r4
;;;431    	uint8 currentData = 0;
00000c  46a0              MOV      r8,r4
;;;432    	uint8 sourceBuffSelect;
;;;433    
;;;434    	// 参数合法性检验
;;;435    	if (NULL == pCB)
00000e  b90f              CBNZ     r7,|L10.20|
                  |L10.16|
;;;436    	{
;;;437    		return;
;;;438    	}
;;;439    
;;;440    	// 循环判断是否有数据需要处理
;;;441    	for (sourceBuffSelect = 0; sourceBuffSelect < CAN_DEVICE_SOURCE_ID_MAX; sourceBuffSelect++)
;;;442    	{
;;;443    		// 获取接收一级缓冲区节点临时缓冲区指针
;;;444    		pRxFIFO = &pCB->rxFIFO.rxFIFOEachNode[sourceBuffSelect];
;;;445    
;;;446    		end = pRxFIFO->end;
;;;447    		head = pRxFIFO->head;
;;;448    
;;;449    		// 一级缓冲区为空，继续
;;;450    		if (head == end)
;;;451    		{
;;;452    			continue;
;;;453    		}
;;;454    
;;;455    		// 获取接收命令临时缓冲区指针
;;;456    		pCmdFrame = &pCB->rx.rxEachNode[sourceBuffSelect].cmdQueue[pCB->rx.rxEachNode[sourceBuffSelect].end];
;;;457    
;;;458    		// 取出当前要处理的字节
;;;459    		currentData = pRxFIFO->buff[pRxFIFO->currentProcessIndex];
;;;460    
;;;461    		// 临时缓冲区长度为0时，搜索首字节
;;;462    		if (0 == pCmdFrame->length)
;;;463    		{
;;;464    			// 命令头错误，删除当前字节并退出
;;;465    			if (CAN_CMD_HEAD != currentData)
;;;466    			{
;;;467    				pRxFIFO->head++;
;;;468    				pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;469    				pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;470    
;;;471    				continue;
;;;472    			}
;;;473    
;;;474    			// 命令头正确，但无命令临时缓冲区可用，退出
;;;475    			if ((pCB->rx.rxEachNode[sourceBuffSelect].end + 1) % CAN_RX_QUEUE_SIZE == pCB->rx.rxEachNode[sourceBuffSelect].head)
;;;476    			{
;;;477    				continue;
;;;478    			}
;;;479    
;;;480    			// 命令头正确，有临时缓冲区可用，则将其添加到命令帧临时缓冲区中
;;;481    			pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;482    			pRxFIFO->currentProcessIndex++;
;;;483    			pRxFIFO->currentProcessIndex %= CAN_RX_FIFO_SIZE;
;;;484    		}
;;;485    		// 非首字节，将数据添加到命令帧临时缓冲区中，但暂不删除当前数据
;;;486    		else
;;;487    		{
;;;488    			// 临时缓冲区溢出，说明当前正在接收的命令帧是错误的，正确的命令帧不会出现长度溢出的情况
;;;489    			if (pCmdFrame->length >= CAN_CMD_FRAME_LENGTH_MAX)
;;;490    			{
;;;491    				// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;492    				pRxFIFO->head++;
;;;493    				pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;494    				pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;495    
;;;496    				continue;
;;;497    			}
;;;498    
;;;499    			// 一直取到末尾
;;;500    			while (end != pRxFIFO->currentProcessIndex)
;;;501    			{
;;;502    				// 取出当前要处理的字节
;;;503    				currentData = pRxFIFO->buff[pRxFIFO->currentProcessIndex];
;;;504    				// 缓冲区未溢出，正常接收，将数据添加到临时缓冲区中
;;;505    				pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;506    				pRxFIFO->currentProcessIndex++;
;;;507    				pRxFIFO->currentProcessIndex %= CAN_RX_FIFO_SIZE;
;;;508    
;;;509    				// ■■接下来，需要检查命令帧是否完整，如果完整，则将命令帧临时缓冲区扶正■■
;;;510    
;;;511    				// 首先判断命令帧最小长度，一个完整的命令字至少包括4个字节: 命令头(1Byte)+命令字(1Byte)+数据长度(1Byte)+校验码(1Byte) ，因此不足4个字节的必定不完整
;;;512    				if (pCmdFrame->length < CAN_CMD_FRAME_LENGTH_MIN)
;;;513    				{
;;;514    					// 继续接收
;;;515    					continue;
;;;516    				}
;;;517    
;;;518    				// 命令帧长度数值越界，说明当前命令帧错误，停止接收
;;;519    				if (pCmdFrame->buff[CAN_CMD_LENGTH_INDEX] > (CAN_CMD_FRAME_LENGTH_MAX - CAN_CMD_FRAME_LENGTH_MIN))
;;;520    				{
;;;521    					// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;522    					pCmdFrame->length = 0;
;;;523    					// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;524    					pRxFIFO->head++;
;;;525    					pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;526    					pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;527    
;;;528    					break;
;;;529    				}
;;;530    
;;;531    				// 命令帧长度校验，在命令长度描述字的数值上，增加命令头、命令字、...、数据长度、校验码，即为命令帧实际长度
;;;532    				length = pCmdFrame->length;
;;;533    				if (length < (pCmdFrame->buff[CAN_CMD_LENGTH_INDEX] + CAN_CMD_FRAME_LENGTH_MIN))
;;;534    				{
;;;535    					// 长度要求不一致，说明未接收完毕，继续
;;;536    					continue;
;;;537    				}
;;;538    
;;;539    				// 命令帧长度OK，则进行校验，失败时删除命令头
;;;540    				if (!CAN_CheckSum(pCmdFrame->buff, pCmdFrame->length))
;;;541    				{
;;;542    					// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;543    					pCmdFrame->length = 0;
;;;544    					// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;545    					pRxFIFO->head++;
;;;546    					pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;547    					pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;548    
;;;549    					break;
;;;550    				}
;;;551    
;;;552    				// 执行到这里，即说明接收到了一个完整并且正确的命令帧，此时需将处理过的数据从一级缓冲区中删除，并将该命令帧扶正
;;;553    				pRxFIFO->head += length;
;;;554    				pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;555    				pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;556    
;;;557    				CAN_ConfirmTempCmdFrameBuff(pCB, sourceBuffSelect);
;;;558    
;;;559    				break;
;;;560    			}
;;;561    		}
;;;562    	}
;;;563    
;;;564    	return;
;;;565    }
000010  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.20|
000014  2600              MOVS     r6,#0                 ;441
000016  e0f2              B        |L10.510|
                  |L10.24|
000018  eb0600c6          ADD      r0,r6,r6,LSL #3       ;444
00001c  eb001086          ADD      r0,r0,r6,LSL #6       ;444
000020  eb070440          ADD      r4,r7,r0,LSL #1       ;444
000024  f8b4908e          LDRH     r9,[r4,#0x8e]         ;446
000028  f8b4a08c          LDRH     r10,[r4,#0x8c]        ;447
00002c  45ca              CMP      r10,r9                ;450
00002e  d100              BNE      |L10.50|
000030  e0e3              B        |L10.506|
                  |L10.50|
000032  f24050c9          MOV      r0,#0x5c9             ;456
000036  4370              MULS     r0,r6,r0              ;456
000038  f1070194          ADD      r1,r7,#0x94           ;456
00003c  eb010280          ADD      r2,r1,r0,LSL #2       ;456
000040  f24050c9          MOV      r0,#0x5c9             ;456
000044  4370              MULS     r0,r6,r0              ;456
000046  eb010080          ADD      r0,r1,r0,LSL #2       ;456
00004a  f5005080          ADD      r0,r0,#0x1000         ;456
00004e  f8b00722          LDRH     r0,[r0,#0x722]        ;456
000052  eb000180          ADD      r1,r0,r0,LSL #2       ;456
000056  eb011040          ADD      r0,r1,r0,LSL #5       ;456
00005a  eb020580          ADD      r5,r2,r0,LSL #2       ;456
00005e  f8b40090          LDRH     r0,[r4,#0x90]         ;459
000062  f8148000          LDRB     r8,[r4,r0]            ;459
000066  f8b50090          LDRH     r0,[r5,#0x90]         ;462
00006a  bb80              CBNZ     r0,|L10.206|
00006c  f1b80f55          CMP      r8,#0x55              ;465
000070  d00e              BEQ      |L10.144|
000072  f8340f8c          LDRH     r0,[r4,#0x8c]!        ;467
000076  1c40              ADDS     r0,r0,#1              ;467
000078  8020              STRH     r0,[r4,#0]            ;467
00007a  8820              LDRH     r0,[r4,#0]            ;468
00007c  218c              MOVS     r1,#0x8c              ;468
00007e  fb90f2f1          SDIV     r2,r0,r1              ;468
000082  fb010012          MLS      r0,r1,r2,r0           ;468
000086  8020              STRH     r0,[r4,#0]            ;468
000088  8820              LDRH     r0,[r4,#0]            ;469
00008a  80a0              STRH     r0,[r4,#4]            ;469
00008c  3c8c              SUBS     r4,r4,#0x8c           ;469
00008e  e0b4              B        |L10.506|
                  |L10.144|
000090  f24050c9          MOV      r0,#0x5c9             ;475
000094  4370              MULS     r0,r6,r0              ;475
000096  f1070194          ADD      r1,r7,#0x94           ;475
00009a  eb010080          ADD      r0,r1,r0,LSL #2       ;475
00009e  f5005080          ADD      r0,r0,#0x1000         ;475
0000a2  f8b00722          LDRH     r0,[r0,#0x722]        ;475
0000a6  1c40              ADDS     r0,r0,#1              ;475
0000a8  2128              MOVS     r1,#0x28              ;475
0000aa  fb90f2f1          SDIV     r2,r0,r1              ;475
0000ae  fb010212          MLS      r2,r1,r2,r0           ;475
0000b2  f24050c9          MOV      r0,#0x5c9             ;475
0000b6  4370              MULS     r0,r6,r0              ;475
0000b8  f1070194          ADD      r1,r7,#0x94           ;475
0000bc  eb010080          ADD      r0,r1,r0,LSL #2       ;475
0000c0  f5005080          ADD      r0,r0,#0x1000         ;475
0000c4  f8b00720          LDRH     r0,[r0,#0x720]        ;475
0000c8  4282              CMP      r2,r0                 ;475
0000ca  d101              BNE      |L10.208|
0000cc  e095              B        |L10.506|
                  |L10.206|
0000ce  e015              B        |L10.252|
                  |L10.208|
0000d0  f8351f90          LDRH     r1,[r5,#0x90]!        ;481
0000d4  8828              LDRH     r0,[r5,#0]            ;481
0000d6  1c40              ADDS     r0,r0,#1              ;481
0000d8  f8250990          STRH     r0,[r5],#-0x90        ;481
0000dc  1d28              ADDS     r0,r5,#4              ;481
0000de  f8008001          STRB     r8,[r0,r1]            ;481
0000e2  f8340f90          LDRH     r0,[r4,#0x90]!        ;482
0000e6  1c40              ADDS     r0,r0,#1              ;482
0000e8  8020              STRH     r0,[r4,#0]            ;482
0000ea  8820              LDRH     r0,[r4,#0]            ;483
0000ec  218c              MOVS     r1,#0x8c              ;483
0000ee  fb90f2f1          SDIV     r2,r0,r1              ;483
0000f2  fb010012          MLS      r0,r1,r2,r0           ;483
0000f6  f8240990          STRH     r0,[r4],#-0x90        ;483
0000fa  e07d              B        |L10.504|
                  |L10.252|
0000fc  f8b50090          LDRH     r0,[r5,#0x90]         ;489
000100  288c              CMP      r0,#0x8c              ;489
000102  db0e              BLT      |L10.290|
000104  f8340f8c          LDRH     r0,[r4,#0x8c]!        ;492
000108  1c40              ADDS     r0,r0,#1              ;492
00010a  8020              STRH     r0,[r4,#0]            ;492
00010c  8820              LDRH     r0,[r4,#0]            ;493
00010e  218c              MOVS     r1,#0x8c              ;493
000110  fb90f2f1          SDIV     r2,r0,r1              ;493
000114  fb010012          MLS      r0,r1,r2,r0           ;493
000118  8020              STRH     r0,[r4,#0]            ;493
00011a  8820              LDRH     r0,[r4,#0]            ;494
00011c  80a0              STRH     r0,[r4,#4]            ;494
00011e  3c8c              SUBS     r4,r4,#0x8c           ;494
000120  e06b              B        |L10.506|
                  |L10.290|
000122  e064              B        |L10.494|
                  |L10.292|
000124  f8b40090          LDRH     r0,[r4,#0x90]         ;503
000128  f8148000          LDRB     r8,[r4,r0]            ;503
00012c  f8351f90          LDRH     r1,[r5,#0x90]!        ;505
000130  8828              LDRH     r0,[r5,#0]            ;505
000132  1c40              ADDS     r0,r0,#1              ;505
000134  f8250990          STRH     r0,[r5],#-0x90        ;505
000138  1d28              ADDS     r0,r5,#4              ;505
00013a  f8008001          STRB     r8,[r0,r1]            ;505
00013e  f8340f90          LDRH     r0,[r4,#0x90]!        ;506
000142  1c40              ADDS     r0,r0,#1              ;506
000144  8020              STRH     r0,[r4,#0]            ;506
000146  8820              LDRH     r0,[r4,#0]            ;507
000148  218c              MOVS     r1,#0x8c              ;507
00014a  fb90f2f1          SDIV     r2,r0,r1              ;507
00014e  fb010012          MLS      r0,r1,r2,r0           ;507
000152  f8240990          STRH     r0,[r4],#-0x90        ;507
000156  f8b50090          LDRH     r0,[r5,#0x90]         ;512
00015a  2804              CMP      r0,#4                 ;512
00015c  da00              BGE      |L10.352|
00015e  e046              B        |L10.494|
                  |L10.352|
000160  79a8              LDRB     r0,[r5,#6]            ;519
000162  2888              CMP      r0,#0x88              ;519
000164  dd11              BLE      |L10.394|
000166  2000              MOVS     r0,#0                 ;522
000168  f8a50090          STRH     r0,[r5,#0x90]         ;522
00016c  f8340f8c          LDRH     r0,[r4,#0x8c]!        ;524
000170  1c40              ADDS     r0,r0,#1              ;524
000172  8020              STRH     r0,[r4,#0]            ;524
000174  8820              LDRH     r0,[r4,#0]            ;525
000176  218c              MOVS     r1,#0x8c              ;525
000178  fb90f2f1          SDIV     r2,r0,r1              ;525
00017c  fb010012          MLS      r0,r1,r2,r0           ;525
000180  8020              STRH     r0,[r4,#0]            ;525
000182  8820              LDRH     r0,[r4,#0]            ;526
000184  80a0              STRH     r0,[r4,#4]            ;526
000186  3c8c              SUBS     r4,r4,#0x8c           ;526
000188  e035              B        |L10.502|
                  |L10.394|
00018a  f8b5b090          LDRH     r11,[r5,#0x90]        ;532
00018e  79a8              LDRB     r0,[r5,#6]            ;533
000190  1d00              ADDS     r0,r0,#4              ;533
000192  4558              CMP      r0,r11                ;533
000194  dd00              BLE      |L10.408|
000196  e02a              B        |L10.494|
                  |L10.408|
000198  f8b51090          LDRH     r1,[r5,#0x90]         ;540
00019c  1d28              ADDS     r0,r5,#4              ;540
00019e  f7fffffe          BL       CAN_CheckSum
0001a2  b988              CBNZ     r0,|L10.456|
0001a4  2000              MOVS     r0,#0                 ;543
0001a6  f8a50090          STRH     r0,[r5,#0x90]         ;543
0001aa  f8340f8c          LDRH     r0,[r4,#0x8c]!        ;545
0001ae  1c40              ADDS     r0,r0,#1              ;545
0001b0  8020              STRH     r0,[r4,#0]            ;545
0001b2  8820              LDRH     r0,[r4,#0]            ;546
0001b4  218c              MOVS     r1,#0x8c              ;546
0001b6  fb90f2f1          SDIV     r2,r0,r1              ;546
0001ba  fb010012          MLS      r0,r1,r2,r0           ;546
0001be  8020              STRH     r0,[r4,#0]            ;546
0001c0  8820              LDRH     r0,[r4,#0]            ;547
0001c2  80a0              STRH     r0,[r4,#4]            ;547
0001c4  3c8c              SUBS     r4,r4,#0x8c           ;547
0001c6  e016              B        |L10.502|
                  |L10.456|
0001c8  f8340f8c          LDRH     r0,[r4,#0x8c]!        ;553
0001cc  4458              ADD      r0,r0,r11             ;553
0001ce  8020              STRH     r0,[r4,#0]            ;553
0001d0  8820              LDRH     r0,[r4,#0]            ;554
0001d2  218c              MOVS     r1,#0x8c              ;554
0001d4  fb90f2f1          SDIV     r2,r0,r1              ;554
0001d8  fb010012          MLS      r0,r1,r2,r0           ;554
0001dc  8020              STRH     r0,[r4,#0]            ;554
0001de  8820              LDRH     r0,[r4,#0]            ;555
0001e0  80a0              STRH     r0,[r4,#4]            ;555
0001e2  3c8c              SUBS     r4,r4,#0x8c           ;555
0001e4  4631              MOV      r1,r6                 ;557
0001e6  4638              MOV      r0,r7                 ;557
0001e8  f7fffffe          BL       CAN_ConfirmTempCmdFrameBuff
0001ec  e003              B        |L10.502|
                  |L10.494|
0001ee  f8b40090          LDRH     r0,[r4,#0x90]         ;500
0001f2  4548              CMP      r0,r9                 ;500
0001f4  d196              BNE      |L10.292|
                  |L10.502|
0001f6  bf00              NOP                            ;528
                  |L10.504|
0001f8  bf00              NOP                            ;452
                  |L10.506|
0001fa  1c70              ADDS     r0,r6,#1              ;441
0001fc  b2c6              UXTB     r6,r0                 ;441
                  |L10.510|
0001fe  2e01              CMP      r6,#1                 ;441
000200  f6ffaf0a          BLT      |L10.24|
000204  bf00              NOP                            ;564
000206  e703              B        |L10.16|
;;;566     
                          ENDP


                          AREA ||i.CAN_TEST||, CODE, READONLY, ALIGN=1

                  CAN_TEST PROC
;;;80     
;;;81     void CAN_TEST(uint32 temp)
000000  b510              PUSH     {r4,lr}
;;;82     {
000002  4604              MOV      r4,r0
;;;83     	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;84     	IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK);
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;85     	IAP_CTRL_CAN_TxAddData(2); // 数据长度
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;86     	IAP_CTRL_CAN_TxAddData(55);
000016  2037              MOVS     r0,#0x37
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;87     	IAP_CTRL_CAN_TxAddData(55);
00001c  2037              MOVS     r0,#0x37
00001e  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;88     	IAP_CTRL_CAN_TxAddFrame();
000022  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;89     }
000026  bd10              POP      {r4,pc}
;;;90     /*********************************************************
                          ENDP


                          AREA ||i.CAN_TxEnterState||, CODE, READONLY, ALIGN=2

                  CAN_TxEnterState PROC
;;;1162   // CANTX状态迁移函数
;;;1163   void CAN_TxEnterState(uint32 state)
000000  4909              LDR      r1,|L12.40|
;;;1164   {
;;;1165   	// 让当前的状态成为历史
;;;1166   	canTxStateCB.preState = canTxStateCB.state;
000002  7809              LDRB     r1,[r1,#0]  ; canTxStateCB
000004  4a08              LDR      r2,|L12.40|
000006  7051              STRB     r1,[r2,#1]
;;;1167   
;;;1168   	// 设置新的状态
;;;1169   	canTxStateCB.state = (CAN_TX_STATE_E)state;
000008  7010              STRB     r0,[r2,#0]
;;;1170   
;;;1171   	switch (state)
00000a  b130              CBZ      r0,|L12.26|
00000c  2801              CMP      r0,#1
00000e  d005              BEQ      |L12.28|
000010  2802              CMP      r0,#2
000012  d004              BEQ      |L12.30|
000014  2804              CMP      r0,#4
000016  d104              BNE      |L12.34|
000018  e002              B        |L12.32|
                  |L12.26|
;;;1172   	{
;;;1173   	// ■■状态的入口处理■■
;;;1174   	case CAN_TX_STATE_NULL:
;;;1175   
;;;1176   		break;
00001a  e003              B        |L12.36|
                  |L12.28|
;;;1177   
;;;1178   	// ■■入口状态的入口处理■■
;;;1179   	case CAN_TX_STATE_ENTRY:
;;;1180   
;;;1181   		break;
00001c  e002              B        |L12.36|
                  |L12.30|
;;;1182   
;;;1183   	// ■■待机状态状态的入口处理■■
;;;1184   	case CAN_TX_STATE_STANDBY:
;;;1185   
;;;1186   		break;
00001e  e001              B        |L12.36|
                  |L12.32|
;;;1187   
;;;1188   	// ■■CAN消息发送中■■
;;;1189   	case CAN_TX_STATE_SENDING:
;;;1190   
;;;1191   		break;
000020  e000              B        |L12.36|
                  |L12.34|
;;;1192   
;;;1193   	default:
;;;1194   		break;
000022  bf00              NOP      
                  |L12.36|
000024  bf00              NOP                            ;1176
;;;1195   	}
;;;1196   }
000026  4770              BX       lr
;;;1197   
                          ENDP

                  |L12.40|
                          DCD      canTxStateCB

                          AREA ||i.CAN_TxStateInit||, CODE, READONLY, ALIGN=1

                  CAN_TxStateInit PROC
;;;1156   // CANTX状态机初始化
;;;1157   void CAN_TxStateInit(void)
000000  b500              PUSH     {lr}
;;;1158   {
;;;1159   	CAN_TxEnterState(CAN_TX_STATE_STANDBY);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       CAN_TxEnterState
;;;1160   }
000008  bd00              POP      {pc}
;;;1161   
                          ENDP


                          AREA ||i.CAN_TxStateProcess||, CODE, READONLY, ALIGN=2

                  CAN_TxStateProcess PROC
;;;1233   // CANTX过程处理函数
;;;1234   void CAN_TxStateProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1235   {
;;;1236   	uint16 head = sysCanCB.tx.head;
000002  4811              LDR      r0,|L14.72|
000004  f8b04158          LDRH     r4,[r0,#0x158]
;;;1237   	uint16 end = sysCanCB.tx.end;
000008  f8b0515a          LDRH     r5,[r0,#0x15a]
;;;1238   
;;;1239   	switch (canTxStateCB.state)
00000c  480f              LDR      r0,|L14.76|
00000e  7800              LDRB     r0,[r0,#0]  ; canTxStateCB
000010  b130              CBZ      r0,|L14.32|
000012  2801              CMP      r0,#1
000014  d005              BEQ      |L14.34|
000016  2802              CMP      r0,#2
000018  d004              BEQ      |L14.36|
00001a  2804              CMP      r0,#4
00001c  d111              BNE      |L14.66|
00001e  e00f              B        |L14.64|
                  |L14.32|
;;;1240   	{
;;;1241   	// ■■状态的入口处理■■
;;;1242   	case CAN_TX_STATE_NULL:
;;;1243   
;;;1244   		break;
000020  e010              B        |L14.68|
                  |L14.34|
;;;1245   
;;;1246   	// ■■入口状态的入口处理■■
;;;1247   	case CAN_TX_STATE_ENTRY:
;;;1248   
;;;1249   		break;
000022  e00f              B        |L14.68|
                  |L14.36|
;;;1250   
;;;1251   	// ■■待机状态状态的入口处理■■
;;;1252   	case CAN_TX_STATE_STANDBY:
;;;1253   		// 检测是否有Tx请求
;;;1254   		if (head != end)
000024  42ac              CMP      r4,r5
000026  d00a              BEQ      |L14.62|
;;;1255   		{
;;;1256   			// 调用此函数填充与启动发送can消息
;;;1257   			if (CAN_Tx_FillAndSend(&sysCanCB))
000028  4809              LDR      r0,|L14.80|
00002a  f7fffffe          BL       CAN_Tx_FillAndSend
00002e  b118              CBZ      r0,|L14.56|
;;;1258   			{
;;;1259   				// 进入CAN消息发送中状态
;;;1260   				CAN_TxEnterState(CAN_TX_STATE_SENDING);
000030  2004              MOVS     r0,#4
000032  f7fffffe          BL       CAN_TxEnterState
000036  e002              B        |L14.62|
                  |L14.56|
;;;1261   			}
;;;1262   			else
;;;1263   			{
;;;1264   				// 进入CAN消息发送待机状态
;;;1265   				CAN_TxEnterState(CAN_TX_STATE_STANDBY);
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       CAN_TxEnterState
                  |L14.62|
;;;1266   			}
;;;1267   		}
;;;1268   		else
;;;1269   		{
;;;1270   			// 否则什么也不处理
;;;1271   		}
;;;1272   
;;;1273   		break;
00003e  e001              B        |L14.68|
                  |L14.64|
;;;1274   
;;;1275   	// ■■CAN消息发送中■■
;;;1276   	case CAN_TX_STATE_SENDING:
;;;1277   
;;;1278   		break;
000040  e000              B        |L14.68|
                  |L14.66|
;;;1279   
;;;1280   	default:
;;;1281   		break;
000042  bf00              NOP      
                  |L14.68|
000044  bf00              NOP                            ;1244
;;;1282   	}
;;;1283   }
000046  bd70              POP      {r4-r6,pc}
;;;1284   
                          ENDP

                  |L14.72|
                          DCD      sysCanCB+0x27b8
                  |L14.76|
                          DCD      canTxStateCB
                  |L14.80|
                          DCD      sysCanCB

                          AREA ||i.CAN_Tx_FillAndSend||, CODE, READONLY, ALIGN=2

                  CAN_Tx_FillAndSend PROC
;;;224    // 填充与发送处理:TRUE,填充与发送；FALSE，环形队列向前滑移.
;;;225    BOOL CAN_Tx_FillAndSend(CAN_CB *pCB)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;226    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
;;;227    	uint16 index = pCB->tx.index;						   // 当前发送数据的索引号
000008  f24170b8          MOV      r0,#0x17b8
00000c  4420              ADD      r0,r0,r4
00000e  f5005080          ADD      r0,r0,#0x1000
000012  f8b0615c          LDRH     r6,[r0,#0x15c]
;;;228    	uint16 length = pCB->tx.cmdQueue[pCB->tx.head].length; // 当前发送的命令帧的长度
000016  f24170b8          MOV      r0,#0x17b8
00001a  4420              ADD      r0,r0,r4
00001c  f5005080          ADD      r0,r0,#0x1000
000020  f8b00158          LDRH     r0,[r0,#0x158]
000024  eb000180          ADD      r1,r0,r0,LSL #2
000028  eb011040          ADD      r0,r1,r0,LSL #5
00002c  f24171b8          MOV      r1,#0x17b8
000030  4421              ADD      r1,r1,r4
000032  eb010080          ADD      r0,r1,r0,LSL #2
000036  f8b07090          LDRH     r7,[r0,#0x90]
;;;229    	uint16 head = pCB->tx.head;							   // 发送命令帧队列头索引号
00003a  f24170b8          MOV      r0,#0x17b8
00003e  4420              ADD      r0,r0,r4
000040  f5005080          ADD      r0,r0,#0x1000
000044  f8b08158          LDRH     r8,[r0,#0x158]
;;;230    	uint16 end = pCB->tx.end;							   // 发送命令帧队列尾索引号
000048  f24170b8          MOV      r0,#0x17b8
00004c  4420              ADD      r0,r0,r4
00004e  f5005080          ADD      r0,r0,#0x1000
000052  f8b0b15a          LDRH     r11,[r0,#0x15a]
;;;231    	CAN_CMD_FRAME *pCmd = &pCB->tx.cmdQueue[pCB->tx.head]; // 取当前发送缓冲区地址
000056  f24170b8          MOV      r0,#0x17b8
00005a  4420              ADD      r0,r0,r4
00005c  f5005080          ADD      r0,r0,#0x1000
000060  f8b00158          LDRH     r0,[r0,#0x158]
000064  eb000180          ADD      r1,r0,r0,LSL #2
000068  eb011040          ADD      r0,r1,r0,LSL #5
00006c  f24171b8          MOV      r1,#0x17b8
000070  4421              ADD      r1,r1,r4
000072  eb010980          ADD      r9,r1,r0,LSL #2
;;;232    	can_trasnmit_message_struct canTxMsgCB;
;;;233    	uint16 standardID = 0x000;
000076  2000              MOVS     r0,#0
000078  9001              STR      r0,[sp,#4]
;;;234    	uint8 i; // 内部赋值用
;;;235    	uint32 extendedID;
;;;236    
;;;237    	// 参数合法性检验
;;;238    	if (NULL == pCB)
00007a  b914              CBNZ     r4,|L15.130|
                  |L15.124|
;;;239    	{
;;;240    		return FALSE;
;;;241    	}
;;;242    
;;;243    	// 队列为空，不处理
;;;244    	if (head == end)
;;;245    	{
;;;246    		return FALSE;
;;;247    	}
;;;248    
;;;249    	// ■■执行到这里，说明队列非空■■
;;;250    
;;;251    	// 当前命令帧未发送完时，根据长度的变化取出命令帧中的数据放到发送寄存器中
;;;252    	if (index < length)
;;;253    	{
;;;254    		// 配置为标准帧
;;;255    		// 配置为数据帧
;;;256    		canTxMsgCB.tx_ft = CAN_FT_DATA;
;;;257    		switch (dut_info.ID)
;;;258    		{
;;;259    		case DUT_TYPE_GB:
;;;260    		case DUT_TYPE_KAIYANG:
;;;261    			// 扩展帧
;;;262    			canTxMsgCB.tx_ff = CAN_FF_EXTENDED;
;;;263    			extendedID = pCmd->deviceID;
;;;264    			canTxMsgCB.tx_efid = extendedID;
;;;265    			break;
;;;266    		default:
;;;267    			// 标准帧
;;;268    			canTxMsgCB.tx_ff = CAN_FF_STANDARD;
;;;269    			standardID = (uint16)CAN_DEVICE_ID_HMI; // id：001
;;;270    			canTxMsgCB.tx_sfid = standardID;
;;;271    			break;
;;;272    		}
;;;273    		// ■■标准数据帧CAN消息格式■■
;;;274    
;;;275    		// 填充 DLC，最大8字节.当前长度>8字节，先发8字节。
;;;276    		if ((length - index) >= CAN_ONCEMESSAGE_MAX_SIZE)
;;;277    		{
;;;278    			canTxMsgCB.tx_dlen = CAN_ONCEMESSAGE_MAX_SIZE;
;;;279    		}
;;;280    		else
;;;281    		{
;;;282    			canTxMsgCB.tx_dlen = length - index;
;;;283    		}
;;;284    
;;;285    		// 填充数据
;;;286    		for (i = 0; i < canTxMsgCB.tx_dlen; i++)
;;;287    		{
;;;288    			canTxMsgCB.tx_data[i] = pCmd->buff[index + i];
;;;289    		}
;;;290    
;;;291    		// 发送数据
;;;292    		if (can_message_transmit(CAN0, &canTxMsgCB) == CAN_TRANSMIT_NOMAILBOX)
;;;293    		{
;;;294    			return FALSE;
;;;295    		}
;;;296    
;;;297    		// 开启邮箱空中断
;;;298    		can_interrupt_enable(CAN0, CAN_INT_TME);
;;;299    
;;;300    		return TRUE;
;;;301    	}
;;;302    	// 当前命令帧发送完时，删除之
;;;303    	else
;;;304    	{
;;;305    		pCB->tx.cmdQueue[head].length = 0;
;;;306    		pCB->tx.head++;
;;;307    		pCB->tx.head %= CAN_TX_QUEUE_SIZE;
;;;308    		pCB->tx.index = 0;
;;;309    
;;;310    		// 进入CAN消息发送待机状态
;;;311    		CAN_TxEnterState(CAN_TX_STATE_STANDBY);
;;;312    
;;;313    		return FALSE;
;;;314    	}
;;;315    }
00007c  b007              ADD      sp,sp,#0x1c
00007e  e8bd8ff0          POP      {r4-r11,pc}
                  |L15.130|
000082  45d8              CMP      r8,r11                ;244
000084  d101              BNE      |L15.138|
000086  2000              MOVS     r0,#0                 ;246
000088  e7f8              B        |L15.124|
                  |L15.138|
00008a  42be              CMP      r6,r7                 ;252
00008c  da43              BGE      |L15.278|
00008e  2000              MOVS     r0,#0                 ;256
000090  f88d0011          STRB     r0,[sp,#0x11]         ;256
000094  483e              LDR      r0,|L15.400|
000096  7d80              LDRB     r0,[r0,#0x16]         ;257  ; dut_info
000098  2801              CMP      r0,#1                 ;257
00009a  d002              BEQ      |L15.162|
00009c  2805              CMP      r0,#5                 ;257
00009e  d109              BNE      |L15.180|
0000a0  e000              B        |L15.164|
                  |L15.162|
0000a2  bf00              NOP                            ;260
                  |L15.164|
0000a4  2004              MOVS     r0,#4                 ;262
0000a6  f88d0010          STRB     r0,[sp,#0x10]         ;262
0000aa  f8d9a000          LDR      r10,[r9,#0]           ;263
0000ae  f8cda00c          STR      r10,[sp,#0xc]         ;264
0000b2  e007              B        |L15.196|
                  |L15.180|
0000b4  2000              MOVS     r0,#0                 ;268
0000b6  f88d0010          STRB     r0,[sp,#0x10]         ;268
0000ba  2001              MOVS     r0,#1                 ;269
0000bc  9001              STR      r0,[sp,#4]            ;269
0000be  9801              LDR      r0,[sp,#4]            ;270
0000c0  9002              STR      r0,[sp,#8]            ;270
0000c2  bf00              NOP                            ;271
                  |L15.196|
0000c4  bf00              NOP                            ;265
0000c6  1bb8              SUBS     r0,r7,r6              ;276
0000c8  2808              CMP      r0,#8                 ;276
0000ca  db03              BLT      |L15.212|
0000cc  2008              MOVS     r0,#8                 ;278
0000ce  f88d0012          STRB     r0,[sp,#0x12]         ;278
0000d2  e003              B        |L15.220|
                  |L15.212|
0000d4  1bb8              SUBS     r0,r7,r6              ;282
0000d6  b2c0              UXTB     r0,r0                 ;282
0000d8  f88d0012          STRB     r0,[sp,#0x12]         ;282
                  |L15.220|
0000dc  2500              MOVS     r5,#0                 ;286
0000de  e008              B        |L15.242|
                  |L15.224|
0000e0  1971              ADDS     r1,r6,r5              ;288
0000e2  f1090004          ADD      r0,r9,#4              ;288
0000e6  5c41              LDRB     r1,[r0,r1]            ;288
0000e8  f10d0013          ADD      r0,sp,#0x13           ;288
0000ec  5541              STRB     r1,[r0,r5]            ;288
0000ee  1c68              ADDS     r0,r5,#1              ;286
0000f0  b2c5              UXTB     r5,r0                 ;286
                  |L15.242|
0000f2  f89d0012          LDRB     r0,[sp,#0x12]         ;286
0000f6  42a8              CMP      r0,r5                 ;286
0000f8  dcf2              BGT      |L15.224|
0000fa  a902              ADD      r1,sp,#8              ;292
0000fc  4825              LDR      r0,|L15.404|
0000fe  f7fffffe          BL       can_message_transmit
000102  2804              CMP      r0,#4                 ;292
000104  d101              BNE      |L15.266|
000106  2000              MOVS     r0,#0                 ;294
000108  e7b8              B        |L15.124|
                  |L15.266|
00010a  2101              MOVS     r1,#1                 ;298
00010c  4821              LDR      r0,|L15.404|
00010e  f7fffffe          BL       can_interrupt_enable
000112  2001              MOVS     r0,#1                 ;300
000114  e7b2              B        |L15.124|
                  |L15.278|
000116  2000              MOVS     r0,#0                 ;305
000118  eb080188          ADD      r1,r8,r8,LSL #2       ;305
00011c  eb011148          ADD      r1,r1,r8,LSL #5       ;305
000120  f24172b8          MOV      r2,#0x17b8            ;305
000124  4422              ADD      r2,r2,r4              ;305
000126  eb020181          ADD      r1,r2,r1,LSL #2       ;305
00012a  f8a10090          STRH     r0,[r1,#0x90]         ;305
00012e  f24170b8          MOV      r0,#0x17b8            ;306
000132  4420              ADD      r0,r0,r4              ;306
000134  f5005080          ADD      r0,r0,#0x1000         ;306
000138  f8b00158          LDRH     r0,[r0,#0x158]        ;306
00013c  1c40              ADDS     r0,r0,#1              ;306
00013e  b281              UXTH     r1,r0                 ;306
000140  f24170b8          MOV      r0,#0x17b8            ;306
000144  4420              ADD      r0,r0,r4              ;306
000146  f5005080          ADD      r0,r0,#0x1000         ;306
00014a  f8a01158          STRH     r1,[r0,#0x158]        ;306
00014e  f24170b8          MOV      r0,#0x17b8            ;307
000152  4420              ADD      r0,r0,r4              ;307
000154  f5005080          ADD      r0,r0,#0x1000         ;307
000158  f8b00158          LDRH     r0,[r0,#0x158]        ;307
00015c  211e              MOVS     r1,#0x1e              ;307
00015e  fb90f2f1          SDIV     r2,r0,r1              ;307
000162  fb010012          MLS      r0,r1,r2,r0           ;307
000166  b281              UXTH     r1,r0                 ;307
000168  f24170b8          MOV      r0,#0x17b8            ;307
00016c  4420              ADD      r0,r0,r4              ;307
00016e  f5005080          ADD      r0,r0,#0x1000         ;307
000172  f8a01158          STRH     r1,[r0,#0x158]        ;307
000176  2100              MOVS     r1,#0                 ;308
000178  f24170b8          MOV      r0,#0x17b8            ;308
00017c  4420              ADD      r0,r0,r4              ;308
00017e  f5005080          ADD      r0,r0,#0x1000         ;308
000182  f8a0115c          STRH     r1,[r0,#0x15c]        ;308
000186  2002              MOVS     r0,#2                 ;311
000188  f7fffffe          BL       CAN_TxEnterState
00018c  2000              MOVS     r0,#0                 ;313
00018e  e775              B        |L15.124|
;;;316    
                          ENDP

                  |L15.400|
                          DCD      dut_info
                  |L15.404|
                          DCD      0x40006400

                          AREA ||i.CAN_Tx_NextFram||, CODE, READONLY, ALIGN=1

                  CAN_Tx_NextFram PROC
;;;317    // 发送成功启动下一帧:TRUE,启动下一帧；FALSE，发送完成.
;;;318    BOOL CAN_Tx_NextFram(CAN_CB *pCB)
000000  b530              PUSH     {r4,r5,lr}
;;;319    {
000002  4601              MOV      r1,r0
;;;320    	uint16 index = pCB->tx.index;						   // 当前发送数据的索引号
000004  f24170b8          MOV      r0,#0x17b8
000008  4408              ADD      r0,r0,r1
00000a  f5005080          ADD      r0,r0,#0x1000
00000e  f8b0315c          LDRH     r3,[r0,#0x15c]
;;;321    	uint16 length = pCB->tx.cmdQueue[pCB->tx.head].length; // 当前发送的命令帧的长度
000012  f24170b8          MOV      r0,#0x17b8
000016  4408              ADD      r0,r0,r1
000018  f5005080          ADD      r0,r0,#0x1000
00001c  f8b00158          LDRH     r0,[r0,#0x158]
000020  eb000580          ADD      r5,r0,r0,LSL #2
000024  eb051040          ADD      r0,r5,r0,LSL #5
000028  f24175b8          MOV      r5,#0x17b8
00002c  440d              ADD      r5,r5,r1
00002e  eb050080          ADD      r0,r5,r0,LSL #2
000032  f8b02090          LDRH     r2,[r0,#0x90]
;;;322    	uint8 txBnDLC = 0;
000036  2400              MOVS     r4,#0
;;;323    
;;;324    	// 参数合法性检验
;;;325    	if (NULL == pCB)
000038  b909              CBNZ     r1,|L16.62|
;;;326    	{
;;;327    		return FALSE;
00003a  2000              MOVS     r0,#0
                  |L16.60|
;;;328    	}
;;;329    
;;;330    	// 判断上一次成功发送的字节数.
;;;331    	if (length - index >= CAN_ONCEMESSAGE_MAX_SIZE)
;;;332    	{
;;;333    		txBnDLC = CAN_ONCEMESSAGE_MAX_SIZE;
;;;334    	}
;;;335    	else
;;;336    	{
;;;337    		txBnDLC = length - index;
;;;338    	}
;;;339    	pCB->tx.index += txBnDLC;
;;;340    
;;;341    	// 启动下一帧
;;;342    	if (pCB->tx.index < length)
;;;343    	{
;;;344    		// 进入CAN消息下一帧发送状态
;;;345    		return TRUE;
;;;346    	}
;;;347    	else
;;;348    	{
;;;349    		// 发送完成
;;;350    		return FALSE;
;;;351    	}
;;;352    }
00003c  bd30              POP      {r4,r5,pc}
                  |L16.62|
00003e  1ad0              SUBS     r0,r2,r3              ;331
000040  2808              CMP      r0,#8                 ;331
000042  db01              BLT      |L16.72|
000044  2408              MOVS     r4,#8                 ;333
000046  e001              B        |L16.76|
                  |L16.72|
000048  1ad0              SUBS     r0,r2,r3              ;337
00004a  b2c4              UXTB     r4,r0                 ;337
                  |L16.76|
00004c  f24170b8          MOV      r0,#0x17b8            ;339
000050  4408              ADD      r0,r0,r1              ;339
000052  f5005080          ADD      r0,r0,#0x1000         ;339
000056  f8b0015c          LDRH     r0,[r0,#0x15c]        ;339
00005a  4420              ADD      r0,r0,r4              ;339
00005c  b285              UXTH     r5,r0                 ;339
00005e  f24170b8          MOV      r0,#0x17b8            ;339
000062  4408              ADD      r0,r0,r1              ;339
000064  f5005080          ADD      r0,r0,#0x1000         ;339
000068  f8a0515c          STRH     r5,[r0,#0x15c]        ;339
00006c  f24170b8          MOV      r0,#0x17b8            ;342
000070  4408              ADD      r0,r0,r1              ;342
000072  f5005080          ADD      r0,r0,#0x1000         ;342
000076  f8b0015c          LDRH     r0,[r0,#0x15c]        ;342
00007a  4290              CMP      r0,r2                 ;342
00007c  da01              BGE      |L16.130|
00007e  2001              MOVS     r0,#1                 ;345
000080  e7dc              B        |L16.60|
                  |L16.130|
000082  2000              MOVS     r0,#0                 ;350
000084  e7da              B        |L16.60|
;;;353    
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_Init||, CODE, READONLY, ALIGN=2

                  IAP_CTRL_CAN_Init PROC
;;;93     // CAN 初始化
;;;94     void IAP_CTRL_CAN_Init(uint16 bund)
000000  b510              PUSH     {r4,lr}
;;;95     {
000002  4604              MOV      r4,r0
;;;96     	// 初始化硬件配置
;;;97     	CAN_HW_Init(bund);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       CAN_HW_Init
;;;98     
;;;99     	// 初始化结构体
;;;100    	CAN_DataStructureInit(&sysCanCB);
00000a  4803              LDR      r0,|L17.24|
00000c  f7fffffe          BL       CAN_DataStructureInit
;;;101    
;;;102    	// CAN发送状态机初始化
;;;103    	CAN_TxStateInit();
000010  f7fffffe          BL       CAN_TxStateInit
;;;104    
;;;105    	//	TIMER_AddTask(TIMER_ID_CAN_TEST,//测试
;;;106    	//							500,
;;;107    	//							CAN_TEST,
;;;108    	//							TRUE,
;;;109    	//							-1,
;;;110    	//							ACTION_MODE_ADD_TO_QUEUE);
;;;111    }
000014  bd10              POP      {r4,pc}
;;;112    
                          ENDP

000016  0000              DCW      0x0000
                  |L17.24|
                          DCD      sysCanCB

                          AREA ||i.IAP_CTRL_CAN_SendCmdCheckFlashBlankResult||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdCheckFlashBlankResult PROC
;;;1514   // 查空结果上报
;;;1515   void IAP_CTRL_CAN_SendCmdCheckFlashBlankResult(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1516   {
000002  4604              MOV      r4,r0
;;;1517   	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1518   	IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_CHECK_FLASH_BLANK_RESULT);
00000a  2029              MOVS     r0,#0x29
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1519   	IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1520   	IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1521   	IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1522   }
000020  bd10              POP      {r4,pc}
;;;1523   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdEraseFlashResult||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdEraseFlashResult PROC
;;;1494   // 擦除FLASH结果上报
;;;1495   void IAP_CTRL_CAN_SendCmdEraseFlashResult(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1496   {
000002  4604              MOV      r4,r0
;;;1497   	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1498   	IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_IAP_ERASE_FLASH_RESULT);
00000a  2025              MOVS     r0,#0x25
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1499   	IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1500   	IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1501   	IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1502   }
000020  bd10              POP      {r4,pc}
;;;1503   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdNoAck||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdNoAck PROC
;;;1414   // 发送命令不带应答
;;;1415   void IAP_CTRL_CAN_SendCmdNoAck(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1416   {
000002  4604              MOV      r4,r0
;;;1417   	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1418   	IAP_CTRL_CAN_TxAddData(param);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1419   	IAP_CTRL_CAN_TxAddData(0);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1420   	IAP_CTRL_CAN_TxAddData(1); // 段码屏工程允许
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1421   	IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1422   }
000020  bd10              POP      {r4,pc}
;;;1423   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdProjectApply||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdProjectApply PROC
;;;1466   // 工程模式启用
;;;1467   void IAP_CTRL_CAN_SendCmdProjectApply(uint8 *param)
000000  b570              PUSH     {r4-r6,lr}
;;;1468   {
000002  4605              MOV      r5,r0
;;;1469   	uint8 len = strlen((char *)param);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       strlen
00000a  b2c6              UXTB     r6,r0
;;;1470   	uint8 i;
;;;1471   
;;;1472   	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
00000c  2055              MOVS     r0,#0x55
00000e  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1473   	IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_PROJECT_APPLY);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1474   	IAP_CTRL_CAN_TxAddData(len); // 数据长度
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1475   
;;;1476   	for (i = 0; i < len; i++)
00001e  2400              MOVS     r4,#0
000020  e004              B        |L21.44|
                  |L21.34|
;;;1477   	{
;;;1478   		IAP_CTRL_CAN_TxAddData(param[i]);
000022  5d28              LDRB     r0,[r5,r4]
000024  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
000028  1c60              ADDS     r0,r4,#1              ;1476
00002a  b2c4              UXTB     r4,r0                 ;1476
                  |L21.44|
00002c  42b4              CMP      r4,r6                 ;1476
00002e  dbf8              BLT      |L21.34|
;;;1479   	}
;;;1480   
;;;1481   	IAP_CTRL_CAN_TxAddFrame();
000030  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1482   }
000034  bd70              POP      {r4-r6,pc}
;;;1483   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdProjectReady||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdProjectReady PROC
;;;1484   // 工程模式准备就绪报告
;;;1485   void IAP_CTRL_CAN_SendCmdProjectReady(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1486   {
000002  4604              MOV      r4,r0
;;;1487   	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1488   	IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_PROJECT_READY);
00000a  2003              MOVS     r0,#3
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1489   	IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1490   	IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1491   	IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1492   }
000020  bd10              POP      {r4,pc}
;;;1493   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdUIEraseResultReport||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdUIEraseResultReport PROC
;;;1533   // 发送UI数据擦除结果
;;;1534   void IAP_CTRL_CAN_SendCmdUIEraseResultReport(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1535   {
000002  4604              MOV      r4,r0
;;;1536   	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1537   	IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_UI_DATA_ERASE_ACK);
00000a  2013              MOVS     r0,#0x13
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1538   	IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1539   	IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1540   	IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1541   }
000020  bd10              POP      {r4,pc}
;;;1542   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdUIWriteDataResultReport||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdUIWriteDataResultReport PROC
;;;1543   // 发送UI数据写入结果
;;;1544   void IAP_CTRL_CAN_SendCmdUIWriteDataResultReport(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1545   {
000002  4604              MOV      r4,r0
;;;1546   	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1547   	IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_UI_DATA_WRITE_RESULT);
00000a  2015              MOVS     r0,#0x15
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1548   	IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1549   	IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1550   	IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1551   }
000020  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdUpdataFinishResult||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdUpdataFinishResult PROC
;;;1524   // 系统升级结束确认
;;;1525   void IAP_CTRL_CAN_SendCmdUpdataFinishResult(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1526   {
000002  4604              MOV      r4,r0
;;;1527   	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1528   	IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_UPDATA_FINISH_RESULT);
00000a  202b              MOVS     r0,#0x2b
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1529   	IAP_CTRL_CAN_TxAddData(0); // 数据长度
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1530   	IAP_CTRL_CAN_TxAddFrame();
000016  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1531   }
00001a  bd10              POP      {r4,pc}
;;;1532   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdWriteFlashResult||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdWriteFlashResult PROC
;;;1504   // IAP数据写入结果上报
;;;1505   void IAP_CTRL_CAN_SendCmdWriteFlashResult(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1506   {
000002  4604              MOV      r4,r0
;;;1507   	IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1508   	IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_IAP_WRITE_FLASH_RESULT);
00000a  2027              MOVS     r0,#0x27
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1509   	IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1510   	IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1511   	IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1512   }
000020  bd10              POP      {r4,pc}
;;;1513   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendUpDataPacket||, CODE, READONLY, ALIGN=2

                  IAP_CTRL_CAN_SendUpDataPacket PROC
;;;1424   // 发送升级数据
;;;1425   void IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE upDataType, CAN_CMD cmd, uint32 flashAddr, uint32 addr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1426   {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;1427   	uint8 i = 0;
00000c  2500              MOVS     r5,#0
;;;1428   	switch (upDataType)
00000e  f1b80f01          CMP      r8,#1
000012  d025              BEQ      |L27.96|
000014  f1b80f04          CMP      r8,#4
000018  d14c              BNE      |L27.180|
;;;1429   	{
;;;1430   	case DUT_FILE_TYPE_HEX:							 // hex
;;;1431   		dut_info.reconnectionRepeatContent[0] = 121; // 总长度
00001a  2079              MOVS     r0,#0x79
00001c  4928              LDR      r1,|L27.192|
00001e  f8810047          STRB     r0,[r1,#0x47]
;;;1432   		dut_info.reconnectionRepeatContent[1] = CAN_CMD_HEAD;
000022  2155              MOVS     r1,#0x55
000024  4826              LDR      r0,|L27.192|
000026  f8801048          STRB     r1,[r0,#0x48]
;;;1433   		dut_info.reconnectionRepeatContent[2] = cmd;
00002a  f8806049          STRB     r6,[r0,#0x49]
;;;1434   		dut_info.reconnectionRepeatContent[3] = 0;											  // 数据长度
00002e  2100              MOVS     r1,#0
000030  f880104a          STRB     r1,[r0,#0x4a]
;;;1435   		dut_info.reconnectionRepeatContent[4] = 0;											  // 添加是否加密
000034  f880104b          STRB     r1,[r0,#0x4b]
;;;1436   		dut_info.reconnectionRepeatContent[5] = 0;											  // 添加密钥
000038  f880104c          STRB     r1,[r0,#0x4c]
;;;1437   		SPI_FLASH_ReadArray(&dut_info.reconnectionRepeatContent[6], flashAddr + (addr), 116); // 工具读取 4+112 个字节
00003c  1939              ADDS     r1,r7,r4
00003e  2274              MOVS     r2,#0x74
000040  304d              ADDS     r0,r0,#0x4d
000042  f7fffffe          BL       SPI_FLASH_ReadArray
;;;1438   		for (i = 0; i < 121; i++)															  // 添加数据
000046  bf00              NOP      
000048  e007              B        |L27.90|
                  |L27.74|
;;;1439   		{
;;;1440   			IAP_CTRL_CAN_TxAddData(dut_info.reconnectionRepeatContent[i + 1]);
00004a  491d              LDR      r1,|L27.192|
00004c  3147              ADDS     r1,r1,#0x47
00004e  1c6a              ADDS     r2,r5,#1
000050  5c88              LDRB     r0,[r1,r2]
000052  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
000056  1c68              ADDS     r0,r5,#1              ;1438
000058  b2c5              UXTB     r5,r0                 ;1438
                  |L27.90|
00005a  2d79              CMP      r5,#0x79              ;1438
00005c  dbf5              BLT      |L27.74|
;;;1441   		}
;;;1442   		break;
00005e  e02a              B        |L27.182|
                  |L27.96|
;;;1443   
;;;1444   	case DUT_FILE_TYPE_BIN:							 // bin
;;;1445   		dut_info.reconnectionRepeatContent[0] = 135; // 总长度
000060  2087              MOVS     r0,#0x87
000062  4917              LDR      r1,|L27.192|
000064  f8810047          STRB     r0,[r1,#0x47]
;;;1446   		dut_info.reconnectionRepeatContent[1] = CAN_CMD_HEAD;
000068  2155              MOVS     r1,#0x55
00006a  4815              LDR      r0,|L27.192|
00006c  f8801048          STRB     r1,[r0,#0x48]
;;;1447   		dut_info.reconnectionRepeatContent[2] = cmd;
000070  f8806049          STRB     r6,[r0,#0x49]
;;;1448   		dut_info.reconnectionRepeatContent[3] = 0;											  // 数据长度
000074  2100              MOVS     r1,#0
000076  f880104a          STRB     r1,[r0,#0x4a]
;;;1449   		dut_info.reconnectionRepeatContent[4] = ((addr) & 0xFF000000) >> 24;				  // 数据长度
00007a  0e21              LSRS     r1,r4,#24
00007c  f880104b          STRB     r1,[r0,#0x4b]
;;;1450   		dut_info.reconnectionRepeatContent[5] = ((addr) & 0x00FF0000) >> 16;				  // 数据长度
000080  0c21              LSRS     r1,r4,#16
000082  f880104c          STRB     r1,[r0,#0x4c]
;;;1451   		dut_info.reconnectionRepeatContent[6] = ((addr) & 0x0000FF00) >> 8;					  // 数据长度
000086  0a21              LSRS     r1,r4,#8
000088  f880104d          STRB     r1,[r0,#0x4d]
;;;1452   		dut_info.reconnectionRepeatContent[7] = ((addr) & 0x000000FF);						  // 数据长度
00008c  f880404e          STRB     r4,[r0,#0x4e]
;;;1453   		SPI_FLASH_ReadArray(&dut_info.reconnectionRepeatContent[8], flashAddr + (addr), 128); // 工具读取128字节
000090  1939              ADDS     r1,r7,r4
000092  2280              MOVS     r2,#0x80
000094  304f              ADDS     r0,r0,#0x4f
000096  f7fffffe          BL       SPI_FLASH_ReadArray
;;;1454   		for (i = 0; i < 135; i++)															  // 添加数据
00009a  2500              MOVS     r5,#0
00009c  e007              B        |L27.174|
                  |L27.158|
;;;1455   		{
;;;1456   			IAP_CTRL_CAN_TxAddData(dut_info.reconnectionRepeatContent[i + 1]);
00009e  4908              LDR      r1,|L27.192|
0000a0  3147              ADDS     r1,r1,#0x47
0000a2  1c6a              ADDS     r2,r5,#1
0000a4  5c88              LDRB     r0,[r1,r2]
0000a6  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
0000aa  1c68              ADDS     r0,r5,#1              ;1454
0000ac  b2c5              UXTB     r5,r0                 ;1454
                  |L27.174|
0000ae  2d87              CMP      r5,#0x87              ;1454
0000b0  dbf5              BLT      |L27.158|
;;;1457   		}
;;;1458   		break;
0000b2  e000              B        |L27.182|
                  |L27.180|
;;;1459   	default:
;;;1460   		break;
0000b4  bf00              NOP      
                  |L27.182|
0000b6  bf00              NOP                            ;1442
;;;1461   	}
;;;1462   
;;;1463   	IAP_CTRL_CAN_TxAddFrame(); // 调整帧格式,修改长度和添加校验
0000b8  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1464   }
0000bc  e8bd81f0          POP      {r4-r8,pc}
;;;1465   
                          ENDP

                  |L27.192|
                          DCD      dut_info

                          AREA ||i.IAP_CTRL_CAN_TxAddData||, CODE, READONLY, ALIGN=2

                  IAP_CTRL_CAN_TxAddData PROC
;;;152    // 向发送命令帧队列中添加数据
;;;153    void IAP_CTRL_CAN_TxAddData(uint8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;154    {
000002  4601              MOV      r1,r0
;;;155    	uint16 head = sysCanCB.tx.head;
000004  4c13              LDR      r4,|L28.84|
000006  f8b42158          LDRH     r2,[r4,#0x158]
;;;156    	uint16 end = sysCanCB.tx.end;
00000a  f8b4315a          LDRH     r3,[r4,#0x15a]
;;;157    	CAN_CMD_FRAME *pCmdFrame = &sysCanCB.tx.cmdQueue[sysCanCB.tx.end];
00000e  f8b4415a          LDRH     r4,[r4,#0x15a]
000012  eb040584          ADD      r5,r4,r4,LSL #2
000016  eb051444          ADD      r4,r5,r4,LSL #5
00001a  4d0f              LDR      r5,|L28.88|
00001c  eb050084          ADD      r0,r5,r4,LSL #2
;;;158    
;;;159    	// 发送缓冲区已满，不予接收
;;;160    	if ((end + 1) % CAN_TX_QUEUE_SIZE == head)
000020  1c5c              ADDS     r4,r3,#1
000022  251e              MOVS     r5,#0x1e
000024  fb94f6f5          SDIV     r6,r4,r5
000028  fb054416          MLS      r4,r5,r6,r4
00002c  4294              CMP      r4,r2
00002e  d100              BNE      |L28.50|
                  |L28.48|
;;;161    	{
;;;162    		return;
;;;163    	}
;;;164    
;;;165    	// 队尾命令帧已满，退出
;;;166    	if (pCmdFrame->length >= CAN_CMD_FRAME_LENGTH_MAX)
;;;167    	{
;;;168    		return;
;;;169    	}
;;;170    
;;;171    	// 数据添加到帧末尾，并更新帧长度
;;;172    	pCmdFrame->buff[pCmdFrame->length] = data;
;;;173    	pCmdFrame->length++;
;;;174    }
000030  bd70              POP      {r4-r6,pc}
                  |L28.50|
000032  f8b04090          LDRH     r4,[r0,#0x90]         ;166
000036  2c8c              CMP      r4,#0x8c              ;166
000038  db00              BLT      |L28.60|
00003a  e7f9              B        |L28.48|
                  |L28.60|
00003c  f8b05090          LDRH     r5,[r0,#0x90]         ;172
000040  1d04              ADDS     r4,r0,#4              ;172
000042  5561              STRB     r1,[r4,r5]            ;172
000044  f8b04090          LDRH     r4,[r0,#0x90]         ;173
000048  1c64              ADDS     r4,r4,#1              ;173
00004a  f8a04090          STRH     r4,[r0,#0x90]         ;173
00004e  bf00              NOP      
000050  e7ee              B        |L28.48|
;;;175    
                          ENDP

000052  0000              DCW      0x0000
                  |L28.84|
                          DCD      sysCanCB+0x27b8
                  |L28.88|
                          DCD      sysCanCB+0x17b8

                          AREA ||i.IAP_CTRL_CAN_TxAddFrame||, CODE, READONLY, ALIGN=2

                  IAP_CTRL_CAN_TxAddFrame PROC
;;;176    // 发送命令帧处理,自动扶正帧长度以及检验码
;;;177    void IAP_CTRL_CAN_TxAddFrame(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;178    {
;;;179    	uint16 head = sysCanCB.tx.head;
000004  4838              LDR      r0,|L29.232|
000006  f8b07158          LDRH     r7,[r0,#0x158]
;;;180    	uint16 end = sysCanCB.tx.end;
00000a  f8b0415a          LDRH     r4,[r0,#0x15a]
;;;181    	uint8 *buff = sysCanCB.tx.cmdQueue[end].buff;
00000e  eb040084          ADD      r0,r4,r4,LSL #2
000012  eb001044          ADD      r0,r0,r4,LSL #5
000016  4935              LDR      r1,|L29.236|
000018  eb010080          ADD      r0,r1,r0,LSL #2
00001c  1d06              ADDS     r6,r0,#4
;;;182    	uint16 length = sysCanCB.tx.cmdQueue[end].length;
00001e  eb040084          ADD      r0,r4,r4,LSL #2
000022  eb001044          ADD      r0,r0,r4,LSL #5
000026  eb010080          ADD      r0,r1,r0,LSL #2
00002a  f8b05090          LDRH     r5,[r0,#0x90]
;;;183    	uint8 cmdHead = buff[CAN_CMD_HEAD_INDEX]; // 帧头
00002e  f8968000          LDRB     r8,[r6,#0]
;;;184    
;;;185    	// 发送缓冲区已满，不予接收
;;;186    	if ((end + 1) % CAN_TX_QUEUE_SIZE == head)
000032  1c60              ADDS     r0,r4,#1
000034  211e              MOVS     r1,#0x1e
000036  fb90f2f1          SDIV     r2,r0,r1
00003a  fb010012          MLS      r0,r1,r2,r0
00003e  42b8              CMP      r0,r7
000040  d101              BNE      |L29.70|
                  |L29.66|
;;;187    	{
;;;188    		return;
;;;189    	}
;;;190    
;;;191    	// 命令头错误
;;;192    	if (CAN_CMD_HEAD != cmdHead)
;;;193    	{
;;;194    		// 把帧数据索引放在最开始位置
;;;195    		sysCanCB.tx.cmdQueue[end].length = 0;
;;;196    		return;
;;;197    	}
;;;198    
;;;199    	// 命令头正确，但数据长度不对(数据长度减去CRC的长度)
;;;200    	if ((CAN_CMD_FRAME_LENGTH_MAX - CAN_CHECK_BYTE_SIZE < length) || (CAN_CMD_FRAME_LENGTH_MIN - CAN_CHECK_BYTE_SIZE > length))
;;;201    	{
;;;202    		// 把帧数据索引放在最开始位置
;;;203    		sysCanCB.tx.cmdQueue[end].length = 0;
;;;204    		buff[CAN_CMD_HEAD_INDEX] = CAN_CMD_NONHEAD; // 避免数据没更新时，再次进入
;;;205    		return;
;;;206    	}
;;;207    
;;;208    	// 执行到此，命令头正确，数据长度正确,发送缓冲区未满
;;;209    	// 长度扶正
;;;210    	buff[CAN_CMD_LENGTH_INDEX] = length - CAN_CMD_FRAME_LENGTH_MIN + CAN_CHECK_BYTE_SIZE;
;;;211    
;;;212    	// 填充CRC校验码
;;;213    	CAN_AddSum(buff, length);
;;;214    
;;;215    	// 将数据长度填到待发送缓冲器
;;;216    	sysCanCB.tx.cmdQueue[end].length = length + CAN_CHECK_BYTE_SIZE;
;;;217    
;;;218    	// 发送环形队列更新位置
;;;219    	sysCanCB.tx.end++;
;;;220    	sysCanCB.tx.end %= CAN_TX_QUEUE_SIZE;
;;;221    	sysCanCB.tx.cmdQueue[sysCanCB.tx.end].length = 0; // 2015.12.2修改
;;;222    }
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L29.70|
000046  f1b80f55          CMP      r8,#0x55              ;192
00004a  d00a              BEQ      |L29.98|
00004c  2000              MOVS     r0,#0                 ;195
00004e  eb040184          ADD      r1,r4,r4,LSL #2       ;195
000052  eb011144          ADD      r1,r1,r4,LSL #5       ;195
000056  4a25              LDR      r2,|L29.236|
000058  eb020181          ADD      r1,r2,r1,LSL #2       ;195
00005c  f8a10090          STRH     r0,[r1,#0x90]         ;195
000060  e7ef              B        |L29.66|
                  |L29.98|
000062  2d8b              CMP      r5,#0x8b              ;200
000064  dc01              BGT      |L29.106|
000066  2d03              CMP      r5,#3                 ;200
000068  da0c              BGE      |L29.132|
                  |L29.106|
00006a  2000              MOVS     r0,#0                 ;203
00006c  eb040184          ADD      r1,r4,r4,LSL #2       ;203
000070  eb011144          ADD      r1,r1,r4,LSL #5       ;203
000074  4a1d              LDR      r2,|L29.236|
000076  eb020181          ADD      r1,r2,r1,LSL #2       ;203
00007a  f8a10090          STRH     r0,[r1,#0x90]         ;203
00007e  20ff              MOVS     r0,#0xff              ;204
000080  7030              STRB     r0,[r6,#0]            ;204
000082  e7de              B        |L29.66|
                  |L29.132|
000084  1ee8              SUBS     r0,r5,#3              ;210
000086  70b0              STRB     r0,[r6,#2]            ;210
000088  4629              MOV      r1,r5                 ;213
00008a  4630              MOV      r0,r6                 ;213
00008c  f7fffffe          BL       CAN_AddSum
000090  1c68              ADDS     r0,r5,#1              ;216
000092  eb040184          ADD      r1,r4,r4,LSL #2       ;216
000096  eb011144          ADD      r1,r1,r4,LSL #5       ;216
00009a  4a14              LDR      r2,|L29.236|
00009c  eb020181          ADD      r1,r2,r1,LSL #2       ;216
0000a0  f8a10090          STRH     r0,[r1,#0x90]         ;216
0000a4  4810              LDR      r0,|L29.232|
0000a6  f8b0015a          LDRH     r0,[r0,#0x15a]        ;219
0000aa  1c40              ADDS     r0,r0,#1              ;219
0000ac  b281              UXTH     r1,r0                 ;219
0000ae  480e              LDR      r0,|L29.232|
0000b0  f8a0115a          STRH     r1,[r0,#0x15a]        ;219
0000b4  f8b0015a          LDRH     r0,[r0,#0x15a]        ;220
0000b8  211e              MOVS     r1,#0x1e              ;220
0000ba  fb90f2f1          SDIV     r2,r0,r1              ;220
0000be  fb010012          MLS      r0,r1,r2,r0           ;220
0000c2  b281              UXTH     r1,r0                 ;220
0000c4  4808              LDR      r0,|L29.232|
0000c6  f8a0115a          STRH     r1,[r0,#0x15a]        ;220
0000ca  2100              MOVS     r1,#0                 ;221
0000cc  f8b0015a          LDRH     r0,[r0,#0x15a]        ;221
0000d0  eb000280          ADD      r2,r0,r0,LSL #2       ;221
0000d4  eb021040          ADD      r0,r2,r0,LSL #5       ;221
0000d8  4a04              LDR      r2,|L29.236|
0000da  eb020080          ADD      r0,r2,r0,LSL #2       ;221
0000de  f8a01090          STRH     r1,[r0,#0x90]         ;221
0000e2  bf00              NOP      
0000e4  e7ad              B        |L29.66|
;;;223    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L29.232|
                          DCD      sysCanCB+0x27b8
                  |L29.236|
                          DCD      sysCanCB+0x17b8

                          AREA ||i.USBD_HP_CAN0_TX_IRQHandler||, CODE, READONLY, ALIGN=2

                  USBD_HP_CAN0_TX_IRQHandler PROC
;;;1390   // ISR for CAN TX Interrupt
;;;1391   void USBD_HP_CAN0_TX_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1392   {
;;;1393   	uint16 head = sysCanCB.tx.head;
000002  4809              LDR      r0,|L30.40|
000004  f8b04158          LDRH     r4,[r0,#0x158]
;;;1394   	uint16 end = sysCanCB.tx.end;
000008  f8b0515a          LDRH     r5,[r0,#0x15a]
;;;1395   
;;;1396   	// 清空邮箱空中断标志位
;;;1397   	can_interrupt_disable(CAN0, CAN_INT_TME);
00000c  2101              MOVS     r1,#1
00000e  4807              LDR      r0,|L30.44|
000010  f7fffffe          BL       can_interrupt_disable
;;;1398   
;;;1399   	// 检测是否有Tx请求
;;;1400   	if (head != end)
000014  42ac              CMP      r4,r5
000016  d005              BEQ      |L30.36|
;;;1401   	{
;;;1402   		// Tx成功，判断是否有下一帧
;;;1403   		CAN_Tx_NextFram(&sysCanCB);
000018  4805              LDR      r0,|L30.48|
00001a  f7fffffe          BL       CAN_Tx_NextFram
;;;1404   
;;;1405   		// 进入CAN消息下一帧发送状态
;;;1406   		CAN_Tx_FillAndSend(&sysCanCB);
00001e  4804              LDR      r0,|L30.48|
000020  f7fffffe          BL       CAN_Tx_FillAndSend
                  |L30.36|
;;;1407   	}
;;;1408   }
000024  bd70              POP      {r4-r6,pc}
;;;1409   
                          ENDP

000026  0000              DCW      0x0000
                  |L30.40|
                          DCD      sysCanCB+0x27b8
                  |L30.44|
                          DCD      0x40006400
                  |L30.48|
                          DCD      sysCanCB

                          AREA ||i.USBD_LP_CAN0_RX0_IRQHandler||, CODE, READONLY, ALIGN=2

                  USBD_LP_CAN0_RX0_IRQHandler PROC
;;;1366   // ISR for CAN RX Interrupt
;;;1367   void USBD_LP_CAN0_RX0_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;1368   {
000002  b085              SUB      sp,sp,#0x14
;;;1369   	can_receive_message_struct rxMessage1;
;;;1370   
;;;1371   	// 读出FIFO中所有的数据
;;;1372   	while (can_receive_message_length_get(CAN0, CAN_FIFO0))
000004  e029              B        |L31.90|
                  |L31.6|
;;;1373   	{
;;;1374   		can_message_receive(CAN0, CAN_FIFO0, &rxMessage1);
000006  466a              MOV      r2,sp
000008  2100              MOVS     r1,#0
00000a  4818              LDR      r0,|L31.108|
00000c  f7fffffe          BL       can_message_receive
;;;1375   
;;;1376   		switch (dut_info.ID)
000010  4817              LDR      r0,|L31.112|
000012  7d80              LDRB     r0,[r0,#0x16]  ; dut_info
000014  2801              CMP      r0,#1
000016  d10f              BNE      |L31.56|
;;;1377   		{
;;;1378   		case DUT_TYPE_GB:
;;;1379   			CAN_MacProcess(rxMessage1.rx_efid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);
000018  f89d200a          LDRB     r2,[sp,#0xa]
00001c  9901              LDR      r1,[sp,#4]
00001e  b288              UXTH     r0,r1
000020  f10d010b          ADD      r1,sp,#0xb
000024  f7fffffe          BL       CAN_MacProcess
;;;1380   			CAN_PROTOCOL_MacProcess(rxMessage1.rx_efid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);
000028  f89d200a          LDRB     r2,[sp,#0xa]
00002c  f10d010b          ADD      r1,sp,#0xb
000030  9801              LDR      r0,[sp,#4]
000032  f7fffffe          BL       CAN_PROTOCOL_MacProcess
;;;1381   			break;
000036  e00f              B        |L31.88|
                  |L31.56|
;;;1382   		default:
;;;1383   			CAN_PROTOCOL1_MacProcess(rxMessage1.rx_sfid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen); // 升级config
000038  f89d200a          LDRB     r2,[sp,#0xa]
00003c  f10d010b          ADD      r1,sp,#0xb
000040  9800              LDR      r0,[sp,#0]
000042  f7fffffe          BL       CAN_PROTOCOL1_MacProcess
;;;1384   			CAN_MacProcess(rxMessage1.rx_sfid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);			  // 55升级协议
000046  f89d200a          LDRB     r2,[sp,#0xa]
00004a  9900              LDR      r1,[sp,#0]
00004c  b288              UXTH     r0,r1
00004e  f10d010b          ADD      r1,sp,#0xb
000052  f7fffffe          BL       CAN_MacProcess
;;;1385   			break;
000056  bf00              NOP      
                  |L31.88|
000058  bf00              NOP                            ;1381
                  |L31.90|
00005a  2100              MOVS     r1,#0                 ;1372
00005c  4803              LDR      r0,|L31.108|
00005e  f7fffffe          BL       can_receive_message_length_get
000062  2800              CMP      r0,#0                 ;1372
000064  d1cf              BNE      |L31.6|
;;;1386   		}
;;;1387   	}
;;;1388   }
000066  b005              ADD      sp,sp,#0x14
000068  bd00              POP      {pc}
;;;1389   
                          ENDP

00006a  0000              DCW      0x0000
                  |L31.108|
                          DCD      0x40006400
                  |L31.112|
                          DCD      dut_info

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  sysCanCB
                          %        10520

                          AREA ||.data||, DATA, ALIGN=0

                  canTxStateCB
                          DCDU     0x00000000
000004  000000            DCB      0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "User\\iapCtrlCan.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_iapCtrlCan_c_CAN_TEST____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___12_iapCtrlCan_c_CAN_TEST____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_iapCtrlCan_c_CAN_TEST____REVSH|
#line 128
|__asm___12_iapCtrlCan_c_CAN_TEST____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
