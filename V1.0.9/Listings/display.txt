; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\display.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\display.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\display.crf User\display.c]
                          THUMB

                          AREA ||i.ClearData_ReturnMenuRoot||, CODE, READONLY, ALIGN=2

                  ClearData_ReturnMenuRoot PROC
;;;16921  // 清除数据菜单清除后弹窗的清除
;;;16922  void ClearData_ReturnMenuRoot(uint32 param)
000000  b508              PUSH     {r3,lr}
;;;16923  {
;;;16924  
;;;16925  	displayStateCB.menu.root.enterFlag = 0;   // 退出到根菜单
000002  4911              LDR      r1,|L1.72|
000004  2000              MOVS     r0,#0
000006  f8810b31          STRB     r0,[r1,#0xb31]
;;;16926  	LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
00000a  f64100e4          MOV      r0,#0x18e4
00000e  9000              STR      r0,[sp,#0]
000010  2382              MOVS     r3,#0x82
000012  22e6              MOVS     r2,#0xe6
000014  2120              MOVS     r1,#0x20
000016  2046              MOVS     r0,#0x46
000018  f7fffffe          BL       LCD_DrawAreaColor
;;;16927  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_PRESS_X, UI_ITEM_COODINATE_MENU_CLEAR_PRESS_Y, PIC_ID_M_CLEAR_PRESS, LCD_OPERATOR_MODE_DRAW);
00001c  2300              MOVS     r3,#0
00001e  22cc              MOVS     r2,#0xcc
000020  2158              MOVS     r1,#0x58
000022  2075              MOVS     r0,#0x75
000024  f7fffffe          BL       LCD_DrawBmpByID
;;;16928  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_CLEAR_TITILE, LCD_OPERATOR_MODE_DRAW);
000028  2300              MOVS     r3,#0
00002a  2274              MOVS     r2,#0x74
00002c  2131              MOVS     r1,#0x31
00002e  205a              MOVS     r0,#0x5a
000030  f7fffffe          BL       LCD_DrawBmpByID
;;;16929  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_X, UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_Y, PIC_ID_M_CLEAR_IT_WILL, LCD_OPERATOR_MODE_DRAW);	
000034  b001              ADD      sp,sp,#4
000036  2300              MOVS     r3,#0
000038  22cb              MOVS     r2,#0xcb
00003a  2180              MOVS     r1,#0x80
00003c  2046              MOVS     r0,#0x46
00003e  f85deb04          POP      {lr}
000042  f7ffbffe          B.W      LCD_DrawBmpByID
;;;16930  
;;;16931  }
;;;16932  
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_BLINK_CheckTimeOut||, CODE, READONLY, ALIGN=1

                  DISPLAY_BLINK_CheckTimeOut PROC
;;;16667  **********************************************************************/
;;;16668  BOOL DISPLAY_BLINK_CheckTimeOut(uint32 ulWaitTime, uint32 ulStartTime)
000000  b500              PUSH     {lr}
;;;16669  {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;16670  	uint32 ulCurTime = DISPLAY_BLINK_GetCurTime();
000006  f7fffffe          BL       DISPLAY_BLINK_GetCurTime
;;;16671  
;;;16672  	if ( ulCurTime >=  ulStartTime )
00000a  4290              CMP      r0,r2
00000c  d306              BCC      |L2.28|
;;;16673  	{
;;;16674  		if ( ulWaitTime <= (ulCurTime - ulStartTime) )
00000e  1a80              SUBS     r0,r0,r2
000010  4298              CMP      r0,r3
000012  d301              BCC      |L2.24|
;;;16675  		{
;;;16676  			return TRUE;
000014  2001              MOVS     r0,#1
;;;16677  		}
;;;16678  		else
;;;16679  		{
;;;16680  			return FALSE;
;;;16681  		}
;;;16682  	}
;;;16683  	else
;;;16684  	{
;;;16685  		if ( ulWaitTime <= (ulCurTime - ulStartTime + UINT32_NULL) )
;;;16686  		{
;;;16687  			return TRUE;
;;;16688  		}
;;;16689  		else
;;;16690  		{
;;;16691  			return FALSE;
;;;16692  		}
;;;16693  	}
;;;16694  }
000016  bd00              POP      {pc}
                  |L2.24|
000018  2000              MOVS     r0,#0                 ;16680
00001a  bd00              POP      {pc}
                  |L2.28|
00001c  1a80              SUBS     r0,r0,r2              ;16685
00001e  1e40              SUBS     r0,r0,#1              ;16685
000020  4298              CMP      r0,r3                 ;16685
000022  d301              BCC      |L2.40|
000024  2001              MOVS     r0,#1                 ;16687
000026  bd00              POP      {pc}
                  |L2.40|
000028  2000              MOVS     r0,#0                 ;16691
00002a  bd00              POP      {pc}
;;;16695  
                          ENDP


                          AREA ||i.DISPLAY_BLINK_GetCurTime||, CODE, READONLY, ALIGN=2

                  DISPLAY_BLINK_GetCurTime PROC
;;;16648  **********************************************************************/
;;;16649  uint32 DISPLAY_BLINK_GetCurTime(void)
000000  4802              LDR      r0,|L3.12|
;;;16650  {
;;;16651  	return stBlinkCB.ulCount * DISPLAY_TIME_COUNT;
000002  2132              MOVS     r1,#0x32
000004  6880              LDR      r0,[r0,#8]  ; stBlinkCB
000006  4348              MULS     r0,r1,r0
;;;16652  }
000008  4770              BX       lr
;;;16653  
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      ||.bss||+0xb64

                          AREA ||i.DISPLAY_BLINK_ModeControl||, CODE, READONLY, ALIGN=2

                  DISPLAY_BLINK_ModeControl PROC
;;;16612  **********************************************************************/
;;;16613  void DISPLAY_BLINK_ModeControl(BLINK_NAME_E eName, BLINK_MODE_E eMode)
000000  2200              MOVS     r2,#0
;;;16614  {
;;;16615  	uint8 i = 0;
;;;16616  	
;;;16617  	CHECK_PARAM_OVER_RETURN(eName, BLINK_NAME_MAX);
000002  2808              CMP      r0,#8
000004  d808              BHI      |L4.24|
;;;16618  	CHECK_PARAM_OVER_SAME_RETURN(eMode, LED_MODE_MAX);
000006  2907              CMP      r1,#7
000008  d206              BCS      |L4.24|
;;;16619  	CHECK_PARAM_OVER_SAME_RETURN(eMode, LED_MODE_MAX_LIMIT);	 // 模式超出最大限制，不支持	
;;;16620  
;;;16621  	// 设置所有的模式都一样
;;;16622  	if ( BLINK_NAME_MAX == eName )
;;;16623  	{
;;;16624  		for ( i = 0; i < BLINK_NAME_MAX; i++)
;;;16625  		{
;;;16626  			stBlinkCB.uniLcd[i].param.mode = eMode;
00000a  4b08              LDR      r3,|L4.44|
00000c  2808              CMP      r0,#8                 ;16622
00000e  d004              BEQ      |L4.26|
;;;16627  		}
;;;16628  		
;;;16629  		return;
;;;16630  	}
;;;16631  
;;;16632  	// 设置单项的模式
;;;16633  	stBlinkCB.uniLcd[eName].param.mode = eMode;
000010  5c1a              LDRB     r2,[r3,r0]
000012  f3610287          BFI      r2,r1,#2,#6
000016  541a              STRB     r2,[r3,r0]
                  |L4.24|
;;;16634  
;;;16635  }
000018  4770              BX       lr
                  |L4.26|
00001a  5c98              LDRB     r0,[r3,r2]            ;16626
00001c  f3610087          BFI      r0,r1,#2,#6           ;16626
000020  5498              STRB     r0,[r3,r2]            ;16626
000022  1c52              ADDS     r2,r2,#1              ;16624
000024  b2d2              UXTB     r2,r2                 ;16624
000026  2a08              CMP      r2,#8                 ;16624
000028  d3f7              BCC      |L4.26|
00002a  4770              BX       lr
;;;16636  
                          ENDP

                  |L4.44|
                          DCD      ||.bss||+0xb64

                          AREA ||i.DISPLAY_BLINK_OnOffControl||, CODE, READONLY, ALIGN=2

                  DISPLAY_BLINK_OnOffControl PROC
;;;16707  **********************************************************************/
;;;16708  void DISPLAY_BLINK_OnOffControl(BLINK_NAME_E eName)
000000  b570              PUSH     {r4-r6,lr}
;;;16709  {
000002  4604              MOV      r4,r0
;;;16710  	static uint32	s_ulStartTimeLowSpeed	= 0;		
;;;16711  	static uint32	s_ulStartTimeHighSpeed	= 0;		
;;;16712  	static uint32	s_ulStartTimeSuperSpeed	= 0;		
;;;16713  	static uint32	s_ulStartTime_1_10		= 0;		
;;;16714  	static uint32	s_ulWaitTime_1_10		= BLINK_MODE_BLINK_FLASH_1_10_TIME;	
;;;16715  	static uint32	s_ulStartTime_3_4		= 0;		
;;;16716  	static uint32	s_ulWaitTime_3_4		= BLINK_MODE_BLINK_FLASH_3_4_TIME;	
;;;16717  
;;;16718  	// 模式超出最大限制，不支持	
;;;16719  	CHECK_PARAM_OVER_SAME_RETURN(eName, BLINK_NAME_MAX);		
000004  2c08              CMP      r4,#8
000006  d211              BCS      |L5.44|
;;;16720  	
;;;16721  	switch ( stBlinkCB.uniLcd[eName].param.mode )
000008  4d48              LDR      r5,|L5.300|
;;;16722  	{
;;;16723  		// 灭模式
;;;16724  		case BLINK_MODE_OFF:
;;;16725  			
;;;16726  			// 灭模式一直为OFF			
;;;16727  			stBlinkCB.uniLcd[eName].param.bPreOnOffControl = stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16728  			stBlinkCB.uniLcd[eName].param.bOnOffControl = BLINK_ACTION_OFF;
;;;16729  
;;;16730  			return;	
;;;16731  
;;;16732  		// 亮模式
;;;16733  		case BLINK_MODE_ON:
;;;16734  			
;;;16735  			// 亮模式一直为ON
;;;16736  			stBlinkCB.uniLcd[eName].param.bPreOnOffControl = stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16737  			stBlinkCB.uniLcd[eName].param.bOnOffControl = BLINK_ACTION_ON;
;;;16738  			
;;;16739  			return;	
;;;16740  		
;;;16741  		// 慢闪
;;;16742  		case BLINK_MODE_BLINK_LOW_SPEED:
;;;16743  			
;;;16744  			// 对应模式的时间未到, 则继续扫描
;;;16745  			if (TRUE == DISPLAY_BLINK_CheckTimeOut( BLINK_MODE_BLINK_LOW_SPEED_TIME, s_ulStartTimeLowSpeed ))
00000a  4e49              LDR      r6,|L5.304|
00000c  5d28              LDRB     r0,[r5,r4]            ;16721
00000e  0881              LSRS     r1,r0,#2              ;16721
000010  2907              CMP      r1,#7                 ;16721
000012  d20b              BCS      |L5.44|
000014  e8dff001          TBB      [pc,r1]               ;16721
000018  040b1225          DCB      0x04,0x0b,0x12,0x25
00001c  384b6a00          DCB      0x38,0x4b,0x6a,0x00
000020  4601              MOV      r1,r0                 ;16727
000022  f3600141          BFI      r1,r0,#1,#1           ;16727
000026  f0210001          BIC      r0,r1,#1              ;16728
00002a  5528              STRB     r0,[r5,r4]            ;16728
                  |L5.44|
;;;16746  			{				
;;;16747  				s_ulStartTimeLowSpeed = DISPLAY_BLINK_GetCurTime();
;;;16748  
;;;16749  				// 对应模式的时间到了,对应位0-1翻转 			
;;;16750  				stBlinkCB.uniLcd[eName].param.bPreOnOffControl = stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16751  				stBlinkCB.uniLcd[eName].param.bOnOffControl = ~stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16752  			}
;;;16753  			
;;;16754  			break;
;;;16755  
;;;16756  		case BLINK_MODE_BLINK_HIGH_SPEED:
;;;16757  			
;;;16758  			// 对应模式的时间未到, 则继续扫描
;;;16759  			if (TRUE == DISPLAY_BLINK_CheckTimeOut( BLINK_MODE_BLINK_HIGH_SPEED_TIME, s_ulStartTimeHighSpeed ))
;;;16760  			{				
;;;16761  				s_ulStartTimeHighSpeed = DISPLAY_BLINK_GetCurTime();				
;;;16762  
;;;16763  				// 对应模式的时间到了,对应位0-1翻转 			
;;;16764  				stBlinkCB.uniLcd[eName].param.bPreOnOffControl = stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16765  				stBlinkCB.uniLcd[eName].param.bOnOffControl = ~stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16766  			}
;;;16767  			
;;;16768  			break;
;;;16769  
;;;16770  		case BLINK_MODE_BLINK_SUPER_SPEED:
;;;16771  
;;;16772  			// 对应模式的时间未到, 则继续扫描
;;;16773  			if (TRUE == DISPLAY_BLINK_CheckTimeOut( BLINK_MODE_BLINK_SUPER_SPEED_TIME, s_ulStartTimeSuperSpeed ))
;;;16774  			{				
;;;16775  				s_ulStartTimeSuperSpeed = DISPLAY_BLINK_GetCurTime();				
;;;16776  
;;;16777  				// 对应模式的时间到了,对应位0-1翻转 			
;;;16778  				stBlinkCB.uniLcd[eName].param.bPreOnOffControl = stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16779  				stBlinkCB.uniLcd[eName].param.bOnOffControl = ~stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16780  			}
;;;16781  			
;;;16782  			break;
;;;16783  
;;;16784  		case BLINK_MODE_BLINK_FLASH_1_10:
;;;16785  
;;;16786  			// 对应模式的时间未到, 则继续扫描
;;;16787  			if (TRUE == DISPLAY_BLINK_CheckTimeOut( s_ulWaitTime_1_10, s_ulStartTime_1_10 ))
;;;16788  			{				
;;;16789  				s_ulStartTime_1_10 = DISPLAY_BLINK_GetCurTime();
;;;16790  				
;;;16791  				s_ulWaitTime_1_10 = ( BLINK_MODE_BLINK_FLASH_1_10_TIME == s_ulWaitTime_1_10 ) 
;;;16792  									? (1000 - BLINK_MODE_BLINK_FLASH_1_10_TIME)
;;;16793  									: BLINK_MODE_BLINK_FLASH_1_10_TIME;
;;;16794  				
;;;16795  				// 对应模式的时间到了,对应位0-1翻转 			
;;;16796  				stBlinkCB.uniLcd[eName].param.bPreOnOffControl = stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16797  				stBlinkCB.uniLcd[eName].param.bOnOffControl = ( BLINK_MODE_BLINK_FLASH_1_10_TIME == s_ulWaitTime_1_10 ) 
;;;16798  															? 1
;;;16799  															: 0;
;;;16800  			}
;;;16801  							
;;;16802  			break;
;;;16803  
;;;16804  		case BLINK_MODE_BLINK_FLASH_9_10:
;;;16805  
;;;16806  			// 对应模式的时间未到, 则继续扫描
;;;16807  			if (TRUE == DISPLAY_BLINK_CheckTimeOut( s_ulWaitTime_3_4, s_ulStartTime_3_4 ))
;;;16808  			{				
;;;16809  				s_ulStartTime_3_4 = DISPLAY_BLINK_GetCurTime();
;;;16810  				
;;;16811  				s_ulWaitTime_3_4 = ( BLINK_MODE_BLINK_FLASH_3_4_TIME == s_ulWaitTime_3_4 ) 
;;;16812  									? (1000 - BLINK_MODE_BLINK_FLASH_3_4_TIME)
;;;16813  									: BLINK_MODE_BLINK_FLASH_3_4_TIME;
;;;16814  				
;;;16815  				// 对应模式的时间到了,对应位0-1翻转 			
;;;16816  				stBlinkCB.uniLcd[eName].param.bPreOnOffControl = stBlinkCB.uniLcd[eName].param.bOnOffControl;
;;;16817  				stBlinkCB.uniLcd[eName].param.bOnOffControl = ( BLINK_MODE_BLINK_FLASH_3_4_TIME == s_ulWaitTime_3_4 ) 
;;;16818  															? 1
;;;16819  															: 0;
;;;16820  			}
;;;16821  							
;;;16822  			break;
;;;16823  
;;;16824  		default:			
;;;16825  			break;
;;;16826  
;;;16827  	}
;;;16828  
;;;16829  }
00002c  bd70              POP      {r4-r6,pc}
00002e  4601              MOV      r1,r0                 ;16736
000030  f3600141          BFI      r1,r0,#1,#1           ;16736
000034  f0410001          ORR      r0,r1,#1              ;16737
000038  5528              STRB     r0,[r5,r4]            ;16737
                  |L5.58|
00003a  bd70              POP      {r4-r6,pc}
00003c  f44f707a          MOV      r0,#0x3e8             ;16745
000040  6831              LDR      r1,[r6,#0]            ;16745  ; s_ulStartTimeLowSpeed
000042  f7fffffe          BL       DISPLAY_BLINK_CheckTimeOut
000046  2801              CMP      r0,#1                 ;16745
000048  d1f7              BNE      |L5.58|
00004a  f7fffffe          BL       DISPLAY_BLINK_GetCurTime
00004e  6030              STR      r0,[r6,#0]            ;16747  ; s_ulStartTimeLowSpeed
000050  5d29              LDRB     r1,[r5,r4]            ;16750
000052  4608              MOV      r0,r1                 ;16750
000054  f3610041          BFI      r0,r1,#1,#1           ;16750
000058  43c1              MVNS     r1,r0                 ;16751
00005a  f3610000          BFI      r0,r1,#0,#1           ;16751
00005e  5528              STRB     r0,[r5,r4]            ;16751
                  |L5.96|
000060  bd70              POP      {r4-r6,pc}
000062  f44f70fa          MOV      r0,#0x1f4             ;16759
000066  6871              LDR      r1,[r6,#4]            ;16759  ; s_ulStartTimeHighSpeed
000068  f7fffffe          BL       DISPLAY_BLINK_CheckTimeOut
00006c  2801              CMP      r0,#1                 ;16759
00006e  d1f7              BNE      |L5.96|
000070  f7fffffe          BL       DISPLAY_BLINK_GetCurTime
000074  6070              STR      r0,[r6,#4]            ;16761  ; s_ulStartTimeHighSpeed
000076  5d29              LDRB     r1,[r5,r4]            ;16764
000078  4608              MOV      r0,r1                 ;16764
00007a  f3610041          BFI      r0,r1,#1,#1           ;16764
00007e  43c1              MVNS     r1,r0                 ;16765
000080  f3610000          BFI      r0,r1,#0,#1           ;16765
000084  5528              STRB     r0,[r5,r4]            ;16765
                  |L5.134|
000086  bd70              POP      {r4-r6,pc}
000088  20fa              MOVS     r0,#0xfa              ;16773
00008a  68b1              LDR      r1,[r6,#8]            ;16773  ; s_ulStartTimeSuperSpeed
00008c  f7fffffe          BL       DISPLAY_BLINK_CheckTimeOut
000090  2801              CMP      r0,#1                 ;16773
000092  d1f8              BNE      |L5.134|
000094  f7fffffe          BL       DISPLAY_BLINK_GetCurTime
000098  60b0              STR      r0,[r6,#8]            ;16775  ; s_ulStartTimeSuperSpeed
00009a  5d28              LDRB     r0,[r5,r4]            ;16778
00009c  4601              MOV      r1,r0                 ;16778
00009e  f3600141          BFI      r1,r0,#1,#1           ;16778
0000a2  4608              MOV      r0,r1                 ;16778
0000a4  43c1              MVNS     r1,r0                 ;16779
0000a6  f3610000          BFI      r0,r1,#0,#1           ;16779
0000aa  5528              STRB     r0,[r5,r4]            ;16779
                  |L5.172|
0000ac  bd70              POP      {r4-r6,pc}
0000ae  e9d61003          LDRD     r1,r0,[r6,#0xc]       ;16787
0000b2  f7fffffe          BL       DISPLAY_BLINK_CheckTimeOut
0000b6  2801              CMP      r0,#1                 ;16787
0000b8  d1f8              BNE      |L5.172|
0000ba  f7fffffe          BL       DISPLAY_BLINK_GetCurTime
0000be  60f0              STR      r0,[r6,#0xc]          ;16789  ; s_ulStartTime_1_10
0000c0  6930              LDR      r0,[r6,#0x10]         ;16791  ; s_ulWaitTime_1_10
0000c2  2864              CMP      r0,#0x64              ;16791
0000c4  d00c              BEQ      |L5.224|
0000c6  2064              MOVS     r0,#0x64              ;16793
                  |L5.200|
0000c8  6130              STR      r0,[r6,#0x10]         ;16793  ; s_ulWaitTime_1_10
0000ca  5d2a              LDRB     r2,[r5,r4]            ;16796
0000cc  4611              MOV      r1,r2                 ;16796
0000ce  f3620141          BFI      r1,r2,#1,#1           ;16796
0000d2  5529              STRB     r1,[r5,r4]            ;16796
0000d4  2864              CMP      r0,#0x64              ;16797
0000d6  d006              BEQ      |L5.230|
0000d8  f0210001          BIC      r0,r1,#1              ;16797
                  |L5.220|
0000dc  5528              STRB     r0,[r5,r4]            ;16797
                  |L5.222|
0000de  bd70              POP      {r4-r6,pc}
                  |L5.224|
0000e0  f44f7061          MOV      r0,#0x384             ;16792
0000e4  e7f0              B        |L5.200|
                  |L5.230|
0000e6  f0410001          ORR      r0,r1,#1              ;16797
0000ea  e7f7              B        |L5.220|
0000ec  e9d61005          LDRD     r1,r0,[r6,#0x14]      ;16807
0000f0  f7fffffe          BL       DISPLAY_BLINK_CheckTimeOut
0000f4  2801              CMP      r0,#1                 ;16807
0000f6  d1f2              BNE      |L5.222|
0000f8  f7fffffe          BL       DISPLAY_BLINK_GetCurTime
0000fc  6170              STR      r0,[r6,#0x14]         ;16809  ; s_ulStartTime_3_4
0000fe  69b0              LDR      r0,[r6,#0x18]         ;16811  ; s_ulWaitTime_3_4
000100  f24023ee          MOV      r3,#0x2ee             ;16811
000104  4298              CMP      r0,r3                 ;16811
000106  d101              BNE      |L5.268|
000108  20fa              MOVS     r0,#0xfa              ;16812
00010a  e000              B        |L5.270|
                  |L5.268|
00010c  4618              MOV      r0,r3                 ;16813
                  |L5.270|
00010e  61b0              STR      r0,[r6,#0x18]         ;16813  ; s_ulWaitTime_3_4
000110  5d2a              LDRB     r2,[r5,r4]            ;16816
000112  4611              MOV      r1,r2                 ;16816
000114  f3620141          BFI      r1,r2,#1,#1           ;16816
000118  5529              STRB     r1,[r5,r4]            ;16816
00011a  4298              CMP      r0,r3                 ;16817
00011c  d102              BNE      |L5.292|
00011e  f0410001          ORR      r0,r1,#1              ;16817
000122  e001              B        |L5.296|
                  |L5.292|
000124  f0210001          BIC      r0,r1,#1              ;16817
                  |L5.296|
000128  5528              STRB     r0,[r5,r4]            ;16817
00012a  bd70              POP      {r4-r6,pc}
;;;16830  
                          ENDP

                  |L5.300|
                          DCD      ||.bss||+0xb64
                  |L5.304|
                          DCD      ||.data||

                          AREA ||i.DISPLAY_BLINK_OutPutControl||, CODE, READONLY, ALIGN=2

                  DISPLAY_BLINK_OutPutControl PROC
;;;16842  **********************************************************************/
;;;16843  void DISPLAY_BLINK_OutPutControl(void)
000000  b570              PUSH     {r4-r6,lr}
;;;16844  {
;;;16845  	uint8 ucPreState 	 = 0;
;;;16846  	uint8 ucCurState 	 = 0;
;;;16847  	uint8 i = 0;
000002  2400              MOVS     r4,#0
;;;16848  
;;;16849  	for ( i = 0; i < BLINK_NAME_MAX; i++)
;;;16850  	{
;;;16851  		// 闪烁频率控制
;;;16852  		DISPLAY_BLINK_OnOffControl( (BLINK_NAME_E)i );
;;;16853  
;;;16854  		ucPreState = stBlinkCB.uniLcd[i].param.bPreOnOffControl;
000004  4d18              LDR      r5,|L6.104|
                  |L6.6|
000006  4620              MOV      r0,r4                 ;16852
000008  f7fffffe          BL       DISPLAY_BLINK_OnOffControl
00000c  5d29              LDRB     r1,[r5,r4]
00000e  f3c10240          UBFX     r2,r1,#1,#1
;;;16855  		ucCurState = stBlinkCB.uniLcd[i].param.bOnOffControl;
000012  f0010001          AND      r0,r1,#1
;;;16856  		
;;;16857  		// 状态没有发生改变，直接返回
;;;16858  		CHECK_PARAM_SAME_CONTINUE( ucCurState, ucPreState );
000016  4290              CMP      r0,r2
000018  d021              BEQ      |L6.94|
;;;16859  		
;;;16860  		// 更新上一次状态，避免下次再进来
;;;16861  		stBlinkCB.uniLcd[i].param.bPreOnOffControl = ucCurState;
00001a  f3600141          BFI      r1,r0,#1,#1
00001e  5529              STRB     r1,[r5,r4]
;;;16862  
;;;16863  		// ■■ 单元状态变化，执行相应的动作，以下根据实际情况修改 ■■
;;;16864  		switch ( (BLINK_NAME_E)i )
000020  2c08              CMP      r4,#8
000022  d21c              BCS      |L6.94|
000024  e8dff004          TBB      [pc,r4]
000028  04070a0d          DCB      0x04,0x07,0x0a,0x0d
00002c  10131619          DCB      0x10,0x13,0x16,0x19
;;;16865  		{
;;;16866  			case BLINK_NAME_SET_YEAR:
;;;16867  				
;;;16868  				DISPLAY_DrawMenuSetDateYearBlink(ucCurState);
000030  f7fffffe          BL       DISPLAY_DrawMenuSetDateYearBlink
;;;16869  					
;;;16870  				break;
000034  e013              B        |L6.94|
;;;16871  				
;;;16872  			case BLINK_NAME_SET_MONTH:
;;;16873  				
;;;16874  				DISPLAY_DrawMenuSetDateMonthBlink(ucCurState);
000036  f7fffffe          BL       DISPLAY_DrawMenuSetDateMonthBlink
;;;16875  					
;;;16876  				break;
00003a  e010              B        |L6.94|
;;;16877  				
;;;16878  			case BLINK_NAME_SET_DAY:
;;;16879  			
;;;16880  				DISPLAY_DrawMenuSetDateDayBlink(ucCurState);
00003c  f7fffffe          BL       DISPLAY_DrawMenuSetDateDayBlink
;;;16881  				
;;;16882  			break;
000040  e00d              B        |L6.94|
;;;16883  
;;;16884  
;;;16885  			case BLINK_NAME_SET_HOUR:
;;;16886  				
;;;16887  				DISPLAY_DrawMenuSetTimeHourBlink(ucCurState);
000042  f7fffffe          BL       DISPLAY_DrawMenuSetTimeHourBlink
;;;16888  					
;;;16889  				break;
000046  e00a              B        |L6.94|
;;;16890  				
;;;16891  			case BLINK_NAME_SET_MINUTE:
;;;16892  				
;;;16893  				DISPLAY_DrawMenuSetTimeMinuteBlink(ucCurState);
000048  f7fffffe          BL       DISPLAY_DrawMenuSetTimeMinuteBlink
;;;16894  				
;;;16895  				break;
00004c  e007              B        |L6.94|
;;;16896  
;;;16897  			case BLINK_NAME_CALL:
;;;16898  				
;;;16899  				DISPLAY_DrawShowCallBlink(ucCurState);
00004e  f7fffffe          BL       DISPLAY_DrawShowCallBlink
;;;16900  				
;;;16901  				break;
000052  e004              B        |L6.94|
;;;16902  
;;;16903  			case BLINK_NAME_LOW_BATTERY:
;;;16904  				
;;;16905  				DISPLAY_DrawShowBatteryFrameBlink(ucCurState);
000054  f7fffffe          BL       DISPLAY_DrawShowBatteryFrameBlink
;;;16906  				
;;;16907  				break;
000058  e001              B        |L6.94|
;;;16908  			
;;;16909  			case BLINK_NAME_RIDING_TURN:
;;;16910  
;;;16911  				DISPLAY_DrawRidingTurnBlink(ucCurState);
00005a  f7fffffe          BL       DISPLAY_DrawRidingTurnBlink
                  |L6.94|
00005e  1c64              ADDS     r4,r4,#1              ;16849
000060  b2e4              UXTB     r4,r4                 ;16849
000062  2c08              CMP      r4,#8                 ;16849
000064  d3cf              BCC      |L6.6|
;;;16912  				break;
;;;16913  
;;;16914  			default:
;;;16915  				break;
;;;16916  		}
;;;16917  	}
;;;16918  }
000066  bd70              POP      {r4-r6,pc}
;;;16919  
                          ENDP

                  |L6.104|
                          DCD      ||.bss||+0xb64

                          AREA ||i.DISPLAY_ChooseMenuAdvancedPassword||, CODE, READONLY, ALIGN=2

                  DISPLAY_ChooseMenuAdvancedPassword PROC
;;;12225  // 设置选择高级菜单密码
;;;12226  void DISPLAY_ChooseMenuAdvancedPassword(uint32 param)
000000  4809              LDR      r0,|L7.40|
;;;12227  {
;;;12228  	switch (displayStateCB.menu.advanced.cursor)
000002  f8900b4a          LDRB     r0,[r0,#0xb4a]  ; displayStateCB
000006  2803              CMP      r0,#3
000008  d004              BEQ      |L7.20|
00000a  2804              CMP      r0,#4
00000c  d109              BNE      |L7.34|
;;;12229  	{
;;;12230  		case 3:
;;;12231  			paramCB.nvm.param.protocol.menuPasswordSwitch = !paramCB.nvm.param.protocol.menuPasswordSwitch;
;;;12232  			break;
;;;12233  
;;;12234  		case 4:
;;;12235  			STATE_EnterState(STATE_MENU_ADV_MENU_SET_PASSWORD);
00000e  2026              MOVS     r0,#0x26
000010  f7ffbffe          B.W      STATE_EnterState
                  |L7.20|
000014  4905              LDR      r1,|L7.44|
000016  f89102cd          LDRB     r0,[r1,#0x2cd]        ;12231  ; paramCB
00001a  b118              CBZ      r0,|L7.36|
00001c  2000              MOVS     r0,#0                 ;12231
                  |L7.30|
00001e  f88102cd          STRB     r0,[r1,#0x2cd]        ;12231
                  |L7.34|
;;;12236  			break;
;;;12237  
;;;12238  		default:
;;;12239  			break;
;;;12240  	}
;;;12241  }
000022  4770              BX       lr
                  |L7.36|
000024  2001              MOVS     r0,#1                 ;12231
000026  e7fa              B        |L7.30|
;;;12242  
                          ENDP

                  |L7.40|
                          DCD      ||.bss||
                  |L7.44|
                          DCD      paramCB

                          AREA ||i.DISPLAY_ChooseMenuAdvancedPasswordNum||, CODE, READONLY, ALIGN=2

                  DISPLAY_ChooseMenuAdvancedPasswordNum PROC
;;;12243  // 选择高级菜单密码
;;;12244  void DISPLAY_ChooseMenuAdvancedPasswordNum(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;12245  {
;;;12246  	// +
;;;12247  	if (DISPLAY_MENU_TUNE_PREVIOUS == param)
;;;12248  	{
;;;12249  		if (3 == displayStateCB.menu.advanced.cursor)
000002  4a0b              LDR      r2,|L8.48|
000004  2303              MOVS     r3,#3
;;;12250  		{
;;;12251  			displayStateCB.menu.advanced.cursor = 4;
000006  2404              MOVS     r4,#4
000008  f8921b4a          LDRB     r1,[r2,#0xb4a]        ;12249
00000c  2801              CMP      r0,#1                 ;12247
00000e  d004              BEQ      |L8.26|
;;;12252  		}
;;;12253  		else
;;;12254  		{
;;;12255  			displayStateCB.menu.advanced.cursor = 3;
;;;12256  		}
;;;12257  	}
;;;12258  	else
;;;12259  	{
;;;12260  		if (3 == displayStateCB.menu.advanced.cursor)
000010  2903              CMP      r1,#3
000012  d00a              BEQ      |L8.42|
;;;12261  		{
;;;12262  			displayStateCB.menu.advanced.cursor = 4;
;;;12263  		}
;;;12264  		else
;;;12265  		{
;;;12266  			displayStateCB.menu.advanced.cursor = 3;
000014  f8823b4a          STRB     r3,[r2,#0xb4a]
;;;12267  		}
;;;12268  	}
;;;12269  }
000018  bd10              POP      {r4,pc}
                  |L8.26|
00001a  2903              CMP      r1,#3                 ;12249
00001c  d002              BEQ      |L8.36|
00001e  f8823b4a          STRB     r3,[r2,#0xb4a]        ;12255
000022  bd10              POP      {r4,pc}
                  |L8.36|
000024  f8824b4a          STRB     r4,[r2,#0xb4a]        ;12251
000028  bd10              POP      {r4,pc}
                  |L8.42|
00002a  f8824b4a          STRB     r4,[r2,#0xb4a]        ;12262
00002e  bd10              POP      {r4,pc}
;;;12270  
                          ENDP

                  |L8.48|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_CommonAssistSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonAssistSelect PROC
;;;14610  // 助力档选项
;;;14611  void DISPLAY_CommonAssistSelect(uint32 bIsAdd)
000000  b570              PUSH     {r4-r6,lr}
;;;14612  {
000002  4605              MOV      r5,r0
;;;14613  	uint16 uwAssist = PARAM_GetAssistLevel();	
000004  f7fffffe          BL       PARAM_GetAssistLevel
;;;14614  	uint16 uwAssistMax = PARAM_GetMaxAssist();
000008  4c1c              LDR      r4,|L9.124|
00000a  f894231a          LDRB     r2,[r4,#0x31a]  ; paramCB
;;;14615  	
;;;14616  	if (bIsAdd)
00000e  b16d              CBZ      r5,|L9.44|
;;;14617  	{
;;;14618  		// 拦截长按推车助力后+键第一次弹起的消息
;;;14619  		if (keyMsgCB.addKeyInvalidRequest)
000010  491b              LDR      r1,|L9.128|
000012  f89130ff          LDRB     r3,[r1,#0xff]  ; keyMsgCB
000016  b11b              CBZ      r3,|L9.32|
;;;14620  		{
;;;14621  			keyMsgCB.addKeyInvalidRequest = FALSE;
000018  2000              MOVS     r0,#0
00001a  f88100ff          STRB     r0,[r1,#0xff]
                  |L9.30|
;;;14622  			return;
;;;14623  		}
;;;14624  		
;;;14625  		uwAssist ++;
;;;14626  		LIMIT_TO_MAX(uwAssist, uwAssistMax);		
;;;14627  	}
;;;14628  	else
;;;14629  	{
;;;14630  		// 当前为p档，则关闭p档，并拦截按键释放的消息
;;;14631  		if (PARAM_IsPushAssistOn())
;;;14632  		{
;;;14633  			DISPLAY_CommonPushAssistOnOff(FALSE);
;;;14634  
;;;14635  			return;
;;;14636  		}
;;;14637  		
;;;14638  		CHECK_PARAM_SAME_RETURN(ASSIST_0, uwAssist);
;;;14639  		uwAssist --;		
;;;14640  	}
;;;14641  
;;;14642  	// 蓝牙连接时，走蓝牙档位通道
;;;14643  	if(PARAM_GetBleConnectState())
;;;14644  	{
;;;14645  		// 蓝牙上传档位消息
;;;14646  		BLE_PROTOCOL_SendCmdControlAck(ASSIST, 0x00, bIsAdd);
;;;14647  	}
;;;14648  	else
;;;14649  	{
;;;14650  		//上传蓝牙档位消息里面设置的档位
;;;14651  		PARAM_SetAssistLevel((ASSIST_ID_E)uwAssist);
;;;14652  	}
;;;14653  }
00001e  bd70              POP      {r4-r6,pc}
                  |L9.32|
000020  1c40              ADDS     r0,r0,#1              ;14625
000022  b281              UXTH     r1,r0                 ;14625
000024  4291              CMP      r1,r2                 ;14626
000026  d90d              BLS      |L9.68|
000028  4611              MOV      r1,r2                 ;14626
00002a  e00b              B        |L9.68|
                  |L9.44|
00002c  f89411ff          LDRB     r1,[r4,#0x1ff]        ;14631  ; paramCB
000030  b121              CBZ      r1,|L9.60|
000032  e8bd4070          POP      {r4-r6,lr}            ;14633
000036  2000              MOVS     r0,#0                 ;14633
000038  f7ffbffe          B.W      DISPLAY_CommonPushAssistOnOff
                  |L9.60|
00003c  2800              CMP      r0,#0                 ;14638
00003e  d0ee              BEQ      |L9.30|
000040  1e40              SUBS     r0,r0,#1              ;14639
000042  b281              UXTH     r1,r0                 ;14639
                  |L9.68|
000044  f8940203          LDRB     r0,[r4,#0x203]        ;14643  ; paramCB
000048  b130              CBZ      r0,|L9.88|
00004a  b2ea              UXTB     r2,r5                 ;14646
00004c  e8bd4070          POP      {r4-r6,lr}            ;14646
000050  2100              MOVS     r1,#0                 ;14646
000052  2005              MOVS     r0,#5                 ;14646
000054  f7ffbffe          B.W      BLE_PROTOCOL_SendCmdControlAck
                  |L9.88|
000058  f8841228          STRB     r1,[r4,#0x228]        ;14651
00005c  2001              MOVS     r0,#1                 ;14651
00005e  f7fffffe          BL       UART_PROTOCOL_SetTxAtOnceRequest
000062  2001              MOVS     r0,#1                 ;14651
000064  f7fffffe          BL       UART_PROTOCOL1_SetTxAtOnceRequest
000068  2001              MOVS     r0,#1                 ;14651
00006a  f7fffffe          BL       UART_PROTOCOL2_SetTxAtOnceRequest
00006e  2001              MOVS     r0,#1                 ;14651
000070  f7fffffe          BL       UART_PROTOCOL3_SetTxAtOnceRequest
000074  2001              MOVS     r0,#1                 ;14651
000076  f8840255          STRB     r0,[r4,#0x255]        ;14651
00007a  bd70              POP      {r4-r6,pc}
;;;14654  
                          ENDP

                  |L9.124|
                          DCD      paramCB
                  |L9.128|
                          DCD      keyMsgCB

                          AREA ||i.DISPLAY_CommonCallerStateSet||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonCallerStateSet PROC
;;;14146  
;;;14147  void DISPLAY_CommonCallerStateSet(uint32 param)
000000  4902              LDR      r1,|L10.12|
;;;14148  {
;;;14149  	PARAM_SetCallerIgnoreState(FALSE);
000002  2000              MOVS     r0,#0
000004  f881020c          STRB     r0,[r1,#0x20c]
;;;14150  }
000008  4770              BX       lr
;;;14151  
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      paramCB

                          AREA ||i.DISPLAY_CommonLightSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonLightSelect PROC
;;;14666  **********************************************************************/
;;;14667  void DISPLAY_CommonLightSelect(uint32 param)
000000  b570              PUSH     {r4-r6,lr}
;;;14668  {
;;;14669  	BOOL bLigth = (BOOL)(!(PARAM_GetLightSwitch()));
000002  4d17              LDR      r5,|L11.96|
000004  f8950202          LDRB     r0,[r5,#0x202]  ; paramCB
000008  2800              CMP      r0,#0
00000a  d016              BEQ      |L11.58|
00000c  2400              MOVS     r4,#0
                  |L11.14|
;;;14670  
;;;14671  
;;;14672  	PARAM_SetLightSwitch(bLigth);	
00000e  f8854202          STRB     r4,[r5,#0x202]
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       UART_PROTOCOL_SetTxAtOnceRequest
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       UART_PROTOCOL1_SetTxAtOnceRequest
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       UART_PROTOCOL2_SetTxAtOnceRequest
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       UART_PROTOCOL3_SetTxAtOnceRequest
;;;14673  
;;;14674  	paramCB.runtime.headAutoLight = FALSE;
00002a  2000              MOVS     r0,#0
00002c  f8850257          STRB     r0,[r5,#0x257]
;;;14675  
;;;14676  	// 大灯开启后，屏幕亮度变为最暗
;;;14677  	if (bLigth)
000030  b12c              CBZ      r4,|L11.62|
;;;14678  	{
;;;14679  		//LED_HeadLight(1);
;;;14680  		
;;;14681  		BACK_LIGHT_Start(BACK_LIGHT_LEVEL_20_100);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       BACK_LIGHT_Start
000038  e005              B        |L11.70|
                  |L11.58|
00003a  2401              MOVS     r4,#1                 ;14669
00003c  e7e7              B        |L11.14|
                  |L11.62|
;;;14682  	}
;;;14683  	// 大灯关闭后，恢复之前的背光等级
;;;14684  	else
;;;14685  	{
;;;14686  		//LED_HeadLight(0);
;;;14687  		
;;;14688  		BACK_LIGHT_Start( (BACK_LIGHT_LEVEL_E)PARAM_GetBrightness() );
00003e  f8950320          LDRB     r0,[r5,#0x320]  ; paramCB
000042  f7fffffe          BL       BACK_LIGHT_Start
                  |L11.70|
;;;14689  	}
;;;14690  
;;;14691  	if(PARAM_GetBleConnectState())
000046  f8950203          LDRB     r0,[r5,#0x203]  ; paramCB
00004a  2800              CMP      r0,#0
00004c  d006              BEQ      |L11.92|
;;;14692  	{
;;;14693  		// 蓝牙上传大灯状态改变信息
;;;14694  		BLE_PROTOCOL_SendCmdControlAck(LIGHT, 0x00, bLigth);
00004e  4622              MOV      r2,r4
000050  e8bd4070          POP      {r4-r6,lr}
000054  2100              MOVS     r1,#0
000056  2001              MOVS     r0,#1
000058  f7ffbffe          B.W      BLE_PROTOCOL_SendCmdControlAck
                  |L11.92|
;;;14695  	}
;;;14696  }
00005c  bd70              POP      {r4-r6,pc}
;;;14697  
                          ENDP

00005e  0000              DCW      0x0000
                  |L11.96|
                          DCD      paramCB

                          AREA ||i.DISPLAY_CommonMusicModeSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonMusicModeSelect PROC
;;;13945  // 音乐模式选择
;;;13946  void DISPLAY_CommonMusicModeSelect(uint32 param)
000000  b570              PUSH     {r4-r6,lr}
;;;13947  {
000002  4605              MOV      r5,r0
;;;13948  	if(PARAM_GetHelmetConnectState())
000004  4c10              LDR      r4,|L12.72|
;;;13949  	{
;;;13950  		// 查询头盔音乐信息
;;;13951  		BLE_HOST_PROTOCOL_SendCmdGetHeadInfoPhone(2);
;;;13952  		
;;;13953  		if (param)
;;;13954  		{
;;;13955  			paramCB.runtime.musicPlayMode = TRUE;
;;;13956  
;;;13957  			DISPLAY_ResumeValue(DISPLAY_COMMON_MUSIC_PLAY);
;;;13958  				
;;;13959  			// 进入音乐模式操作界面
;;;13960  			STATE_EnterState(stateCB.state);
000006  4e11              LDR      r6,|L12.76|
000008  f894020d          LDRB     r0,[r4,#0x20d]        ;13948  ; paramCB
00000c  2800              CMP      r0,#0                 ;13948
00000e  d00c              BEQ      |L12.42|
000010  2002              MOVS     r0,#2                 ;13951
000012  f7fffffe          BL       BLE_HOST_PROTOCOL_SendCmdGetHeadInfoPhone
000016  b145              CBZ      r5,|L12.42|
000018  2001              MOVS     r0,#1                 ;13955
00001a  f884020a          STRB     r0,[r4,#0x20a]        ;13955
00001e  2018              MOVS     r0,#0x18              ;13957
000020  f7fffffe          BL       DISPLAY_ResumeValue
000024  7830              LDRB     r0,[r6,#0]  ; stateCB
000026  f7fffffe          BL       STATE_EnterState
                  |L12.42|
;;;13961  		}
;;;13962  	}	
;;;13963  
;;;13964  	if (!param)
00002a  2d00              CMP      r5,#0
00002c  d10a              BNE      |L12.68|
;;;13965  	{
;;;13966  		paramCB.runtime.musicPlayMode = FALSE;
00002e  2000              MOVS     r0,#0
000030  f884020a          STRB     r0,[r4,#0x20a]
;;;13967  
;;;13968  		DISPLAY_ResumeValue(DISPLAY_COMMON_TIME);
000034  200a              MOVS     r0,#0xa
000036  f7fffffe          BL       DISPLAY_ResumeValue
;;;13969  
;;;13970  		// 退出音乐模式操作界面
;;;13971  		STATE_EnterState(stateCB.state);
00003a  7830              LDRB     r0,[r6,#0]  ; stateCB
00003c  e8bd4070          POP      {r4-r6,lr}
000040  f7ffbffe          B.W      STATE_EnterState
                  |L12.68|
;;;13972  	}
;;;13973  }
000044  bd70              POP      {r4-r6,pc}
;;;13974  
                          ENDP

000046  0000              DCW      0x0000
                  |L12.72|
                          DCD      paramCB
                  |L12.76|
                          DCD      stateCB

                          AREA ||i.DISPLAY_CommonMusicNameSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonMusicNameSelect PROC
;;;14096  // 音乐上一首下一首控制
;;;14097  void DISPLAY_CommonMusicNameSelect(uint32 param)
000000  4906              LDR      r1,|L13.28|
;;;14098  {
;;;14099  	// 头盔连接
;;;14100  	if (PARAM_GetHelmetConnectState())
000002  f891120d          LDRB     r1,[r1,#0x20d]  ; paramCB
000006  2900              CMP      r1,#0
000008  d006              BEQ      |L13.24|
;;;14101  	{
;;;14102  		if (param)
00000a  b110              CBZ      r0,|L13.18|
;;;14103  		{
;;;14104  			BLE_HOST_PROTOCOL_SendCmdControlMp3(BLE_MUSIC_UP);	// 上一首
00000c  2003              MOVS     r0,#3
00000e  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdControlMp3
                  |L13.18|
;;;14105  		}
;;;14106  		else
;;;14107  		{
;;;14108  			BLE_HOST_PROTOCOL_SendCmdControlMp3(BLE_MUSIC_NEXT);	// 下一首
000012  2004              MOVS     r0,#4
000014  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdControlMp3
                  |L13.24|
;;;14109  		}
;;;14110  	}	
;;;14111  }
000018  4770              BX       lr
;;;14112  
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      paramCB

                          AREA ||i.DISPLAY_CommonMusicOnOffSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonMusicOnOffSelect PROC
;;;14079  // 音乐播放暂停控制
;;;14080  void DISPLAY_CommonMusicOnOffSelect(uint32 param)
000000  4807              LDR      r0,|L14.32|
;;;14081  {
;;;14082  	// 头盔连接
;;;14083  	if (PARAM_GetHelmetConnectState())
000002  f890120d          LDRB     r1,[r0,#0x20d]  ; paramCB
000006  2900              CMP      r1,#0
000008  d008              BEQ      |L14.28|
;;;14084  	{
;;;14085  		if (paramCB.runtime.musicState) // 判断当前播放状态，反向操作 0：暂停，1：播放
00000a  f8900213          LDRB     r0,[r0,#0x213]  ; paramCB
00000e  b110              CBZ      r0,|L14.22|
;;;14086  		{
;;;14087  			BLE_HOST_PROTOCOL_SendCmdControlMp3(BLE_MUSIC_PAUSE);	// 暂停
000010  2002              MOVS     r0,#2
000012  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdControlMp3
                  |L14.22|
;;;14088  		}
;;;14089  		else
;;;14090  		{
;;;14091  			BLE_HOST_PROTOCOL_SendCmdControlMp3(BLE_MUSIC_PLAY);// 播放
000016  2001              MOVS     r0,#1
000018  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdControlMp3
                  |L14.28|
;;;14092  		}
;;;14093  	}	
;;;14094  }
00001c  4770              BX       lr
;;;14095  
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      paramCB

                          AREA ||i.DISPLAY_CommonMusicVolumeSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonMusicVolumeSelect PROC
;;;14113  // 音乐音量控制
;;;14114  void DISPLAY_CommonMusicVolumeSelect(uint32 param)
000000  4906              LDR      r1,|L15.28|
;;;14115  {
;;;14116  	// 头盔连接
;;;14117  	if (PARAM_GetHelmetConnectState())
000002  f891120d          LDRB     r1,[r1,#0x20d]  ; paramCB
000006  2900              CMP      r1,#0
000008  d006              BEQ      |L15.24|
;;;14118  	{
;;;14119  		if (param)
00000a  b110              CBZ      r0,|L15.18|
;;;14120  		{
;;;14121  			BLE_HOST_PROTOCOL_SendCmdControlMp3(BLE_MUSIC_ADD);	// +音量
00000c  2008              MOVS     r0,#8
00000e  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdControlMp3
                  |L15.18|
;;;14122  		}
;;;14123  		else
;;;14124  		{
;;;14125  			BLE_HOST_PROTOCOL_SendCmdControlMp3(BLE_MUSIC_DEC);	// -音量
000012  2009              MOVS     r0,#9
000014  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdControlMp3
                  |L15.24|
;;;14126  		}
;;;14127  	}
;;;14128  }
000018  4770              BX       lr
;;;14129  
                          ENDP

00001a  0000              DCW      0x0000
                  |L15.28|
                          DCD      paramCB

                          AREA ||i.DISPLAY_CommonPhoneControlIgnore||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonPhoneControlIgnore PROC
;;;14152  // 来电界面操作控制
;;;14153  void DISPLAY_CommonPhoneControlIgnore(uint32 param)
000000  4903              LDR      r1,|L16.16|
;;;14154  {
;;;14155  	PARAM_SetCallerIgnoreState(TRUE);
000002  2001              MOVS     r0,#1
000004  f881020c          STRB     r0,[r1,#0x20c]
;;;14156  
;;;14157  	// 60S后自动清除标志
;;;14158  //	TIMER_AddTask(TIMER_ID_BLE_CONTROL,
;;;14159  //					60*1000,
;;;14160  //					DISPLAY_CommonCallerStateSet,
;;;14161  //					FALSE,
;;;14162  //					1,
;;;14163  //					ACTION_MODE_ADD_TO_QUEUE);	
;;;14164  
;;;14165  	STATE_EnterState(stateCB.preState);
000008  4802              LDR      r0,|L16.20|
00000a  7840              LDRB     r0,[r0,#1]  ; stateCB
00000c  f7ffbffe          B.W      STATE_EnterState
;;;14166  }
;;;14167  
                          ENDP

                  |L16.16|
                          DCD      paramCB
                  |L16.20|
                          DCD      stateCB

                          AREA ||i.DISPLAY_CommonPhoneControlSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonPhoneControlSelect PROC
;;;14130  // 来电界面操作控制
;;;14131  void DISPLAY_CommonPhoneControlSelect(uint32 param)
000000  4906              LDR      r1,|L17.28|
;;;14132  {
;;;14133  	// 头盔连接
;;;14134  	if (PARAM_GetHelmetConnectState())
000002  f891120d          LDRB     r1,[r1,#0x20d]  ; paramCB
000006  2900              CMP      r1,#0
000008  d006              BEQ      |L17.24|
;;;14135  	{
;;;14136  		if (param)
00000a  b110              CBZ      r0,|L17.18|
;;;14137  		{
;;;14138  			BLE_HOST_PROTOCOL_SendCmdControlPhone(TRUE);				// 接听
00000c  2001              MOVS     r0,#1
00000e  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdControlPhone
                  |L17.18|
;;;14139  		}
;;;14140  		else
;;;14141  		{
;;;14142  			BLE_HOST_PROTOCOL_SendCmdControlPhone(FALSE);			// 挂断
000012  2000              MOVS     r0,#0
000014  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdControlPhone
                  |L17.24|
;;;14143  		}
;;;14144  	}
;;;14145  }
000018  4770              BX       lr
;;;14146  
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      paramCB

                          AREA ||i.DISPLAY_CommonPushAssistOnOff||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonPushAssistOnOff PROC
;;;14554  // 打开或关闭推车助力功能
;;;14555  void DISPLAY_CommonPushAssistOnOff(uint32 onoff)
000000  b570              PUSH     {r4-r6,lr}
;;;14556  {
;;;14557  	// 判断有无图推车助力
;;;14558  	if (!PARAM_GetPushAssistSwitch())
000002  4c21              LDR      r4,|L18.136|
000004  f8941325          LDRB     r1,[r4,#0x325]  ; paramCB
000008  2900              CMP      r1,#0
00000a  d03c              BEQ      |L18.134|
;;;14559  	{
;;;14560  		return;
;;;14561  	}
;;;14562  	
;;;14563  	// 打开推车助力
;;;14564  	if (onoff)
;;;14565  	{
;;;14566  		PARAM_EnablePushAssist(TRUE);
;;;14567  
;;;14568  		// 注销所有按键服务
;;;14569  		KEYMSG_StopAllService();
;;;14570  
;;;14571  		// 置位+键推车助力后拦截标志
;;;14572  		keyMsgCB.addKeyInvalidRequest = TRUE;
00000c  4e1f              LDR      r6,|L18.140|
00000e  2501              MOVS     r5,#1                 ;14566
000010  b310              CBZ      r0,|L18.88|
000012  f88451ff          STRB     r5,[r4,#0x1ff]        ;14566
000016  2001              MOVS     r0,#1                 ;14566
000018  f7fffffe          BL       UART_PROTOCOL_SetTxAtOnceRequest
00001c  2001              MOVS     r0,#1                 ;14566
00001e  f7fffffe          BL       UART_PROTOCOL1_SetTxAtOnceRequest
000022  2001              MOVS     r0,#1                 ;14566
000024  f7fffffe          BL       UART_PROTOCOL2_SetTxAtOnceRequest
000028  2001              MOVS     r0,#1                 ;14566
00002a  f7fffffe          BL       UART_PROTOCOL3_SetTxAtOnceRequest
00002e  f7fffffe          BL       KEYMSG_StopAllService
000032  f88650ff          STRB     r5,[r6,#0xff]
;;;14573  
;;;14574  		// 清除-键释放消息屏蔽
;;;14575  		KEYMSG_ClearMaskRequest(KEY_NAME_DEC, KEY_MSG_UP);
000036  2101              MOVS     r1,#1
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       KEYMSG_ClearMaskRequest
;;;14576  		
;;;14577  		// -键释放，档位切换，或停止p档
;;;14578  		KEYMSG_RegisterMsgService(KEY_NAME_DEC, KEY_MSG_UP, DISPLAY_CommonAssistSelect, FALSE);
00003e  2300              MOVS     r3,#0
000040  4a13              LDR      r2,|L18.144|
000042  2101              MOVS     r1,#1
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       KEYMSG_RegisterMsgService
;;;14579  
;;;14580  		// M键长按关机
;;;14581  		KEYMSG_RegisterMsgService(KEY_NAME_KEYM_MCU, KEY_MSG_HOLD, STATE_EnterState, STATE_SHOW_POWER_OFF);
00004a  2307              MOVS     r3,#7
00004c  4a11              LDR      r2,|L18.148|
00004e  2102              MOVS     r1,#2
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       KEYMSG_RegisterMsgService
000056  e014              B        |L18.130|
                  |L18.88|
;;;14582  	}
;;;14583  	// 关闭推车助力
;;;14584  	else
;;;14585  	{
;;;14586  		
;;;14587  		// 置位+键推车助力后拦截标志
;;;14588  		keyMsgCB.addKeyInvalidRequest = FALSE;
000058  2000              MOVS     r0,#0
00005a  f88600ff          STRB     r0,[r6,#0xff]
;;;14589  		
;;;14590  		PARAM_EnablePushAssist(FALSE);
00005e  f88401ff          STRB     r0,[r4,#0x1ff]
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       UART_PROTOCOL_SetTxAtOnceRequest
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       UART_PROTOCOL1_SetTxAtOnceRequest
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       UART_PROTOCOL2_SetTxAtOnceRequest
000074  2001              MOVS     r0,#1
000076  f7fffffe          BL       UART_PROTOCOL3_SetTxAtOnceRequest
;;;14591  
;;;14592  		STATE_EnterState(stateCB.state);
00007a  4807              LDR      r0,|L18.152|
00007c  7800              LDRB     r0,[r0,#0]  ; stateCB
00007e  f7fffffe          BL       STATE_EnterState
                  |L18.130|
;;;14593  	}
;;;14594  	
;;;14595  	PARAM_SetCruiseSwitch(TRUE);
000082  f88451fd          STRB     r5,[r4,#0x1fd]
                  |L18.134|
;;;14596  }
000086  bd70              POP      {r4-r6,pc}
;;;14597  
                          ENDP

                  |L18.136|
                          DCD      paramCB
                  |L18.140|
                          DCD      keyMsgCB
                  |L18.144|
                          DCD      DISPLAY_CommonAssistSelect
                  |L18.148|
                          DCD      STATE_EnterState
                  |L18.152|
                          DCD      stateCB

                          AREA ||i.DISPLAY_CommonTimeCount||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonTimeCount PROC
;;;1663   **********************************************************************/
;;;1664   void DISPLAY_CommonTimeCount(uint32 param)
000000  4802              LDR      r0,|L19.12|
;;;1665   {
;;;1666   	// 闪烁记数
;;;1667   	stBlinkCB.ulCount++;
000002  6881              LDR      r1,[r0,#8]  ; stBlinkCB
000004  1c49              ADDS     r1,r1,#1
000006  6081              STR      r1,[r0,#8]  ; stBlinkCB
;;;1668   }
000008  4770              BX       lr
;;;1669   
                          ENDP

00000a  0000              DCW      0x0000
                  |L19.12|
                          DCD      ||.bss||+0xb64

                          AREA ||i.DISPLAY_CommonTurnSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonTurnSelect PROC
;;;14046  **********************************************************************/
;;;14047  void DISPLAY_CommonTurnSelect(uint32 param)
000000  490c              LDR      r1,|L20.52|
;;;14048  {
;;;14049  	// 头盔连接
;;;14050  	if (PARAM_GetHelmetConnectState())
000002  f891120d          LDRB     r1,[r1,#0x20d]  ; paramCB
000006  2900              CMP      r1,#0
000008  d013              BEQ      |L20.50|
00000a  490a              LDR      r1,|L20.52|
;;;14051  	{
;;;14052  		if (param)
;;;14053  		{
;;;14054  			// 左转向就关闭，开定时器是为了避免频繁的下发指令
;;;14055  			if (LEFT_TRUN == PARAM_GetTurnState())
00000c  f8911208          LDRB     r1,[r1,#0x208]
000010  b138              CBZ      r0,|L20.34|
000012  2901              CMP      r1,#1
000014  d002              BEQ      |L20.28|
;;;14056  			{
;;;14057  				BLE_HOST_PROTOCOL_SendCmdLeftTurnLight(FALSE);
;;;14058  			}
;;;14059  			else
;;;14060  			{
;;;14061  				BLE_HOST_PROTOCOL_SendCmdLeftTurnLight(TRUE);
000016  2001              MOVS     r0,#1
000018  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdLeftTurnLight
                  |L20.28|
00001c  2000              MOVS     r0,#0                 ;14057
00001e  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdLeftTurnLight
                  |L20.34|
;;;14062  			}
;;;14063  		}
;;;14064  		else
;;;14065  		{
;;;14066  			// 右转向就关闭
;;;14067  			if (RIGHT_TRUN == PARAM_GetTurnState())
000022  2902              CMP      r1,#2
000024  d002              BEQ      |L20.44|
;;;14068  			{
;;;14069  				BLE_HOST_PROTOCOL_SendCmdRightTurnLight(FALSE);
;;;14070  			}
;;;14071  			else
;;;14072  			{
;;;14073  				BLE_HOST_PROTOCOL_SendCmdRightTurnLight(TRUE);
000026  2001              MOVS     r0,#1
000028  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdRightTurnLight
                  |L20.44|
00002c  2000              MOVS     r0,#0                 ;14069
00002e  f7ffbffe          B.W      BLE_HOST_PROTOCOL_SendCmdRightTurnLight
                  |L20.50|
;;;14074  			}
;;;14075  		}
;;;14076  	}
;;;14077  }
000032  4770              BX       lr
;;;14078  
                          ENDP

                  |L20.52|
                          DCD      paramCB

                          AREA ||i.DISPLAY_CommonVideoSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonVideoSelect PROC
;;;13914  **********************************************************************/
;;;13915  void DISPLAY_CommonVideoSelect(uint32 param)
000000  4906              LDR      r1,|L21.28|
;;;13916  {
;;;13917  	BOOL bSwitch = (BOOL)!PARAM_GetVideoSwitch();
000002  f8912205          LDRB     r2,[r1,#0x205]  ; paramCB
;;;13918  	
;;;13919  	if(PARAM_GetBleConnectState())
000006  f8912203          LDRB     r2,[r1,#0x203]  ; paramCB
00000a  2a00              CMP      r2,#0
00000c  d004              BEQ      |L21.24|
;;;13920  	{
;;;13921  		if (param)
00000e  2800              CMP      r0,#0
000010  d002              BEQ      |L21.24|
;;;13922  		{
;;;13923  			paramCB.runtime.photoSwitch = 1;
000012  2001              MOVS     r0,#1
000014  f8810206          STRB     r0,[r1,#0x206]
                  |L21.24|
;;;13924  			// 拍照
;;;13925  //			TIMER_AddTask(TIMER_ID_BLE_CONTROL,
;;;13926  //					500,
;;;13927  //					BLE_PROTOCOL_SendCmdCyclingPic,
;;;13928  //					TRUE,
;;;13929  //					TIMER_LOOP_FOREVER,
;;;13930  //					ACTION_MODE_ADD_TO_QUEUE);	
;;;13931  		}
;;;13932  		else
;;;13933  		{
;;;13934  			// 录像
;;;13935  //			TIMER_AddTask(TIMER_ID_BLE_CONTROL,
;;;13936  //					500,
;;;13937  //					BLE_PROTOCOL_SendCmdCyclingVideo,
;;;13938  //					bSwitch,
;;;13939  //					TIMER_LOOP_FOREVER,
;;;13940  //					ACTION_MODE_ADD_TO_QUEUE);	
;;;13941  		}
;;;13942  	}
;;;13943  }
000018  4770              BX       lr
;;;13944  
                          ENDP

00001a  0000              DCW      0x0000
                  |L21.28|
                          DCD      paramCB

                          AREA ||i.DISPLAY_CommonVoiceSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_CommonVoiceSelect PROC
;;;13986  **********************************************************************/
;;;13987  void DISPLAY_CommonVoiceSelect(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;13988  {
;;;13989  	if(PARAM_GetBleConnectState())
000002  4912              LDR      r1,|L22.76|
000004  f8911203          LDRB     r1,[r1,#0x203]  ; paramCB
000008  2900              CMP      r1,#0
00000a  d01d              BEQ      |L22.72|
;;;13990  	{
;;;13991  		if (param)
00000c  b198              CBZ      r0,|L22.54|
;;;13992  		{
;;;13993  			// 开启麦克风
;;;13994  			BLE_PROTOCOL_SendCmdMicroPhone(TRUE);
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       BLE_PROTOCOL_SendCmdMicroPhone
;;;13995  
;;;13996  			/*
;;;13997  			TIMER_AddTask(TIMER_ID_BLE_CONTROL,
;;;13998  					500,
;;;13999  					BLE_PROTOCOL_SendCmdMicroPhone,
;;;14000  					TRUE,
;;;14001  					TIMER_LOOP_FOREVER,
;;;14002  					ACTION_MODE_ADD_TO_QUEUE);	
;;;14003  			*/
;;;14004  			
;;;14005  			// 注销所有按键服务
;;;14006  			KEYMSG_StopAllService();
000014  f7fffffe          BL       KEYMSG_StopAllService
;;;14007  
;;;14008  			// 清除-键释放消息屏蔽
;;;14009  //			KEYMSG_ClearMaskRequest(KEY_NAME_VOICE, KEY_MSG_UP);
;;;14010  			
;;;14011  			// -键释放，档位切换，或停止p档
;;;14012  			KEYMSG_RegisterMsgService(KEY_NAME_DEC, KEY_MSG_UP, DISPLAY_CommonVoiceSelect, FALSE);
000018  2300              MOVS     r3,#0
00001a  f2af021b          ADR      r2,DISPLAY_CommonVoiceSelect + 1
00001e  2101              MOVS     r1,#1
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       KEYMSG_RegisterMsgService
;;;14013  
;;;14014  			// M键长按关机
;;;14015  			KEYMSG_RegisterMsgService(KEY_NAME_KEYM_MCU, KEY_MSG_HOLD, STATE_EnterState, STATE_SHOW_POWER_OFF);
000026  2307              MOVS     r3,#7
000028  2102              MOVS     r1,#2
00002a  e8bd4010          POP      {r4,lr}
00002e  4a08              LDR      r2,|L22.80|
000030  2001              MOVS     r0,#1
000032  f7ffbffe          B.W      KEYMSG_RegisterMsgService
                  |L22.54|
;;;14016  		}
;;;14017  		else
;;;14018  		{		
;;;14019  			// 关闭麦克风
;;;14020  			BLE_PROTOCOL_SendCmdMicroPhone(FALSE);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       BLE_PROTOCOL_SendCmdMicroPhone
;;;14021  
;;;14022  			/*
;;;14023  			TIMER_AddTask(TIMER_ID_BLE_CONTROL,
;;;14024  					500,
;;;14025  					BLE_PROTOCOL_SendCmdMicroPhone,
;;;14026  					FALSE,
;;;14027  					TIMER_LOOP_FOREVER,
;;;14028  					ACTION_MODE_ADD_TO_QUEUE);	
;;;14029  			*/
;;;14030  			STATE_EnterState(stateCB.state);
00003c  4805              LDR      r0,|L22.84|
00003e  7800              LDRB     r0,[r0,#0]  ; stateCB
000040  e8bd4010          POP      {r4,lr}
000044  f7ffbffe          B.W      STATE_EnterState
                  |L22.72|
;;;14031  		}
;;;14032  	}
;;;14033  }
000048  bd10              POP      {r4,pc}
;;;14034  
                          ENDP

00004a  0000              DCW      0x0000
                  |L22.76|
                          DCD      paramCB
                  |L22.80|
                          DCD      STATE_EnterState
                  |L22.84|
                          DCD      stateCB

                          AREA ||i.DISPLAY_DISABLE_ENABLE||, CODE, READONLY, ALIGN=2

                  DISPLAY_DISABLE_ENABLE PROC
;;;282    **********************************************************************/
;;;283    void DISPLAY_DISABLE_ENABLE(DISPLAY_ITEM_E eUnit, BOOL enable)
000000  4a09              LDR      r2,|L23.40|
;;;284    {
;;;285    	DISPLAY_ITEM_E i;
;;;286    
;;;287    	// 参数判断
;;;288    	CHECK_PARAM_OVER_RETURN(eUnit, DISPLAY_MAX);
000002  28b3              CMP      r0,#0xb3
000004  d80a              BHI      |L23.28|
;;;289    
;;;290    	// 禁能或使能所有显示单元
;;;291    	if (DISPLAY_MAX == eUnit)	
000006  d10a              BNE      |L23.30|
;;;292    	{
;;;293    		for (i = (DISPLAY_ITEM_E)0; i < DISPLAY_MAX; i++)
000008  f04f0000          MOV      r0,#0
                  |L23.12|
;;;294    		{
;;;295    			displayStateCB.dispCtrl[i].enable = enable;
00000c  eb021300          ADD      r3,r2,r0,LSL #4
000010  7019              STRB     r1,[r3,#0]
000012  f1000001          ADD      r0,r0,#1              ;293
000016  b2c0              UXTB     r0,r0                 ;293
000018  28b3              CMP      r0,#0xb3              ;293
00001a  d3f7              BCC      |L23.12|
                  |L23.28|
;;;296    		}
;;;297    
;;;298    		return;
;;;299    	}
;;;300    
;;;301    	// 禁能或使能指定显示单元
;;;302    	displayStateCB.dispCtrl[eUnit].enable = enable;
;;;303    
;;;304    }
00001c  4770              BX       lr
                  |L23.30|
00001e  eb021000          ADD      r0,r2,r0,LSL #4       ;302
000022  7001              STRB     r1,[r0,#0]            ;302
000024  4770              BX       lr
;;;305    
                          ENDP

000026  0000              DCW      0x0000
                  |L23.40|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_DrawAdvMenuBg||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawAdvMenuBg PROC
;;;3372   
;;;3373   void DISPLAY_DrawAdvMenuBg(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;3374   {
;;;3375   	// 显示图片			
;;;3376   	LCD_DrawBmpByID(UI_ITEM_COODINATE_RIDING_BACKGROUND_X, UI_ITEM_COODINATE_RIDING_BACKGROUND_Y, PIC_ID_ADVMENU_BG, LCD_OPERATOR_MODE_DRAW);	
000002  2201              MOVS     r2,#1
000004  4619              MOV      r1,r3
000006  4618              MOV      r0,r3
000008  f7ffbffe          B.W      LCD_DrawBmpByID
;;;3377   
;;;3378   }
;;;3379   
                          ENDP


                          AREA ||i.DISPLAY_DrawBlueUpdata||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawBlueUpdata PROC
;;;323    
;;;324    void DISPLAY_DrawBlueUpdata(uint32 ulBuff)
000000  f0100fff          TST      r0,#0xff
;;;325    {
000004  d005              BEQ      |L25.18|
;;;326    	if ((BOOL)ulBuff)
;;;327    	{
;;;328    		LCD_DrawBmpByID(UI_ITEM_COODINATE_BLUE_BLE_UPDOWM_X, UI_ITEM_COODINATE_BLUE_BLE_UPDOWM_Y, PIC_ID_BLE_UPGRADING, LCD_OPERATOR_MODE_DRAW);
000006  2300              MOVS     r3,#0
000008  2256              MOVS     r2,#0x56
00000a  4619              MOV      r1,r3
00000c  4618              MOV      r0,r3
00000e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L25.18|
;;;329    	}
;;;330    	else
;;;331    	{
;;;332    		LCD_DrawBmpByID(UI_ITEM_COODINATE_BLUE_BLE_UPDOWM_X, UI_ITEM_COODINATE_BLUE_BLE_UPDOWM_Y, PIC_ID_BLE_UPDOWN, LCD_OPERATOR_MODE_DRAW);
000012  2300              MOVS     r3,#0
000014  2255              MOVS     r2,#0x55
000016  4619              MOV      r1,r3
000018  4618              MOV      r0,r3
00001a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;333    	}
;;;334    }
;;;335    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonBattery||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonBattery PROC
;;;487    
;;;488    void DISPLAY_DrawCommonBattery(uint32 ulBuff)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;489    {
000004  4605              MOV      r5,r0
;;;490    	uint16 usWidthMax = 16;			// 电池图显最大宽度，根据UI文件修改
000006  f04f0810          MOV      r8,#0x10
;;;491    	uint16 usHeightMax = 6;			// 电池图显最大高度，根据UI文件修改
00000a  2706              MOVS     r7,#6
;;;492    	uint16 usWidth;
;;;493    	uint8 value1=0, value2=0, value3=0;
;;;494    	uint16 usLocalBuff = ulBuff%1000;
00000c  f44f707a          MOV      r0,#0x3e8
000010  fbb5f1f0          UDIV     r1,r5,r0
000014  fb005411          MLS      r4,r0,r1,r5
;;;495    
;;;496    	// 背景刷新
;;;497    	LCD_DrawAreaColor((uint16)UI_ITEM_COODINATE_MUSIC_UP_X, 4, 74, 20, LCD_COLOR_BACKGROUND);
000018  f64106e4          MOV      r6,#0x18e4
00001c  2314              MOVS     r3,#0x14
00001e  224a              MOVS     r2,#0x4a
000020  2104              MOVS     r1,#4
000022  20f1              MOVS     r0,#0xf1
000024  9600              STR      r6,[sp,#0]
000026  f7fffffe          BL       LCD_DrawAreaColor
;;;498    	
;;;499    	/* 限制电量最大100% */
;;;500    	LIMIT_TO_MAX(usLocalBuff, 100);	
00002a  2c64              CMP      r4,#0x64
00002c  d900              BLS      |L26.48|
00002e  2464              MOVS     r4,#0x64
                  |L26.48|
;;;501    
;;;502    	// 电池框
;;;503    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_FRAME_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_FRAME_Y, PIC_ID_RECORD_BAT_K, LCD_OPERATOR_MODE_DRAW);
000030  2300              MOVS     r3,#0
000032  f240127b          MOV      r2,#0x17b
000036  2108              MOVS     r1,#8
000038  f2401023          MOV      r0,#0x123
00003c  f7fffffe          BL       LCD_DrawBmpByID
;;;504    	
;;;505    	// 电池区域刷屏
;;;506    	LCD_DrawAreaColor((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_PIC_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_PIC_Y, usWidthMax, usHeightMax, LCD_COLOR_BACKGROUND);
000040  4642              MOV      r2,r8
000042  f2401825          MOV      r8,#0x125
000046  463b              MOV      r3,r7
000048  210a              MOVS     r1,#0xa
00004a  4640              MOV      r0,r8
00004c  9600              STR      r6,[sp,#0]
00004e  f7fffffe          BL       LCD_DrawAreaColor
;;;507    
;;;508    	// 显示图形
;;;509    	usWidth = usLocalBuff * usWidthMax / 100;
000052  0120              LSLS     r0,r4,#4
000054  2664              MOVS     r6,#0x64
000056  fb90f0f6          SDIV     r0,r0,r6
00005a  b282              UXTH     r2,r0
;;;510    
;;;511    	if (usLocalBuff < 8)
00005c  2c08              CMP      r4,#8
00005e  d208              BCS      |L26.114|
;;;512    	{
;;;513    		LCD_DrawAreaColor((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_PIC_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_PIC_Y, usWidth, usHeightMax,	LCD_COLOR_RED);
000060  f44f4078          MOV      r0,#0xf800
000064  9000              STR      r0,[sp,#0]
000066  463b              MOV      r3,r7
000068  210a              MOVS     r1,#0xa
00006a  4640              MOV      r0,r8
00006c  f7fffffe          BL       LCD_DrawAreaColor
000070  e012              B        |L26.152|
                  |L26.114|
;;;514    	}
;;;515    	else if (usLocalBuff < 20)
000072  2c14              CMP      r4,#0x14
000074  d208              BCS      |L26.136|
;;;516    	{
;;;517    		LCD_DrawAreaColor((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_PIC_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_PIC_Y, usWidth, usHeightMax,	LCD_COLOR_ORANGE);
000076  f64e5025          MOV      r0,#0xed25
00007a  9000              STR      r0,[sp,#0]
00007c  463b              MOV      r3,r7
00007e  210a              MOVS     r1,#0xa
000080  4640              MOV      r0,r8
000082  f7fffffe          BL       LCD_DrawAreaColor
000086  e007              B        |L26.152|
                  |L26.136|
;;;518    	}
;;;519    	else
;;;520    	{
;;;521    		LCD_DrawAreaColor((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_PIC_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_PIC_Y, usWidth, usHeightMax,	LCD_COLOR_WHITE);
000088  f64f70ff          MOV      r0,#0xffff
00008c  9000              STR      r0,[sp,#0]
00008e  463b              MOV      r3,r7
000090  210a              MOVS     r1,#0xa
000092  4640              MOV      r0,r8
000094  f7fffffe          BL       LCD_DrawAreaColor
                  |L26.152|
;;;522    	}
;;;523    	
;;;524    	// 提取三个数字位上的数字
;;;525    	value1 = usLocalBuff/100;
000098  fbb4f0f6          UDIV     r0,r4,r6
00009c  b2c7              UXTB     r7,r0
;;;526    	usLocalBuff %= 100;
00009e  fbb4f0f6          UDIV     r0,r4,r6
0000a2  fb064010          MLS      r0,r6,r0,r4
;;;527    	value2 = usLocalBuff/10;
0000a6  210a              MOVS     r1,#0xa
0000a8  fbb0f2f1          UDIV     r2,r0,r1
0000ac  b2d4              UXTB     r4,r2
;;;528    	value3 = usLocalBuff%10;
0000ae  fbb0f2f1          UDIV     r2,r0,r1
0000b2  fb010612          MLS      r6,r1,r2,r0
;;;529    
;;;530    	// 百分比
;;;531    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_P_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_P_Y, PIC_ID_RECORD_BAT_P, LCD_OPERATOR_MODE_DRAW);
0000b6  2300              MOVS     r3,#0
0000b8  f44f72be          MOV      r2,#0x17c
0000bc  2107              MOVS     r1,#7
0000be  f2401015          MOV      r0,#0x115
0000c2  f7fffffe          BL       LCD_DrawBmpByID
;;;532    	
;;;533    	// 显示个位
;;;534    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_1_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_1_Y, (PIC_ID_E)(PIC_ID_RECORD_BAT_0+value3), LCD_OPERATOR_MODE_DRAW);
0000c6  2300              MOVS     r3,#0
0000c8  f2061271          ADD      r2,r6,#0x171
0000cc  2107              MOVS     r1,#7
0000ce  f240100b          MOV      r0,#0x10b
0000d2  f7fffffe          BL       LCD_DrawBmpByID
;;;535    
;;;536    	// 十位处理
;;;537    	if (ulBuff < 10)
;;;538    	{		
;;;539    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_10_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_10_Y, PIC_ID_RECORD_BAT_0, LCD_COLOR_BACKGROUND);
0000d6  f2401001          MOV      r0,#0x101
0000da  f2401671          MOV      r6,#0x171
0000de  2d0a              CMP      r5,#0xa               ;537
0000e0  d205              BCS      |L26.238|
0000e2  23e4              MOVS     r3,#0xe4
0000e4  4632              MOV      r2,r6
0000e6  2107              MOVS     r1,#7
0000e8  f7fffffe          BL       LCD_DrawBmpByID
0000ec  e005              B        |L26.250|
                  |L26.238|
;;;540    	}
;;;541    	else
;;;542    	{
;;;543    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_10_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_10_Y, (PIC_ID_E)(PIC_ID_RECORD_BAT_0+value2), LCD_OPERATOR_MODE_DRAW);
0000ee  2300              MOVS     r3,#0
0000f0  f2041271          ADD      r2,r4,#0x171
0000f4  2107              MOVS     r1,#7
0000f6  f7fffffe          BL       LCD_DrawBmpByID
                  |L26.250|
;;;544    	}
;;;545    
;;;546    	// 百位处理
;;;547    	if (ulBuff < 100)
0000fa  2d64              CMP      r5,#0x64
0000fc  d208              BCS      |L26.272|
;;;548    	{		
;;;549    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_100_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_100_Y, PIC_ID_RECORD_BAT_0, LCD_COLOR_BACKGROUND);
0000fe  b001              ADD      sp,sp,#4
000100  4632              MOV      r2,r6
000102  e8bd43f0          POP      {r4-r9,lr}
000106  23e4              MOVS     r3,#0xe4
000108  2107              MOVS     r1,#7
00010a  20f7              MOVS     r0,#0xf7
00010c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L26.272|
;;;550    	}
;;;551    	else
;;;552    	{
;;;553    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_100_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_100_Y,(PIC_ID_E)(PIC_ID_RECORD_BAT_0+value1), LCD_OPERATOR_MODE_DRAW);
000110  b001              ADD      sp,sp,#4
000112  f2071271          ADD      r2,r7,#0x171
000116  e8bd43f0          POP      {r4-r9,lr}
00011a  2300              MOVS     r3,#0
00011c  2107              MOVS     r1,#7
00011e  20f7              MOVS     r0,#0xf7
000120  f7ffbffe          B.W      LCD_DrawBmpByID
;;;554    	}
;;;555    }
;;;556    /*********************************************************************
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonCall||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonCall PROC
;;;813    // call
;;;814    void DISPLAY_DrawCommonCall(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;815    {
000002  4604              MOV      r4,r0
;;;816    	LCD_DrawBmpByID(UI_ITEM_COODINATE_SIGNL_4G_X,
000004  2106              MOVS     r1,#6
000006  2301              MOVS     r3,#1
000008  f24012a9          MOV      r2,#0x1a9
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       LCD_DrawBmpByID
;;;817    					UI_ITEM_COODINATE_SIGNL_4G_Y,
;;;818    					PIC_ID_SINGAL_4G_0,
;;;819    					LCD_OPERATOR_MODE_BACKGROUND);
;;;820    	if (ulBuff)
000012  b13c              CBZ      r4,|L27.36|
;;;821    	{
;;;822    		LCD_DrawBmpByID(UI_ITEM_COODINATE_SIGNL_4G_X,
000014  2300              MOVS     r3,#0
000016  2262              MOVS     r2,#0x62
000018  2106              MOVS     r1,#6
00001a  e8bd4010          POP      {r4,lr}
00001e  4608              MOV      r0,r1
000020  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L27.36|
;;;823    					UI_ITEM_COODINATE_SIGNL_4G_Y,
;;;824    					PIC_ID_CALL_ICON,
;;;825    					LCD_OPERATOR_MODE_DRAW);
;;;826    	}
;;;827    	else
;;;828    	{
;;;829    		LCD_DrawBmpByID(UI_ITEM_COODINATE_SIGNL_4G_X,
000024  2301              MOVS     r3,#1
000026  2262              MOVS     r2,#0x62
000028  2106              MOVS     r1,#6
00002a  e8bd4010          POP      {r4,lr}
00002e  4608              MOV      r0,r1
000030  f7ffbffe          B.W      LCD_DrawBmpByID
;;;830    					UI_ITEM_COODINATE_SIGNL_4G_Y,
;;;831    					PIC_ID_CALL_ICON,
;;;832    					LCD_OPERATOR_MODE_BACKGROUND);
;;;833    	}
;;;834    }
;;;835    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonCurise||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonCurise PROC
;;;467    
;;;468    void DISPLAY_DrawCommonCurise(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;469    {
000002  d005              BEQ      |L28.16|
;;;470    	// 无数据，不显示
;;;471    	if(0 == ulBuff)
;;;472    	{
;;;473    		LCD_DrawBmpByID(UI_ITEM_COODINATE_GLOBAL_CURISE_X,
;;;474    							UI_ITEM_COODINATE_GLOBAL_CURISE_Y,
;;;475    							PIC_ID_ICON_CRUISE,
;;;476    							LCD_OPERATOR_MODE_BACKGROUND);
;;;477    	}
;;;478    	// 有数据，显示图标
;;;479    	else
;;;480    	{
;;;481    		LCD_DrawBmpByID(UI_ITEM_COODINATE_GLOBAL_CURISE_X,
000004  2300              MOVS     r3,#0
000006  22ab              MOVS     r2,#0xab
000008  2104              MOVS     r1,#4
00000a  20a8              MOVS     r0,#0xa8
00000c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L28.16|
000010  2301              MOVS     r3,#1                 ;473
000012  22ab              MOVS     r2,#0xab              ;473
000014  2104              MOVS     r1,#4                 ;473
000016  20a8              MOVS     r0,#0xa8              ;473
000018  f7ffbffe          B.W      LCD_DrawBmpByID
;;;482    							UI_ITEM_COODINATE_GLOBAL_CURISE_Y,
;;;483    							PIC_ID_ICON_CRUISE,
;;;484    							LCD_OPERATOR_MODE_DRAW);
;;;485    	}
;;;486    }
;;;487    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonError||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonError PROC
;;;788    // 错误标识
;;;789    void DISPLAY_DrawCommonError(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;790    {
000002  d007              BEQ      |L29.20|
;;;791    	switch (ulBuff)
000004  2801              CMP      r0,#1
000006  d10b              BNE      |L29.32|
;;;792    	{
;;;793    		case 0:
;;;794    
;;;795    			// 黑色背景色
;;;796    			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ERROR_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ERROR_Y, PIC_ID_ICON_WARN, LCD_OPERATOR_MODE_BACKGROUND);
;;;797    
;;;798    			break;
;;;799    
;;;800    		case 1:
;;;801    			
;;;802    			// 显示图片
;;;803    			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ERROR_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ERROR_Y, PIC_ID_ICON_WARN, LCD_OPERATOR_MODE_DRAW);
000008  2300              MOVS     r3,#0
00000a  22b2              MOVS     r2,#0xb2
00000c  2105              MOVS     r1,#5
00000e  2096              MOVS     r0,#0x96
000010  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L29.20|
000014  2301              MOVS     r3,#1                 ;796
000016  22b2              MOVS     r2,#0xb2              ;796
000018  2105              MOVS     r1,#5                 ;796
00001a  2096              MOVS     r0,#0x96              ;796
00001c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L29.32|
;;;804    
;;;805    			break;
;;;806    
;;;807    		default:
;;;808    			break;
;;;809    	}
;;;810    	
;;;811    }
000020  4770              BX       lr
;;;812    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonHelmetBat||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonHelmetBat PROC
;;;916    // 头盔电量显示
;;;917    void DISPLAY_DrawCommonHelmetBat(uint32 ulBuff)
000000  b2c1              UXTB     r1,r0
;;;918    {
;;;919    	uint8 battery = ulBuff & 0xFF;
;;;920    	uint8 state = (ulBuff >> 8) & 0xFF;
000002  f3c02007          UBFX     r0,r0,#8,#8
;;;921    
;;;922    	LIMIT_TO_MAX(battery, 100);
;;;923    
;;;924    	if (state)
000006  2800              CMP      r0,#0
000008  d005              BEQ      |L30.22|
;;;925    	{
;;;926    		// 头盔标识
;;;927    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_HELMET_X, (uint16)UI_ITEM_COODINATE_HELMET_Y, PIC_ID_HELMET, LCD_OPERATOR_MODE_DRAW);
00000a  2300              MOVS     r3,#0
00000c  22a3              MOVS     r2,#0xa3
00000e  2105              MOVS     r1,#5
000010  2044              MOVS     r0,#0x44
000012  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L30.22|
;;;928    	}
;;;929    	else
;;;930    	{
;;;931    		// 头盔标识
;;;932    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_HELMET_X, (uint16)UI_ITEM_COODINATE_HELMET_Y, PIC_ID_HELMET, LCD_OPERATOR_MODE_BACKGROUND);
000016  2301              MOVS     r3,#1
000018  22a3              MOVS     r2,#0xa3
00001a  2105              MOVS     r1,#5
00001c  2044              MOVS     r0,#0x44
00001e  f7ffbffe          B.W      LCD_DrawBmpByID
;;;933    	}
;;;934    }
;;;935    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonLight||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawCommonLight PROC
;;;752    **********************************************************************/
;;;753    void DISPLAY_DrawCommonLight(uint32 ulBuff)
000000  f000000f          AND      r0,r0,#0xf
;;;754    {
;;;755    
;;;756    	ulBuff &=0x0f; 
;;;757    
;;;758    
;;;759    	switch (ulBuff)
000004  2800              CMP      r0,#0
000006  d00b              BEQ      |L31.32|
000008  2801              CMP      r0,#1
00000a  d115              BNE      |L31.56|
;;;760    	{
;;;761    		case 0:
;;;762    
;;;763    			// 黑色背景色
;;;764    			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_LIGHT_X, (uint16)UI_ITEM_COODINATE_GLOBAL_LIGHT_Y, PIC_ID_ICON_LIGHT, LCD_OPERATOR_MODE_BACKGROUND);
;;;765    
;;;766    			break;
;;;767    
;;;768    		case 1:
;;;769    			if (paramCB.runtime.headAutoLight)
00000c  480b              LDR      r0,|L31.60|
00000e  f8900257          LDRB     r0,[r0,#0x257]  ; paramCB
000012  b158              CBZ      r0,|L31.44|
;;;770    			{
;;;771    				// 显示图片
;;;772    				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_LIGHT_X, (uint16)UI_ITEM_COODINATE_GLOBAL_LIGHT_Y, PIC_ID_ICON_AUTO_LIGHT, LCD_OPERATOR_MODE_DRAW);
000014  2300              MOVS     r3,#0
000016  22a9              MOVS     r2,#0xa9
000018  2105              MOVS     r1,#5
00001a  20df              MOVS     r0,#0xdf
00001c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L31.32|
000020  2301              MOVS     r3,#1                 ;764
000022  22ae              MOVS     r2,#0xae              ;764
000024  2105              MOVS     r1,#5                 ;764
000026  20df              MOVS     r0,#0xdf              ;764
000028  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L31.44|
;;;773    			}
;;;774    			else
;;;775    			{
;;;776    
;;;777    				// 显示图片
;;;778    				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_LIGHT_X, (uint16)UI_ITEM_COODINATE_GLOBAL_LIGHT_Y, PIC_ID_ICON_LIGHT, LCD_OPERATOR_MODE_DRAW);
00002c  2300              MOVS     r3,#0
00002e  22ae              MOVS     r2,#0xae
000030  2105              MOVS     r1,#5
000032  20df              MOVS     r0,#0xdf
000034  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L31.56|
;;;779    
;;;780    			}
;;;781    			break;
;;;782    
;;;783    		default:
;;;784    			break;
;;;785    	}
;;;786    }
000038  4770              BX       lr
;;;787    
                          ENDP

00003a  0000              DCW      0x0000
                  |L31.60|
                          DCD      paramCB

                          AREA ||i.DISPLAY_DrawCommonMusicPlay||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonMusicPlay PROC
;;;982    // 音乐模式开关显示
;;;983    void DISPLAY_DrawCommonMusicPlay(uint32 ulBuff)
000000  b538              PUSH     {r3-r5,lr}
;;;984    {
000002  4604              MOV      r4,r0
;;;985    	// 背景刷新
;;;986    	LCD_DrawAreaColor((uint16)UI_ITEM_COODINATE_MUSIC_UP_X, 0, 79, 25, LCD_COLOR_BACKGROUND);
000004  f64101e4          MOV      r1,#0x18e4
000008  9100              STR      r1,[sp,#0]
00000a  2319              MOVS     r3,#0x19
00000c  224f              MOVS     r2,#0x4f
00000e  2100              MOVS     r1,#0
000010  20f1              MOVS     r0,#0xf1
000012  f7fffffe          BL       LCD_DrawAreaColor
;;;987    	
;;;988    	if (ulBuff)
000016  b144              CBZ      r4,|L32.42|
;;;989    	{
;;;990    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MUSIC_PLAY_X, (uint16)UI_ITEM_COODINATE_MUSIC_PLAY_Y, PIC_ID_IC_MUSIC_ON, LCD_OPERATOR_MODE_DRAW);
000018  b001              ADD      sp,sp,#4
00001a  2300              MOVS     r3,#0
00001c  e8bd4030          POP      {r4,r5,lr}
000020  22a8              MOVS     r2,#0xa8
000022  2104              MOVS     r1,#4
000024  20f7              MOVS     r0,#0xf7
000026  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L32.42|
;;;991    	}
;;;992    	else
;;;993    	{
;;;994    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MUSIC_PLAY_X, (uint16)UI_ITEM_COODINATE_MUSIC_PLAY_Y, PIC_ID_IC_MUSIC_OFF, LCD_OPERATOR_MODE_DRAW);
00002a  b001              ADD      sp,sp,#4
00002c  2300              MOVS     r3,#0
00002e  e8bd4030          POP      {r4,r5,lr}
000032  22a7              MOVS     r2,#0xa7
000034  2104              MOVS     r1,#4
000036  20f7              MOVS     r0,#0xf7
000038  f7ffbffe          B.W      LCD_DrawBmpByID
;;;995    	}
;;;996    }
;;;997    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonPhoto||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonPhoto PROC
;;;936    // 拍照显示
;;;937    void DISPLAY_DrawCommonPhoto(uint32 ulBuff)
000000  4770              BX       lr
;;;938    {
;;;939    /*
;;;940    	// 拍照图标
;;;941    	if (ulBuff)
;;;942    
;;;943    	{
;;;944    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_VIDEO_X, (uint16)UI_ITEM_COODINATE_VIDEO_Y, PIC_ID_ICON_VIDIO, LCD_OPERATOR_MODE_DRAW);
;;;945    	}
;;;946    	else
;;;947    	{
;;;948    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_VIDEO_X, (uint16)UI_ITEM_COODINATE_VIDEO_Y, PIC_ID_ICON_VIDIO, LCD_OPERATOR_MODE_BACKGROUND);
;;;949    	}
;;;950    */
;;;951    }
;;;952    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonRecordState||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonRecordState PROC
;;;669    // 当前是否有数据记录，有就显示，没有就不显示
;;;670    void DISPLAY_DrawCommonRecordState(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;671    {
000002  d005              BEQ      |L34.16|
;;;672    	// 无数据，不显示
;;;673    	if(0 == ulBuff)
;;;674    	{
;;;675    		LCD_DrawBmpByID(UI_ITEM_COODINATE_GLOBAL_RECORD_COUNT_X,
;;;676    							UI_ITEM_COODINATE_GLOBAL_RECORD_COUNT_Y,
;;;677    							PIC_ID_ICON_BLE,
;;;678    							LCD_OPERATOR_MODE_BACKGROUND);
;;;679    	}
;;;680    	// 有数据，显示图标
;;;681    	else
;;;682    	{
;;;683    		LCD_DrawBmpByID(UI_ITEM_COODINATE_GLOBAL_RECORD_COUNT_X,
000004  2300              MOVS     r3,#0
000006  22aa              MOVS     r2,#0xaa
000008  2106              MOVS     r1,#6
00000a  20bf              MOVS     r0,#0xbf
00000c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L34.16|
000010  2301              MOVS     r3,#1                 ;675
000012  22aa              MOVS     r2,#0xaa              ;675
000014  2106              MOVS     r1,#6                 ;675
000016  20bf              MOVS     r0,#0xbf              ;675
000018  f7ffbffe          B.W      LCD_DrawBmpByID
;;;684    							UI_ITEM_COODINATE_GLOBAL_RECORD_COUNT_Y,
;;;685    							PIC_ID_ICON_BLE,
;;;686    							LCD_OPERATOR_MODE_DRAW);
;;;687    	}
;;;688    }
;;;689    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonSignl4G||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawCommonSignl4G PROC
;;;837    // 4G信号值显示
;;;838    void DISPLAY_DrawCommonSignl4G(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;839    {
;;;840    	uint8 HelmetState = (ulBuff >> 16) & 0xFF;
000002  f3c04607          UBFX     r6,r0,#16,#8
;;;841    	uint8 IgnoreState = (ulBuff >> 8) & 0xFF;
000006  f3c02507          UBFX     r5,r0,#8,#8
;;;842    	uint8 signal4G = ulBuff & 0xFF;
00000a  b2c4              UXTB     r4,r0
;;;843    
;;;844    	LCD_DrawBmpByID(UI_ITEM_COODINATE_SIGNL_4G_X,
00000c  2106              MOVS     r1,#6
00000e  2301              MOVS     r3,#1
000010  2262              MOVS     r2,#0x62
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       LCD_DrawBmpByID
;;;845    					UI_ITEM_COODINATE_SIGNL_4G_Y,
;;;846    					PIC_ID_CALL_ICON,
;;;847    					LCD_OPERATOR_MODE_BACKGROUND);
;;;848    	
;;;849    	LCD_DrawBmpByID(UI_ITEM_COODINATE_SIGNL_4G_X,
000018  2106              MOVS     r1,#6
00001a  2301              MOVS     r3,#1
00001c  2262              MOVS     r2,#0x62
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       LCD_DrawBmpByID
;;;850    					UI_ITEM_COODINATE_SIGNL_4G_Y,
;;;851    					PIC_ID_CALL_ICON,
;;;852    					LCD_OPERATOR_MODE_BACKGROUND);
;;;853    
;;;854    	// 头盔未连接，清除忽略标识
;;;855    	if (!HelmetState)
000024  2e00              CMP      r6,#0
000026  d104              BNE      |L35.50|
;;;856    	{
;;;857    		PARAM_SetCallerIgnoreState(FALSE);
000028  4929              LDR      r1,|L35.208|
00002a  f04f0000          MOV      r0,#0
00002e  f881020c          STRB     r0,[r1,#0x20c]
                  |L35.50|
;;;858    	}
;;;859    
;;;860    	// 头盔连接并且有来电显示来电图标，否则显示4G信号图标
;;;861    	if (HelmetState && IgnoreState)
000032  d00b              BEQ      |L35.76|
000034  b155              CBZ      r5,|L35.76|
;;;862    	{
;;;863    		LCD_DrawBmpByID(UI_ITEM_COODINATE_SIGNL_4G_X,
000036  e8bd4070          POP      {r4-r6,lr}
00003a  f04f0106          MOV      r1,#6
00003e  f04f0300          MOV      r3,#0
000042  f04f0262          MOV      r2,#0x62
000046  4608              MOV      r0,r1
000048  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L35.76|
;;;864    					UI_ITEM_COODINATE_SIGNL_4G_Y,
;;;865    					PIC_ID_CALL_ICON,
;;;866    					LCD_OPERATOR_MODE_DRAW);
;;;867    	}
;;;868    	else
;;;869    	{
;;;870    		LIMIT_TO_MAX(signal4G, 100);
00004c  2c64              CMP      r4,#0x64
00004e  d900              BLS      |L35.82|
000050  2464              MOVS     r4,#0x64
                  |L35.82|
;;;871    	
;;;872    		// 信号0，未连接
;;;873    		if (0 == signal4G)
000052  b154              CBZ      r4,|L35.106|
;;;874    		{
;;;875    			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_SIGNL_4G_X, (uint16)UI_ITEM_COODINATE_SIGNL_4G_Y, PIC_ID_SINGAL_4G_0, LCD_OPERATOR_MODE_DRAW);
;;;876    		}
;;;877    		else if (signal4G <= 10)
000054  2c0a              CMP      r4,#0xa
000056  d811              BHI      |L35.124|
;;;878    		{
;;;879    			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_SIGNL_4G_X, (uint16)UI_ITEM_COODINATE_SIGNL_4G_Y, PIC_ID_SINGAL_4G_1, LCD_OPERATOR_MODE_DRAW);
000058  e8bd4070          POP      {r4-r6,lr}
00005c  2300              MOVS     r3,#0
00005e  2106              MOVS     r1,#6
000060  f44f72d5          MOV      r2,#0x1aa
000064  4608              MOV      r0,r1
000066  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L35.106|
00006a  e8bd4070          POP      {r4-r6,lr}            ;875
00006e  2300              MOVS     r3,#0                 ;875
000070  2106              MOVS     r1,#6                 ;875
000072  f24012a9          MOV      r2,#0x1a9             ;875
000076  4608              MOV      r0,r1                 ;875
000078  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L35.124|
;;;880    		}
;;;881    		else if (signal4G <= 15)
00007c  2c0f              CMP      r4,#0xf
00007e  d808              BHI      |L35.146|
;;;882    		{	
;;;883    			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_SIGNL_4G_X, (uint16)UI_ITEM_COODINATE_SIGNL_4G_Y, PIC_ID_SINGAL_4G_2, LCD_OPERATOR_MODE_DRAW);	
000080  e8bd4070          POP      {r4-r6,lr}
000084  2300              MOVS     r3,#0
000086  2106              MOVS     r1,#6
000088  f24012ab          MOV      r2,#0x1ab
00008c  4608              MOV      r0,r1
00008e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L35.146|
;;;884    		}
;;;885    		else if (signal4G <= 20)
000092  2c14              CMP      r4,#0x14
000094  d808              BHI      |L35.168|
;;;886    		{
;;;887    			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_SIGNL_4G_X, (uint16)UI_ITEM_COODINATE_SIGNL_4G_Y, PIC_ID_SINGAL_4G_3, LCD_OPERATOR_MODE_DRAW);
000096  e8bd4070          POP      {r4-r6,lr}
00009a  2300              MOVS     r3,#0
00009c  2106              MOVS     r1,#6
00009e  f44f72d6          MOV      r2,#0x1ac
0000a2  4608              MOV      r0,r1
0000a4  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L35.168|
;;;888    		}
;;;889    		else if (signal4G <= 25)
0000a8  2c19              CMP      r4,#0x19
0000aa  d808              BHI      |L35.190|
;;;890    		{
;;;891    			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_SIGNL_4G_X, (uint16)UI_ITEM_COODINATE_SIGNL_4G_Y, PIC_ID_SINGAL_4G_4, LCD_OPERATOR_MODE_DRAW);
0000ac  e8bd4070          POP      {r4-r6,lr}
0000b0  2300              MOVS     r3,#0
0000b2  2106              MOVS     r1,#6
0000b4  f24012ad          MOV      r2,#0x1ad
0000b8  4608              MOV      r0,r1
0000ba  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L35.190|
;;;892    		}
;;;893    		else 
;;;894    		{
;;;895    			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_SIGNL_4G_X, (uint16)UI_ITEM_COODINATE_SIGNL_4G_Y, PIC_ID_SINGAL_4G_5, LCD_OPERATOR_MODE_DRAW);
0000be  e8bd4070          POP      {r4-r6,lr}
0000c2  2300              MOVS     r3,#0
0000c4  2106              MOVS     r1,#6
0000c6  f44f72d7          MOV      r2,#0x1ae
0000ca  4608              MOV      r0,r1
0000cc  f7ffbffe          B.W      LCD_DrawBmpByID
;;;896    		}
;;;897    	}
;;;898    }
;;;899    
                          ENDP

                  |L35.208|
                          DCD      paramCB

                          AREA ||i.DISPLAY_DrawCommonSignlGPS||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonSignlGPS PROC
;;;900    // GPS信号值显示
;;;901    void DISPLAY_DrawCommonSignlGPS(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;902    {
000002  d005              BEQ      |L36.16|
;;;903    
;;;904    	// 信号0，未连接
;;;905    	if (0 == ulBuff)
;;;906    	{
;;;907    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_SIGNL_GPS_X, (uint16)UI_ITEM_COODINATE_SIGNL_GPS_Y, PIC_ID_ICON_GPS, LCD_OPERATOR_MODE_BACKGROUND);
;;;908    	}
;;;909    	else 
;;;910    	{
;;;911    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_SIGNL_GPS_X, (uint16)UI_ITEM_COODINATE_SIGNL_GPS_Y, PIC_ID_ICON_GPS, LCD_OPERATOR_MODE_DRAW);
000004  2300              MOVS     r3,#0
000006  22ac              MOVS     r2,#0xac
000008  2104              MOVS     r1,#4
00000a  2027              MOVS     r0,#0x27
00000c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L36.16|
000010  2301              MOVS     r3,#1                 ;907
000012  22ac              MOVS     r2,#0xac              ;907
000014  2104              MOVS     r1,#4                 ;907
000016  2027              MOVS     r0,#0x27              ;907
000018  f7ffbffe          B.W      LCD_DrawBmpByID
;;;912    	}
;;;913    	
;;;914    }
;;;915    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonStatusBar||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonStatusBar PROC
;;;366    **********************************************************************/
;;;367    void DISPLAY_DrawCommonStatusBar(uint32 ulBuff)
000000  4770              BX       lr
;;;368    {
;;;369    //	LCD_DrawBmpByID(UI_ITEM_COODINATE_GLOBAL_STATUS_BAR_X, UI_ITEM_COODINATE_GLOBAL_STATUS_BAR_Y, PIC_ID_BG_STATBAR, LCD_OPERATOR_MODE_DRAW);
;;;370    }
;;;371    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonTime||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonTime PROC
;;;383    **********************************************************************/
;;;384    void DISPLAY_DrawCommonTime(uint32 ulBuff)
000000  b5f8              PUSH     {r3-r7,lr}
;;;385    {
000002  4604              MOV      r4,r0
;;;386    	uint8 value1=0, value2=0, value3=0, value4=0;
;;;387    	uint8 ucHour,ucMin;
;;;388    
;;;389    	// 背景刷新
;;;390    	LCD_DrawAreaColor((uint16)UI_ITEM_COODINATE_MUSIC_UP_X, 0, 79, 23, LCD_COLOR_BACKGROUND);
000004  f64100e4          MOV      r0,#0x18e4
000008  9000              STR      r0,[sp,#0]
00000a  2317              MOVS     r3,#0x17
00000c  224f              MOVS     r2,#0x4f
00000e  2100              MOVS     r1,#0
000010  20f1              MOVS     r0,#0xf1
000012  f7fffffe          BL       LCD_DrawAreaColor
;;;391    	
;;;392    	// 取小时段数字，最大不超过23个小时
;;;393    	ucHour = ((ulBuff & 0xFF00) >> 8);
000016  f3c42107          UBFX     r1,r4,#8,#8
;;;394    	LIMIT_TO_MAX(ucHour,23);
00001a  2917              CMP      r1,#0x17
00001c  d900              BLS      |L38.32|
00001e  2117              MOVS     r1,#0x17
                  |L38.32|
;;;395    
;;;396    	// 取分钟段数字，最大不超过59分钟
;;;397    	ucMin  = ulBuff & 0xFF;
000020  b2e0              UXTB     r0,r4
;;;398    	LIMIT_TO_MAX(ucMin,59);
000022  283b              CMP      r0,#0x3b
000024  d900              BLS      |L38.40|
000026  203b              MOVS     r0,#0x3b
                  |L38.40|
;;;399    
;;;400    	// 提取小时数字位上的数字
;;;401    	value1 = ucHour/10;
000028  230a              MOVS     r3,#0xa
00002a  fbb1f7f3          UDIV     r7,r1,r3
;;;402    	value2 = ucHour%10;
00002e  fbb1f2f3          UDIV     r2,r1,r3
000032  fb031412          MLS      r4,r3,r2,r1
;;;403    
;;;404    	// 提取分钟数字位上的数字
;;;405    	value3 = ucMin/10;
000036  fbb0f5f3          UDIV     r5,r0,r3
;;;406    	value4 = ucMin%10;
00003a  fbb0f1f3          UDIV     r1,r0,r3
00003e  fb030611          MLS      r6,r3,r1,r0
;;;407    	
;;;408    	// 显示小时十位
;;;409    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC_H_10_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_H_10_Y, (PIC_ID_E)(PIC_ID_TIME_0+value1), LCD_OPERATOR_MODE_DRAW);
000042  2300              MOVS     r3,#0
000044  f20712dd          ADD      r2,r7,#0x1dd
000048  2106              MOVS     r1,#6
00004a  f44f7087          MOV      r0,#0x10e
00004e  f7fffffe          BL       LCD_DrawBmpByID
;;;410    
;;;411    	// 显示小时个位
;;;412    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC_H_1_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_H_1_Y, (PIC_ID_E)(PIC_ID_TIME_0+value2), LCD_OPERATOR_MODE_DRAW);
000052  2300              MOVS     r3,#0
000054  f20412dd          ADD      r2,r4,#0x1dd
000058  2106              MOVS     r1,#6
00005a  f44f708c          MOV      r0,#0x118
00005e  f7fffffe          BL       LCD_DrawBmpByID
;;;413    
;;;414    	// 显示冒号
;;;415    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC_H_MALL_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_H_MALL_Y, PIC_ID_TIME_DOT, LCD_OPERATOR_MODE_DRAW);
000062  2300              MOVS     r3,#0
000064  f24012e7          MOV      r2,#0x1e7
000068  2106              MOVS     r1,#6
00006a  f2401023          MOV      r0,#0x123
00006e  f7fffffe          BL       LCD_DrawBmpByID
;;;416    	
;;;417    	// 显示分钟十位
;;;418    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC_M_10_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_M_10_Y, (PIC_ID_E)(PIC_ID_TIME_0+value3), LCD_OPERATOR_MODE_DRAW);
000072  2300              MOVS     r3,#0
000074  f20512dd          ADD      r2,r5,#0x1dd
000078  2106              MOVS     r1,#6
00007a  f44f7094          MOV      r0,#0x128
00007e  f7fffffe          BL       LCD_DrawBmpByID
;;;419    
;;;420    	// 显示分钟个位
;;;421    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC_M_1_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_M_1_Y, (PIC_ID_E)(PIC_ID_TIME_0+value4), LCD_OPERATOR_MODE_DRAW);
000082  b001              ADD      sp,sp,#4
000084  f20612dd          ADD      r2,r6,#0x1dd
000088  e8bd40f0          POP      {r4-r7,lr}
00008c  2300              MOVS     r3,#0
00008e  2106              MOVS     r1,#6
000090  f44f7099          MOV      r0,#0x132
000094  f7ffbffe          B.W      LCD_DrawBmpByID
;;;422    
;;;423    }
;;;424    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonTime1||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonTime1 PROC
;;;425    
;;;426    void DISPLAY_DrawCommonTime1(uint32 ulBuff)
000000  b5f8              PUSH     {r3-r7,lr}
;;;427    {
000002  4604              MOV      r4,r0
;;;428    	uint8 value1=0, value2=0, value3=0, value4=0;
;;;429    	uint8 ucHour,ucMin;
;;;430    
;;;431    	// 背景刷新
;;;432    	LCD_DrawAreaColor((uint16)4, 4, 79, 20, LCD_COLOR_BACKGROUND);
000004  f64100e4          MOV      r0,#0x18e4
000008  2104              MOVS     r1,#4
00000a  9000              STR      r0,[sp,#0]
00000c  2314              MOVS     r3,#0x14
00000e  224f              MOVS     r2,#0x4f
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       LCD_DrawAreaColor
;;;433    	
;;;434    	// 取小时段数字，最大不超过23个小时
;;;435    	ucHour = ((ulBuff & 0xFF00) >> 8);
000016  f3c42107          UBFX     r1,r4,#8,#8
;;;436    	LIMIT_TO_MAX(ucHour,23);
00001a  2917              CMP      r1,#0x17
00001c  d900              BLS      |L39.32|
00001e  2117              MOVS     r1,#0x17
                  |L39.32|
;;;437    
;;;438    	// 取分钟段数字，最大不超过59分钟
;;;439    	ucMin  = ulBuff & 0xFF;
000020  b2e0              UXTB     r0,r4
;;;440    	LIMIT_TO_MAX(ucMin,59);
000022  283b              CMP      r0,#0x3b
000024  d900              BLS      |L39.40|
000026  203b              MOVS     r0,#0x3b
                  |L39.40|
;;;441    
;;;442    	// 提取小时数字位上的数字
;;;443    	value1 = ucHour/10;
000028  230a              MOVS     r3,#0xa
00002a  fbb1f7f3          UDIV     r7,r1,r3
;;;444    	value2 = ucHour%10;
00002e  fbb1f2f3          UDIV     r2,r1,r3
000032  fb031412          MLS      r4,r3,r2,r1
;;;445    
;;;446    	// 提取分钟数字位上的数字
;;;447    	value3 = ucMin/10;
000036  fbb0f5f3          UDIV     r5,r0,r3
;;;448    	value4 = ucMin%10;
00003a  fbb0f1f3          UDIV     r1,r0,r3
00003e  fb030611          MLS      r6,r3,r1,r0
;;;449    	
;;;450    	// 显示小时十位
;;;451    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC1_H_10_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_H_10_Y, (PIC_ID_E)(PIC_ID_TIME_0+value1), LCD_OPERATOR_MODE_DRAW);
000042  2300              MOVS     r3,#0
000044  f20712dd          ADD      r2,r7,#0x1dd
000048  2106              MOVS     r1,#6
00004a  200a              MOVS     r0,#0xa
00004c  f7fffffe          BL       LCD_DrawBmpByID
;;;452    
;;;453    	// 显示小时个位
;;;454    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC1_H_1_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_H_1_Y, (PIC_ID_E)(PIC_ID_TIME_0+value2), LCD_OPERATOR_MODE_DRAW);
000050  2300              MOVS     r3,#0
000052  f20412dd          ADD      r2,r4,#0x1dd
000056  2106              MOVS     r1,#6
000058  2014              MOVS     r0,#0x14
00005a  f7fffffe          BL       LCD_DrawBmpByID
;;;455    
;;;456    	// 显示冒号
;;;457    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC1_H_MALL_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_H_MALL_Y, PIC_ID_TIME_DOT, LCD_OPERATOR_MODE_DRAW);
00005e  2300              MOVS     r3,#0
000060  f24012e7          MOV      r2,#0x1e7
000064  2106              MOVS     r1,#6
000066  201f              MOVS     r0,#0x1f
000068  f7fffffe          BL       LCD_DrawBmpByID
;;;458    	
;;;459    	// 显示分钟十位
;;;460    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC1_M_10_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_M_10_Y, (PIC_ID_E)(PIC_ID_TIME_0+value3), LCD_OPERATOR_MODE_DRAW);
00006c  2300              MOVS     r3,#0
00006e  f20512dd          ADD      r2,r5,#0x1dd
000072  2106              MOVS     r1,#6
000074  2024              MOVS     r0,#0x24
000076  f7fffffe          BL       LCD_DrawBmpByID
;;;461    
;;;462    	// 显示分钟个位
;;;463    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_RTC1_M_1_X, (uint16)UI_ITEM_COODINATE_GLOBAL_RTC_M_1_Y, (PIC_ID_E)(PIC_ID_TIME_0+value4), LCD_OPERATOR_MODE_DRAW);
00007a  b001              ADD      sp,sp,#4
00007c  f20612dd          ADD      r2,r6,#0x1dd
000080  e8bd40f0          POP      {r4-r7,lr}
000084  2300              MOVS     r3,#0
000086  2106              MOVS     r1,#6
000088  202e              MOVS     r0,#0x2e
00008a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;464    
;;;465    }
;;;466    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonTurn||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonTurn PROC
;;;998    // 转向开关显示
;;;999    void DISPLAY_DrawCommonTurn(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;1000   {
;;;1001   	switch (ulBuff)
;;;1002   	{
;;;1003   		case LEFT_TRUN:
;;;1004   
;;;1005   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_LEFT_TURN_X, (uint16)UI_ITEM_COODINATE_LEFT_TURN_Y, PIC_ID_M_SIGNALLEFT, LCD_OPERATOR_MODE_DRAW);
;;;1006   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIGHT_TURN_X, (uint16)UI_ITEM_COODINATE_RIGHT_TURN_Y, PIC_ID_M_SIGNALRIGHT, LCD_OPERATOR_MODE_BACKGROUND);
000002  f2401429          MOV      r4,#0x129
000006  2801              CMP      r0,#1                 ;1001
000008  d00f              BEQ      |L40.42|
00000a  2802              CMP      r0,#2                 ;1001
00000c  d01b              BEQ      |L40.70|
;;;1007   			break;
;;;1008   			
;;;1009   		case RIGHT_TRUN:
;;;1010   
;;;1011   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_LEFT_TURN_X, (uint16)UI_ITEM_COODINATE_LEFT_TURN_Y, PIC_ID_M_SIGNALLEFT, LCD_OPERATOR_MODE_BACKGROUND);
;;;1012   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIGHT_TURN_X, (uint16)UI_ITEM_COODINATE_RIGHT_TURN_Y, PIC_ID_M_SIGNALRIGHT, LCD_OPERATOR_MODE_DRAW);
;;;1013   			break;
;;;1014   			
;;;1015   		default:
;;;1016   
;;;1017   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_LEFT_TURN_X, (uint16)UI_ITEM_COODINATE_LEFT_TURN_Y, PIC_ID_M_SIGNALLEFT, LCD_OPERATOR_MODE_BACKGROUND);
00000e  2301              MOVS     r3,#1
000010  22d6              MOVS     r2,#0xd6
000012  211b              MOVS     r1,#0x1b
000014  2005              MOVS     r0,#5
000016  f7fffffe          BL       LCD_DrawBmpByID
;;;1018   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIGHT_TURN_X, (uint16)UI_ITEM_COODINATE_RIGHT_TURN_Y, PIC_ID_M_SIGNALRIGHT, LCD_OPERATOR_MODE_BACKGROUND);
00001a  4620              MOV      r0,r4
00001c  2301              MOVS     r3,#1
00001e  22d7              MOVS     r2,#0xd7
000020  e8bd4010          POP      {r4,lr}
000024  211b              MOVS     r1,#0x1b
000026  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L40.42|
00002a  2300              MOVS     r3,#0                 ;1005
00002c  22d6              MOVS     r2,#0xd6              ;1005
00002e  211b              MOVS     r1,#0x1b              ;1005
000030  2005              MOVS     r0,#5                 ;1005
000032  f7fffffe          BL       LCD_DrawBmpByID
000036  4620              MOV      r0,r4                 ;1006
000038  2301              MOVS     r3,#1                 ;1006
00003a  22d7              MOVS     r2,#0xd7              ;1006
00003c  e8bd4010          POP      {r4,lr}               ;1006
000040  211b              MOVS     r1,#0x1b              ;1006
000042  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L40.70|
000046  2301              MOVS     r3,#1                 ;1011
000048  22d6              MOVS     r2,#0xd6              ;1011
00004a  211b              MOVS     r1,#0x1b              ;1011
00004c  2005              MOVS     r0,#5                 ;1011
00004e  f7fffffe          BL       LCD_DrawBmpByID
000052  4620              MOV      r0,r4                 ;1012
000054  2300              MOVS     r3,#0                 ;1012
000056  22d7              MOVS     r2,#0xd7              ;1012
000058  e8bd4010          POP      {r4,lr}               ;1012
00005c  211b              MOVS     r1,#0x1b              ;1012
00005e  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1019   			break;
;;;1020   	}
;;;1021   }
;;;1022   
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonVideo||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonVideo PROC
;;;953    // 录像显示
;;;954    void DISPLAY_DrawCommonVideo(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;955    {
000002  d005              BEQ      |L41.16|
;;;956    	// 录像图标
;;;957    	if (ulBuff)
;;;958    
;;;959    	{
;;;960    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_VIDEO_X, (uint16)UI_ITEM_COODINATE_VIDEO_Y, PIC_ID_ICON_VIDIO, LCD_OPERATOR_MODE_DRAW);
000004  2300              MOVS     r3,#0
000006  22b0              MOVS     r2,#0xb0
000008  2106              MOVS     r1,#6
00000a  2063              MOVS     r0,#0x63
00000c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L41.16|
;;;961    	}
;;;962    	else
;;;963    	{
;;;964    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_VIDEO_X, (uint16)UI_ITEM_COODINATE_VIDEO_Y, PIC_ID_ICON_VIDIO, LCD_OPERATOR_MODE_BACKGROUND);
000010  2301              MOVS     r3,#1
000012  22b0              MOVS     r2,#0xb0
000014  2106              MOVS     r1,#6
000016  2063              MOVS     r0,#0x63
000018  f7ffbffe          B.W      LCD_DrawBmpByID
;;;965    	}
;;;966    }
;;;967    
                          ENDP


                          AREA ||i.DISPLAY_DrawCommonVoice||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawCommonVoice PROC
;;;968    // 对讲显示
;;;969    void DISPLAY_DrawCommonVoice(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;970    {
000002  d005              BEQ      |L42.16|
;;;971    	// 录像图标
;;;972    	if (ulBuff)
;;;973    	{
;;;974    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_VOICE_X, (uint16)UI_ITEM_COODINATE_VOICE_Y, PIC_ID_ICON_VOICE, LCD_OPERATOR_MODE_DRAW);
000004  2300              MOVS     r3,#0
000006  22b1              MOVS     r2,#0xb1
000008  2105              MOVS     r1,#5
00000a  2085              MOVS     r0,#0x85
00000c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L42.16|
;;;975    	}
;;;976    	else
;;;977    	{
;;;978    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_VOICE_X, (uint16)UI_ITEM_COODINATE_VOICE_Y, PIC_ID_ICON_VOICE, LCD_OPERATOR_MODE_BACKGROUND);
000010  2301              MOVS     r3,#1
000012  22b1              MOVS     r2,#0xb1
000014  2105              MOVS     r1,#5
000016  2085              MOVS     r0,#0x85
000018  f7ffbffe          B.W      LCD_DrawBmpByID
;;;979    	}
;;;980    }
;;;981    
                          ENDP


                          AREA ||i.DISPLAY_DrawInputPasswordBG||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawInputPasswordBG PROC
;;;5540   // 输入密码时的背景
;;;5541   void DISPLAY_DrawInputPasswordBG(uint32 param)
000000  2300              MOVS     r3,#0
;;;5542   {
;;;5543   	LCD_DrawBmpByID(0,
000002  22bf              MOVS     r2,#0xbf
000004  4619              MOV      r1,r3
000006  4618              MOV      r0,r3
000008  f7ffbffe          B.W      LCD_DrawBmpByID
;;;5544   									0,
;;;5545   									PIC_ID_INPUT_PASSWORD_BG,
;;;5546   									LCD_OPERATOR_MODE_DRAW);
;;;5547   }
;;;5548   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsAmpLimit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsAmpLimit PROC
;;;6140   // 显示高级菜单限流
;;;6141   void DISPLAY_DrawMenuAdvSettingsAmpLimit(uint32 ulBuff)
000000  4770              BX       lr
;;;6142   {	
;;;6143   //	uint8 value, value1, value2;
;;;6144   
;;;6145   //	value = ulBuff / 1000;
;;;6146   
;;;6147   //	CHECK_PARAM_OVER_SAME_RETURN(value, 100);
;;;6148   //	
;;;6149   //	value1 = (value / 10) & 0xFF;
;;;6150   //	value2 = (value % 10) & 0xFF;
;;;6151   
;;;6152   //	// 显示图片
;;;6153   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_X,
;;;6154   //								UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_Y,
;;;6155   //								PIC_ID_AMPAGE_LIMIT,
;;;6156   //								LCD_OPERATOR_MODE_DRAW);
;;;6157   
;;;6158   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_NUM1_X,
;;;6159   //								UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_NUM1_Y,
;;;6160   //								(PIC_ID_E)(PIC_ID_S_0 + value1),
;;;6161   //								LCD_OPERATOR_MODE_DRAW);
;;;6162   //								
;;;6163   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_NUM2_X,
;;;6164   //								UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_NUM2_Y,
;;;6165   //								(PIC_ID_E)(PIC_ID_S_0 + value2),
;;;6166   //								LCD_OPERATOR_MODE_DRAW);
;;;6167   }
;;;6168   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsBack||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsBack PROC
;;;6201   // 显示高级菜单返回
;;;6202   void DISPLAY_DrawMenuAdvSettingsBack(uint32 ulBuff)
000000  4770              BX       lr
;;;6203   {	
;;;6204   
;;;6205   //	// 显示图片
;;;6206   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_BACK_X,
;;;6207   //								UI_ITEM_COODINATE_MENU2_ADV_BACK_Y,
;;;6208   //								PIC_ID_BACK,
;;;6209   //								LCD_OPERATOR_MODE_DRAW);
;;;6210   }
;;;6211   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsBatteryInfo||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsBatteryInfo PROC
;;;6041   // 显示高级菜单电量获取方式
;;;6042   void DISPLAY_DrawMenuAdvSettingsBatteryInfo(uint32 ulBuff)
000000  4770              BX       lr
;;;6043   {	
;;;6044   //	// 显示图片
;;;6045   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_X,
;;;6046   //								UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_Y,
;;;6047   //								PIC_ID_BATTERY_INFO,
;;;6048   //								LCD_OPERATOR_MODE_DRAW);
;;;6049   
;;;6050   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_NUM_X,
;;;6051   //								UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_NUM_Y,
;;;6052   //								PIC_ID_UART_VOLT,
;;;6053   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;6054   //	
;;;6055   //	switch (ulBuff)
;;;6056   //	{
;;;6057   //		case 0:
;;;6058   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_NUM_X,
;;;6059   //								UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_NUM_Y,
;;;6060   //								PIC_ID_UART_VOLT,
;;;6061   //								LCD_OPERATOR_MODE_DRAW);
;;;6062   //			break;
;;;6063   
;;;6064   //		case 1:
;;;6065   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_NUM_X,
;;;6066   //								UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_NUM_Y,
;;;6067   //								PIC_ID_UART,
;;;6068   //								LCD_OPERATOR_MODE_DRAW);
;;;6069   //			break;
;;;6070   
;;;6071   //		case 2:
;;;6072   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_NUM_X,
;;;6073   //								UI_ITEM_COODINATE_MENU2_ADV_BATTERY_INFO_NUM_Y,
;;;6074   //								PIC_ID_ADAPTIVE,
;;;6075   //								LCD_OPERATOR_MODE_DRAW);
;;;6076   //			break;
;;;6077   
;;;6078   //		default:
;;;6079   //			break;
;;;6080   //	}						
;;;6081   }
;;;6082   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsCursor||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsCursor PROC
;;;6212   // 显示高级菜单光标
;;;6213   void DISPLAY_DrawMenuAdvSettingsCursor(uint32 ulBuff)
000000  4770              BX       lr
;;;6214   {
;;;6215   //	uint8 value1, value2;
;;;6216   
;;;6217   //	value1 = (ulBuff >> 4) & 0x0F;
;;;6218   //	value2 = ulBuff & 0x0F;
;;;6219   //	
;;;6220   //	// 数据下标背景色
;;;6221   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_X,
;;;6222   //						UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_Y,
;;;6223   //						PIC_ID_LINE,
;;;6224   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6225   //	
;;;6226   //	// 数据下标背景色
;;;6227   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR2_X,
;;;6228   //						UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR2_Y,
;;;6229   //						PIC_ID_LINE,
;;;6230   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6231   //	
;;;6232   //	// 数据下标背景色
;;;6233   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_X,
;;;6234   //						UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_Y,
;;;6235   //						PIC_ID_LINE,
;;;6236   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6237   //						
;;;6238   //	// 数据下标背景色
;;;6239   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_X,
;;;6240   //						UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_Y,
;;;6241   //						PIC_ID_LINE,
;;;6242   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6243   //						
;;;6244   //	// 数据下标背景色
;;;6245   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_MAGNETICS_CURSOR_X,
;;;6246   //						UI_ITEM_COODINATE_MENU2_ADV_MAGNETICS_CURSOR_Y,
;;;6247   //						PIC_ID_LINE,
;;;6248   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6249   //						
;;;6250   //	// 数据下标背景色
;;;6251   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_CURSOR_X,
;;;6252   //						UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_CURSOR_Y,
;;;6253   //						PIC_ID_LINE,
;;;6254   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6255   //	// 数据下标背景色					
;;;6256   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_CURSOR_X,
;;;6257   //						UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_CURSOR_Y,
;;;6258   //						PIC_ID_LINE,
;;;6259   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6260   //	// 数据下标背景色				
;;;6261   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_CURSOR_X,
;;;6262   //						UI_ITEM_COODINATE_MENU2_ADV_SPEED_CURSOR_Y,
;;;6263   //						PIC_ID_LINE,
;;;6264   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6265   //	
;;;6266   //	// 光标背景色
;;;6267   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR1_X,
;;;6268   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR1_Y,
;;;6269   //						PIC_ID_CHOOSE,
;;;6270   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6271   //	
;;;6272   //	// 光标背景色
;;;6273   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR2_X,
;;;6274   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR2_Y,
;;;6275   //						PIC_ID_CHOOSE,
;;;6276   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6277   //	
;;;6278   //	// 光标背景色
;;;6279   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR3_X,
;;;6280   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR3_Y,
;;;6281   //						PIC_ID_CHOOSE,
;;;6282   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6283   //						
;;;6284   //	// 光标背景色
;;;6285   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_X,
;;;6286   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_Y,
;;;6287   //						PIC_ID_CHOOSE,
;;;6288   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6289   
;;;6290   //	// 光标背景色
;;;6291   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_X,
;;;6292   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_Y,
;;;6293   //						PIC_ID_CHOOSE,
;;;6294   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6295   
;;;6296   //	// 光标背景色
;;;6297   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR6_X,
;;;6298   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR6_Y,
;;;6299   //						PIC_ID_CHOOSE,
;;;6300   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6301   
;;;6302   //	// 光标背景色
;;;6303   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR7_X,
;;;6304   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR7_Y,
;;;6305   //						PIC_ID_CHOOSE,
;;;6306   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6307   
;;;6308   //	// 光标背景色
;;;6309   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR8_X,
;;;6310   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR8_Y,
;;;6311   //						PIC_ID_CHOOSE,
;;;6312   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6313   
;;;6314   //	// 光标背景色
;;;6315   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR9_X,
;;;6316   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR9_Y,
;;;6317   //						PIC_ID_CHOOSE,
;;;6318   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6319   
;;;6320   //	// 光标背景色
;;;6321   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR10_X,
;;;6322   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR10_Y,
;;;6323   //						PIC_ID_CHOOSE,
;;;6324   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6325   
;;;6326   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR11_X,
;;;6327   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR11_Y,
;;;6328   //						PIC_ID_CHOOSE,
;;;6329   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6330   //	switch (value1)
;;;6331   //	{
;;;6332   //		case 0:
;;;6333   //			// 背景色
;;;6334   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR1_X,
;;;6335   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR1_Y,
;;;6336   //								PIC_ID_CHOOSE,
;;;6337   //								LCD_OPERATOR_MODE_DRAW);
;;;6338   //			
;;;6339   //			switch (value2)
;;;6340   //			{
;;;6341   //				case 1:
;;;6342   //					LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_X,
;;;6343   //								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_Y,
;;;6344   //								PIC_ID_LINE,
;;;6345   //								LCD_OPERATOR_MODE_DRAW);
;;;6346   //					break;
;;;6347   
;;;6348   //				case 2:
;;;6349   //					LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR2_X,
;;;6350   //								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR2_Y,
;;;6351   //								PIC_ID_LINE,
;;;6352   //								LCD_OPERATOR_MODE_DRAW);
;;;6353   //					break;
;;;6354   
;;;6355   //				default:
;;;6356   //					break;
;;;6357   //				
;;;6358   //			}
;;;6359   //	
;;;6360   //			break;
;;;6361   //			
;;;6362   //		case 1:
;;;6363   //			// 背景色
;;;6364   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR2_X,
;;;6365   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR2_Y,
;;;6366   //								PIC_ID_CHOOSE,
;;;6367   //								LCD_OPERATOR_MODE_DRAW);
;;;6368   
;;;6369   //			switch (value2)
;;;6370   //			{
;;;6371   //				case 1:
;;;6372   //					LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_X,
;;;6373   //								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_Y,
;;;6374   //								PIC_ID_LINE,
;;;6375   //								LCD_OPERATOR_MODE_DRAW);
;;;6376   //					break;
;;;6377   
;;;6378   //				case 2:
;;;6379   //					LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_X,
;;;6380   //								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_Y,
;;;6381   //								PIC_ID_LINE,
;;;6382   //								LCD_OPERATOR_MODE_DRAW);
;;;6383   //					break;
;;;6384   
;;;6385   //				default:
;;;6386   //					break;
;;;6387   //				
;;;6388   //			}
;;;6389   //			break;
;;;6390   
;;;6391   //		case 2:
;;;6392   //			// 背景色
;;;6393   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR3_X,
;;;6394   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR3_Y,
;;;6395   //								PIC_ID_CHOOSE,
;;;6396   //								LCD_OPERATOR_MODE_DRAW);
;;;6397   //			break;
;;;6398   //			
;;;6399   //		case 3:
;;;6400   //			// 背景色
;;;6401   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_X,
;;;6402   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_Y,
;;;6403   //								PIC_ID_CHOOSE,
;;;6404   //								LCD_OPERATOR_MODE_DRAW);
;;;6405   
;;;6406   //			if (value2)
;;;6407   //			{
;;;6408   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_MAGNETICS_CURSOR_X,
;;;6409   //								UI_ITEM_COODINATE_MENU2_ADV_MAGNETICS_CURSOR_Y,
;;;6410   //								PIC_ID_LINE,
;;;6411   //								LCD_OPERATOR_MODE_DRAW);
;;;6412   //			}
;;;6413   //			break;
;;;6414   
;;;6415   //		case 4:
;;;6416   //			// 显示图片
;;;6417   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_X,
;;;6418   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_Y,
;;;6419   //								PIC_ID_CHOOSE,
;;;6420   //								LCD_OPERATOR_MODE_DRAW);	
;;;6421   
;;;6422   //			if (value2)
;;;6423   //			{
;;;6424   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_CURSOR_X,
;;;6425   //								UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_CURSOR_Y,
;;;6426   //								PIC_ID_LINE,
;;;6427   //								LCD_OPERATOR_MODE_DRAW);
;;;6428   //			}
;;;6429   //			
;;;6430   //			break;
;;;6431   
;;;6432   //		case 5:
;;;6433   //			// 显示图片
;;;6434   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR6_X,
;;;6435   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR6_Y,
;;;6436   //								PIC_ID_CHOOSE,
;;;6437   //								LCD_OPERATOR_MODE_DRAW);	
;;;6438   
;;;6439   //			break;
;;;6440   
;;;6441   //		case 6:
;;;6442   //			// 显示图片
;;;6443   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR7_X,
;;;6444   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR7_Y,
;;;6445   //								PIC_ID_CHOOSE,
;;;6446   //								LCD_OPERATOR_MODE_DRAW);	
;;;6447   //			break;
;;;6448   
;;;6449   //		case 7:
;;;6450   //			// 显示图片
;;;6451   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR8_X,
;;;6452   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR8_Y,
;;;6453   //								PIC_ID_CHOOSE,
;;;6454   //								LCD_OPERATOR_MODE_DRAW);	
;;;6455   //			break;
;;;6456   
;;;6457   //		case 8:
;;;6458   //			// 显示图片
;;;6459   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR9_X,
;;;6460   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR9_Y,
;;;6461   //								PIC_ID_CHOOSE,
;;;6462   //								LCD_OPERATOR_MODE_DRAW);
;;;6463   
;;;6464   //			if (value2)
;;;6465   //			{
;;;6466   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_CURSOR_X,
;;;6467   //								UI_ITEM_COODINATE_MENU2_ADV_AMP_LIMIT_CURSOR_Y,
;;;6468   //								PIC_ID_LINE,
;;;6469   //								LCD_OPERATOR_MODE_DRAW);
;;;6470   //			}
;;;6471   //			break;
;;;6472   
;;;6473   //		case 9:
;;;6474   //			// 显示图片
;;;6475   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR10_X,
;;;6476   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR10_Y,
;;;6477   //								PIC_ID_CHOOSE,
;;;6478   //								LCD_OPERATOR_MODE_DRAW);	
;;;6479   
;;;6480   //			if (value2)
;;;6481   //			{
;;;6482   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_CURSOR_X,
;;;6483   //								UI_ITEM_COODINATE_MENU2_ADV_SPEED_CURSOR_Y,
;;;6484   //								PIC_ID_LINE,
;;;6485   //								LCD_OPERATOR_MODE_DRAW);
;;;6486   //			}
;;;6487   //			break;
;;;6488   
;;;6489   //		case 10:
;;;6490   //			// 显示图片
;;;6491   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR11_X,
;;;6492   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR11_Y,
;;;6493   //								PIC_ID_CHOOSE,
;;;6494   //								LCD_OPERATOR_MODE_DRAW);	
;;;6495   //			break;
;;;6496   
;;;6497   //		default:
;;;6498   //			break;
;;;6499   //	}
;;;6500   }
;;;6501   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsMagnetics||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsMagnetics PROC
;;;5974   // 显示高级菜单测速磁钢数
;;;5975   void DISPLAY_DrawMenuAdvSettingsMagnetics(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;5976   {	
;;;5977   	uint8 value1, value2;
;;;5978   	uint8 enterVal = (uint8)(ulBuff & 0xFF);
000002  b2c3              UXTB     r3,r0
;;;5979   	uint16 SensorValue = (uint16)((ulBuff >> 16) & 0xFFFF);
000004  0c00              LSRS     r0,r0,#16
;;;5980   	
;;;5981   	CHECK_PARAM_OVER_SAME_RETURN(SensorValue, 100);
000006  2864              CMP      r0,#0x64
000008  d22a              BCS      |L48.96|
;;;5982   	
;;;5983   	value1 = (SensorValue / 10) & 0xFF;
00000a  210a              MOVS     r1,#0xa
00000c  fbb0f2f1          UDIV     r2,r0,r1
000010  b2d2              UXTB     r2,r2
;;;5984   	value2 = (SensorValue % 10) & 0xFF;
000012  fbb0f4f1          UDIV     r4,r0,r1
000016  fb010414          MLS      r4,r1,r4,r0
;;;5985   
;;;5986   	if (2 == enterVal)
;;;5987   	{
;;;5988   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_NUM1_X,
;;;5989   								UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_NUM1_Y,
;;;5990   								(PIC_ID_E)(PIC_ID_S_ADVMENU_0 + value1),
;;;5991   								LCD_OPERATOR_MODE_DRAW);
;;;5992   								
;;;5993   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_NUM2_X,
00001a  f2401509          MOV      r5,#0x109
00001e  2b02              CMP      r3,#2                 ;5986
000020  d00e              BEQ      |L48.64|
;;;5994   								UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_NUM2_Y,
;;;5995   								(PIC_ID_E)(PIC_ID_S_ADVMENU_0 + value2),
;;;5996   								LCD_OPERATOR_MODE_DRAW);
;;;5997   	}
;;;5998   	else
;;;5999   	{
;;;6000   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_NUM1_X,
000022  2300              MOVS     r3,#0
000024  3286              ADDS     r2,r2,#0x86
000026  2168              MOVS     r1,#0x68
000028  20fd              MOVS     r0,#0xfd
00002a  f7fffffe          BL       LCD_DrawBmpByID
;;;6001   								UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_NUM1_Y,
;;;6002   								(PIC_ID_E)(PIC_ID_G_ADVMENU_0 + value1),
;;;6003   								LCD_OPERATOR_MODE_DRAW);
;;;6004   								
;;;6005   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_NUM2_X,
00002e  f1040286          ADD      r2,r4,#0x86
000032  4628              MOV      r0,r5
000034  e8bd4070          POP      {r4-r6,lr}
000038  2300              MOVS     r3,#0
00003a  2168              MOVS     r1,#0x68
00003c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L48.64|
000040  2300              MOVS     r3,#0                 ;5988
000042  f50272c5          ADD      r2,r2,#0x18a          ;5988
000046  2168              MOVS     r1,#0x68              ;5988
000048  20fd              MOVS     r0,#0xfd              ;5988
00004a  f7fffffe          BL       LCD_DrawBmpByID
00004e  f50472c5          ADD      r2,r4,#0x18a          ;5993
000052  4628              MOV      r0,r5                 ;5993
000054  e8bd4070          POP      {r4-r6,lr}            ;5993
000058  2300              MOVS     r3,#0                 ;5993
00005a  2168              MOVS     r1,#0x68              ;5993
00005c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L48.96|
;;;6006   								UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_NUM2_Y,
;;;6007   								(PIC_ID_E)(PIC_ID_G_ADVMENU_0 + value2),
;;;6008   								LCD_OPERATOR_MODE_DRAW);
;;;6009   	}
;;;6010   								
;;;6011   	
;;;6012   }
000060  bd70              POP      {r4-r6,pc}
;;;6013   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsProtocol||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsProtocol PROC
;;;6014   // 显示高级菜单通信协议
;;;6015   void DISPLAY_DrawMenuAdvSettingsProtocol(uint32 ulBuff)
000000  4770              BX       lr
;;;6016   {	
;;;6017   //	uint8 value1, value2;
;;;6018   
;;;6019   //	CHECK_PARAM_OVER_SAME_RETURN(ulBuff, 100);
;;;6020   //	
;;;6021   //	value1 = (ulBuff / 10) & 0xFF;
;;;6022   //	value2 = (ulBuff % 10) & 0xFF;
;;;6023   //	
;;;6024   //	// 显示图片
;;;6025   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_X,
;;;6026   //								UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_Y,
;;;6027   //								PIC_ID_PROTOCOL,
;;;6028   //								LCD_OPERATOR_MODE_DRAW);
;;;6029   //								
;;;6030   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_NUM1_X,
;;;6031   //								UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_NUM1_Y,
;;;6032   //								(PIC_ID_E)(PIC_ID_S_0 + value1),
;;;6033   //								LCD_OPERATOR_MODE_DRAW);
;;;6034   //								
;;;6035   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_NUM2_X,
;;;6036   //								UI_ITEM_COODINATE_MENU2_ADV_PROTOCOL_NUM2_Y,
;;;6037   //								(PIC_ID_E)(PIC_ID_S_0 + value2),
;;;6038   //								LCD_OPERATOR_MODE_DRAW);
;;;6039   }
;;;6040   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsSpeedLimit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsSpeedLimit PROC
;;;6169   // 显示高级菜单限速
;;;6170   void DISPLAY_DrawMenuAdvSettingsSpeedLimit(uint32 ulBuff)
000000  4770              BX       lr
;;;6171   {	
;;;6172   //	uint8 value1, value2;
;;;6173   
;;;6174   //	CHECK_PARAM_OVER_SAME_RETURN(ulBuff, 1000);
;;;6175   //	
;;;6176   //	value1 = (ulBuff / 100) & 0xFF;
;;;6177   //	value2 = ((ulBuff % 100) / 10) & 0xFF;
;;;6178   
;;;6179   //	// 显示图片
;;;6180   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_LIMIT_X,
;;;6181   //								UI_ITEM_COODINATE_MENU2_ADV_SPEED_LIMIT_Y,
;;;6182   //								PIC_ID_SPEED_LIMIT,
;;;6183   //								LCD_OPERATOR_MODE_DRAW);
;;;6184   
;;;6185   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_NUM1_X,
;;;6186   //								UI_ITEM_COODINATE_MENU2_ADV_SPEED_NUM1_Y,
;;;6187   //								(PIC_ID_E)(PIC_ID_S_0 + value1),
;;;6188   //								LCD_OPERATOR_MODE_DRAW);
;;;6189   //								
;;;6190   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_NUM2_X,
;;;6191   //								UI_ITEM_COODINATE_MENU2_ADV_SPEED_NUM2_Y,
;;;6192   //								(PIC_ID_E)(PIC_ID_S_0 + value2),
;;;6193   //								LCD_OPERATOR_MODE_DRAW);
;;;6194   
;;;6195   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_UNIT_X,
;;;6196   //								UI_ITEM_COODINATE_MENU2_ADV_SPEED_UNIT_Y,
;;;6197   //								PIC_ID_KM_H,
;;;6198   //								LCD_OPERATOR_MODE_DRAW);
;;;6199   }
;;;6200   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsTurnHandle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsTurnHandle PROC
;;;5927   
;;;5928   void DISPLAY_DrawMenuAdvSettingsTurnHandle(uint32 ulBuff)
000000  b2c1              UXTB     r1,r0
;;;5929   {
;;;5930   	uint8 enterVal = (uint8)(ulBuff & 0xFF);
;;;5931   	uint16 TurnValue = (uint16)((ulBuff >> 16) & 0xFFFF);
000002  0c00              LSRS     r0,r0,#16
;;;5932   	
;;;5933   	if (5 == enterVal)
000004  2905              CMP      r1,#5
000006  d006              BEQ      |L51.22|
;;;5934   	{
;;;5935   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_TURN_HANDLE_NUM_X,
;;;5936   								UI_ITEM_COODINATE_MENU2_ADV_TURN_HANDLE_NUM_Y,
;;;5937   								(PIC_ID_E)(PIC_ID_S_OFF + TurnValue),
;;;5938   								LCD_OPERATOR_MODE_DRAW);
;;;5939   	}
;;;5940   	else
;;;5941   	{
;;;5942   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_TURN_HANDLE_NUM_X,
000008  309a              ADDS     r0,r0,#0x9a
00000a  b282              UXTH     r2,r0
00000c  2300              MOVS     r3,#0
00000e  214b              MOVS     r1,#0x4b
000010  20fd              MOVS     r0,#0xfd
000012  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L51.22|
000016  f50070cd          ADD      r0,r0,#0x19a          ;5935
00001a  b282              UXTH     r2,r0                 ;5935
00001c  2300              MOVS     r3,#0                 ;5935
00001e  214b              MOVS     r1,#0x4b              ;5935
000020  20fd              MOVS     r0,#0xfd              ;5935
000022  f7ffbffe          B.W      LCD_DrawBmpByID
;;;5943   								UI_ITEM_COODINATE_MENU2_ADV_TURN_HANDLE_NUM_Y,
;;;5944   								(PIC_ID_E)(PIC_ID_G_OFF + TurnValue),
;;;5945   								LCD_OPERATOR_MODE_DRAW);
;;;5946   		
;;;5947   	}
;;;5948   }
;;;5949   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsUartVol||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsUartVol PROC
;;;6105   // 显示高级菜单串口电平
;;;6106   void DISPLAY_DrawMenuAdvSettingsUartVol(uint32 ulBuff)
000000  4770              BX       lr
;;;6107   {	
;;;6108   //	// 显示图片
;;;6109   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_X,
;;;6110   //								UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_Y,
;;;6111   //								PIC_ID_UART_VOLTAGE,
;;;6112   //								LCD_OPERATOR_MODE_DRAW);
;;;6113   
;;;6114   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_NUM_X,
;;;6115   //								UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_NUM_Y,
;;;6116   //								PIC_ID_UART_3,
;;;6117   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;6118   //	if (ulBuff)
;;;6119   //	{
;;;6120   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_NUM_X,
;;;6121   //								UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_NUM_Y,
;;;6122   //								PIC_ID_UART_5,
;;;6123   //								LCD_OPERATOR_MODE_DRAW);
;;;6124   //	}
;;;6125   //	else
;;;6126   //	{
;;;6127   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_NUM_X,
;;;6128   //								UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_NUM_Y,
;;;6129   //								PIC_ID_UART_3,
;;;6130   //								LCD_OPERATOR_MODE_DRAW);
;;;6131   //	}
;;;6132   //	
;;;6133   //								
;;;6134   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_UNIT_X,
;;;6135   //								UI_ITEM_COODINATE_MENU2_ADV_UART_VOL_UNIT_Y,
;;;6136   //								PIC_ID_V,
;;;6137   //								LCD_OPERATOR_MODE_DRAW);
;;;6138   }
;;;6139   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsVol||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsVol PROC
;;;5835   // 显示高级菜单电池电压等级
;;;5836   void DISPLAY_DrawMenuAdvSettingsVol(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;5837   {	
;;;5838   	uint8 value;
;;;5839   	uint8 enterVal = (uint8)(ulBuff & 0xFF);
000002  b2c1              UXTB     r1,r0
;;;5840   	uint16 VolValue = (uint16)((ulBuff >> 16) & 0xFFFF);
000004  0c00              LSRS     r0,r0,#16
;;;5841   	
;;;5842   	switch (VolValue)
000006  2834              CMP      r0,#0x34
000008  d024              BEQ      |L53.84|
00000a  dc06              BGT      |L53.26|
00000c  2818              CMP      r0,#0x18
00000e  d01b              BEQ      |L53.72|
000010  2824              CMP      r0,#0x24
000012  d01b              BEQ      |L53.76|
000014  2830              CMP      r0,#0x30
000016  d104              BNE      |L53.34|
000018  e01a              B        |L53.80|
                  |L53.26|
00001a  283c              CMP      r0,#0x3c
00001c  d01c              BEQ      |L53.88|
00001e  2848              CMP      r0,#0x48
000020  d01c              BEQ      |L53.92|
                  |L53.34|
;;;5843   	{
;;;5844   		case 24:
;;;5845   			value = 0;
;;;5846   
;;;5847   			break;
;;;5848   		
;;;5849   		case 36:
;;;5850   			value = 1;
;;;5851   
;;;5852   			break;
;;;5853   
;;;5854   		case 48:
;;;5855   			value = 2;
;;;5856   
;;;5857   			break;
;;;5858   
;;;5859   		case 52:
;;;5860   			value = 3;
;;;5861   
;;;5862   			break;
;;;5863   		
;;;5864   		case 60:
;;;5865   			value = 4;
;;;5866   
;;;5867   			break;
;;;5868   
;;;5869   		case 72:
;;;5870   			value = 5;
;;;5871   
;;;5872   			break;
;;;5873   		
;;;5874   		default:
;;;5875   			value = 1;
000022  2201              MOVS     r2,#1
                  |L53.36|
;;;5876   			break;
;;;5877   	}
;;;5878   
;;;5879   	if (3 == enterVal)
;;;5880   	{
;;;5881   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_VOL_NUM_X,
;;;5882   								UI_ITEM_COODINATE_MENU2_ADV_VOL_NUM_Y,
;;;5883   								(PIC_ID_E)(PIC_ID_ADVMENU_S_24 + value),
;;;5884   								LCD_OPERATOR_MODE_DRAW);
;;;5885   								
;;;5886   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_VOL_UNIT_X,
000024  f2401415          MOV      r4,#0x115
000028  2903              CMP      r1,#3                 ;5879
00002a  d019              BEQ      |L53.96|
;;;5887   								UI_ITEM_COODINATE_MENU2_ADV_VOL_UNIT_Y,
;;;5888   								PIC_ID_S_V,
;;;5889   								LCD_OPERATOR_MODE_DRAW);
;;;5890   	}
;;;5891   	else
;;;5892   	{
;;;5893   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_VOL_NUM_X,
00002c  2300              MOVS     r3,#0
00002e  1c92              ADDS     r2,r2,#2
000030  2185              MOVS     r1,#0x85
000032  20fd              MOVS     r0,#0xfd
000034  f7fffffe          BL       LCD_DrawBmpByID
;;;5894   								UI_ITEM_COODINATE_MENU2_ADV_VOL_NUM_Y,
;;;5895   								(PIC_ID_E)(PIC_ID_ADVMENU_G_24 + value),
;;;5896   								LCD_OPERATOR_MODE_DRAW);
;;;5897   								
;;;5898   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_VOL_UNIT_X,
000038  4620              MOV      r0,r4
00003a  2300              MOVS     r3,#0
00003c  229f              MOVS     r2,#0x9f
00003e  e8bd4010          POP      {r4,lr}
000042  218b              MOVS     r1,#0x8b
000044  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L53.72|
000048  2200              MOVS     r2,#0                 ;5845
00004a  e7eb              B        |L53.36|
                  |L53.76|
00004c  2201              MOVS     r2,#1                 ;5850
00004e  e7e9              B        |L53.36|
                  |L53.80|
000050  2202              MOVS     r2,#2                 ;5855
000052  e7e7              B        |L53.36|
                  |L53.84|
000054  2203              MOVS     r2,#3                 ;5860
000056  e7e5              B        |L53.36|
                  |L53.88|
000058  2204              MOVS     r2,#4                 ;5865
00005a  e7e3              B        |L53.36|
                  |L53.92|
00005c  2205              MOVS     r2,#5                 ;5870
00005e  e7e1              B        |L53.36|
                  |L53.96|
000060  2300              MOVS     r3,#0                 ;5881
000062  3209              ADDS     r2,r2,#9              ;5881
000064  2185              MOVS     r1,#0x85              ;5881
000066  20fd              MOVS     r0,#0xfd              ;5881
000068  f7fffffe          BL       LCD_DrawBmpByID
00006c  4620              MOV      r0,r4                 ;5886
00006e  2300              MOVS     r3,#0                 ;5886
000070  e8bd4010          POP      {r4,lr}               ;5886
000074  f240129f          MOV      r2,#0x19f             ;5886
000078  218b              MOVS     r1,#0x8b              ;5886
00007a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;5899   								UI_ITEM_COODINATE_MENU2_ADV_VOL_UNIT_Y,
;;;5900   								PIC_ID_G_V,
;;;5901   								LCD_OPERATOR_MODE_DRAW);
;;;5902   	}
;;;5903   	
;;;5904   }
;;;5905   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsWalkAssist||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsWalkAssist PROC
;;;6083   // 显示高级菜单推车助力开关
;;;6084   void DISPLAY_DrawMenuAdvSettingsWalkAssist(uint32 ulBuff)
000000  4770              BX       lr
;;;6085   {	
;;;6086   //	CHECK_PARAM_OVER_SAME_RETURN(ulBuff, 2);
;;;6087   
;;;6088   //	// 显示图片
;;;6089   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WALK_ASSIST_X,
;;;6090   //								UI_ITEM_COODINATE_MENU2_ADV_WALK_ASSIST_Y,
;;;6091   //								PIC_ID_WALK_ASSIST,
;;;6092   //								LCD_OPERATOR_MODE_DRAW);
;;;6093   
;;;6094   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WALK_ASSIST_NUM_X,
;;;6095   //								UI_ITEM_COODINATE_MENU2_ADV_WALK_ASSIST_NUM_Y,
;;;6096   //								PIC_ID_OFF,
;;;6097   //								LCD_OPERATOR_MODE_BACKGROUND);								
;;;6098   //								
;;;6099   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WALK_ASSIST_NUM_X,
;;;6100   //								UI_ITEM_COODINATE_MENU2_ADV_WALK_ASSIST_NUM_Y,
;;;6101   //								(PIC_ID_E)(PIC_ID_OFF + ulBuff),
;;;6102   //								LCD_OPERATOR_MODE_DRAW);					
;;;6103   }
;;;6104   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsWalkMode||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsWalkMode PROC
;;;5905   
;;;5906   void DISPLAY_DrawMenuAdvSettingsWalkMode(uint32 ulBuff)
000000  b2c1              UXTB     r1,r0
;;;5907   {
;;;5908   	uint8 enterVal = (uint8)(ulBuff & 0xFF);
;;;5909   	uint16 WorkValue = (uint16)((ulBuff >> 16) & 0xFFFF);
000002  0c00              LSRS     r0,r0,#16
;;;5910   	
;;;5911   	if (4 == enterVal)
000004  2904              CMP      r1,#4
000006  d006              BEQ      |L55.22|
;;;5912   	{
;;;5913   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WALK_NUM_X,
;;;5914   								UI_ITEM_COODINATE_MENU2_ADV_WALK_NUM_Y,
;;;5915   								(PIC_ID_E)(PIC_ID_S_OFF + WorkValue),
;;;5916   								LCD_OPERATOR_MODE_DRAW);
;;;5917   	}
;;;5918   	else
;;;5919   	{
;;;5920   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WALK_NUM_X,
000008  309a              ADDS     r0,r0,#0x9a
00000a  b282              UXTH     r2,r0
00000c  2300              MOVS     r3,#0
00000e  212b              MOVS     r1,#0x2b
000010  20fd              MOVS     r0,#0xfd
000012  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L55.22|
000016  f50070cd          ADD      r0,r0,#0x19a          ;5913
00001a  b282              UXTH     r2,r0                 ;5913
00001c  2300              MOVS     r3,#0                 ;5913
00001e  212b              MOVS     r1,#0x2b              ;5913
000020  20fd              MOVS     r0,#0xfd              ;5913
000022  f7ffbffe          B.W      LCD_DrawBmpByID
;;;5921   								UI_ITEM_COODINATE_MENU2_ADV_WALK_NUM_Y,
;;;5922   								(PIC_ID_E)(PIC_ID_G_OFF + WorkValue),
;;;5923   								LCD_OPERATOR_MODE_DRAW);
;;;5924   		
;;;5925   	}
;;;5926   }
;;;5927   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsWheelMeter||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsWheelMeter PROC
;;;5765   // 显示高级菜单周长
;;;5766   void DISPLAY_DrawMenuAdvSettingsWheelMeter(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;5767   {
;;;5768   	uint8 value1, value2, value3, value4;
;;;5769   	uint8 enterVal = (uint8)(ulBuff & 0xFF);
000004  b2c3              UXTB     r3,r0
;;;5770   	uint16 MeterValue = (uint16)((ulBuff >> 16) & 0xFFFF);
000006  0c00              LSRS     r0,r0,#16
;;;5771   	
;;;5772   	CHECK_PARAM_OVER_SAME_RETURN(MeterValue, 10000);
000008  f2427110          MOV      r1,#0x2710
00000c  4288              CMP      r0,r1
00000e  d264              BCS      |L56.218|
;;;5773   	
;;;5774   	value1 = (MeterValue / 1000) & 0xFF;
000010  f44f717a          MOV      r1,#0x3e8
000014  fbb0f2f1          UDIV     r2,r0,r1
000018  b2d2              UXTB     r2,r2
;;;5775   	value2 = ((MeterValue % 1000) / 100) & 0xFF;
00001a  fbb0f4f1          UDIV     r4,r0,r1
00001e  fb010414          MLS      r4,r1,r4,r0
000022  2164              MOVS     r1,#0x64
000024  fbb4f4f1          UDIV     r4,r4,r1
000028  b2e4              UXTB     r4,r4
;;;5776   	value3 = ((MeterValue % 100) / 10) & 0xFF;
00002a  fbb0f5f1          UDIV     r5,r0,r1
00002e  fb010515          MLS      r5,r1,r5,r0
000032  210a              MOVS     r1,#0xa
000034  fbb5f5f1          UDIV     r5,r5,r1
;;;5777   	value4 = (MeterValue % 10) & 0xFF;
000038  fbb0f6f1          UDIV     r6,r0,r1
00003c  fb010616          MLS      r6,r1,r6,r0
;;;5778   	
;;;5779   	if (1 == enterVal)
;;;5780   	{
;;;5781   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM1_X,
;;;5782   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM1_Y,
;;;5783   								(PIC_ID_E)(PIC_ID_S_ADVMENU_0 + value1),
;;;5784   								LCD_OPERATOR_MODE_DRAW);
;;;5785   								
;;;5786   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM2_X,
;;;5787   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM2_Y,
;;;5788   									(PIC_ID_E)(PIC_ID_S_ADVMENU_0 + value2),
;;;5789   									LCD_OPERATOR_MODE_DRAW);
;;;5790   									
;;;5791   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM3_X,
;;;5792   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM3_Y,
;;;5793   									(PIC_ID_E)(PIC_ID_S_ADVMENU_0 + value3),
;;;5794   									LCD_OPERATOR_MODE_DRAW);
;;;5795   
;;;5796   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM4_X,
000040  f2401709          MOV      r7,#0x109
;;;5797   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM4_Y,
;;;5798   									(PIC_ID_E)(PIC_ID_S_ADVMENU_0 + value4),
;;;5799   									LCD_OPERATOR_MODE_DRAW);
;;;5800   									
;;;5801   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_UNIT_X,
000044  f44f788b          MOV      r8,#0x116
000048  2b01              CMP      r3,#1                 ;5779
00004a  d022              BEQ      |L56.146|
;;;5802   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_UNIT_Y,
;;;5803   									PIC_ID_MM_1,
;;;5804   									LCD_OPERATOR_MODE_DRAW);
;;;5805   	}
;;;5806   	else
;;;5807   	{
;;;5808   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM1_X,
00004c  2300              MOVS     r3,#0
00004e  3286              ADDS     r2,r2,#0x86
000050  214b              MOVS     r1,#0x4b
000052  20e5              MOVS     r0,#0xe5
000054  f7fffffe          BL       LCD_DrawBmpByID
;;;5809   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM1_Y,
;;;5810   								(PIC_ID_E)(PIC_ID_G_ADVMENU_0 + value1),
;;;5811   								LCD_OPERATOR_MODE_DRAW);
;;;5812   								
;;;5813   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM2_X,
000058  2300              MOVS     r3,#0
00005a  f1040286          ADD      r2,r4,#0x86
00005e  214b              MOVS     r1,#0x4b
000060  20f1              MOVS     r0,#0xf1
000062  f7fffffe          BL       LCD_DrawBmpByID
;;;5814   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM2_Y,
;;;5815   									(PIC_ID_E)(PIC_ID_G_ADVMENU_0 + value2),
;;;5816   									LCD_OPERATOR_MODE_DRAW);
;;;5817   									
;;;5818   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM3_X,
000066  2300              MOVS     r3,#0
000068  f1050286          ADD      r2,r5,#0x86
00006c  214b              MOVS     r1,#0x4b
00006e  20fd              MOVS     r0,#0xfd
000070  f7fffffe          BL       LCD_DrawBmpByID
;;;5819   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM3_Y,
;;;5820   									(PIC_ID_E)(PIC_ID_G_ADVMENU_0 + value3),
;;;5821   									LCD_OPERATOR_MODE_DRAW);
;;;5822   
;;;5823   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM4_X,
000074  2300              MOVS     r3,#0
000076  f1060286          ADD      r2,r6,#0x86
00007a  214b              MOVS     r1,#0x4b
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       LCD_DrawBmpByID
;;;5824   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_NUM4_Y,
;;;5825   									(PIC_ID_E)(PIC_ID_G_ADVMENU_0 + value4),
;;;5826   									LCD_OPERATOR_MODE_DRAW);
;;;5827   									
;;;5828   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_UNIT_X,
000082  4640              MOV      r0,r8
000084  e8bd41f0          POP      {r4-r8,lr}
000088  2300              MOVS     r3,#0
00008a  22f5              MOVS     r2,#0xf5
00008c  2152              MOVS     r1,#0x52
00008e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L56.146|
000092  2300              MOVS     r3,#0                 ;5781
000094  f50272c5          ADD      r2,r2,#0x18a          ;5781
000098  214b              MOVS     r1,#0x4b              ;5781
00009a  20e5              MOVS     r0,#0xe5              ;5781
00009c  f7fffffe          BL       LCD_DrawBmpByID
0000a0  2300              MOVS     r3,#0                 ;5786
0000a2  f50472c5          ADD      r2,r4,#0x18a          ;5786
0000a6  214b              MOVS     r1,#0x4b              ;5786
0000a8  20f1              MOVS     r0,#0xf1              ;5786
0000aa  f7fffffe          BL       LCD_DrawBmpByID
0000ae  2300              MOVS     r3,#0                 ;5791
0000b0  f50572c5          ADD      r2,r5,#0x18a          ;5791
0000b4  214b              MOVS     r1,#0x4b              ;5791
0000b6  20fd              MOVS     r0,#0xfd              ;5791
0000b8  f7fffffe          BL       LCD_DrawBmpByID
0000bc  2300              MOVS     r3,#0                 ;5796
0000be  f50672c5          ADD      r2,r6,#0x18a          ;5796
0000c2  214b              MOVS     r1,#0x4b              ;5796
0000c4  4638              MOV      r0,r7                 ;5796
0000c6  f7fffffe          BL       LCD_DrawBmpByID
0000ca  4640              MOV      r0,r8                 ;5801
0000cc  e8bd41f0          POP      {r4-r8,lr}            ;5801
0000d0  2300              MOVS     r3,#0                 ;5801
0000d2  22f4              MOVS     r2,#0xf4              ;5801
0000d4  2152              MOVS     r1,#0x52              ;5801
0000d6  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L56.218|
;;;5829   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_UNIT_Y,
;;;5830   									PIC_ID_MM_2,
;;;5831   									LCD_OPERATOR_MODE_DRAW);
;;;5832   	}
;;;5833   }
0000da  e8bd81f0          POP      {r4-r8,pc}
;;;5834   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvSettingsWheelSize||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvSettingsWheelSize PROC
;;;5716   // 显示高级菜单轮径
;;;5717   void DISPLAY_DrawMenuAdvSettingsWheelSize(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;5718   {
;;;5719   	uint8 value1, value2, value3;
;;;5720   	uint8 enterVal = (uint8)(ulBuff & 0xFF);
000002  b2c3              UXTB     r3,r0
;;;5721   	uint16 wheelSizeValue = (uint16)((ulBuff >> 16) & 0xFFFF);
000004  0c00              LSRS     r0,r0,#16
;;;5722   	
;;;5723   	CHECK_PARAM_OVER_SAME_RETURN(wheelSizeValue, 1000);
000006  f5b07f7a          CMP      r0,#0x3e8
00000a  d23e              BCS      |L57.138|
;;;5724   	
;;;5725   	value1 = (wheelSizeValue / 100) & 0xFF;
00000c  2164              MOVS     r1,#0x64
00000e  fbb0f2f1          UDIV     r2,r0,r1
000012  b2d2              UXTB     r2,r2
;;;5726   	value2 = ((wheelSizeValue % 100) / 10) & 0xFF;
000014  fbb0f4f1          UDIV     r4,r0,r1
000018  fb010414          MLS      r4,r1,r4,r0
00001c  210a              MOVS     r1,#0xa
00001e  fbb4f4f1          UDIV     r4,r4,r1
;;;5727   	value3 = (wheelSizeValue % 10) & 0xFF;
000022  fbb0f5f1          UDIV     r5,r0,r1
000026  fb010515          MLS      r5,r1,r5,r0
;;;5728   	
;;;5729   	if (0 == enterVal)
;;;5730   	{
;;;5731   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM1_X,
;;;5732   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM1_Y,
;;;5733   								(PIC_ID_E)(PIC_ID_S_ADVMENU_0 + value1),
;;;5734   								LCD_OPERATOR_MODE_DRAW);
;;;5735   								
;;;5736   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM2_X,
;;;5737   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM2_Y,
;;;5738   									(PIC_ID_E)(PIC_ID_S_ADVMENU_0 + value2),
;;;5739   									LCD_OPERATOR_MODE_DRAW);
;;;5740   									
;;;5741   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM3_X,
00002a  f2401609          MOV      r6,#0x109
00002e  b1ab              CBZ      r3,|L57.92|
;;;5742   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM3_Y,
;;;5743   									(PIC_ID_E)(PIC_ID_S_ADVMENU_0 + value3),
;;;5744   									LCD_OPERATOR_MODE_DRAW);
;;;5745   	}
;;;5746   	else
;;;5747   	{
;;;5748   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM1_X,
000030  2300              MOVS     r3,#0
000032  3286              ADDS     r2,r2,#0x86
000034  212b              MOVS     r1,#0x2b
000036  20f1              MOVS     r0,#0xf1
000038  f7fffffe          BL       LCD_DrawBmpByID
;;;5749   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM1_Y,
;;;5750   								(PIC_ID_E)(PIC_ID_G_ADVMENU_0 + value1),
;;;5751   								LCD_OPERATOR_MODE_DRAW);
;;;5752   								
;;;5753   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM2_X,
00003c  2300              MOVS     r3,#0
00003e  f1040286          ADD      r2,r4,#0x86
000042  212b              MOVS     r1,#0x2b
000044  20fd              MOVS     r0,#0xfd
000046  f7fffffe          BL       LCD_DrawBmpByID
;;;5754   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM2_Y,
;;;5755   									(PIC_ID_E)(PIC_ID_G_ADVMENU_0 + value2),
;;;5756   									LCD_OPERATOR_MODE_DRAW);
;;;5757   									
;;;5758   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM3_X,
00004a  f1050286          ADD      r2,r5,#0x86
00004e  4630              MOV      r0,r6
000050  e8bd4070          POP      {r4-r6,lr}
000054  2300              MOVS     r3,#0
000056  212b              MOVS     r1,#0x2b
000058  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L57.92|
00005c  2300              MOVS     r3,#0                 ;5731
00005e  f50272c5          ADD      r2,r2,#0x18a          ;5731
000062  212b              MOVS     r1,#0x2b              ;5731
000064  20f1              MOVS     r0,#0xf1              ;5731
000066  f7fffffe          BL       LCD_DrawBmpByID
00006a  2300              MOVS     r3,#0                 ;5736
00006c  f50472c5          ADD      r2,r4,#0x18a          ;5736
000070  212b              MOVS     r1,#0x2b              ;5736
000072  20fd              MOVS     r0,#0xfd              ;5736
000074  f7fffffe          BL       LCD_DrawBmpByID
000078  f50572c5          ADD      r2,r5,#0x18a          ;5741
00007c  4630              MOV      r0,r6                 ;5741
00007e  e8bd4070          POP      {r4-r6,lr}            ;5741
000082  2300              MOVS     r3,#0                 ;5741
000084  212b              MOVS     r1,#0x2b              ;5741
000086  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L57.138|
;;;5759   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_NUM3_Y,
;;;5760   									(PIC_ID_E)(PIC_ID_G_ADVMENU_0 + value3),
;;;5761   									LCD_OPERATOR_MODE_DRAW);
;;;5762   	}						
;;;5763   }
00008a  bd70              POP      {r4-r6,pc}
;;;5764   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedPasswordChooseCursor||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedPasswordChooseCursor PROC
;;;5118   // 进入高级菜单密码登录标题
;;;5119   void DISPLAY_DrawMenuAdvancedPasswordChooseCursor(uint32 ulBuff)
000000  4770              BX       lr
;;;5120   {
;;;5121   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_X,
;;;5122   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_Y,
;;;5123   //						PIC_ID_CHOOSE,
;;;5124   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;5125   
;;;5126   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_X,
;;;5127   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_Y,
;;;5128   //						PIC_ID_CHOOSE,
;;;5129   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;5130   //	
;;;5131   //	switch (ulBuff)
;;;5132   //	{
;;;5133   //		case 3:
;;;5134   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_X,
;;;5135   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_Y,
;;;5136   //						PIC_ID_CHOOSE,
;;;5137   //						LCD_OPERATOR_MODE_DRAW);
;;;5138   //			break;
;;;5139   //		case 4:
;;;5140   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_X,
;;;5141   //						UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_Y,
;;;5142   //						PIC_ID_CHOOSE,
;;;5143   //						LCD_OPERATOR_MODE_DRAW);
;;;5144   //			break;
;;;5145   
;;;5146   //		default:
;;;5147   //			break;
;;;5148   //	}
;;;5149   }
;;;5150   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedPasswordChooseSet||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedPasswordChooseSet PROC
;;;5084   // 进入高级菜单密码登录标题
;;;5085   void DISPLAY_DrawMenuAdvancedPasswordChooseSet(uint32 ulBuff)
000000  4770              BX       lr
;;;5086   {
;;;5087   //	// 刷背景
;;;5088   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_SET_X,
;;;5089   //						UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_SET_Y,
;;;5090   //						PIC_ID_OFF,
;;;5091   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;5092   //	if (ulBuff)
;;;5093   //	{
;;;5094   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_SET_X,
;;;5095   //						UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_SET_Y,
;;;5096   //						PIC_ID_OFF,
;;;5097   //						LCD_OPERATOR_MODE_DRAW);
;;;5098   
;;;5099   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE2_X,
;;;5100   //						UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE2_Y,
;;;5101   //						PIC_ID_CHANGE_PASSWORD_GREY,
;;;5102   //						LCD_OPERATOR_MODE_DRAW);
;;;5103   //	}
;;;5104   //	else
;;;5105   //	{
;;;5106   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_SET_X,
;;;5107   //						UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_SET_Y,
;;;5108   //						PIC_ID_ON,
;;;5109   //						LCD_OPERATOR_MODE_DRAW);
;;;5110   
;;;5111   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE2_X,
;;;5112   //						UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE2_Y,
;;;5113   //						PIC_ID_CHANGE_PASSWORD_BLACK,
;;;5114   //						LCD_OPERATOR_MODE_DRAW);
;;;5115   //	}
;;;5116   }
;;;5117   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedPasswordChooseTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedPasswordChooseTitle PROC
;;;5062   // 进入高级菜单密码登录标题
;;;5063   void DISPLAY_DrawMenuAdvancedPasswordChooseTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;5064   {
;;;5065   //	// 显示图片
;;;5066   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_TITLE_X,
;;;5067   //						UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_TITLE_Y,
;;;5068   //						PIC_ID_SET_PASSWORD,
;;;5069   //						LCD_OPERATOR_MODE_DRAW);
;;;5070   
;;;5071   //	// 显示图片
;;;5072   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE1_X,
;;;5073   //						UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE1_Y,
;;;5074   //						PIC_ID_PASSWORD,
;;;5075   //						LCD_OPERATOR_MODE_DRAW);
;;;5076   
;;;5077   //	// 显示图片
;;;5078   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_INFO_X,
;;;5079   //						UI_ITEM_COODINATE_MENU_ADV_PASSWORD_CHOOSE_INFO_Y,
;;;5080   //						PIC_ID_TIPS,
;;;5081   //						LCD_OPERATOR_MODE_DRAW);
;;;5082   }
;;;5083   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedPasswordEnterCursor||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedPasswordEnterCursor PROC
;;;5618   // 进入高级菜单密码登录密码下标
;;;5619   void DISPLAY_DrawMenuAdvancedPasswordEnterCursor(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;5620   {
000002  4604              MOV      r4,r0
;;;5621   
;;;5622   	CHECK_PARAM_OVER_SAME_RETURN(ulBuff, 4);
000004  2c04              CMP      r4,#4
000006  d23e              BCS      |L61.134|
;;;5623   	
;;;5624   	// 背景色
;;;5625   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR1_X,
000008  2301              MOVS     r3,#1
00000a  22bd              MOVS     r2,#0xbd
00000c  2169              MOVS     r1,#0x69
00000e  2060              MOVS     r0,#0x60
000010  f7fffffe          BL       LCD_DrawBmpByID
;;;5626   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR1_Y,
;;;5627   								PIC_ID_INPUT_HENG,
;;;5628   								LCD_OPERATOR_MODE_BACKGROUND);
;;;5629   	// 背景色
;;;5630   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR2_X,
000014  2301              MOVS     r3,#1
000016  22bd              MOVS     r2,#0xbd
000018  2169              MOVS     r1,#0x69
00001a  2084              MOVS     r0,#0x84
00001c  f7fffffe          BL       LCD_DrawBmpByID
;;;5631   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR2_Y,
;;;5632   								PIC_ID_INPUT_HENG,
;;;5633   								LCD_OPERATOR_MODE_BACKGROUND);
;;;5634   
;;;5635   	// 背景色
;;;5636   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR3_X,
000020  2301              MOVS     r3,#1
000022  22bd              MOVS     r2,#0xbd
000024  2169              MOVS     r1,#0x69
000026  20a8              MOVS     r0,#0xa8
000028  f7fffffe          BL       LCD_DrawBmpByID
;;;5637   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR3_Y,
;;;5638   								PIC_ID_INPUT_HENG,
;;;5639   								LCD_OPERATOR_MODE_BACKGROUND);
;;;5640   
;;;5641   	// 背景色
;;;5642   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR4_X,
00002c  2301              MOVS     r3,#1
00002e  22bd              MOVS     r2,#0xbd
000030  2169              MOVS     r1,#0x69
000032  20cd              MOVS     r0,#0xcd
000034  f7fffffe          BL       LCD_DrawBmpByID
;;;5643   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR4_Y,
;;;5644   								PIC_ID_INPUT_HENG,
;;;5645   								LCD_OPERATOR_MODE_BACKGROUND);	
;;;5646   
;;;5647   	switch (ulBuff)
000038  b16c              CBZ      r4,|L61.86|
00003a  2c01              CMP      r4,#1
00003c  d013              BEQ      |L61.102|
00003e  2c02              CMP      r4,#2
000040  d019              BEQ      |L61.118|
000042  2c03              CMP      r4,#3
000044  d11f              BNE      |L61.134|
;;;5648   	{
;;;5649   		case 0:
;;;5650   			// 显示图片
;;;5651   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR1_X,
;;;5652   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR1_Y,
;;;5653   								PIC_ID_INPUT_HENG,
;;;5654   								LCD_OPERATOR_MODE_DRAW);
;;;5655   			break;
;;;5656   
;;;5657   		case 1:
;;;5658   			// 显示图片
;;;5659   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR2_X,
;;;5660   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR2_Y,
;;;5661   								PIC_ID_INPUT_HENG,
;;;5662   								LCD_OPERATOR_MODE_DRAW);
;;;5663   			break;
;;;5664   
;;;5665   		case 2:
;;;5666   			// 显示图片
;;;5667   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR3_X,
;;;5668   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR3_Y,
;;;5669   								PIC_ID_INPUT_HENG,
;;;5670   								LCD_OPERATOR_MODE_DRAW);
;;;5671   			break;
;;;5672   
;;;5673   		case 3:
;;;5674   			// 显示图片
;;;5675   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR4_X,
000046  2300              MOVS     r3,#0
000048  22bd              MOVS     r2,#0xbd
00004a  2169              MOVS     r1,#0x69
00004c  e8bd4010          POP      {r4,lr}
000050  20cd              MOVS     r0,#0xcd
000052  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L61.86|
000056  2300              MOVS     r3,#0                 ;5651
000058  22bd              MOVS     r2,#0xbd              ;5651
00005a  2169              MOVS     r1,#0x69              ;5651
00005c  e8bd4010          POP      {r4,lr}               ;5651
000060  2060              MOVS     r0,#0x60              ;5651
000062  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L61.102|
000066  2300              MOVS     r3,#0                 ;5659
000068  22bd              MOVS     r2,#0xbd              ;5659
00006a  2169              MOVS     r1,#0x69              ;5659
00006c  e8bd4010          POP      {r4,lr}               ;5659
000070  2084              MOVS     r0,#0x84              ;5659
000072  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L61.118|
000076  2300              MOVS     r3,#0                 ;5667
000078  22bd              MOVS     r2,#0xbd              ;5667
00007a  2169              MOVS     r1,#0x69              ;5667
00007c  e8bd4010          POP      {r4,lr}               ;5667
000080  20a8              MOVS     r0,#0xa8              ;5667
000082  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L61.134|
;;;5676   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR4_Y,
;;;5677   								PIC_ID_INPUT_HENG,
;;;5678   								LCD_OPERATOR_MODE_DRAW);
;;;5679   			break;
;;;5680   
;;;5681   		default:
;;;5682   			break;	
;;;5683   	}
;;;5684   }
000086  bd10              POP      {r4,pc}
;;;5685   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedPasswordEnterNum||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedPasswordEnterNum PROC
;;;5585   // 进入高级菜单密码登录密码
;;;5586   void DISPLAY_DrawMenuAdvancedPasswordEnterNum(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;5587   {
;;;5588   	uint8 value1, value2, value3, value4;
;;;5589   
;;;5590   	CHECK_PARAM_OVER_SAME_RETURN(ulBuff, 10000);
000004  f2427110          MOV      r1,#0x2710
000008  4288              CMP      r0,r1
00000a  d235              BCS      |L62.120|
;;;5591   
;;;5592   	value1 = (ulBuff / 1000) & 0xFF;
00000c  f44f717a          MOV      r1,#0x3e8
000010  fbb0f2f1          UDIV     r2,r0,r1
000014  b2d7              UXTB     r7,r2
;;;5593   	value2 = ((ulBuff % 1000) / 100) & 0xFF;
000016  fbb0f2f1          UDIV     r2,r0,r1
00001a  fb010212          MLS      r2,r1,r2,r0
00001e  2164              MOVS     r1,#0x64
000020  fbb2f2f1          UDIV     r2,r2,r1
000024  b2d4              UXTB     r4,r2
;;;5594   	value3 = ((ulBuff % 100) / 10) & 0xFF;
000026  fbb0f2f1          UDIV     r2,r0,r1
00002a  fb010212          MLS      r2,r1,r2,r0
00002e  210a              MOVS     r1,#0xa
000030  fbb2f5f1          UDIV     r5,r2,r1
;;;5595   	value4 = (ulBuff % 10) & 0xFF;
000034  fbb0f2f1          UDIV     r2,r0,r1
000038  fb010612          MLS      r6,r1,r2,r0
;;;5596   
;;;5597   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM1_X,
00003c  2300              MOVS     r3,#0
00003e  f10702b3          ADD      r2,r7,#0xb3
000042  2143              MOVS     r1,#0x43
000044  205b              MOVS     r0,#0x5b
000046  f7fffffe          BL       LCD_DrawBmpByID
;;;5598   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM1_Y,
;;;5599   								(PIC_ID_E)(PIC_ID_INPUT_0 + value1),
;;;5600   								LCD_OPERATOR_MODE_DRAW);
;;;5601   
;;;5602   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM2_X,
00004a  2300              MOVS     r3,#0
00004c  f10402b3          ADD      r2,r4,#0xb3
000050  2143              MOVS     r1,#0x43
000052  2081              MOVS     r0,#0x81
000054  f7fffffe          BL       LCD_DrawBmpByID
;;;5603   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM2_Y,
;;;5604   								(PIC_ID_E)(PIC_ID_INPUT_0 + value2),
;;;5605   								LCD_OPERATOR_MODE_DRAW);
;;;5606   
;;;5607   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM3_X,
000058  2300              MOVS     r3,#0
00005a  f10502b3          ADD      r2,r5,#0xb3
00005e  2143              MOVS     r1,#0x43
000060  20a6              MOVS     r0,#0xa6
000062  f7fffffe          BL       LCD_DrawBmpByID
;;;5608   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM3_Y,
;;;5609   								(PIC_ID_E)(PIC_ID_INPUT_0 + value3),
;;;5610   								LCD_OPERATOR_MODE_DRAW);
;;;5611   
;;;5612   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM4_X,
000066  f10602b3          ADD      r2,r6,#0xb3
00006a  e8bd41f0          POP      {r4-r8,lr}
00006e  2300              MOVS     r3,#0
000070  2143              MOVS     r1,#0x43
000072  20cb              MOVS     r0,#0xcb
000074  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L62.120|
;;;5613   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM4_Y,
;;;5614   								(PIC_ID_E)(PIC_ID_INPUT_0 + value4),
;;;5615   								LCD_OPERATOR_MODE_DRAW);
;;;5616   }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;5617   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedPasswordEnterTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedPasswordEnterTitle PROC
;;;5549   // 进入高级菜单密码登录标题
;;;5550   void DISPLAY_DrawMenuAdvancedPasswordEnterTitle(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;5551   {
;;;5552   	switch (ulBuff)
000002  2800              CMP      r0,#0
000004  d00f              BEQ      |L63.38|
000006  2801              CMP      r0,#1
000008  d115              BNE      |L63.54|
;;;5553   	{
;;;5554   		case 0:
;;;5555   
;;;5556   			// 背景色
;;;5557   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_X,
;;;5558   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_Y,
;;;5559   								PIC_ID_INPUT_PASSWORD,
;;;5560   								LCD_OPERATOR_MODE_BACKGROUND);
;;;5561   
;;;5562   			break;
;;;5563   
;;;5564   		case 1:
;;;5565   
;;;5566   			// 显示图片
;;;5567   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ADVANCED_MENU_TITLE_X,
00000a  2300              MOVS     r3,#0
00000c  461a              MOV      r2,r3
00000e  2124              MOVS     r1,#0x24
000010  2066              MOVS     r0,#0x66
000012  f7fffffe          BL       LCD_DrawBmpByID
;;;5568   											UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ADVANCED_MENU_TITLE_Y,
;;;5569   											PIC_ID_ADVANCED_MENU,
;;;5570   											LCD_OPERATOR_MODE_DRAW);
;;;5571   		
;;;5572   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_X,
000016  2300              MOVS     r3,#0
000018  22be              MOVS     r2,#0xbe
00001a  2173              MOVS     r1,#0x73
00001c  e8bd4010          POP      {r4,lr}
000020  206e              MOVS     r0,#0x6e
000022  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L63.38|
000026  2301              MOVS     r3,#1                 ;5557
000028  22be              MOVS     r2,#0xbe              ;5557
00002a  2173              MOVS     r1,#0x73              ;5557
00002c  e8bd4010          POP      {r4,lr}               ;5557
000030  206e              MOVS     r0,#0x6e              ;5557
000032  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L63.54|
;;;5573   											UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_Y,
;;;5574   											PIC_ID_INPUT_PASSWORD,
;;;5575   											LCD_OPERATOR_MODE_DRAW);	
;;;5576   			
;;;5577   		
;;;5578   			break;
;;;5579   
;;;5580   		default:
;;;5581   			break;
;;;5582   	}
;;;5583   }
000036  bd10              POP      {r4,pc}
;;;5584   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedPasswordSetCursor||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedPasswordSetCursor PROC
;;;5216   // 进入设置高级菜单密码登录密码下标
;;;5217   void DISPLAY_DrawMenuAdvancedPasswordSetCursor(uint32 ulBuff)
000000  4770              BX       lr
;;;5218   {
;;;5219   
;;;5220   //	// 背景色
;;;5221   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR1_X,
;;;5222   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR1_Y,
;;;5223   //								PIC_ID_LINE_BLUE,
;;;5224   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;5225   //	// 背景色
;;;5226   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR2_X,
;;;5227   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR2_Y,
;;;5228   //								PIC_ID_LINE_BLUE,
;;;5229   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;5230   
;;;5231   //	// 背景色
;;;5232   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR3_X,
;;;5233   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR3_Y,
;;;5234   //								PIC_ID_LINE_BLUE,
;;;5235   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;5236   
;;;5237   //	// 背景色
;;;5238   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR4_X,
;;;5239   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR4_Y,
;;;5240   //								PIC_ID_LINE_BLUE,
;;;5241   //								LCD_OPERATOR_MODE_BACKGROUND);	
;;;5242   
;;;5243   //	switch (ulBuff)
;;;5244   //	{
;;;5245   //		case 0:
;;;5246   //			// 显示图片
;;;5247   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR1_X,
;;;5248   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR1_Y,
;;;5249   //								PIC_ID_LINE_BLUE,
;;;5250   //								LCD_OPERATOR_MODE_DRAW);
;;;5251   //			break;
;;;5252   
;;;5253   //		case 1:
;;;5254   //			// 显示图片
;;;5255   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR2_X,
;;;5256   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR2_Y,
;;;5257   //								PIC_ID_LINE_BLUE,
;;;5258   //								LCD_OPERATOR_MODE_DRAW);
;;;5259   //			break;
;;;5260   
;;;5261   //		case 2:
;;;5262   //			// 显示图片
;;;5263   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR3_X,
;;;5264   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR3_Y,
;;;5265   //								PIC_ID_LINE_BLUE,
;;;5266   //								LCD_OPERATOR_MODE_DRAW);
;;;5267   //			break;
;;;5268   
;;;5269   //		case 3:
;;;5270   //			// 显示图片
;;;5271   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR4_X,
;;;5272   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_CURSOR4_Y,
;;;5273   //								PIC_ID_LINE_BLUE,
;;;5274   //								LCD_OPERATOR_MODE_DRAW);
;;;5275   //			break;
;;;5276   
;;;5277   //		default:
;;;5278   //			break;	
;;;5279   //	}
;;;5280   }
;;;5281   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedPasswordSetNum||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedPasswordSetNum PROC
;;;5183   // 进入设置高级菜单密码
;;;5184   void DISPLAY_DrawMenuAdvancedPasswordSetNum(uint32 ulBuff)
000000  4770              BX       lr
;;;5185   {
;;;5186   //	uint8 value1, value2, value3, value4;
;;;5187   
;;;5188   //	CHECK_PARAM_OVER_SAME_RETURN(ulBuff, 10000);
;;;5189   //	
;;;5190   //	value1 = (ulBuff / 1000) & 0xFF;
;;;5191   //	value2 = ((ulBuff % 1000) / 100) & 0xFF;
;;;5192   //	value3 = ((ulBuff % 100) / 10) & 0xFF;
;;;5193   //	value4 = (ulBuff % 10) & 0xFF;
;;;5194   
;;;5195   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM1_X,
;;;5196   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM1_Y,
;;;5197   //								(PIC_ID_E)(PIC_ID_P_0 + value1),
;;;5198   //								LCD_OPERATOR_MODE_DRAW);
;;;5199   
;;;5200   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM2_X,
;;;5201   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM2_Y,
;;;5202   //								(PIC_ID_E)(PIC_ID_P_0 + value2),
;;;5203   //								LCD_OPERATOR_MODE_DRAW);
;;;5204   
;;;5205   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM3_X,
;;;5206   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM3_Y,
;;;5207   //								(PIC_ID_E)(PIC_ID_P_0 + value3),
;;;5208   //								LCD_OPERATOR_MODE_DRAW);
;;;5209   
;;;5210   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM4_X,
;;;5211   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_NUM4_Y,
;;;5212   //								(PIC_ID_E)(PIC_ID_P_0 + value4),
;;;5213   //								LCD_OPERATOR_MODE_DRAW);
;;;5214   }
;;;5215   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedPasswordSetTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedPasswordSetTitle PROC
;;;5152   // 进入高级菜单密码登录标题
;;;5153   void DISPLAY_DrawMenuAdvancedPasswordSetTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;5154   {
;;;5155   //	switch (ulBuff)
;;;5156   //	{
;;;5157   //		case 0:
;;;5158   
;;;5159   //			// 背景色
;;;5160   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_X,
;;;5161   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_Y,
;;;5162   //								PIC_ID_CHANGE_PASSWORD,
;;;5163   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;5164   
;;;5165   //			break;
;;;5166   
;;;5167   //		case 1:
;;;5168   
;;;5169   //			// 显示图片
;;;5170   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_X,
;;;5171   //								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_Y,
;;;5172   //								PIC_ID_CHANGE_PASSWORD,
;;;5173   //								LCD_OPERATOR_MODE_DRAW);	
;;;5174   //			
;;;5175   //			break;
;;;5176   
;;;5177   //		default:
;;;5178   //			break;
;;;5179   //	}
;;;5180   }
;;;5181   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootBack||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootBack PROC
;;;6864   // 显示高级菜单标题
;;;6865   void DISPLAY_DrawMenuAdvancedSettingsRootBack(uint32 ulBuff)
000000  4770              BX       lr
;;;6866   {
;;;6867   //	switch (ulBuff)
;;;6868   //	{
;;;6869   //		case 0:
;;;6870   //			// 背景色
;;;6871   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_BACK_X,
;;;6872   //								UI_ITEM_COODINATE_MENU1_ADVANCED_BACK_Y,
;;;6873   //								PIC_ID_BACK,
;;;6874   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;6875   //			break;
;;;6876   
;;;6877   //		case 1:
;;;6878   //			// 显示图片
;;;6879   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_BACK_X,
;;;6880   //								UI_ITEM_COODINATE_MENU1_ADVANCED_BACK_Y,
;;;6881   //								PIC_ID_BACK,
;;;6882   //								LCD_OPERATOR_MODE_DRAW);	
;;;6883   //			break;
;;;6884   
;;;6885   //		default:
;;;6886   //			break;
;;;6887   //	}
;;;6888   }
;;;6889   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootBootupScreen||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootBootupScreen PROC
;;;6791   // 显示高级菜单标题
;;;6792   void DISPLAY_DrawMenuAdvancedSettingsRootBootupScreen(uint32 ulBuff)
000000  4770              BX       lr
;;;6793   {
;;;6794   //	CHECK_PARAM_OVER_SAME_RETURN(ulBuff, 3);
;;;6795   //	
;;;6796   //	// 显示图片
;;;6797   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_X,
;;;6798   //						UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_Y,
;;;6799   //						PIC_ID_BOOTUP_SCREEN,
;;;6800   //						LCD_OPERATOR_MODE_DRAW);
;;;6801   
;;;6802   //	// 显示背景
;;;6803   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_NUM_X,
;;;6804   //						UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_NUM_Y,
;;;6805   //						PIC_ID_CUSTOM,
;;;6806   //						LCD_OPERATOR_MODE_BACKGROUND);
;;;6807   //								
;;;6808   //	switch (ulBuff)
;;;6809   //	{
;;;6810   //		case 0:// 迪太界面
;;;6811   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_NUM_X,
;;;6812   //								UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_NUM_Y,
;;;6813   //								PIC_ID_DEFAULT,
;;;6814   //								LCD_OPERATOR_MODE_DRAW);
;;;6815   //			break;
;;;6816   
;;;6817   //		case 1:// 中性界面
;;;6818   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_NUM_X,
;;;6819   //								UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_NUM_Y,
;;;6820   //								PIC_ID_CUSTOM,
;;;6821   //								LCD_OPERATOR_MODE_DRAW);
;;;6822   //			break;
;;;6823   
;;;6824   //		case 2:// 客户界面
;;;6825   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_NUM_X,
;;;6826   //								UI_ITEM_COODINATE_MENU1_ADVANCED_BOOTUP_SCREEN_NUM_Y,
;;;6827   //								PIC_ID_NEUTRAL,
;;;6828   //								LCD_OPERATOR_MODE_DRAW);
;;;6829   //			break;
;;;6830   
;;;6831   //		default:
;;;6832   //			break;
;;;6833   //	}
;;;6834   }
;;;6835   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootControlParam||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootControlParam PROC
;;;6721   // 显示高级菜单标题
;;;6722   void DISPLAY_DrawMenuAdvancedSettingsRootControlParam(uint32 ulBuff)
000000  4770              BX       lr
;;;6723   {
;;;6724   //	switch (ulBuff)
;;;6725   //	{
;;;6726   //		case 0:
;;;6727   //			// 背景色
;;;6728   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CONTROL_PARAM_X,
;;;6729   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CONTROL_PARAM_Y,
;;;6730   //								PIC_ID_CONTROLLER_PARAMETERS,
;;;6731   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;6732   //			break;
;;;6733   
;;;6734   //		case 1:
;;;6735   //			// 显示图片
;;;6736   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CONTROL_PARAM_X,
;;;6737   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CONTROL_PARAM_Y,
;;;6738   //								PIC_ID_CONTROLLER_PARAMETERS,
;;;6739   //								LCD_OPERATOR_MODE_DRAW);	
;;;6740   //			break;
;;;6741   
;;;6742   //		default:
;;;6743   //			break;
;;;6744   //	}
;;;6745   }
;;;6746   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootCursor||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootCursor PROC
;;;6890   // 显示高级菜单光标
;;;6891   void DISPLAY_DrawMenuAdvancedSettingsRootCursor(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;6892   {
;;;6893   	uint8 value1, value2;
;;;6894   
;;;6895   	value1 = (ulBuff >> 4) & 0x0F;
000002  f3c01103          UBFX     r1,r0,#4,#4
;;;6896   	value2 = ulBuff & 0x0F;
000006  f000040f          AND      r4,r0,#0xf
;;;6897   
;;;6898   	switch (value1)
;;;6899   	{
;;;6900   		case 0:
;;;6901   			// 光标背景色
;;;6902   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_X,
;;;6903   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_Y,
;;;6904   								PIC_ID_ADVMENU_HENG,
;;;6905   								LCD_OPERATOR_MODE_ADV_MENU);
;;;6906   			// 光标背景色
;;;6907   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_X,
;;;6908   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_Y,
;;;6909   								PIC_ID_ADVMENU_HENG,
;;;6910   								LCD_OPERATOR_MODE_BACKGROUND);
;;;6911   
;;;6912   			// 光标背景色
;;;6913   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_X,
;;;6914   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_Y,
;;;6915   								PIC_ID_ADVMENU_HENG,
;;;6916   								LCD_OPERATOR_MODE_BACKGROUND);
;;;6917   
;;;6918   			// 光标背景色
;;;6919   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_X,
00000a  f2401601          MOV      r6,#0x101
;;;6920   								UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_Y,
;;;6921   								PIC_ID_ADVMENU_HENG,
;;;6922   								LCD_OPERATOR_MODE_BACKGROUND);
;;;6923   
;;;6924   			// 光标背景色
;;;6925   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_X,
;;;6926   								UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_Y,
;;;6927   								PIC_ID_ADVMENU_HENG,
;;;6928   								LCD_OPERATOR_MODE_BACKGROUND);
;;;6929   			if (1 == value2)
;;;6930   			{
;;;6931   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_X,
;;;6932   									UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_Y,
;;;6933   									PIC_ID_ADVMENU_HENG,
;;;6934   									LCD_OPERATOR_MODE_DRAW);
;;;6935   			}
;;;6936   			
;;;6937   			break;
;;;6938   
;;;6939   		case 1:
;;;6940   			// 光标背景色
;;;6941   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_X,
;;;6942   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_Y,
;;;6943   								PIC_ID_ADVMENU_HENG,
;;;6944   								LCD_OPERATOR_MODE_BACKGROUND);
;;;6945   			// 光标背景色
;;;6946   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_X,
;;;6947   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_Y,
;;;6948   								PIC_ID_ADVMENU_HENG,
;;;6949   								LCD_OPERATOR_MODE_ADV_MENU);
;;;6950   
;;;6951   			// 光标背景色
;;;6952   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_X,
;;;6953   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_Y,
;;;6954   								PIC_ID_ADVMENU_HENG,
;;;6955   								LCD_OPERATOR_MODE_ADV_MENU);
;;;6956   
;;;6957   			// 光标背景色
;;;6958   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_X,
;;;6959   								UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_Y,
;;;6960   								PIC_ID_ADVMENU_HENG,
;;;6961   								LCD_OPERATOR_MODE_BACKGROUND);
;;;6962   
;;;6963   			// 光标背景色
;;;6964   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_X,
;;;6965   								UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_Y,
;;;6966   								PIC_ID_ADVMENU_HENG,
;;;6967   								LCD_OPERATOR_MODE_BACKGROUND);
;;;6968   			switch (value2)
;;;6969   			{
;;;6970   				/*case 1:
;;;6971   
;;;6972   					LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_X,
;;;6973   										UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_Y,
;;;6974   										PIC_ID_ADVMENU_HENG,
;;;6975   										LCD_OPERATOR_MODE_DRAW);
;;;6976   					break;*/
;;;6977   				case 1:
;;;6978   
;;;6979   					LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_X,
;;;6980   										UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_Y,
;;;6981   										PIC_ID_ADVMENU_HENG,
;;;6982   										LCD_OPERATOR_MODE_DRAW);
;;;6983   					break;
;;;6984   				default:
;;;6985   					break;
;;;6986   			}
;;;6987   
;;;6988   			break;
;;;6989   
;;;6990   		case 2:
;;;6991   			// 光标背景色
;;;6992   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_X,
;;;6993   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_Y,
;;;6994   								PIC_ID_ADVMENU_HENG,
;;;6995   								LCD_OPERATOR_MODE_BACKGROUND);
;;;6996   			// 光标背景色
;;;6997   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_X,
;;;6998   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_Y,
;;;6999   								PIC_ID_ADVMENU_HENG,
;;;7000   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7001   
;;;7002   			// 光标背景色
;;;7003   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_X,
;;;7004   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_Y,
;;;7005   								PIC_ID_ADVMENU_HENG,
;;;7006   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7007   
;;;7008   			// 光标背景色
;;;7009   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_X,
;;;7010   								UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_Y,
;;;7011   								PIC_ID_ADVMENU_HENG,
;;;7012   								LCD_OPERATOR_MODE_ADV_MENU);
;;;7013   
;;;7014   			// 光标背景色
;;;7015   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_X,
;;;7016   								UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_Y,
;;;7017   								PIC_ID_ADVMENU_HENG,
;;;7018   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7019   			if (1 == value2)
;;;7020   			{
;;;7021   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_X,
;;;7022   										UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_Y,
;;;7023   										PIC_ID_ADVMENU_HENG,
;;;7024   										LCD_OPERATOR_MODE_DRAW);
;;;7025   			}
;;;7026   
;;;7027   			break;
;;;7028   
;;;7029   		case 3:
;;;7030   			// 光标背景色
;;;7031   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_X,
;;;7032   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_SIZE_CURSOR1_Y,
;;;7033   								PIC_ID_ADVMENU_HENG,
;;;7034   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7035   			// 光标背景色
;;;7036   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_X,
;;;7037   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR1_Y,
;;;7038   								PIC_ID_ADVMENU_HENG,
;;;7039   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7040   
;;;7041   			// 光标背景色
;;;7042   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_X,
;;;7043   								UI_ITEM_COODINATE_MENU2_ADV_WHEEL_METER_CURSOR2_Y,
;;;7044   								PIC_ID_ADVMENU_HENG,
;;;7045   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7046   
;;;7047   			// 光标背景色
;;;7048   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_X,
;;;7049   								UI_ITEM_COODINATE_MENU2_ADV_SPEED_SENSOR_CURSOR_Y,
;;;7050   								PIC_ID_ADVMENU_HENG,
;;;7051   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7052   
;;;7053   			// 光标背景色
;;;7054   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_X,
;;;7055   								UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_Y,
;;;7056   								PIC_ID_ADVMENU_HENG,
;;;7057   								LCD_OPERATOR_MODE_ADV_MENU);
;;;7058   			if (1 == value2)
;;;7059   			{
;;;7060   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_X,
;;;7061   										UI_ITEM_COODINATE_MENU2_ADV_VOL_CURSOR_Y,
;;;7062   										PIC_ID_ADVMENU_HENG,
;;;7063   										LCD_OPERATOR_MODE_DRAW);
;;;7064   			}	
;;;7065   			break;
;;;7066   
;;;7067   		case 4:
;;;7068   			// 光标背景色
;;;7069   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WALK_CURSOR_X,
00000e  1e75              SUBS     r5,r6,#1
000010  2908              CMP      r1,#8                 ;6898
000012  d27c              BCS      |L70.270|
000014  e8dff001          TBB      [pc,r1]               ;6898
000018  042c547e          DCB      0x04,0x2c,0x54,0x7e
00001c  a6c2fade          DCB      0xa6,0xc2,0xfa,0xde
000020  2304              MOVS     r3,#4                 ;6902
000022  2208              MOVS     r2,#8                 ;6902
000024  213a              MOVS     r1,#0x3a              ;6902
000026  20fd              MOVS     r0,#0xfd              ;6902
000028  f7fffffe          BL       LCD_DrawBmpByID
00002c  2301              MOVS     r3,#1                 ;6907
00002e  2208              MOVS     r2,#8                 ;6907
000030  215a              MOVS     r1,#0x5a              ;6907
000032  20e7              MOVS     r0,#0xe7              ;6907
000034  f7fffffe          BL       LCD_DrawBmpByID
000038  2301              MOVS     r3,#1                 ;6913
00003a  2208              MOVS     r2,#8                 ;6913
00003c  215a              MOVS     r1,#0x5a              ;6913
00003e  20ff              MOVS     r0,#0xff              ;6913
000040  f7fffffe          BL       LCD_DrawBmpByID
000044  2301              MOVS     r3,#1                 ;6919
000046  2208              MOVS     r2,#8                 ;6919
000048  2177              MOVS     r1,#0x77              ;6919
00004a  4630              MOV      r0,r6                 ;6919
00004c  f7fffffe          BL       LCD_DrawBmpByID
000050  2301              MOVS     r3,#1                 ;6925
000052  2208              MOVS     r2,#8                 ;6925
000054  2193              MOVS     r1,#0x93              ;6925
000056  20fe              MOVS     r0,#0xfe              ;6925
000058  f7fffffe          BL       LCD_DrawBmpByID
00005c  2c01              CMP      r4,#1                 ;6929
00005e  d156              BNE      |L70.270|
000060  e8bd4070          POP      {r4-r6,lr}            ;6931
000064  2300              MOVS     r3,#0                 ;6931
000066  2208              MOVS     r2,#8                 ;6931
000068  213a              MOVS     r1,#0x3a              ;6931
00006a  20fd              MOVS     r0,#0xfd              ;6931
00006c  f7ffbffe          B.W      LCD_DrawBmpByID
000070  2301              MOVS     r3,#1                 ;6941
000072  2208              MOVS     r2,#8                 ;6941
000074  213a              MOVS     r1,#0x3a              ;6941
000076  20fd              MOVS     r0,#0xfd              ;6941
000078  f7fffffe          BL       LCD_DrawBmpByID
00007c  2304              MOVS     r3,#4                 ;6946
00007e  2208              MOVS     r2,#8                 ;6946
000080  215a              MOVS     r1,#0x5a              ;6946
000082  20e7              MOVS     r0,#0xe7              ;6946
000084  f7fffffe          BL       LCD_DrawBmpByID
000088  2304              MOVS     r3,#4                 ;6952
00008a  2208              MOVS     r2,#8                 ;6952
00008c  215a              MOVS     r1,#0x5a              ;6952
00008e  20ff              MOVS     r0,#0xff              ;6952
000090  f7fffffe          BL       LCD_DrawBmpByID
000094  2301              MOVS     r3,#1                 ;6958
000096  2208              MOVS     r2,#8                 ;6958
000098  2177              MOVS     r1,#0x77              ;6958
00009a  4630              MOV      r0,r6                 ;6958
00009c  f7fffffe          BL       LCD_DrawBmpByID
0000a0  2301              MOVS     r3,#1                 ;6964
0000a2  2208              MOVS     r2,#8                 ;6964
0000a4  2193              MOVS     r1,#0x93              ;6964
0000a6  20fe              MOVS     r0,#0xfe              ;6964
0000a8  f7fffffe          BL       LCD_DrawBmpByID
0000ac  2c01              CMP      r4,#1                 ;6968
0000ae  d12e              BNE      |L70.270|
0000b0  e8bd4070          POP      {r4-r6,lr}            ;6979
0000b4  2300              MOVS     r3,#0                 ;6979
0000b6  2208              MOVS     r2,#8                 ;6979
0000b8  215a              MOVS     r1,#0x5a              ;6979
0000ba  20ff              MOVS     r0,#0xff              ;6979
0000bc  f7ffbffe          B.W      LCD_DrawBmpByID
0000c0  2301              MOVS     r3,#1                 ;6992
0000c2  2208              MOVS     r2,#8                 ;6992
0000c4  213a              MOVS     r1,#0x3a              ;6992
0000c6  20fd              MOVS     r0,#0xfd              ;6992
0000c8  f7fffffe          BL       LCD_DrawBmpByID
0000cc  2301              MOVS     r3,#1                 ;6997
0000ce  2208              MOVS     r2,#8                 ;6997
0000d0  215a              MOVS     r1,#0x5a              ;6997
0000d2  20e7              MOVS     r0,#0xe7              ;6997
0000d4  f7fffffe          BL       LCD_DrawBmpByID
0000d8  2301              MOVS     r3,#1                 ;7003
0000da  2208              MOVS     r2,#8                 ;7003
0000dc  215a              MOVS     r1,#0x5a              ;7003
0000de  20ff              MOVS     r0,#0xff              ;7003
0000e0  f7fffffe          BL       LCD_DrawBmpByID
0000e4  2304              MOVS     r3,#4                 ;7009
0000e6  2208              MOVS     r2,#8                 ;7009
0000e8  2177              MOVS     r1,#0x77              ;7009
0000ea  4630              MOV      r0,r6                 ;7009
0000ec  f7fffffe          BL       LCD_DrawBmpByID
0000f0  2301              MOVS     r3,#1                 ;7015
0000f2  2208              MOVS     r2,#8                 ;7015
0000f4  2193              MOVS     r1,#0x93              ;7015
0000f6  20fe              MOVS     r0,#0xfe              ;7015
0000f8  f7fffffe          BL       LCD_DrawBmpByID
0000fc  2c01              CMP      r4,#1                 ;7019
0000fe  d106              BNE      |L70.270|
000100  4630              MOV      r0,r6                 ;7021
000102  e8bd4070          POP      {r4-r6,lr}            ;7021
000106  2300              MOVS     r3,#0                 ;7021
000108  2208              MOVS     r2,#8                 ;7021
00010a  2177              MOVS     r1,#0x77              ;7021
00010c  e000              B        |L70.272|
                  |L70.270|
00010e  e07d              B        |L70.524|
                  |L70.272|
000110  f7ffbffe          B.W      LCD_DrawBmpByID
000114  2301              MOVS     r3,#1                 ;7031
000116  2208              MOVS     r2,#8                 ;7031
000118  213a              MOVS     r1,#0x3a              ;7031
00011a  20fd              MOVS     r0,#0xfd              ;7031
00011c  f7fffffe          BL       LCD_DrawBmpByID
000120  2301              MOVS     r3,#1                 ;7036
000122  2208              MOVS     r2,#8                 ;7036
000124  215a              MOVS     r1,#0x5a              ;7036
000126  20e7              MOVS     r0,#0xe7              ;7036
000128  f7fffffe          BL       LCD_DrawBmpByID
00012c  2301              MOVS     r3,#1                 ;7042
00012e  2208              MOVS     r2,#8                 ;7042
000130  215a              MOVS     r1,#0x5a              ;7042
000132  20ff              MOVS     r0,#0xff              ;7042
000134  f7fffffe          BL       LCD_DrawBmpByID
000138  2301              MOVS     r3,#1                 ;7048
00013a  2208              MOVS     r2,#8                 ;7048
00013c  2177              MOVS     r1,#0x77              ;7048
00013e  4630              MOV      r0,r6                 ;7048
000140  f7fffffe          BL       LCD_DrawBmpByID
000144  2304              MOVS     r3,#4                 ;7054
000146  2208              MOVS     r2,#8                 ;7054
000148  2193              MOVS     r1,#0x93              ;7054
00014a  20fe              MOVS     r0,#0xfe              ;7054
00014c  f7fffffe          BL       LCD_DrawBmpByID
000150  2c01              CMP      r4,#1                 ;7058
000152  d15b              BNE      |L70.524|
000154  e8bd4070          POP      {r4-r6,lr}            ;7060
000158  2300              MOVS     r3,#0                 ;7060
00015a  2208              MOVS     r2,#8                 ;7060
00015c  2193              MOVS     r1,#0x93              ;7060
00015e  20fe              MOVS     r0,#0xfe              ;7060
000160  f7ffbffe          B.W      LCD_DrawBmpByID
000164  2304              MOVS     r3,#4
000166  2208              MOVS     r2,#8
000168  213a              MOVS     r1,#0x3a
00016a  4628              MOV      r0,r5
00016c  f7fffffe          BL       LCD_DrawBmpByID
;;;7070   								UI_ITEM_COODINATE_MENU2_ADV_WALK_CURSOR_Y,
;;;7071   								PIC_ID_ADVMENU_HENG,
;;;7072   								LCD_OPERATOR_MODE_ADV_MENU);
;;;7073   
;;;7074   			// 光标背景色
;;;7075   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_TURN_CURSOR_X,
000170  2301              MOVS     r3,#1
000172  2208              MOVS     r2,#8
000174  215a              MOVS     r1,#0x5a
000176  4628              MOV      r0,r5
000178  f7fffffe          BL       LCD_DrawBmpByID
;;;7076   								UI_ITEM_COODINATE_MENU2_ADV_TURN_CURSOR_Y,
;;;7077   								PIC_ID_ADVMENU_HENG,
;;;7078   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7079   
;;;7080   			// 光标背景色
;;;7081   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_USER_PW_CURSOR_X,
00017c  2301              MOVS     r3,#1
00017e  2208              MOVS     r2,#8
000180  2193              MOVS     r1,#0x93
000182  4628              MOV      r0,r5
000184  f7fffffe          BL       LCD_DrawBmpByID
;;;7082   								UI_ITEM_COODINATE_MENU2_ADV_USER_PW_CURSOR_Y,
;;;7083   								PIC_ID_ADVMENU_HENG,
;;;7084   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7085   			if (1 == value2)
000188  2c01              CMP      r4,#1
00018a  d13f              BNE      |L70.524|
;;;7086   			{
;;;7087   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WALK_CURSOR_X,
00018c  4628              MOV      r0,r5
00018e  e8bd4070          POP      {r4-r6,lr}
000192  2300              MOVS     r3,#0
000194  2208              MOVS     r2,#8
000196  213a              MOVS     r1,#0x3a
000198  f7ffbffe          B.W      LCD_DrawBmpByID
;;;7088   										UI_ITEM_COODINATE_MENU2_ADV_WALK_CURSOR_Y,
;;;7089   										PIC_ID_ADVMENU_HENG,
;;;7090   										LCD_OPERATOR_MODE_DRAW);
;;;7091   			}	
;;;7092   			break;
;;;7093   
;;;7094   		case 5:
;;;7095   			// 光标背景色
;;;7096   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WALK_CURSOR_X,
00019c  2301              MOVS     r3,#1
00019e  2208              MOVS     r2,#8
0001a0  213a              MOVS     r1,#0x3a
0001a2  4628              MOV      r0,r5
0001a4  f7fffffe          BL       LCD_DrawBmpByID
;;;7097   								UI_ITEM_COODINATE_MENU2_ADV_WALK_CURSOR_Y,
;;;7098   								PIC_ID_ADVMENU_HENG,
;;;7099   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7100   
;;;7101   			// 光标背景色
;;;7102   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_TURN_CURSOR_X,
0001a8  2304              MOVS     r3,#4
0001aa  2208              MOVS     r2,#8
0001ac  215a              MOVS     r1,#0x5a
0001ae  4628              MOV      r0,r5
0001b0  f7fffffe          BL       LCD_DrawBmpByID
;;;7103   								UI_ITEM_COODINATE_MENU2_ADV_TURN_CURSOR_Y,
;;;7104   								PIC_ID_ADVMENU_HENG,
;;;7105   								LCD_OPERATOR_MODE_ADV_MENU);
;;;7106   
;;;7107   			// 光标背景色
;;;7108   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_USER_PW_CURSOR_X,
0001b4  2301              MOVS     r3,#1
0001b6  2208              MOVS     r2,#8
0001b8  2193              MOVS     r1,#0x93
0001ba  4628              MOV      r0,r5
0001bc  f7fffffe          BL       LCD_DrawBmpByID
;;;7109   								UI_ITEM_COODINATE_MENU2_ADV_USER_PW_CURSOR_Y,
;;;7110   								PIC_ID_ADVMENU_HENG,
;;;7111   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7112   			if (1 == value2)
0001c0  2c01              CMP      r4,#1
0001c2  d123              BNE      |L70.524|
;;;7113   			{
;;;7114   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_TURN_CURSOR_X,
0001c4  4628              MOV      r0,r5
0001c6  e8bd4070          POP      {r4-r6,lr}
0001ca  2300              MOVS     r3,#0
0001cc  2208              MOVS     r2,#8
0001ce  215a              MOVS     r1,#0x5a
0001d0  f7ffbffe          B.W      LCD_DrawBmpByID
;;;7115   										UI_ITEM_COODINATE_MENU2_ADV_TURN_CURSOR_Y,
;;;7116   										PIC_ID_ADVMENU_HENG,
;;;7117   										LCD_OPERATOR_MODE_DRAW);
;;;7118   			}		
;;;7119   			break;
;;;7120   
;;;7121   		/*case 6:
;;;7122   			if (1 == value2)
;;;7123   			{
;;;7124   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_RESET_CURSOR_X,
;;;7125   										UI_ITEM_COODINATE_MENU2_ADV_RESET_CURSOR_Y,
;;;7126   										PIC_ID_ADVMENU_HENG,
;;;7127   										LCD_OPERATOR_MODE_DRAW);
;;;7128   			}	
;;;7129   			break;*/
;;;7130   
;;;7131   		case 7:
;;;7132   			// 光标背景色
;;;7133   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_WALK_CURSOR_X,
0001d4  2301              MOVS     r3,#1
0001d6  2208              MOVS     r2,#8
0001d8  213a              MOVS     r1,#0x3a
0001da  4628              MOV      r0,r5
0001dc  f7fffffe          BL       LCD_DrawBmpByID
;;;7134   								UI_ITEM_COODINATE_MENU2_ADV_WALK_CURSOR_Y,
;;;7135   								PIC_ID_ADVMENU_HENG,
;;;7136   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7137   
;;;7138   			// 光标背景色
;;;7139   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_TURN_CURSOR_X,
0001e0  2301              MOVS     r3,#1
0001e2  2208              MOVS     r2,#8
0001e4  215a              MOVS     r1,#0x5a
0001e6  4628              MOV      r0,r5
0001e8  f7fffffe          BL       LCD_DrawBmpByID
;;;7140   								UI_ITEM_COODINATE_MENU2_ADV_TURN_CURSOR_Y,
;;;7141   								PIC_ID_ADVMENU_HENG,
;;;7142   								LCD_OPERATOR_MODE_BACKGROUND);
;;;7143   
;;;7144   			// 光标背景色
;;;7145   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_USER_PW_CURSOR_X,
0001ec  2304              MOVS     r3,#4
0001ee  2208              MOVS     r2,#8
0001f0  2193              MOVS     r1,#0x93
0001f2  4628              MOV      r0,r5
0001f4  f7fffffe          BL       LCD_DrawBmpByID
;;;7146   								UI_ITEM_COODINATE_MENU2_ADV_USER_PW_CURSOR_Y,
;;;7147   								PIC_ID_ADVMENU_HENG,
;;;7148   								LCD_OPERATOR_MODE_ADV_MENU);
;;;7149   			if (1 == value2)
0001f8  2c01              CMP      r4,#1
0001fa  d107              BNE      |L70.524|
;;;7150   			{
;;;7151   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_USER_PW_CURSOR_X,
0001fc  4628              MOV      r0,r5
0001fe  e8bd4070          POP      {r4-r6,lr}
000202  2300              MOVS     r3,#0
000204  2208              MOVS     r2,#8
000206  2193              MOVS     r1,#0x93
000208  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L70.524|
;;;7152   										UI_ITEM_COODINATE_MENU2_ADV_USER_PW_CURSOR_Y,
;;;7153   										PIC_ID_ADVMENU_HENG,
;;;7154   										LCD_OPERATOR_MODE_DRAW);
;;;7155   			}	
;;;7156   			break;
;;;7157   
;;;7158   		default:
;;;7159   			break;
;;;7160   	}
;;;7161   }
00020c  bd70              POP      {r4-r6,pc}
;;;7162   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootDefAssist||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootDefAssist PROC
;;;6747   // 显示高级菜单标题
;;;6748   void DISPLAY_DrawMenuAdvancedSettingsRootDefAssist(uint32 ulBuff)
000000  4770              BX       lr
;;;6749   {
;;;6750   	
;;;6751   //	// 显示图片
;;;6752   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_DEFAULT_ASSIST_X,
;;;6753   //						UI_ITEM_COODINATE_MENU1_ADVANCED_DEFAULT_ASSIST_Y,
;;;6754   //						PIC_ID_DEFAULT_ASSIST_LEVEL,
;;;6755   //						LCD_OPERATOR_MODE_DRAW);	
;;;6756   
;;;6757   //	if (ulBuff > 9)
;;;6758   //	{
;;;6759   //		return;
;;;6760   //	}
;;;6761   
;;;6762   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_DEFAULT_ASSIST_NUM_X,
;;;6763   //						UI_ITEM_COODINATE_MENU1_ADVANCED_DEFAULT_ASSIST_NUM_Y,
;;;6764   //						(PIC_ID_E)(PIC_ID_S_0 + ulBuff),
;;;6765   //						LCD_OPERATOR_MODE_DRAW);	
;;;6766   
;;;6767   }
;;;6768   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootESC||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootESC PROC
;;;7268   // 显示高级菜单之四:返回
;;;7269   void DISPLAY_DrawMenuAdvancedSettingsRootESC(uint32 ulBuff)
000000  4770              BX       lr
;;;7270   {
;;;7271   //	switch (ulBuff)
;;;7272   //	{
;;;7273   //		case 0:
;;;7274   
;;;7275   //			// 背景色
;;;7276   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_ESC_X,
;;;7277   //								UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_ESC_Y,
;;;7278   //								PIC_ID_G_BACK,
;;;7279   //								LCD_OPERATOR_MODE_DRAW);
;;;7280   
;;;7281   //			break;
;;;7282   
;;;7283   //		case 1:
;;;7284   
;;;7285   //			// 显示图片
;;;7286   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_ESC_X,
;;;7287   //								UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_ESC_Y,
;;;7288   //								PIC_ID_S_BACK,
;;;7289   //								LCD_OPERATOR_MODE_DRAW);	
;;;7290   //			
;;;7291   //			break;
;;;7292   
;;;7293   //		default:
;;;7294   //			break;
;;;7295   //	}
;;;7296   }
;;;7297   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootMaxAssist||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootMaxAssist PROC
;;;6769   // 显示高级菜单标题
;;;6770   void DISPLAY_DrawMenuAdvancedSettingsRootMaxAssist(uint32 ulBuff)
000000  4770              BX       lr
;;;6771   {
;;;6772   
;;;6773   //	// 显示图片
;;;6774   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_MAX_ASSIST_X,
;;;6775   //						UI_ITEM_COODINATE_MENU1_ADVANCED_MAX_ASSIST_Y,
;;;6776   //						PIC_ID_MAX_ASSIST_LEVEL,
;;;6777   //						LCD_OPERATOR_MODE_DRAW);	
;;;6778   
;;;6779   //	if (ulBuff > 9)
;;;6780   //	{
;;;6781   //		return;
;;;6782   //	}
;;;6783   
;;;6784   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_MAX_ASSIST_NUM_X,
;;;6785   //						UI_ITEM_COODINATE_MENU1_ADVANCED_MAX_ASSIST_NUM_Y,
;;;6786   //						(PIC_ID_E)(PIC_ID_S_0 + ulBuff),
;;;6787   //						LCD_OPERATOR_MODE_DRAW);
;;;6788   
;;;6789   }
;;;6790   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootReset||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootReset PROC
;;;6837   // 显示高级菜单标题
;;;6838   void DISPLAY_DrawMenuAdvancedSettingsRootReset(uint32 ulBuff)
000000  4770              BX       lr
;;;6839   {
;;;6840   //	switch (ulBuff)
;;;6841   //	{
;;;6842   //		case 0:
;;;6843   //			// 背景色
;;;6844   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_NUM_X,
;;;6845   //								UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_NUM_Y,
;;;6846   //								PIC_ID_G_FACTORY_DOT_BLACK,
;;;6847   //								LCD_OPERATOR_MODE_DRAW);
;;;6848   //			break;
;;;6849   
;;;6850   //		case 1:
;;;6851   //			// 显示图片
;;;6852   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_NUM_X,
;;;6853   //								UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_NUM_Y,
;;;6854   //								PIC_ID_G_FACTORY_DOT_BLUE,
;;;6855   //								LCD_OPERATOR_MODE_DRAW);	
;;;6856   //			break;
;;;6857   
;;;6858   //		default:
;;;6859   //	
;;;6860   //			break;
;;;6861   //	}
;;;6862   }
;;;6863   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootSetPassword||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootSetPassword PROC
;;;5951   // 显示高级菜单标题
;;;5952   void DISPLAY_DrawMenuAdvancedSettingsRootSetPassword(uint32 ulBuff)
000000  b2c1              UXTB     r1,r0
;;;5953   {
;;;5954   	uint8 enterVal = (uint8)(ulBuff & 0xFF);
;;;5955   	uint16 TurnValue = (uint16)((ulBuff >> 16) & 0xFFFF);
000002  0c00              LSRS     r0,r0,#16
;;;5956   	
;;;5957   	if (7 == enterVal)
000004  2907              CMP      r1,#7
000006  d007              BEQ      |L75.24|
;;;5958   	{
;;;5959   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_USER_PW_NUM_X,
;;;5960   								UI_ITEM_COODINATE_MENU2_ADV_USER_PW_NUM_Y,
;;;5961   								(PIC_ID_E)(PIC_ID_S_ON - TurnValue),
;;;5962   								LCD_OPERATOR_MODE_DRAW);
;;;5963   	}
;;;5964   	else
;;;5965   	{
;;;5966   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_USER_PW_NUM_X,
000008  f1c0009b          RSB      r0,r0,#0x9b
00000c  b282              UXTH     r2,r0
00000e  2300              MOVS     r3,#0
000010  2185              MOVS     r1,#0x85
000012  20fd              MOVS     r0,#0xfd
000014  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L75.24|
000018  f2a0109b          SUB      r0,r0,#0x19b          ;5959
00001c  4240              RSBS     r0,r0,#0              ;5959
00001e  b282              UXTH     r2,r0                 ;5959
000020  2300              MOVS     r3,#0                 ;5959
000022  2185              MOVS     r1,#0x85              ;5959
000024  20fd              MOVS     r0,#0xfd              ;5959
000026  f7ffbffe          B.W      LCD_DrawBmpByID
;;;5967   								UI_ITEM_COODINATE_MENU2_ADV_USER_PW_NUM_Y,
;;;5968   								(PIC_ID_E)(PIC_ID_G_ON - TurnValue),
;;;5969   								LCD_OPERATOR_MODE_DRAW);
;;;5970   		
;;;5971   	}
;;;5972   }
;;;5973   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootSetReset||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootSetReset PROC
;;;7163   // 显示高级菜单标题
;;;7164   void DISPLAY_DrawMenuAdvancedSettingsRootSetReset(uint32 ulBuff)
000000  4770              BX       lr
;;;7165   {
;;;7166   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_RESET_TITLE_X,
;;;7167   //								UI_ITEM_COODINATE_MENU1_ADVANCED_RESET_TITLE_Y,
;;;7168   //								PIC_ID_RESET_FACTORY_DEFAULT,
;;;7169   //								LCD_OPERATOR_MODE_DRAW);	
;;;7170   //								
;;;7171   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_RESET_YES_X,
;;;7172   //								UI_ITEM_COODINATE_MENU1_ADVANCED_RESET_YES_Y,
;;;7173   //								PIC_ID_YES,
;;;7174   //								LCD_OPERATOR_MODE_DRAW);
;;;7175   
;;;7176   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_RESET_NO_X,
;;;7177   //								UI_ITEM_COODINATE_MENU1_ADVANCED_RESET_NO_Y,
;;;7178   //								PIC_ID_NO,
;;;7179   //								LCD_OPERATOR_MODE_DRAW);
;;;7180   
;;;7181   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_X,
;;;7182   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_Y,
;;;7183   //								PIC_ID_CHOOSE,
;;;7184   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;7185   
;;;7186   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_X,
;;;7187   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_Y,
;;;7188   //								PIC_ID_CHOOSE,
;;;7189   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;7190   //	if (ulBuff)
;;;7191   //	{
;;;7192   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_X,
;;;7193   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR5_Y,
;;;7194   //								PIC_ID_CHOOSE,
;;;7195   //								LCD_OPERATOR_MODE_DRAW);
;;;7196   //	}
;;;7197   //	else
;;;7198   //	{
;;;7199   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_X,
;;;7200   //								UI_ITEM_COODINATE_MENU1_ADVANCED_CURSOR4_Y,
;;;7201   //								PIC_ID_CHOOSE,
;;;7202   //								LCD_OPERATOR_MODE_DRAW);
;;;7203   //			
;;;7204   //	}	
;;;7205   }
;;;7206   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootSpeedLimit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootSpeedLimit PROC
;;;7238   // 显示高级菜单之二:限速设置
;;;7239   void DISPLAY_DrawMenuAdvancedSettingsRootSpeedLimit(uint32 ulBuff)
000000  4770              BX       lr
;;;7240   {
;;;7241   //switch (ulBuff)
;;;7242   //{
;;;7243   //	case 0:
;;;7244   
;;;7245   //		// 背景色
;;;7246   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_SPEED_LIMIT_X,
;;;7247   //							UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_SPEED_LIMIT_Y,
;;;7248   //							PIC_ID_G_SLIMIT,
;;;7249   //							LCD_OPERATOR_MODE_DRAW);
;;;7250   
;;;7251   //		break;
;;;7252   
;;;7253   //	case 1:
;;;7254   
;;;7255   //		// 显示图片
;;;7256   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_SPEED_LIMIT_X,
;;;7257   //							UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_SPEED_LIMIT_Y,
;;;7258   //							PIC_ID_S_SLIMIT,
;;;7259   //							LCD_OPERATOR_MODE_DRAW);	
;;;7260   //		
;;;7261   //		break;
;;;7262   
;;;7263   //	default:
;;;7264   //		break;
;;;7265   //}
;;;7266   }
;;;7267   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootTitle PROC
;;;6503   // 显示高级菜单标题
;;;6504   void DISPLAY_DrawMenuAdvancedSettingsRootTitle(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;6505   {
000002  4604              MOV      r4,r0
;;;6506   	// 指示符
;;;6507   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_UP_CURSIE_X, UI_ITEM_COODINATE_MENU_UP_CURSIE_Y, PIC_ID_SANJIAO_2, LCD_OPERATOR_MODE_DRAW);
000004  2300              MOVS     r3,#0
000006  f24012a3          MOV      r2,#0x1a3
00000a  211d              MOVS     r1,#0x1d
00000c  2013              MOVS     r0,#0x13
00000e  f7fffffe          BL       LCD_DrawBmpByID
;;;6508   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DOWN_CURSIE_X, UI_ITEM_COODINATE_MENU_DOWN_CURSIE_Y, PIC_ID_SANJIAO, LCD_OPERATOR_MODE_DRAW);
000012  2300              MOVS     r3,#0
000014  f44f72d1          MOV      r2,#0x1a2
000018  219c              MOVS     r1,#0x9c
00001a  2013              MOVS     r0,#0x13
00001c  f7fffffe          BL       LCD_DrawBmpByID
;;;6509   	
;;;6510   	switch (ulBuff)
;;;6511   	{
;;;6512   		case 0:
;;;6513   			
;;;6514   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_X,
;;;6515   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_Y,
;;;6516   								PIC_ID_S_WHEEL,
;;;6517   								LCD_OPERATOR_MODE_DRAW);
;;;6518   
;;;6519   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_X,
;;;6520   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_Y,
;;;6521   								PIC_ID_G_METER,
;;;6522   								LCD_OPERATOR_MODE_DRAW);
;;;6523   
;;;6524   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_X,
;;;6525   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_Y,
;;;6526   								PIC_ID_G_SPEED_SENSOR,
;;;6527   								LCD_OPERATOR_MODE_DRAW);
;;;6528   
;;;6529   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_X,
;;;6530   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_Y,
;;;6531   								PIC_ID_G_BATTERY_VOLTAGE,
;;;6532   								LCD_OPERATOR_MODE_DRAW);
;;;6533   			break;
;;;6534   
;;;6535   		case 1:
;;;6536   			
;;;6537   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_X,
;;;6538   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_Y,
;;;6539   								PIC_ID_G_WHEEL,
;;;6540   								LCD_OPERATOR_MODE_DRAW);
;;;6541   
;;;6542   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_X,
;;;6543   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_Y,
;;;6544   								PIC_ID_S_METER,
;;;6545   								LCD_OPERATOR_MODE_DRAW);
;;;6546   
;;;6547   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_X,
;;;6548   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_Y,
;;;6549   								PIC_ID_G_SPEED_SENSOR,
;;;6550   								LCD_OPERATOR_MODE_DRAW);
;;;6551   
;;;6552   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_X,
;;;6553   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_Y,
;;;6554   								PIC_ID_G_BATTERY_VOLTAGE,
;;;6555   								LCD_OPERATOR_MODE_DRAW);
;;;6556   			break;
;;;6557   
;;;6558   		case 2:
;;;6559   			
;;;6560   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_X,
;;;6561   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_Y,
;;;6562   								PIC_ID_G_WHEEL,
;;;6563   								LCD_OPERATOR_MODE_DRAW);
;;;6564   
;;;6565   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_X,
;;;6566   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_Y,
;;;6567   								PIC_ID_G_METER,
;;;6568   								LCD_OPERATOR_MODE_DRAW);
;;;6569   
;;;6570   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_X,
;;;6571   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_Y,
;;;6572   								PIC_ID_S_SPEED_SENSOR,
;;;6573   								LCD_OPERATOR_MODE_DRAW);
;;;6574   
;;;6575   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_X,
;;;6576   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_Y,
;;;6577   								PIC_ID_G_BATTERY_VOLTAGE,
;;;6578   								LCD_OPERATOR_MODE_DRAW);
;;;6579   			break;
;;;6580   
;;;6581   		case 3:
;;;6582   			
;;;6583   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_X,
;;;6584   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_Y,
;;;6585   								PIC_ID_G_WHEEL,
;;;6586   								LCD_OPERATOR_MODE_DRAW);
;;;6587   
;;;6588   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_X,
;;;6589   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_Y,
;;;6590   								PIC_ID_G_METER,
;;;6591   								LCD_OPERATOR_MODE_DRAW);
;;;6592   
;;;6593   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_X,
;;;6594   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_Y,
;;;6595   								PIC_ID_G_SPEED_SENSOR,
;;;6596   								LCD_OPERATOR_MODE_DRAW);
;;;6597   
;;;6598   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_X,
;;;6599   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_Y,
;;;6600   								PIC_ID_S_BATTERY_VOLTAGE,
;;;6601   								LCD_OPERATOR_MODE_DRAW);
;;;6602   			break;
;;;6603   
;;;6604   		case 4:
;;;6605   			
;;;6606   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_X,
;;;6607   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_Y,
;;;6608   								PIC_ID_S_WALK_MODE,
;;;6609   								LCD_OPERATOR_MODE_DRAW);
;;;6610   
;;;6611   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_X,
;;;6612   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_Y,
;;;6613   								PIC_ID_G_TURN,
;;;6614   								LCD_OPERATOR_MODE_DRAW);
;;;6615   
;;;6616   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_X,
;;;6617   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_Y,
;;;6618   								PIC_ID_G_FACTORY,
;;;6619   								LCD_OPERATOR_MODE_DRAW);
;;;6620   		
;;;6621   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_RESET_FACTORY_POINT_X,
000020  f44f7581          MOV      r5,#0x102
000024  2c08              CMP      r4,#8                 ;6510
000026  d27d              BCS      |L78.292|
000028  e8dff004          TBB      [pc,r4]               ;6510
00002c  041f3a55          DCB      0x04,0x1f,0x3a,0x55
000030  7093b4d5          DCB      0x70,0x93,0xb4,0xd5
000034  2300              MOVS     r3,#0                 ;6514
000036  f24012a1          MOV      r2,#0x1a1             ;6514
00003a  2127              MOVS     r1,#0x27              ;6514
00003c  4618              MOV      r0,r3                 ;6514
00003e  f7fffffe          BL       LCD_DrawBmpByID
000042  2300              MOVS     r3,#0                 ;6519
000044  2299              MOVS     r2,#0x99              ;6519
000046  2144              MOVS     r1,#0x44              ;6519
000048  4618              MOV      r0,r3                 ;6519
00004a  f7fffffe          BL       LCD_DrawBmpByID
00004e  2300              MOVS     r3,#0                 ;6524
000050  229c              MOVS     r2,#0x9c              ;6524
000052  2161              MOVS     r1,#0x61              ;6524
000054  4618              MOV      r0,r3                 ;6524
000056  f7fffffe          BL       LCD_DrawBmpByID
00005a  e8bd4070          POP      {r4-r6,lr}            ;6529
00005e  2300              MOVS     r3,#0                 ;6529
000060  2291              MOVS     r2,#0x91              ;6529
000062  217e              MOVS     r1,#0x7e              ;6529
000064  4618              MOV      r0,r3                 ;6529
000066  f7ffbffe          B.W      LCD_DrawBmpByID
00006a  2300              MOVS     r3,#0                 ;6537
00006c  22a1              MOVS     r2,#0xa1              ;6537
00006e  2127              MOVS     r1,#0x27              ;6537
000070  4618              MOV      r0,r3                 ;6537
000072  f7fffffe          BL       LCD_DrawBmpByID
000076  2300              MOVS     r3,#0                 ;6542
000078  f2401299          MOV      r2,#0x199             ;6542
00007c  2144              MOVS     r1,#0x44              ;6542
00007e  4618              MOV      r0,r3                 ;6542
000080  f7fffffe          BL       LCD_DrawBmpByID
000084  2300              MOVS     r3,#0                 ;6547
000086  229c              MOVS     r2,#0x9c              ;6547
000088  2161              MOVS     r1,#0x61              ;6547
00008a  4618              MOV      r0,r3                 ;6547
00008c  f7fffffe          BL       LCD_DrawBmpByID
000090  e8bd4070          POP      {r4-r6,lr}            ;6552
000094  2300              MOVS     r3,#0                 ;6552
000096  2291              MOVS     r2,#0x91              ;6552
000098  217e              MOVS     r1,#0x7e              ;6552
00009a  4618              MOV      r0,r3                 ;6552
00009c  f7ffbffe          B.W      LCD_DrawBmpByID
0000a0  2300              MOVS     r3,#0                 ;6560
0000a2  22a1              MOVS     r2,#0xa1              ;6560
0000a4  2127              MOVS     r1,#0x27              ;6560
0000a6  4618              MOV      r0,r3                 ;6560
0000a8  f7fffffe          BL       LCD_DrawBmpByID
0000ac  2300              MOVS     r3,#0                 ;6565
0000ae  2299              MOVS     r2,#0x99              ;6565
0000b0  2144              MOVS     r1,#0x44              ;6565
0000b2  4618              MOV      r0,r3                 ;6565
0000b4  f7fffffe          BL       LCD_DrawBmpByID
0000b8  2300              MOVS     r3,#0                 ;6570
0000ba  f44f72ce          MOV      r2,#0x19c             ;6570
0000be  2161              MOVS     r1,#0x61              ;6570
0000c0  4618              MOV      r0,r3                 ;6570
0000c2  f7fffffe          BL       LCD_DrawBmpByID
0000c6  e8bd4070          POP      {r4-r6,lr}            ;6575
0000ca  2300              MOVS     r3,#0                 ;6575
0000cc  2291              MOVS     r2,#0x91              ;6575
0000ce  217e              MOVS     r1,#0x7e              ;6575
0000d0  4618              MOV      r0,r3                 ;6575
0000d2  f7ffbffe          B.W      LCD_DrawBmpByID
0000d6  2300              MOVS     r3,#0                 ;6583
0000d8  22a1              MOVS     r2,#0xa1              ;6583
0000da  2127              MOVS     r1,#0x27              ;6583
0000dc  4618              MOV      r0,r3                 ;6583
0000de  f7fffffe          BL       LCD_DrawBmpByID
0000e2  2300              MOVS     r3,#0                 ;6588
0000e4  2299              MOVS     r2,#0x99              ;6588
0000e6  2144              MOVS     r1,#0x44              ;6588
0000e8  4618              MOV      r0,r3                 ;6588
0000ea  f7fffffe          BL       LCD_DrawBmpByID
0000ee  2300              MOVS     r3,#0                 ;6593
0000f0  229c              MOVS     r2,#0x9c              ;6593
0000f2  2161              MOVS     r1,#0x61              ;6593
0000f4  4618              MOV      r0,r3                 ;6593
0000f6  f7fffffe          BL       LCD_DrawBmpByID
0000fa  e8bd4070          POP      {r4-r6,lr}            ;6598
0000fe  2300              MOVS     r3,#0                 ;6598
000100  f44f72cb          MOV      r2,#0x196             ;6598
000104  217e              MOVS     r1,#0x7e              ;6598
000106  4618              MOV      r0,r3                 ;6598
000108  f7ffbffe          B.W      LCD_DrawBmpByID
00010c  2300              MOVS     r3,#0                 ;6606
00010e  f44f72d0          MOV      r2,#0x1a0             ;6606
000112  2127              MOVS     r1,#0x27              ;6606
000114  4618              MOV      r0,r3                 ;6606
000116  f7fffffe          BL       LCD_DrawBmpByID
00011a  2300              MOVS     r3,#0                 ;6611
00011c  229d              MOVS     r2,#0x9d              ;6611
00011e  2144              MOVS     r1,#0x44              ;6611
000120  4618              MOV      r0,r3                 ;6611
000122  e000              B        |L78.294|
                  |L78.292|
000124  e078              B        |L78.536|
                  |L78.294|
000126  f7fffffe          BL       LCD_DrawBmpByID
00012a  2300              MOVS     r3,#0                 ;6616
00012c  2293              MOVS     r2,#0x93              ;6616
00012e  2161              MOVS     r1,#0x61              ;6616
000130  4618              MOV      r0,r3                 ;6616
000132  f7fffffe          BL       LCD_DrawBmpByID
000136  2300              MOVS     r3,#0
000138  2294              MOVS     r2,#0x94
00013a  216e              MOVS     r1,#0x6e
00013c  4628              MOV      r0,r5
00013e  f7fffffe          BL       LCD_DrawBmpByID
;;;6622   								UI_ITEM_COODINATE_MENU2_ADV_RESET_FACTORY_POINT_Y,
;;;6623   								PIC_ID_G_FACTORY_DOT_BLACK,
;;;6624   								LCD_OPERATOR_MODE_DRAW);
;;;6625   
;;;6626   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_X,
000142  e8bd4070          POP      {r4-r6,lr}
000146  2300              MOVS     r3,#0
000148  2292              MOVS     r2,#0x92
00014a  217e              MOVS     r1,#0x7e
00014c  4618              MOV      r0,r3
00014e  f7ffbffe          B.W      LCD_DrawBmpByID
;;;6627   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_Y,
;;;6628   								PIC_ID_G_EXIT,
;;;6629   								LCD_OPERATOR_MODE_DRAW);
;;;6630   			break;
;;;6631   
;;;6632   		case 5:
;;;6633   			
;;;6634   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_X,
000152  2300              MOVS     r3,#0
000154  22a0              MOVS     r2,#0xa0
000156  2127              MOVS     r1,#0x27
000158  4618              MOV      r0,r3
00015a  f7fffffe          BL       LCD_DrawBmpByID
;;;6635   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_Y,
;;;6636   								PIC_ID_G_WALK_MODE,
;;;6637   								LCD_OPERATOR_MODE_DRAW);
;;;6638   
;;;6639   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_X,
00015e  2300              MOVS     r3,#0
000160  f240129d          MOV      r2,#0x19d
000164  2144              MOVS     r1,#0x44
000166  4618              MOV      r0,r3
000168  f7fffffe          BL       LCD_DrawBmpByID
;;;6640   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_Y,
;;;6641   								PIC_ID_S_TURN,
;;;6642   								LCD_OPERATOR_MODE_DRAW);
;;;6643   
;;;6644   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_X,
00016c  2300              MOVS     r3,#0
00016e  2293              MOVS     r2,#0x93
000170  2161              MOVS     r1,#0x61
000172  4618              MOV      r0,r3
000174  f7fffffe          BL       LCD_DrawBmpByID
;;;6645   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_Y,
;;;6646   								PIC_ID_G_FACTORY,
;;;6647   								LCD_OPERATOR_MODE_DRAW);
;;;6648   		
;;;6649   	   	 LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_RESET_FACTORY_POINT_X,
000178  2300              MOVS     r3,#0
00017a  2294              MOVS     r2,#0x94
00017c  216e              MOVS     r1,#0x6e
00017e  4628              MOV      r0,r5
000180  f7fffffe          BL       LCD_DrawBmpByID
;;;6650   								UI_ITEM_COODINATE_MENU2_ADV_RESET_FACTORY_POINT_Y,
;;;6651   								PIC_ID_G_FACTORY_DOT_BLACK,
;;;6652   								LCD_OPERATOR_MODE_DRAW);
;;;6653   
;;;6654   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_X,
000184  e8bd4070          POP      {r4-r6,lr}
000188  2300              MOVS     r3,#0
00018a  2292              MOVS     r2,#0x92
00018c  217e              MOVS     r1,#0x7e
00018e  4618              MOV      r0,r3
000190  f7ffbffe          B.W      LCD_DrawBmpByID
;;;6655   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_Y,
;;;6656   								PIC_ID_G_EXIT,
;;;6657   								LCD_OPERATOR_MODE_DRAW);
;;;6658   			break;
;;;6659   
;;;6660   		case 6:
;;;6661   			
;;;6662   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_X,
000194  2300              MOVS     r3,#0
000196  22a0              MOVS     r2,#0xa0
000198  2127              MOVS     r1,#0x27
00019a  4618              MOV      r0,r3
00019c  f7fffffe          BL       LCD_DrawBmpByID
;;;6663   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_Y,
;;;6664   								PIC_ID_G_WALK_MODE,
;;;6665   								LCD_OPERATOR_MODE_DRAW);
;;;6666   
;;;6667   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_X,
0001a0  2300              MOVS     r3,#0
0001a2  229d              MOVS     r2,#0x9d
0001a4  2144              MOVS     r1,#0x44
0001a6  4618              MOV      r0,r3
0001a8  f7fffffe          BL       LCD_DrawBmpByID
;;;6668   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_Y,
;;;6669   								PIC_ID_G_TURN,
;;;6670   								LCD_OPERATOR_MODE_DRAW);
;;;6671   
;;;6672   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_X,
0001ac  2300              MOVS     r3,#0
0001ae  f44f72cc          MOV      r2,#0x198
0001b2  2161              MOVS     r1,#0x61
0001b4  4618              MOV      r0,r3
0001b6  f7fffffe          BL       LCD_DrawBmpByID
;;;6673   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_Y,
;;;6674   								PIC_ID_S_FACTORY,
;;;6675   								LCD_OPERATOR_MODE_DRAW);
;;;6676   		
;;;6677   		  LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_RESET_FACTORY_POINT_X,
0001ba  2300              MOVS     r3,#0
0001bc  2295              MOVS     r2,#0x95
0001be  216e              MOVS     r1,#0x6e
0001c0  4628              MOV      r0,r5
0001c2  f7fffffe          BL       LCD_DrawBmpByID
;;;6678   								UI_ITEM_COODINATE_MENU2_ADV_RESET_FACTORY_POINT_Y,
;;;6679   								PIC_ID_G_FACTORY_DOT_BLUE,
;;;6680   								LCD_OPERATOR_MODE_DRAW);
;;;6681   
;;;6682   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_X,
0001c6  e8bd4070          POP      {r4-r6,lr}
0001ca  2300              MOVS     r3,#0
0001cc  2292              MOVS     r2,#0x92
0001ce  217e              MOVS     r1,#0x7e
0001d0  4618              MOV      r0,r3
0001d2  f7ffbffe          B.W      LCD_DrawBmpByID
;;;6683   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_Y,
;;;6684   								PIC_ID_G_EXIT,
;;;6685   								LCD_OPERATOR_MODE_DRAW);
;;;6686   			break;
;;;6687   
;;;6688   		case 7:
;;;6689   			
;;;6690   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_X,
0001d6  2300              MOVS     r3,#0
0001d8  22a0              MOVS     r2,#0xa0
0001da  2127              MOVS     r1,#0x27
0001dc  4618              MOV      r0,r3
0001de  f7fffffe          BL       LCD_DrawBmpByID
;;;6691   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE1_Y,
;;;6692   								PIC_ID_G_WALK_MODE,
;;;6693   								LCD_OPERATOR_MODE_DRAW);
;;;6694   
;;;6695   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_X,
0001e2  2300              MOVS     r3,#0
0001e4  229d              MOVS     r2,#0x9d
0001e6  2144              MOVS     r1,#0x44
0001e8  4618              MOV      r0,r3
0001ea  f7fffffe          BL       LCD_DrawBmpByID
;;;6696   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE2_Y,
;;;6697   								PIC_ID_G_TURN,
;;;6698   								LCD_OPERATOR_MODE_DRAW);
;;;6699   
;;;6700   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_X,
0001ee  2300              MOVS     r3,#0
0001f0  2293              MOVS     r2,#0x93
0001f2  2161              MOVS     r1,#0x61
0001f4  4618              MOV      r0,r3
0001f6  f7fffffe          BL       LCD_DrawBmpByID
;;;6701   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE3_Y,
;;;6702   								PIC_ID_G_FACTORY,
;;;6703   								LCD_OPERATOR_MODE_DRAW);
;;;6704   		
;;;6705   		  LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU2_ADV_RESET_FACTORY_POINT_X,
0001fa  2300              MOVS     r3,#0
0001fc  2294              MOVS     r2,#0x94
0001fe  216e              MOVS     r1,#0x6e
000200  4628              MOV      r0,r5
000202  f7fffffe          BL       LCD_DrawBmpByID
;;;6706   								UI_ITEM_COODINATE_MENU2_ADV_RESET_FACTORY_POINT_Y,
;;;6707   								PIC_ID_G_FACTORY_DOT_BLACK,
;;;6708   								LCD_OPERATOR_MODE_DRAW);
;;;6709   
;;;6710   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_X,
000206  e8bd4070          POP      {r4-r6,lr}
00020a  2300              MOVS     r3,#0
00020c  f2401297          MOV      r2,#0x197
000210  217e              MOVS     r1,#0x7e
000212  4618              MOV      r0,r3
000214  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L78.536|
;;;6711   								UI_ITEM_COODINATE_MENU1_ADVANCED_TITILE4_Y,
;;;6712   								PIC_ID_S_EXIT,
;;;6713   								LCD_OPERATOR_MODE_DRAW);
;;;6714   			break;
;;;6715   
;;;6716   		default:
;;;6717   			break;
;;;6718   	}
;;;6719   }
000218  bd70              POP      {r4-r6,pc}
;;;6720   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsRootWheelSize||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsRootWheelSize PROC
;;;7208   // 显示高级菜单之一:周长设置
;;;7209   void DISPLAY_DrawMenuAdvancedSettingsRootWheelSize(uint32 ulBuff)
000000  4770              BX       lr
;;;7210   {
;;;7211   //	switch (ulBuff)
;;;7212   //	{
;;;7213   //		case 0:
;;;7214   
;;;7215   //			// 背景色
;;;7216   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_WHEEL_SIZE_X,
;;;7217   //								UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_WHEEL_SIZE_Y,
;;;7218   //								PIC_ID_G_WSIZE,
;;;7219   //								LCD_OPERATOR_MODE_DRAW);
;;;7220   
;;;7221   //			break;
;;;7222   
;;;7223   //		case 1:
;;;7224   
;;;7225   //			// 显示图片
;;;7226   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_WHEEL_SIZE_X,
;;;7227   //								UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_ROOT_WHEEL_SIZE_Y,
;;;7228   //								PIC_ID_S_WSIZE,
;;;7229   //								LCD_OPERATOR_MODE_DRAW);	
;;;7230   //			
;;;7231   //			break;
;;;7232   
;;;7233   //		default:
;;;7234   //			break;
;;;7235   //	}
;;;7236   }
;;;7237   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsSpeedLimit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsSpeedLimit PROC
;;;7316   // 显示高级菜单之限速设置界面
;;;7317   void DISPLAY_DrawMenuAdvancedSettingsSpeedLimit(uint32 ulBuff)
000000  4770              BX       lr
;;;7318   {
;;;7319   //	uint8 v1, v2;
;;;7320   //	uint8 speedLimit = ulBuff%100;
;;;7321   
;;;7322   //	v2 = speedLimit%10;
;;;7323   //	speedLimit /= 10;
;;;7324   //	v1 = speedLimit;
;;;7325   
;;;7326   //	// 背景色
;;;7327   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_TITLE_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_TITLE_Y, PIC_ID_G_SLIMIT, LCD_OPERATOR_MODE_DRAW);
;;;7328   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_ADD_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_ADD_Y, PIC_ID_S_PLUS, LCD_OPERATOR_MODE_DRAW);
;;;7329   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_DEC_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_DEC_Y, PIC_ID_S_MINUS, LCD_OPERATOR_MODE_DRAW);
;;;7330   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_SET_BUTTON_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_SET_BUTTON_Y, PIC_ID_S_FINISH, LCD_OPERATOR_MODE_DRAW);
;;;7331   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_VALUE_10_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_VALUE_10_Y, (PIC_ID_E)(PIC_ID_SMALL_0+v1), LCD_OPERATOR_MODE_DRAW);
;;;7332   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_VALUE_1_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_VALUE_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+v2), LCD_OPERATOR_MODE_DRAW);
;;;7333   //	if(UNIT_METRIC == PARAM_GetUnit())
;;;7334   //	{
;;;7335   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_VALUE_UNIT_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_VALUE_UNIT_Y, PIC_ID_KMH_MED, LCD_OPERATOR_MODE_DRAW);
;;;7336   //	}
;;;7337   //	else
;;;7338   //	{
;;;7339   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_VALUE_UNIT_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT_VALUE_UNIT_Y, PIC_ID_MPH_MED, LCD_OPERATOR_MODE_DRAW);
;;;7340   //	}
;;;7341   }
;;;7342   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAdvancedSettingsWheelSize||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAdvancedSettingsWheelSize PROC
;;;7298   // 显示高级菜单之周长设置界面
;;;7299   void DISPLAY_DrawMenuAdvancedSettingsWheelSize(uint32 ulBuff)
000000  4770              BX       lr
;;;7300   {
;;;7301   //	uint8 wheelSizeID = (PARAM_WHEEL_SIZE_ID)(ulBuff&0x000000FF);
;;;7302   
;;;7303   //	// 背景色
;;;7304   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_TITLE_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_TITLE_Y, PIC_ID_G_WSIZE, LCD_OPERATOR_MODE_DRAW);
;;;7305   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_ADD_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_ADD_Y, PIC_ID_S_PLUS, LCD_OPERATOR_MODE_DRAW);
;;;7306   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_DEC_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_DEC_Y, PIC_ID_S_MINUS, LCD_OPERATOR_MODE_DRAW);
;;;7307   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_SET_BUTTON_X, UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_SET_BUTTON_Y, PIC_ID_S_FINISH, LCD_OPERATOR_MODE_DRAW);
;;;7308   
;;;7309   //	// 显示轮径
;;;7310   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_ID_X,
;;;7311   //						UI_ITEM_COODINATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE_ID_Y,
;;;7312   //						GetPicIDFromWheelSizeID(wheelSizeID),
;;;7313   //						LCD_OPERATOR_MODE_DRAW);
;;;7314   }
;;;7315   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuAutoLight||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuAutoLight PROC
;;;4334   
;;;4335   void DISPLAY_DrawMenuAutoLight(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;4336   {
000002  4604              MOV      r4,r0
;;;4337   	
;;;4338   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_BG_X, UI_ITEM_COODINATE_MENU_DATA_BG_Y, PIC_ID_MENU_KUANG, LCD_OPERATOR_MODE_DRAW);
000004  2300              MOVS     r3,#0
000006  22eb              MOVS     r2,#0xeb
000008  2154              MOVS     r1,#0x54
00000a  2080              MOVS     r0,#0x80
00000c  f7fffffe          BL       LCD_DrawBmpByID
;;;4339   
;;;4340   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4341   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4342   	if ((BOOL)ulBuff)
000010  f0140fff          TST      r4,#0xff
000014  d007              BEQ      |L82.38|
;;;4343   	{
;;;4344   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_AUTO_LIGHT_NUM_X, UI_ITEM_COODINATE_MENU_AUTO_LIGHT_NUM_Y, PIC_ID_MENU_ON, LCD_OPERATOR_MODE_DRAW);
000016  2300              MOVS     r3,#0
000018  22f1              MOVS     r2,#0xf1
00001a  215c              MOVS     r1,#0x5c
00001c  e8bd4010          POP      {r4,lr}
000020  2091              MOVS     r0,#0x91
000022  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L82.38|
;;;4345   	}
;;;4346   	else
;;;4347   	{
;;;4348   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_AUTO_LIGHT_NUM_X, UI_ITEM_COODINATE_MENU_AUTO_LIGHT_NUM_Y, PIC_ID_MENU_OFF, LCD_OPERATOR_MODE_DRAW);
000026  2300              MOVS     r3,#0
000028  22ef              MOVS     r2,#0xef
00002a  215c              MOVS     r1,#0x5c
00002c  e8bd4010          POP      {r4,lr}
000030  2091              MOVS     r0,#0x91
000032  f7ffbffe          B.W      LCD_DrawBmpByID
;;;4349   	}
;;;4350   }
;;;4351   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuBackIcon||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawMenuBackIcon PROC
;;;4721   
;;;4722   void DISPLAY_DrawMenuBackIcon(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;4723   {
;;;4724   	uint8 enterVlaue = (ulBuff >> 8) & 0xFF;
000002  f3c02107          UBFX     r1,r0,#8,#8
;;;4725   	MENU_ID_E idValue = ulBuff & 0xFF;
000006  b2c0              UXTB     r0,r0
;;;4726   
;;;4727   	if ((BOOL)enterVlaue)
000008  2900              CMP      r1,#0
00000a  d07d              BEQ      |L83.264|
;;;4728   	{
;;;4729   		switch (idValue)
;;;4730   		{
;;;4731   			case MENU_ID_ROOT_CLEAR_DATA:
;;;4732   				break;
;;;4733   			case MENU_ID_ROOT_DISPLAY_UNIT:	
;;;4734   			case MENU_ID_ROOT_AUTO_LIGHT:		
;;;4735   			case MENU_ID_ROOT_SET_TIME:
;;;4736   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4737   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4738   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_X, UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_Y, PIC_ID_M_PRESS_SAVE, LCD_OPERATOR_MODE_DRAW);
;;;4739   				break;
;;;4740   				case MENU_ID_ROOT_SPEED_LIMIT:	
;;;4741   					LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_X, UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_Y, PIC_ID_M_PRESS_SAVE, LCD_OPERATOR_MODE_DRAW);
;;;4742   				// 判断是否到达上下限
;;;4743   					if (UNIT_METRIC == PARAM_GetUnit()) // 公制
00000c  4c90              LDR      r4,|L83.592|
00000e  2809              CMP      r0,#9                 ;4729
000010  d27b              BCS      |L83.266|
000012  e8dff000          TBB      [pc,r0]               ;4729
000016  7a05              DCB      0x7a,0x05
000018  88be0519          DCB      0x88,0xbe,0x05,0x19
00001c  7a7a0500          DCB      0x7a,0x7a,0x05,0x00
000020  2300              MOVS     r3,#0                 ;4736
000022  22e7              MOVS     r2,#0xe7              ;4736
000024  215c              MOVS     r1,#0x5c              ;4736
000026  205b              MOVS     r0,#0x5b              ;4736
000028  f7fffffe          BL       LCD_DrawBmpByID
00002c  2300              MOVS     r3,#0                 ;4737
00002e  22e4              MOVS     r2,#0xe4              ;4737
000030  215c              MOVS     r1,#0x5c              ;4737
000032  20e6              MOVS     r0,#0xe6              ;4737
000034  f7fffffe          BL       LCD_DrawBmpByID
000038  2300              MOVS     r3,#0                 ;4738
00003a  22d5              MOVS     r2,#0xd5              ;4738
00003c  2196              MOVS     r1,#0x96              ;4738
00003e  e8bd4010          POP      {r4,lr}               ;4738
000042  20d3              MOVS     r0,#0xd3              ;4738
000044  f7ffbffe          B.W      LCD_DrawBmpByID
000048  2300              MOVS     r3,#0                 ;4741
00004a  22d5              MOVS     r2,#0xd5              ;4741
00004c  2196              MOVS     r1,#0x96              ;4741
00004e  20d3              MOVS     r0,#0xd3              ;4741
000050  f7fffffe          BL       LCD_DrawBmpByID
000054  f8940319          LDRB     r0,[r4,#0x319]  ; paramCB
000058  b188              CBZ      r0,|L83.126|
;;;4744   					{
;;;4745   						if((paramCB.nvm.param.common.speed.limitVal ) >= speedLimitKM_H)
;;;4746   						{
;;;4747   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_OFF, LCD_OPERATOR_MODE_DRAW);
;;;4748   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4749   						}
;;;4750   						else if((paramCB.nvm.param.common.speed.limitVal ) <= speedLimitKM_L)
;;;4751   						{
;;;4752   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4753   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_OFF, LCD_OPERATOR_MODE_DRAW);
;;;4754   						}
;;;4755   						else
;;;4756   						{
;;;4757   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4758   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4759   						}
;;;4760   					}
;;;4761   					else
;;;4762   					{
;;;4763   						if(PARAM_GetSpeedLimit() >= speedLimitMPH_H)
00005a  f7fffffe          BL       PARAM_GetSpeedLimit
00005e  28fc              CMP      r0,#0xfc
000060  d33e              BCC      |L83.224|
;;;4764   						{
;;;4765   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_OFF, LCD_OPERATOR_MODE_DRAW);
000062  2300              MOVS     r3,#0
000064  22e3              MOVS     r2,#0xe3
000066  215c              MOVS     r1,#0x5c
000068  20e6              MOVS     r0,#0xe6
00006a  f7fffffe          BL       LCD_DrawBmpByID
;;;4766   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
00006e  2300              MOVS     r3,#0
000070  22e7              MOVS     r2,#0xe7
000072  215c              MOVS     r1,#0x5c
000074  e8bd4010          POP      {r4,lr}
000078  205b              MOVS     r0,#0x5b
00007a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.126|
00007e  f8b40334          LDRH     r0,[r4,#0x334]        ;4745  ; paramCB
000082  f5b07fcd          CMP      r0,#0x19a             ;4745
000086  d30d              BCC      |L83.164|
000088  2300              MOVS     r3,#0                 ;4747
00008a  22e3              MOVS     r2,#0xe3              ;4747
00008c  215c              MOVS     r1,#0x5c              ;4747
00008e  20e6              MOVS     r0,#0xe6              ;4747
000090  f7fffffe          BL       LCD_DrawBmpByID
000094  2300              MOVS     r3,#0                 ;4748
000096  22e7              MOVS     r2,#0xe7              ;4748
000098  215c              MOVS     r1,#0x5c              ;4748
00009a  e8bd4010          POP      {r4,lr}               ;4748
00009e  205b              MOVS     r0,#0x5b              ;4748
0000a0  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.164|
0000a4  2864              CMP      r0,#0x64              ;4750
0000a6  d80d              BHI      |L83.196|
0000a8  2300              MOVS     r3,#0                 ;4752
0000aa  22e4              MOVS     r2,#0xe4              ;4752
0000ac  215c              MOVS     r1,#0x5c              ;4752
0000ae  20e6              MOVS     r0,#0xe6              ;4752
0000b0  f7fffffe          BL       LCD_DrawBmpByID
0000b4  2300              MOVS     r3,#0                 ;4753
0000b6  22e6              MOVS     r2,#0xe6              ;4753
0000b8  215c              MOVS     r1,#0x5c              ;4753
0000ba  e8bd4010          POP      {r4,lr}               ;4753
0000be  205b              MOVS     r0,#0x5b              ;4753
0000c0  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.196|
0000c4  2300              MOVS     r3,#0                 ;4757
0000c6  22e7              MOVS     r2,#0xe7              ;4757
0000c8  215c              MOVS     r1,#0x5c              ;4757
0000ca  205b              MOVS     r0,#0x5b              ;4757
0000cc  f7fffffe          BL       LCD_DrawBmpByID
0000d0  2300              MOVS     r3,#0                 ;4758
0000d2  22e4              MOVS     r2,#0xe4              ;4758
0000d4  215c              MOVS     r1,#0x5c              ;4758
0000d6  e8bd4010          POP      {r4,lr}               ;4758
0000da  20e6              MOVS     r0,#0xe6              ;4758
0000dc  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.224|
;;;4767   						}
;;;4768   						else if(PARAM_GetSpeedLimit() <= speedLimitMPH_L)
0000e0  f7fffffe          BL       PARAM_GetSpeedLimit
0000e4  284a              CMP      r0,#0x4a
0000e6  d80d              BHI      |L83.260|
;;;4769   						{
;;;4770   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
0000e8  2300              MOVS     r3,#0
0000ea  22e4              MOVS     r2,#0xe4
0000ec  215c              MOVS     r1,#0x5c
0000ee  20e6              MOVS     r0,#0xe6
0000f0  f7fffffe          BL       LCD_DrawBmpByID
;;;4771   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_OFF, LCD_OPERATOR_MODE_DRAW);
0000f4  2300              MOVS     r3,#0
0000f6  22e6              MOVS     r2,#0xe6
0000f8  215c              MOVS     r1,#0x5c
0000fa  e8bd4010          POP      {r4,lr}
0000fe  205b              MOVS     r0,#0x5b
000100  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.260|
;;;4772   						}
;;;4773   						else
;;;4774   						{
;;;4775   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
000104  2300              MOVS     r3,#0
000106  e001              B        |L83.268|
                  |L83.264|
000108  e078              B        |L83.508|
                  |L83.266|
00010a  e0a0              B        |L83.590|
                  |L83.268|
00010c  22e7              MOVS     r2,#0xe7
00010e  215c              MOVS     r1,#0x5c
000110  205b              MOVS     r0,#0x5b
000112  f7fffffe          BL       LCD_DrawBmpByID
;;;4776   							LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
000116  2300              MOVS     r3,#0
000118  22e4              MOVS     r2,#0xe4
00011a  215c              MOVS     r1,#0x5c
00011c  e8bd4010          POP      {r4,lr}
000120  20e6              MOVS     r0,#0xe6
000122  f7ffbffe          B.W      LCD_DrawBmpByID
;;;4777   						}
;;;4778   					}
;;;4779   					break;
;;;4780   				case MENU_ID_ROOT_BACKLIGHT:
;;;4781   					LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_X, UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_Y, PIC_ID_M_PRESS_SAVE, LCD_OPERATOR_MODE_DRAW);
000126  2300              MOVS     r3,#0
000128  22d5              MOVS     r2,#0xd5
00012a  2196              MOVS     r1,#0x96
00012c  20d3              MOVS     r0,#0xd3
00012e  f7fffffe          BL       LCD_DrawBmpByID
;;;4782   					if(paramCB.nvm.param.common.brightness  == BACK_LIGHT_LEVEL_20_100)
000132  f8940320          LDRB     r0,[r4,#0x320]  ; paramCB
000136  2801              CMP      r0,#1
000138  d00f              BEQ      |L83.346|
;;;4783   					{
;;;4784   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_OFF, LCD_OPERATOR_MODE_DRAW);
;;;4785   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4786   					}
;;;4787   					else if(paramCB.nvm.param.common.brightness  == BACK_LIGHT_LEVEL_AUTO)
00013a  2806              CMP      r0,#6
00013c  d01b              BEQ      |L83.374|
;;;4788   					{
;;;4789   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4790   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_OFF, LCD_OPERATOR_MODE_DRAW);
;;;4791   					}
;;;4792   					else
;;;4793   					{
;;;4794   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
00013e  2300              MOVS     r3,#0
000140  22e4              MOVS     r2,#0xe4
000142  215c              MOVS     r1,#0x5c
000144  20e6              MOVS     r0,#0xe6
000146  f7fffffe          BL       LCD_DrawBmpByID
;;;4795   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
00014a  2300              MOVS     r3,#0
00014c  22e7              MOVS     r2,#0xe7
00014e  215c              MOVS     r1,#0x5c
000150  e8bd4010          POP      {r4,lr}
000154  205b              MOVS     r0,#0x5b
000156  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.346|
00015a  2300              MOVS     r3,#0                 ;4784
00015c  22e6              MOVS     r2,#0xe6              ;4784
00015e  215c              MOVS     r1,#0x5c              ;4784
000160  205b              MOVS     r0,#0x5b              ;4784
000162  f7fffffe          BL       LCD_DrawBmpByID
000166  2300              MOVS     r3,#0                 ;4785
000168  22e4              MOVS     r2,#0xe4              ;4785
00016a  215c              MOVS     r1,#0x5c              ;4785
00016c  e8bd4010          POP      {r4,lr}               ;4785
000170  20e6              MOVS     r0,#0xe6              ;4785
000172  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.374|
000176  2300              MOVS     r3,#0                 ;4789
000178  22e7              MOVS     r2,#0xe7              ;4789
00017a  215c              MOVS     r1,#0x5c              ;4789
00017c  205b              MOVS     r0,#0x5b              ;4789
00017e  f7fffffe          BL       LCD_DrawBmpByID
000182  2300              MOVS     r3,#0                 ;4790
000184  22e3              MOVS     r2,#0xe3              ;4790
000186  215c              MOVS     r1,#0x5c              ;4790
000188  e8bd4010          POP      {r4,lr}               ;4790
00018c  20e6              MOVS     r0,#0xe6              ;4790
00018e  f7ffbffe          B.W      LCD_DrawBmpByID
;;;4796   					}
;;;4797   					break;
;;;4798   				case MENU_ID_ROOT_POWEROFF_TIME:
;;;4799   
;;;4800   					LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_X, UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_Y, PIC_ID_M_PRESS_SAVE, LCD_OPERATOR_MODE_DRAW);
000192  2300              MOVS     r3,#0
000194  22d5              MOVS     r2,#0xd5
000196  2196              MOVS     r1,#0x96
000198  20d3              MOVS     r0,#0xd3
00019a  f7fffffe          BL       LCD_DrawBmpByID
;;;4801   					if(paramCB.nvm.param.common.powerOffTime == 0)
00019e  f8940321          LDRB     r0,[r4,#0x321]  ; paramCB
0001a2  b178              CBZ      r0,|L83.452|
;;;4802   					{
;;;4803   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_OFF, LCD_OPERATOR_MODE_DRAW);
;;;4804   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4805   					}
;;;4806   					else if(paramCB.nvm.param.common.powerOffTime == 60)
0001a4  283c              CMP      r0,#0x3c
0001a6  d01b              BEQ      |L83.480|
;;;4807   					{
;;;4808   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4809   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_OFF, LCD_OPERATOR_MODE_DRAW);
;;;4810   					}
;;;4811   					else
;;;4812   					{
;;;4813   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
0001a8  2300              MOVS     r3,#0
0001aa  22e7              MOVS     r2,#0xe7
0001ac  215c              MOVS     r1,#0x5c
0001ae  205b              MOVS     r0,#0x5b
0001b0  f7fffffe          BL       LCD_DrawBmpByID
;;;4814   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
0001b4  2300              MOVS     r3,#0
0001b6  22e4              MOVS     r2,#0xe4
0001b8  215c              MOVS     r1,#0x5c
0001ba  e8bd4010          POP      {r4,lr}
0001be  20e6              MOVS     r0,#0xe6
0001c0  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.452|
0001c4  2300              MOVS     r3,#0                 ;4803
0001c6  22e6              MOVS     r2,#0xe6              ;4803
0001c8  215c              MOVS     r1,#0x5c              ;4803
0001ca  205b              MOVS     r0,#0x5b              ;4803
0001cc  f7fffffe          BL       LCD_DrawBmpByID
0001d0  2300              MOVS     r3,#0                 ;4804
0001d2  22e4              MOVS     r2,#0xe4              ;4804
0001d4  215c              MOVS     r1,#0x5c              ;4804
0001d6  e8bd4010          POP      {r4,lr}               ;4804
0001da  20e6              MOVS     r0,#0xe6              ;4804
0001dc  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.480|
0001e0  2300              MOVS     r3,#0                 ;4808
0001e2  22e7              MOVS     r2,#0xe7              ;4808
0001e4  215c              MOVS     r1,#0x5c              ;4808
0001e6  205b              MOVS     r0,#0x5b              ;4808
0001e8  f7fffffe          BL       LCD_DrawBmpByID
0001ec  2300              MOVS     r3,#0                 ;4809
0001ee  22e3              MOVS     r2,#0xe3              ;4809
0001f0  215c              MOVS     r1,#0x5c              ;4809
0001f2  e8bd4010          POP      {r4,lr}               ;4809
0001f6  20e6              MOVS     r0,#0xe6              ;4809
0001f8  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.508|
;;;4815   					}
;;;4816   				break;
;;;4817   
;;;4818   				
;;;4819   
;;;4820   			default:
;;;4821   				break;
;;;4822   		}
;;;4823   		
;;;4824   		
;;;4825   	}
;;;4826   	else
;;;4827   	{
;;;4828   		switch (idValue)
0001fc  2809              CMP      r0,#9
0001fe  d226              BCS      |L83.590|
000200  e8dff000          TBB      [pc,r0]
000204  25050505          DCB      0x25,0x05,0x05,0x05
000208  05052525          DCB      0x05,0x05,0x25,0x25
00020c  0500              DCB      0x05,0x00
;;;4829   		{
;;;4830   			case MENU_ID_ROOT_CLEAR_DATA:
;;;4831   				break;
;;;4832   			case MENU_ID_ROOT_DISPLAY_UNIT:
;;;4833   			case MENU_ID_ROOT_BACKLIGHT:
;;;4834   			case MENU_ID_ROOT_POWEROFF_TIME:
;;;4835   			case MENU_ID_ROOT_AUTO_LIGHT:
;;;4836   			case MENU_ID_ROOT_SPEED_LIMIT:
;;;4837   			case MENU_ID_ROOT_SET_TIME:
;;;4838   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_BACKGROUND);
00020e  2301              MOVS     r3,#1
000210  22e7              MOVS     r2,#0xe7
000212  215c              MOVS     r1,#0x5c
000214  205b              MOVS     r0,#0x5b
000216  f7fffffe          BL       LCD_DrawBmpByID
;;;4839   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_BACKGROUND);
00021a  2301              MOVS     r3,#1
00021c  22e4              MOVS     r2,#0xe4
00021e  215c              MOVS     r1,#0x5c
000220  20e6              MOVS     r0,#0xe6
000222  f7fffffe          BL       LCD_DrawBmpByID
;;;4840   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_OFF, LCD_OPERATOR_MODE_BACKGROUND);
000226  2301              MOVS     r3,#1
000228  22e6              MOVS     r2,#0xe6
00022a  215c              MOVS     r1,#0x5c
00022c  205b              MOVS     r0,#0x5b
00022e  f7fffffe          BL       LCD_DrawBmpByID
;;;4841   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_OFF, LCD_OPERATOR_MODE_BACKGROUND);
000232  2301              MOVS     r3,#1
000234  22e3              MOVS     r2,#0xe3
000236  215c              MOVS     r1,#0x5c
000238  20e6              MOVS     r0,#0xe6
00023a  f7fffffe          BL       LCD_DrawBmpByID
;;;4842   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_X, UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_Y, PIC_ID_M_PRESS_SAVE, LCD_OPERATOR_MODE_BACKGROUND);
00023e  2301              MOVS     r3,#1
000240  22d5              MOVS     r2,#0xd5
000242  2196              MOVS     r1,#0x96
000244  e8bd4010          POP      {r4,lr}
000248  20d3              MOVS     r0,#0xd3
00024a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L83.590|
;;;4843   				break;
;;;4844   
;;;4845   			default:
;;;4846   				break;
;;;4847   		}
;;;4848   	
;;;4849   		
;;;4850   	}
;;;4851   }
00024e  bd10              POP      {r4,pc}
;;;4852   
                          ENDP

                  |L83.592|
                          DCD      paramCB

                          AREA ||i.DISPLAY_DrawMenuBackLight||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuBackLight PROC
;;;4291   
;;;4292   void DISPLAY_DrawMenuBackLight(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;4293   {
000002  4604              MOV      r4,r0
;;;4294   	CHECK_PARAM_OVER_RETURN(ulBuff, BACK_LIGHT_LEVEL_AUTO);
000004  2c06              CMP      r4,#6
000006  d80e              BHI      |L84.38|
;;;4295   	
;;;4296   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_BG_X, UI_ITEM_COODINATE_MENU_DATA_BG_Y, PIC_ID_MENU_KUANG, LCD_OPERATOR_MODE_DRAW);
000008  2300              MOVS     r3,#0
00000a  22eb              MOVS     r2,#0xeb
00000c  2154              MOVS     r1,#0x54
00000e  2080              MOVS     r0,#0x80
000010  f7fffffe          BL       LCD_DrawBmpByID
;;;4297   
;;;4298   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4299   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4300   
;;;4301   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_BACK_LIGHT_NUM_X, UI_ITEM_COODINATE_MENU_BACK_LIGHT_NUM_Y, (PIC_ID_E)(ulBuff - 1 + PIC_ID_BACKLIGHT_SET_1), LCD_OPERATOR_MODE_DRAW);
000014  3429              ADDS     r4,r4,#0x29
000016  b2a2              UXTH     r2,r4
000018  2300              MOVS     r3,#0
00001a  215c              MOVS     r1,#0x5c
00001c  e8bd4010          POP      {r4,lr}
000020  2094              MOVS     r0,#0x94
000022  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L84.38|
;;;4302   }
000026  bd10              POP      {r4,pc}
;;;4303   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuBeforeAdvancedSettings||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuBeforeAdvancedSettings PROC
;;;5686   // 进入高级菜单前的确认界面
;;;5687   void DISPLAY_DrawMenuBeforeAdvancedSettings(uint32 ulBuff)
000000  4770              BX       lr
;;;5688   {
;;;5689   //	switch (ulBuff)
;;;5690   //	{
;;;5691   //		case 0:
;;;5692   
;;;5693   //			// 背景色
;;;5694   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_BEFORE_ADVANCED_SETTINGS_X,
;;;5695   //								UI_ITEM_COODINATE_MENU_BEFORE_ADVANCED_SETTINGS_Y,
;;;5696   //								PIC_ID_G_CAUTION,
;;;5697   //								LCD_OPERATOR_MODE_BACKGROUND);
;;;5698   
;;;5699   //			break;
;;;5700   
;;;5701   //		case 1:
;;;5702   
;;;5703   //			// 显示图片
;;;5704   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_BEFORE_ADVANCED_SETTINGS_X,
;;;5705   //								UI_ITEM_COODINATE_MENU_BEFORE_ADVANCED_SETTINGS_Y,
;;;5706   //								PIC_ID_G_CAUTION,
;;;5707   //								LCD_OPERATOR_MODE_DRAW);	
;;;5708   //			
;;;5709   //			break;
;;;5710   
;;;5711   //		default:
;;;5712   //			break;
;;;5713   //	}
;;;5714   }
;;;5715   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuBg||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuBg PROC
;;;3365   **********************************************************************/
;;;3366   void DISPLAY_DrawMenuBg(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;3367   {
;;;3368   	// 显示图片			
;;;3369   	LCD_DrawBmpByID(UI_ITEM_COODINATE_RIDING_BACKGROUND_X, UI_ITEM_COODINATE_RIDING_BACKGROUND_Y, PIC_ID_BG_MENU, LCD_OPERATOR_MODE_DRAW);	
000002  2250              MOVS     r2,#0x50
000004  4619              MOV      r1,r3
000006  4618              MOV      r0,r3
000008  f7ffbffe          B.W      LCD_DrawBmpByID
;;;3370   
;;;3371   }
;;;3372   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuClearData||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuClearData PROC
;;;4258   
;;;4259   void DISPLAY_DrawMenuClearData(uint32 ulBuff)
000000  4770              BX       lr
;;;4260   {
;;;4261   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_BG_X, UI_ITEM_COODINATE_MENU_DATA_BG_Y, PIC_ID_MENU_KUANG, LCD_OPERATOR_MODE_DRAW);
;;;4262   
;;;4263   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4264   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4265   //	if ((BOOL)ulBuff)
;;;4266   //	{
;;;4267   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_NUM_X, UI_ITEM_COODINATE_MENU_CLEAR_NUM_Y, PIC_ID_MENU_YES, LCD_OPERATOR_MODE_DRAW);
;;;4268   //	}
;;;4269   //	else
;;;4270   //	{
;;;4271   
;;;4272   //	}
;;;4273   
;;;4274   }
;;;4275   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuConnectToApp||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuConnectToApp PROC
;;;4711   
;;;4712   void DISPLAY_DrawMenuConnectToApp(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;4713   {
;;;4714   
;;;4715   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SCAN_QR_TITILE_X, UI_ITEM_COODINATE_MENU_SCAN_QR_TITILE_Y, PIC_ID_SCANQR_TITILE, LCD_OPERATOR_MODE_DRAW);
000002  2300              MOVS     r3,#0
000004  f44f72d2          MOV      r2,#0x1a4
000008  2128              MOVS     r1,#0x28
00000a  205b              MOVS     r0,#0x5b
00000c  f7fffffe          BL       LCD_DrawBmpByID
;;;4716   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SCAN_QR_TRIPS_X, UI_ITEM_COODINATE_MENU_SCAN_QR_TRIPS_Y, PIC_ID_TRIPS_SCANQR_TITILE, LCD_OPERATOR_MODE_DRAW);
000010  2300              MOVS     r3,#0
000012  f44f72f7          MOV      r2,#0x1ee
000016  2188              MOVS     r1,#0x88
000018  2066              MOVS     r0,#0x66
00001a  f7fffffe          BL       LCD_DrawBmpByID
;;;4717   
;;;4718   	// 在指定的坐标显示二维码
;;;4719   	LCD_PrintQR(UI_ITEM_COODINATE_MENU_SCAN_QR_PIC_Y, UI_ITEM_COODINATE_MENU_SCAN_QR_PIC_X);
00001e  2188              MOVS     r1,#0x88
000020  e8bd4010          POP      {r4,lr}
000024  203f              MOVS     r0,#0x3f
000026  f7ffbffe          B.W      LCD_PrintQR
;;;4720   }
;;;4721   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuDisplayUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuDisplayUnit PROC
;;;4275   
;;;4276   void DISPLAY_DrawMenuDisplayUnit(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;4277   {
000002  4604              MOV      r4,r0
;;;4278   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_BG_X, UI_ITEM_COODINATE_MENU_DATA_BG_Y, PIC_ID_MENU_KUANG, LCD_OPERATOR_MODE_DRAW);
000004  2300              MOVS     r3,#0
000006  22eb              MOVS     r2,#0xeb
000008  2154              MOVS     r1,#0x54
00000a  2080              MOVS     r0,#0x80
00000c  f7fffffe          BL       LCD_DrawBmpByID
;;;4279   
;;;4280   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4281   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4282   	if ((BOOL)ulBuff)
000010  f0140fff          TST      r4,#0xff
000014  d007              BEQ      |L89.38|
;;;4283   	{
;;;4284   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DISPLAY_UNIT_NUM_X, UI_ITEM_COODINATE_MENU_DISPLAY_UNIT_NUM_Y, PIC_ID_MENU_MPH, LCD_OPERATOR_MODE_DRAW);
000016  2300              MOVS     r3,#0
000018  22ed              MOVS     r2,#0xed
00001a  215c              MOVS     r1,#0x5c
00001c  e8bd4010          POP      {r4,lr}
000020  2093              MOVS     r0,#0x93
000022  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L89.38|
;;;4285   	}
;;;4286   	else
;;;4287   	{
;;;4288   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DISPLAY_UNIT_NUM_X, UI_ITEM_COODINATE_MENU_DISPLAY_UNIT_NUM_Y, PIC_ID_MENU_KMH, LCD_OPERATOR_MODE_DRAW);
000026  2300              MOVS     r3,#0
000028  22ea              MOVS     r2,#0xea
00002a  215c              MOVS     r1,#0x5c
00002c  e8bd4010          POP      {r4,lr}
000030  2093              MOVS     r0,#0x93
000032  f7ffbffe          B.W      LCD_DrawBmpByID
;;;4289   	}
;;;4290   }
;;;4291   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuError||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuError PROC
;;;3428   **********************************************************************/
;;;3429   void DISPLAY_DrawMenuError(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;3430   {
;;;3431   	uint8 value1=0, value2=0;
;;;3432   	uint8 usLocalBuff = ulBuff&0x000000FF;
000002  b2c0              UXTB     r0,r0
;;;3433   
;;;3434   	// 直接将16进制的代码直接显示，不要显示为10进制的代码
;;;3435   	// 提取数字
;;;3436   	value2 = (usLocalBuff>>4)&0x0F;
000004  0905              LSRS     r5,r0,#4
;;;3437   	value1 = usLocalBuff&0x0F;
000006  f000040f          AND      r4,r0,#0xf
;;;3438   
;;;3439   	// 刷背景
;;;3440   	LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_ICON_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_ICON_Y,
00000a  2300              MOVS     r3,#0
00000c  f44f72f9          MOV      r2,#0x1f2
000010  2131              MOVS     r1,#0x31
000012  2035              MOVS     r0,#0x35
000014  f7fffffe          BL       LCD_DrawBmpByID
;;;3441   					 PIC_ID_WARN_ERROR, LCD_OPERATOR_MODE_DRAW);
;;;3442   
;;;3443   
;;;3444   	LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_10_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_10_Y,
000018  2300              MOVS     r3,#0
00001a  f20512f3          ADD      r2,r5,#0x1f3
00001e  2135              MOVS     r1,#0x35
000020  2061              MOVS     r0,#0x61
000022  f7fffffe          BL       LCD_DrawBmpByID
;;;3445   					(PIC_ID_E)(PIC_ID_WARN_X_0 + value2), LCD_OPERATOR_MODE_DRAW);
;;;3446   
;;;3447   	LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_1_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_1_Y,
000026  f20412f3          ADD      r2,r4,#0x1f3
00002a  e8bd4070          POP      {r4-r6,lr}
00002e  2300              MOVS     r3,#0
000030  2135              MOVS     r1,#0x35
000032  2068              MOVS     r0,#0x68
000034  f7ffbffe          B.W      LCD_DrawBmpByID
;;;3448   					 (PIC_ID_E)(PIC_ID_WARN_X_0 + value1), LCD_OPERATOR_MODE_DRAW);
;;;3449   
;;;3450   					 
;;;3451   	/*switch (usLocalBuff)
;;;3452   	{
;;;3453   		case 0x30:
;;;3454   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_30, LCD_OPERATOR_MODE_DRAW);
;;;3455   			break;
;;;3456   			
;;;3457   		case 0x27:
;;;3458   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_27, LCD_OPERATOR_MODE_DRAW);
;;;3459   			break;
;;;3460   		
;;;3461   		case 0x07:
;;;3462   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_07, LCD_OPERATOR_MODE_DRAW);
;;;3463   			break;
;;;3464   		
;;;3465   		case 0x31:
;;;3466   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_31, LCD_OPERATOR_MODE_DRAW);
;;;3467   			break;
;;;3468   
;;;3469   		case 0x32:
;;;3470   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_32, LCD_OPERATOR_MODE_DRAW);
;;;3471   			break;
;;;3472   
;;;3473   		case 0x08:
;;;3474   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_08, LCD_OPERATOR_MODE_DRAW);
;;;3475   			break;
;;;3476   
;;;3477   		case 0x09:
;;;3478   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_09, LCD_OPERATOR_MODE_DRAW);
;;;3479   			break;
;;;3480   
;;;3481   		case 0x10:
;;;3482   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_10, LCD_OPERATOR_MODE_DRAW);
;;;3483   			break;
;;;3484   
;;;3485   		case 0x11:
;;;3486   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_11, LCD_OPERATOR_MODE_DRAW);
;;;3487   			break;
;;;3488   
;;;3489   		case 0x14:
;;;3490   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_14, LCD_OPERATOR_MODE_DRAW);
;;;3491   			break;
;;;3492   
;;;3493   		case 0x15:
;;;3494   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_15, LCD_OPERATOR_MODE_DRAW);
;;;3495   			break;
;;;3496   
;;;3497   		case 0x12:
;;;3498   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_12, LCD_OPERATOR_MODE_DRAW);
;;;3499   			break;
;;;3500   
;;;3501   		case 0x23:
;;;3502   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_23, LCD_OPERATOR_MODE_DRAW);
;;;3503   			break;
;;;3504   
;;;3505   		case 0x21:
;;;3506   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_21, LCD_OPERATOR_MODE_DRAW);
;;;3507   			break;
;;;3508   
;;;3509   		case 0x25:
;;;3510   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_25, LCD_OPERATOR_MODE_DRAW);
;;;3511   			break;
;;;3512   
;;;3513   		case 0x26:
;;;3514   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_26, LCD_OPERATOR_MODE_DRAW);
;;;3515   			break;
;;;3516   
;;;3517   		case 0x41:
;;;3518   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_41, LCD_OPERATOR_MODE_DRAW);
;;;3519   			break;
;;;3520   
;;;3521   		case 0x42:
;;;3522   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_42, LCD_OPERATOR_MODE_DRAW);
;;;3523   			break;
;;;3524   
;;;3525   		case 0x43:
;;;3526   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_43, LCD_OPERATOR_MODE_DRAW);
;;;3527   			break;
;;;3528   
;;;3529   		case 0x44:
;;;3530   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_44, LCD_OPERATOR_MODE_DRAW);
;;;3531   			break;
;;;3532   
;;;3533   		case 0x45:
;;;3534   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_45, LCD_OPERATOR_MODE_DRAW);
;;;3535   			break;
;;;3536   
;;;3537   		case 0x46:
;;;3538   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_46, LCD_OPERATOR_MODE_DRAW);
;;;3539   			break;
;;;3540   
;;;3541   		case 0x47:
;;;3542   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_47, LCD_OPERATOR_MODE_DRAW);
;;;3543   			break;
;;;3544   
;;;3545   		case 0x48:
;;;3546   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_48, LCD_OPERATOR_MODE_DRAW);
;;;3547   			break;
;;;3548   
;;;3549   		case 0x49:
;;;3550   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_49, LCD_OPERATOR_MODE_DRAW);
;;;3551   			break;
;;;3552   
;;;3553   		case 0x4A:
;;;3554   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_4A, LCD_OPERATOR_MODE_DRAW);
;;;3555   			break;
;;;3556   
;;;3557   		case 0x4E:
;;;3558   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_4E, LCD_OPERATOR_MODE_DRAW);
;;;3559   			break;
;;;3560   
;;;3561   		case 0xE1:
;;;3562   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_E1, LCD_OPERATOR_MODE_DRAW);
;;;3563   			break;
;;;3564   
;;;3565   		case 0xE2:
;;;3566   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_E2, LCD_OPERATOR_MODE_DRAW);
;;;3567   			break;
;;;3568   
;;;3569   		case 0xE3:
;;;3570   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_E3, LCD_OPERATOR_MODE_DRAW);
;;;3571   			break;
;;;3572   
;;;3573   		case 0xE4:
;;;3574   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_E4, LCD_OPERATOR_MODE_DRAW);
;;;3575   			break;
;;;3576   
;;;3577   		case 0xE5:
;;;3578   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_E5, LCD_OPERATOR_MODE_DRAW);
;;;3579   			break;
;;;3580   
;;;3581   		case 0xEF:
;;;3582   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_EF, LCD_OPERATOR_MODE_DRAW);
;;;3583   			break;
;;;3584   			
;;;3585   		// 显示错误代码
;;;3586   		default:
;;;3587   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_WARN_ERROR, LCD_OPERATOR_MODE_DRAW);
;;;3588   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_10_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_10_Y, (PIC_ID_E)(PIC_ID_WARN_X_0 + value2), LCD_OPERATOR_MODE_DRAW);
;;;3589   			LCD_DrawBmpByID((uint16)UI_COODINATE_MENU_ERROR_CODE_1_X, (uint16)UI_COODINATE_MENU_ERROR_CODE_1_Y, (PIC_ID_E)(PIC_ID_WARN_X_0 + value1), LCD_OPERATOR_MODE_DRAW);
;;;3590   			break;
;;;3591   	}*/
;;;3592   }
;;;3593   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuErrorTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuErrorTitle PROC
;;;3391   **********************************************************************/
;;;3392   void DISPLAY_DrawMenuErrorTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;3393   {
;;;3394   //	switch (ulBuff)
;;;3395   //	{
;;;3396   //		case 0:
;;;3397   
;;;3398   //			// 背景色
;;;3399   //			LCD_DrawBmpByID(UI_COODINATE_MENU_ERROR_CODE_ICON_X, UI_COODINATE_MENU_ERROR_CODE_ICON_Y, PIC_ID_ICON_ERROR, LCD_OPERATOR_MODE_BACKGROUND);
;;;3400   //			LCD_DrawBmpByID(UI_COODINATE_MENU_ERROR_CODE_TITLE_X, UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_G_ERROR, LCD_OPERATOR_MODE_BACKGROUND);
;;;3401   
;;;3402   //			break;
;;;3403   
;;;3404   //		case 1:
;;;3405   
;;;3406   //			// 显示图片
;;;3407   //			LCD_DrawBmpByID(UI_COODINATE_MENU_ERROR_CODE_ICON_X, UI_COODINATE_MENU_ERROR_CODE_ICON_Y, PIC_ID_ICON_ERROR, LCD_OPERATOR_MODE_DRAW);
;;;3408   //			LCD_DrawBmpByID(UI_COODINATE_MENU_ERROR_CODE_TITLE_X, UI_COODINATE_MENU_ERROR_CODE_TITLE_Y, PIC_ID_G_ERROR, LCD_OPERATOR_MODE_DRAW);	
;;;3409   //			
;;;3410   //			break;
;;;3411   
;;;3412   //		default:
;;;3413   //			break;
;;;3414   //	}
;;;3415   }
;;;3416   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuFinish||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuFinish PROC
;;;8538   **********************************************************************/
;;;8539   void DISPLAY_DrawMenuFinish(uint32 ulBuff)
000000  4770              BX       lr
;;;8540   {
;;;8541   //	switch (ulBuff)
;;;8542   //	{
;;;8543   //		case 0:
;;;8544   
;;;8545   //			// 显示背景
;;;8546   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_TIME_FINISH_X, UI_ITEM_COODINATE_MENU_L4_TIME_FINISH_Y, PIC_ID_S_FINISH, LCD_OPERATOR_MODE_BACKGROUND);
;;;8547   
;;;8548   //			break;
;;;8549   
;;;8550   //		case 1:
;;;8551   
;;;8552   //			// 选中，显示图片
;;;8553   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_TIME_FINISH_X, UI_ITEM_COODINATE_MENU_L4_TIME_FINISH_Y, PIC_ID_S_FINISH, LCD_OPERATOR_MODE_DRAW);	
;;;8554   //			
;;;8555   //			break;
;;;8556   
;;;8557   //		default:
;;;8558   //			break;
;;;8559   //	}
;;;8560   }
;;;8561   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL1Back||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL1Back PROC
;;;4866   **********************************************************************/
;;;4867   void DISPLAY_DrawMenuL1Back(uint32 ulBuff)
000000  4770              BX       lr
;;;4868   {
;;;4869   //	if (PARAM_GetExistBle())
;;;4870   //	{
;;;4871   //		switch (ulBuff)
;;;4872   //		{
;;;4873   //			case 0:
;;;4874   
;;;4875   //				// 非选，显示图片
;;;4876   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_ESC_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_ESC_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_BACKGROUND);
;;;4877   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_ESC_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L1_ESC_UNSELECTED_Y, PIC_ID_G_BACK, LCD_OPERATOR_MODE_DRAW);	
;;;4878   
;;;4879   //				break;
;;;4880   
;;;4881   //			case 1:
;;;4882   
;;;4883   //				// 选中，显示图片
;;;4884   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_ESC_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_ESC_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_DRAW);	
;;;4885   //				
;;;4886   //				break;
;;;4887   
;;;4888   //			default:
;;;4889   //				break;
;;;4890   //		}
;;;4891   //	}
;;;4892   //	else
;;;4893   //	{
;;;4894   //		switch (ulBuff)
;;;4895   //		{
;;;4896   //			case 0:
;;;4897   
;;;4898   //				// 非选，显示图片
;;;4899   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_CONNECT_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_CONNECT_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_BACKGROUND);
;;;4900   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_CONNECT_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L1_CONNECT_UNSELECTED_Y, PIC_ID_G_BACK, LCD_OPERATOR_MODE_DRAW);	
;;;4901   
;;;4902   //				break;
;;;4903   
;;;4904   //			case 1:
;;;4905   
;;;4906   //				// 选中，显示图片
;;;4907   //				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_CONNECT_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_CONNECT_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_DRAW);	
;;;4908   //				
;;;4909   //				break;
;;;4910   
;;;4911   //			default:
;;;4912   //				break;
;;;4913   //		}
;;;4914   //	}
;;;4915   	
;;;4916   }
;;;4917   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL1ClearData||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL1ClearData PROC
;;;4965   **********************************************************************/
;;;4966   void DISPLAY_DrawMenuL1ClearData(uint32 ulBuff)
000000  4770              BX       lr
;;;4967   {
;;;4968   //	switch (ulBuff)
;;;4969   //	{
;;;4970   //		case 0:
;;;4971   
;;;4972   //			// 非选，显示图片
;;;4973   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_CLEAR_DATA_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_CLEAR_DATA_SELECTED_Y, PIC_ID_S_CLEAR_DATA, LCD_OPERATOR_MODE_BACKGROUND);
;;;4974   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_CLEAR_DATA_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L1_CLEAR_DATA_UNSELECTED_Y, PIC_ID_G_CLEAR_DATA, LCD_OPERATOR_MODE_DRAW);	
;;;4975   
;;;4976   //			break;
;;;4977   
;;;4978   //		case 1:
;;;4979   
;;;4980   //			// 选中，显示图片
;;;4981   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_CLEAR_DATA_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_CLEAR_DATA_SELECTED_Y, PIC_ID_S_CLEAR_DATA, LCD_OPERATOR_MODE_DRAW);	
;;;4982   //			
;;;4983   //			break;
;;;4984   
;;;4985   //		default:
;;;4986   //			break;
;;;4987   //	}
;;;4988   }
;;;4989   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL1Connect||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL1Connect PROC
;;;4929   **********************************************************************/
;;;4930   void DISPLAY_DrawMenuL1Connect(uint32 ulBuff)
000000  4770              BX       lr
;;;4931   {
;;;4932   //	switch (ulBuff)
;;;4933   //	{
;;;4934   //		case 0:
;;;4935   
;;;4936   //			// 非选，显示图片
;;;4937   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_CONNECT_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_CONNECT_SELECTED_Y, PIC_ID_S_CONNECT, LCD_OPERATOR_MODE_BACKGROUND);
;;;4938   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_CONNECT_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L1_CONNECT_UNSELECTED_Y, PIC_ID_G_CONNECT, LCD_OPERATOR_MODE_DRAW);	
;;;4939   
;;;4940   //			break;
;;;4941   
;;;4942   //		case 1:
;;;4943   
;;;4944   //			// 选中，显示图片
;;;4945   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_CONNECT_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_CONNECT_SELECTED_Y, PIC_ID_S_CONNECT, LCD_OPERATOR_MODE_DRAW);	
;;;4946   //			
;;;4947   //			break;
;;;4948   
;;;4949   //		default:
;;;4950   //			break;
;;;4951   //	}
;;;4952   }
;;;4953   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL1Info||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL1Info PROC
;;;5037   **********************************************************************/
;;;5038   void DISPLAY_DrawMenuL1Info(uint32 ulBuff)
000000  4770              BX       lr
;;;5039   {
;;;5040   //	switch (ulBuff)
;;;5041   //	{
;;;5042   //		case 0:
;;;5043   
;;;5044   //			// 非选，显示图片
;;;5045   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_INFO_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_INFO_SELECTED_Y, PIC_ID_S_SYS_INFO, LCD_OPERATOR_MODE_BACKGROUND);
;;;5046   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_INFO_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L1_INFO_UNSELECTED_Y, PIC_ID_G_SYS_INFO, LCD_OPERATOR_MODE_DRAW);	
;;;5047   
;;;5048   //			break;
;;;5049   
;;;5050   //		case 1:
;;;5051   
;;;5052   //			// 选中，显示图片
;;;5053   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_INFO_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_INFO_SELECTED_Y, PIC_ID_S_SYS_INFO, LCD_OPERATOR_MODE_DRAW);	
;;;5054   //			
;;;5055   //			break;
;;;5056   
;;;5057   //		default:
;;;5058   //			break;
;;;5059   //	}
;;;5060   }
;;;5061   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL1Set||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL1Set PROC
;;;5001   **********************************************************************/
;;;5002   void DISPLAY_DrawMenuL1Set(uint32 ulBuff)
000000  4770              BX       lr
;;;5003   {
;;;5004   //	switch (ulBuff)
;;;5005   //	{
;;;5006   //		case 0:
;;;5007   
;;;5008   //			// 非选，显示图片
;;;5009   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_SET_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_SET_SELECTED_Y, PIC_ID_S_SETUP, LCD_OPERATOR_MODE_BACKGROUND);
;;;5010   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_SET_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L1_SET_UNSELECTED_Y, PIC_ID_G_SETUP, LCD_OPERATOR_MODE_DRAW);	
;;;5011   
;;;5012   //			break;
;;;5013   
;;;5014   //		case 1:
;;;5015   
;;;5016   //			// 选中，显示图片
;;;5017   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L1_SET_SELECTED_X, UI_ITEM_COODINATE_MENU_L1_SET_SELECTED_Y, PIC_ID_S_SETUP, LCD_OPERATOR_MODE_DRAW);	
;;;5018   //			
;;;5019   //			break;
;;;5020   
;;;5021   //		default:
;;;5022   //			break;
;;;5023   //	}
;;;5024   }
;;;5025   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2Back||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2Back PROC
;;;7389   **********************************************************************/
;;;7390   void DISPLAY_DrawMenuL2Back(uint32 ulBuff)
000000  4770              BX       lr
;;;7391   {
;;;7392   	
;;;7393   //	switch (ulBuff)
;;;7394   //	{
;;;7395   //		case 0:
;;;7396   
;;;7397   //			// 显示背景
;;;7398   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_BACK_X, UI_ITEM_COODINATE_MENU_L2_BACK_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_BACKGROUND);
;;;7399   
;;;7400   //			break;
;;;7401   
;;;7402   //		case 1:
;;;7403   
;;;7404   //			// 选中，显示图片
;;;7405   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_BACK_X, UI_ITEM_COODINATE_MENU_L2_BACK_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_DRAW);	
;;;7406   
;;;7407   //			break;
;;;7408   
;;;7409   //		default:
;;;7410   //			break;
;;;7411   //	}
;;;7412   }
;;;7413   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2ClearBack||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2ClearBack PROC
;;;7565   **********************************************************************/
;;;7566   void DISPLAY_DrawMenuL2ClearBack(uint32 ulBuff)
000000  4770              BX       lr
;;;7567   {
;;;7568   //	switch (ulBuff)
;;;7569   //	{
;;;7570   //		case 0:
;;;7571   
;;;7572   //			// 显示背景
;;;7573   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_CLEAR_BACK_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_CLEAR_BACK_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_BACKGROUND);
;;;7574   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_CLEAR_BACK_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_CLEAR_BACK_UNSELECTED_Y, PIC_ID_G_BACK, LCD_OPERATOR_MODE_DRAW);
;;;7575   //			break;
;;;7576   
;;;7577   //		case 1:
;;;7578   
;;;7579   //			// 选中，显示图片
;;;7580   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_CLEAR_BACK_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_CLEAR_BACK_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_DRAW);
;;;7581   //			
;;;7582   //			break;
;;;7583   
;;;7584   //		default:
;;;7585   //			break;
;;;7586   //	}
;;;7587   }
;;;7588   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2ClearDataTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2ClearDataTitle PROC
;;;7425   **********************************************************************/
;;;7426   void DISPLAY_DrawMenuL2ClearDataTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;7427   {
;;;7428   //	switch (ulBuff)
;;;7429   //	{
;;;7430   //		case 0:
;;;7431   
;;;7432   //			// 显示背景
;;;7433   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_TITLE_X, UI_ITEM_COODINATE_MENU_L2_TITLE_Y, PIC_ID_T_CLEAR_DATA, LCD_OPERATOR_MODE_BACKGROUND);
;;;7434   
;;;7435   //			break;
;;;7436   
;;;7437   //		case 1:
;;;7438   
;;;7439   //			// 选中，显示图片
;;;7440   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_TITLE_X, UI_ITEM_COODINATE_MENU_L2_TITLE_Y, PIC_ID_T_CLEAR_DATA, LCD_OPERATOR_MODE_DRAW);	
;;;7441   //			
;;;7442   //			break;
;;;7443   
;;;7444   //		default:
;;;7445   //			break;
;;;7446   //	}
;;;7447   }
;;;7448   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2ClearMileage||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2ClearMileage PROC
;;;7460   **********************************************************************/
;;;7461   void DISPLAY_DrawMenuL2ClearMileage(uint32 ulBuff)
000000  4770              BX       lr
;;;7462   {
;;;7463   //	switch (ulBuff)
;;;7464   //	{
;;;7465   //		case 0:
;;;7466   
;;;7467   //			// 显示背景
;;;7468   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_CLEAR_DISTANCE_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_CLEAR_DISTANCE_SELECTED_Y, PIC_ID_S_TRIP_DIST, LCD_OPERATOR_MODE_BACKGROUND);
;;;7469   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_CLEAR_DISTANCE_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_CLEAR_DISTANCE_UNSELECTED_Y, PIC_ID_G_TRIP_DIST, LCD_OPERATOR_MODE_DRAW);
;;;7470   //			break;
;;;7471   
;;;7472   //		case 1:
;;;7473   
;;;7474   //			// 选中，显示图片
;;;7475   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_CLEAR_DISTANCE_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_CLEAR_DISTANCE_SELECTED_Y, PIC_ID_S_TRIP_DIST, LCD_OPERATOR_MODE_DRAW);	
;;;7476   //			
;;;7477   //			break;
;;;7478   
;;;7479   //		default:
;;;7480   //			break;
;;;7481   //	}
;;;7482   }
;;;7483   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2ClearPersBest||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2ClearPersBest PROC
;;;7495   **********************************************************************/
;;;7496   void DISPLAY_DrawMenuL2ClearPersBest(uint32 ulBuff)
000000  4770              BX       lr
;;;7497   {
;;;7498   //	switch (ulBuff)
;;;7499   //	{
;;;7500   //		case 0:
;;;7501   
;;;7502   //			// 显示背景
;;;7503   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_CLEAR_PERS_BEST_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_CLEAR_PERS_BEST_SELECTED_Y, PIC_ID_S_PERS_BEST, LCD_OPERATOR_MODE_BACKGROUND);
;;;7504   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_CLEAR_PERS_BEST_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_CLEAR_PERS_BEST_UNSELECTED_Y, PIC_ID_G_PERS_BEST, LCD_OPERATOR_MODE_DRAW);
;;;7505   //			break;
;;;7506   
;;;7507   //		case 1:
;;;7508   
;;;7509   //			// 选中，显示图片
;;;7510   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_CLEAR_PERS_BEST_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_CLEAR_PERS_BEST_SELECTED_Y, PIC_ID_S_PERS_BEST, LCD_OPERATOR_MODE_DRAW);
;;;7511   //			
;;;7512   //			break;
;;;7513   
;;;7514   //		default:
;;;7515   //			break;
;;;7516   //	}
;;;7517   }
;;;7518   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2FactoryReset||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2FactoryReset PROC
;;;7530   **********************************************************************/
;;;7531   void DISPLAY_DrawMenuL2FactoryReset(uint32 ulBuff)
000000  4770              BX       lr
;;;7532   {
;;;7533   //	switch (ulBuff)
;;;7534   //	{
;;;7535   //		case 0:
;;;7536   
;;;7537   //			// 显示背景
;;;7538   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_SELECTED_Y, PIC_ID_S_FACTORY_RESET, LCD_OPERATOR_MODE_BACKGROUND);
;;;7539   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_UNSELECTED_Y, PIC_ID_G_FACTORY_RESET, LCD_OPERATOR_MODE_DRAW);
;;;7540   //			break;
;;;7541   
;;;7542   //		case 1:
;;;7543   
;;;7544   //			// 选中，显示图片
;;;7545   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_FACTORY_RESET_SELECTED_Y, PIC_ID_S_FACTORY_RESET, LCD_OPERATOR_MODE_DRAW);
;;;7546   //			
;;;7547   //			break;
;;;7548   
;;;7549   //		default:
;;;7550   //			break;
;;;7551   //	}
;;;7552   }
;;;7553   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2Qrcode||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2Qrcode PROC
;;;7354   **********************************************************************/
;;;7355   void DISPLAY_DrawMenuL2Qrcode(uint32 ulBuff)
000000  4770              BX       lr
;;;7356   {
;;;7357   //	switch (ulBuff)
;;;7358   //	{
;;;7359   //		case 0:
;;;7360   
;;;7361   //			// 显示背景
;;;7362   //			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_QRCODE_X, UI_ITEM_COODINATE_MENU_L2_QRCODE_Y, , LCD_OPERATOR_MODE_BACKGROUND);
;;;7363   
;;;7364   //			break;
;;;7365   
;;;7366   //		case 1:
;;;7367   
;;;7368   //			// 在指定的坐标显示二维码
;;;7369   //			LCD_PrintQR(UI_ITEM_COODINATE_MENU_L2_QRCODE_X, UI_ITEM_COODINATE_MENU_L2_QRCODE_Y);
;;;7370   
;;;7371   //			break;
;;;7372   
;;;7373   //		default:
;;;7374   //			break;
;;;7375   //	}
;;;7376   }
;;;7377   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SetAutoLight||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SetAutoLight PROC
;;;7911   **********************************************************************/
;;;7912   void DISPLAY_DrawMenuL2SetAutoLight(uint32 ulBuff)
000000  4770              BX       lr
;;;7913   {
;;;7914   //	switch (ulBuff)
;;;7915   //	{
;;;7916   //		case 0:
;;;7917   
;;;7918   //			// 显示背景
;;;7919   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_SELECTED_Y, PIC_ID_S_AUTO_HEADLIGHT, LCD_OPERATOR_MODE_BACKGROUND);
;;;7920   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_UNSELECTED_Y, PIC_ID_G_AUTO_HEADLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;7921   //			break;
;;;7922   
;;;7923   //		case 1:
;;;7924   
;;;7925   //			// 选中，显示图片
;;;7926   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_SELECTED_Y, PIC_ID_S_AUTO_HEADLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;7927   //			
;;;7928   //			break;
;;;7929   
;;;7930   //		default:
;;;7931   //			break;
;;;7932   //	}
;;;7933   }
;;;7934   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SetAutoPowerOff||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SetAutoPowerOff PROC
;;;8017   **********************************************************************/
;;;8018   void DISPLAY_DrawMenuL2SetAutoPowerOff(uint32 ulBuff)
000000  4770              BX       lr
;;;8019   {
;;;8020   //	switch (ulBuff)
;;;8021   //	{
;;;8022   //		case 0:
;;;8023   
;;;8024   //			// 显示背景
;;;8025   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_POWER_OFF_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_POWER_OFF_SELECTED_Y, PIC_ID_S_SET_AUTO_OFF, LCD_OPERATOR_MODE_BACKGROUND);
;;;8026   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_POWER_OFF_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_POWER_OFF_UNSELECTED_Y, PIC_ID_G_SET_AUTO_OFF, LCD_OPERATOR_MODE_DRAW);
;;;8027   //			break;
;;;8028   
;;;8029   //		case 1:
;;;8030   
;;;8031   //			// 选中，显示图片
;;;8032   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_POWER_OFF_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_POWER_OFF_SELECTED_Y, PIC_ID_S_SET_AUTO_OFF, LCD_OPERATOR_MODE_DRAW);
;;;8033   //			
;;;8034   //			break;
;;;8035   
;;;8036   //		default:
;;;8037   //			break;
;;;8038   //	}
;;;8039   }
;;;8040   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SetBack||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SetBack PROC
;;;8052   **********************************************************************/
;;;8053   void DISPLAY_DrawMenuL2SetBack(uint32 ulBuff)
000000  4770              BX       lr
;;;8054   {
;;;8055   //	switch (ulBuff)
;;;8056   //	{
;;;8057   //		case 0:
;;;8058   
;;;8059   //			// 显示背景
;;;8060   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_BACK_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_BACK_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_BACKGROUND);
;;;8061   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_BACK_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_BACK_UNSELECTED_Y, PIC_ID_G_BACK, LCD_OPERATOR_MODE_DRAW);
;;;8062   //			break;
;;;8063   
;;;8064   //		case 1:
;;;8065   
;;;8066   //			// 选中，显示图片
;;;8067   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_BACK_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_BACK_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_DRAW);
;;;8068   //			
;;;8069   //			break;
;;;8070   
;;;8071   //		default:
;;;8072   //			break;
;;;8073   //	}
;;;8074   }
;;;8075   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SetBackLight||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SetBackLight PROC
;;;7982   **********************************************************************/
;;;7983   void DISPLAY_DrawMenuL2SetBackLight(uint32 ulBuff)
000000  4770              BX       lr
;;;7984   {
;;;7985   //	switch (ulBuff)
;;;7986   //	{
;;;7987   //		case 0:
;;;7988   
;;;7989   //			// 显示背景
;;;7990   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_LIGHT_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_LIGHT_SELECTED_Y, PIC_ID_S_SET_BACKLIGHT, LCD_OPERATOR_MODE_BACKGROUND);
;;;7991   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_LIGHT_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_LIGHT_UNSELECTED_Y, PIC_ID_G_SET_BACKLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;7992   //			break;
;;;7993   
;;;7994   //		case 1:
;;;7995   
;;;7996   //			// 选中，显示图片
;;;7997   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_LIGHT_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_LIGHT_SELECTED_Y, PIC_ID_S_SET_BACKLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;7998   //			
;;;7999   //			break;
;;;8000   
;;;8001   //		default:
;;;8002   //			break;
;;;8003   //	}
;;;8004   }
;;;8005   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SetDateTime||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SetDateTime PROC
;;;7881   **********************************************************************/
;;;7882   void DISPLAY_DrawMenuL2SetDateTime(uint32 ulBuff)
000000  4770              BX       lr
;;;7883   {
;;;7884   //	switch (ulBuff)
;;;7885   //	{
;;;7886   //		case 0:
;;;7887   
;;;7888   //			// 显示背景
;;;7889   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_SELECTED_Y, PIC_ID_S_SET_DATE_TIME, LCD_OPERATOR_MODE_BACKGROUND);
;;;7890   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_UNSELECTED_Y, PIC_ID_G_SET_DATE_TIME, LCD_OPERATOR_MODE_DRAW);
;;;7891   //			break;
;;;7892   
;;;7893   //		case 1:
;;;7894   
;;;7895   //			// 选中，显示图片
;;;7896   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_DATE_TIME_SELECTED_Y, PIC_ID_S_SET_DATE_TIME, LCD_OPERATOR_MODE_DRAW);
;;;7897   //			
;;;7898   //			break;
;;;7899   
;;;7900   //		default:
;;;7901   //			break;
;;;7902   //	}
;;;7903   }
;;;7904   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SetTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SetTitle PROC
;;;7846   **********************************************************************/
;;;7847   void DISPLAY_DrawMenuL2SetTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;7848   {
;;;7849   //	switch (ulBuff)
;;;7850   //	{
;;;7851   //		case 0:
;;;7852   
;;;7853   //			// 显示背景
;;;7854   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_TITLE_X, UI_ITEM_COODINATE_MENU_L2_TITLE_Y, PIC_ID_T_SETUP, LCD_OPERATOR_MODE_BACKGROUND);
;;;7855   
;;;7856   //			break;
;;;7857   
;;;7858   //		case 1:
;;;7859   
;;;7860   //			// 选中，显示图片
;;;7861   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_TITLE_X, UI_ITEM_COODINATE_MENU_L2_TITLE_Y, PIC_ID_T_SETUP, LCD_OPERATOR_MODE_DRAW);	
;;;7862   //			
;;;7863   //			break;
;;;7864   
;;;7865   //		default:
;;;7866   //			break;
;;;7867   //	}
;;;7868   }
;;;7869   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SetUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SetUnit PROC
;;;7947   **********************************************************************/
;;;7948   void DISPLAY_DrawMenuL2SetUnit(uint32 ulBuff)
000000  4770              BX       lr
;;;7949   {
;;;7950   //	switch (ulBuff)
;;;7951   //	{
;;;7952   //		case 0:
;;;7953   
;;;7954   //			// 显示背景
;;;7955   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_UNIT_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_UNIT_SELECTED_Y, PIC_ID_S_SET_UNIT, LCD_OPERATOR_MODE_BACKGROUND);
;;;7956   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_UNIT_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_UNIT_UNSELECTED_Y, PIC_ID_G_SET_UNIT, LCD_OPERATOR_MODE_DRAW);
;;;7957   //			break;
;;;7958   
;;;7959   //		case 1:
;;;7960   
;;;7961   //			// 选中，显示图片
;;;7962   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SET_UNIT_SELECTED_X, UI_ITEM_COODINATE_MENU_L2_SET_UNIT_SELECTED_Y, PIC_ID_S_SET_UNIT, LCD_OPERATOR_MODE_DRAW);
;;;7963   //			
;;;7964   //			break;
;;;7965   
;;;7966   //		default:
;;;7967   //			break;
;;;7968   //	}
;;;7969   }
;;;7970   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SystemInfoBack||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SystemInfoBack PROC
;;;9232   **********************************************************************/
;;;9233   void DISPLAY_DrawMenuL2SystemInfoBack(uint32 ulBuff)
000000  4770              BX       lr
;;;9234   {
;;;9235   //	switch (ulBuff)
;;;9236   //	{
;;;9237   //		case 0:
;;;9238   
;;;9239   //			// 显示背景
;;;9240   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SYSTEM_BACK_X, UI_ITEM_COODINATE_MENU_L2_SYSTEM_BACK_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_BACKGROUND);
;;;9241   
;;;9242   //			break;
;;;9243   
;;;9244   //		case 1:
;;;9245   
;;;9246   //			// 选中，显示图片
;;;9247   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SYSTEM_BACK_X, UI_ITEM_COODINATE_MENU_L2_SYSTEM_BACK_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_DRAW);	
;;;9248   //			
;;;9249   //			break;
;;;9250   
;;;9251   //		default:
;;;9252   //			break;
;;;9253   //	}
;;;9254   }
;;;9255   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SystemInfoFWVersion||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SystemInfoFWVersion PROC
;;;9256   // 显示FW版本号
;;;9257   void DISPLAY_DrawMenuL2SystemInfoFWVersion(uint32 ulBuff)
000000  4770              BX       lr
;;;9258   {
;;;9259   //	uint8 v1, v2, v3, v4, v5, v6;
;;;9260   //	uint32 version = (ulBuff%0x00FFFFFF)%1000000;
;;;9261   
;;;9262   //	v1 = version/100000;
;;;9263   //	version %= 100000;
;;;9264   //	
;;;9265   //	v2 = version/10000;
;;;9266   //	version %= 10000;
;;;9267   
;;;9268   //	v3 = version/1000;
;;;9269   //	version %= 1000;
;;;9270   
;;;9271   //	v4 = version/100;
;;;9272   //	version %= 100;
;;;9273   
;;;9274   //	v5 = version/10;
;;;9275   //	v6 = version%10;
;;;9276   
;;;9277   //	// 选中，显示图片
;;;9278   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FW_VERSION_TITLE_X, UI_ITEM_COODINATE_MENU_L2_FW_VERSION_TITLE_Y, PIC_ID_G_VERSION, LCD_OPERATOR_MODE_DRAW);	
;;;9279   
;;;9280   //	// 显示版本号格式:99.99.99
;;;9281   //	if(0 == v1)
;;;9282   //	{
;;;9283   //		LCD_DrawBmpByID(130, 176, (PIC_ID_E)(PIC_ID_TINY_0+v2), LCD_OPERATOR_MODE_DRAW);
;;;9284   //		LCD_DrawBmpByID(142, 176, (PIC_ID_E)(PIC_ID_TINY_DOT), LCD_OPERATOR_MODE_DRAW);
;;;9285   //		if(0 == v3)
;;;9286   //		{
;;;9287   //			LCD_DrawBmpByID(154, 176, (PIC_ID_E)(PIC_ID_TINY_0+v4), LCD_OPERATOR_MODE_DRAW);
;;;9288   //			LCD_DrawBmpByID(166, 176, (PIC_ID_E)(PIC_ID_TINY_DOT), LCD_OPERATOR_MODE_DRAW);
;;;9289   //			if(0 == v5)
;;;9290   //			{
;;;9291   //				LCD_DrawBmpByID(178, 176, (PIC_ID_E)(PIC_ID_TINY_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;9292   //			}
;;;9293   //			else
;;;9294   //			{
;;;9295   //				LCD_DrawBmpByID(178, 176, (PIC_ID_E)(PIC_ID_TINY_0+v5), LCD_OPERATOR_MODE_DRAW);
;;;9296   //				LCD_DrawBmpByID(190, 176, (PIC_ID_E)(PIC_ID_TINY_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;9297   //			}
;;;9298   //		}
;;;9299   //		else
;;;9300   //		{
;;;9301   //			LCD_DrawBmpByID(154, 176, (PIC_ID_E)(PIC_ID_TINY_0+v3), LCD_OPERATOR_MODE_DRAW);
;;;9302   //			LCD_DrawBmpByID(166, 176, (PIC_ID_E)(PIC_ID_TINY_0+v4), LCD_OPERATOR_MODE_DRAW);
;;;9303   //			LCD_DrawBmpByID(178, 176, (PIC_ID_E)(PIC_ID_TINY_DOT), LCD_OPERATOR_MODE_DRAW);
;;;9304   //			if(0 == v5)
;;;9305   //			{
;;;9306   //				LCD_DrawBmpByID(190, 176, (PIC_ID_E)(PIC_ID_TINY_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;9307   //			}
;;;9308   //			else
;;;9309   //			{
;;;9310   //				LCD_DrawBmpByID(190, 176, (PIC_ID_E)(PIC_ID_TINY_0+v5), LCD_OPERATOR_MODE_DRAW);
;;;9311   //				LCD_DrawBmpByID(202, 176, (PIC_ID_E)(PIC_ID_TINY_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;9312   //			}
;;;9313   
;;;9314   //		}
;;;9315   //	}
;;;9316   //	else
;;;9317   //	{
;;;9318   //		LCD_DrawBmpByID(130, 176, (PIC_ID_E)(PIC_ID_TINY_0+v1), LCD_OPERATOR_MODE_DRAW);
;;;9319   //		LCD_DrawBmpByID(142, 176, (PIC_ID_E)(PIC_ID_TINY_0+v2), LCD_OPERATOR_MODE_DRAW);
;;;9320   //		LCD_DrawBmpByID(154, 176, (PIC_ID_E)(PIC_ID_TINY_DOT), LCD_OPERATOR_MODE_DRAW);
;;;9321   //		if(0 == v3)
;;;9322   //		{
;;;9323   //			LCD_DrawBmpByID(166, 176, (PIC_ID_E)(PIC_ID_TINY_0+v4), LCD_OPERATOR_MODE_DRAW);
;;;9324   //			LCD_DrawBmpByID(178, 176, (PIC_ID_E)(PIC_ID_TINY_DOT), LCD_OPERATOR_MODE_DRAW);
;;;9325   //			if(0 == v5)
;;;9326   //			{
;;;9327   //				LCD_DrawBmpByID(190, 176, (PIC_ID_E)(PIC_ID_TINY_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;9328   //			}
;;;9329   //			else
;;;9330   //			{
;;;9331   //				LCD_DrawBmpByID(190, 176, (PIC_ID_E)(PIC_ID_TINY_0+v5), LCD_OPERATOR_MODE_DRAW);
;;;9332   //				LCD_DrawBmpByID(202, 176, (PIC_ID_E)(PIC_ID_TINY_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;9333   //			}
;;;9334   //		}
;;;9335   //		else
;;;9336   //		{
;;;9337   //			LCD_DrawBmpByID(166, 176, (PIC_ID_E)(PIC_ID_TINY_0+v3), LCD_OPERATOR_MODE_DRAW);
;;;9338   //			LCD_DrawBmpByID(178, 176, (PIC_ID_E)(PIC_ID_TINY_0+v4), LCD_OPERATOR_MODE_DRAW);
;;;9339   //			LCD_DrawBmpByID(190, 176, (PIC_ID_E)(PIC_ID_TINY_DOT), LCD_OPERATOR_MODE_DRAW);
;;;9340   //			if(0 == v5)
;;;9341   //			{
;;;9342   //				LCD_DrawBmpByID(202, 176, (PIC_ID_E)(PIC_ID_TINY_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;9343   //			}
;;;9344   //			else
;;;9345   //			{
;;;9346   //				LCD_DrawBmpByID(202, 176, (PIC_ID_E)(PIC_ID_TINY_0+v5), LCD_OPERATOR_MODE_DRAW);
;;;9347   //				LCD_DrawBmpByID(214, 176, (PIC_ID_E)(PIC_ID_TINY_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;9348   //			}
;;;9349   //		}
;;;9350   //	}
;;;9351   	
;;;9352   //	// 显示版本号四个数字
;;;9353   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FW_VERSION_1000_X, UI_ITEM_COODINATE_MENU_L2_FW_VERSION_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+v1), LCD_OPERATOR_MODE_DRAW);
;;;9354   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FW_VERSION_DOT_X, UI_ITEM_COODINATE_MENU_L2_FW_VERSION_DOT_Y, PIC_ID_TINY_DOT, LCD_OPERATOR_MODE_DRAW);
;;;9355   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FW_VERSION_100_X, UI_ITEM_COODINATE_MENU_L2_FW_VERSION_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+v2), LCD_OPERATOR_MODE_DRAW);
;;;9356   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FW_VERSION_10_X, UI_ITEM_COODINATE_MENU_L2_FW_VERSION_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+v3), LCD_OPERATOR_MODE_DRAW);
;;;9357   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_FW_VERSION_1_X, UI_ITEM_COODINATE_MENU_L2_FW_VERSION_1_Y, (PIC_ID_E)(PIC_ID_TINY_0+v4), LCD_OPERATOR_MODE_DRAW);
;;;9358   }
;;;9359   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SystemInfoSpeedLimit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SystemInfoSpeedLimit PROC
;;;9155   **********************************************************************/
;;;9156   void DISPLAY_DrawMenuL2SystemInfoSpeedLimit(uint32 ulBuff)
000000  4770              BX       lr
;;;9157   {
;;;9158   //	uint8 value1=0, value2=0;
;;;9159   //	uint8 ucLocal = ulBuff%100;
;;;9160   
;;;9161   //	// 提取分钟数字位上的数字
;;;9162   //	value1 = ucLocal/10;
;;;9163   //	value2 = ucLocal%10;
;;;9164   
;;;9165   //	// 显示文字
;;;9166   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_X, UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_Y, PIC_ID_G_SPEEDLIMIT, LCD_OPERATOR_MODE_DRAW);	
;;;9167   
;;;9168   //	// 显示分钟个位
;;;9169   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_1_X, (uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_1_Y, (PIC_ID_E)(PIC_ID_TINY_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;9170   
;;;9171   //	if (ulBuff < 10)
;;;9172   //	{
;;;9173   //		// 清除分钟十位
;;;9174   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_10_X, UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value1), LCD_OPERATOR_MODE_BACKGROUND);
;;;9175   //	}
;;;9176   //	else
;;;9177   //	{
;;;9178   //		// 显示分钟十位
;;;9179   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_10_X, (uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;9180   //	}
;;;9181   
;;;9182   }
;;;9183   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SystemInfoSpeedLimitUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SystemInfoSpeedLimitUnit PROC
;;;9195   **********************************************************************/
;;;9196   void DISPLAY_DrawMenuL2SystemInfoSpeedLimitUnit(uint32 ulBuff)
000000  4770              BX       lr
;;;9197   {
;;;9198   //	switch ((UNIT_E)ulBuff)
;;;9199   //	{
;;;9200   //		case UNIT_METRIC:
;;;9201   
;;;9202   //			// 显示图片
;;;9203   //			//LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_UNIT_X, (uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_UNIT_Y, PIC_ID_MPH_MED, LCD_OPERATOR_MODE_BACKGROUND);
;;;9204   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_UNIT_X, (uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_UNIT_Y, PIC_ID_KMH_MED, LCD_OPERATOR_MODE_DRAW);
;;;9205   
;;;9206   //			break;
;;;9207   
;;;9208   //		case UNIT_INCH:
;;;9209   
;;;9210   //			// 显示图片
;;;9211   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_UNIT_X, (uint16)UI_ITEM_COODINATE_MENU_L2_SPEED_LIMIT_UNIT_Y, PIC_ID_MPH_MED, LCD_OPERATOR_MODE_DRAW);
;;;9212   //			
;;;9213   //			break;
;;;9214   
;;;9215   //		default:
;;;9216   //			break;
;;;9217   //	}
;;;9218   	
;;;9219   }
;;;9220   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SystemInfoTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SystemInfoTitle PROC
;;;9091   **********************************************************************/
;;;9092   void DISPLAY_DrawMenuL2SystemInfoTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;9093   {
;;;9094   //	switch (ulBuff)
;;;9095   //	{
;;;9096   //		case 0:
;;;9097   
;;;9098   //			// 显示背景
;;;9099   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_TITLE_X, UI_ITEM_COODINATE_MENU_L2_TITLE_Y, PIC_ID_T_SYS_INFO, LCD_OPERATOR_MODE_BACKGROUND);
;;;9100   
;;;9101   //			break;
;;;9102   
;;;9103   //		case 1:
;;;9104   
;;;9105   //			// 选中，显示图片
;;;9106   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_TITLE_X, UI_ITEM_COODINATE_MENU_L2_TITLE_Y, PIC_ID_T_SYS_INFO, LCD_OPERATOR_MODE_DRAW);	
;;;9107   //			
;;;9108   //			break;
;;;9109   
;;;9110   //		default:
;;;9111   //			break;
;;;9112   //	}
;;;9113   }
;;;9114   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL2SystemInfoWheelSize||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL2SystemInfoWheelSize PROC
;;;9126   **********************************************************************/
;;;9127   void DISPLAY_DrawMenuL2SystemInfoWheelSize(uint32 ulBuff)
000000  4770              BX       lr
;;;9128   {
;;;9129   //	PIC_ID_E picID = GetPicIDFromWheelSizeID(ulBuff&0x0000FFFF);
;;;9130   
;;;9131   //	// 参数判断
;;;9132   //	CHECK_PARAM_OVER_RETURN(picID, PIC_ID_WHEELSIZE_275);
;;;9133   //	CHECK_PARAM_LESS_RETURN(picID, PIC_ID_WHEELSIZE_4_5);
;;;9134   
;;;9135   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_WHEEL_SIZE_X, UI_ITEM_COODINATE_MENU_L2_WHEEL_SIZE_Y, (PIC_ID_E)(PIC_ID_G_WHEELSIZE), LCD_OPERATOR_MODE_DRAW);	
;;;9136   
;;;9137   //	// 显示轮径
;;;9138   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L2_WHEEL_SIZE_VALUE_100_X,
;;;9139   //						UI_ITEM_COODINATE_MENU_L2_WHEEL_SIZE_VALUE_100_Y,
;;;9140   //						picID,
;;;9141   //						LCD_OPERATOR_MODE_DRAW);
;;;9142   }
;;;9143   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3Back||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3Back PROC
;;;8193   **********************************************************************/
;;;8194   void DISPLAY_DrawMenuL3Back(uint32 ulBuff)
000000  4770              BX       lr
;;;8195   {
;;;8196   //	switch (ulBuff)
;;;8197   //	{
;;;8198   //		case 0:
;;;8199   
;;;8200   //			// 显示背景
;;;8201   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_BACK_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_BACK_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_BACKGROUND);
;;;8202   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_BACK_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L3_BACK_UNSELECTED_Y, PIC_ID_G_BACK, LCD_OPERATOR_MODE_DRAW);
;;;8203   //			break;
;;;8204   
;;;8205   //		case 1:
;;;8206   
;;;8207   //			// 选中，显示图片
;;;8208   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_BACK_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_BACK_SELECTED_Y, PIC_ID_S_BACK, LCD_OPERATOR_MODE_DRAW);
;;;8209   //			
;;;8210   //			break;
;;;8211   
;;;8212   //		default:
;;;8213   //			break;
;;;8214   //	}
;;;8215   }
;;;8216   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3ClearMileageHint||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3ClearMileageHint PROC
;;;7705   **********************************************************************/
;;;7706   void DISPLAY_DrawMenuL3ClearMileageHint(uint32 ulBuff)
000000  4770              BX       lr
;;;7707   {
;;;7708   //	switch (ulBuff)
;;;7709   //	{
;;;7710   //		case 0:
;;;7711   
;;;7712   //			// 显示背景
;;;7713   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_HINT_CLEAR_X, UI_ITEM_COODINATE_MENU_L3_HINT_CLEAR_Y, PIC_ID_G_CLR_TRIP_INFO, LCD_OPERATOR_MODE_BACKGROUND);
;;;7714   //			break;
;;;7715   
;;;7716   //		case 1:
;;;7717   
;;;7718   //			// 选中，显示图片
;;;7719   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_HINT_CLEAR_X, UI_ITEM_COODINATE_MENU_L3_HINT_CLEAR_Y, PIC_ID_G_CLR_TRIP_INFO, LCD_OPERATOR_MODE_DRAW);
;;;7720   //			
;;;7721   //			break;
;;;7722   
;;;7723   //		default:
;;;7724   //			break;
;;;7725   //	}
;;;7726   }
;;;7727   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3ClearMileageTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3ClearMileageTitle PROC
;;;7600   **********************************************************************/
;;;7601   void DISPLAY_DrawMenuL3ClearMileageTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;7602   {
;;;7603   //	switch (ulBuff)
;;;7604   //	{
;;;7605   //		case 0:
;;;7606   
;;;7607   //			// 显示背景
;;;7608   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_CLEAR_TITLE_X, UI_ITEM_COODINATE_MENU_L3_CLEAR_TITLE_Y, PIC_ID_T_CLR_TRIP, LCD_OPERATOR_MODE_BACKGROUND);
;;;7609   
;;;7610   //			break;
;;;7611   
;;;7612   //		case 1:
;;;7613   
;;;7614   //			// 选中，显示图片
;;;7615   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_CLEAR_TITLE_X, UI_ITEM_COODINATE_MENU_L3_CLEAR_TITLE_Y, PIC_ID_T_CLR_TRIP, LCD_OPERATOR_MODE_DRAW); 
;;;7616   //			
;;;7617   //			break;
;;;7618   
;;;7619   //		default:
;;;7620   //			break;
;;;7621   //	}
;;;7622   }
;;;7623   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3ClearPersBestTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3ClearPersBestTitle PROC
;;;7739   **********************************************************************/
;;;7740   void DISPLAY_DrawMenuL3ClearPersBestTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;7741   {
;;;7742   //	switch (ulBuff)
;;;7743   //	{
;;;7744   //		case 0:
;;;7745   
;;;7746   //			// 显示背景
;;;7747   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_CLEAR_TITLE_X, UI_ITEM_COODINATE_MENU_L3_CLEAR_TITLE_Y, PIC_ID_T_CLR_PERS_BEST, LCD_OPERATOR_MODE_BACKGROUND);
;;;7748   
;;;7749   //			break;
;;;7750   
;;;7751   //		case 1:
;;;7752   
;;;7753   //			// 选中，显示图片
;;;7754   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_CLEAR_TITLE_X, UI_ITEM_COODINATE_MENU_L3_CLEAR_TITLE_Y, PIC_ID_T_CLR_PERS_BEST, LCD_OPERATOR_MODE_DRAW); 
;;;7755   //			
;;;7756   //			break;
;;;7757   
;;;7758   //		default:
;;;7759   //			break;
;;;7760   //	}
;;;7761   }
;;;7762   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3FactoryResetHint||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3FactoryResetHint PROC
;;;7811   **********************************************************************/
;;;7812   void DISPLAY_DrawMenuL3FactoryResetHint(uint32 ulBuff)
000000  4770              BX       lr
;;;7813   {
;;;7814   //	switch (ulBuff)
;;;7815   //	{
;;;7816   //		case 0:
;;;7817   
;;;7818   //			// 显示背景
;;;7819   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_HINT_RESET_X, UI_ITEM_COODINATE_MENU_L3_HINT_RESET_Y, PIC_ID_G_FACTORY_RESET_INFO, LCD_OPERATOR_MODE_BACKGROUND);
;;;7820   
;;;7821   //			break;
;;;7822   
;;;7823   //		case 1:
;;;7824   
;;;7825   //			// 选中，显示图片
;;;7826   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_HINT_RESET_X, UI_ITEM_COODINATE_MENU_L3_HINT_RESET_Y, PIC_ID_G_FACTORY_RESET_INFO, LCD_OPERATOR_MODE_DRAW); 
;;;7827   //			
;;;7828   //			break;
;;;7829   
;;;7830   //		default:
;;;7831   //			break;
;;;7832   //	}
;;;7833   }
;;;7834   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3FactoryResetTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3FactoryResetTitle PROC
;;;7774   **********************************************************************/
;;;7775   void DISPLAY_DrawMenuL3FactoryResetTitle(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;7776   {
;;;7777   	switch (ulBuff)
000002  2800              CMP      r0,#0
000004  d01b              BEQ      |L123.62|
000006  2801              CMP      r0,#1
000008  d121              BNE      |L123.78|
;;;7778   	{
;;;7779   		case 0:
;;;7780   
;;;7781   			// 显示背景
;;;7782   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BG_X, UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BG_Y, PIC_ID_M_FACTORY_BG, LCD_OPERATOR_MODE_BACKGROUND);
;;;7783   			
;;;7784   			break;
;;;7785   
;;;7786   		case 1:
;;;7787   
;;;7788   			// 选中，显示图片
;;;7789   			LCD_DrawBmpByID(17, 104, PIC_ID_G_FACTORY_OFF, LCD_OPERATOR_MODE_DRAW);
00000a  2300              MOVS     r3,#0
00000c  2297              MOVS     r2,#0x97
00000e  2168              MOVS     r1,#0x68
000010  2011              MOVS     r0,#0x11
000012  f7fffffe          BL       LCD_DrawBmpByID
;;;7790   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BG_X, UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BG_Y, PIC_ID_M_FACTORY_BG, LCD_OPERATOR_MODE_DRAW);
000016  2300              MOVS     r3,#0
000018  22ce              MOVS     r2,#0xce
00001a  215a              MOVS     r1,#0x5a
00001c  202f              MOVS     r0,#0x2f
00001e  f7fffffe          BL       LCD_DrawBmpByID
;;;7791   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_G_FACTORY_YES_X, UI_ITEM_COODINATE_MENU_L3_G_FACTORY_YES_Y, PIC_ID_G_FACTORY_YES, LCD_OPERATOR_MODE_DRAW);
000022  2300              MOVS     r3,#0
000024  2298              MOVS     r2,#0x98
000026  2160              MOVS     r1,#0x60
000028  2051              MOVS     r0,#0x51
00002a  f7fffffe          BL       LCD_DrawBmpByID
;;;7792   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_G_FACTORY_NO_X, UI_ITEM_COODINATE_MENU_L3_G_FACTORY_NO_Y, PIC_ID_G_FACTORY_NO, LCD_OPERATOR_MODE_DRAW);
00002e  2300              MOVS     r3,#0
000030  2296              MOVS     r2,#0x96
000032  216f              MOVS     r1,#0x6f
000034  e8bd4010          POP      {r4,lr}
000038  2051              MOVS     r0,#0x51
00003a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L123.62|
00003e  2301              MOVS     r3,#1                 ;7782
000040  22ce              MOVS     r2,#0xce              ;7782
000042  215a              MOVS     r1,#0x5a              ;7782
000044  e8bd4010          POP      {r4,lr}               ;7782
000048  202f              MOVS     r0,#0x2f              ;7782
00004a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L123.78|
;;;7793   			break;
;;;7794   
;;;7795   		default:
;;;7796   			break;
;;;7797   	}
;;;7798   }
00004e  bd10              POP      {r4,pc}
;;;7799   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3Finish||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3Finish PROC
;;;8693   **********************************************************************/
;;;8694   void DISPLAY_DrawMenuL3Finish(uint32 ulBuff)
000000  4770              BX       lr
;;;8695   {
;;;8696   //	switch (ulBuff)
;;;8697   //	{
;;;8698   //		case 0:
;;;8699   
;;;8700   //			// 显示背景
;;;8701   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_FINISH_X, UI_ITEM_COODINATE_MENU_L3_FINISH_Y, PIC_ID_S_FINISH, LCD_OPERATOR_MODE_BACKGROUND);
;;;8702   
;;;8703   //			break;
;;;8704   
;;;8705   //		case 1:
;;;8706   
;;;8707   //			// 选中，显示图片
;;;8708   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_FINISH_X, UI_ITEM_COODINATE_MENU_L3_FINISH_Y, PIC_ID_S_FINISH, LCD_OPERATOR_MODE_DRAW);	
;;;8709   //			
;;;8710   //			break;
;;;8711   
;;;8712   //		default:
;;;8713   //			break;
;;;8714   //	}
;;;8715   }
;;;8716   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3Minus||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3Minus PROC
;;;8658   **********************************************************************/
;;;8659   void DISPLAY_DrawMenuL3Minus(uint32 ulBuff)
000000  4770              BX       lr
;;;8660   {
;;;8661   //	switch (ulBuff)
;;;8662   //	{
;;;8663   //		case 0:
;;;8664   
;;;8665   //			// 显示背景
;;;8666   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_MINUS_X, UI_ITEM_COODINATE_MENU_L3_MINUS_Y, PIC_ID_S_MINUS, LCD_OPERATOR_MODE_BACKGROUND);
;;;8667   
;;;8668   //			break;
;;;8669   
;;;8670   //		case 1:
;;;8671   
;;;8672   //			// 选中，显示图片
;;;8673   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_MINUS_X, UI_ITEM_COODINATE_MENU_L3_MINUS_Y, PIC_ID_S_MINUS, LCD_OPERATOR_MODE_DRAW);	
;;;8674   //			
;;;8675   //			break;
;;;8676   
;;;8677   //		default:
;;;8678   //			break;
;;;8679   //	}
;;;8680   }
;;;8681   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3No||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3No PROC
;;;7670   **********************************************************************/
;;;7671   void DISPLAY_DrawMenuL3No(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;7672   {
000002  d007              BEQ      |L126.20|
;;;7673   	switch (ulBuff)
000004  2801              CMP      r0,#1
000006  d10b              BNE      |L126.32|
;;;7674   	{
;;;7675   		case 0:
;;;7676   
;;;7677   			// 显示背景
;;;7678   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BLUE_NO_X, UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BLUE_NO_Y, PIC_ID_M_FACTORY_BLUE, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;7679   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_NO_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L3_NO_UNSELECTED_Y, PIC_ID_FACTORY_G_NO, LCD_OPERATOR_MODE_DRAW);
;;;7680   			break;
;;;7681   
;;;7682   		case 1:
;;;7683   
;;;7684   			// 选中，显示图片
;;;7685   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BLUE_NO_X, UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BLUE_NO_Y, PIC_ID_M_FACTORY_BLUE, LCD_OPERATOR_MODE_DRAW);
000008  2300              MOVS     r3,#0
00000a  22cf              MOVS     r2,#0xcf
00000c  216f              MOVS     r1,#0x6f
00000e  2045              MOVS     r0,#0x45
000010  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L126.20|
000014  2305              MOVS     r3,#5                 ;7678
000016  22cf              MOVS     r2,#0xcf              ;7678
000018  216f              MOVS     r1,#0x6f              ;7678
00001a  2045              MOVS     r0,#0x45              ;7678
00001c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L126.32|
;;;7686   			
;;;7687   			break;
;;;7688   
;;;7689   		default:
;;;7690   			break;
;;;7691   	}
;;;7692   }
000020  4770              BX       lr
;;;7693   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3Plus||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3Plus PROC
;;;8623   **********************************************************************/
;;;8624   void DISPLAY_DrawMenuL3Plus(uint32 ulBuff)
000000  4770              BX       lr
;;;8625   {
;;;8626   //	switch (ulBuff)
;;;8627   //	{
;;;8628   //		case 0:
;;;8629   
;;;8630   //			// 显示背景
;;;8631   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_PLUS_X, UI_ITEM_COODINATE_MENU_L3_PLUS_Y, PIC_ID_S_PLUS, LCD_OPERATOR_MODE_BACKGROUND);
;;;8632   
;;;8633   //			break;
;;;8634   
;;;8635   //		case 1:
;;;8636   
;;;8637   //			// 选中，显示图片
;;;8638   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_PLUS_X, UI_ITEM_COODINATE_MENU_L3_PLUS_Y, PIC_ID_S_PLUS, LCD_OPERATOR_MODE_DRAW);	
;;;8639   //			
;;;8640   //			break;
;;;8641   
;;;8642   //		default:
;;;8643   //			break;
;;;8644   //	}
;;;8645   }
;;;8646   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetAutoLightNo||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetAutoLightNo PROC
;;;8823   **********************************************************************/
;;;8824   void DISPLAY_DrawMenuL3SetAutoLightNo(uint32 ulBuff)
000000  4770              BX       lr
;;;8825   {
;;;8826   //	switch (ulBuff)
;;;8827   //	{
;;;8828   //		case 0:
;;;8829   
;;;8830   //			// 显示背景
;;;8831   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_NO_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_NO_SELECTED_Y, PIC_ID_S_NO, LCD_OPERATOR_MODE_BACKGROUND);
;;;8832   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_NO_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L3_NO_UNSELECTED_Y, PIC_ID_G_NO, LCD_OPERATOR_MODE_DRAW);
;;;8833   //			break;
;;;8834   
;;;8835   //		case 1:
;;;8836   
;;;8837   //			// 选中，显示图片
;;;8838   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_NO_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_NO_SELECTED_Y, PIC_ID_S_NO, LCD_OPERATOR_MODE_DRAW);
;;;8839   //			
;;;8840   //			break;
;;;8841   
;;;8842   //		default:
;;;8843   //			break;
;;;8844   //	}
;;;8845   }
;;;8846   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetAutoLightTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetAutoLightTitle PROC
;;;8724   **********************************************************************/
;;;8725   void DISPLAY_DrawMenuL3SetAutoLightTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;8726   {
;;;8727   //	switch (ulBuff)
;;;8728   //	{
;;;8729   //		case 0:
;;;8730   
;;;8731   //			// 显示背景
;;;8732   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_TITLE_X, UI_ITEM_COODINATE_MENU_L3_TITLE_Y, PIC_ID_G_AUTO_HEADLIGHT, LCD_OPERATOR_MODE_BACKGROUND);
;;;8733   
;;;8734   //			break;
;;;8735   
;;;8736   //		case 1:
;;;8737   
;;;8738   //			// 选中，显示图片
;;;8739   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_TITLE_X, UI_ITEM_COODINATE_MENU_L3_TITLE_Y, PIC_ID_G_AUTO_HEADLIGHT, LCD_OPERATOR_MODE_DRAW);	
;;;8740   //			
;;;8741   //			break;
;;;8742   
;;;8743   //		default:
;;;8744   //			break;
;;;8745   //	}
;;;8746   }
;;;8747   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetAutoLightYes||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetAutoLightYes PROC
;;;8791   **********************************************************************/
;;;8792   void DISPLAY_DrawMenuL3SetAutoLightYes(uint32 ulBuff)
000000  4770              BX       lr
;;;8793   {
;;;8794   //	switch (ulBuff)
;;;8795   //	{
;;;8796   //		case 0:
;;;8797   
;;;8798   //			// 显示背景
;;;8799   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_YES_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_YES_SELECTED_Y, PIC_ID_S_YES, LCD_OPERATOR_MODE_BACKGROUND);
;;;8800   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_YES_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L3_YES_UNSELECTED_Y, PIC_ID_G_YES, LCD_OPERATOR_MODE_DRAW);
;;;8801   //			break;
;;;8802   
;;;8803   //		case 1:
;;;8804   
;;;8805   //			// 选中，显示图片
;;;8806   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_YES_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_YES_SELECTED_Y, PIC_ID_S_YES, LCD_OPERATOR_MODE_DRAW);
;;;8807   //			
;;;8808   //			break;
;;;8809   
;;;8810   //		default:
;;;8811   //			break;
;;;8812   //	}
;;;8813   }
;;;8814   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetAutoOffMin||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetAutoOffMin PROC
;;;9056   **********************************************************************/
;;;9057   void DISPLAY_DrawMenuL3SetAutoOffMin(uint32 ulBuff)
000000  4770              BX       lr
;;;9058   {
;;;9059   //	switch (ulBuff)
;;;9060   //	{
;;;9061   //		case 0:
;;;9062   
;;;9063   //			// 显示背景
;;;9064   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_POWER_OFF_MIN_X, UI_ITEM_COODINATE_MENU_L3_POWER_OFF_MIN_Y, PIC_ID_G_MIN, LCD_OPERATOR_MODE_BACKGROUND);
;;;9065   
;;;9066   //			break;
;;;9067   
;;;9068   //		case 1:
;;;9069   
;;;9070   //			// 选中，显示图片
;;;9071   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_POWER_OFF_MIN_X, UI_ITEM_COODINATE_MENU_L3_POWER_OFF_MIN_Y, PIC_ID_G_MIN, LCD_OPERATOR_MODE_DRAW);	
;;;9072   //			
;;;9073   //			break;
;;;9074   
;;;9075   //		default:
;;;9076   //			break;
;;;9077   //	}
;;;9078   }
;;;9079   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetAutoOffTimer||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetAutoOffTimer PROC
;;;9020   **********************************************************************/
;;;9021   void DISPLAY_DrawMenuL3SetAutoOffTimer(uint32 ulBuff)
000000  4770              BX       lr
;;;9022   {
;;;9023   //	uint8 value1=0, value2=0;
;;;9024   //	uint8 ucMin = ulBuff;
;;;9025   
;;;9026   //	// 取分钟段数字，最大不超过19分钟
;;;9027   //	LIMIT_TO_MAX(ucMin,19);
;;;9028   
;;;9029   //	// 提取分钟数字位上的数字
;;;9030   //	value1 = ucMin/10;
;;;9031   //	value2 = ucMin%10;
;;;9032   
;;;9033   //	// 显示分钟个位
;;;9034   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L3_POWER_OFF_M_1_X, (uint16)UI_ITEM_COODINATE_MENU_L3_POWER_OFF_M_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;9035   
;;;9036   //	// 清除分钟十位
;;;9037   //	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_POWER_OFF_M_10_X, UI_ITEM_COODINATE_MENU_L3_POWER_OFF_M_10_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value1), LCD_OPERATOR_MODE_BACKGROUND);
;;;9038   
;;;9039   //	// 显示分钟十位
;;;9040   //	CHECK_PARAM_LESS_RETURN(ulBuff, 10);
;;;9041   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L3_POWER_OFF_M_10_X, (uint16)UI_ITEM_COODINATE_MENU_L3_POWER_OFF_M_10_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;9042   
;;;9043   }
;;;9044   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetAutoOffTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetAutoOffTitle PROC
;;;8985   **********************************************************************/
;;;8986   void DISPLAY_DrawMenuL3SetAutoOffTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;8987   {
;;;8988   //	switch (ulBuff)
;;;8989   //	{
;;;8990   //		case 0:
;;;8991   
;;;8992   //			// 显示背景
;;;8993   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_TITLE_X, UI_ITEM_COODINATE_MENU_L3_TITLE_Y, PIC_ID_G_SET_AUTO_OFF, LCD_OPERATOR_MODE_BACKGROUND);
;;;8994   
;;;8995   //			break;
;;;8996   
;;;8997   //		case 1:
;;;8998   
;;;8999   //			// 选中，显示图片
;;;9000   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_TITLE_X, UI_ITEM_COODINATE_MENU_L3_TITLE_Y, PIC_ID_G_SET_AUTO_OFF, LCD_OPERATOR_MODE_DRAW);	
;;;9001   //			
;;;9002   //			break;
;;;9003   
;;;9004   //		default:
;;;9005   //			break;
;;;9006   //	}
;;;9007   }
;;;9008   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetBackLightLevel||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetBackLightLevel PROC
;;;8965   **********************************************************************/
;;;8966   void DISPLAY_DrawMenuL3SetBackLightLevel(uint32 ulBuff)
000000  4770              BX       lr
;;;8967   {
;;;8968   //	LIMIT_TO_MAX(ulBuff,5);
;;;8969   //	
;;;8970   //	// 显示亮度
;;;8971   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L3_LIGHT_LEVEL_X, (uint16)UI_ITEM_COODINATE_MENU_L3_LIGHT_LEVEL_Y, (PIC_ID_E)(PIC_ID_SMALL_0+ulBuff), LCD_OPERATOR_MODE_DRAW);
;;;8972   }
;;;8973   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetBackLightTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetBackLightTitle PROC
;;;8930   **********************************************************************/
;;;8931   void DISPLAY_DrawMenuL3SetBackLightTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;8932   {
;;;8933   //	switch (ulBuff)
;;;8934   //	{
;;;8935   //		case 0:
;;;8936   
;;;8937   //			// 显示背景
;;;8938   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_TITLE_X, UI_ITEM_COODINATE_MENU_L3_TITLE_Y, PIC_ID_G_SET_BACKLIGHT, LCD_OPERATOR_MODE_BACKGROUND);
;;;8939   
;;;8940   //			break;
;;;8941   
;;;8942   //		case 1:
;;;8943   
;;;8944   //			// 选中，显示图片
;;;8945   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_TITLE_X, UI_ITEM_COODINATE_MENU_L3_TITLE_Y, PIC_ID_G_SET_BACKLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;8946   //			
;;;8947   //			break;
;;;8948   
;;;8949   //		default:
;;;8950   //			break;
;;;8951   //	}
;;;8952   }
;;;8953   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetDate||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetDate PROC
;;;8122   **********************************************************************/
;;;8123   void DISPLAY_DrawMenuL3SetDate(uint32 ulBuff)
000000  4770              BX       lr
;;;8124   {
;;;8125   //switch (ulBuff)
;;;8126   //{
;;;8127   //	case 0:
;;;8128   
;;;8129   //		// 显示背景
;;;8130   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_SET_DATE_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_SET_DATE_SELECTED_Y, PIC_ID_S_SET_DATE, LCD_OPERATOR_MODE_BACKGROUND);
;;;8131   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_SET_DATE_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L3_SET_DATE_UNSELECTED_Y, PIC_ID_G_SET_DATE, LCD_OPERATOR_MODE_DRAW);
;;;8132   //		break;
;;;8133   
;;;8134   //	case 1:
;;;8135   
;;;8136   //		// 选中，显示图片
;;;8137   //		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_SET_DATE_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_SET_DATE_SELECTED_Y, PIC_ID_S_SET_DATE, LCD_OPERATOR_MODE_DRAW);
;;;8138   //		
;;;8139   //		break;
;;;8140   
;;;8141   //	default:
;;;8142   //		break;
;;;8143   //}
;;;8144   
;;;8145   }
;;;8146   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetDateTimeTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetDateTimeTitle PROC
;;;8087   **********************************************************************/
;;;8088   void DISPLAY_DrawMenuL3SetDateTimeTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;8089   {
;;;8090   //	switch (ulBuff)
;;;8091   //	{
;;;8092   //		case 0:
;;;8093   
;;;8094   //			// 显示背景
;;;8095   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_SET_DATE_TIME_TITLE_X, UI_ITEM_COODINATE_MENU_L3_SET_DATE_TIME_TITLE_Y, PIC_ID_G_SET_DATE_TIME, LCD_OPERATOR_MODE_BACKGROUND);
;;;8096   
;;;8097   //			break;
;;;8098   
;;;8099   //		case 1:
;;;8100   
;;;8101   //			// 选中，显示图片
;;;8102   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_SET_DATE_TIME_TITLE_X, UI_ITEM_COODINATE_MENU_L3_SET_DATE_TIME_TITLE_Y, PIC_ID_G_SET_DATE_TIME, LCD_OPERATOR_MODE_DRAW);	
;;;8103   //			
;;;8104   //			break;
;;;8105   
;;;8106   //		default:
;;;8107   //			break;
;;;8108   //	}
;;;8109   }
;;;8110   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetTime||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetTime PROC
;;;8158   **********************************************************************/
;;;8159   void DISPLAY_DrawMenuL3SetTime(uint32 ulBuff)
000000  4770              BX       lr
;;;8160   {
;;;8161   //	switch (ulBuff)
;;;8162   //	{
;;;8163   //		case 0:
;;;8164   
;;;8165   //			// 显示背景
;;;8166   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_SET_TIME_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_SET_TIME_SELECTED_Y, PIC_ID_S_SET_TIME, LCD_OPERATOR_MODE_BACKGROUND);
;;;8167   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_SET_TIME_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L3_SET_TIME_UNSELECTED_Y, PIC_ID_G_SET_TIME, LCD_OPERATOR_MODE_DRAW);
;;;8168   //			break;
;;;8169   
;;;8170   //		case 1:
;;;8171   
;;;8172   //			// 选中，显示图片
;;;8173   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_SET_TIME_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_SET_TIME_SELECTED_Y, PIC_ID_S_SET_TIME, LCD_OPERATOR_MODE_DRAW);
;;;8174   //			
;;;8175   //			break;
;;;8176   
;;;8177   //		default:
;;;8178   //			break;
;;;8179   //	}
;;;8180   }
;;;8181   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetUnitKM||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetUnitKM PROC
;;;8858   **********************************************************************/
;;;8859   void DISPLAY_DrawMenuL3SetUnitKM(uint32 ulBuff)
000000  4770              BX       lr
;;;8860   {
;;;8861   //	switch (ulBuff)
;;;8862   //	{
;;;8863   //		case 0:
;;;8864   
;;;8865   //			// 不选中
;;;8866   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_METRIC_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_METRIC_SELECTED_Y, PIC_ID_S_METRIC, LCD_OPERATOR_MODE_BACKGROUND);
;;;8867   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_METRIC_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L3_METRIC_UNSELECTED_Y, PIC_ID_G_METRIC, LCD_OPERATOR_MODE_DRAW);
;;;8868   //				
;;;8869   
;;;8870   //			break;
;;;8871   
;;;8872   //		case 1:
;;;8873   
;;;8874   //			// 选中，显示图片
;;;8875   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_METRIC_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_METRIC_SELECTED_Y, PIC_ID_S_METRIC, LCD_OPERATOR_MODE_DRAW);
;;;8876   //			
;;;8877   //			break;
;;;8878   
;;;8879   //		default:
;;;8880   //			break;
;;;8881   //	}
;;;8882   }
;;;8883   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetUnitMiles||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetUnitMiles PROC
;;;8895   **********************************************************************/
;;;8896   void DISPLAY_DrawMenuL3SetUnitMiles(uint32 ulBuff)
000000  4770              BX       lr
;;;8897   {
;;;8898   //	switch (ulBuff)
;;;8899   //	{
;;;8900   //		case 0:
;;;8901   
;;;8902   //			// 不选中
;;;8903   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_INCH_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_INCH_SELECTED_Y, PIC_ID_S_IMPERIAL, LCD_OPERATOR_MODE_BACKGROUND);
;;;8904   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_INCH_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L3_INCH_UNSELECTED_Y, PIC_ID_G_IMPERIAL, LCD_OPERATOR_MODE_DRAW);
;;;8905   //			break;
;;;8906   
;;;8907   //		case 1:
;;;8908   
;;;8909   //			// 选中，显示图片
;;;8910   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_INCH_SELECTED_X, UI_ITEM_COODINATE_MENU_L3_INCH_SELECTED_Y, PIC_ID_S_IMPERIAL, LCD_OPERATOR_MODE_DRAW);
;;;8911   //			
;;;8912   //			break;
;;;8913   
;;;8914   //		default:
;;;8915   //			break;
;;;8916   //	}
;;;8917   }
;;;8918   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3SetUnitTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3SetUnitTitle PROC
;;;8760   **********************************************************************/
;;;8761   void DISPLAY_DrawMenuL3SetUnitTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;8762   {
;;;8763   //	switch (ulBuff)
;;;8764   //	{
;;;8765   //		case 0:
;;;8766   
;;;8767   //			// 显示背景
;;;8768   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_TITLE_X, UI_ITEM_COODINATE_MENU_L3_TITLE_Y, PIC_ID_G_SET_UNIT, LCD_OPERATOR_MODE_BACKGROUND);
;;;8769   
;;;8770   //			break;
;;;8771   
;;;8772   //		case 1:
;;;8773   
;;;8774   //			// 选中，显示图片
;;;8775   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_TITLE_X, UI_ITEM_COODINATE_MENU_L3_TITLE_Y, PIC_ID_G_SET_UNIT, LCD_OPERATOR_MODE_DRAW);	
;;;8776   //			
;;;8777   //			break;
;;;8778   
;;;8779   //		default:
;;;8780   //			break;
;;;8781   //	}
;;;8782   }
;;;8783   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL3Yes||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL3Yes PROC
;;;7635   **********************************************************************/
;;;7636   void DISPLAY_DrawMenuL3Yes(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;7637   {
000002  d007              BEQ      |L142.20|
;;;7638   	switch (ulBuff)
000004  2801              CMP      r0,#1
000006  d10b              BNE      |L142.32|
;;;7639   	{
;;;7640   		case 0:
;;;7641   
;;;7642   			// 显示背景
;;;7643   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BLUE_YES_X, UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BLUE_YES_Y, PIC_ID_M_FACTORY_BLUE, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;7644   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_YES_UNSELECTED_X, UI_ITEM_COODINATE_MENU_L3_YES_UNSELECTED_Y, PIC_ID_FACTORY_G_YES, LCD_OPERATOR_MODE_DRAW);
;;;7645   			break;
;;;7646   
;;;7647   		case 1:
;;;7648   
;;;7649   			// 选中，显示图片
;;;7650   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BLUE_YES_X, UI_ITEM_COODINATE_MENU_L3_M_FACTORY_BLUE_YES_Y, PIC_ID_M_FACTORY_BLUE, LCD_OPERATOR_MODE_DRAW);
000008  2300              MOVS     r3,#0
00000a  22cf              MOVS     r2,#0xcf
00000c  2161              MOVS     r1,#0x61
00000e  2045              MOVS     r0,#0x45
000010  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L142.20|
000014  2305              MOVS     r3,#5                 ;7643
000016  22cf              MOVS     r2,#0xcf              ;7643
000018  2161              MOVS     r1,#0x61              ;7643
00001a  2045              MOVS     r0,#0x45              ;7643
00001c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L142.32|
;;;7651   			
;;;7652   			break;
;;;7653   
;;;7654   		default:
;;;7655   			break;
;;;7656   	}
;;;7657   }
000020  4770              BX       lr
;;;7658   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL4DateFinish||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL4DateFinish PROC
;;;8334   **********************************************************************/
;;;8335   void DISPLAY_DrawMenuL4DateFinish(uint32 ulBuff)
000000  4770              BX       lr
;;;8336   {
;;;8337   //	switch (ulBuff)
;;;8338   //	{
;;;8339   //		case 0:
;;;8340   
;;;8341   //			// 显示背景
;;;8342   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_DATE_FINISH_X, UI_ITEM_COODINATE_MENU_L4_DATE_FINISH_Y, PIC_ID_S_FINISH, LCD_OPERATOR_MODE_BACKGROUND);
;;;8343   
;;;8344   //			break;
;;;8345   
;;;8346   //		case 1:
;;;8347   
;;;8348   //			// 选中，显示图片
;;;8349   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_DATE_FINISH_X, UI_ITEM_COODINATE_MENU_L4_DATE_FINISH_Y, PIC_ID_S_FINISH, LCD_OPERATOR_MODE_DRAW);	
;;;8350   //			
;;;8351   //			break;
;;;8352   
;;;8353   //		default:
;;;8354   //			break;
;;;8355   //	}
;;;8356   }
;;;8357   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL4DateMinus||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL4DateMinus PROC
;;;8299   **********************************************************************/
;;;8300   void DISPLAY_DrawMenuL4DateMinus(uint32 ulBuff)
000000  4770              BX       lr
;;;8301   {
;;;8302   //	switch (ulBuff)
;;;8303   //	{
;;;8304   //		case 0:
;;;8305   
;;;8306   //			// 显示背景
;;;8307   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_DATE_MINUS_X, UI_ITEM_COODINATE_MENU_L4_DATE_MINUS_Y, PIC_ID_S_MINUS, LCD_OPERATOR_MODE_BACKGROUND);
;;;8308   
;;;8309   //			break;
;;;8310   
;;;8311   //		case 1:
;;;8312   
;;;8313   //			// 选中，显示图片
;;;8314   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_DATE_MINUS_X, UI_ITEM_COODINATE_MENU_L4_DATE_MINUS_Y, PIC_ID_S_MINUS, LCD_OPERATOR_MODE_DRAW);	
;;;8315   //			
;;;8316   //			break;
;;;8317   
;;;8318   //		default:
;;;8319   //			break;
;;;8320   //	}
;;;8321   }
;;;8322   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL4DatePlus||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL4DatePlus PROC
;;;8264   **********************************************************************/
;;;8265   void DISPLAY_DrawMenuL4DatePlus(uint32 ulBuff)
000000  4770              BX       lr
;;;8266   {
;;;8267   //	switch (ulBuff)
;;;8268   //	{
;;;8269   //		case 0:
;;;8270   
;;;8271   //			// 显示背景
;;;8272   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_DATE_PLUS_X, UI_ITEM_COODINATE_MENU_L4_DATE_PLUS_Y, PIC_ID_S_PLUS, LCD_OPERATOR_MODE_BACKGROUND);
;;;8273   
;;;8274   //			break;
;;;8275   
;;;8276   //		case 1:
;;;8277   
;;;8278   //			// 选中，显示图片
;;;8279   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_DATE_PLUS_X, UI_ITEM_COODINATE_MENU_L4_DATE_PLUS_Y, PIC_ID_S_PLUS, LCD_OPERATOR_MODE_DRAW);	
;;;8280   //			
;;;8281   //			break;
;;;8282   
;;;8283   //		default:
;;;8284   //			break;
;;;8285   //	}
;;;8286   }
;;;8287   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL4SetDate||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL4SetDate PROC
;;;8369   **********************************************************************/
;;;8370   void DISPLAY_DrawMenuL4SetDate(uint32 ulBuff)
000000  4770              BX       lr
;;;8371   {
;;;8372   //	uint8 value1=0, value2=0, value3=0, value4=0;
;;;8373   //	uint8 ucMonth,ucDay;
;;;8374   //	uint16 usYear;
;;;8375   
;;;8376   //	usYear = ((ulBuff & 0xFFFF0000) >> 16);
;;;8377   //	LIMIT_TO_MAX(usYear,2099);
;;;8378   //	
;;;8379   //	ucMonth = ((ulBuff & 0xFF00) >> 8);
;;;8380   //	LIMIT_TO_MAX(ucMonth,12);
;;;8381   
;;;8382   //	ucDay  = ulBuff & 0xFF;
;;;8383   //	LIMIT_TO_MAX(ucDay,31);
;;;8384   
;;;8385   //	// 提取年
;;;8386   //	value1 = 2;
;;;8387   //	value2 = 0;
;;;8388   //	value3 = usYear%1000%100/10;
;;;8389   //	value4 = usYear%1000%100%10;
;;;8390   
;;;8391   //	// 显示年
;;;8392   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_1000_X, (uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_1000_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;8393   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_100_X, (uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_100_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;8394   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_10_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;8395   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;8396   
;;;8397   //	// 显示冒号
;;;8398   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_DATE_COLON_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_DATE_COLON_10_Y, PIC_ID_COLON, LCD_OPERATOR_MODE_DRAW);
;;;8399   
;;;8400   //	// 提取月
;;;8401   //	value3 = ucMonth%1000%100/10;
;;;8402   //	value4 = ucMonth%1000%100%10;
;;;8403   
;;;8404   //	// 显示月
;;;8405   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_MONTH_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_MONTH_10_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;8406   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_MONTH_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_MONTH_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;8407   
;;;8408   //	// 显示冒号
;;;8409   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_DATE_COLON_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_DATE_COLON_1_Y, PIC_ID_COLON, LCD_OPERATOR_MODE_DRAW);
;;;8410   
;;;8411   //	// 提取日
;;;8412   //	value3 = ucDay%1000%100/10;
;;;8413   //	value4 = ucDay%1000%100%10;
;;;8414   
;;;8415   //	// 显示日
;;;8416   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_DAY_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_DAY_10_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;8417   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_DAY_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_DAY_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;8418   
;;;8419   }
;;;8420   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL4SetDateTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL4SetDateTitle PROC
;;;8228   **********************************************************************/
;;;8229   void DISPLAY_DrawMenuL4SetDateTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;8230   {
;;;8231   //	switch (ulBuff)
;;;8232   //	{
;;;8233   //		case 0:
;;;8234   
;;;8235   //			// 显示背景
;;;8236   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_SET_DATE_TITLE_X, UI_ITEM_COODINATE_MENU_L4_SET_DATE_TITLE_Y, PIC_ID_G_SET_DATE, LCD_OPERATOR_MODE_BACKGROUND);
;;;8237   
;;;8238   //			break;
;;;8239   
;;;8240   //		case 1:
;;;8241   
;;;8242   //			// 选中，显示图片
;;;8243   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_SET_DATE_TITLE_X, UI_ITEM_COODINATE_MENU_L4_SET_DATE_TITLE_Y, PIC_ID_G_SET_DATE, LCD_OPERATOR_MODE_DRAW);	
;;;8244   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_SET_DATE_SUB_TITLE_X, UI_ITEM_COODINATE_MENU_L4_SET_DATE_SUB_TITLE_Y, PIC_ID_G_YYMMDD, LCD_OPERATOR_MODE_DRAW);	
;;;8245   //			
;;;8246   //			break;
;;;8247   
;;;8248   //		default:
;;;8249   //			break;
;;;8250   //	}
;;;8251   }
;;;8252   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL4SetTime||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL4SetTime PROC
;;;8573   **********************************************************************/
;;;8574   void DISPLAY_DrawMenuL4SetTime(uint32 ulBuff)
000000  4770              BX       lr
;;;8575   {
;;;8576   //	uint8 value1=0, value2=0, value3=0, value4=0;
;;;8577   //	uint8 ucHour,ucMin;
;;;8578   //	
;;;8579   //	// 取小时段数字，最大不超过23个小时
;;;8580   //	ucHour = ((ulBuff & 0xFF00) >> 8);
;;;8581   //	LIMIT_TO_MAX(ucHour,23);
;;;8582   
;;;8583   //	// 取分钟段数字，最大不超过59分钟
;;;8584   //	ucMin  = ulBuff & 0xFF;
;;;8585   //	LIMIT_TO_MAX(ucMin,59);
;;;8586   
;;;8587   //	// 提取小时数字位上的数字
;;;8588   //	value1 = ucHour/10;
;;;8589   //	value2 = ucHour%10;
;;;8590   
;;;8591   //	// 提取分钟数字位上的数字
;;;8592   //	value3 = ucMin/10;
;;;8593   //	value4 = ucMin%10;
;;;8594   //	
;;;8595   //	// 显示小时十位
;;;8596   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_10_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;8597   
;;;8598   //	// 显示小时个位
;;;8599   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;8600   
;;;8601   //	// 显示冒号
;;;8602   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_COLON_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_COLON_Y, PIC_ID_COLON, LCD_OPERATOR_MODE_DRAW);
;;;8603   
;;;8604   //	// 显示分钟十位
;;;8605   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_10_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;8606   
;;;8607   //	// 显示分钟个位
;;;8608   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;8609   
;;;8610   }
;;;8611   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuL4SetTimeTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuL4SetTimeTitle PROC
;;;8433   **********************************************************************/
;;;8434   void DISPLAY_DrawMenuL4SetTimeTitle(uint32 ulBuff)
000000  4770              BX       lr
;;;8435   {
;;;8436   //	switch (ulBuff)
;;;8437   //	{
;;;8438   //		case 0:
;;;8439   
;;;8440   //			// 显示背景
;;;8441   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_SET_TIME_TITLE_X, UI_ITEM_COODINATE_MENU_L4_SET_TIME_TITLE_Y, PIC_ID_G_SET_TIME, LCD_OPERATOR_MODE_BACKGROUND);
;;;8442   
;;;8443   //			break;
;;;8444   
;;;8445   //		case 1:
;;;8446   
;;;8447   //			// 选中，显示图片
;;;8448   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_SET_TIME_TITLE_X, UI_ITEM_COODINATE_MENU_L4_SET_TIME_TITLE_Y, PIC_ID_G_SET_TIME, LCD_OPERATOR_MODE_DRAW);	
;;;8449   //			
;;;8450   //			break;
;;;8451   
;;;8452   //		default:
;;;8453   //			break;
;;;8454   //	}
;;;8455   }
;;;8456   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuLock||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuLock PROC
;;;3605   **********************************************************************/
;;;3606   void DISPLAY_DrawMenuLock(uint32 ulBuff)
000000  4770              BX       lr
;;;3607   {
;;;3608   //	switch (ulBuff)
;;;3609   //	{
;;;3610   //		case 0:
;;;3611   //			break;
;;;3612   
;;;3613   //		case 1:
;;;3614   
;;;3615   //			// 显示图片
;;;3616   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_LOCKED_X, UI_ITEM_COODINATE_MENU_LOCKED_Y, PIC_ID_G_LOCKED, LCD_OPERATOR_MODE_DRAW);	
;;;3617   //			
;;;3618   //			break;
;;;3619   
;;;3620   //		default:
;;;3621   //			break;
;;;3622   //	}
;;;3623   }
;;;3624   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuMinus||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuMinus PROC
;;;8503   **********************************************************************/
;;;8504   void DISPLAY_DrawMenuMinus(uint32 ulBuff)
000000  4770              BX       lr
;;;8505   {
;;;8506   //	switch (ulBuff)
;;;8507   //	{
;;;8508   //		case 0:
;;;8509   
;;;8510   //			// 显示背景
;;;8511   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_TIME_MINUS_X, UI_ITEM_COODINATE_MENU_L4_TIME_MINUS_Y, PIC_ID_S_MINUS, LCD_OPERATOR_MODE_BACKGROUND);
;;;8512   
;;;8513   //			break;
;;;8514   
;;;8515   //		case 1:
;;;8516   
;;;8517   //			// 选中，显示图片
;;;8518   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_TIME_MINUS_X, UI_ITEM_COODINATE_MENU_L4_TIME_MINUS_Y, PIC_ID_S_MINUS, LCD_OPERATOR_MODE_DRAW);	
;;;8519   //			
;;;8520   //			break;
;;;8521   
;;;8522   //		default:
;;;8523   //			break;
;;;8524   //	}
;;;8525   }
;;;8526   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuOk||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuOk PROC
;;;3636   **********************************************************************/
;;;3637   void DISPLAY_DrawMenuOk(uint32 ulBuff)
000000  4770              BX       lr
;;;3638   {
;;;3639   //	switch (ulBuff)
;;;3640   //	{
;;;3641   //		case 0:
;;;3642   
;;;3643   //			// 背景色
;;;3644   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_OK_X, UI_ITEM_COODINATE_MENU_OK_Y, PIC_ID_G_OK, LCD_OPERATOR_MODE_BACKGROUND);	
;;;3645   
;;;3646   //			break;
;;;3647   
;;;3648   //		case 1:
;;;3649   
;;;3650   //			// 显示图片
;;;3651   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_OK_X, UI_ITEM_COODINATE_MENU_OK_Y, PIC_ID_G_OK, LCD_OPERATOR_MODE_DRAW);	
;;;3652   //			
;;;3653   //			break;
;;;3654   
;;;3655   //		default:
;;;3656   //			break;
;;;3657   //	}
;;;3658   }
;;;3659   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuPlus||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuPlus PROC
;;;8468   **********************************************************************/
;;;8469   void DISPLAY_DrawMenuPlus(uint32 ulBuff)
000000  4770              BX       lr
;;;8470   {
;;;8471   //	switch (ulBuff)
;;;8472   //	{
;;;8473   //		case 0:
;;;8474   
;;;8475   //			// 显示背景
;;;8476   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_TIME_PLUS_X, UI_ITEM_COODINATE_MENU_L4_TIME_PLUS_Y, PIC_ID_S_PLUS, LCD_OPERATOR_MODE_BACKGROUND);
;;;8477   
;;;8478   //			break;
;;;8479   
;;;8480   //		case 1:
;;;8481   
;;;8482   //			// 选中，显示图片
;;;8483   //			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_L4_TIME_PLUS_X, UI_ITEM_COODINATE_MENU_L4_TIME_PLUS_Y, PIC_ID_S_PLUS, LCD_OPERATOR_MODE_DRAW);	
;;;8484   //			
;;;8485   //			break;
;;;8486   
;;;8487   //		default:
;;;8488   //			break;
;;;8489   //	}
;;;8490   }
;;;8491   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuPowerOff||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuPowerOff PROC
;;;4303   
;;;4304   void DISPLAY_DrawMenuPowerOff(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;4305   {
000002  4604              MOV      r4,r0
;;;4306   	uint8 value1 = 0, value2 = 0;
;;;4307   
;;;4308   	CHECK_PARAM_OVER_RETURN(ulBuff, 99);
000004  2c63              CMP      r4,#0x63
000006  d83d              BHI      |L154.132|
;;;4309   	value1 = ulBuff / 10;
000008  200a              MOVS     r0,#0xa
00000a  fbb4f1f0          UDIV     r1,r4,r0
00000e  b2ce              UXTB     r6,r1
;;;4310   	value2 = ulBuff % 10;
000010  fbb4f1f0          UDIV     r1,r4,r0
000014  fb004511          MLS      r5,r0,r1,r4
;;;4311   	
;;;4312   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_BG_X, UI_ITEM_COODINATE_MENU_DATA_BG_Y, PIC_ID_MENU_KUANG, LCD_OPERATOR_MODE_DRAW);
000018  2300              MOVS     r3,#0
00001a  22eb              MOVS     r2,#0xeb
00001c  2154              MOVS     r1,#0x54
00001e  2080              MOVS     r0,#0x80
000020  f7fffffe          BL       LCD_DrawBmpByID
;;;4313   
;;;4314   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4315   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4316   
;;;4317   	if (0 == ulBuff)
000024  b184              CBZ      r4,|L154.72|
;;;4318   	{
;;;4319   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWER_OFF_0_X, UI_ITEM_COODINATE_MENU_POWER_OFF_0_Y, PIC_ID_MENU_OFF, LCD_OPERATOR_MODE_DRAW);
;;;4320   	}
;;;4321   	else if (ulBuff < 10)
000026  2c0a              CMP      r4,#0xa
000028  d216              BCS      |L154.88|
;;;4322   	{
;;;4323   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWER_OFF_ONE_X, UI_ITEM_COODINATE_MENU_POWER_OFF_ONE_Y, (PIC_ID_E)(value2 + PIC_ID_MENU_0), LCD_OPERATOR_MODE_DRAW);
00002a  2300              MOVS     r3,#0
00002c  f10502d9          ADD      r2,r5,#0xd9
000030  215c              MOVS     r1,#0x5c
000032  209e              MOVS     r0,#0x9e
000034  f7fffffe          BL       LCD_DrawBmpByID
;;;4324   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWER_OFF_UNIT_X, UI_ITEM_COODINATE_MENU_POWER_OFF_UNIT_Y, PIC_ID_MENU_MIN, LCD_OPERATOR_MODE_DRAW);
000038  e8bd4070          POP      {r4-r6,lr}
00003c  2300              MOVS     r3,#0
00003e  22ec              MOVS     r2,#0xec
000040  2163              MOVS     r1,#0x63
000042  20af              MOVS     r0,#0xaf
000044  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L154.72|
000048  e8bd4070          POP      {r4-r6,lr}            ;4319
00004c  2300              MOVS     r3,#0                 ;4319
00004e  22ef              MOVS     r2,#0xef              ;4319
000050  215c              MOVS     r1,#0x5c              ;4319
000052  2094              MOVS     r0,#0x94              ;4319
000054  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L154.88|
;;;4325   	}
;;;4326   	else
;;;4327   	{
;;;4328   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWER_OFF_1_X, UI_ITEM_COODINATE_MENU_POWER_OFF_1_Y, (PIC_ID_E)(value1 + PIC_ID_MENU_0), LCD_OPERATOR_MODE_DRAW);
000058  2300              MOVS     r3,#0
00005a  f10602d9          ADD      r2,r6,#0xd9
00005e  215c              MOVS     r1,#0x5c
000060  2090              MOVS     r0,#0x90
000062  f7fffffe          BL       LCD_DrawBmpByID
;;;4329   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWER_OFF_2_X, UI_ITEM_COODINATE_MENU_POWER_OFF_2_Y, (PIC_ID_E)(value2 + PIC_ID_MENU_0), LCD_OPERATOR_MODE_DRAW);
000066  2300              MOVS     r3,#0
000068  f10502d9          ADD      r2,r5,#0xd9
00006c  215c              MOVS     r1,#0x5c
00006e  209e              MOVS     r0,#0x9e
000070  f7fffffe          BL       LCD_DrawBmpByID
;;;4330   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWER_OFF_UNIT_X, UI_ITEM_COODINATE_MENU_POWER_OFF_UNIT_Y, PIC_ID_MENU_MIN, LCD_OPERATOR_MODE_DRAW);
000074  e8bd4070          POP      {r4-r6,lr}
000078  2300              MOVS     r3,#0
00007a  22ec              MOVS     r2,#0xec
00007c  2163              MOVS     r1,#0x63
00007e  20af              MOVS     r0,#0xaf
000080  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L154.132|
;;;4331   	}
;;;4332   	
;;;4333   }
000084  bd70              POP      {r4-r6,pc}
;;;4334   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterCursor||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterCursor PROC
;;;5409   // 进入开机密码登录下标
;;;5410   void DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterCursor(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;5411   {
;;;5412   	uint8 state = ulBuff & 0xFF;
000002  b2c5              UXTB     r5,r0
;;;5413   	uint8 num = (ulBuff >>8) & 0xFF;
000004  f3c02407          UBFX     r4,r0,#8,#8
;;;5414   
;;;5415   	CHECK_PARAM_OVER_SAME_RETURN(num, 4);
000008  2c04              CMP      r4,#4
00000a  d240              BCS      |L155.142|
;;;5416   	
;;;5417   	// 背景色
;;;5418   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR1_X,
00000c  2301              MOVS     r3,#1
00000e  22bd              MOVS     r2,#0xbd
000010  2171              MOVS     r1,#0x71
000012  2067              MOVS     r0,#0x67
000014  f7fffffe          BL       LCD_DrawBmpByID
;;;5419   									UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR1_Y,
;;;5420   									PIC_ID_INPUT_HENG,
;;;5421   									LCD_OPERATOR_MODE_BACKGROUND);
;;;5422   	// 背景色
;;;5423   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR2_X,
000018  2301              MOVS     r3,#1
00001a  22bd              MOVS     r2,#0xbd
00001c  2171              MOVS     r1,#0x71
00001e  2089              MOVS     r0,#0x89
000020  f7fffffe          BL       LCD_DrawBmpByID
;;;5424   									UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR2_Y,
;;;5425   									PIC_ID_INPUT_HENG,
;;;5426   									LCD_OPERATOR_MODE_BACKGROUND);
;;;5427   
;;;5428   	// 背景色
;;;5429   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR3_X,
000024  2301              MOVS     r3,#1
000026  22bd              MOVS     r2,#0xbd
000028  2171              MOVS     r1,#0x71
00002a  20ab              MOVS     r0,#0xab
00002c  f7fffffe          BL       LCD_DrawBmpByID
;;;5430   									UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR3_Y,
;;;5431   									PIC_ID_INPUT_HENG,
;;;5432   									LCD_OPERATOR_MODE_BACKGROUND);
;;;5433   
;;;5434   	// 背景色
;;;5435   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR4_X,
000030  2301              MOVS     r3,#1
000032  22bd              MOVS     r2,#0xbd
000034  2171              MOVS     r1,#0x71
000036  20cd              MOVS     r0,#0xcd
000038  f7fffffe          BL       LCD_DrawBmpByID
;;;5436   									UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR4_Y,
;;;5437   									PIC_ID_INPUT_HENG,
;;;5438   									LCD_OPERATOR_MODE_BACKGROUND);	
;;;5439   
;;;5440   	if (!state)
00003c  2d00              CMP      r5,#0
00003e  d126              BNE      |L155.142|
;;;5441   	{
;;;5442   		switch (num)
000040  b16c              CBZ      r4,|L155.94|
000042  2c01              CMP      r4,#1
000044  d013              BEQ      |L155.110|
000046  2c02              CMP      r4,#2
000048  d019              BEQ      |L155.126|
00004a  2c03              CMP      r4,#3
00004c  d11f              BNE      |L155.142|
;;;5443   		{
;;;5444   			case 0:
;;;5445   				// 显示图片
;;;5446   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR1_X,
;;;5447   												UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR1_Y,
;;;5448   												PIC_ID_INPUT_HENG,
;;;5449   												LCD_OPERATOR_MODE_DRAW);
;;;5450   				break;
;;;5451   
;;;5452   			case 1:
;;;5453   				// 显示图片
;;;5454   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR2_X,
;;;5455   												UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR2_Y,
;;;5456   												PIC_ID_INPUT_HENG,
;;;5457   												LCD_OPERATOR_MODE_DRAW);
;;;5458   				break;
;;;5459   
;;;5460   			case 2:
;;;5461   				// 显示图片
;;;5462   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR3_X,
;;;5463   												UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR3_Y,
;;;5464   												PIC_ID_INPUT_HENG,
;;;5465   												LCD_OPERATOR_MODE_DRAW);
;;;5466   				break;
;;;5467   
;;;5468   			case 3:
;;;5469   				// 显示图片
;;;5470   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR4_X,
00004e  e8bd4070          POP      {r4-r6,lr}
000052  2300              MOVS     r3,#0
000054  22bd              MOVS     r2,#0xbd
000056  2171              MOVS     r1,#0x71
000058  20cd              MOVS     r0,#0xcd
00005a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L155.94|
00005e  e8bd4070          POP      {r4-r6,lr}            ;5446
000062  2300              MOVS     r3,#0                 ;5446
000064  22bd              MOVS     r2,#0xbd              ;5446
000066  2171              MOVS     r1,#0x71              ;5446
000068  2067              MOVS     r0,#0x67              ;5446
00006a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L155.110|
00006e  e8bd4070          POP      {r4-r6,lr}            ;5454
000072  2300              MOVS     r3,#0                 ;5454
000074  22bd              MOVS     r2,#0xbd              ;5454
000076  2171              MOVS     r1,#0x71              ;5454
000078  2089              MOVS     r0,#0x89              ;5454
00007a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L155.126|
00007e  e8bd4070          POP      {r4-r6,lr}            ;5462
000082  2300              MOVS     r3,#0                 ;5462
000084  22bd              MOVS     r2,#0xbd              ;5462
000086  2171              MOVS     r1,#0x71              ;5462
000088  20ab              MOVS     r0,#0xab              ;5462
00008a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L155.142|
;;;5471   												UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_CURSOR4_Y,
;;;5472   												PIC_ID_INPUT_HENG,
;;;5473   												LCD_OPERATOR_MODE_DRAW);
;;;5474   				break;
;;;5475   
;;;5476   			default:
;;;5477   				break;	
;;;5478   		}
;;;5479   	}
;;;5480   
;;;5481   	
;;;5482   }
00008e  bd70              POP      {r4-r6,pc}
;;;5483   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterNum||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterNum PROC
;;;5348   // 进入开机密码登录密码输入
;;;5349   void DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterNum(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;5350   {
;;;5351   	uint8 value1, value2, value3, value4;
;;;5352   	uint16 password = ulBuff >> 8;
000002  f3c0210f          UBFX     r1,r0,#8,#16
;;;5353   	uint8 state = ulBuff & 0xFF;
000006  b2c3              UXTB     r3,r0
;;;5354   	
;;;5355   	CHECK_PARAM_OVER_SAME_RETURN(password, 10000);
000008  f2427010          MOV      r0,#0x2710
00000c  4281              CMP      r1,r0
00000e  d252              BCS      |L156.182|
;;;5356   
;;;5357   	value1 = (password / 1000) & 0xFF;
000010  f44f707a          MOV      r0,#0x3e8
000014  fbb1f2f0          UDIV     r2,r1,r0
000018  b2d2              UXTB     r2,r2
;;;5358   	value2 = ((password % 1000) / 100) & 0xFF;
00001a  fbb1f4f0          UDIV     r4,r1,r0
00001e  fb001414          MLS      r4,r0,r4,r1
000022  2064              MOVS     r0,#0x64
000024  fbb4f4f0          UDIV     r4,r4,r0
000028  b2e4              UXTB     r4,r4
;;;5359   	value3 = ((password % 100) / 10) & 0xFF;
00002a  fbb1f5f0          UDIV     r5,r1,r0
00002e  fb001515          MLS      r5,r0,r5,r1
000032  200a              MOVS     r0,#0xa
000034  fbb5f5f0          UDIV     r5,r5,r0
;;;5360   	value4 = (password % 10) & 0xFF;
000038  fbb1f6f0          UDIV     r6,r1,r0
00003c  fb001616          MLS      r6,r0,r6,r1
;;;5361   
;;;5362   	if (state)
000040  b1e3              CBZ      r3,|L156.124|
;;;5363   	{
;;;5364   		
;;;5365   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM1_X,
000042  2300              MOVS     r3,#0
000044  32c1              ADDS     r2,r2,#0xc1
000046  214c              MOVS     r1,#0x4c
000048  2064              MOVS     r0,#0x64
00004a  f7fffffe          BL       LCD_DrawBmpByID
;;;5366   										UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM1_Y,
;;;5367   										(PIC_ID_E)(PIC_ID_LOCK_OFF_0 + value1),
;;;5368   										LCD_OPERATOR_MODE_DRAW);
;;;5369   
;;;5370   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM2_X,
00004e  2300              MOVS     r3,#0
000050  f10402c1          ADD      r2,r4,#0xc1
000054  214c              MOVS     r1,#0x4c
000056  2086              MOVS     r0,#0x86
000058  f7fffffe          BL       LCD_DrawBmpByID
;;;5371   										UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM2_Y,
;;;5372   										(PIC_ID_E)(PIC_ID_LOCK_OFF_0 + value2),
;;;5373   										LCD_OPERATOR_MODE_DRAW);
;;;5374   
;;;5375   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM3_X,
00005c  2300              MOVS     r3,#0
00005e  f10502c1          ADD      r2,r5,#0xc1
000062  214c              MOVS     r1,#0x4c
000064  20a8              MOVS     r0,#0xa8
000066  f7fffffe          BL       LCD_DrawBmpByID
;;;5376   										UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM3_Y,
;;;5377   										(PIC_ID_E)(PIC_ID_LOCK_OFF_0 + value3),
;;;5378   										LCD_OPERATOR_MODE_DRAW);
;;;5379   
;;;5380   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM4_X,
00006a  f10602c1          ADD      r2,r6,#0xc1
00006e  e8bd4070          POP      {r4-r6,lr}
000072  2300              MOVS     r3,#0
000074  214c              MOVS     r1,#0x4c
000076  20ca              MOVS     r0,#0xca
000078  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L156.124|
;;;5381   										UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM4_Y,
;;;5382   										(PIC_ID_E)(PIC_ID_LOCK_OFF_0 + value4),
;;;5383   										LCD_OPERATOR_MODE_DRAW);
;;;5384   	}
;;;5385   	else
;;;5386   	{
;;;5387   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM1_X,
00007c  2300              MOVS     r3,#0
00007e  32b3              ADDS     r2,r2,#0xb3
000080  214c              MOVS     r1,#0x4c
000082  2064              MOVS     r0,#0x64
000084  f7fffffe          BL       LCD_DrawBmpByID
;;;5388   										UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM1_Y,
;;;5389   										(PIC_ID_E)(PIC_ID_INPUT_0 + value1),
;;;5390   										LCD_OPERATOR_MODE_DRAW);
;;;5391   
;;;5392   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM2_X,
000088  2300              MOVS     r3,#0
00008a  f10402b3          ADD      r2,r4,#0xb3
00008e  214c              MOVS     r1,#0x4c
000090  2086              MOVS     r0,#0x86
000092  f7fffffe          BL       LCD_DrawBmpByID
;;;5393   										UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM2_Y,
;;;5394   										(PIC_ID_E)(PIC_ID_INPUT_0 + value2),
;;;5395   										LCD_OPERATOR_MODE_DRAW);
;;;5396   
;;;5397   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM3_X,
000096  2300              MOVS     r3,#0
000098  f10502b3          ADD      r2,r5,#0xb3
00009c  214c              MOVS     r1,#0x4c
00009e  20a8              MOVS     r0,#0xa8
0000a0  f7fffffe          BL       LCD_DrawBmpByID
;;;5398   										UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM3_Y,
;;;5399   										(PIC_ID_E)(PIC_ID_INPUT_0 + value3),
;;;5400   										LCD_OPERATOR_MODE_DRAW);
;;;5401   
;;;5402   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM4_X,
0000a4  f10602b3          ADD      r2,r6,#0xb3
0000a8  e8bd4070          POP      {r4-r6,lr}
0000ac  2300              MOVS     r3,#0
0000ae  214c              MOVS     r1,#0x4c
0000b0  20ca              MOVS     r0,#0xca
0000b2  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L156.182|
;;;5403   										UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_NUM4_Y,
;;;5404   										(PIC_ID_E)(PIC_ID_INPUT_0 + value4),
;;;5405   										LCD_OPERATOR_MODE_DRAW);
;;;5406   	}
;;;5407   }
0000b6  bd70              POP      {r4-r6,pc}
;;;5408   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuPowerOnPasswordCountDown||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuPowerOnPasswordCountDown PROC
;;;5484   // 倒计时
;;;5485   void DISPLAY_DrawMenuPowerOnPasswordCountDown(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;5486   {
000004  4604              MOV      r4,r0
;;;5487   	uint8 value1 = 0, value2 = 0;
;;;5488   	
;;;5489   	CHECK_PARAM_OVER_RETURN(ulBuff, 99);
000006  2c63              CMP      r4,#0x63
000008  d838              BHI      |L157.124|
;;;5490   
;;;5491   	value1 = ulBuff/10;
00000a  200a              MOVS     r0,#0xa
00000c  fbb4f1f0          UDIV     r1,r4,r0
000010  b2cd              UXTB     r5,r1
;;;5492   	value2 = ulBuff%10;
000012  fbb4f1f0          UDIV     r1,r4,r0
000016  fb004611          MLS      r6,r0,r1,r4
;;;5493   
;;;5494   	// 背景色
;;;5495   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_DOWN_NUM10_X,
00001a  f44f7787          MOV      r7,#0x10e
00001e  2301              MOVS     r3,#1
000020  22d9              MOVS     r2,#0xd9
000022  2192              MOVS     r1,#0x92
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       LCD_DrawBmpByID
;;;5496   					UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_DOWN_NUM10_Y,
;;;5497   					PIC_ID_MENU_0,
;;;5498   					LCD_OPERATOR_MODE_BACKGROUND);
;;;5499   
;;;5500   	// 背景色
;;;5501   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_DOWN_NUM1_X,
00002a  f240181d          MOV      r8,#0x11d
00002e  2301              MOVS     r3,#1
000030  22d9              MOVS     r2,#0xd9
000032  2192              MOVS     r1,#0x92
000034  4640              MOV      r0,r8
000036  f7fffffe          BL       LCD_DrawBmpByID
;;;5502   					UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_DOWN_NUM1_Y,
;;;5503   					PIC_ID_MENU_0,
;;;5504   					LCD_OPERATOR_MODE_BACKGROUND);
;;;5505   	if (ulBuff)
;;;5506   	{
;;;5507   		// 显示图片
;;;5508   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_SEC_X,
00003a  f24012a5          MOV      r2,#0x1a5
00003e  f44f7096          MOV      r0,#0x12c
000042  b1ac              CBZ      r4,|L157.112|
000044  2300              MOVS     r3,#0
000046  2192              MOVS     r1,#0x92
000048  f7fffffe          BL       LCD_DrawBmpByID
;;;5509   						UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_SEC_Y,
;;;5510   						PIC_ID_SEC,
;;;5511   						LCD_OPERATOR_MODE_DRAW);
;;;5512   	
;;;5513   		// 显示图片
;;;5514   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_DOWN_NUM1_X,
00004c  2300              MOVS     r3,#0
00004e  f10602d9          ADD      r2,r6,#0xd9
000052  2192              MOVS     r1,#0x92
000054  4640              MOV      r0,r8
000056  f7fffffe          BL       LCD_DrawBmpByID
;;;5515   						UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_DOWN_NUM1_Y,
;;;5516   						(PIC_ID_E)(PIC_ID_MENU_0 + value2),
;;;5517   						LCD_OPERATOR_MODE_DRAW);
;;;5518   
;;;5519   		// 根据数值显示，显示十位
;;;5520   		CHECK_PARAM_LESS_RETURN(ulBuff, 10);
00005a  2c0a              CMP      r4,#0xa
00005c  d30e              BCC      |L157.124|
;;;5521   
;;;5522   		
;;;5523   		// 显示图片
;;;5524   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_DOWN_NUM10_X,
00005e  f10502d9          ADD      r2,r5,#0xd9
000062  4638              MOV      r0,r7
000064  e8bd41f0          POP      {r4-r8,lr}
000068  2300              MOVS     r3,#0
00006a  2192              MOVS     r1,#0x92
00006c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L157.112|
;;;5525   						UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_DOWN_NUM10_Y,
;;;5526   						(PIC_ID_E)(PIC_ID_MENU_0 + value1),
;;;5527   						LCD_OPERATOR_MODE_DRAW);
;;;5528   	}
;;;5529   	else
;;;5530   	{
;;;5531   		// 背景色
;;;5532   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_SEC_X,
000070  e8bd41f0          POP      {r4-r8,lr}
000074  2301              MOVS     r3,#1
000076  2192              MOVS     r1,#0x92
000078  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L157.124|
;;;5533   						UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_SEC_Y,
;;;5534   						PIC_ID_SEC,
;;;5535   						LCD_OPERATOR_MODE_BACKGROUND);
;;;5536   	}
;;;5537   }
00007c  e8bd81f0          POP      {r4-r8,pc}
;;;5538   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuPowerOnPasswordEnterTitle||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuPowerOnPasswordEnterTitle PROC
;;;5317   // 进入开机密码登录标题
;;;5318   void DISPLAY_DrawMenuPowerOnPasswordEnterTitle(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;5319   {
000002  d007              BEQ      |L158.20|
;;;5320   	switch (ulBuff)
000004  2801              CMP      r0,#1
000006  d10b              BNE      |L158.32|
;;;5321   	{
;;;5322   		case 0:
;;;5323   
;;;5324   			// 背景色
;;;5325   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_X,
;;;5326   								UI_ITEM_COODINATE_MENU_ADVANCED_PASSWORD_ENTER_TITLE_Y,
;;;5327   								PIC_ID_INPUT_PASSWORD,
;;;5328   								LCD_OPERATOR_MODE_BACKGROUND);
;;;5329   
;;;5330   			break;
;;;5331   
;;;5332   		case 1:
;;;5333   
;;;5334   			// 显示图片
;;;5335   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_TITLE_X,
000008  2300              MOVS     r3,#0
00000a  22be              MOVS     r2,#0xbe
00000c  212f              MOVS     r1,#0x2f
00000e  206a              MOVS     r0,#0x6a
000010  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L158.20|
000014  2301              MOVS     r3,#1                 ;5325
000016  22be              MOVS     r2,#0xbe              ;5325
000018  2173              MOVS     r1,#0x73              ;5325
00001a  206e              MOVS     r0,#0x6e              ;5325
00001c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L158.32|
;;;5336   											UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_ENTER_TITLE_Y,
;;;5337   											PIC_ID_INPUT_PASSWORD,
;;;5338   											LCD_OPERATOR_MODE_DRAW);	
;;;5339   
;;;5340   				
;;;5341   			break;
;;;5342   
;;;5343   		default:
;;;5344   			break;
;;;5345   	}
;;;5346   }
000020  4770              BX       lr
;;;5347   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuPowerOnPasswordLockIcon||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuPowerOnPasswordLockIcon PROC
;;;5282   // 开机密码锁连接图标
;;;5283   void DISPLAY_DrawMenuPowerOnPasswordLockIcon(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;5284   {
000002  4604              MOV      r4,r0
;;;5285   	// 显示图片
;;;5286   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_LOCK_TEXT_X,
000004  2300              MOVS     r3,#0
000006  22c0              MOVS     r2,#0xc0
000008  2182              MOVS     r1,#0x82
00000a  2037              MOVS     r0,#0x37
00000c  f7fffffe          BL       LCD_DrawBmpByID
;;;5287   									UI_ITEM_COODINATE_MENU_POWERON_PASSWORD_LOCK_TEXT_Y,
;;;5288   									PIC_ID_LOCK,
;;;5289   									LCD_OPERATOR_MODE_DRAW);
;;;5290   	switch (ulBuff)
000010  b14c              CBZ      r4,|L159.38|
000012  2c01              CMP      r4,#1
000014  d10f              BNE      |L159.54|
;;;5291   	{
;;;5292   		case 0:
;;;5293   
;;;5294   			// 未连接
;;;5295   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_LOCK_CONNECT_TITLE_X,
;;;5296   							UI_ITEM_COODINATE_MENU_POWERON_LOCK_CONNECT_TITLE_Y,
;;;5297   							PIC_ID_IC_LOCK_OFF,
;;;5298   							LCD_OPERATOR_MODE_DRAW);
;;;5299   
;;;5300   			break;
;;;5301   
;;;5302   		case 1:
;;;5303   
;;;5304   			// 已连接
;;;5305   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_POWERON_LOCK_CONNECT_TITLE_X,
000016  2300              MOVS     r3,#0
000018  22a5              MOVS     r2,#0xa5
00001a  2111              MOVS     r1,#0x11
00001c  e8bd4010          POP      {r4,lr}
000020  2093              MOVS     r0,#0x93
000022  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L159.38|
000026  2300              MOVS     r3,#0                 ;5295
000028  22a6              MOVS     r2,#0xa6              ;5295
00002a  2111              MOVS     r1,#0x11              ;5295
00002c  e8bd4010          POP      {r4,lr}               ;5295
000030  2093              MOVS     r0,#0x93              ;5295
000032  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L159.54|
;;;5306   							UI_ITEM_COODINATE_MENU_POWERON_LOCK_CONNECT_TITLE_Y,
;;;5307   							PIC_ID_IC_LOCK,
;;;5308   							LCD_OPERATOR_MODE_DRAW);	
;;;5309   			break;
;;;5310   
;;;5311   		default:
;;;5312   			break;
;;;5313   	}
;;;5314   }
000036  bd10              POP      {r4,pc}
;;;5315   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuSetDateDayBlink||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuSetDateDayBlink PROC
;;;9431   **********************************************************************/
;;;9432   void DISPLAY_DrawMenuSetDateDayBlink(uint32 param)
000000  4770              BX       lr
;;;9433   {
;;;9434   //	BOOL bDirection = (BOOL)param;
;;;9435   
;;;9436   //	if (bDirection)
;;;9437   //	{
;;;9438   //		DISPLAY_ResumeValue(DISPLAY_MENU_L4_DATE);
;;;9439   //	}
;;;9440   //	else
;;;9441   //	{
;;;9442   //		
;;;9443   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_DAY_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_DAY_10_Y, PIC_ID_SMALL_0, LCD_OPERATOR_MODE_BACKGROUND);
;;;9444   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_DAY_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_DAY_1_Y, PIC_ID_SMALL_0, LCD_OPERATOR_MODE_BACKGROUND);
;;;9445   //	}
;;;9446   	
;;;9447   }
;;;9448   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuSetDateMonthBlink||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuSetDateMonthBlink PROC
;;;9402   **********************************************************************/
;;;9403   void DISPLAY_DrawMenuSetDateMonthBlink(uint32 param)
000000  4770              BX       lr
;;;9404   {
;;;9405   //	BOOL bDirection = (BOOL)param;
;;;9406   
;;;9407   //	if (bDirection)
;;;9408   //	{
;;;9409   //		DISPLAY_ResumeValue(DISPLAY_MENU_L4_DATE);
;;;9410   //	}
;;;9411   //	else
;;;9412   //	{
;;;9413   //		
;;;9414   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_MONTH_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_MONTH_10_Y, PIC_ID_SMALL_0, LCD_OPERATOR_MODE_BACKGROUND);
;;;9415   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_MONTH_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_MONTH_1_Y, PIC_ID_SMALL_0, LCD_OPERATOR_MODE_BACKGROUND);
;;;9416   //	}	
;;;9417   }
;;;9418   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuSetDateYearBlink||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuSetDateYearBlink PROC
;;;9371   **********************************************************************/
;;;9372   void DISPLAY_DrawMenuSetDateYearBlink(uint32 param)
000000  4770              BX       lr
;;;9373   {
;;;9374   //	BOOL bDirection = (BOOL)param;
;;;9375   
;;;9376   //	if (bDirection)
;;;9377   //	{
;;;9378   //		DISPLAY_ResumeValue(DISPLAY_MENU_L4_DATE);
;;;9379   //	}
;;;9380   //	else
;;;9381   //	{
;;;9382   //		
;;;9383   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_1000_X, (uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_1000_Y, PIC_ID_SMALL_0, LCD_OPERATOR_MODE_BACKGROUND);
;;;9384   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_100_X, (uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_100_Y, PIC_ID_SMALL_0, LCD_OPERATOR_MODE_BACKGROUND);
;;;9385   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_10_Y, PIC_ID_SMALL_0, LCD_OPERATOR_MODE_BACKGROUND);
;;;9386   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_YEAR_1_Y, PIC_ID_SMALL_0, LCD_OPERATOR_MODE_BACKGROUND);
;;;9387   //	}
;;;9388   	
;;;9389   }
;;;9390   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuSetTime||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuSetTime PROC
;;;4668   
;;;4669   void DISPLAY_DrawMenuSetTime(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4670   {
;;;4671   	uint8 value1=0, value2=0, value3=0, value4=0;
;;;4672   	uint8 ucHour,ucMin;
;;;4673   
;;;4674   	// 取小时段数字，最大不超过23个小时
;;;4675   	ucHour = ((ulBuff & 0xFF00) >> 8);
000004  f3c02107          UBFX     r1,r0,#8,#8
;;;4676   	LIMIT_TO_MAX(ucHour,23);
000008  2917              CMP      r1,#0x17
00000a  d900              BLS      |L163.14|
00000c  2117              MOVS     r1,#0x17
                  |L163.14|
;;;4677   
;;;4678   	// 取分钟段数字，最大不超过59分钟
;;;4679   	ucMin  = ulBuff & 0xFF;
00000e  b2c0              UXTB     r0,r0
;;;4680   	LIMIT_TO_MAX(ucMin,59);
000010  283b              CMP      r0,#0x3b
000012  d900              BLS      |L163.22|
000014  203b              MOVS     r0,#0x3b
                  |L163.22|
;;;4681   
;;;4682   	// 提取小时数字位上的数字
;;;4683   	value1 = ucHour/10;
000016  230a              MOVS     r3,#0xa
000018  fbb1f4f3          UDIV     r4,r1,r3
;;;4684   	value2 = ucHour%10;
00001c  fbb1f2f3          UDIV     r2,r1,r3
000020  fb031512          MLS      r5,r3,r2,r1
;;;4685   
;;;4686   	// 提取分钟数字位上的数字
;;;4687   	value3 = ucMin/10;
000024  fbb0f6f3          UDIV     r6,r0,r3
;;;4688   	value4 = ucMin%10;
000028  fbb0f1f3          UDIV     r1,r0,r3
00002c  fb030711          MLS      r7,r3,r1,r0
;;;4689   
;;;4690   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_BG_X, UI_ITEM_COODINATE_MENU_DATA_BG_Y, PIC_ID_MENU_KUANG, LCD_OPERATOR_MODE_DRAW);
000030  2300              MOVS     r3,#0
000032  22eb              MOVS     r2,#0xeb
000034  2154              MOVS     r1,#0x54
000036  2080              MOVS     r0,#0x80
000038  f7fffffe          BL       LCD_DrawBmpByID
;;;4691   
;;;4692   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_DEC_X, UI_ITEM_COODINATE_MENU_DATA_DEC_Y, PIC_ID_MENU_DEC_ON, LCD_OPERATOR_MODE_DRAW);
;;;4693   	//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ADD_X, UI_ITEM_COODINATE_MENU_DATA_ADD_Y, PIC_ID_MENU_ADD_ON, LCD_OPERATOR_MODE_DRAW);
;;;4694   	
;;;4695   	// 显示小时十位
;;;4696   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_10_Y, (PIC_ID_E)(PIC_ID_MENU_0+value1), LCD_OPERATOR_MODE_DRAW);
00003c  2300              MOVS     r3,#0
00003e  f10402d9          ADD      r2,r4,#0xd9
000042  215c              MOVS     r1,#0x5c
000044  208c              MOVS     r0,#0x8c
000046  f7fffffe          BL       LCD_DrawBmpByID
;;;4697   
;;;4698   	// 显示小时个位
;;;4699   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_1_Y, (PIC_ID_E)(PIC_ID_MENU_0+value2), LCD_OPERATOR_MODE_DRAW);
00004a  2300              MOVS     r3,#0
00004c  f10502d9          ADD      r2,r5,#0xd9
000050  215c              MOVS     r1,#0x5c
000052  209b              MOVS     r0,#0x9b
000054  f7fffffe          BL       LCD_DrawBmpByID
;;;4700   
;;;4701   	// 显示冒号
;;;4702   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_COLON_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_COLON_Y, PIC_ID_TIME_DOT, LCD_OPERATOR_MODE_DRAW);
000058  2300              MOVS     r3,#0
00005a  f24012e7          MOV      r2,#0x1e7
00005e  215e              MOVS     r1,#0x5e
000060  20aa              MOVS     r0,#0xaa
000062  f7fffffe          BL       LCD_DrawBmpByID
;;;4703   
;;;4704   	// 显示分钟十位
;;;4705   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_10_Y, (PIC_ID_E)(PIC_ID_MENU_0+value3), LCD_OPERATOR_MODE_DRAW);
000066  2300              MOVS     r3,#0
000068  f10602d9          ADD      r2,r6,#0xd9
00006c  215c              MOVS     r1,#0x5c
00006e  20ae              MOVS     r0,#0xae
000070  f7fffffe          BL       LCD_DrawBmpByID
;;;4706   
;;;4707   	// 显示分钟个位
;;;4708   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_1_Y, (PIC_ID_E)(PIC_ID_MENU_0+value4), LCD_OPERATOR_MODE_DRAW);
000074  f10702d9          ADD      r2,r7,#0xd9
000078  e8bd41f0          POP      {r4-r8,lr}
00007c  2300              MOVS     r3,#0
00007e  215c              MOVS     r1,#0x5c
000080  20bd              MOVS     r0,#0xbd
000082  f7ffbffe          B.W      LCD_DrawBmpByID
;;;4709   		
;;;4710   }
;;;4711   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuSetTimeHourBlink||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuSetTimeHourBlink PROC
;;;9460   **********************************************************************/
;;;9461   void DISPLAY_DrawMenuSetTimeHourBlink(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;9462   {
;;;9463   	BOOL bDirection = (BOOL)param;
000002  b2c0              UXTB     r0,r0
;;;9464   
;;;9465   	if (bDirection)
000004  2800              CMP      r0,#0
000006  d004              BEQ      |L164.18|
;;;9466   	{
;;;9467   		DISPLAY_ResumeValue(DISPLAY_MENU_SET_TIME);
000008  e8bd4010          POP      {r4,lr}
00000c  2052              MOVS     r0,#0x52
00000e  f7ffbffe          B.W      DISPLAY_ResumeValue
                  |L164.18|
;;;9468   	}
;;;9469   	else
;;;9470   	{
;;;9471   		
;;;9472   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_10_Y, PIC_ID_MENU_0, LCD_OPERATOR_MODE_BACKGROUND);
000012  2301              MOVS     r3,#1
000014  22d9              MOVS     r2,#0xd9
000016  215c              MOVS     r1,#0x5c
000018  208c              MOVS     r0,#0x8c
00001a  f7fffffe          BL       LCD_DrawBmpByID
;;;9473   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_H_1_Y, PIC_ID_MENU_0, LCD_OPERATOR_MODE_BACKGROUND);
00001e  2301              MOVS     r3,#1
000020  22d9              MOVS     r2,#0xd9
000022  215c              MOVS     r1,#0x5c
000024  e8bd4010          POP      {r4,lr}
000028  209b              MOVS     r0,#0x9b
00002a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;9474   	}
;;;9475   	
;;;9476   }
;;;9477   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuSetTimeMinuteBlink||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuSetTimeMinuteBlink PROC
;;;9489   **********************************************************************/
;;;9490   void DISPLAY_DrawMenuSetTimeMinuteBlink(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;9491   {
;;;9492   	BOOL bDirection = (BOOL)param;
000002  b2c0              UXTB     r0,r0
;;;9493   
;;;9494   	if (bDirection)
000004  2800              CMP      r0,#0
000006  d004              BEQ      |L165.18|
;;;9495   	{
;;;9496   	
;;;9497   		DISPLAY_ResumeValue(DISPLAY_MENU_SET_TIME);
000008  e8bd4010          POP      {r4,lr}
00000c  2052              MOVS     r0,#0x52
00000e  f7ffbffe          B.W      DISPLAY_ResumeValue
                  |L165.18|
;;;9498   
;;;9499   	}
;;;9500   	else
;;;9501   	{		
;;;9502   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_10_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_10_Y, PIC_ID_MENU_0, LCD_OPERATOR_MODE_BACKGROUND);
000012  2301              MOVS     r3,#1
000014  22d9              MOVS     r2,#0xd9
000016  215c              MOVS     r1,#0x5c
000018  20ae              MOVS     r0,#0xae
00001a  f7fffffe          BL       LCD_DrawBmpByID
;;;9503   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_1_X, (uint16)UI_ITEM_COODINATE_MENU_L4_TIME_M_1_Y, PIC_ID_MENU_0, LCD_OPERATOR_MODE_BACKGROUND);
00001e  2301              MOVS     r3,#1
000020  22d9              MOVS     r2,#0xd9
000022  215c              MOVS     r1,#0x5c
000024  e8bd4010          POP      {r4,lr}
000028  20bd              MOVS     r0,#0xbd
00002a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;9504   	}
;;;9505   
;;;9506   }
;;;9507   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuSpeedLimit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuSpeedLimit PROC
;;;4351   
;;;4352   void DISPLAY_DrawMenuSpeedLimit(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4353   {
000004  4604              MOV      r4,r0
;;;4354   	uint8 uwUnit = (uint8)((ulBuff >> 8) & 0xFF);
000006  f3c42707          UBFX     r7,r4,#8,#8
;;;4355   	uint8 uwSpeedLimit = (uint8)(ulBuff & 0xFF);
00000a  b2e1              UXTB     r1,r4
;;;4356   	uint8 value1 = 0, value2 = 0;
;;;4357   	
;;;4358   	CHECK_PARAM_OVER_RETURN(uwSpeedLimit, 99);
00000c  2963              CMP      r1,#0x63
00000e  d838              BHI      |L166.130|
;;;4359   	value1 = uwSpeedLimit / 10;
000010  200a              MOVS     r0,#0xa
000012  fbb1f6f0          UDIV     r6,r1,r0
;;;4360   	value2 = uwSpeedLimit % 10;
000016  fbb1f2f0          UDIV     r2,r1,r0
00001a  fb001512          MLS      r5,r0,r2,r1
;;;4361   
;;;4362   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_BG_X, UI_ITEM_COODINATE_MENU_DATA_BG_Y, PIC_ID_MENU_KUANG, LCD_OPERATOR_MODE_DRAW);
00001e  2300              MOVS     r3,#0
000020  22eb              MOVS     r2,#0xeb
000022  2154              MOVS     r1,#0x54
000024  2080              MOVS     r0,#0x80
000026  f7fffffe          BL       LCD_DrawBmpByID
;;;4363   
;;;4364   	// 单位显示
;;;4365   	if (1 == uwUnit)
00002a  2f01              CMP      r7,#1
00002c  d011              BEQ      |L166.82|
;;;4366   	{
;;;4367   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SPEED_LIMIT_UNIT_X, UI_ITEM_COODINATE_MENU_SPEED_LIMIT_UNIT_Y, PIC_ID_RECORD_MPH, LCD_OPERATOR_MODE_DRAW);
;;;4368   	}
;;;4369   	else
;;;4370   	{
;;;4371   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SPEED_LIMIT_UNIT_X, UI_ITEM_COODINATE_MENU_SPEED_LIMIT_UNIT_Y, PIC_ID_RECORD_KMH, LCD_OPERATOR_MODE_DRAW);
00002e  2300              MOVS     r3,#0
000030  f44f72c1          MOV      r2,#0x182
000034  2160              MOVS     r1,#0x60
000036  20af              MOVS     r0,#0xaf
000038  f7fffffe          BL       LCD_DrawBmpByID
                  |L166.60|
;;;4372   	}
;;;4373   
;;;4374   	// 限速显示
;;;4375   	if (ulBuff < 10)
00003c  2c0a              CMP      r4,#0xa
00003e  d210              BCS      |L166.98|
;;;4376   	{
;;;4377   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SPEED_LIMIT_ONE_X, UI_ITEM_COODINATE_MENU_SPEED_LIMIT_ONE_Y, (PIC_ID_E)(value2 + PIC_ID_MENU_0), LCD_OPERATOR_MODE_DRAW);
000040  f10502d9          ADD      r2,r5,#0xd9
000044  e8bd41f0          POP      {r4-r8,lr}
000048  2300              MOVS     r3,#0
00004a  215c              MOVS     r1,#0x5c
00004c  209b              MOVS     r0,#0x9b
00004e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L166.82|
000052  2300              MOVS     r3,#0                 ;4367
000054  f2401285          MOV      r2,#0x185             ;4367
000058  2160              MOVS     r1,#0x60              ;4367
00005a  20af              MOVS     r0,#0xaf              ;4367
00005c  f7fffffe          BL       LCD_DrawBmpByID
000060  e7ec              B        |L166.60|
                  |L166.98|
;;;4378   			
;;;4379   	}
;;;4380   	else
;;;4381   	{
;;;4382   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SPEED_LIMIT_1_X, UI_ITEM_COODINATE_MENU_SPEED_LIMIT_1_Y, (PIC_ID_E)(value1 + PIC_ID_MENU_0), LCD_OPERATOR_MODE_DRAW);
000062  2300              MOVS     r3,#0
000064  f10602d9          ADD      r2,r6,#0xd9
000068  215c              MOVS     r1,#0x5c
00006a  208e              MOVS     r0,#0x8e
00006c  f7fffffe          BL       LCD_DrawBmpByID
;;;4383   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SPEED_LIMIT_2_X, UI_ITEM_COODINATE_MENU_SPEED_LIMIT_2_Y, (PIC_ID_E)(value2 + PIC_ID_MENU_0), LCD_OPERATOR_MODE_DRAW);
000070  f10502d9          ADD      r2,r5,#0xd9
000074  e8bd41f0          POP      {r4-r8,lr}
000078  2300              MOVS     r3,#0
00007a  215c              MOVS     r1,#0x5c
00007c  209c              MOVS     r0,#0x9c
00007e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L166.130|
;;;4384   		
;;;4385   	}
;;;4386   }
000082  e8bd81f0          POP      {r4-r8,pc}
;;;4387   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuSystemInfo||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawMenuSystemInfo PROC
;;;4567   // 版本信息
;;;4568   void DISPLAY_DrawMenuSystemInfo(uint32 ulBuff)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4569   {
;;;4570   	uint8 v1, v2, v3, v4, v5, v6;
;;;4571   	uint32 version = (ulBuff%0x00FFFFFF)%1000000;
000004  f06f417f          MVN      r1,#0xff000000
000008  fbb0f2f1          UDIV     r2,r0,r1
00000c  fb010012          MLS      r0,r1,r2,r0
000010  4990              LDR      r1,|L167.596|
000012  fbb0f2f1          UDIV     r2,r0,r1
000016  fb010012          MLS      r0,r1,r2,r0
;;;4572   
;;;4573   	v1 = version/100000;
00001a  498f              LDR      r1,|L167.600|
00001c  fbb0f2f1          UDIV     r2,r0,r1
000020  f00208ff          AND      r8,r2,#0xff
;;;4574   	version %= 100000;
000024  fbb0f2f1          UDIV     r2,r0,r1
000028  fb010012          MLS      r0,r1,r2,r0
;;;4575   	
;;;4576   	v2 = version/10000;
00002c  f2427110          MOV      r1,#0x2710
000030  fbb0f2f1          UDIV     r2,r0,r1
000034  f00209ff          AND      r9,r2,#0xff
;;;4577   	version %= 10000;
000038  fbb0f2f1          UDIV     r2,r0,r1
00003c  fb010012          MLS      r0,r1,r2,r0
;;;4578   
;;;4579   	v3 = version/1000;
000040  f44f717a          MOV      r1,#0x3e8
000044  fbb0f2f1          UDIV     r2,r0,r1
000048  b2d6              UXTB     r6,r2
;;;4580   	version %= 1000;
00004a  fbb0f2f1          UDIV     r2,r0,r1
00004e  fb010012          MLS      r0,r1,r2,r0
;;;4581   
;;;4582   	v4 = version/100;
000052  2164              MOVS     r1,#0x64
000054  fbb0f2f1          UDIV     r2,r0,r1
000058  b2d7              UXTB     r7,r2
;;;4583   	version %= 100;
00005a  fbb0f2f1          UDIV     r2,r0,r1
00005e  fb010012          MLS      r0,r1,r2,r0
;;;4584   
;;;4585   	v5 = version/10;
000062  210a              MOVS     r1,#0xa
000064  fbb0f2f1          UDIV     r2,r0,r1
000068  b2d4              UXTB     r4,r2
;;;4586   	v6 = version%10;
00006a  fbb0f2f1          UDIV     r2,r0,r1
00006e  fb010512          MLS      r5,r1,r2,r0
;;;4587   
;;;4588   	// 选中，显示图片
;;;4589   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SYSTEM_INFO_TITILE_1_X, UI_ITEM_COODINATE_MENU_SYSTEM_INFO_TITILE_1_Y, PIC_ID_SYSTEM_INFO_TITILE, LCD_OPERATOR_MODE_DRAW);	
000072  2300              MOVS     r3,#0
000074  f24012db          MOV      r2,#0x1db
000078  2131              MOVS     r1,#0x31
00007a  205c              MOVS     r0,#0x5c
00007c  f7fffffe          BL       LCD_DrawBmpByID
;;;4590   	
;;;4591   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SYSTEM_INFO_TITILE_2_X, UI_ITEM_COODINATE_MENU_SYSTEM_INFO_TITILE_2_Y, PIC_ID_SYSTEM_INFO_ICON, LCD_OPERATOR_MODE_DRAW);
000080  2300              MOVS     r3,#0
000082  f44f72ed          MOV      r2,#0x1da
000086  2149              MOVS     r1,#0x49
000088  2097              MOVS     r0,#0x97
00008a  f7fffffe          BL       LCD_DrawBmpByID
;;;4592   
;;;4593   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_SYSTEM_INFO_TITILE_3_X, UI_ITEM_COODINATE_MENU_SYSTEM_INFO_TITILE_3_Y, PIC_ID_HMI_VERSION_TITILE, LCD_OPERATOR_MODE_DRAW);
00008e  2300              MOVS     r3,#0
000090  22a4              MOVS     r2,#0xa4
000092  217d              MOVS     r1,#0x7d
000094  2069              MOVS     r0,#0x69
000096  f7fffffe          BL       LCD_DrawBmpByID
;;;4594   	
;;;4595   	// 显示版本号格式:99.99.99
;;;4596   	if(0 == v1)
;;;4597   	{
;;;4598   		LCD_DrawBmpByID(205, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v2), LCD_OPERATOR_MODE_DRAW);
;;;4599   		LCD_DrawBmpByID(217, 136, (PIC_ID_E)(PIC_ID_SYSTEM_DOR), LCD_OPERATOR_MODE_DRAW);
00009a  f44f7aeb          MOV      r10,#0x1d6
00009e  f1b80f00          CMP      r8,#0                 ;4596
0000a2  d03f              BEQ      |L167.292|
;;;4600   		if(0 == v3)
;;;4601   		{
;;;4602   			LCD_DrawBmpByID(222, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v4), LCD_OPERATOR_MODE_DRAW);
;;;4603   			LCD_DrawBmpByID(234, 136, (PIC_ID_E)(PIC_ID_SYSTEM_DOR), LCD_OPERATOR_MODE_DRAW);
;;;4604   			if(0 == v5)
;;;4605   			{
;;;4606   				LCD_DrawBmpByID(240, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;4607   			}
;;;4608   			else
;;;4609   			{
;;;4610   				LCD_DrawBmpByID(240, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v5), LCD_OPERATOR_MODE_DRAW);
;;;4611   				LCD_DrawBmpByID(252, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;4612   			}
;;;4613   		}
;;;4614   		else
;;;4615   		{
;;;4616   			LCD_DrawBmpByID(222, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v3), LCD_OPERATOR_MODE_DRAW);
;;;4617   			LCD_DrawBmpByID(234, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v4), LCD_OPERATOR_MODE_DRAW);
;;;4618   			LCD_DrawBmpByID(246, 136, (PIC_ID_E)(PIC_ID_SYSTEM_DOR), LCD_OPERATOR_MODE_DRAW);
;;;4619   			if(0 == v5)
;;;4620   			{
;;;4621   				LCD_DrawBmpByID(252, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;4622   			}
;;;4623   			else
;;;4624   			{
;;;4625   				LCD_DrawBmpByID(252, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v5), LCD_OPERATOR_MODE_DRAW);
;;;4626   				LCD_DrawBmpByID(264, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;4627   			}
;;;4628   
;;;4629   		}
;;;4630   	}
;;;4631   	else
;;;4632   	{
;;;4633   		LCD_DrawBmpByID(205, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v1), LCD_OPERATOR_MODE_DRAW);
0000a4  2300              MOVS     r3,#0
0000a6  f50872e6          ADD      r2,r8,#0x1cc
0000aa  217c              MOVS     r1,#0x7c
0000ac  20cd              MOVS     r0,#0xcd
0000ae  f7fffffe          BL       LCD_DrawBmpByID
;;;4634   		LCD_DrawBmpByID(217, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v2), LCD_OPERATOR_MODE_DRAW);
0000b2  2300              MOVS     r3,#0
0000b4  f50972e6          ADD      r2,r9,#0x1cc
0000b8  217c              MOVS     r1,#0x7c
0000ba  20d9              MOVS     r0,#0xd9
0000bc  f7fffffe          BL       LCD_DrawBmpByID
;;;4635   		LCD_DrawBmpByID(229, 136, (PIC_ID_E)(PIC_ID_SYSTEM_DOR), LCD_OPERATOR_MODE_DRAW);
0000c0  2300              MOVS     r3,#0
0000c2  4652              MOV      r2,r10
0000c4  2188              MOVS     r1,#0x88
0000c6  20e5              MOVS     r0,#0xe5
0000c8  f7fffffe          BL       LCD_DrawBmpByID
;;;4636   		if(0 == v3)
;;;4637   		{
;;;4638   			LCD_DrawBmpByID(234, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v4), LCD_OPERATOR_MODE_DRAW);
;;;4639   			LCD_DrawBmpByID(246, 136, (PIC_ID_E)(PIC_ID_SYSTEM_DOR), LCD_OPERATOR_MODE_DRAW);
;;;4640   			if(0 == v5)
;;;4641   			{
;;;4642   				LCD_DrawBmpByID(251, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;4643   			}
;;;4644   			else
;;;4645   			{
;;;4646   				LCD_DrawBmpByID(251, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v5), LCD_OPERATOR_MODE_DRAW);
;;;4647   				LCD_DrawBmpByID(263, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v6), LCD_OPERATOR_MODE_DRAW);
0000cc  f2401807          MOV      r8,#0x107
0000d0  2e00              CMP      r6,#0                 ;4636
0000d2  d07d              BEQ      |L167.464|
;;;4648   			}
;;;4649   
;;;4650   		}
;;;4651   		else
;;;4652   		{
;;;4653   			LCD_DrawBmpByID(234, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v3), LCD_OPERATOR_MODE_DRAW);
0000d4  2300              MOVS     r3,#0
0000d6  f50672e6          ADD      r2,r6,#0x1cc
0000da  217c              MOVS     r1,#0x7c
0000dc  20ea              MOVS     r0,#0xea
0000de  f7fffffe          BL       LCD_DrawBmpByID
;;;4654   			LCD_DrawBmpByID(246, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v4), LCD_OPERATOR_MODE_DRAW);
0000e2  2300              MOVS     r3,#0
0000e4  f50772e6          ADD      r2,r7,#0x1cc
0000e8  217c              MOVS     r1,#0x7c
0000ea  20f6              MOVS     r0,#0xf6
0000ec  f7fffffe          BL       LCD_DrawBmpByID
;;;4655   			LCD_DrawBmpByID(258, 136, (PIC_ID_E)(PIC_ID_SYSTEM_DOR), LCD_OPERATOR_MODE_DRAW);
0000f0  2300              MOVS     r3,#0
0000f2  4652              MOV      r2,r10
0000f4  2188              MOVS     r1,#0x88
0000f6  f44f7081          MOV      r0,#0x102
0000fa  f7fffffe          BL       LCD_DrawBmpByID
;;;4656   			if(0 == v5)
0000fe  2c00              CMP      r4,#0
000100  d068              BEQ      |L167.468|
;;;4657   			{
;;;4658   				LCD_DrawBmpByID(263, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v6), LCD_OPERATOR_MODE_DRAW);
;;;4659   			}
;;;4660   			else
;;;4661   			{
;;;4662   				LCD_DrawBmpByID(263, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v5), LCD_OPERATOR_MODE_DRAW);
000102  2300              MOVS     r3,#0
000104  f50472e6          ADD      r2,r4,#0x1cc
000108  217c              MOVS     r1,#0x7c
00010a  4640              MOV      r0,r8
00010c  f7fffffe          BL       LCD_DrawBmpByID
;;;4663   				LCD_DrawBmpByID(275, 124, (PIC_ID_E)(PIC_ID_SYSTEM_0+v6), LCD_OPERATOR_MODE_DRAW);
000110  f50572e6          ADD      r2,r5,#0x1cc
000114  e8bd47f0          POP      {r4-r10,lr}
000118  2300              MOVS     r3,#0
00011a  217c              MOVS     r1,#0x7c
00011c  f2401013          MOV      r0,#0x113
000120  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L167.292|
000124  2300              MOVS     r3,#0                 ;4598
000126  f50972e6          ADD      r2,r9,#0x1cc          ;4598
00012a  217c              MOVS     r1,#0x7c              ;4598
00012c  20cd              MOVS     r0,#0xcd              ;4598
00012e  f7fffffe          BL       LCD_DrawBmpByID
000132  2300              MOVS     r3,#0                 ;4599
000134  4652              MOV      r2,r10                ;4599
000136  2188              MOVS     r1,#0x88              ;4599
000138  20d9              MOVS     r0,#0xd9              ;4599
00013a  f7fffffe          BL       LCD_DrawBmpByID
00013e  b32e              CBZ      r6,|L167.396|
000140  2300              MOVS     r3,#0                 ;4616
000142  f50672e6          ADD      r2,r6,#0x1cc          ;4616
000146  217c              MOVS     r1,#0x7c              ;4616
000148  20de              MOVS     r0,#0xde              ;4616
00014a  f7fffffe          BL       LCD_DrawBmpByID
00014e  2300              MOVS     r3,#0                 ;4617
000150  f50772e6          ADD      r2,r7,#0x1cc          ;4617
000154  217c              MOVS     r1,#0x7c              ;4617
000156  20ea              MOVS     r0,#0xea              ;4617
000158  f7fffffe          BL       LCD_DrawBmpByID
00015c  2300              MOVS     r3,#0                 ;4618
00015e  4652              MOV      r2,r10                ;4618
000160  2188              MOVS     r1,#0x88              ;4618
000162  20f6              MOVS     r0,#0xf6              ;4618
000164  f7fffffe          BL       LCD_DrawBmpByID
000168  b39c              CBZ      r4,|L167.466|
00016a  2300              MOVS     r3,#0                 ;4625
00016c  f50472e6          ADD      r2,r4,#0x1cc          ;4625
000170  217c              MOVS     r1,#0x7c              ;4625
000172  20fc              MOVS     r0,#0xfc              ;4625
000174  f7fffffe          BL       LCD_DrawBmpByID
000178  f50572e6          ADD      r2,r5,#0x1cc          ;4626
00017c  e8bd47f0          POP      {r4-r10,lr}           ;4626
000180  2300              MOVS     r3,#0                 ;4626
000182  217c              MOVS     r1,#0x7c              ;4626
000184  f44f7084          MOV      r0,#0x108             ;4626
000188  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L167.396|
00018c  2300              MOVS     r3,#0                 ;4602
00018e  f50772e6          ADD      r2,r7,#0x1cc          ;4602
000192  217c              MOVS     r1,#0x7c              ;4602
000194  20de              MOVS     r0,#0xde              ;4602
000196  f7fffffe          BL       LCD_DrawBmpByID
00019a  2300              MOVS     r3,#0                 ;4603
00019c  4652              MOV      r2,r10                ;4603
00019e  2188              MOVS     r1,#0x88              ;4603
0001a0  20ea              MOVS     r0,#0xea              ;4603
0001a2  f7fffffe          BL       LCD_DrawBmpByID
0001a6  b17c              CBZ      r4,|L167.456|
0001a8  2300              MOVS     r3,#0                 ;4610
0001aa  f50472e6          ADD      r2,r4,#0x1cc          ;4610
0001ae  217c              MOVS     r1,#0x7c              ;4610
0001b0  20f0              MOVS     r0,#0xf0              ;4610
0001b2  f7fffffe          BL       LCD_DrawBmpByID
0001b6  f50572e6          ADD      r2,r5,#0x1cc          ;4611
0001ba  e8bd47f0          POP      {r4-r10,lr}           ;4611
0001be  2300              MOVS     r3,#0                 ;4611
0001c0  217c              MOVS     r1,#0x7c              ;4611
0001c2  20fc              MOVS     r0,#0xfc              ;4611
0001c4  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L167.456|
0001c8  2300              MOVS     r3,#0                 ;4606
0001ca  f50572e6          ADD      r2,r5,#0x1cc          ;4606
0001ce  e002              B        |L167.470|
                  |L167.464|
0001d0  e010              B        |L167.500|
                  |L167.466|
0001d2  e006              B        |L167.482|
                  |L167.468|
0001d4  e035              B        |L167.578|
                  |L167.470|
0001d6  e8bd47f0          POP      {r4-r10,lr}           ;4606
0001da  217c              MOVS     r1,#0x7c              ;4606
0001dc  20f0              MOVS     r0,#0xf0              ;4606
0001de  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L167.482|
0001e2  f50572e6          ADD      r2,r5,#0x1cc          ;4621
0001e6  e8bd47f0          POP      {r4-r10,lr}           ;4621
0001ea  2300              MOVS     r3,#0                 ;4621
0001ec  217c              MOVS     r1,#0x7c              ;4621
0001ee  20fc              MOVS     r0,#0xfc              ;4621
0001f0  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L167.500|
0001f4  2300              MOVS     r3,#0                 ;4638
0001f6  f50772e6          ADD      r2,r7,#0x1cc          ;4638
0001fa  217c              MOVS     r1,#0x7c              ;4638
0001fc  20ea              MOVS     r0,#0xea              ;4638
0001fe  f7fffffe          BL       LCD_DrawBmpByID
000202  2300              MOVS     r3,#0                 ;4639
000204  4652              MOV      r2,r10                ;4639
000206  2188              MOVS     r1,#0x88              ;4639
000208  20f6              MOVS     r0,#0xf6              ;4639
00020a  f7fffffe          BL       LCD_DrawBmpByID
00020e  b17c              CBZ      r4,|L167.560|
000210  2300              MOVS     r3,#0                 ;4646
000212  f50472e6          ADD      r2,r4,#0x1cc          ;4646
000216  217c              MOVS     r1,#0x7c              ;4646
000218  20fb              MOVS     r0,#0xfb              ;4646
00021a  f7fffffe          BL       LCD_DrawBmpByID
00021e  f50572e6          ADD      r2,r5,#0x1cc          ;4647
000222  4640              MOV      r0,r8                 ;4647
000224  e8bd47f0          POP      {r4-r10,lr}           ;4647
000228  2300              MOVS     r3,#0                 ;4647
00022a  217c              MOVS     r1,#0x7c              ;4647
00022c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L167.560|
000230  f50572e6          ADD      r2,r5,#0x1cc          ;4642
000234  e8bd47f0          POP      {r4-r10,lr}           ;4642
000238  2300              MOVS     r3,#0                 ;4642
00023a  217c              MOVS     r1,#0x7c              ;4642
00023c  20fb              MOVS     r0,#0xfb              ;4642
00023e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L167.578|
000242  f50572e6          ADD      r2,r5,#0x1cc          ;4658
000246  4640              MOV      r0,r8                 ;4658
000248  e8bd47f0          POP      {r4-r10,lr}           ;4658
00024c  2300              MOVS     r3,#0                 ;4658
00024e  217c              MOVS     r1,#0x7c              ;4658
000250  f7ffbffe          B.W      LCD_DrawBmpByID
;;;4664   			}
;;;4665   		}
;;;4666   	}
;;;4667   }
;;;4668   
                          ENDP

                  |L167.596|
                          DCD      0x000f4240
                  |L167.600|
                          DCD      0x000186a0

                          AREA ||i.DISPLAY_DrawMenuTitle1||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuTitle1 PROC
;;;3671   **********************************************************************/
;;;3672   void DISPLAY_DrawMenuTitle1(uint32 ulBuff)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;3673   {
000004  4604              MOV      r4,r0
;;;3674   
;;;3675   	if (MENU_ID_ROOT_CLEAR_DATA == ulBuff)
;;;3676   	{
;;;3677   		// 指示符
;;;3678   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_UP_CURSIE_X, UI_ITEM_COODINATE_MENU_UP_CURSIE_Y, PIC_ID_SANJIAO_2, LCD_OPERATOR_MODE_BACKGROUND);
000006  f24012a3          MOV      r2,#0x1a3
;;;3679   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DOWN_CURSIE_X, UI_ITEM_COODINATE_MENU_DOWN_CURSIE_Y, PIC_ID_SANJIAO, LCD_OPERATOR_MODE_DRAW);
00000a  1e55              SUBS     r5,r2,#1
00000c  2c00              CMP      r4,#0                 ;3675
00000e  d035              BEQ      |L168.124|
;;;3680   
;;;3681   	}
;;;3682   	else if ( MENU_ID_ROOT_BACK == ulBuff)
000010  2c0a              CMP      r4,#0xa
000012  d03f              BEQ      |L168.148|
;;;3683   	{
;;;3684   		// 指示符
;;;3685   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_UP_CURSIE_X, UI_ITEM_COODINATE_MENU_UP_CURSIE_Y, PIC_ID_SANJIAO_2, LCD_OPERATOR_MODE_DRAW);
;;;3686   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DOWN_CURSIE_X, UI_ITEM_COODINATE_MENU_DOWN_CURSIE_Y, PIC_ID_SANJIAO, LCD_OPERATOR_MODE_BACKGROUND);
;;;3687   
;;;3688   	}
;;;3689   	else
;;;3690   	{
;;;3691   		// 指示符
;;;3692   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_UP_CURSIE_X, UI_ITEM_COODINATE_MENU_UP_CURSIE_Y, PIC_ID_SANJIAO_2, LCD_OPERATOR_MODE_DRAW);
000014  2300              MOVS     r3,#0
000016  211d              MOVS     r1,#0x1d
000018  2013              MOVS     r0,#0x13
00001a  f7fffffe          BL       LCD_DrawBmpByID
;;;3693   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DOWN_CURSIE_X, UI_ITEM_COODINATE_MENU_DOWN_CURSIE_Y, PIC_ID_SANJIAO, LCD_OPERATOR_MODE_DRAW);
00001e  2300              MOVS     r3,#0
000020  462a              MOV      r2,r5
000022  219c              MOVS     r1,#0x9c
000024  2013              MOVS     r0,#0x13
000026  f7fffffe          BL       LCD_DrawBmpByID
                  |L168.42|
;;;3694   
;;;3695   	}
;;;3696   
;;;3697   	// 背景色
;;;3698   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);	
00002a  2301              MOVS     r3,#1
00002c  2272              MOVS     r2,#0x72
00002e  212b              MOVS     r1,#0x2b
000030  200a              MOVS     r0,#0xa
000032  f7fffffe          BL       LCD_DrawBmpByID
;;;3699   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);
000036  2301              MOVS     r3,#1
000038  2272              MOVS     r2,#0x72
00003a  2151              MOVS     r1,#0x51
00003c  200a              MOVS     r0,#0xa
00003e  f7fffffe          BL       LCD_DrawBmpByID
;;;3700   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);
000042  2301              MOVS     r3,#1
000044  2272              MOVS     r2,#0x72
000046  2177              MOVS     r1,#0x77
000048  200a              MOVS     r0,#0xa
00004a  f7fffffe          BL       LCD_DrawBmpByID
;;;3701   	switch ((MENU_ID_E)ulBuff)
00004e  b2e1              UXTB     r1,r4
;;;3702   	{
;;;3703   		case MENU_ID_ROOT_CLEAR_DATA:
;;;3704   			
;;;3705   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
000050  f64100e4          MOV      r0,#0x18e4
;;;3706   			
;;;3707   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_DRAW);	
;;;3708   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_DISPLAY_UNIT_2, LCD_OPERATOR_MODE_DRAW);
;;;3709   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACKLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;3710   
;;;3711   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_PRESS_X, UI_ITEM_COODINATE_MENU_CLEAR_PRESS_Y, PIC_ID_M_CLEAR_PRESS, LCD_OPERATOR_MODE_DRAW);
;;;3712   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_CLEAR_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3713   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_X, UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_Y, PIC_ID_M_CLEAR_IT_WILL, LCD_OPERATOR_MODE_DRAW);
;;;3714   
;;;3715   			break;
;;;3716   
;;;3717   		case MENU_ID_ROOT_DISPLAY_UNIT:
;;;3718   			
;;;3719   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3720   
;;;3721   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_CLEAR_2, LCD_OPERATOR_MODE_DRAW);	
;;;3722   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_DISPLAY_UNIT, LCD_OPERATOR_MODE_DRAW);
;;;3723   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACKLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;3724   
;;;3725   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_X, UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_Y, PIC_ID_M_PRESS_SAVE, LCD_OPERATOR_MODE_DRAW);
;;;3726   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_DISPLAY_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3727   			break;
;;;3728   
;;;3729   		case MENU_ID_ROOT_BACKLIGHT:
;;;3730   			
;;;3731   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3732   
;;;3733   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_CLEAR_2, LCD_OPERATOR_MODE_DRAW);	
;;;3734   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_DISPLAY_UNIT_2, LCD_OPERATOR_MODE_DRAW);
;;;3735   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_BACKLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;3736   
;;;3737   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_BACKLIGHT_3, LCD_OPERATOR_MODE_DRAW);
;;;3738   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_BACKLIGHT_BRIGHTNESS_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3739   			break;
;;;3740   
;;;3741   		case MENU_ID_ROOT_POWEROFF_TIME:
;;;3742   			
;;;3743   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3744   			
;;;3745   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_TIME_OFF, LCD_OPERATOR_MODE_DRAW);	
;;;3746   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_AUTOLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;3747   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SPEED_LIMIT_2, LCD_OPERATOR_MODE_DRAW);
000054  f24014c9          MOV      r4,#0x1c9
;;;3748   
;;;3749   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_TIME_OFF_3, LCD_OPERATOR_MODE_DRAW);
;;;3750   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_POWER_OFF_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3751   			break;
;;;3752   
;;;3753   		case MENU_ID_ROOT_AUTO_LIGHT:
;;;3754   			
;;;3755   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3756   			
;;;3757   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_TIME_OFF_2, LCD_OPERATOR_MODE_DRAW);	
000058  f24018e9          MOV      r8,#0x1e9
;;;3758   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_AUTOLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;3759   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SPEED_LIMIT_2, LCD_OPERATOR_MODE_DRAW);
;;;3760   
;;;3761   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_AUTOLIGHT_3, LCD_OPERATOR_MODE_DRAW);
;;;3762   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME2_X, UI_ITEM_COODINATE_MENU_DATA_NAME2_Y, PIC_ID_AUTO_HEADLIGHT_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3763   			break;
;;;3764   
;;;3765   		case MENU_ID_ROOT_SPEED_LIMIT:
;;;3766   
;;;3767   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3768   			
;;;3769   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_TIME_OFF_2, LCD_OPERATOR_MODE_DRAW);	
;;;3770   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_AUTOLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;3771   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_SPEED_LIMIT, LCD_OPERATOR_MODE_DRAW);
;;;3772   
;;;3773   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_SPEED_LIMIT_3, LCD_OPERATOR_MODE_DRAW);
;;;3774   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME2_X, UI_ITEM_COODINATE_MENU_DATA_NAME2_Y, PIC_ID_SPEED_LIMIT_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3775   			
;;;3776   		  break;
;;;3777   
;;;3778   		case MENU_ID_ROOT_USER_PASSWORD:
;;;3779   
;;;3780   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3781   			
;;;3782   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_USER_PASSWORD, LCD_OPERATOR_MODE_DRAW);	
;;;3783   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SYSTEM_INFO_2, LCD_OPERATOR_MODE_DRAW);
00005c  f44f75ec          MOV      r5,#0x1d8
;;;3784   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
000060  f24016a7          MOV      r6,#0x1a7
;;;3785   
;;;3786   			break;
;;;3787   
;;;3788   		case MENU_ID_ROOT_SYSTEM_INFO:
;;;3789   
;;;3790   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3791   			
;;;3792   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_USER_PASSWORD_2, LCD_OPERATOR_MODE_DRAW);	
000064  f44f77f8          MOV      r7,#0x1f0
000068  290b              CMP      r1,#0xb               ;3701
00006a  d27d              BCS      |L168.360|
00006c  e8dff001          TBB      [pc,r1]               ;3701
000070  1e4c6e92          DCB      0x1e,0x4c,0x6e,0x92
000074  b6d8fdfc          DCB      0xb6,0xd8,0xfd,0xfc
000078  fbfaf900          DCB      0xfb,0xfa,0xf9,0x00
                  |L168.124|
00007c  2301              MOVS     r3,#1                 ;3678
00007e  211d              MOVS     r1,#0x1d              ;3678
000080  2013              MOVS     r0,#0x13              ;3678
000082  f7fffffe          BL       LCD_DrawBmpByID
000086  2300              MOVS     r3,#0                 ;3679
000088  462a              MOV      r2,r5                 ;3679
00008a  219c              MOVS     r1,#0x9c              ;3679
00008c  2013              MOVS     r0,#0x13              ;3679
00008e  f7fffffe          BL       LCD_DrawBmpByID
000092  e7ca              B        |L168.42|
                  |L168.148|
000094  2300              MOVS     r3,#0                 ;3685
000096  211d              MOVS     r1,#0x1d              ;3685
000098  2013              MOVS     r0,#0x13              ;3685
00009a  f7fffffe          BL       LCD_DrawBmpByID
00009e  2301              MOVS     r3,#1                 ;3686
0000a0  462a              MOV      r2,r5                 ;3686
0000a2  219c              MOVS     r1,#0x9c              ;3686
0000a4  2013              MOVS     r0,#0x13              ;3686
0000a6  f7fffffe          BL       LCD_DrawBmpByID
0000aa  e7be              B        |L168.42|
0000ac  9000              STR      r0,[sp,#0]            ;3705
0000ae  2382              MOVS     r3,#0x82              ;3705
0000b0  22e6              MOVS     r2,#0xe6              ;3705
0000b2  2120              MOVS     r1,#0x20              ;3705
0000b4  2046              MOVS     r0,#0x46              ;3705
0000b6  f7fffffe          BL       LCD_DrawAreaColor
0000ba  2300              MOVS     r3,#0                 ;3707
0000bc  2272              MOVS     r2,#0x72              ;3707
0000be  212b              MOVS     r1,#0x2b              ;3707
0000c0  200a              MOVS     r0,#0xa               ;3707
0000c2  f7fffffe          BL       LCD_DrawBmpByID
0000c6  2300              MOVS     r3,#0                 ;3708
0000c8  2278              MOVS     r2,#0x78              ;3708
0000ca  2151              MOVS     r1,#0x51              ;3708
0000cc  200c              MOVS     r0,#0xc               ;3708
0000ce  f7fffffe          BL       LCD_DrawBmpByID
0000d2  2300              MOVS     r3,#0                 ;3709
0000d4  2228              MOVS     r2,#0x28              ;3709
0000d6  217c              MOVS     r1,#0x7c              ;3709
0000d8  200c              MOVS     r0,#0xc               ;3709
0000da  f7fffffe          BL       LCD_DrawBmpByID
0000de  2300              MOVS     r3,#0                 ;3711
0000e0  22cc              MOVS     r2,#0xcc              ;3711
0000e2  2158              MOVS     r1,#0x58              ;3711
0000e4  2075              MOVS     r0,#0x75              ;3711
0000e6  f7fffffe          BL       LCD_DrawBmpByID
0000ea  2300              MOVS     r3,#0                 ;3712
0000ec  2274              MOVS     r2,#0x74              ;3712
0000ee  2131              MOVS     r1,#0x31              ;3712
0000f0  205a              MOVS     r0,#0x5a              ;3712
0000f2  f7fffffe          BL       LCD_DrawBmpByID
0000f6  b001              ADD      sp,sp,#4              ;3713
0000f8  2300              MOVS     r3,#0                 ;3713
0000fa  e8bd43f0          POP      {r4-r9,lr}            ;3713
0000fe  22cb              MOVS     r2,#0xcb              ;3713
000100  2180              MOVS     r1,#0x80              ;3713
000102  2046              MOVS     r0,#0x46              ;3713
000104  f7ffbffe          B.W      LCD_DrawBmpByID
000108  9000              STR      r0,[sp,#0]            ;3719
00010a  2382              MOVS     r3,#0x82              ;3719
00010c  22e6              MOVS     r2,#0xe6              ;3719
00010e  2120              MOVS     r1,#0x20              ;3719
000110  2046              MOVS     r0,#0x46              ;3719
000112  f7fffffe          BL       LCD_DrawAreaColor
000116  2300              MOVS     r3,#0                 ;3721
000118  2273              MOVS     r2,#0x73              ;3721
00011a  212b              MOVS     r1,#0x2b              ;3721
00011c  200c              MOVS     r0,#0xc               ;3721
00011e  f7fffffe          BL       LCD_DrawBmpByID
000122  2300              MOVS     r3,#0                 ;3722
000124  2277              MOVS     r2,#0x77              ;3722
000126  2151              MOVS     r1,#0x51              ;3722
000128  200a              MOVS     r0,#0xa               ;3722
00012a  f7fffffe          BL       LCD_DrawBmpByID
00012e  2300              MOVS     r3,#0                 ;3723
000130  2228              MOVS     r2,#0x28              ;3723
000132  217c              MOVS     r1,#0x7c              ;3723
000134  200c              MOVS     r0,#0xc               ;3723
000136  f7fffffe          BL       LCD_DrawBmpByID
00013a  b001              ADD      sp,sp,#4              ;3726
00013c  2300              MOVS     r3,#0                 ;3726
00013e  e8bd43f0          POP      {r4-r9,lr}            ;3726
000142  2276              MOVS     r2,#0x76              ;3726
000144  2131              MOVS     r1,#0x31              ;3726
000146  205a              MOVS     r0,#0x5a              ;3726
000148  f7ffbffe          B.W      LCD_DrawBmpByID
00014c  9000              STR      r0,[sp,#0]            ;3731
00014e  2382              MOVS     r3,#0x82              ;3731
000150  22e6              MOVS     r2,#0xe6              ;3731
000152  2120              MOVS     r1,#0x20              ;3731
000154  2046              MOVS     r0,#0x46              ;3731
000156  f7fffffe          BL       LCD_DrawAreaColor
00015a  2300              MOVS     r3,#0                 ;3733
00015c  2273              MOVS     r2,#0x73              ;3733
00015e  212b              MOVS     r1,#0x2b              ;3733
000160  200c              MOVS     r0,#0xc               ;3733
000162  f7fffffe          BL       LCD_DrawBmpByID
000166  e000              B        |L168.362|
                  |L168.360|
000168  e120              B        |L168.940|
                  |L168.362|
00016a  2300              MOVS     r3,#0                 ;3734
00016c  2278              MOVS     r2,#0x78              ;3734
00016e  2151              MOVS     r1,#0x51              ;3734
000170  200c              MOVS     r0,#0xc               ;3734
000172  f7fffffe          BL       LCD_DrawBmpByID
000176  2300              MOVS     r3,#0                 ;3735
000178  2227              MOVS     r2,#0x27              ;3735
00017a  2177              MOVS     r1,#0x77              ;3735
00017c  200a              MOVS     r0,#0xa               ;3735
00017e  f7fffffe          BL       LCD_DrawBmpByID
000182  b001              ADD      sp,sp,#4              ;3738
000184  2300              MOVS     r3,#0                 ;3738
000186  e8bd43f0          POP      {r4-r9,lr}            ;3738
00018a  2229              MOVS     r2,#0x29              ;3738
00018c  2131              MOVS     r1,#0x31              ;3738
00018e  205a              MOVS     r0,#0x5a              ;3738
000190  f7ffbffe          B.W      LCD_DrawBmpByID
000194  9000              STR      r0,[sp,#0]            ;3743
000196  2382              MOVS     r3,#0x82              ;3743
000198  22e6              MOVS     r2,#0xe6              ;3743
00019a  2120              MOVS     r1,#0x20              ;3743
00019c  2046              MOVS     r0,#0x46              ;3743
00019e  f7fffffe          BL       LCD_DrawAreaColor
0001a2  2300              MOVS     r3,#0                 ;3745
0001a4  f44f72f4          MOV      r2,#0x1e8             ;3745
0001a8  212b              MOVS     r1,#0x2b              ;3745
0001aa  200a              MOVS     r0,#0xa               ;3745
0001ac  f7fffffe          BL       LCD_DrawBmpByID
0001b0  2300              MOVS     r3,#0                 ;3746
0001b2  2221              MOVS     r2,#0x21              ;3746
0001b4  2151              MOVS     r1,#0x51              ;3746
0001b6  200c              MOVS     r0,#0xc               ;3746
0001b8  f7fffffe          BL       LCD_DrawBmpByID
0001bc  2300              MOVS     r3,#0                 ;3747
0001be  4622              MOV      r2,r4                 ;3747
0001c0  217c              MOVS     r1,#0x7c              ;3747
0001c2  200c              MOVS     r0,#0xc               ;3747
0001c4  f7fffffe          BL       LCD_DrawBmpByID
0001c8  b001              ADD      sp,sp,#4              ;3750
0001ca  2300              MOVS     r3,#0                 ;3750
0001cc  e8bd43f0          POP      {r4-r9,lr}            ;3750
0001d0  2131              MOVS     r1,#0x31              ;3750
0001d2  f44f72b3          MOV      r2,#0x166             ;3750
0001d6  205a              MOVS     r0,#0x5a              ;3750
0001d8  f7ffbffe          B.W      LCD_DrawBmpByID
0001dc  9000              STR      r0,[sp,#0]            ;3755
0001de  2382              MOVS     r3,#0x82              ;3755
0001e0  22e6              MOVS     r2,#0xe6              ;3755
0001e2  2120              MOVS     r1,#0x20              ;3755
0001e4  2046              MOVS     r0,#0x46              ;3755
0001e6  f7fffffe          BL       LCD_DrawAreaColor
0001ea  2300              MOVS     r3,#0                 ;3757
0001ec  4642              MOV      r2,r8                 ;3757
0001ee  212b              MOVS     r1,#0x2b              ;3757
0001f0  200c              MOVS     r0,#0xc               ;3757
0001f2  f7fffffe          BL       LCD_DrawBmpByID
0001f6  2300              MOVS     r3,#0                 ;3758
0001f8  2220              MOVS     r2,#0x20              ;3758
0001fa  2151              MOVS     r1,#0x51              ;3758
0001fc  200a              MOVS     r0,#0xa               ;3758
0001fe  f7fffffe          BL       LCD_DrawBmpByID
000202  2300              MOVS     r3,#0                 ;3759
000204  4622              MOV      r2,r4                 ;3759
000206  217c              MOVS     r1,#0x7c              ;3759
000208  200c              MOVS     r0,#0xc               ;3759
00020a  f7fffffe          BL       LCD_DrawBmpByID
00020e  b001              ADD      sp,sp,#4              ;3762
000210  2300              MOVS     r3,#0                 ;3762
000212  e8bd43f0          POP      {r4-r9,lr}            ;3762
000216  221f              MOVS     r2,#0x1f              ;3762
000218  2131              MOVS     r1,#0x31              ;3762
00021a  2058              MOVS     r0,#0x58              ;3762
00021c  f7ffbffe          B.W      LCD_DrawBmpByID
000220  9000              STR      r0,[sp,#0]            ;3767
000222  2382              MOVS     r3,#0x82              ;3767
000224  22e6              MOVS     r2,#0xe6              ;3767
000226  2120              MOVS     r1,#0x20              ;3767
000228  2046              MOVS     r0,#0x46              ;3767
00022a  f7fffffe          BL       LCD_DrawAreaColor
00022e  2300              MOVS     r3,#0                 ;3769
000230  4642              MOV      r2,r8                 ;3769
000232  212b              MOVS     r1,#0x2b              ;3769
000234  200c              MOVS     r0,#0xc               ;3769
000236  f7fffffe          BL       LCD_DrawBmpByID
00023a  2300              MOVS     r3,#0                 ;3770
00023c  2221              MOVS     r2,#0x21              ;3770
00023e  2151              MOVS     r1,#0x51              ;3770
000240  200c              MOVS     r0,#0xc               ;3770
000242  f7fffffe          BL       LCD_DrawBmpByID
000246  2300              MOVS     r3,#0                 ;3771
000248  f44f72e4          MOV      r2,#0x1c8             ;3771
00024c  2177              MOVS     r1,#0x77              ;3771
00024e  200a              MOVS     r0,#0xa               ;3771
000250  f7fffffe          BL       LCD_DrawBmpByID
000254  2300              MOVS     r3,#0                 ;3774
000256  2131              MOVS     r1,#0x31              ;3774
000258  f44f72e5          MOV      r2,#0x1ca             ;3774
00025c  2058              MOVS     r0,#0x58              ;3774
00025e  b001              ADD      sp,sp,#4              ;3774
000260  e004              B        |L168.620|
000262  e07b              B        |L168.860|
000264  e064              B        |L168.816|
000266  e03f              B        |L168.744|
000268  e021              B        |L168.686|
00026a  e003              B        |L168.628|
                  |L168.620|
00026c  e8bd43f0          POP      {r4-r9,lr}            ;3774
000270  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L168.628|
000274  9000              STR      r0,[sp,#0]            ;3780
000276  2382              MOVS     r3,#0x82              ;3780
000278  22e6              MOVS     r2,#0xe6              ;3780
00027a  2120              MOVS     r1,#0x20              ;3780
00027c  2046              MOVS     r0,#0x46              ;3780
00027e  f7fffffe          BL       LCD_DrawAreaColor
000282  2300              MOVS     r3,#0                 ;3782
000284  f24012ef          MOV      r2,#0x1ef             ;3782
000288  212b              MOVS     r1,#0x2b              ;3782
00028a  200a              MOVS     r0,#0xa               ;3782
00028c  f7fffffe          BL       LCD_DrawBmpByID
000290  2300              MOVS     r3,#0                 ;3783
000292  462a              MOV      r2,r5                 ;3783
000294  2151              MOVS     r1,#0x51              ;3783
000296  200c              MOVS     r0,#0xc               ;3783
000298  f7fffffe          BL       LCD_DrawBmpByID
00029c  b001              ADD      sp,sp,#4              ;3784
00029e  4632              MOV      r2,r6                 ;3784
0002a0  e8bd43f0          POP      {r4-r9,lr}            ;3784
0002a4  2300              MOVS     r3,#0                 ;3784
0002a6  217c              MOVS     r1,#0x7c              ;3784
0002a8  200c              MOVS     r0,#0xc               ;3784
0002aa  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L168.686|
0002ae  9000              STR      r0,[sp,#0]            ;3790
0002b0  2382              MOVS     r3,#0x82              ;3790
0002b2  22e6              MOVS     r2,#0xe6              ;3790
0002b4  2120              MOVS     r1,#0x20              ;3790
0002b6  2046              MOVS     r0,#0x46              ;3790
0002b8  f7fffffe          BL       LCD_DrawAreaColor
0002bc  2300              MOVS     r3,#0
0002be  463a              MOV      r2,r7
0002c0  212b              MOVS     r1,#0x2b
0002c2  200c              MOVS     r0,#0xc
0002c4  f7fffffe          BL       LCD_DrawBmpByID
;;;3793   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_SYSTEM_INFO, LCD_OPERATOR_MODE_DRAW);
0002c8  2300              MOVS     r3,#0
0002ca  f24012d7          MOV      r2,#0x1d7
0002ce  2151              MOVS     r1,#0x51
0002d0  200a              MOVS     r0,#0xa
0002d2  f7fffffe          BL       LCD_DrawBmpByID
;;;3794   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
0002d6  b001              ADD      sp,sp,#4
0002d8  4632              MOV      r2,r6
0002da  e8bd43f0          POP      {r4-r9,lr}
0002de  2300              MOVS     r3,#0
0002e0  217c              MOVS     r1,#0x7c
0002e2  200c              MOVS     r0,#0xc
0002e4  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L168.744|
;;;3795   
;;;3796   			break;
;;;3797   
;;;3798   		case MENU_ID_ROOT_SET_TIME:
;;;3799   
;;;3800   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
0002e8  9000              STR      r0,[sp,#0]
0002ea  2382              MOVS     r3,#0x82
0002ec  22e6              MOVS     r2,#0xe6
0002ee  2120              MOVS     r1,#0x20
0002f0  2046              MOVS     r0,#0x46
0002f2  f7fffffe          BL       LCD_DrawAreaColor
;;;3801   			
;;;3802   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_USER_PASSWORD_2, LCD_OPERATOR_MODE_DRAW);	
0002f6  2300              MOVS     r3,#0
0002f8  463a              MOV      r2,r7
0002fa  212b              MOVS     r1,#0x2b
0002fc  200c              MOVS     r0,#0xc
0002fe  f7fffffe          BL       LCD_DrawBmpByID
;;;3803   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SYSTEM_INFO_2, LCD_OPERATOR_MODE_DRAW);
000302  2300              MOVS     r3,#0
000304  462a              MOV      r2,r5
000306  2151              MOVS     r1,#0x51
000308  200c              MOVS     r0,#0xc
00030a  f7fffffe          BL       LCD_DrawBmpByID
;;;3804   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_SET_TIME, LCD_OPERATOR_MODE_DRAW);
00030e  2300              MOVS     r3,#0
000310  f44f72d3          MOV      r2,#0x1a6
000314  2177              MOVS     r1,#0x77
000316  200a              MOVS     r0,#0xa
000318  f7fffffe          BL       LCD_DrawBmpByID
;;;3805   
;;;3806   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_SET_TIME_3, LCD_OPERATOR_MODE_DRAW);
;;;3807   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_SET_TIME_TITILE, LCD_OPERATOR_MODE_DRAW);
00031c  b001              ADD      sp,sp,#4
00031e  2300              MOVS     r3,#0
000320  e8bd43f0          POP      {r4-r9,lr}
000324  2131              MOVS     r1,#0x31
000326  f44f72d4          MOV      r2,#0x1a8
00032a  205a              MOVS     r0,#0x5a
00032c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L168.816|
;;;3808   			break;
;;;3809   
;;;3810   		case MENU_ID_ROOT_CONNECT_TO_APP:
;;;3811   
;;;3812   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
000330  9000              STR      r0,[sp,#0]
000332  2382              MOVS     r3,#0x82
000334  22e6              MOVS     r2,#0xe6
000336  2120              MOVS     r1,#0x20
000338  2046              MOVS     r0,#0x46
00033a  f7fffffe          BL       LCD_DrawAreaColor
;;;3813   			
;;;3814   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_BLE, LCD_OPERATOR_MODE_DRAW);	
00033e  2300              MOVS     r3,#0
000340  2252              MOVS     r2,#0x52
000342  212b              MOVS     r1,#0x2b
000344  200a              MOVS     r0,#0xa
000346  f7fffffe          BL       LCD_DrawBmpByID
;;;3815   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_BACK_2, LCD_OPERATOR_MODE_DRAW);
00034a  b001              ADD      sp,sp,#4
00034c  2300              MOVS     r3,#0
00034e  e8bd43f0          POP      {r4-r9,lr}
000352  2224              MOVS     r2,#0x24
000354  2151              MOVS     r1,#0x51
000356  200c              MOVS     r0,#0xc
000358  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L168.860|
;;;3816   
;;;3817   			break;
;;;3818   
;;;3819   		case MENU_ID_ROOT_BACK:
;;;3820   
;;;3821   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
00035c  9000              STR      r0,[sp,#0]
00035e  2382              MOVS     r3,#0x82
000360  22e6              MOVS     r2,#0xe6
000362  2120              MOVS     r1,#0x20
000364  2046              MOVS     r0,#0x46
000366  f7fffffe          BL       LCD_DrawAreaColor
;;;3822   			
;;;3823   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_BLE_2, LCD_OPERATOR_MODE_DRAW);	
00036a  2300              MOVS     r3,#0
00036c  2253              MOVS     r2,#0x53
00036e  212b              MOVS     r1,#0x2b
000370  200c              MOVS     r0,#0xc
000372  f7fffffe          BL       LCD_DrawBmpByID
;;;3824   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_BACK, LCD_OPERATOR_MODE_DRAW);
000376  2300              MOVS     r3,#0
000378  2223              MOVS     r2,#0x23
00037a  2151              MOVS     r1,#0x51
00037c  200a              MOVS     r0,#0xa
00037e  f7fffffe          BL       LCD_DrawBmpByID
;;;3825   
;;;3826   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_EXIT_X, UI_ITEM_COODINATE_MENU_M_PRESS_EXIT_Y, PIC_ID_M_PRESS_EXIT, LCD_OPERATOR_MODE_DRAW);
000382  2300              MOVS     r3,#0
000384  22d4              MOVS     r2,#0xd4
000386  2196              MOVS     r1,#0x96
000388  20d3              MOVS     r0,#0xd3
00038a  f7fffffe          BL       LCD_DrawBmpByID
;;;3827   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_BACK_3_X, UI_ITEM_COODINATE_MENU_BACK_3_Y, PIC_ID_BACK_3, LCD_OPERATOR_MODE_DRAW);
00038e  2300              MOVS     r3,#0
000390  2225              MOVS     r2,#0x25
000392  2150              MOVS     r1,#0x50
000394  2094              MOVS     r0,#0x94
000396  f7fffffe          BL       LCD_DrawBmpByID
;;;3828   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_EXIT_TITILE, LCD_OPERATOR_MODE_DRAW);
00039a  b001              ADD      sp,sp,#4
00039c  2300              MOVS     r3,#0
00039e  e8bd43f0          POP      {r4-r9,lr}
0003a2  2280              MOVS     r2,#0x80
0003a4  2131              MOVS     r1,#0x31
0003a6  205a              MOVS     r0,#0x5a
0003a8  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L168.940|
;;;3829   
;;;3830   			
;;;3831   			break;
;;;3832   		default:
;;;3833   			break;
;;;3834   	}
;;;3835   }
0003ac  e8bd83f8          POP      {r3-r9,pc}
;;;3836   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuTitle2||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuTitle2 PROC
;;;3836   
;;;3837   void DISPLAY_DrawMenuTitle2(uint32 ulBuff)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3838   {
000002  4604              MOV      r4,r0
;;;3839   	// 指示符
;;;3840   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_UP_CURSIE_X, UI_ITEM_COODINATE_MENU_UP_CURSIE_Y, PIC_ID_SANJIAO_2, LCD_OPERATOR_MODE_DRAW);
000004  2300              MOVS     r3,#0
000006  f24012a3          MOV      r2,#0x1a3
00000a  211d              MOVS     r1,#0x1d
00000c  2013              MOVS     r0,#0x13
00000e  f7fffffe          BL       LCD_DrawBmpByID
;;;3841   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DOWN_CURSIE_X, UI_ITEM_COODINATE_MENU_DOWN_CURSIE_Y, PIC_ID_SANJIAO, LCD_OPERATOR_MODE_DRAW);
000012  2300              MOVS     r3,#0
000014  f44f72d1          MOV      r2,#0x1a2
000018  219c              MOVS     r1,#0x9c
00001a  2013              MOVS     r0,#0x13
00001c  f7fffffe          BL       LCD_DrawBmpByID
;;;3842   
;;;3843   	// 背景色
;;;3844   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);	
000020  2301              MOVS     r3,#1
000022  2272              MOVS     r2,#0x72
000024  212b              MOVS     r1,#0x2b
000026  200a              MOVS     r0,#0xa
000028  f7fffffe          BL       LCD_DrawBmpByID
;;;3845   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);
00002c  2301              MOVS     r3,#1
00002e  2272              MOVS     r2,#0x72
000030  2151              MOVS     r1,#0x51
000032  200a              MOVS     r0,#0xa
000034  f7fffffe          BL       LCD_DrawBmpByID
;;;3846   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);
000038  2301              MOVS     r3,#1
00003a  2272              MOVS     r2,#0x72
00003c  2177              MOVS     r1,#0x77
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       LCD_DrawBmpByID
;;;3847   	switch ((MENU_ID_E)ulBuff)
000044  b2e1              UXTB     r1,r4
;;;3848   	{
;;;3849   		case MENU_ID_ROOT_CLEAR_DATA:
;;;3850   			
;;;3851   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3852   			
;;;3853   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_DRAW);	
;;;3854   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_DISPLAY_UNIT_2, LCD_OPERATOR_MODE_DRAW);
;;;3855   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACKLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;3856   
;;;3857   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_PRESS_X, UI_ITEM_COODINATE_MENU_CLEAR_PRESS_Y, PIC_ID_M_CLEAR_PRESS, LCD_OPERATOR_MODE_DRAW);
;;;3858   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_CLEAR_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3859   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_X, UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_Y, PIC_ID_M_CLEAR_IT_WILL, LCD_OPERATOR_MODE_DRAW);
;;;3860   			break;
;;;3861   
;;;3862   		case MENU_ID_ROOT_DISPLAY_UNIT:
;;;3863   			
;;;3864   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3865   
;;;3866   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_CLEAR_2, LCD_OPERATOR_MODE_DRAW);	
;;;3867   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_DISPLAY_UNIT, LCD_OPERATOR_MODE_DRAW);
;;;3868   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACKLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;3869   
;;;3870   		
;;;3871   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_X, UI_ITEM_COODINATE_MENU_M_PRESS_SAVE_Y, PIC_ID_M_PRESS_SAVE, LCD_OPERATOR_MODE_DRAW);
;;;3872   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_DISPLAY_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3873   			break;
;;;3874   
;;;3875   		case MENU_ID_ROOT_BACKLIGHT:
;;;3876   			
;;;3877   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3878   
;;;3879   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_CLEAR_2, LCD_OPERATOR_MODE_DRAW);	
;;;3880   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_DISPLAY_UNIT_2, LCD_OPERATOR_MODE_DRAW);
;;;3881   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_BACKLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;3882   
;;;3883   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_BACKLIGHT_3, LCD_OPERATOR_MODE_DRAW);
;;;3884   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_BACKLIGHT_BRIGHTNESS_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3885   			break;
;;;3886   
;;;3887   		case MENU_ID_ROOT_POWEROFF_TIME:
;;;3888   			
;;;3889   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3890   			
;;;3891   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_TIME_OFF, LCD_OPERATOR_MODE_DRAW);	
;;;3892   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_AUTOLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;3893   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SPEED_LIMIT_2, LCD_OPERATOR_MODE_DRAW);
;;;3894   
;;;3895   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_TIME_OFF_3, LCD_OPERATOR_MODE_DRAW);
;;;3896   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_POWER_OFF_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3897   			break;
;;;3898   
;;;3899   		case MENU_ID_ROOT_AUTO_LIGHT:
;;;3900   			
;;;3901   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3902   			
;;;3903   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_TIME_OFF_2, LCD_OPERATOR_MODE_DRAW);	
000046  f24015e9          MOV      r5,#0x1e9
;;;3904   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_AUTOLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;3905   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SPEED_LIMIT_2, LCD_OPERATOR_MODE_DRAW);
;;;3906   
;;;3907   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_AUTOLIGHT_3, LCD_OPERATOR_MODE_DRAW);
;;;3908   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME2_X, UI_ITEM_COODINATE_MENU_DATA_NAME2_Y, PIC_ID_AUTO_HEADLIGHT_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3909   			break;
;;;3910   
;;;3911   		case MENU_ID_ROOT_SPEED_LIMIT:
;;;3912   
;;;3913   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3914   			
;;;3915   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_TIME_OFF_2, LCD_OPERATOR_MODE_DRAW);	
;;;3916   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_AUTOLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;3917   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_SPEED_LIMIT, LCD_OPERATOR_MODE_DRAW);
;;;3918   
;;;3919   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_SPEED_LIMIT_3, LCD_OPERATOR_MODE_DRAW);
;;;3920   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME2_X, UI_ITEM_COODINATE_MENU_DATA_NAME2_Y, PIC_ID_SPEED_LIMIT_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;3921   			
;;;3922   		  break;
;;;3923   
;;;3924   		/*case MENU_ID_ROOT_USER_PASSWORD:
;;;3925   
;;;3926   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3927   			
;;;3928   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_USER_PASSWORD, LCD_OPERATOR_MODE_DRAW);	
;;;3929   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SYSTEM_INFO_2, LCD_OPERATOR_MODE_DRAW);
;;;3930   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
;;;3931   
;;;3932   			break;*/
;;;3933   
;;;3934   		case MENU_ID_ROOT_SYSTEM_INFO:
;;;3935   
;;;3936   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3937   			
;;;3938   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_SYSTEM_INFO, LCD_OPERATOR_MODE_DRAW);	
;;;3939   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
;;;3940   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACK_2, LCD_OPERATOR_MODE_DRAW);
;;;3941   
;;;3942   			break;
;;;3943   
;;;3944   		case MENU_ID_ROOT_SET_TIME:
;;;3945   
;;;3946   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3947   			
;;;3948   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_USER_PASSWORD_2, LCD_OPERATOR_MODE_DRAW);	
00004a  1def              ADDS     r7,r5,#7
00004c  f64100e4          MOV      r0,#0x18e4            ;3851
000050  f24014c9          MOV      r4,#0x1c9             ;3893
000054  f24016a7          MOV      r6,#0x1a7             ;3939
000058  290b              CMP      r1,#0xb               ;3847
00005a  d27d              BCS      |L169.344|
00005c  e8dff001          TBB      [pc,r1]               ;3847
000060  06345678          DCB      0x06,0x34,0x56,0x78
000064  9ec07ce4          DCB      0x9e,0xc0,0x7c,0xe4
000068  fd7cfc00          DCB      0xfd,0x7c,0xfc,0x00
00006c  9000              STR      r0,[sp,#0]            ;3851
00006e  2382              MOVS     r3,#0x82              ;3851
000070  22e6              MOVS     r2,#0xe6              ;3851
000072  2120              MOVS     r1,#0x20              ;3851
000074  2046              MOVS     r0,#0x46              ;3851
000076  f7fffffe          BL       LCD_DrawAreaColor
00007a  2300              MOVS     r3,#0                 ;3853
00007c  2272              MOVS     r2,#0x72              ;3853
00007e  212b              MOVS     r1,#0x2b              ;3853
000080  200a              MOVS     r0,#0xa               ;3853
000082  f7fffffe          BL       LCD_DrawBmpByID
000086  2300              MOVS     r3,#0                 ;3854
000088  2278              MOVS     r2,#0x78              ;3854
00008a  2151              MOVS     r1,#0x51              ;3854
00008c  200c              MOVS     r0,#0xc               ;3854
00008e  f7fffffe          BL       LCD_DrawBmpByID
000092  2300              MOVS     r3,#0                 ;3855
000094  2228              MOVS     r2,#0x28              ;3855
000096  217c              MOVS     r1,#0x7c              ;3855
000098  200c              MOVS     r0,#0xc               ;3855
00009a  f7fffffe          BL       LCD_DrawBmpByID
00009e  2300              MOVS     r3,#0                 ;3857
0000a0  22cc              MOVS     r2,#0xcc              ;3857
0000a2  2158              MOVS     r1,#0x58              ;3857
0000a4  2075              MOVS     r0,#0x75              ;3857
0000a6  f7fffffe          BL       LCD_DrawBmpByID
0000aa  2300              MOVS     r3,#0                 ;3858
0000ac  2274              MOVS     r2,#0x74              ;3858
0000ae  2131              MOVS     r1,#0x31              ;3858
0000b0  205a              MOVS     r0,#0x5a              ;3858
0000b2  f7fffffe          BL       LCD_DrawBmpByID
0000b6  b001              ADD      sp,sp,#4              ;3859
0000b8  2300              MOVS     r3,#0                 ;3859
0000ba  e8bd40f0          POP      {r4-r7,lr}            ;3859
0000be  22cb              MOVS     r2,#0xcb              ;3859
0000c0  2180              MOVS     r1,#0x80              ;3859
0000c2  2046              MOVS     r0,#0x46              ;3859
0000c4  f7ffbffe          B.W      LCD_DrawBmpByID
0000c8  9000              STR      r0,[sp,#0]            ;3864
0000ca  2382              MOVS     r3,#0x82              ;3864
0000cc  22e6              MOVS     r2,#0xe6              ;3864
0000ce  2120              MOVS     r1,#0x20              ;3864
0000d0  2046              MOVS     r0,#0x46              ;3864
0000d2  f7fffffe          BL       LCD_DrawAreaColor
0000d6  2300              MOVS     r3,#0                 ;3866
0000d8  2273              MOVS     r2,#0x73              ;3866
0000da  212b              MOVS     r1,#0x2b              ;3866
0000dc  200c              MOVS     r0,#0xc               ;3866
0000de  f7fffffe          BL       LCD_DrawBmpByID
0000e2  2300              MOVS     r3,#0                 ;3867
0000e4  2277              MOVS     r2,#0x77              ;3867
0000e6  2151              MOVS     r1,#0x51              ;3867
0000e8  200a              MOVS     r0,#0xa               ;3867
0000ea  f7fffffe          BL       LCD_DrawBmpByID
0000ee  2300              MOVS     r3,#0                 ;3868
0000f0  2228              MOVS     r2,#0x28              ;3868
0000f2  217c              MOVS     r1,#0x7c              ;3868
0000f4  200c              MOVS     r0,#0xc               ;3868
0000f6  f7fffffe          BL       LCD_DrawBmpByID
0000fa  b001              ADD      sp,sp,#4              ;3872
0000fc  2300              MOVS     r3,#0                 ;3872
0000fe  e8bd40f0          POP      {r4-r7,lr}            ;3872
000102  2276              MOVS     r2,#0x76              ;3872
000104  2131              MOVS     r1,#0x31              ;3872
000106  205a              MOVS     r0,#0x5a              ;3872
000108  f7ffbffe          B.W      LCD_DrawBmpByID
00010c  9000              STR      r0,[sp,#0]            ;3877
00010e  2382              MOVS     r3,#0x82              ;3877
000110  22e6              MOVS     r2,#0xe6              ;3877
000112  2120              MOVS     r1,#0x20              ;3877
000114  2046              MOVS     r0,#0x46              ;3877
000116  f7fffffe          BL       LCD_DrawAreaColor
00011a  2300              MOVS     r3,#0                 ;3879
00011c  2273              MOVS     r2,#0x73              ;3879
00011e  212b              MOVS     r1,#0x2b              ;3879
000120  200c              MOVS     r0,#0xc               ;3879
000122  f7fffffe          BL       LCD_DrawBmpByID
000126  2300              MOVS     r3,#0                 ;3880
000128  2278              MOVS     r2,#0x78              ;3880
00012a  2151              MOVS     r1,#0x51              ;3880
00012c  200c              MOVS     r0,#0xc               ;3880
00012e  f7fffffe          BL       LCD_DrawBmpByID
000132  2300              MOVS     r3,#0                 ;3881
000134  2227              MOVS     r2,#0x27              ;3881
000136  2177              MOVS     r1,#0x77              ;3881
000138  200a              MOVS     r0,#0xa               ;3881
00013a  f7fffffe          BL       LCD_DrawBmpByID
00013e  b001              ADD      sp,sp,#4              ;3884
000140  2300              MOVS     r3,#0                 ;3884
000142  e8bd40f0          POP      {r4-r7,lr}            ;3884
000146  2229              MOVS     r2,#0x29              ;3884
000148  2131              MOVS     r1,#0x31              ;3884
00014a  205a              MOVS     r0,#0x5a              ;3884
00014c  f7ffbffe          B.W      LCD_DrawBmpByID
000150  2382              MOVS     r3,#0x82              ;3889
000152  22e6              MOVS     r2,#0xe6              ;3889
000154  2120              MOVS     r1,#0x20              ;3889
000156  e000              B        |L169.346|
                  |L169.344|
000158  e0d8              B        |L169.780|
                  |L169.346|
00015a  9000              STR      r0,[sp,#0]            ;3889
00015c  2046              MOVS     r0,#0x46              ;3889
00015e  f7fffffe          BL       LCD_DrawAreaColor
000162  2300              MOVS     r3,#0                 ;3891
000164  f44f72f4          MOV      r2,#0x1e8             ;3891
000168  212b              MOVS     r1,#0x2b              ;3891
00016a  200a              MOVS     r0,#0xa               ;3891
00016c  f7fffffe          BL       LCD_DrawBmpByID
000170  2300              MOVS     r3,#0                 ;3892
000172  2221              MOVS     r2,#0x21              ;3892
000174  2151              MOVS     r1,#0x51              ;3892
000176  200c              MOVS     r0,#0xc               ;3892
000178  f7fffffe          BL       LCD_DrawBmpByID
00017c  2300              MOVS     r3,#0                 ;3893
00017e  4622              MOV      r2,r4                 ;3893
000180  217c              MOVS     r1,#0x7c              ;3893
000182  200c              MOVS     r0,#0xc               ;3893
000184  f7fffffe          BL       LCD_DrawBmpByID
000188  b001              ADD      sp,sp,#4              ;3896
00018a  2300              MOVS     r3,#0                 ;3896
00018c  e8bd40f0          POP      {r4-r7,lr}            ;3896
000190  2131              MOVS     r1,#0x31              ;3896
000192  f44f72b3          MOV      r2,#0x166             ;3896
000196  205a              MOVS     r0,#0x5a              ;3896
000198  f7ffbffe          B.W      LCD_DrawBmpByID
00019c  9000              STR      r0,[sp,#0]            ;3901
00019e  2382              MOVS     r3,#0x82              ;3901
0001a0  22e6              MOVS     r2,#0xe6              ;3901
0001a2  2120              MOVS     r1,#0x20              ;3901
0001a4  2046              MOVS     r0,#0x46              ;3901
0001a6  f7fffffe          BL       LCD_DrawAreaColor
0001aa  2300              MOVS     r3,#0                 ;3903
0001ac  462a              MOV      r2,r5                 ;3903
0001ae  212b              MOVS     r1,#0x2b              ;3903
0001b0  200c              MOVS     r0,#0xc               ;3903
0001b2  f7fffffe          BL       LCD_DrawBmpByID
0001b6  2300              MOVS     r3,#0                 ;3904
0001b8  2220              MOVS     r2,#0x20              ;3904
0001ba  2151              MOVS     r1,#0x51              ;3904
0001bc  200a              MOVS     r0,#0xa               ;3904
0001be  f7fffffe          BL       LCD_DrawBmpByID
0001c2  2300              MOVS     r3,#0                 ;3905
0001c4  4622              MOV      r2,r4                 ;3905
0001c6  217c              MOVS     r1,#0x7c              ;3905
0001c8  200c              MOVS     r0,#0xc               ;3905
0001ca  f7fffffe          BL       LCD_DrawBmpByID
0001ce  b001              ADD      sp,sp,#4              ;3908
0001d0  2300              MOVS     r3,#0                 ;3908
0001d2  e8bd40f0          POP      {r4-r7,lr}            ;3908
0001d6  221f              MOVS     r2,#0x1f              ;3908
0001d8  2131              MOVS     r1,#0x31              ;3908
0001da  2058              MOVS     r0,#0x58              ;3908
0001dc  f7ffbffe          B.W      LCD_DrawBmpByID
0001e0  9000              STR      r0,[sp,#0]            ;3913
0001e2  2382              MOVS     r3,#0x82              ;3913
0001e4  22e6              MOVS     r2,#0xe6              ;3913
0001e6  2120              MOVS     r1,#0x20              ;3913
0001e8  2046              MOVS     r0,#0x46              ;3913
0001ea  f7fffffe          BL       LCD_DrawAreaColor
0001ee  2300              MOVS     r3,#0                 ;3915
0001f0  462a              MOV      r2,r5                 ;3915
0001f2  212b              MOVS     r1,#0x2b              ;3915
0001f4  200c              MOVS     r0,#0xc               ;3915
0001f6  f7fffffe          BL       LCD_DrawBmpByID
0001fa  2300              MOVS     r3,#0                 ;3916
0001fc  2221              MOVS     r2,#0x21              ;3916
0001fe  2151              MOVS     r1,#0x51              ;3916
000200  200c              MOVS     r0,#0xc               ;3916
000202  f7fffffe          BL       LCD_DrawBmpByID
000206  2300              MOVS     r3,#0                 ;3917
000208  f44f72e4          MOV      r2,#0x1c8             ;3917
00020c  2177              MOVS     r1,#0x77              ;3917
00020e  200a              MOVS     r0,#0xa               ;3917
000210  f7fffffe          BL       LCD_DrawBmpByID
000214  b001              ADD      sp,sp,#4              ;3920
000216  2300              MOVS     r3,#0                 ;3920
000218  e8bd40f0          POP      {r4-r7,lr}            ;3920
00021c  2131              MOVS     r1,#0x31              ;3920
00021e  f44f72e5          MOV      r2,#0x1ca             ;3920
000222  2058              MOVS     r0,#0x58              ;3920
000224  f7ffbffe          B.W      LCD_DrawBmpByID
000228  9000              STR      r0,[sp,#0]            ;3936
00022a  2382              MOVS     r3,#0x82              ;3936
00022c  22e6              MOVS     r2,#0xe6              ;3936
00022e  2120              MOVS     r1,#0x20              ;3936
000230  2046              MOVS     r0,#0x46              ;3936
000232  f7fffffe          BL       LCD_DrawAreaColor
000236  2300              MOVS     r3,#0                 ;3938
000238  f24012d7          MOV      r2,#0x1d7             ;3938
00023c  212b              MOVS     r1,#0x2b              ;3938
00023e  200a              MOVS     r0,#0xa               ;3938
000240  f7fffffe          BL       LCD_DrawBmpByID
000244  2300              MOVS     r3,#0                 ;3939
000246  4632              MOV      r2,r6                 ;3939
000248  2151              MOVS     r1,#0x51              ;3939
00024a  200c              MOVS     r0,#0xc               ;3939
00024c  f7fffffe          BL       LCD_DrawBmpByID
000250  2300              MOVS     r3,#0                 ;3940
000252  2224              MOVS     r2,#0x24              ;3940
000254  217c              MOVS     r1,#0x7c              ;3940
000256  e001              B        |L169.604|
000258  e02a              B        |L169.688|
00025a  e005              B        |L169.616|
                  |L169.604|
00025c  b001              ADD      sp,sp,#4              ;3940
00025e  200c              MOVS     r0,#0xc               ;3940
000260  e8bd40f0          POP      {r4-r7,lr}            ;3940
000264  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L169.616|
000268  9000              STR      r0,[sp,#0]            ;3946
00026a  2382              MOVS     r3,#0x82              ;3946
00026c  22e6              MOVS     r2,#0xe6              ;3946
00026e  2120              MOVS     r1,#0x20              ;3946
000270  2046              MOVS     r0,#0x46              ;3946
000272  f7fffffe          BL       LCD_DrawAreaColor
000276  2300              MOVS     r3,#0
000278  463a              MOV      r2,r7
00027a  212b              MOVS     r1,#0x2b
00027c  200c              MOVS     r0,#0xc
00027e  f7fffffe          BL       LCD_DrawBmpByID
;;;3949   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_SET_TIME, LCD_OPERATOR_MODE_DRAW);
000282  2300              MOVS     r3,#0
000284  f44f72d3          MOV      r2,#0x1a6
000288  2151              MOVS     r1,#0x51
00028a  200a              MOVS     r0,#0xa
00028c  f7fffffe          BL       LCD_DrawBmpByID
;;;3950   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACK_2, LCD_OPERATOR_MODE_DRAW);
000290  2300              MOVS     r3,#0
000292  2224              MOVS     r2,#0x24
000294  217c              MOVS     r1,#0x7c
000296  200c              MOVS     r0,#0xc
000298  f7fffffe          BL       LCD_DrawBmpByID
;;;3951   
;;;3952   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_ICON_X, UI_ITEM_COODINATE_MENU_DATA_ICON_Y, PIC_ID_SET_TIME_3, LCD_OPERATOR_MODE_DRAW);
;;;3953   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_SET_TIME_TITILE, LCD_OPERATOR_MODE_DRAW);
00029c  b001              ADD      sp,sp,#4
00029e  2300              MOVS     r3,#0
0002a0  e8bd40f0          POP      {r4-r7,lr}
0002a4  2131              MOVS     r1,#0x31
0002a6  f44f72d4          MOV      r2,#0x1a8
0002aa  205a              MOVS     r0,#0x5a
0002ac  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L169.688|
;;;3954   			break;
;;;3955   
;;;3956   		/*case MENU_ID_ROOT_CONNECT_TO_APP:
;;;3957   
;;;3958   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;3959   			
;;;3960   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_BLE, LCD_OPERATOR_MODE_DRAW);	
;;;3961   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_BACK_2, LCD_OPERATOR_MODE_DRAW);
;;;3962   
;;;3963   			break;*/
;;;3964   
;;;3965   		case MENU_ID_ROOT_BACK:
;;;3966   
;;;3967   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
0002b0  9000              STR      r0,[sp,#0]
0002b2  2382              MOVS     r3,#0x82
0002b4  22e6              MOVS     r2,#0xe6
0002b6  2120              MOVS     r1,#0x20
0002b8  2046              MOVS     r0,#0x46
0002ba  f7fffffe          BL       LCD_DrawAreaColor
;;;3968   			
;;;3969   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_USER_PASSWORD_2, LCD_OPERATOR_MODE_DRAW);	
0002be  2300              MOVS     r3,#0
0002c0  463a              MOV      r2,r7
0002c2  212b              MOVS     r1,#0x2b
0002c4  200c              MOVS     r0,#0xc
0002c6  f7fffffe          BL       LCD_DrawBmpByID
;;;3970   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
0002ca  2300              MOVS     r3,#0
0002cc  4632              MOV      r2,r6
0002ce  2151              MOVS     r1,#0x51
0002d0  200c              MOVS     r0,#0xc
0002d2  f7fffffe          BL       LCD_DrawBmpByID
;;;3971   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_BACK, LCD_OPERATOR_MODE_DRAW);
0002d6  2300              MOVS     r3,#0
0002d8  2223              MOVS     r2,#0x23
0002da  2177              MOVS     r1,#0x77
0002dc  200a              MOVS     r0,#0xa
0002de  f7fffffe          BL       LCD_DrawBmpByID
;;;3972   
;;;3973   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_EXIT_X, UI_ITEM_COODINATE_MENU_M_PRESS_EXIT_Y, PIC_ID_M_PRESS_EXIT, LCD_OPERATOR_MODE_DRAW);
0002e2  2300              MOVS     r3,#0
0002e4  22d4              MOVS     r2,#0xd4
0002e6  2196              MOVS     r1,#0x96
0002e8  20d3              MOVS     r0,#0xd3
0002ea  f7fffffe          BL       LCD_DrawBmpByID
;;;3974   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_BACK_3_X, UI_ITEM_COODINATE_MENU_BACK_3_Y, PIC_ID_BACK_3, LCD_OPERATOR_MODE_DRAW);
0002ee  2300              MOVS     r3,#0
0002f0  2225              MOVS     r2,#0x25
0002f2  2150              MOVS     r1,#0x50
0002f4  2094              MOVS     r0,#0x94
0002f6  f7fffffe          BL       LCD_DrawBmpByID
;;;3975   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_EXIT_TITILE, LCD_OPERATOR_MODE_DRAW);
0002fa  b001              ADD      sp,sp,#4
0002fc  2300              MOVS     r3,#0
0002fe  e8bd40f0          POP      {r4-r7,lr}
000302  2280              MOVS     r2,#0x80
000304  2131              MOVS     r1,#0x31
000306  205a              MOVS     r0,#0x5a
000308  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L169.780|
;;;3976   			break;
;;;3977   		default:
;;;3978   			break;
;;;3979   	}
;;;3980   }
00030c  bdf8              POP      {r3-r7,pc}
;;;3981   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuTitle3||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuTitle3 PROC
;;;3981   
;;;3982   void DISPLAY_DrawMenuTitle3(uint32 ulBuff)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;3983   {
000004  4604              MOV      r4,r0
;;;3984   	// 指示符
;;;3985   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_UP_CURSIE_X, UI_ITEM_COODINATE_MENU_UP_CURSIE_Y, PIC_ID_SANJIAO_2, LCD_OPERATOR_MODE_DRAW);
000006  2300              MOVS     r3,#0
000008  f24012a3          MOV      r2,#0x1a3
00000c  211d              MOVS     r1,#0x1d
00000e  2013              MOVS     r0,#0x13
000010  f7fffffe          BL       LCD_DrawBmpByID
;;;3986   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DOWN_CURSIE_X, UI_ITEM_COODINATE_MENU_DOWN_CURSIE_Y, PIC_ID_SANJIAO, LCD_OPERATOR_MODE_DRAW);
000014  2300              MOVS     r3,#0
000016  f44f72d1          MOV      r2,#0x1a2
00001a  219c              MOVS     r1,#0x9c
00001c  2013              MOVS     r0,#0x13
00001e  f7fffffe          BL       LCD_DrawBmpByID
;;;3987   
;;;3988   	// 背景色
;;;3989   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);	
000022  2301              MOVS     r3,#1
000024  2272              MOVS     r2,#0x72
000026  212b              MOVS     r1,#0x2b
000028  200a              MOVS     r0,#0xa
00002a  f7fffffe          BL       LCD_DrawBmpByID
;;;3990   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);
00002e  2301              MOVS     r3,#1
000030  2272              MOVS     r2,#0x72
000032  2151              MOVS     r1,#0x51
000034  200a              MOVS     r0,#0xa
000036  f7fffffe          BL       LCD_DrawBmpByID
;;;3991   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);
00003a  2301              MOVS     r3,#1
00003c  2272              MOVS     r2,#0x72
00003e  2177              MOVS     r1,#0x77
000040  200a              MOVS     r0,#0xa
000042  f7fffffe          BL       LCD_DrawBmpByID
;;;3992   	switch ((MENU_ID_E)ulBuff)
000046  b2e1              UXTB     r1,r4
;;;3993   	{
;;;3994   		case MENU_ID_ROOT_CLEAR_DATA:
;;;3995   			
;;;3996   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
000048  f64100e4          MOV      r0,#0x18e4
;;;3997   			
;;;3998   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_DRAW);	
;;;3999   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_DISPLAY_UNIT_2, LCD_OPERATOR_MODE_DRAW);
;;;4000   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACKLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;4001   
;;;4002   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_PRESS_X, UI_ITEM_COODINATE_MENU_CLEAR_PRESS_Y, PIC_ID_M_CLEAR_PRESS, LCD_OPERATOR_MODE_DRAW);
;;;4003   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_CLEAR_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4004   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_X, UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_Y, PIC_ID_M_CLEAR_IT_WILL, LCD_OPERATOR_MODE_DRAW);
;;;4005   		
;;;4006   			break;
;;;4007   
;;;4008   		case MENU_ID_ROOT_DISPLAY_UNIT:
;;;4009   			
;;;4010   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4011   
;;;4012   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_CLEAR_2, LCD_OPERATOR_MODE_DRAW);	
;;;4013   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_DISPLAY_UNIT, LCD_OPERATOR_MODE_DRAW);
;;;4014   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACKLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;4015   
;;;4016   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_DISPLAY_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4017   			break;
;;;4018   		
;;;4019   		case MENU_ID_ROOT_BACKLIGHT:
;;;4020   			
;;;4021   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4022   
;;;4023   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_CLEAR_2, LCD_OPERATOR_MODE_DRAW);	
;;;4024   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_DISPLAY_UNIT_2, LCD_OPERATOR_MODE_DRAW);
;;;4025   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_BACKLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;4026   
;;;4027   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_BACKLIGHT_BRIGHTNESS_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4028   			break;
;;;4029   
;;;4030   		case MENU_ID_ROOT_POWEROFF_TIME:
;;;4031   			
;;;4032   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4033   			
;;;4034   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_TIME_OFF, LCD_OPERATOR_MODE_DRAW);	
;;;4035   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_AUTOLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;4036   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SPEED_LIMIT_2, LCD_OPERATOR_MODE_DRAW);
00004c  f24014c9          MOV      r4,#0x1c9
;;;4037   
;;;4038   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_POWER_OFF_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4039   			break;
;;;4040   
;;;4041   		case MENU_ID_ROOT_AUTO_LIGHT:
;;;4042   			
;;;4043   		  LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4044   			
;;;4045   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_TIME_OFF_2, LCD_OPERATOR_MODE_DRAW);	
000050  f24018e9          MOV      r8,#0x1e9
;;;4046   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_AUTOLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;4047   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SPEED_LIMIT_2, LCD_OPERATOR_MODE_DRAW);
;;;4048   
;;;4049   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME2_X, UI_ITEM_COODINATE_MENU_DATA_NAME2_Y, PIC_ID_AUTO_HEADLIGHT_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4050   			break;
;;;4051   
;;;4052   		case MENU_ID_ROOT_SPEED_LIMIT:
;;;4053   
;;;4054   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4055   			
;;;4056   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_TIME_OFF_2, LCD_OPERATOR_MODE_DRAW);	
;;;4057   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_AUTOLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;4058   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_SPEED_LIMIT, LCD_OPERATOR_MODE_DRAW);
;;;4059   
;;;4060   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME2_X, UI_ITEM_COODINATE_MENU_DATA_NAME2_Y, PIC_ID_SPEED_LIMIT_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4061   		  break;
;;;4062   
;;;4063   		case MENU_ID_ROOT_USER_PASSWORD:
;;;4064   
;;;4065   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4066   			
;;;4067   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_USER_PASSWORD, LCD_OPERATOR_MODE_DRAW);	
;;;4068   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SYSTEM_INFO_2, LCD_OPERATOR_MODE_DRAW);
000054  f44f75ec          MOV      r5,#0x1d8
;;;4069   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
000058  f24016a7          MOV      r6,#0x1a7
;;;4070   
;;;4071   			break;
;;;4072   
;;;4073   		case MENU_ID_ROOT_SYSTEM_INFO:
;;;4074   
;;;4075   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4076   			
;;;4077   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_USER_PASSWORD_2, LCD_OPERATOR_MODE_DRAW);	
00005c  f44f77f8          MOV      r7,#0x1f0
000060  290b              CMP      r1,#0xb               ;3992
000062  d27d              BCS      |L170.352|
000064  e8dff001          TBB      [pc,r1]               ;3992
000068  06345678          DCB      0x06,0x34,0x56,0x78
00006c  9ec0e4fe          DCB      0x9e,0xc0,0xe4,0xfe
000070  fd7cfc00          DCB      0xfd,0x7c,0xfc,0x00
000074  9000              STR      r0,[sp,#0]            ;3996
000076  2382              MOVS     r3,#0x82              ;3996
000078  22e6              MOVS     r2,#0xe6              ;3996
00007a  2120              MOVS     r1,#0x20              ;3996
00007c  2046              MOVS     r0,#0x46              ;3996
00007e  f7fffffe          BL       LCD_DrawAreaColor
000082  2300              MOVS     r3,#0                 ;3998
000084  2272              MOVS     r2,#0x72              ;3998
000086  212b              MOVS     r1,#0x2b              ;3998
000088  200a              MOVS     r0,#0xa               ;3998
00008a  f7fffffe          BL       LCD_DrawBmpByID
00008e  2300              MOVS     r3,#0                 ;3999
000090  2278              MOVS     r2,#0x78              ;3999
000092  2151              MOVS     r1,#0x51              ;3999
000094  200c              MOVS     r0,#0xc               ;3999
000096  f7fffffe          BL       LCD_DrawBmpByID
00009a  2300              MOVS     r3,#0                 ;4000
00009c  2228              MOVS     r2,#0x28              ;4000
00009e  217c              MOVS     r1,#0x7c              ;4000
0000a0  200c              MOVS     r0,#0xc               ;4000
0000a2  f7fffffe          BL       LCD_DrawBmpByID
0000a6  2300              MOVS     r3,#0                 ;4002
0000a8  22cc              MOVS     r2,#0xcc              ;4002
0000aa  2158              MOVS     r1,#0x58              ;4002
0000ac  2075              MOVS     r0,#0x75              ;4002
0000ae  f7fffffe          BL       LCD_DrawBmpByID
0000b2  2300              MOVS     r3,#0                 ;4003
0000b4  2274              MOVS     r2,#0x74              ;4003
0000b6  2131              MOVS     r1,#0x31              ;4003
0000b8  205a              MOVS     r0,#0x5a              ;4003
0000ba  f7fffffe          BL       LCD_DrawBmpByID
0000be  b001              ADD      sp,sp,#4              ;4004
0000c0  2300              MOVS     r3,#0                 ;4004
0000c2  e8bd43f0          POP      {r4-r9,lr}            ;4004
0000c6  22cb              MOVS     r2,#0xcb              ;4004
0000c8  2180              MOVS     r1,#0x80              ;4004
0000ca  2046              MOVS     r0,#0x46              ;4004
0000cc  f7ffbffe          B.W      LCD_DrawBmpByID
0000d0  9000              STR      r0,[sp,#0]            ;4010
0000d2  2382              MOVS     r3,#0x82              ;4010
0000d4  22e6              MOVS     r2,#0xe6              ;4010
0000d6  2120              MOVS     r1,#0x20              ;4010
0000d8  2046              MOVS     r0,#0x46              ;4010
0000da  f7fffffe          BL       LCD_DrawAreaColor
0000de  2300              MOVS     r3,#0                 ;4012
0000e0  2273              MOVS     r2,#0x73              ;4012
0000e2  212b              MOVS     r1,#0x2b              ;4012
0000e4  200c              MOVS     r0,#0xc               ;4012
0000e6  f7fffffe          BL       LCD_DrawBmpByID
0000ea  2300              MOVS     r3,#0                 ;4013
0000ec  2277              MOVS     r2,#0x77              ;4013
0000ee  2151              MOVS     r1,#0x51              ;4013
0000f0  200a              MOVS     r0,#0xa               ;4013
0000f2  f7fffffe          BL       LCD_DrawBmpByID
0000f6  2300              MOVS     r3,#0                 ;4014
0000f8  2228              MOVS     r2,#0x28              ;4014
0000fa  217c              MOVS     r1,#0x7c              ;4014
0000fc  200c              MOVS     r0,#0xc               ;4014
0000fe  f7fffffe          BL       LCD_DrawBmpByID
000102  b001              ADD      sp,sp,#4              ;4016
000104  2300              MOVS     r3,#0                 ;4016
000106  e8bd43f0          POP      {r4-r9,lr}            ;4016
00010a  2276              MOVS     r2,#0x76              ;4016
00010c  2131              MOVS     r1,#0x31              ;4016
00010e  205a              MOVS     r0,#0x5a              ;4016
000110  f7ffbffe          B.W      LCD_DrawBmpByID
000114  9000              STR      r0,[sp,#0]            ;4021
000116  2382              MOVS     r3,#0x82              ;4021
000118  22e6              MOVS     r2,#0xe6              ;4021
00011a  2120              MOVS     r1,#0x20              ;4021
00011c  2046              MOVS     r0,#0x46              ;4021
00011e  f7fffffe          BL       LCD_DrawAreaColor
000122  2300              MOVS     r3,#0                 ;4023
000124  2273              MOVS     r2,#0x73              ;4023
000126  212b              MOVS     r1,#0x2b              ;4023
000128  200c              MOVS     r0,#0xc               ;4023
00012a  f7fffffe          BL       LCD_DrawBmpByID
00012e  2300              MOVS     r3,#0                 ;4024
000130  2278              MOVS     r2,#0x78              ;4024
000132  2151              MOVS     r1,#0x51              ;4024
000134  200c              MOVS     r0,#0xc               ;4024
000136  f7fffffe          BL       LCD_DrawBmpByID
00013a  2300              MOVS     r3,#0                 ;4025
00013c  2227              MOVS     r2,#0x27              ;4025
00013e  2177              MOVS     r1,#0x77              ;4025
000140  200a              MOVS     r0,#0xa               ;4025
000142  f7fffffe          BL       LCD_DrawBmpByID
000146  b001              ADD      sp,sp,#4              ;4027
000148  2300              MOVS     r3,#0                 ;4027
00014a  e8bd43f0          POP      {r4-r9,lr}            ;4027
00014e  2229              MOVS     r2,#0x29              ;4027
000150  2131              MOVS     r1,#0x31              ;4027
000152  205a              MOVS     r0,#0x5a              ;4027
000154  f7ffbffe          B.W      LCD_DrawBmpByID
000158  2382              MOVS     r3,#0x82              ;4032
00015a  22e6              MOVS     r2,#0xe6              ;4032
00015c  2120              MOVS     r1,#0x20              ;4032
00015e  e000              B        |L170.354|
                  |L170.352|
000160  e0ea              B        |L170.824|
                  |L170.354|
000162  9000              STR      r0,[sp,#0]            ;4032
000164  2046              MOVS     r0,#0x46              ;4032
000166  f7fffffe          BL       LCD_DrawAreaColor
00016a  2300              MOVS     r3,#0                 ;4034
00016c  f44f72f4          MOV      r2,#0x1e8             ;4034
000170  212b              MOVS     r1,#0x2b              ;4034
000172  200a              MOVS     r0,#0xa               ;4034
000174  f7fffffe          BL       LCD_DrawBmpByID
000178  2300              MOVS     r3,#0                 ;4035
00017a  2221              MOVS     r2,#0x21              ;4035
00017c  2151              MOVS     r1,#0x51              ;4035
00017e  200c              MOVS     r0,#0xc               ;4035
000180  f7fffffe          BL       LCD_DrawBmpByID
000184  2300              MOVS     r3,#0                 ;4036
000186  4622              MOV      r2,r4                 ;4036
000188  217c              MOVS     r1,#0x7c              ;4036
00018a  200c              MOVS     r0,#0xc               ;4036
00018c  f7fffffe          BL       LCD_DrawBmpByID
000190  b001              ADD      sp,sp,#4              ;4038
000192  2300              MOVS     r3,#0                 ;4038
000194  e8bd43f0          POP      {r4-r9,lr}            ;4038
000198  2131              MOVS     r1,#0x31              ;4038
00019a  f44f72b3          MOV      r2,#0x166             ;4038
00019e  205a              MOVS     r0,#0x5a              ;4038
0001a0  f7ffbffe          B.W      LCD_DrawBmpByID
0001a4  9000              STR      r0,[sp,#0]            ;4043
0001a6  2382              MOVS     r3,#0x82              ;4043
0001a8  22e6              MOVS     r2,#0xe6              ;4043
0001aa  2120              MOVS     r1,#0x20              ;4043
0001ac  2046              MOVS     r0,#0x46              ;4043
0001ae  f7fffffe          BL       LCD_DrawAreaColor
0001b2  2300              MOVS     r3,#0                 ;4045
0001b4  4642              MOV      r2,r8                 ;4045
0001b6  212b              MOVS     r1,#0x2b              ;4045
0001b8  200c              MOVS     r0,#0xc               ;4045
0001ba  f7fffffe          BL       LCD_DrawBmpByID
0001be  2300              MOVS     r3,#0                 ;4046
0001c0  2220              MOVS     r2,#0x20              ;4046
0001c2  2151              MOVS     r1,#0x51              ;4046
0001c4  200a              MOVS     r0,#0xa               ;4046
0001c6  f7fffffe          BL       LCD_DrawBmpByID
0001ca  2300              MOVS     r3,#0                 ;4047
0001cc  4622              MOV      r2,r4                 ;4047
0001ce  217c              MOVS     r1,#0x7c              ;4047
0001d0  200c              MOVS     r0,#0xc               ;4047
0001d2  f7fffffe          BL       LCD_DrawBmpByID
0001d6  b001              ADD      sp,sp,#4              ;4049
0001d8  2300              MOVS     r3,#0                 ;4049
0001da  e8bd43f0          POP      {r4-r9,lr}            ;4049
0001de  221f              MOVS     r2,#0x1f              ;4049
0001e0  2131              MOVS     r1,#0x31              ;4049
0001e2  2058              MOVS     r0,#0x58              ;4049
0001e4  f7ffbffe          B.W      LCD_DrawBmpByID
0001e8  9000              STR      r0,[sp,#0]            ;4054
0001ea  2382              MOVS     r3,#0x82              ;4054
0001ec  22e6              MOVS     r2,#0xe6              ;4054
0001ee  2120              MOVS     r1,#0x20              ;4054
0001f0  2046              MOVS     r0,#0x46              ;4054
0001f2  f7fffffe          BL       LCD_DrawAreaColor
0001f6  2300              MOVS     r3,#0                 ;4056
0001f8  4642              MOV      r2,r8                 ;4056
0001fa  212b              MOVS     r1,#0x2b              ;4056
0001fc  200c              MOVS     r0,#0xc               ;4056
0001fe  f7fffffe          BL       LCD_DrawBmpByID
000202  2300              MOVS     r3,#0                 ;4057
000204  2221              MOVS     r2,#0x21              ;4057
000206  2151              MOVS     r1,#0x51              ;4057
000208  200c              MOVS     r0,#0xc               ;4057
00020a  f7fffffe          BL       LCD_DrawBmpByID
00020e  2300              MOVS     r3,#0                 ;4058
000210  f44f72e4          MOV      r2,#0x1c8             ;4058
000214  2177              MOVS     r1,#0x77              ;4058
000216  200a              MOVS     r0,#0xa               ;4058
000218  f7fffffe          BL       LCD_DrawBmpByID
00021c  b001              ADD      sp,sp,#4              ;4060
00021e  2300              MOVS     r3,#0                 ;4060
000220  e8bd43f0          POP      {r4-r9,lr}            ;4060
000224  2131              MOVS     r1,#0x31              ;4060
000226  f44f72e5          MOV      r2,#0x1ca             ;4060
00022a  2058              MOVS     r0,#0x58              ;4060
00022c  f7ffbffe          B.W      LCD_DrawBmpByID
000230  9000              STR      r0,[sp,#0]            ;4065
000232  2382              MOVS     r3,#0x82              ;4065
000234  22e6              MOVS     r2,#0xe6              ;4065
000236  2120              MOVS     r1,#0x20              ;4065
000238  2046              MOVS     r0,#0x46              ;4065
00023a  f7fffffe          BL       LCD_DrawAreaColor
00023e  2300              MOVS     r3,#0                 ;4067
000240  f24012ef          MOV      r2,#0x1ef             ;4067
000244  212b              MOVS     r1,#0x2b              ;4067
000246  200a              MOVS     r0,#0xa               ;4067
000248  f7fffffe          BL       LCD_DrawBmpByID
00024c  2300              MOVS     r3,#0                 ;4068
00024e  462a              MOV      r2,r5                 ;4068
000250  2151              MOVS     r1,#0x51              ;4068
000252  200c              MOVS     r0,#0xc               ;4068
000254  f7fffffe          BL       LCD_DrawBmpByID
000258  2300              MOVS     r3,#0                 ;4069
00025a  4632              MOV      r2,r6                 ;4069
00025c  217c              MOVS     r1,#0x7c              ;4069
00025e  e002              B        |L170.614|
000260  e048              B        |L170.756|
000262  e023              B        |L170.684|
000264  e005              B        |L170.626|
                  |L170.614|
000266  b001              ADD      sp,sp,#4              ;4069
000268  200c              MOVS     r0,#0xc               ;4069
00026a  e8bd43f0          POP      {r4-r9,lr}            ;4069
00026e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L170.626|
000272  9000              STR      r0,[sp,#0]            ;4075
000274  2382              MOVS     r3,#0x82              ;4075
000276  22e6              MOVS     r2,#0xe6              ;4075
000278  2120              MOVS     r1,#0x20              ;4075
00027a  2046              MOVS     r0,#0x46              ;4075
00027c  f7fffffe          BL       LCD_DrawAreaColor
000280  2300              MOVS     r3,#0
000282  463a              MOV      r2,r7
000284  212b              MOVS     r1,#0x2b
000286  200c              MOVS     r0,#0xc
000288  f7fffffe          BL       LCD_DrawBmpByID
;;;4078   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_SYSTEM_INFO, LCD_OPERATOR_MODE_DRAW);
00028c  2300              MOVS     r3,#0
00028e  f24012d7          MOV      r2,#0x1d7
000292  2151              MOVS     r1,#0x51
000294  200a              MOVS     r0,#0xa
000296  f7fffffe          BL       LCD_DrawBmpByID
;;;4079   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
00029a  b001              ADD      sp,sp,#4
00029c  4632              MOV      r2,r6
00029e  e8bd43f0          POP      {r4-r9,lr}
0002a2  2300              MOVS     r3,#0
0002a4  217c              MOVS     r1,#0x7c
0002a6  200c              MOVS     r0,#0xc
0002a8  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L170.684|
;;;4080   
;;;4081   			break;
;;;4082   
;;;4083   		case MENU_ID_ROOT_SET_TIME:
;;;4084   
;;;4085   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
0002ac  9000              STR      r0,[sp,#0]
0002ae  2382              MOVS     r3,#0x82
0002b0  22e6              MOVS     r2,#0xe6
0002b2  2120              MOVS     r1,#0x20
0002b4  2046              MOVS     r0,#0x46
0002b6  f7fffffe          BL       LCD_DrawAreaColor
;;;4086   			
;;;4087   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_USER_PASSWORD_2, LCD_OPERATOR_MODE_DRAW);	
0002ba  2300              MOVS     r3,#0
0002bc  463a              MOV      r2,r7
0002be  212b              MOVS     r1,#0x2b
0002c0  200c              MOVS     r0,#0xc
0002c2  f7fffffe          BL       LCD_DrawBmpByID
;;;4088   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SYSTEM_INFO_2, LCD_OPERATOR_MODE_DRAW);
0002c6  2300              MOVS     r3,#0
0002c8  462a              MOV      r2,r5
0002ca  2151              MOVS     r1,#0x51
0002cc  200c              MOVS     r0,#0xc
0002ce  f7fffffe          BL       LCD_DrawBmpByID
;;;4089   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_SET_TIME, LCD_OPERATOR_MODE_DRAW);
0002d2  2300              MOVS     r3,#0
0002d4  f44f72d3          MOV      r2,#0x1a6
0002d8  2177              MOVS     r1,#0x77
0002da  200a              MOVS     r0,#0xa
0002dc  f7fffffe          BL       LCD_DrawBmpByID
;;;4090   
;;;4091   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_SET_TIME_TITILE, LCD_OPERATOR_MODE_DRAW);
0002e0  b001              ADD      sp,sp,#4
0002e2  2300              MOVS     r3,#0
0002e4  e8bd43f0          POP      {r4-r9,lr}
0002e8  2131              MOVS     r1,#0x31
0002ea  f44f72d4          MOV      r2,#0x1a8
0002ee  205a              MOVS     r0,#0x5a
0002f0  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L170.756|
;;;4092   			break;
;;;4093   
;;;4094   		/*case MENU_ID_ROOT_CONNECT_TO_APP:
;;;4095   
;;;4096   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4097   			
;;;4098   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_BLE, LCD_OPERATOR_MODE_DRAW);	
;;;4099   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_BACK_2, LCD_OPERATOR_MODE_DRAW);
;;;4100   
;;;4101   	
;;;4102   			break;*/
;;;4103   
;;;4104   		case MENU_ID_ROOT_BACK:
;;;4105   
;;;4106   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
0002f4  9000              STR      r0,[sp,#0]
0002f6  2382              MOVS     r3,#0x82
0002f8  22e6              MOVS     r2,#0xe6
0002fa  2120              MOVS     r1,#0x20
0002fc  2046              MOVS     r0,#0x46
0002fe  f7fffffe          BL       LCD_DrawAreaColor
;;;4107   			
;;;4108   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_BACK, LCD_OPERATOR_MODE_DRAW);	
000302  2300              MOVS     r3,#0
000304  2223              MOVS     r2,#0x23
000306  212b              MOVS     r1,#0x2b
000308  200a              MOVS     r0,#0xa
00030a  f7fffffe          BL       LCD_DrawBmpByID
;;;4109   			//LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_BACK, LCD_OPERATOR_MODE_DRAW);
;;;4110   
;;;4111   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_EXIT_X, UI_ITEM_COODINATE_MENU_M_PRESS_EXIT_Y, PIC_ID_M_PRESS_EXIT, LCD_OPERATOR_MODE_DRAW);
00030e  2300              MOVS     r3,#0
000310  22d4              MOVS     r2,#0xd4
000312  2196              MOVS     r1,#0x96
000314  20d3              MOVS     r0,#0xd3
000316  f7fffffe          BL       LCD_DrawBmpByID
;;;4112   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_BACK_3_X, UI_ITEM_COODINATE_MENU_BACK_3_Y, PIC_ID_BACK_3, LCD_OPERATOR_MODE_DRAW);
00031a  2300              MOVS     r3,#0
00031c  2225              MOVS     r2,#0x25
00031e  2150              MOVS     r1,#0x50
000320  2094              MOVS     r0,#0x94
000322  f7fffffe          BL       LCD_DrawBmpByID
;;;4113   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_EXIT_TITILE, LCD_OPERATOR_MODE_DRAW);
000326  b001              ADD      sp,sp,#4
000328  2300              MOVS     r3,#0
00032a  e8bd43f0          POP      {r4-r9,lr}
00032e  2280              MOVS     r2,#0x80
000330  2131              MOVS     r1,#0x31
000332  205a              MOVS     r0,#0x5a
000334  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L170.824|
;;;4114   			break;
;;;4115   		
;;;4116   		default:
;;;4117   			break;
;;;4118   	}
;;;4119   }
000338  e8bd83f8          POP      {r3-r9,pc}
;;;4120   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuTitle4||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMenuTitle4 PROC
;;;4120   
;;;4121   void DISPLAY_DrawMenuTitle4(uint32 ulBuff)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4122   {
000002  4604              MOV      r4,r0
;;;4123   	// 指示符
;;;4124   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_UP_CURSIE_X, UI_ITEM_COODINATE_MENU_UP_CURSIE_Y, PIC_ID_SANJIAO_2, LCD_OPERATOR_MODE_DRAW);
000004  2300              MOVS     r3,#0
000006  f24012a3          MOV      r2,#0x1a3
00000a  211d              MOVS     r1,#0x1d
00000c  2013              MOVS     r0,#0x13
00000e  f7fffffe          BL       LCD_DrawBmpByID
;;;4125   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DOWN_CURSIE_X, UI_ITEM_COODINATE_MENU_DOWN_CURSIE_Y, PIC_ID_SANJIAO, LCD_OPERATOR_MODE_DRAW);
000012  2300              MOVS     r3,#0
000014  f44f72d1          MOV      r2,#0x1a2
000018  219c              MOVS     r1,#0x9c
00001a  2013              MOVS     r0,#0x13
00001c  f7fffffe          BL       LCD_DrawBmpByID
;;;4126   
;;;4127   	// 背景色
;;;4128   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);	
000020  2301              MOVS     r3,#1
000022  2272              MOVS     r2,#0x72
000024  212b              MOVS     r1,#0x2b
000026  200a              MOVS     r0,#0xa
000028  f7fffffe          BL       LCD_DrawBmpByID
;;;4129   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);
00002c  2301              MOVS     r3,#1
00002e  2272              MOVS     r2,#0x72
000030  2151              MOVS     r1,#0x51
000032  200a              MOVS     r0,#0xa
000034  f7fffffe          BL       LCD_DrawBmpByID
;;;4130   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_BACKGROUND);
000038  2301              MOVS     r3,#1
00003a  2272              MOVS     r2,#0x72
00003c  2177              MOVS     r1,#0x77
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       LCD_DrawBmpByID
;;;4131   	switch ((MENU_ID_E)ulBuff)
000044  b2e1              UXTB     r1,r4
;;;4132   	{
;;;4133   		case MENU_ID_ROOT_CLEAR_DATA:
;;;4134   			
;;;4135   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
000046  f64100e4          MOV      r0,#0x18e4
;;;4136   			
;;;4137   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_CLEAR, LCD_OPERATOR_MODE_DRAW);	
;;;4138   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_DISPLAY_UNIT_2, LCD_OPERATOR_MODE_DRAW);
;;;4139   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACKLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;4140   
;;;4141   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_PRESS_X, UI_ITEM_COODINATE_MENU_CLEAR_PRESS_Y, PIC_ID_M_CLEAR_PRESS, LCD_OPERATOR_MODE_DRAW);
;;;4142   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_CLEAR_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4143   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_X, UI_ITEM_COODINATE_MENU_CLEAR_IT_WILL_Y, PIC_ID_M_CLEAR_IT_WILL, LCD_OPERATOR_MODE_DRAW);
;;;4144   		
;;;4145   			break;
;;;4146   
;;;4147   		case MENU_ID_ROOT_DISPLAY_UNIT:
;;;4148   			
;;;4149   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4150   
;;;4151   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_CLEAR_2, LCD_OPERATOR_MODE_DRAW);	
;;;4152   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_DISPLAY_UNIT, LCD_OPERATOR_MODE_DRAW);
;;;4153   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BACKLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;4154   
;;;4155   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_DISPLAY_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4156   			break;
;;;4157   
;;;4158   		case MENU_ID_ROOT_BACKLIGHT:
;;;4159   			
;;;4160   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4161   
;;;4162   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_CLEAR_2, LCD_OPERATOR_MODE_DRAW);	
;;;4163   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_DISPLAY_UNIT_2, LCD_OPERATOR_MODE_DRAW);
;;;4164   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_BACKLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;4165   
;;;4166   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_BACKLIGHT_BRIGHTNESS_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4167   			break;
;;;4168   
;;;4169   		case MENU_ID_ROOT_POWEROFF_TIME:
;;;4170   			
;;;4171   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4172   			
;;;4173   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_TIME_OFF, LCD_OPERATOR_MODE_DRAW);	
;;;4174   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_AUTOLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;4175   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SPEED_LIMIT_2, LCD_OPERATOR_MODE_DRAW);
00004a  f24014c9          MOV      r4,#0x1c9
;;;4176   
;;;4177   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_POWER_OFF_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4178   			break;
;;;4179   
;;;4180   		case MENU_ID_ROOT_AUTO_LIGHT:
;;;4181   			
;;;4182   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4183   			
;;;4184   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_TIME_OFF_2, LCD_OPERATOR_MODE_DRAW);	
00004e  f24015e9          MOV      r5,#0x1e9
;;;4185   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_AUTOLIGHT, LCD_OPERATOR_MODE_DRAW);
;;;4186   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SPEED_LIMIT_2, LCD_OPERATOR_MODE_DRAW);
;;;4187   
;;;4188   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME2_X, UI_ITEM_COODINATE_MENU_DATA_NAME2_Y, PIC_ID_AUTO_HEADLIGHT_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4189   			break;
;;;4190   
;;;4191   		case MENU_ID_ROOT_SPEED_LIMIT:
;;;4192   
;;;4193   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4194   			
;;;4195   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_TIME_OFF_2, LCD_OPERATOR_MODE_DRAW);	
;;;4196   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_AUTOLIGHT_2, LCD_OPERATOR_MODE_DRAW);
;;;4197   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_SPEED_LIMIT, LCD_OPERATOR_MODE_DRAW);
;;;4198   
;;;4199   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME2_X, UI_ITEM_COODINATE_MENU_DATA_NAME2_Y, PIC_ID_SPEED_LIMIT_TITILE, LCD_OPERATOR_MODE_DRAW);
;;;4200   			
;;;4201   		  break;
;;;4202   
;;;4203   		/*case MENU_ID_ROOT_USER_PASSWORD:
;;;4204   
;;;4205   			LCD_DrawAreaColor(70, 32, 220, 130, LCD_COLOR_BACKGROUND);
;;;4206   			
;;;4207   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_USER_PASSWORD, LCD_OPERATOR_MODE_DRAW);	
;;;4208   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SYSTEM_INFO_2, LCD_OPERATOR_MODE_DRAW);
;;;4209   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
;;;4210   
;;;4211   			break;*/
;;;4212   
;;;4213   		case MENU_ID_ROOT_SYSTEM_INFO:
;;;4214   
;;;4215   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4216   			
;;;4217   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_SYSTEM_INFO, LCD_OPERATOR_MODE_DRAW);	
;;;4218   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
000052  f24016a7          MOV      r6,#0x1a7
;;;4219   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BLE_2, LCD_OPERATOR_MODE_DRAW);
;;;4220   
;;;4221   			break;
;;;4222   
;;;4223   		case MENU_ID_ROOT_SET_TIME:
;;;4224   
;;;4225   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
;;;4226   			
;;;4227   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_SYSTEM_INFO_2, LCD_OPERATOR_MODE_DRAW);	
000056  f44f77ec          MOV      r7,#0x1d8
00005a  290b              CMP      r1,#0xb               ;4131
00005c  d27e              BCS      |L171.348|
00005e  e8dff001          TBB      [pc,r1]               ;4131
000062  0634              DCB      0x06,0x34
000064  56789ec0          DCB      0x56,0x78,0x9e,0xc0
000068  7de4fdfc          DCB      0x7d,0xe4,0xfd,0xfc
00006c  fb00              DCB      0xfb,0x00
00006e  9000              STR      r0,[sp,#0]            ;4135
000070  2382              MOVS     r3,#0x82              ;4135
000072  22e6              MOVS     r2,#0xe6              ;4135
000074  2120              MOVS     r1,#0x20              ;4135
000076  2046              MOVS     r0,#0x46              ;4135
000078  f7fffffe          BL       LCD_DrawAreaColor
00007c  2300              MOVS     r3,#0                 ;4137
00007e  2272              MOVS     r2,#0x72              ;4137
000080  212b              MOVS     r1,#0x2b              ;4137
000082  200a              MOVS     r0,#0xa               ;4137
000084  f7fffffe          BL       LCD_DrawBmpByID
000088  2300              MOVS     r3,#0                 ;4138
00008a  2278              MOVS     r2,#0x78              ;4138
00008c  2151              MOVS     r1,#0x51              ;4138
00008e  200c              MOVS     r0,#0xc               ;4138
000090  f7fffffe          BL       LCD_DrawBmpByID
000094  2300              MOVS     r3,#0                 ;4139
000096  2228              MOVS     r2,#0x28              ;4139
000098  217c              MOVS     r1,#0x7c              ;4139
00009a  200c              MOVS     r0,#0xc               ;4139
00009c  f7fffffe          BL       LCD_DrawBmpByID
0000a0  2300              MOVS     r3,#0                 ;4141
0000a2  22cc              MOVS     r2,#0xcc              ;4141
0000a4  2158              MOVS     r1,#0x58              ;4141
0000a6  2075              MOVS     r0,#0x75              ;4141
0000a8  f7fffffe          BL       LCD_DrawBmpByID
0000ac  2300              MOVS     r3,#0                 ;4142
0000ae  2274              MOVS     r2,#0x74              ;4142
0000b0  2131              MOVS     r1,#0x31              ;4142
0000b2  205a              MOVS     r0,#0x5a              ;4142
0000b4  f7fffffe          BL       LCD_DrawBmpByID
0000b8  b001              ADD      sp,sp,#4              ;4143
0000ba  2300              MOVS     r3,#0                 ;4143
0000bc  e8bd40f0          POP      {r4-r7,lr}            ;4143
0000c0  22cb              MOVS     r2,#0xcb              ;4143
0000c2  2180              MOVS     r1,#0x80              ;4143
0000c4  2046              MOVS     r0,#0x46              ;4143
0000c6  f7ffbffe          B.W      LCD_DrawBmpByID
0000ca  9000              STR      r0,[sp,#0]            ;4149
0000cc  2382              MOVS     r3,#0x82              ;4149
0000ce  22e6              MOVS     r2,#0xe6              ;4149
0000d0  2120              MOVS     r1,#0x20              ;4149
0000d2  2046              MOVS     r0,#0x46              ;4149
0000d4  f7fffffe          BL       LCD_DrawAreaColor
0000d8  2300              MOVS     r3,#0                 ;4151
0000da  2273              MOVS     r2,#0x73              ;4151
0000dc  212b              MOVS     r1,#0x2b              ;4151
0000de  200c              MOVS     r0,#0xc               ;4151
0000e0  f7fffffe          BL       LCD_DrawBmpByID
0000e4  2300              MOVS     r3,#0                 ;4152
0000e6  2277              MOVS     r2,#0x77              ;4152
0000e8  2151              MOVS     r1,#0x51              ;4152
0000ea  200a              MOVS     r0,#0xa               ;4152
0000ec  f7fffffe          BL       LCD_DrawBmpByID
0000f0  2300              MOVS     r3,#0                 ;4153
0000f2  2228              MOVS     r2,#0x28              ;4153
0000f4  217c              MOVS     r1,#0x7c              ;4153
0000f6  200c              MOVS     r0,#0xc               ;4153
0000f8  f7fffffe          BL       LCD_DrawBmpByID
0000fc  b001              ADD      sp,sp,#4              ;4155
0000fe  2300              MOVS     r3,#0                 ;4155
000100  e8bd40f0          POP      {r4-r7,lr}            ;4155
000104  2276              MOVS     r2,#0x76              ;4155
000106  2131              MOVS     r1,#0x31              ;4155
000108  205a              MOVS     r0,#0x5a              ;4155
00010a  f7ffbffe          B.W      LCD_DrawBmpByID
00010e  9000              STR      r0,[sp,#0]            ;4160
000110  2382              MOVS     r3,#0x82              ;4160
000112  22e6              MOVS     r2,#0xe6              ;4160
000114  2120              MOVS     r1,#0x20              ;4160
000116  2046              MOVS     r0,#0x46              ;4160
000118  f7fffffe          BL       LCD_DrawAreaColor
00011c  2300              MOVS     r3,#0                 ;4162
00011e  2273              MOVS     r2,#0x73              ;4162
000120  212b              MOVS     r1,#0x2b              ;4162
000122  200c              MOVS     r0,#0xc               ;4162
000124  f7fffffe          BL       LCD_DrawBmpByID
000128  2300              MOVS     r3,#0                 ;4163
00012a  2278              MOVS     r2,#0x78              ;4163
00012c  2151              MOVS     r1,#0x51              ;4163
00012e  200c              MOVS     r0,#0xc               ;4163
000130  f7fffffe          BL       LCD_DrawBmpByID
000134  2300              MOVS     r3,#0                 ;4164
000136  2227              MOVS     r2,#0x27              ;4164
000138  2177              MOVS     r1,#0x77              ;4164
00013a  200a              MOVS     r0,#0xa               ;4164
00013c  f7fffffe          BL       LCD_DrawBmpByID
000140  b001              ADD      sp,sp,#4              ;4166
000142  2300              MOVS     r3,#0                 ;4166
000144  e8bd40f0          POP      {r4-r7,lr}            ;4166
000148  2229              MOVS     r2,#0x29              ;4166
00014a  2131              MOVS     r1,#0x31              ;4166
00014c  205a              MOVS     r0,#0x5a              ;4166
00014e  f7ffbffe          B.W      LCD_DrawBmpByID
000152  2382              MOVS     r3,#0x82              ;4171
000154  22e6              MOVS     r2,#0xe6              ;4171
000156  2120              MOVS     r1,#0x20              ;4171
000158  9000              STR      r0,[sp,#0]            ;4171
00015a  e000              B        |L171.350|
                  |L171.348|
00015c  e0e8              B        |L171.816|
                  |L171.350|
00015e  2046              MOVS     r0,#0x46              ;4171
000160  f7fffffe          BL       LCD_DrawAreaColor
000164  2300              MOVS     r3,#0                 ;4173
000166  f44f72f4          MOV      r2,#0x1e8             ;4173
00016a  212b              MOVS     r1,#0x2b              ;4173
00016c  200a              MOVS     r0,#0xa               ;4173
00016e  f7fffffe          BL       LCD_DrawBmpByID
000172  2300              MOVS     r3,#0                 ;4174
000174  2221              MOVS     r2,#0x21              ;4174
000176  2151              MOVS     r1,#0x51              ;4174
000178  200c              MOVS     r0,#0xc               ;4174
00017a  f7fffffe          BL       LCD_DrawBmpByID
00017e  2300              MOVS     r3,#0                 ;4175
000180  4622              MOV      r2,r4                 ;4175
000182  217c              MOVS     r1,#0x7c              ;4175
000184  200c              MOVS     r0,#0xc               ;4175
000186  f7fffffe          BL       LCD_DrawBmpByID
00018a  b001              ADD      sp,sp,#4              ;4177
00018c  2300              MOVS     r3,#0                 ;4177
00018e  e8bd40f0          POP      {r4-r7,lr}            ;4177
000192  2131              MOVS     r1,#0x31              ;4177
000194  f44f72b3          MOV      r2,#0x166             ;4177
000198  205a              MOVS     r0,#0x5a              ;4177
00019a  f7ffbffe          B.W      LCD_DrawBmpByID
00019e  9000              STR      r0,[sp,#0]            ;4182
0001a0  2382              MOVS     r3,#0x82              ;4182
0001a2  22e6              MOVS     r2,#0xe6              ;4182
0001a4  2120              MOVS     r1,#0x20              ;4182
0001a6  2046              MOVS     r0,#0x46              ;4182
0001a8  f7fffffe          BL       LCD_DrawAreaColor
0001ac  2300              MOVS     r3,#0                 ;4184
0001ae  462a              MOV      r2,r5                 ;4184
0001b0  212b              MOVS     r1,#0x2b              ;4184
0001b2  200c              MOVS     r0,#0xc               ;4184
0001b4  f7fffffe          BL       LCD_DrawBmpByID
0001b8  2300              MOVS     r3,#0                 ;4185
0001ba  2220              MOVS     r2,#0x20              ;4185
0001bc  2151              MOVS     r1,#0x51              ;4185
0001be  200a              MOVS     r0,#0xa               ;4185
0001c0  f7fffffe          BL       LCD_DrawBmpByID
0001c4  2300              MOVS     r3,#0                 ;4186
0001c6  4622              MOV      r2,r4                 ;4186
0001c8  217c              MOVS     r1,#0x7c              ;4186
0001ca  200c              MOVS     r0,#0xc               ;4186
0001cc  f7fffffe          BL       LCD_DrawBmpByID
0001d0  b001              ADD      sp,sp,#4              ;4188
0001d2  2300              MOVS     r3,#0                 ;4188
0001d4  e8bd40f0          POP      {r4-r7,lr}            ;4188
0001d8  221f              MOVS     r2,#0x1f              ;4188
0001da  2131              MOVS     r1,#0x31              ;4188
0001dc  2058              MOVS     r0,#0x58              ;4188
0001de  f7ffbffe          B.W      LCD_DrawBmpByID
0001e2  9000              STR      r0,[sp,#0]            ;4193
0001e4  2382              MOVS     r3,#0x82              ;4193
0001e6  22e6              MOVS     r2,#0xe6              ;4193
0001e8  2120              MOVS     r1,#0x20              ;4193
0001ea  2046              MOVS     r0,#0x46              ;4193
0001ec  f7fffffe          BL       LCD_DrawAreaColor
0001f0  2300              MOVS     r3,#0                 ;4195
0001f2  462a              MOV      r2,r5                 ;4195
0001f4  212b              MOVS     r1,#0x2b              ;4195
0001f6  200c              MOVS     r0,#0xc               ;4195
0001f8  f7fffffe          BL       LCD_DrawBmpByID
0001fc  2300              MOVS     r3,#0                 ;4196
0001fe  2221              MOVS     r2,#0x21              ;4196
000200  2151              MOVS     r1,#0x51              ;4196
000202  200c              MOVS     r0,#0xc               ;4196
000204  f7fffffe          BL       LCD_DrawBmpByID
000208  2300              MOVS     r3,#0                 ;4197
00020a  f44f72e4          MOV      r2,#0x1c8             ;4197
00020e  2177              MOVS     r1,#0x77              ;4197
000210  200a              MOVS     r0,#0xa               ;4197
000212  f7fffffe          BL       LCD_DrawBmpByID
000216  b001              ADD      sp,sp,#4              ;4199
000218  2300              MOVS     r3,#0                 ;4199
00021a  e8bd40f0          POP      {r4-r7,lr}            ;4199
00021e  2131              MOVS     r1,#0x31              ;4199
000220  f44f72e5          MOV      r2,#0x1ca             ;4199
000224  2058              MOVS     r0,#0x58              ;4199
000226  f7ffbffe          B.W      LCD_DrawBmpByID
00022a  9000              STR      r0,[sp,#0]            ;4215
00022c  2382              MOVS     r3,#0x82              ;4215
00022e  22e6              MOVS     r2,#0xe6              ;4215
000230  2120              MOVS     r1,#0x20              ;4215
000232  2046              MOVS     r0,#0x46              ;4215
000234  f7fffffe          BL       LCD_DrawAreaColor
000238  2300              MOVS     r3,#0                 ;4217
00023a  f24012d7          MOV      r2,#0x1d7             ;4217
00023e  212b              MOVS     r1,#0x2b              ;4217
000240  200a              MOVS     r0,#0xa               ;4217
000242  f7fffffe          BL       LCD_DrawBmpByID
000246  2300              MOVS     r3,#0                 ;4218
000248  4632              MOV      r2,r6                 ;4218
00024a  2151              MOVS     r1,#0x51              ;4218
00024c  200c              MOVS     r0,#0xc               ;4218
00024e  f7fffffe          BL       LCD_DrawBmpByID
000252  2300              MOVS     r3,#0                 ;4219
000254  2253              MOVS     r2,#0x53              ;4219
000256  e002              B        |L171.606|
000258  e048              B        |L171.748|
00025a  e02b              B        |L171.692|
00025c  e006              B        |L171.620|
                  |L171.606|
00025e  b001              ADD      sp,sp,#4              ;4219
000260  217c              MOVS     r1,#0x7c              ;4219
000262  e8bd40f0          POP      {r4-r7,lr}            ;4219
000266  200c              MOVS     r0,#0xc               ;4219
000268  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L171.620|
00026c  9000              STR      r0,[sp,#0]            ;4225
00026e  2382              MOVS     r3,#0x82              ;4225
000270  22e6              MOVS     r2,#0xe6              ;4225
000272  2120              MOVS     r1,#0x20              ;4225
000274  2046              MOVS     r0,#0x46              ;4225
000276  f7fffffe          BL       LCD_DrawAreaColor
00027a  2300              MOVS     r3,#0
00027c  463a              MOV      r2,r7
00027e  212b              MOVS     r1,#0x2b
000280  200c              MOVS     r0,#0xc
000282  f7fffffe          BL       LCD_DrawBmpByID
;;;4228   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_S_X, UI_ITEM_COODINATE_MENU_TITILE_2_S_Y, PIC_ID_SET_TIME, LCD_OPERATOR_MODE_DRAW);
000286  2300              MOVS     r3,#0
000288  f44f72d3          MOV      r2,#0x1a6
00028c  2151              MOVS     r1,#0x51
00028e  200a              MOVS     r0,#0xa
000290  f7fffffe          BL       LCD_DrawBmpByID
;;;4229   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_G_X, UI_ITEM_COODINATE_MENU_TITILE_3_G_Y, PIC_ID_BLE_2, LCD_OPERATOR_MODE_DRAW);
000294  2300              MOVS     r3,#0
000296  2253              MOVS     r2,#0x53
000298  217c              MOVS     r1,#0x7c
00029a  200c              MOVS     r0,#0xc
00029c  f7fffffe          BL       LCD_DrawBmpByID
;;;4230   
;;;4231   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_SET_TIME_TITILE, LCD_OPERATOR_MODE_DRAW);
0002a0  b001              ADD      sp,sp,#4
0002a2  2300              MOVS     r3,#0
0002a4  e8bd40f0          POP      {r4-r7,lr}
0002a8  2131              MOVS     r1,#0x31
0002aa  f44f72d4          MOV      r2,#0x1a8
0002ae  205a              MOVS     r0,#0x5a
0002b0  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L171.692|
;;;4232   			break;
;;;4233   
;;;4234   		case MENU_ID_ROOT_CONNECT_TO_APP:
;;;4235   
;;;4236   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
0002b4  9000              STR      r0,[sp,#0]
0002b6  2382              MOVS     r3,#0x82
0002b8  22e6              MOVS     r2,#0xe6
0002ba  2120              MOVS     r1,#0x20
0002bc  2046              MOVS     r0,#0x46
0002be  f7fffffe          BL       LCD_DrawAreaColor
;;;4237   			
;;;4238   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_G_X, UI_ITEM_COODINATE_MENU_TITILE_1_G_Y, PIC_ID_SYSTEM_INFO_2, LCD_OPERATOR_MODE_DRAW);	
0002c2  2300              MOVS     r3,#0
0002c4  463a              MOV      r2,r7
0002c6  212b              MOVS     r1,#0x2b
0002c8  200c              MOVS     r0,#0xc
0002ca  f7fffffe          BL       LCD_DrawBmpByID
;;;4239   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_2_G_X, UI_ITEM_COODINATE_MENU_TITILE_2_G_Y, PIC_ID_SET_TIME_2, LCD_OPERATOR_MODE_DRAW);
0002ce  2300              MOVS     r3,#0
0002d0  4632              MOV      r2,r6
0002d2  2151              MOVS     r1,#0x51
0002d4  200c              MOVS     r0,#0xc
0002d6  f7fffffe          BL       LCD_DrawBmpByID
;;;4240   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_3_S_X, UI_ITEM_COODINATE_MENU_TITILE_3_S_Y, PIC_ID_BLE, LCD_OPERATOR_MODE_DRAW);
0002da  b001              ADD      sp,sp,#4
0002dc  2300              MOVS     r3,#0
0002de  e8bd40f0          POP      {r4-r7,lr}
0002e2  2252              MOVS     r2,#0x52
0002e4  2177              MOVS     r1,#0x77
0002e6  200a              MOVS     r0,#0xa
0002e8  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L171.748|
;;;4241   	
;;;4242   			break;
;;;4243   
;;;4244   		case MENU_ID_ROOT_BACK:
;;;4245   
;;;4246   			LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
0002ec  9000              STR      r0,[sp,#0]
0002ee  2382              MOVS     r3,#0x82
0002f0  22e6              MOVS     r2,#0xe6
0002f2  2120              MOVS     r1,#0x20
0002f4  2046              MOVS     r0,#0x46
0002f6  f7fffffe          BL       LCD_DrawAreaColor
;;;4247   			
;;;4248   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_TITILE_1_S_X, UI_ITEM_COODINATE_MENU_TITILE_1_S_Y, PIC_ID_BACK, LCD_OPERATOR_MODE_DRAW);	
0002fa  2300              MOVS     r3,#0
0002fc  2223              MOVS     r2,#0x23
0002fe  212b              MOVS     r1,#0x2b
000300  200a              MOVS     r0,#0xa
000302  f7fffffe          BL       LCD_DrawBmpByID
;;;4249   			
;;;4250   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PRESS_EXIT_X, UI_ITEM_COODINATE_MENU_M_PRESS_EXIT_Y, PIC_ID_M_PRESS_EXIT, LCD_OPERATOR_MODE_DRAW);
000306  2300              MOVS     r3,#0
000308  22d4              MOVS     r2,#0xd4
00030a  2196              MOVS     r1,#0x96
00030c  20d3              MOVS     r0,#0xd3
00030e  f7fffffe          BL       LCD_DrawBmpByID
;;;4251   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_BACK_3_X, UI_ITEM_COODINATE_MENU_BACK_3_Y, PIC_ID_BACK_3, LCD_OPERATOR_MODE_DRAW);
000312  2300              MOVS     r3,#0
000314  2225              MOVS     r2,#0x25
000316  2150              MOVS     r1,#0x50
000318  2094              MOVS     r0,#0x94
00031a  f7fffffe          BL       LCD_DrawBmpByID
;;;4252   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_DATA_NAME_X, UI_ITEM_COODINATE_MENU_DATA_NAME_Y, PIC_ID_EXIT_TITILE, LCD_OPERATOR_MODE_DRAW);
00031e  b001              ADD      sp,sp,#4
000320  2300              MOVS     r3,#0
000322  e8bd40f0          POP      {r4-r7,lr}
000326  2280              MOVS     r2,#0x80
000328  2131              MOVS     r1,#0x31
00032a  205a              MOVS     r0,#0x5a
00032c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L171.816|
;;;4253   			break;
;;;4254   		default:
;;;4255   			break;
;;;4256   	}
;;;4257   }
000330  bdf8              POP      {r3-r7,pc}
;;;4258   
                          ENDP


                          AREA ||i.DISPLAY_DrawMenuUserPassword||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawMenuUserPassword PROC
;;;4388   // 开机密码菜单
;;;4389   void DISPLAY_DrawMenuUserPassword(uint32 ulBuff)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;4390   {
;;;4391   	BOOL passwordSwitch = (BOOL)(ulBuff & 0xFF);                   // 密码开关
000004  b2c2              UXTB     r2,r0
;;;4392   	uint16 passwordNumber = (uint16)((ulBuff >> 16) & 0xFFFF);   // 密码数字
000006  0c01              LSRS     r1,r0,#16
;;;4393   	uint8 numberCursor = (uint8)((ulBuff >> 12) & 0x0F);   // 数字光标
000008  f3c03803          UBFX     r8,r0,#12,#4
;;;4394   	uint8 menuCursor = (uint8)((ulBuff >> 8) & 0x0F);     // 菜单光标
00000c  f3c02403          UBFX     r4,r0,#8,#4
;;;4395   	uint8 value1 = 0, value2 = 0, value3 = 0, value4 = 0;
;;;4396   	
;;;4397   	value1 = passwordNumber / 1000;
000010  f44f707a          MOV      r0,#0x3e8
000014  fbb1f3f0          UDIV     r3,r1,r0
000018  f00309ff          AND      r9,r3,#0xff
;;;4398   	value2 = (passwordNumber % 1000) / 100;
00001c  fbb1f3f0          UDIV     r3,r1,r0
000020  fb001313          MLS      r3,r0,r3,r1
000024  2064              MOVS     r0,#0x64
000026  fbb3f3f0          UDIV     r3,r3,r0
00002a  b2dd              UXTB     r5,r3
;;;4399   	value3 = (passwordNumber % 100) / 10;
00002c  fbb1f3f0          UDIV     r3,r1,r0
000030  fb001313          MLS      r3,r0,r3,r1
000034  200a              MOVS     r0,#0xa
000036  fbb3f6f0          UDIV     r6,r3,r0
;;;4400   	value4 = passwordNumber % 10;
00003a  fbb1f3f0          UDIV     r3,r1,r0
00003e  fb001713          MLS      r7,r0,r3,r1
;;;4401   
;;;4402   	CHECK_PARAM_OVER_RETURN(passwordNumber, 9999);
000042  f242700f          MOV      r0,#0x270f
000046  4281              CMP      r1,r0
000048  d87e              BHI      |L172.328|
;;;4403   	
;;;4404   	// 有开机密码
;;;4405   	if (!passwordSwitch)
;;;4406   	{
;;;4407   		// 标题字体
;;;4408   		if(displayStateCB.menu.root.enterFlag <= 1)
;;;4409   		{
;;;4410   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_TITILE_X, UI_ITEM_COODINATE_MENU_PASSWORD_TITILE_Y, PIC_ID_PASSWORD_TITILE, LCD_OPERATOR_MODE_DRAW);
00004a  f2401149          MOV      r1,#0x149
;;;4411   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CHANGE_PASSWORD_TITILE_X, UI_ITEM_COODINATE_MENU_CHANGE_PASSWORD_TITILE_Y, PIC_ID_CHANGE_PASSWORD_TITILE_W, LCD_OPERATOR_MODE_DRAW);
;;;4412   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_BACK_X, UI_ITEM_COODINATE_MENU_PASSWORD_BACK_Y, PIC_ID_PASSWORD_BACK, LCD_OPERATOR_MODE_DRAW);
00004e  f2401b3b          MOV      r11,#0x13b
000052  b3ba              CBZ      r2,|L172.196|
;;;4413   			
;;;4414   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_SWITCH_X, UI_ITEM_COODINATE_MENU_PASSWORD_SWITCH_Y, PIC_ID_G_ON, LCD_OPERATOR_MODE_DRAW);
;;;4415   
;;;4416   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_BACKGROUND);
;;;4417   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_BACKGROUND);
;;;4418   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_BACKGROUND);
;;;4419   		}
;;;4420   		
;;;4421   		switch (menuCursor)
;;;4422   		{
;;;4423   			case 0:
;;;4424   				if (0 == numberCursor) 
;;;4425   				{
;;;4426   					 //LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_SWITCH_CURSOR_X, UI_ITEM_COODINATE_MENU_PASSWORD_SWITCH_CURSOR_Y, PIC_ID_PASSWORD_HENG, LCD_OPERATOR_MODE_DRAW);
;;;4427   				}		
;;;4428   						
;;;4429   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_DRAW);
;;;4430   				break;
;;;4431   
;;;4432   			case 1:
;;;4433            
;;;4434   				switch (numberCursor)
;;;4435   				{	
;;;4436   					case 0:
;;;4437   						
;;;4438   						// 密码下标
;;;4439   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4440   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4441   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4442   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4443   							
;;;4444   						// 密码4位数字显示
;;;4445   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PASSWORD_BG_X, UI_ITEM_COODINATE_MENU_M_PASSWORD_BG_Y, PIC_ID_M_PASSWORD_BG, LCD_OPERATOR_MODE_DRAW);
;;;4446   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_NUM1_X, UI_ITEM_COODINATE_MENU_PASSWORD_NUM1_Y, (PIC_ID_E)(value1 + PIC_ID_PASSWORD_0), LCD_OPERATOR_MODE_DRAW);
;;;4447   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_NUM2_X, UI_ITEM_COODINATE_MENU_PASSWORD_NUM2_Y, (PIC_ID_E)(value2 + PIC_ID_PASSWORD_0), LCD_OPERATOR_MODE_DRAW);
;;;4448   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_NUM3_X, UI_ITEM_COODINATE_MENU_PASSWORD_NUM3_Y, (PIC_ID_E)(value3 + PIC_ID_PASSWORD_0), LCD_OPERATOR_MODE_DRAW);
;;;4449   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_NUM4_X, UI_ITEM_COODINATE_MENU_PASSWORD_NUM4_Y, (PIC_ID_E)(value4 + PIC_ID_PASSWORD_0), LCD_OPERATOR_MODE_DRAW);
;;;4450   							
;;;4451   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_DRAW);
;;;4452   						break;
;;;4453   
;;;4454   					case 1:
;;;4455   						
;;;4456   						// 密码下标
;;;4457   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4458   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4459   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4460   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4461   							
;;;4462   						// 密码4位数字显示
;;;4463   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_NUM2_X, UI_ITEM_COODINATE_MENU_PASSWORD_NUM2_Y, (PIC_ID_E)(value2 + PIC_ID_PASSWORD_0), LCD_OPERATOR_MODE_DRAW);
;;;4464   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_DRAW);
;;;4465   						break;
;;;4466   
;;;4467   					case 2:
;;;4468   						
;;;4469   						// 密码下标
;;;4470   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4471   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4472   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4473   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4474   							
;;;4475   						// 密码4位数字显示
;;;4476   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_NUM3_X, UI_ITEM_COODINATE_MENU_PASSWORD_NUM3_Y, (PIC_ID_E)(value3 + PIC_ID_PASSWORD_0), LCD_OPERATOR_MODE_DRAW);
;;;4477   						
;;;4478   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_DRAW);
;;;4479   						break;
;;;4480   
;;;4481   					case 3:
;;;4482   							
;;;4483   						// 密码下标
;;;4484   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR3_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4485   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR4_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4486   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR5_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4487   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND);
;;;4488   							
;;;4489   						// 密码4位数字显示
;;;4490   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_NUM4_X, UI_ITEM_COODINATE_MENU_PASSWORD_NUM4_Y, (PIC_ID_E)(value4 + PIC_ID_PASSWORD_0), LCD_OPERATOR_MODE_DRAW);
;;;4491   						
;;;4492   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR6_Y, PIC_ID_MENU_HENG_S, LCD_OPERATOR_MODE_DRAW);
;;;4493   						break;
;;;4494   					
;;;4495   					case 4:
;;;4496   						
;;;4497   						// 修改成功提示部分，2秒后恢复
;;;4498   						displayStateCB.menu.root.password.numberCursor = 0x0F;  // 防止下次再次进入
;;;4499   						LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_PASSWORD_BG_X, UI_ITEM_COODINATE_MENU_M_PASSWORD_BG_Y, PIC_ID_M_PASS_SUCCEEDED, LCD_OPERATOR_MODE_DRAW);
;;;4500   						
;;;4501   //						TIMER_AddTask(TIMER_ID_MENU_CLEAR_DATA_RETURN,
;;;4502   //								1000,
;;;4503   //								PassWordChangeOK_Return,
;;;4504   //								0,
;;;4505   //								1,
;;;4506   //								ACTION_MODE_ADD_TO_QUEUE);
;;;4507   						break;
;;;4508   						
;;;4509   					
;;;4510   					default:
;;;4511   						break;
;;;4512   				}
;;;4513   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_DRAW);
;;;4514   				break;
;;;4515   
;;;4516   			case 2:
;;;4517   				
;;;4518   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_DRAW);
;;;4519   				break;
;;;4520   
;;;4521   			default:
;;;4522   				break;
;;;4523   		}
;;;4524   	}
;;;4525   	else
;;;4526   	{
;;;4527   		// 标题字体
;;;4528   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_TITILE_X, UI_ITEM_COODINATE_MENU_PASSWORD_TITILE_Y, PIC_ID_PASSWORD_TITILE, LCD_OPERATOR_MODE_DRAW);
000054  460a              MOV      r2,r1
000056  2300              MOVS     r3,#0
000058  212f              MOVS     r1,#0x2f
00005a  205b              MOVS     r0,#0x5b
00005c  f7fffffe          BL       LCD_DrawBmpByID
;;;4529   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CHANGE_PASSWORD_TITILE_X, UI_ITEM_COODINATE_MENU_CHANGE_PASSWORD_TITILE_Y, PIC_ID_CHANGE_PASSWORD_TITILE_G, LCD_OPERATOR_MODE_DRAW);
000060  2300              MOVS     r3,#0
000062  2270              MOVS     r2,#0x70
000064  2156              MOVS     r1,#0x56
000066  205a              MOVS     r0,#0x5a
000068  f7fffffe          BL       LCD_DrawBmpByID
;;;4530   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_BACK_X, UI_ITEM_COODINATE_MENU_PASSWORD_BACK_Y, PIC_ID_PASSWORD_BACK, LCD_OPERATOR_MODE_DRAW);
00006c  2300              MOVS     r3,#0
00006e  465a              MOV      r2,r11
000070  2180              MOVS     r1,#0x80
000072  205b              MOVS     r0,#0x5b
000074  f7fffffe          BL       LCD_DrawBmpByID
;;;4531   
;;;4532   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_SWITCH_X, UI_ITEM_COODINATE_MENU_PASSWORD_SWITCH_Y, PIC_ID_G_OFF, LCD_OPERATOR_MODE_DRAW);
000078  2300              MOVS     r3,#0
00007a  229a              MOVS     r2,#0x9a
00007c  2130              MOVS     r1,#0x30
00007e  20fa              MOVS     r0,#0xfa
000080  f7fffffe          BL       LCD_DrawBmpByID
;;;4533   
;;;4534   		// 光标操作隐藏
;;;4535   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_BACKGROUND);
000084  2301              MOVS     r3,#1
000086  22e5              MOVS     r2,#0xe5
000088  212f              MOVS     r1,#0x2f
00008a  2048              MOVS     r0,#0x48
00008c  f7fffffe          BL       LCD_DrawBmpByID
;;;4536   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_BACKGROUND);
000090  2301              MOVS     r3,#1
000092  22e5              MOVS     r2,#0xe5
000094  2156              MOVS     r1,#0x56
000096  2048              MOVS     r0,#0x48
000098  f7fffffe          BL       LCD_DrawBmpByID
;;;4537   		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_BACKGROUND);
00009c  2301              MOVS     r3,#1
00009e  22e5              MOVS     r2,#0xe5
0000a0  2180              MOVS     r1,#0x80
0000a2  2048              MOVS     r0,#0x48
0000a4  f7fffffe          BL       LCD_DrawBmpByID
;;;4538   	
;;;4539   		switch (menuCursor)
0000a8  2c00              CMP      r4,#0
0000aa  d07d              BEQ      |L172.424|
0000ac  2c01              CMP      r4,#1
0000ae  d04b              BEQ      |L172.328|
0000b0  2c02              CMP      r4,#2
0000b2  d149              BNE      |L172.328|
;;;4540   		{
;;;4541   			
;;;4542   			case 0:
;;;4543   				if (0 == numberCursor)
;;;4544   				{
;;;4545   					
;;;4546   				}
;;;4547   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_DRAW);
;;;4548   				break;
;;;4549   
;;;4550   			case 1:
;;;4551   				
;;;4552   				// LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_DRAW);
;;;4553   				break;
;;;4554   
;;;4555   			case 2:
;;;4556   				
;;;4557   				LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_DRAW);
0000b4  e8bd5ff0          POP      {r4-r12,lr}
0000b8  2300              MOVS     r3,#0
0000ba  22e5              MOVS     r2,#0xe5
0000bc  2180              MOVS     r1,#0x80
0000be  2048              MOVS     r0,#0x48
0000c0  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L172.196|
0000c4  f8dfa23c          LDR      r10,|L172.772|
0000c8  f89a0b31          LDRB     r0,[r10,#0xb31]       ;4408  ; displayStateCB
0000cc  2801              CMP      r0,#1                 ;4408
0000ce  d829              BHI      |L172.292|
0000d0  460a              MOV      r2,r1                 ;4410
0000d2  2300              MOVS     r3,#0                 ;4410
0000d4  212f              MOVS     r1,#0x2f              ;4410
0000d6  205b              MOVS     r0,#0x5b              ;4410
0000d8  f7fffffe          BL       LCD_DrawBmpByID
0000dc  2300              MOVS     r3,#0                 ;4411
0000de  2271              MOVS     r2,#0x71              ;4411
0000e0  2156              MOVS     r1,#0x56              ;4411
0000e2  205a              MOVS     r0,#0x5a              ;4411
0000e4  f7fffffe          BL       LCD_DrawBmpByID
0000e8  2300              MOVS     r3,#0                 ;4412
0000ea  465a              MOV      r2,r11                ;4412
0000ec  2180              MOVS     r1,#0x80              ;4412
0000ee  205b              MOVS     r0,#0x5b              ;4412
0000f0  f7fffffe          BL       LCD_DrawBmpByID
0000f4  2300              MOVS     r3,#0                 ;4414
0000f6  229b              MOVS     r2,#0x9b              ;4414
0000f8  2130              MOVS     r1,#0x30              ;4414
0000fa  20fa              MOVS     r0,#0xfa              ;4414
0000fc  f7fffffe          BL       LCD_DrawBmpByID
000100  2301              MOVS     r3,#1                 ;4416
000102  22e5              MOVS     r2,#0xe5              ;4416
000104  212f              MOVS     r1,#0x2f              ;4416
000106  2048              MOVS     r0,#0x48              ;4416
000108  f7fffffe          BL       LCD_DrawBmpByID
00010c  2301              MOVS     r3,#1                 ;4417
00010e  22e5              MOVS     r2,#0xe5              ;4417
000110  2156              MOVS     r1,#0x56              ;4417
000112  2048              MOVS     r0,#0x48              ;4417
000114  f7fffffe          BL       LCD_DrawBmpByID
000118  2301              MOVS     r3,#1                 ;4418
00011a  22e5              MOVS     r2,#0xe5              ;4418
00011c  2180              MOVS     r1,#0x80              ;4418
00011e  2048              MOVS     r0,#0x48              ;4418
000120  f7fffffe          BL       LCD_DrawBmpByID
                  |L172.292|
000124  b15c              CBZ      r4,|L172.318|
000126  2c01              CMP      r4,#1                 ;4421
000128  d013              BEQ      |L172.338|
00012a  2c02              CMP      r4,#2                 ;4421
00012c  d10c              BNE      |L172.328|
00012e  e8bd5ff0          POP      {r4-r12,lr}           ;4518
000132  2300              MOVS     r3,#0                 ;4518
000134  22e5              MOVS     r2,#0xe5              ;4518
000136  2180              MOVS     r1,#0x80              ;4518
000138  2048              MOVS     r0,#0x48              ;4518
00013a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L172.318|
00013e  2300              MOVS     r3,#0                 ;4429
000140  22e5              MOVS     r2,#0xe5              ;4429
000142  212f              MOVS     r1,#0x2f              ;4429
000144  2048              MOVS     r0,#0x48              ;4429
000146  e000              B        |L172.330|
                  |L172.328|
000148  e0d9              B        |L172.766|
                  |L172.330|
00014a  e8bd5ff0          POP      {r4-r12,lr}           ;4429
00014e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L172.338|
000152  f1b80f05          CMP      r8,#5                 ;4434
000156  d246              BCS      |L172.486|
000158  e8dff008          TBB      [pc,r8]               ;4434
00015c  03466c92          DCB      0x03,0x46,0x6c,0x92
000160  b800              DCB      0xb8,0x00
000162  2305              MOVS     r3,#5                 ;4439
000164  22e9              MOVS     r2,#0xe9              ;4439
000166  216b              MOVS     r1,#0x6b              ;4439
000168  2073              MOVS     r0,#0x73              ;4439
00016a  f7fffffe          BL       LCD_DrawBmpByID
00016e  2305              MOVS     r3,#5                 ;4440
000170  22e9              MOVS     r2,#0xe9              ;4440
000172  216b              MOVS     r1,#0x6b              ;4440
000174  2093              MOVS     r0,#0x93              ;4440
000176  f7fffffe          BL       LCD_DrawBmpByID
00017a  2305              MOVS     r3,#5                 ;4441
00017c  22e9              MOVS     r2,#0xe9              ;4441
00017e  216b              MOVS     r1,#0x6b              ;4441
000180  20b4              MOVS     r0,#0xb4              ;4441
000182  f7fffffe          BL       LCD_DrawBmpByID
000186  2305              MOVS     r3,#5                 ;4442
000188  22e9              MOVS     r2,#0xe9              ;4442
00018a  216b              MOVS     r1,#0x6b              ;4442
00018c  20d4              MOVS     r0,#0xd4              ;4442
00018e  f7fffffe          BL       LCD_DrawBmpByID
000192  2300              MOVS     r3,#0                 ;4445
000194  22d3              MOVS     r2,#0xd3              ;4445
000196  214a              MOVS     r1,#0x4a              ;4445
000198  2065              MOVS     r0,#0x65              ;4445
00019a  f7fffffe          BL       LCD_DrawBmpByID
00019e  2300              MOVS     r3,#0                 ;4446
0001a0  f2091231          ADD      r2,r9,#0x131          ;4446
0001a4  2151              MOVS     r1,#0x51              ;4446
0001a6  e000              B        |L172.426|
                  |L172.424|
0001a8  e0a1              B        |L172.750|
                  |L172.426|
0001aa  2073              MOVS     r0,#0x73              ;4446
0001ac  f7fffffe          BL       LCD_DrawBmpByID
0001b0  2300              MOVS     r3,#0                 ;4447
0001b2  f2051231          ADD      r2,r5,#0x131          ;4447
0001b6  2151              MOVS     r1,#0x51              ;4447
0001b8  2093              MOVS     r0,#0x93              ;4447
0001ba  f7fffffe          BL       LCD_DrawBmpByID
0001be  2300              MOVS     r3,#0                 ;4448
0001c0  f2061231          ADD      r2,r6,#0x131          ;4448
0001c4  2151              MOVS     r1,#0x51              ;4448
0001c6  20b4              MOVS     r0,#0xb4              ;4448
0001c8  f7fffffe          BL       LCD_DrawBmpByID
0001cc  2300              MOVS     r3,#0                 ;4449
0001ce  f2071231          ADD      r2,r7,#0x131          ;4449
0001d2  2151              MOVS     r1,#0x51              ;4449
0001d4  20d4              MOVS     r0,#0xd4              ;4449
0001d6  f7fffffe          BL       LCD_DrawBmpByID
0001da  2300              MOVS     r3,#0                 ;4451
0001dc  22e9              MOVS     r2,#0xe9              ;4451
0001de  216b              MOVS     r1,#0x6b              ;4451
0001e0  2073              MOVS     r0,#0x73              ;4451
0001e2  f7fffffe          BL       LCD_DrawBmpByID
                  |L172.486|
0001e6  e07a              B        |L172.734|
0001e8  2305              MOVS     r3,#5                 ;4457
0001ea  22e9              MOVS     r2,#0xe9              ;4457
0001ec  216b              MOVS     r1,#0x6b              ;4457
0001ee  2073              MOVS     r0,#0x73              ;4457
0001f0  f7fffffe          BL       LCD_DrawBmpByID
0001f4  2305              MOVS     r3,#5                 ;4458
0001f6  22e9              MOVS     r2,#0xe9              ;4458
0001f8  216b              MOVS     r1,#0x6b              ;4458
0001fa  2093              MOVS     r0,#0x93              ;4458
0001fc  f7fffffe          BL       LCD_DrawBmpByID
000200  2305              MOVS     r3,#5                 ;4459
000202  22e9              MOVS     r2,#0xe9              ;4459
000204  216b              MOVS     r1,#0x6b              ;4459
000206  20b4              MOVS     r0,#0xb4              ;4459
000208  f7fffffe          BL       LCD_DrawBmpByID
00020c  2305              MOVS     r3,#5                 ;4460
00020e  22e9              MOVS     r2,#0xe9              ;4460
000210  216b              MOVS     r1,#0x6b              ;4460
000212  20d4              MOVS     r0,#0xd4              ;4460
000214  f7fffffe          BL       LCD_DrawBmpByID
000218  2300              MOVS     r3,#0                 ;4463
00021a  f2051231          ADD      r2,r5,#0x131          ;4463
00021e  2151              MOVS     r1,#0x51              ;4463
000220  2093              MOVS     r0,#0x93              ;4463
000222  f7fffffe          BL       LCD_DrawBmpByID
000226  2300              MOVS     r3,#0                 ;4464
000228  22e9              MOVS     r2,#0xe9              ;4464
00022a  216b              MOVS     r1,#0x6b              ;4464
00022c  2093              MOVS     r0,#0x93              ;4464
00022e  f7fffffe          BL       LCD_DrawBmpByID
000232  e054              B        |L172.734|
000234  2305              MOVS     r3,#5                 ;4470
000236  22e9              MOVS     r2,#0xe9              ;4470
000238  216b              MOVS     r1,#0x6b              ;4470
00023a  2073              MOVS     r0,#0x73              ;4470
00023c  f7fffffe          BL       LCD_DrawBmpByID
000240  2305              MOVS     r3,#5                 ;4471
000242  22e9              MOVS     r2,#0xe9              ;4471
000244  216b              MOVS     r1,#0x6b              ;4471
000246  2093              MOVS     r0,#0x93              ;4471
000248  f7fffffe          BL       LCD_DrawBmpByID
00024c  2305              MOVS     r3,#5                 ;4472
00024e  22e9              MOVS     r2,#0xe9              ;4472
000250  216b              MOVS     r1,#0x6b              ;4472
000252  20b4              MOVS     r0,#0xb4              ;4472
000254  f7fffffe          BL       LCD_DrawBmpByID
000258  2305              MOVS     r3,#5                 ;4473
00025a  22e9              MOVS     r2,#0xe9              ;4473
00025c  216b              MOVS     r1,#0x6b              ;4473
00025e  20d4              MOVS     r0,#0xd4              ;4473
000260  f7fffffe          BL       LCD_DrawBmpByID
000264  2300              MOVS     r3,#0                 ;4476
000266  f2061231          ADD      r2,r6,#0x131          ;4476
00026a  2151              MOVS     r1,#0x51              ;4476
00026c  20b4              MOVS     r0,#0xb4              ;4476
00026e  f7fffffe          BL       LCD_DrawBmpByID
000272  2300              MOVS     r3,#0                 ;4478
000274  22e9              MOVS     r2,#0xe9              ;4478
000276  216b              MOVS     r1,#0x6b              ;4478
000278  20b4              MOVS     r0,#0xb4              ;4478
00027a  f7fffffe          BL       LCD_DrawBmpByID
00027e  e02e              B        |L172.734|
000280  2305              MOVS     r3,#5                 ;4484
000282  22e9              MOVS     r2,#0xe9              ;4484
000284  216b              MOVS     r1,#0x6b              ;4484
000286  2073              MOVS     r0,#0x73              ;4484
000288  f7fffffe          BL       LCD_DrawBmpByID
00028c  2305              MOVS     r3,#5                 ;4485
00028e  22e9              MOVS     r2,#0xe9              ;4485
000290  216b              MOVS     r1,#0x6b              ;4485
000292  2093              MOVS     r0,#0x93              ;4485
000294  f7fffffe          BL       LCD_DrawBmpByID
000298  2305              MOVS     r3,#5                 ;4486
00029a  22e9              MOVS     r2,#0xe9              ;4486
00029c  216b              MOVS     r1,#0x6b              ;4486
00029e  20b4              MOVS     r0,#0xb4              ;4486
0002a0  f7fffffe          BL       LCD_DrawBmpByID
0002a4  2305              MOVS     r3,#5                 ;4487
0002a6  22e9              MOVS     r2,#0xe9              ;4487
0002a8  216b              MOVS     r1,#0x6b              ;4487
0002aa  20d4              MOVS     r0,#0xd4              ;4487
0002ac  f7fffffe          BL       LCD_DrawBmpByID
0002b0  2300              MOVS     r3,#0                 ;4490
0002b2  f2071231          ADD      r2,r7,#0x131          ;4490
0002b6  2151              MOVS     r1,#0x51              ;4490
0002b8  20d4              MOVS     r0,#0xd4              ;4490
0002ba  f7fffffe          BL       LCD_DrawBmpByID
0002be  2300              MOVS     r3,#0                 ;4492
0002c0  22e9              MOVS     r2,#0xe9              ;4492
0002c2  216b              MOVS     r1,#0x6b              ;4492
0002c4  20d4              MOVS     r0,#0xd4              ;4492
0002c6  f7fffffe          BL       LCD_DrawBmpByID
0002ca  e008              B        |L172.734|
0002cc  200f              MOVS     r0,#0xf               ;4498
0002ce  f88a0b39          STRB     r0,[r10,#0xb39]       ;4498
0002d2  2300              MOVS     r3,#0                 ;4499
0002d4  22d2              MOVS     r2,#0xd2              ;4499
0002d6  214a              MOVS     r1,#0x4a              ;4499
0002d8  2065              MOVS     r0,#0x65              ;4499
0002da  f7fffffe          BL       LCD_DrawBmpByID
                  |L172.734|
0002de  e8bd5ff0          POP      {r4-r12,lr}           ;4513
0002e2  2300              MOVS     r3,#0                 ;4513
0002e4  22e5              MOVS     r2,#0xe5              ;4513
0002e6  2156              MOVS     r1,#0x56              ;4513
0002e8  2048              MOVS     r0,#0x48              ;4513
0002ea  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L172.750|
0002ee  e8bd5ff0          POP      {r4-r12,lr}           ;4547
0002f2  2300              MOVS     r3,#0                 ;4547
0002f4  22e5              MOVS     r2,#0xe5              ;4547
0002f6  212f              MOVS     r1,#0x2f              ;4547
0002f8  2048              MOVS     r0,#0x48              ;4547
0002fa  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L172.766|
;;;4558   				break;
;;;4559   
;;;4560   			default:
;;;4561   				break;
;;;4562   		}
;;;4563   	}
;;;4564   }
0002fe  e8bd9ff0          POP      {r4-r12,pc}
;;;4565   
                          ENDP

000302  0000              DCW      0x0000
                  |L172.772|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_DrawMonitorBg||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorBg PROC
;;;1547   
;;;1548   void DISPLAY_DrawMonitorBg(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;1549   {
;;;1550   	switch (ulBuff)
000002  2800              CMP      r0,#0
000004  d011              BEQ      |L173.42|
000006  2801              CMP      r0,#1
000008  d10f              BNE      |L173.42|
;;;1551   	{
;;;1552   		case 0:
;;;1553   			break;
;;;1554   
;;;1555   		case 1:
;;;1556   
;;;1557   			// 显示界面背景图
;;;1558   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MONITOR_BACKGROUND_X, UI_ITEM_COODINATE_MONITOR_BACKGROUND_Y, PIC_ID_RECORD_BG, LCD_OPERATOR_MODE_DRAW);
00000a  2300              MOVS     r3,#0
00000c  f240127d          MOV      r2,#0x17d
000010  4619              MOV      r1,r3
000012  4618              MOV      r0,r3
000014  f7fffffe          BL       LCD_DrawBmpByID
;;;1559   
;;;1560   			// 显示下方指示标
;;;1561   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MONITOR_CURSIE_X, UI_ITEM_COODINATE_MONITOR_CURSIE_Y, PIC_ID_RECORD_X_1, LCD_OPERATOR_MODE_DRAW);
000018  2300              MOVS     r3,#0
00001a  21a0              MOVS     r1,#0xa0
00001c  e8bd4010          POP      {r4,lr}
000020  f44f72c3          MOV      r2,#0x186
000024  2097              MOVS     r0,#0x97
000026  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L173.42|
;;;1562   			break;
;;;1563   
;;;1564   		default:
;;;1565   			break;
;;;1566   	}
;;;1567   }
00002a  bd10              POP      {r4,pc}
;;;1568   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorCalorie||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorCalorie PROC
;;;1765   **********************************************************************/
;;;1766   void DISPLAY_DrawMonitorCalorie(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;1767   {	
000002  4604              MOV      r4,r0
;;;1768   	uint8 value1=0, value2=0, value3=0;
;;;1769   	uint16 usLocalBuff = ulBuff%1000;
000004  f44f707a          MOV      r0,#0x3e8
000008  fbb4f1f0          UDIV     r1,r4,r0
00000c  fb004011          MLS      r0,r0,r1,r4
;;;1770   
;;;1771   	// 提取三个数字位上的数字
;;;1772   	value3 = usLocalBuff/100;
000010  2164              MOVS     r1,#0x64
000012  fbb0f2f1          UDIV     r2,r0,r1
000016  b2d5              UXTB     r5,r2
;;;1773   	usLocalBuff %= 100;
000018  fbb0f2f1          UDIV     r2,r0,r1
00001c  fb010012          MLS      r0,r1,r2,r0
;;;1774   	value2 = usLocalBuff/10;
000020  210a              MOVS     r1,#0xa
000022  fbb0f2f1          UDIV     r2,r0,r1
000026  b2d6              UXTB     r6,r2
;;;1775   	value1 = usLocalBuff%10;
000028  fbb0f2f1          UDIV     r2,r0,r1
00002c  fb010212          MLS      r2,r1,r2,r0
;;;1776   
;;;1777   	// 显示个位
;;;1778   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_CAL_1_X, (uint16)UI_ITEM_COODINATE_MONITOR_CAL_1_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value1), LCD_OPERATOR_MODE_DRAW);
000030  2300              MOVS     r3,#0
000032  f2021267          ADD      r2,r2,#0x167
000036  217f              MOVS     r1,#0x7f
000038  20f7              MOVS     r0,#0xf7
00003a  f7fffffe          BL       LCD_DrawBmpByID
;;;1779   
;;;1780   	// 清除十位
;;;1781   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_CAL_10_X, (uint16)UI_ITEM_COODINATE_MONITOR_CAL_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value2), LCD_OPERATOR_MODE_BACKGROUND);
00003e  f2061267          ADD      r2,r6,#0x167
000042  2301              MOVS     r3,#1
000044  4616              MOV      r6,r2
000046  217f              MOVS     r1,#0x7f
000048  20e8              MOVS     r0,#0xe8
00004a  f7fffffe          BL       LCD_DrawBmpByID
;;;1782   	// 清除百位
;;;1783   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_CAL_100_X, (uint16)UI_ITEM_COODINATE_MONITOR_CAL_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
00004e  f2051267          ADD      r2,r5,#0x167
000052  2301              MOVS     r3,#1
000054  4615              MOV      r5,r2
000056  217f              MOVS     r1,#0x7f
000058  20d9              MOVS     r0,#0xd9
00005a  f7fffffe          BL       LCD_DrawBmpByID
;;;1784   
;;;1785   	// 根据数值显示，显示十位
;;;1786   	CHECK_PARAM_LESS_RETURN(ulBuff, 10);
00005e  2c0a              CMP      r4,#0xa
000060  d30f              BCC      |L174.130|
;;;1787   	// 显示十位
;;;1788   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_CAL_10_X, (uint16)UI_ITEM_COODINATE_MONITOR_CAL_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value2), LCD_OPERATOR_MODE_DRAW);
000062  2300              MOVS     r3,#0
000064  4632              MOV      r2,r6
000066  217f              MOVS     r1,#0x7f
000068  20e8              MOVS     r0,#0xe8
00006a  f7fffffe          BL       LCD_DrawBmpByID
;;;1789   	
;;;1790   	// 根据数值显示，显示百位
;;;1791   	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
00006e  2c64              CMP      r4,#0x64
000070  d307              BCC      |L174.130|
;;;1792   	// 显示百位
;;;1793   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_CAL_100_X, (uint16)UI_ITEM_COODINATE_MONITOR_CAL_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_DRAW);
000072  462a              MOV      r2,r5
000074  e8bd4070          POP      {r4-r6,lr}
000078  2300              MOVS     r3,#0
00007a  217f              MOVS     r1,#0x7f
00007c  20d9              MOVS     r0,#0xd9
00007e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L174.130|
;;;1794   }
000082  bd70              POP      {r4-r6,pc}
;;;1795   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorCalorieTitile||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorCalorieTitile PROC
;;;1748   
;;;1749   void DISPLAY_DrawMonitorCalorieTitile(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;1750   {	
;;;1751   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_CAL_TITILE_X, (uint16)UI_ITEM_COODINATE_MONITOR_CAL_TITILE_Y, PIC_ID_CALORIE, LCD_OPERATOR_MODE_DRAW);
000002  226f              MOVS     r2,#0x6f
000004  2163              MOVS     r1,#0x63
000006  20bc              MOVS     r0,#0xbc
000008  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1752   }
;;;1753   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorCalorieUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorCalorieUnit PROC
;;;1795   
;;;1796   void DISPLAY_DrawMonitorCalorieUnit(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;1797   {	
;;;1798   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_CAL_UNIT_X, (uint16)UI_ITEM_COODINATE_MONITOR_CAL_UNIT_Y, PIC_ID_RECORD_KCAL, LCD_OPERATOR_MODE_DRAW);
000002  f240127f          MOV      r2,#0x17f
000006  2188              MOVS     r1,#0x88
000008  f44f7085          MOV      r0,#0x10a
00000c  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1799   }
;;;1800   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorMotorPower||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorMotorPower PROC
;;;1812   **********************************************************************/
;;;1813   void DISPLAY_DrawMonitorMotorPower(uint32 ulBuff)
000000  4770              BX       lr
;;;1814   {	
;;;1815   //	uint8 value1=0, value2=0, value3=0;
;;;1816   //	uint16 usLocalBuff = ulBuff%1000;
;;;1817   
;;;1818   //	// 提取三个数字位上的数字
;;;1819   //	value3 = usLocalBuff/100;
;;;1820   //	usLocalBuff %= 100;
;;;1821   //	value2 = usLocalBuff/10;
;;;1822   //	value1 = usLocalBuff%10;
;;;1823   //	
;;;1824   //	// 显示个位
;;;1825   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_POWER_1_X, (uint16)UI_ITEM_COODINATE_MONITOR_POWER_1_Y, (PIC_ID_E)(PIC_ID_TINY_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;1826   
;;;1827   //	// 显示十位
;;;1828   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_POWER_10_X, (uint16)UI_ITEM_COODINATE_MONITOR_POWER_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;1829   
;;;1830   //	// 显示百位
;;;1831   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_POWER_100_X, (uint16)UI_ITEM_COODINATE_MONITOR_POWER_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;1832   
;;;1833   }
;;;1834   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorOdo||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawMonitorOdo PROC
;;;1951   **********************************************************************/
;;;1952   void DISPLAY_DrawMonitorOdo(uint32 ulBuff)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1953   {	
000004  4604              MOV      r4,r0
;;;1954   	
;;;1955   	uint8 value1=0, value2=0, value3=0, value4=0, value5=0, value6=0;
;;;1956   	uint32 usLocalBuff = ulBuff%1000000;
000006  4847              LDR      r0,|L178.292|
000008  fbb4f1f0          UDIV     r1,r4,r0
00000c  fb004011          MLS      r0,r0,r1,r4
;;;1957   	
;;;1958   	// 提取数字
;;;1959   	value6 = usLocalBuff/100000;
000010  f8dfa114          LDR      r10,|L178.296|
000014  fbb0f1fa          UDIV     r1,r0,r10
000018  f00109ff          AND      r9,r1,#0xff
;;;1960   	usLocalBuff %= 100000;
00001c  fbb0f1fa          UDIV     r1,r0,r10
000020  fb0a0011          MLS      r0,r10,r1,r0
;;;1961   	value5 = usLocalBuff/10000;
000024  f2427b10          MOV      r11,#0x2710
000028  fbb0f1fb          UDIV     r1,r0,r11
00002c  f00108ff          AND      r8,r1,#0xff
;;;1962   	usLocalBuff %= 10000;
000030  fbb0f1fb          UDIV     r1,r0,r11
000034  fb0b0011          MLS      r0,r11,r1,r0
;;;1963   	value4 = usLocalBuff/1000;
000038  f44f717a          MOV      r1,#0x3e8
00003c  fbb0f2f1          UDIV     r2,r0,r1
000040  b2d7              UXTB     r7,r2
;;;1964   	usLocalBuff %= 1000;
000042  fbb0f2f1          UDIV     r2,r0,r1
000046  fb010012          MLS      r0,r1,r2,r0
;;;1965   	value3 = usLocalBuff/100;
00004a  2164              MOVS     r1,#0x64
00004c  fbb0f2f1          UDIV     r2,r0,r1
000050  b2d6              UXTB     r6,r2
;;;1966   	usLocalBuff %= 100;
000052  fbb0f2f1          UDIV     r2,r0,r1
000056  fb010012          MLS      r0,r1,r2,r0
;;;1967   	value2 = usLocalBuff/10;
00005a  210a              MOVS     r1,#0xa
00005c  fbb0f2f1          UDIV     r2,r0,r1
000060  b2d5              UXTB     r5,r2
;;;1968   	value1 = usLocalBuff%10;
000062  fbb0f2f1          UDIV     r2,r0,r1
000066  fb010212          MLS      r2,r1,r2,r0
;;;1969   	
;;;1970   	// 显示个位
;;;1971   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_1_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_1_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value1), LCD_OPERATOR_MODE_DRAW);
00006a  2300              MOVS     r3,#0
00006c  f2021267          ADD      r2,r2,#0x167
000070  217f              MOVS     r1,#0x7f
000072  206a              MOVS     r0,#0x6a
000074  f7fffffe          BL       LCD_DrawBmpByID
;;;1972   
;;;1973   	// 清除十位
;;;1974   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_10_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value2), LCD_OPERATOR_MODE_BACKGROUND);
000078  f2051267          ADD      r2,r5,#0x167
00007c  2301              MOVS     r3,#1
00007e  217f              MOVS     r1,#0x7f
000080  205b              MOVS     r0,#0x5b
000082  9200              STR      r2,[sp,#0]
000084  f7fffffe          BL       LCD_DrawBmpByID
;;;1975   	// 清除百位
;;;1976   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_100_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
000088  f2061267          ADD      r2,r6,#0x167
00008c  2301              MOVS     r3,#1
00008e  4615              MOV      r5,r2
000090  217f              MOVS     r1,#0x7f
000092  204c              MOVS     r0,#0x4c
000094  f7fffffe          BL       LCD_DrawBmpByID
;;;1977   	// 清除千位
;;;1978   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_1000_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value4), LCD_OPERATOR_MODE_BACKGROUND);
000098  f2071267          ADD      r2,r7,#0x167
00009c  2301              MOVS     r3,#1
00009e  4616              MOV      r6,r2
0000a0  217f              MOVS     r1,#0x7f
0000a2  203d              MOVS     r0,#0x3d
0000a4  f7fffffe          BL       LCD_DrawBmpByID
;;;1979   	// 清除万位
;;;1980   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_10000_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_10000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value5), LCD_OPERATOR_MODE_BACKGROUND);
0000a8  f2081267          ADD      r2,r8,#0x167
0000ac  2301              MOVS     r3,#1
0000ae  4617              MOV      r7,r2
0000b0  217f              MOVS     r1,#0x7f
0000b2  202e              MOVS     r0,#0x2e
0000b4  f7fffffe          BL       LCD_DrawBmpByID
;;;1981   	// 清除十万位
;;;1982   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_100000_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_100000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value6), LCD_OPERATOR_MODE_BACKGROUND);
0000b8  f2091267          ADD      r2,r9,#0x167
0000bc  2301              MOVS     r3,#1
0000be  4690              MOV      r8,r2
0000c0  217f              MOVS     r1,#0x7f
0000c2  201f              MOVS     r0,#0x1f
0000c4  f7fffffe          BL       LCD_DrawBmpByID
;;;1983   	
;;;1984   	// 根据数值显示，显示十位
;;;1985   	CHECK_PARAM_LESS_RETURN(ulBuff, 10);
0000c8  2c0a              CMP      r4,#0xa
0000ca  d329              BCC      |L178.288|
;;;1986   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_10_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value2), LCD_OPERATOR_MODE_DRAW);
0000cc  2300              MOVS     r3,#0
0000ce  217f              MOVS     r1,#0x7f
0000d0  205b              MOVS     r0,#0x5b
0000d2  9a00              LDR      r2,[sp,#0]
0000d4  f7fffffe          BL       LCD_DrawBmpByID
;;;1987   	
;;;1988   	// 根据数值显示，显示百位
;;;1989   	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
0000d8  2c64              CMP      r4,#0x64
0000da  d321              BCC      |L178.288|
;;;1990   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_100_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_DRAW);
0000dc  2300              MOVS     r3,#0
0000de  462a              MOV      r2,r5
0000e0  217f              MOVS     r1,#0x7f
0000e2  204c              MOVS     r0,#0x4c
0000e4  f7fffffe          BL       LCD_DrawBmpByID
;;;1991   
;;;1992   	// 根据数值显示，显示千位
;;;1993   	CHECK_PARAM_LESS_RETURN(ulBuff, 1000);
0000e8  f5b47f7a          CMP      r4,#0x3e8
0000ec  d318              BCC      |L178.288|
;;;1994   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_1000_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value4), LCD_OPERATOR_MODE_DRAW);
0000ee  2300              MOVS     r3,#0
0000f0  4632              MOV      r2,r6
0000f2  217f              MOVS     r1,#0x7f
0000f4  203d              MOVS     r0,#0x3d
0000f6  f7fffffe          BL       LCD_DrawBmpByID
;;;1995   
;;;1996   	// 根据数值显示，显示万位
;;;1997   	CHECK_PARAM_LESS_RETURN(ulBuff, 10000);
0000fa  455c              CMP      r4,r11
0000fc  d310              BCC      |L178.288|
;;;1998   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_10000_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_10000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value5), LCD_OPERATOR_MODE_DRAW);
0000fe  2300              MOVS     r3,#0
000100  463a              MOV      r2,r7
000102  217f              MOVS     r1,#0x7f
000104  202e              MOVS     r0,#0x2e
000106  f7fffffe          BL       LCD_DrawBmpByID
;;;1999   
;;;2000   	// 根据数值显示，显示十万位
;;;2001   	CHECK_PARAM_LESS_RETURN(ulBuff, 100000);
00010a  4554              CMP      r4,r10
00010c  d308              BCC      |L178.288|
;;;2002   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_100000_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_100000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value6), LCD_OPERATOR_MODE_DRAW);
00010e  b001              ADD      sp,sp,#4
000110  4642              MOV      r2,r8
000112  e8bd4ff0          POP      {r4-r11,lr}
000116  2300              MOVS     r3,#0
000118  217f              MOVS     r1,#0x7f
00011a  201f              MOVS     r0,#0x1f
00011c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L178.288|
;;;2003   	
;;;2004   }
000120  e8bd8ff8          POP      {r3-r11,pc}
;;;2005   
                          ENDP

                  |L178.292|
                          DCD      0x000f4240
                  |L178.296|
                          DCD      0x000186a0

                          AREA ||i.DISPLAY_DrawMonitorOdoTitile||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorOdoTitile PROC
;;;1934   
;;;1935   void DISPLAY_DrawMonitorOdoTitile(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;1936   {	
;;;1937   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_TITILE_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_TITILE_Y, PIC_ID_ODO, LCD_OPERATOR_MODE_DRAW);
000002  2167              MOVS     r1,#0x67
000004  f44f7298          MOV      r2,#0x130
000008  201f              MOVS     r0,#0x1f
00000a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1938   }
;;;1939   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorOdoUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorOdoUnit PROC
;;;2017   **********************************************************************/
;;;2018   void DISPLAY_DrawMonitorOdoUnit(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;2019   {
;;;2020   	switch ((UNIT_E)ulBuff)
000002  f01000ff          ANDS     r0,r0,#0xff
;;;2021   	{
;;;2022   		case UNIT_METRIC:
;;;2023   
;;;2024   			// 显示图片
;;;2025   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_UNIT_MPH_Y, PIC_ID_RECORD_MILE, LCD_OPERATOR_MODE_BACKGROUND);
000006  f44f72c2          MOV      r2,#0x184
00000a  d008              BEQ      |L180.30|
00000c  2801              CMP      r0,#1                 ;2020
00000e  d114              BNE      |L180.58|
;;;2026   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_UNIT_KMH_Y, PIC_ID_RECORD_KM, LCD_OPERATOR_MODE_DRAW);
;;;2027   
;;;2028   			break;
;;;2029   
;;;2030   		case UNIT_INCH:
;;;2031   
;;;2032   			// 显示图片
;;;2033   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_RIDING_ODO_DISTANCE_UNIT_MPH_Y, PIC_ID_RECORD_MILE, LCD_OPERATOR_MODE_DRAW);
000010  2300              MOVS     r3,#0
000012  2188              MOVS     r1,#0x88
000014  e8bd4010          POP      {r4,lr}
000018  207d              MOVS     r0,#0x7d
00001a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L180.30|
00001e  2301              MOVS     r3,#1                 ;2025
000020  2188              MOVS     r1,#0x88              ;2025
000022  207d              MOVS     r0,#0x7d              ;2025
000024  f7fffffe          BL       LCD_DrawBmpByID
000028  2300              MOVS     r3,#0                 ;2026
00002a  2188              MOVS     r1,#0x88              ;2026
00002c  e8bd4010          POP      {r4,lr}               ;2026
000030  f2401281          MOV      r2,#0x181             ;2026
000034  207d              MOVS     r0,#0x7d              ;2026
000036  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L180.58|
;;;2034   			
;;;2035   			break;
;;;2036   
;;;2037   		default:
;;;2038   			break;
;;;2039   	}
;;;2040   	
;;;2041   }
00003a  bd10              POP      {r4,pc}
;;;2042   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorPersonalMaxTrip||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorPersonalMaxTrip PROC
;;;3160   **********************************************************************/
;;;3161   void DISPLAY_DrawMonitorPersonalMaxTrip(uint32 ulBuff)
000000  4770              BX       lr
;;;3162   {	
;;;3163   //	uint8 value1=0, value2=0, value3=0, value4=0;
;;;3164   //	uint32 usLocalBuff = ulBuff%10000;
;;;3165   //	
;;;3166   //	// 提取数字
;;;3167   //	value4 = usLocalBuff/1000;
;;;3168   //	usLocalBuff %= 1000;
;;;3169   //	value3 = usLocalBuff/100;
;;;3170   //	usLocalBuff %= 100;
;;;3171   //	value2 = usLocalBuff/10;
;;;3172   //	value1 = usLocalBuff%10;
;;;3173   //	
;;;3174   //	// 显示个位
;;;3175   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_1_X, (uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_1_Y, (PIC_ID_E)(PIC_ID_TINY_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;3176   
;;;3177   //	// 显示十位
;;;3178   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_10_X, (uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;3179   
;;;3180   //	// 清除百位
;;;3181   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_100_X, (uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
;;;3182   //	// 清除千位
;;;3183   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value4), LCD_OPERATOR_MODE_BACKGROUND);
;;;3184   
;;;3185   //	// 根据数值显示，显示百位
;;;3186   //	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
;;;3187   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_100_X, (uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;3188   
;;;3189   //	// 根据数值显示，显示千位
;;;3190   //	CHECK_PARAM_LESS_RETURN(ulBuff, 1000);
;;;3191   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;3192   
;;;3193   }
;;;3194   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorPersonalMaxTripUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorPersonalMaxTripUnit PROC
;;;3206   **********************************************************************/
;;;3207   void DISPLAY_DrawMonitorPersonalMaxTripUnit(uint32 ulBuff)
000000  4770              BX       lr
;;;3208   {
;;;3209   //	switch ((UNIT_E)ulBuff)
;;;3210   //	{
;;;3211   //		case UNIT_METRIC:
;;;3212   
;;;3213   //			// 显示图片
;;;3214   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_UNIT_MILES_X, (uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_UNIT_MILES_Y, PIC_ID_MILES_SMALL, LCD_OPERATOR_MODE_BACKGROUND);
;;;3215   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_UNIT_KM_X, (uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_UNIT_KM_Y, PIC_ID_KM_SMALL, LCD_OPERATOR_MODE_DRAW);
;;;3216   
;;;3217   //			break;
;;;3218   
;;;3219   //		case UNIT_INCH:
;;;3220   
;;;3221   //			// 显示图片
;;;3222   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_UNIT_MILES_X, (uint16)UI_ITEM_COODINATE_TOUR_PERSONAL_MAX_TRIP_UNIT_MILES_Y, PIC_ID_MILES_SMALL, LCD_OPERATOR_MODE_DRAW);
;;;3223   //			
;;;3224   //			break;
;;;3225   
;;;3226   //		default:
;;;3227   //			break;
;;;3228   //	}
;;;3229   //	
;;;3230   }
;;;3231   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorProcessBar||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorProcessBar PROC
;;;3244   // 显示进度条，该进度条表示当前骑行里程占个人最好成绩的比例，传入的参数为当天的骑行里程
;;;3245   void DISPLAY_DrawMonitorProcessBar(uint32 todayTrip)
000000  4770              BX       lr
;;;3246   {
;;;3247   //	uint32 pos = 0;
;;;3248   //	uint16 uwPersonBest = PARAM_GetPersonalBestTrip();
;;;3249   
;;;3250   //	// 计算比例
;;;3251   //	if(0 == uwPersonBest)
;;;3252   //	{
;;;3253   //		pos = PIC_ID_TB_20;
;;;3254   //	}
;;;3255   //	else
;;;3256   //	{
;;;3257   //		pos = todayTrip*(PIC_ID_TB_20-PIC_ID_TB_0)/uwPersonBest + PIC_ID_TB_0;
;;;3258   //	}
;;;3259   
;;;3260   //	if(pos > PIC_ID_TB_20)
;;;3261   //	{
;;;3262   //		pos = PIC_ID_TB_20;
;;;3263   //	}
;;;3264   
;;;3265   //	// 显示百位
;;;3266   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_PROCESS_BAR_X, (uint16)UI_ITEM_COODINATE_TOUR_PROCESS_BAR_Y, (PIC_ID_E)(pos), LCD_OPERATOR_MODE_DRAW);
;;;3267   
;;;3268   }
;;;3269   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorRidingTime||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawMonitorRidingTime PROC
;;;1585   **********************************************************************/
;;;1586   void DISPLAY_DrawMonitorRidingTime(uint32 ulBuff)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1587   {	
;;;1588   	uint8 value1=0, value2=0, value3=0, value4=0, value5=0, value6=0, value7=0, value8=0;
;;;1589   	uint32 usLocalBuff = ulBuff;
;;;1590   	uint8 usHour, usMin, usSec;
;;;1591   
;;;1592   	// 时间最大为9999:59:59
;;;1593   	if (ulBuff > 35999999)
000004  493e              LDR      r1,|L184.256|
000006  4288              CMP      r0,r1
000008  d900              BLS      |L184.12|
;;;1594   	{
;;;1595   		ulBuff = 35999999;
00000a  4608              MOV      r0,r1
                  |L184.12|
;;;1596   		usLocalBuff = 35999999;
;;;1597   	}
;;;1598   	
;;;1599   	usSec = usLocalBuff % 60;			// 取出秒数
00000c  233c              MOVS     r3,#0x3c
00000e  fbb0f1f3          UDIV     r1,r0,r3
000012  fb030111          MLS      r1,r3,r1,r0
;;;1600   	usLocalBuff /= 60;
000016  fbb0f4f3          UDIV     r4,r0,r3
;;;1601   	usMin = usLocalBuff % 60;
00001a  fbb4f0f3          UDIV     r0,r4,r3
00001e  fb034210          MLS      r2,r3,r0,r4
;;;1602   	usHour = usLocalBuff / 60;
000022  fbb4f0f3          UDIV     r0,r4,r3
000026  b2c0              UXTB     r0,r0
;;;1603   	
;;;1604   	// 提取数字
;;;1605   	value8 = usHour / 1000;
000028  f44f737a          MOV      r3,#0x3e8
00002c  fbb0faf3          UDIV     r10,r0,r3
;;;1606   	usHour = usHour % 1000;
000030  fbb0f5f3          UDIV     r5,r0,r3
000034  fb030015          MLS      r0,r3,r5,r0
;;;1607   	value7 = usHour / 100;
000038  2364              MOVS     r3,#0x64
00003a  fbb0f9f3          UDIV     r9,r0,r3
;;;1608   	usHour = usHour % 100;
00003e  fbb0f5f3          UDIV     r5,r0,r3
000042  fb030315          MLS      r3,r3,r5,r0
;;;1609   	value6 = usHour / 10;
000046  200a              MOVS     r0,#0xa
000048  fbb3f8f0          UDIV     r8,r3,r0
;;;1610   	value5 = usHour % 10;
00004c  fbb3f5f0          UDIV     r5,r3,r0
000050  fb003715          MLS      r7,r0,r5,r3
;;;1611   	value4 = usMin / 10;
000054  fbb2f6f0          UDIV     r6,r2,r0
;;;1612   	value3 = usMin % 10;
000058  fbb2f3f0          UDIV     r3,r2,r0
00005c  fb002513          MLS      r5,r0,r3,r2
;;;1613   	value2 = usSec / 10;
000060  fbb1f2f0          UDIV     r2,r1,r0
;;;1614   	value1 = usSec % 10;
000064  fbb1f0f0          UDIV     r0,r1,r0
;;;1615   
;;;1616   	// 显示冒号
;;;1617   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_M_MAL_X, (uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_M_MAL_Y, PIC_ID_RECORD_MAL, LCD_OPERATOR_MODE_DRAW);
000068  2300              MOVS     r3,#0
00006a  f2401283          MOV      r2,#0x183
00006e  213d              MOVS     r1,#0x3d
000070  20f8              MOVS     r0,#0xf8
000072  f7fffffe          BL       LCD_DrawBmpByID
;;;1618   	
;;;1619   	// 显示小时的千位和百位, 小时至少显示两位
;;;1620   	if ((usLocalBuff / 60) < 1000)
000076  f64e2060          MOV      r0,#0xea60
;;;1621   	{
;;;1622   		// 清除千位
;;;1623   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_1000_X, (uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_DRAW);
00007a  f2401b67          MOV      r11,#0x167
00007e  4284              CMP      r4,r0                 ;1620
000080  d206              BCS      |L184.144|
000082  2300              MOVS     r3,#0
000084  465a              MOV      r2,r11
000086  213d              MOVS     r1,#0x3d
000088  20bb              MOVS     r0,#0xbb
00008a  f7fffffe          BL       LCD_DrawBmpByID
00008e  e006              B        |L184.158|
                  |L184.144|
;;;1624   	}
;;;1625   	else
;;;1626   	{
;;;1627   		// 显示千位
;;;1628   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_1000_X, (uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value8), LCD_OPERATOR_MODE_DRAW);
000090  2300              MOVS     r3,#0
000092  f20a1267          ADD      r2,r10,#0x167
000096  213d              MOVS     r1,#0x3d
000098  20bb              MOVS     r0,#0xbb
00009a  f7fffffe          BL       LCD_DrawBmpByID
                  |L184.158|
;;;1629   	}
;;;1630   
;;;1631   	if ((usLocalBuff / 60) < 100)
00009e  f2417070          MOV      r0,#0x1770
0000a2  4284              CMP      r4,r0
0000a4  d206              BCS      |L184.180|
;;;1632   	{
;;;1633   		// 清除百位
;;;1634   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_100_X, (uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_DRAW);
0000a6  2300              MOVS     r3,#0
0000a8  465a              MOV      r2,r11
0000aa  213d              MOVS     r1,#0x3d
0000ac  20ca              MOVS     r0,#0xca
0000ae  f7fffffe          BL       LCD_DrawBmpByID
0000b2  e006              B        |L184.194|
                  |L184.180|
;;;1635   	}
;;;1636   	else
;;;1637   	{
;;;1638   		// 显示百位
;;;1639   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_100_X, (uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value7), LCD_OPERATOR_MODE_DRAW);
0000b4  2300              MOVS     r3,#0
0000b6  f2091267          ADD      r2,r9,#0x167
0000ba  213d              MOVS     r1,#0x3d
0000bc  20ca              MOVS     r0,#0xca
0000be  f7fffffe          BL       LCD_DrawBmpByID
                  |L184.194|
;;;1640   	}
;;;1641   	
;;;1642   	// 显示小时
;;;1643   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_10_X, (uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value6), LCD_OPERATOR_MODE_DRAW);
0000c2  2300              MOVS     r3,#0
0000c4  f2081267          ADD      r2,r8,#0x167
0000c8  213d              MOVS     r1,#0x3d
0000ca  20d9              MOVS     r0,#0xd9
0000cc  f7fffffe          BL       LCD_DrawBmpByID
;;;1644   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_1_X, (uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_H_1_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value5), LCD_OPERATOR_MODE_DRAW);
0000d0  2300              MOVS     r3,#0
0000d2  f2071267          ADD      r2,r7,#0x167
0000d6  213d              MOVS     r1,#0x3d
0000d8  20e8              MOVS     r0,#0xe8
0000da  f7fffffe          BL       LCD_DrawBmpByID
;;;1645   
;;;1646   	// 显示分钟
;;;1647   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_M_10_X, (uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_M_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value4), LCD_OPERATOR_MODE_DRAW);
0000de  2300              MOVS     r3,#0
0000e0  f2061267          ADD      r2,r6,#0x167
0000e4  213d              MOVS     r1,#0x3d
0000e6  20fe              MOVS     r0,#0xfe
0000e8  f7fffffe          BL       LCD_DrawBmpByID
;;;1648   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_M_1_X, (uint16)UI_ITEM_COODINATE_MONITOR_RIDING_TIME_M_1_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_DRAW);
0000ec  f2051267          ADD      r2,r5,#0x167
0000f0  e8bd5ff0          POP      {r4-r12,lr}
0000f4  2300              MOVS     r3,#0
0000f6  213d              MOVS     r1,#0x3d
0000f8  f240100d          MOV      r0,#0x10d
0000fc  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1649   
;;;1650   }
;;;1651   
                          ENDP

                  |L184.256|
                          DCD      0x022550ff

                          AREA ||i.DISPLAY_DrawMonitorRidingTimeTitile||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorRidingTimeTitile PROC
;;;1568   
;;;1569   void DISPLAY_DrawMonitorRidingTimeTitile(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;1570   {	
;;;1571   	LCD_DrawBmpByID(UI_ITEM_COODINATE_MONITOR_RIDING_TIME_TITILE_X, UI_ITEM_COODINATE_MONITOR_RIDING_TIME_TITILE_Y, PIC_ID_TRIP_TIME, LCD_OPERATOR_MODE_DRAW);
000002  2124              MOVS     r1,#0x24
000004  f24012ed          MOV      r2,#0x1ed
000008  20bc              MOVS     r0,#0xbc
00000a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1572   }
;;;1573   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorSpeed||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorSpeed PROC
;;;1681   **********************************************************************/
;;;1682   void DISPLAY_DrawMonitorSpeed(uint32 ulBuff)
000000  4770              BX       lr
;;;1683   {	
;;;1684   //	uint8 value1=0, value2=0, value3=0;
;;;1685   //	uint16 usLocalBuff = ulBuff%1000;
;;;1686   
;;;1687   //	// 提取三个数字位上的数字
;;;1688   //	value3 = usLocalBuff/100;
;;;1689   //	usLocalBuff %= 100;
;;;1690   //	value2 = usLocalBuff/10;
;;;1691   //	value1 = usLocalBuff%10;
;;;1692   //	
;;;1693   //	// 显示个位
;;;1694   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_SPEED_1_X, (uint16)UI_ITEM_COODINATE_MONITOR_SPEED_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;1695   
;;;1696   //	// 显示十位
;;;1697   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_SPEED_10_X, (uint16)UI_ITEM_COODINATE_MONITOR_SPEED_10_Y, (PIC_ID_E)(PIC_ID_MED_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;1698   
;;;1699   //	if (ulBuff < 100)
;;;1700   //	{
;;;1701   //		// 清除百位
;;;1702   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_SPEED_100_X, (uint16)UI_ITEM_COODINATE_MONITOR_SPEED_100_Y, (PIC_ID_E)(PIC_ID_MED_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
;;;1703   //	}
;;;1704   //	else
;;;1705   //	{
;;;1706   //		// 显示百位
;;;1707   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_SPEED_100_X, (uint16)UI_ITEM_COODINATE_MONITOR_SPEED_100_Y, (PIC_ID_E)(PIC_ID_MED_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;1708   //	}
;;;1709   
;;;1710   }
;;;1711   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorSpeedUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorSpeedUnit PROC
;;;1723   **********************************************************************/
;;;1724   void DISPLAY_DrawMonitorSpeedUnit(uint32 ulBuff)
000000  4770              BX       lr
;;;1725   {
;;;1726   //	switch ((UNIT_E)ulBuff)
;;;1727   //	{
;;;1728   //		case UNIT_METRIC:
;;;1729   
;;;1730   //			// 显示图片			
;;;1731   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_SPEED_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_MONITOR_SPEED_UNIT_KMH_Y, PIC_ID_KMH_MED, LCD_OPERATOR_MODE_DRAW);
;;;1732   
;;;1733   //			break;
;;;1734   
;;;1735   //		case UNIT_INCH:
;;;1736   
;;;1737   //			// 显示图片		
;;;1738   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_SPEED_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_MONITOR_SPEED_UNIT_KMH_Y, PIC_ID_KMH_MED, LCD_OPERATOR_MODE_BACKGROUND);
;;;1739   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_MONITOR_SPEED_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_MONITOR_SPEED_UNIT_MPH_Y, PIC_ID_MPH_MED, LCD_OPERATOR_MODE_DRAW);
;;;1740   //			
;;;1741   //			break;
;;;1742   
;;;1743   //		default:
;;;1744   //			break;
;;;1745   //	}
;;;1746   	
;;;1747   }
;;;1748   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorTrip||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawMonitorTrip PROC
;;;1851   **********************************************************************/
;;;1852   void DISPLAY_DrawMonitorTrip(uint32 ulBuff)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1853   {	
000004  4604              MOV      r4,r0
;;;1854   	
;;;1855   	uint8 value1=0, value2=0, value3=0, value4=0, value5=0;
;;;1856   	uint32 usLocalBuff = ulBuff%100000;
000006  4839              LDR      r0,|L188.236|
000008  fbb4f1f0          UDIV     r1,r4,r0
00000c  fb004011          MLS      r0,r0,r1,r4
;;;1857   	
;;;1858   	// 提取数字
;;;1859   	value5 = usLocalBuff/10000;
000010  f2427710          MOV      r7,#0x2710
000014  fbb0f1f7          UDIV     r1,r0,r7
000018  b2cd              UXTB     r5,r1
;;;1860   	usLocalBuff %= 10000;
00001a  fbb0f1f7          UDIV     r1,r0,r7
00001e  fb070011          MLS      r0,r7,r1,r0
;;;1861   	value4 = usLocalBuff/1000;
000022  f44f787a          MOV      r8,#0x3e8
000026  fbb0f1f8          UDIV     r1,r0,r8
00002a  b2ce              UXTB     r6,r1
;;;1862   	usLocalBuff %= 1000;
00002c  fbb0f1f8          UDIV     r1,r0,r8
000030  fb080011          MLS      r0,r8,r1,r0
;;;1863   	value3 = usLocalBuff/100;
000034  2164              MOVS     r1,#0x64
000036  fbb0f2f1          UDIV     r2,r0,r1
00003a  f00209ff          AND      r9,r2,#0xff
;;;1864   	usLocalBuff %= 100;
00003e  fbb0f2f1          UDIV     r2,r0,r1
000042  fb010012          MLS      r0,r1,r2,r0
;;;1865   	value2 = usLocalBuff/10;
000046  210a              MOVS     r1,#0xa
000048  fbb0f2f1          UDIV     r2,r0,r1
00004c  f0020aff          AND      r10,r2,#0xff
;;;1866   	value1 = usLocalBuff%10;
000050  fbb0f2f1          UDIV     r2,r0,r1
000054  fb010212          MLS      r2,r1,r2,r0
;;;1867   	
;;;1868   	// 显示个位
;;;1869   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value1), LCD_OPERATOR_MODE_DRAW);
000058  2300              MOVS     r3,#0
00005a  f2021267          ADD      r2,r2,#0x167
00005e  213d              MOVS     r1,#0x3d
000060  2062              MOVS     r0,#0x62
000062  f7fffffe          BL       LCD_DrawBmpByID
;;;1870   
;;;1871   	// 显示个位
;;;1872   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_DOR_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_DOR_Y, PIC_ID_RECORD_DOT, LCD_OPERATOR_MODE_DRAW);
000066  2300              MOVS     r3,#0
000068  f44f72bf          MOV      r2,#0x17e
00006c  214d              MOVS     r1,#0x4d
00006e  205c              MOVS     r0,#0x5c
000070  f7fffffe          BL       LCD_DrawBmpByID
;;;1873   	
;;;1874   	// 显示十位
;;;1875   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value2), LCD_OPERATOR_MODE_DRAW);
000074  2300              MOVS     r3,#0
000076  f20a1267          ADD      r2,r10,#0x167
00007a  213d              MOVS     r1,#0x3d
00007c  204c              MOVS     r0,#0x4c
00007e  f7fffffe          BL       LCD_DrawBmpByID
;;;1876   
;;;1877   	// 清除百位
;;;1878   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_100_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
000082  f2091267          ADD      r2,r9,#0x167
000086  213d              MOVS     r1,#0x3d
000088  2301              MOVS     r3,#1
00008a  4691              MOV      r9,r2
00008c  4608              MOV      r0,r1
00008e  f7fffffe          BL       LCD_DrawBmpByID
;;;1879   	// 清除千位
;;;1880   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1000_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value4), LCD_OPERATOR_MODE_BACKGROUND);
000092  f2061267          ADD      r2,r6,#0x167
000096  2301              MOVS     r3,#1
000098  4616              MOV      r6,r2
00009a  213d              MOVS     r1,#0x3d
00009c  202e              MOVS     r0,#0x2e
00009e  f7fffffe          BL       LCD_DrawBmpByID
;;;1881   	// 清除万位
;;;1882   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10000_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value5), LCD_OPERATOR_MODE_BACKGROUND);
0000a2  f2051267          ADD      r2,r5,#0x167
0000a6  2301              MOVS     r3,#1
0000a8  4615              MOV      r5,r2
0000aa  213d              MOVS     r1,#0x3d
0000ac  201f              MOVS     r0,#0x1f
0000ae  f7fffffe          BL       LCD_DrawBmpByID
;;;1883   
;;;1884   	// 根据数值显示，显示百位
;;;1885   	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
0000b2  2c64              CMP      r4,#0x64
0000b4  d317              BCC      |L188.230|
;;;1886   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_100_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_DRAW);
0000b6  213d              MOVS     r1,#0x3d
0000b8  2300              MOVS     r3,#0
0000ba  464a              MOV      r2,r9
0000bc  4608              MOV      r0,r1
0000be  f7fffffe          BL       LCD_DrawBmpByID
;;;1887   
;;;1888   	// 根据数值显示，显示千位
;;;1889   	CHECK_PARAM_LESS_RETURN(ulBuff, 1000);
0000c2  4544              CMP      r4,r8
0000c4  d30f              BCC      |L188.230|
;;;1890   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1000_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value4), LCD_OPERATOR_MODE_DRAW);
0000c6  2300              MOVS     r3,#0
0000c8  4632              MOV      r2,r6
0000ca  213d              MOVS     r1,#0x3d
0000cc  202e              MOVS     r0,#0x2e
0000ce  f7fffffe          BL       LCD_DrawBmpByID
;;;1891   
;;;1892   	// 根据数值显示，显示万位
;;;1893   	CHECK_PARAM_LESS_RETURN(ulBuff, 10000);
0000d2  42bc              CMP      r4,r7
0000d4  d307              BCC      |L188.230|
;;;1894   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10000_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value5), LCD_OPERATOR_MODE_DRAW);
0000d6  462a              MOV      r2,r5
0000d8  e8bd47f0          POP      {r4-r10,lr}
0000dc  2300              MOVS     r3,#0
0000de  213d              MOVS     r1,#0x3d
0000e0  201f              MOVS     r0,#0x1f
0000e2  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L188.230|
;;;1895   	
;;;1896   }
0000e6  e8bd87f0          POP      {r4-r10,pc}
;;;1897   
                          ENDP

0000ea  0000              DCW      0x0000
                  |L188.236|
                          DCD      0x000186a0

                          AREA ||i.DISPLAY_DrawMonitorTripTitile||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorTripTitile PROC
;;;1834   
;;;1835   void DISPLAY_DrawMonitorTripTitile(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;1836   {	
;;;1837   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_TRIP_TITILE_X, (uint16)UI_ITEM_COODINATE_RIDING_TRIP_TITILE_Y, PIC_ID_TRIP, LCD_OPERATOR_MODE_DRAW);
000002  2126              MOVS     r1,#0x26
000004  f44f72f6          MOV      r2,#0x1ec
000008  201f              MOVS     r0,#0x1f
00000a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1838   }
;;;1839   
                          ENDP


                          AREA ||i.DISPLAY_DrawMonitorTripUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawMonitorTripUnit PROC
;;;1909   **********************************************************************/
;;;1910   void DISPLAY_DrawMonitorTripUnit(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;1911   {
;;;1912   	switch ((UNIT_E)ulBuff)
000002  f01000ff          ANDS     r0,r0,#0xff
;;;1913   	{
;;;1914   		case UNIT_METRIC:
;;;1915   
;;;1916   			// 显示图片
;;;1917   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_MPH_Y, PIC_ID_RECORD_MILE, LCD_OPERATOR_MODE_BACKGROUND);
000006  f44f72c2          MOV      r2,#0x184
00000a  d008              BEQ      |L190.30|
00000c  2801              CMP      r0,#1                 ;1912
00000e  d114              BNE      |L190.58|
;;;1918   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_KMH_Y, PIC_ID_RECORD_KM, LCD_OPERATOR_MODE_DRAW);
;;;1919   
;;;1920   			break;
;;;1921   
;;;1922   		case UNIT_INCH:
;;;1923   
;;;1924   			// 显示图片
;;;1925   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_MPH_Y, PIC_ID_RECORD_MILE, LCD_OPERATOR_MODE_DRAW);
000010  2300              MOVS     r3,#0
000012  2145              MOVS     r1,#0x45
000014  e8bd4010          POP      {r4,lr}
000018  207b              MOVS     r0,#0x7b
00001a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L190.30|
00001e  2301              MOVS     r3,#1                 ;1917
000020  2145              MOVS     r1,#0x45              ;1917
000022  207b              MOVS     r0,#0x7b              ;1917
000024  f7fffffe          BL       LCD_DrawBmpByID
000028  2300              MOVS     r3,#0                 ;1918
00002a  2145              MOVS     r1,#0x45              ;1918
00002c  e8bd4010          POP      {r4,lr}               ;1918
000030  f2401281          MOV      r2,#0x181             ;1918
000034  207b              MOVS     r0,#0x7b              ;1918
000036  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L190.58|
;;;1926   			
;;;1927   			break;
;;;1928   
;;;1929   		default:
;;;1930   			break;
;;;1931   	}
;;;1932   	
;;;1933   }
00003a  bd10              POP      {r4,pc}
;;;1934   
                          ENDP


                          AREA ||i.DISPLAY_DrawNavBg||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawNavBg PROC
;;;2352   
;;;2353   void DISPLAY_DrawNavBg(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;2354   {	
;;;2355   	LCD_DrawBmpByID(UI_ITEM_COODINATE_NAV_BG_X, UI_ITEM_COODINATE_NAV_BG_Y, PIC_ID_NAV_KUANG, LCD_OPERATOR_MODE_DRAW);
000002  213c              MOVS     r1,#0x3c
000004  f2401205          MOV      r2,#0x105
000008  20a2              MOVS     r0,#0xa2
00000a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2356   			
;;;2357   }
;;;2358   
                          ENDP


                          AREA ||i.DISPLAY_DrawNavDirection||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawNavDirection PROC
;;;2429   // 导航界面方向显示
;;;2430   void DISPLAY_DrawNavDirection(uint32 ulBuff)
000000  b2c0              UXTB     r0,r0
;;;2431   {	
;;;2432   	uint8 uwDirection = (uint8)(ulBuff & 0xFF);
;;;2433   
;;;2434   	switch (uwDirection)
000002  1e80              SUBS     r0,r0,#2
000004  280e              CMP      r0,#0xe
000006  d23f              BCS      |L192.136|
000008  e8dff000          TBB      [pc,r0]
00000c  070d1319          DCB      0x07,0x0d,0x13,0x19
000010  1f252c32          DCB      0x1f,0x25,0x2c,0x32
000014  3e3e3e3e          DCB      0x3e,0x3e,0x3e,0x3e
000018  3e38              DCB      0x3e,0x38
;;;2435   	{
;;;2436   		case NAV_ICON_LEFT: // 左转
;;;2437   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_ICON_X, 
00001a  2300              MOVS     r3,#0
00001c  22f8              MOVS     r2,#0xf8
00001e  2140              MOVS     r1,#0x40
000020  20c0              MOVS     r0,#0xc0
000022  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2438   				(uint16)UI_ITEM_COODINATE_NAV_ICON_Y, 
;;;2439   				PIC_ID_NAV_ICON_0, 
;;;2440   				LCD_OPERATOR_MODE_DRAW);
;;;2441   			break;
;;;2442   
;;;2443   		case NAV_ICON_RIGHT:// 右转
;;;2444   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_ICON_X, 
000026  2300              MOVS     r3,#0
000028  22f9              MOVS     r2,#0xf9
00002a  2140              MOVS     r1,#0x40
00002c  20c0              MOVS     r0,#0xc0
00002e  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2445   				(uint16)UI_ITEM_COODINATE_NAV_ICON_Y, 
;;;2446   				PIC_ID_NAV_ICON_1, 
;;;2447   				LCD_OPERATOR_MODE_DRAW);
;;;2448   			break;
;;;2449   
;;;2450   		case NAV_ICON_LEFT_FRONT:	
;;;2451   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_ICON_X, 
000032  2300              MOVS     r3,#0
000034  22fa              MOVS     r2,#0xfa
000036  2140              MOVS     r1,#0x40
000038  20c0              MOVS     r0,#0xc0
00003a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2452   				(uint16)UI_ITEM_COODINATE_NAV_ICON_Y, 
;;;2453   				PIC_ID_NAV_ICON_2, 
;;;2454   				LCD_OPERATOR_MODE_DRAW);
;;;2455   			break;
;;;2456   
;;;2457   		case NAV_ICON_RIGHT_FRONT:
;;;2458   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_ICON_X, 
00003e  2300              MOVS     r3,#0
000040  22fb              MOVS     r2,#0xfb
000042  2140              MOVS     r1,#0x40
000044  20c0              MOVS     r0,#0xc0
000046  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2459   				(uint16)UI_ITEM_COODINATE_NAV_ICON_Y, 
;;;2460   				PIC_ID_NAV_ICON_3, 
;;;2461   				LCD_OPERATOR_MODE_DRAW);
;;;2462   			break;
;;;2463   
;;;2464   		case NAV_ICON_LEFT_REAR:
;;;2465   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_ICON_X, 
00004a  2300              MOVS     r3,#0
00004c  22ff              MOVS     r2,#0xff
00004e  2140              MOVS     r1,#0x40
000050  20c0              MOVS     r0,#0xc0
000052  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2466   				(uint16)UI_ITEM_COODINATE_NAV_ICON_Y, 
;;;2467   				PIC_ID_NAV_ICON_7, 
;;;2468   				LCD_OPERATOR_MODE_DRAW);
;;;2469   			break;
;;;2470   
;;;2471   		case NAV_ICON_RIGHT_REAR:
;;;2472   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_ICON_X, 
000056  2300              MOVS     r3,#0
000058  2140              MOVS     r1,#0x40
00005a  f44f7280          MOV      r2,#0x100
00005e  20c0              MOVS     r0,#0xc0
000060  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2473   				(uint16)UI_ITEM_COODINATE_NAV_ICON_Y, 
;;;2474   				PIC_ID_NAV_ICON_8, 
;;;2475   				LCD_OPERATOR_MODE_DRAW);
;;;2476   			break;
;;;2477   
;;;2478   		case NAV_ICON_LEFT_TURN:
;;;2479   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_ICON_X, 
000064  2300              MOVS     r3,#0
000066  22fd              MOVS     r2,#0xfd
000068  2140              MOVS     r1,#0x40
00006a  20c0              MOVS     r0,#0xc0
00006c  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2480   				(uint16)UI_ITEM_COODINATE_NAV_ICON_Y, 
;;;2481   				PIC_ID_NAV_ICON_5, 
;;;2482   				LCD_OPERATOR_MODE_DRAW);
;;;2483   			break;
;;;2484   
;;;2485   		case NAV_ICON_GO_STRAIGHT:// 直行
;;;2486   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_ICON_X, 
000070  2300              MOVS     r3,#0
000072  22fc              MOVS     r2,#0xfc
000074  2140              MOVS     r1,#0x40
000076  20c0              MOVS     r0,#0xc0
000078  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2487   				(uint16)UI_ITEM_COODINATE_NAV_ICON_Y, 
;;;2488   				PIC_ID_NAV_ICON_4, 
;;;2489   				LCD_OPERATOR_MODE_DRAW);
;;;2490   			break;
;;;2491   
;;;2492   		case NAV_ICON_ARRIVE_DESTINATION:// 到达目的地
;;;2493   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_ICON_X, 
00007c  2300              MOVS     r3,#0
00007e  22fe              MOVS     r2,#0xfe
000080  2140              MOVS     r1,#0x40
000082  20c0              MOVS     r0,#0xc0
000084  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L192.136|
;;;2494   				(uint16)UI_ITEM_COODINATE_NAV_ICON_Y, 
;;;2495   				PIC_ID_NAV_ICON_6, 
;;;2496   				LCD_OPERATOR_MODE_DRAW);
;;;2497   			break;
;;;2498   
;;;2499   		default:
;;;2500   
;;;2501   			break;
;;;2502   	}	
;;;2503   }
000088  4770              BX       lr
;;;2504   
                          ENDP


                          AREA ||i.DISPLAY_DrawNavDistanceAndUnit||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawNavDistanceAndUnit PROC
;;;2506   // 导航界面此段道路距离与单位显示
;;;2507   void DISPLAY_DrawNavDistanceAndUnit(uint32 ulBuff)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;2508   {	
;;;2509   	uint8 value1=0, value2=0, value3=0, value4=0;
;;;2510   	uint16 uwDistance = (uint16)((ulBuff >> 16) & 0xFFFF);
000004  0c05              LSRS     r5,r0,#16
;;;2511   	uint16 unit = (uint16)(ulBuff & 0xFFFF);
000006  b286              UXTH     r6,r0
;;;2512   	uint16 distanceFt = 0;
;;;2513   	uint16 usLocalBuff = uwDistance%100000;
000008  489a              LDR      r0,|L193.628|
00000a  fbb5f1f0          UDIV     r1,r5,r0
00000e  fb005411          MLS      r4,r0,r1,r5
;;;2514   
;;;2515   	if (usLocalBuff > 999) // 大于等于1KM
000012  f44f787a          MOV      r8,#0x3e8
;;;2516   	{
;;;2517   		value1 = usLocalBuff / 10000;
;;;2518   		usLocalBuff %= 10000;
;;;2519   		value2 = usLocalBuff / 1000;
;;;2520   		usLocalBuff %= 1000;
;;;2521   		value3 = usLocalBuff / 100;
000016  2764              MOVS     r7,#0x64
;;;2522   
;;;2523   		// 单位
;;;2524   		if (UNIT_METRIC == unit)
;;;2525   		{
;;;2526   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_X, 
;;;2527   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_Y, 
;;;2528   								PIC_ID_NAV_MILE, 
;;;2529   								LCD_OPERATOR_MODE_BACKGROUND);
;;;2530   								
;;;2531   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_X, 
;;;2532   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_Y, 
;;;2533   								PIC_ID_NAV_KM, 
;;;2534   								LCD_OPERATOR_MODE_DRAW);
;;;2535   		}
;;;2536   		else
;;;2537   		{
;;;2538   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_X, 
;;;2539   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_Y, 
;;;2540   								PIC_ID_NAV_MILE, 
;;;2541   								LCD_OPERATOR_MODE_DRAW);
;;;2542   		}
;;;2543   		
;;;2544   		
;;;2545   		// 清除个位
;;;2546   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_M_Y, PIC_ID_NAV_SR_0, LCD_OPERATOR_MODE_BACKGROUND);
000018  f44f7b8e          MOV      r11,#0x11c
00001c  4544              CMP      r4,r8                 ;2515
00001e  d364              BCC      |L193.234|
000020  f2427a10          MOV      r10,#0x2710           ;2517
000024  fbb4f0fa          UDIV     r0,r4,r10             ;2517
000028  f00009ff          AND      r9,r0,#0xff           ;2517
00002c  fbb4f0fa          UDIV     r0,r4,r10             ;2518
000030  fb0a4010          MLS      r0,r10,r0,r4          ;2518
000034  fbb0f1f8          UDIV     r1,r0,r8              ;2519
000038  b2cc              UXTB     r4,r1                 ;2519
00003a  fbb0f1f8          UDIV     r1,r0,r8              ;2520
00003e  fb080011          MLS      r0,r8,r1,r0           ;2520
000042  fbb0f0f7          UDIV     r0,r0,r7              ;2521
000046  b2c7              UXTB     r7,r0                 ;2521
000048  b3ee              CBZ      r6,|L193.198|
00004a  2300              MOVS     r3,#0                 ;2538
00004c  f2401207          MOV      r2,#0x107             ;2538
000050  215f              MOVS     r1,#0x5f              ;2538
000052  20d8              MOVS     r0,#0xd8              ;2538
000054  f7fffffe          BL       LCD_DrawBmpByID
                  |L193.88|
000058  2301              MOVS     r3,#1
00005a  465a              MOV      r2,r11
00005c  215f              MOVS     r1,#0x5f
00005e  20c9              MOVS     r0,#0xc9
000060  f7fffffe          BL       LCD_DrawBmpByID
;;;2547   
;;;2548   		// 清除十位
;;;2549   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_Y, PIC_ID_NAV_SR_0, LCD_OPERATOR_MODE_BACKGROUND);
000064  2301              MOVS     r3,#1
000066  465a              MOV      r2,r11
000068  215f              MOVS     r1,#0x5f
00006a  20bc              MOVS     r0,#0xbc
00006c  f7fffffe          BL       LCD_DrawBmpByID
;;;2550   
;;;2551   		// 清除百位
;;;2552   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_Y, PIC_ID_NAV_SR_0, LCD_OPERATOR_MODE_BACKGROUND);
000070  2301              MOVS     r3,#1
000072  465a              MOV      r2,r11
000074  215f              MOVS     r1,#0x5f
000076  20af              MOVS     r0,#0xaf
000078  f7fffffe          BL       LCD_DrawBmpByID
;;;2553   		
;;;2554   		// 个位
;;;2555   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_KM_X, 
00007c  2300              MOVS     r3,#0
00007e  f507728e          ADD      r2,r7,#0x11c
000082  215f              MOVS     r1,#0x5f
000084  20c9              MOVS     r0,#0xc9
000086  f7fffffe          BL       LCD_DrawBmpByID
;;;2556   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_KM_Y, 
;;;2557   								(PIC_ID_E)(PIC_ID_NAV_SR_0+value3), 
;;;2558   								LCD_OPERATOR_MODE_DRAW);
;;;2559   
;;;2560   		// 小数点位
;;;2561   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_D_KM_X, 
00008a  2300              MOVS     r3,#0
00008c  22f6              MOVS     r2,#0xf6
00008e  216c              MOVS     r1,#0x6c
000090  20c2              MOVS     r0,#0xc2
000092  f7fffffe          BL       LCD_DrawBmpByID
;;;2562   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_D_KM_Y, 
;;;2563   								PIC_ID_NAV_DOR, 
;;;2564   								LCD_OPERATOR_MODE_DRAW);
;;;2565   
;;;2566   		// 十位
;;;2567   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_KM_X, 
000096  2300              MOVS     r3,#0
000098  f504728e          ADD      r2,r4,#0x11c
00009c  215f              MOVS     r1,#0x5f
00009e  20b5              MOVS     r0,#0xb5
0000a0  f7fffffe          BL       LCD_DrawBmpByID
;;;2568   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_KM_Y, 
;;;2569   								(PIC_ID_E)(PIC_ID_NAV_SR_0+value2), 
;;;2570   								LCD_OPERATOR_MODE_DRAW);
;;;2571   		
;;;2572   		// 清除百位
;;;2573   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_KM_X, 
0000a4  f509728e          ADD      r2,r9,#0x11c
0000a8  2301              MOVS     r3,#1
0000aa  4614              MOV      r4,r2
0000ac  215f              MOVS     r1,#0x5f
0000ae  20a8              MOVS     r0,#0xa8
0000b0  f7fffffe          BL       LCD_DrawBmpByID
;;;2574   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_KM_Y, 
;;;2575   								(PIC_ID_E)(PIC_ID_NAV_SR_0+value1), 
;;;2576   								LCD_OPERATOR_MODE_BACKGROUND);
;;;2577   
;;;2578   		// 根据数值显示，显示百位
;;;2579   		CHECK_PARAM_LESS_RETURN(uwDistance, 10000);
0000b4  4555              CMP      r5,r10
0000b6  d37d              BCC      |L193.436|
;;;2580   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_KM_X, 
0000b8  4622              MOV      r2,r4
0000ba  e8bd5ff0          POP      {r4-r12,lr}
0000be  2300              MOVS     r3,#0
0000c0  215f              MOVS     r1,#0x5f
0000c2  20a8              MOVS     r0,#0xa8
0000c4  e000              B        |L193.200|
                  |L193.198|
0000c6  e001              B        |L193.204|
                  |L193.200|
0000c8  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L193.204|
0000cc  2301              MOVS     r3,#1                 ;2526
0000ce  f2401207          MOV      r2,#0x107             ;2526
0000d2  215f              MOVS     r1,#0x5f              ;2526
0000d4  20d8              MOVS     r0,#0xd8              ;2526
0000d6  f7fffffe          BL       LCD_DrawBmpByID
0000da  2300              MOVS     r3,#0                 ;2531
0000dc  f44f7282          MOV      r2,#0x104             ;2531
0000e0  215f              MOVS     r1,#0x5f              ;2531
0000e2  20d8              MOVS     r0,#0xd8              ;2531
0000e4  f7fffffe          BL       LCD_DrawBmpByID
0000e8  e7b6              B        |L193.88|
                  |L193.234|
;;;2581   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_KM_Y, 
;;;2582   								(PIC_ID_E)(PIC_ID_NAV_SR_0+value1), 
;;;2583   								LCD_OPERATOR_MODE_DRAW);
;;;2584   	}
;;;2585   	else
;;;2586   	{
;;;2587   		// 清除个位
;;;2588   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_KM_X, 
0000ea  2301              MOVS     r3,#1
0000ec  465a              MOV      r2,r11
0000ee  215f              MOVS     r1,#0x5f
0000f0  20c9              MOVS     r0,#0xc9
0000f2  f7fffffe          BL       LCD_DrawBmpByID
;;;2589   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_KM_Y, 
;;;2590   								PIC_ID_NAV_SR_0, 
;;;2591   								LCD_OPERATOR_MODE_BACKGROUND);
;;;2592   
;;;2593   		// 清除小数点位
;;;2594   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_D_KM_X, 
0000f6  2301              MOVS     r3,#1
0000f8  22f6              MOVS     r2,#0xf6
0000fa  216c              MOVS     r1,#0x6c
0000fc  20c2              MOVS     r0,#0xc2
0000fe  f7fffffe          BL       LCD_DrawBmpByID
;;;2595   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_D_KM_Y, 
;;;2596   								PIC_ID_NAV_DOR, 
;;;2597   								LCD_OPERATOR_MODE_BACKGROUND);
;;;2598   
;;;2599   		// 清除十位
;;;2600   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_KM_X, 
000102  2301              MOVS     r3,#1
000104  465a              MOV      r2,r11
000106  215f              MOVS     r1,#0x5f
000108  20b5              MOVS     r0,#0xb5
00010a  f7fffffe          BL       LCD_DrawBmpByID
;;;2601   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_KM_Y, 
;;;2602   								PIC_ID_NAV_SR_0, 
;;;2603   								LCD_OPERATOR_MODE_BACKGROUND);
;;;2604   		
;;;2605   		// 清除百位
;;;2606   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_KM_X, 
00010e  2301              MOVS     r3,#1
000110  465a              MOV      r2,r11
000112  215f              MOVS     r1,#0x5f
000114  20a8              MOVS     r0,#0xa8
000116  f7fffffe          BL       LCD_DrawBmpByID
;;;2607   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_KM_Y, 
;;;2608   								PIC_ID_NAV_SR_0, 
;;;2609   								LCD_OPERATOR_MODE_BACKGROUND);
;;;2610   	
;;;2611   		if (UNIT_METRIC == unit)
;;;2612   		{
;;;2613   			// 单位
;;;2614   			// 提取五个数字位上的数字
;;;2615   			value1 = usLocalBuff/100;
;;;2616   			usLocalBuff %= 100;
;;;2617   			value2 = usLocalBuff/10;
00011a  210a              MOVS     r1,#0xa
00011c  2e00              CMP      r6,#0                 ;2611
00011e  d061              BEQ      |L193.484|
;;;2618   			value3 = usLocalBuff%10;
;;;2619   		
;;;2620   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_X, 
;;;2621   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_Y, 
;;;2622   								PIC_ID_NAV_MILE, 
;;;2623   								LCD_OPERATOR_MODE_BACKGROUND);
;;;2624   								
;;;2625   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_X, 
;;;2626   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_Y, 
;;;2627   								PIC_ID_NAV_M, 
;;;2628   								LCD_OPERATOR_MODE_DRAW);
;;;2629   
;;;2630   			// 个位
;;;2631   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;2632   
;;;2633   			// 清除十位
;;;2634   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value2), LCD_OPERATOR_MODE_BACKGROUND);
;;;2635   
;;;2636   			// 清除百位
;;;2637   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value1), LCD_OPERATOR_MODE_BACKGROUND);
;;;2638   		
;;;2639   			// 根据数值显示，显示十位
;;;2640   			CHECK_PARAM_LESS_RETURN(uwDistance, 10);
;;;2641   			
;;;2642   			// 十位
;;;2643   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;2644   
;;;2645   			// 根据数值显示，显示百位
;;;2646   			CHECK_PARAM_LESS_RETURN(uwDistance, 100);
;;;2647   			
;;;2648   			// 百位
;;;2649   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value1), LCD_OPERATOR_MODE_DRAW);	
;;;2650   		}
;;;2651   		else
;;;2652   		{
;;;2653   			distanceFt = usLocalBuff * MILE_TO_FT_COFF / 1000;			// 将英里(mile)转为英尺(ft)
000120  f44f50a5          MOV      r0,#0x14a0
000124  4344              MULS     r4,r0,r4
000126  fbb4f0f8          UDIV     r0,r4,r8
00012a  b284              UXTH     r4,r0
;;;2654   			
;;;2655   			// 提取五个数字位上的数字
;;;2656   			value1 = distanceFt/1000;
00012c  fbb4f0f8          UDIV     r0,r4,r8
000130  b2c5              UXTB     r5,r0
;;;2657   			value2 = (distanceFt % 1000)/100;
000132  fbb4f0f8          UDIV     r0,r4,r8
000136  fb084010          MLS      r0,r8,r0,r4
00013a  fbb0f0f7          UDIV     r0,r0,r7
00013e  b2c6              UXTB     r6,r0
;;;2658   			value3 = (distanceFt % 100)/10;
000140  fbb4f0f7          UDIV     r0,r4,r7
000144  fb074010          MLS      r0,r7,r0,r4
000148  fbb0f7f1          UDIV     r7,r0,r1
;;;2659   			value4 = distanceFt%10;
00014c  fbb4f0f1          UDIV     r0,r4,r1
000150  fb014910          MLS      r9,r1,r0,r4
;;;2660   			
;;;2661   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_X, 
000154  2301              MOVS     r3,#1
000156  f2401207          MOV      r2,#0x107
00015a  215f              MOVS     r1,#0x5f
00015c  20d8              MOVS     r0,#0xd8
00015e  f7fffffe          BL       LCD_DrawBmpByID
;;;2662   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_Y, 
;;;2663   								PIC_ID_NAV_MILE, 
;;;2664   								LCD_OPERATOR_MODE_BACKGROUND);
;;;2665   								
;;;2666   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_X, 
000162  2300              MOVS     r3,#0
000164  22f7              MOVS     r2,#0xf7
000166  215f              MOVS     r1,#0x5f
000168  20d8              MOVS     r0,#0xd8
00016a  f7fffffe          BL       LCD_DrawBmpByID
;;;2667   								(uint16)UI_ITEM_COODINATE_NAV_DISTANCE_UNIT_Y, 
;;;2668   								PIC_ID_NAV_FT, 
;;;2669   								LCD_OPERATOR_MODE_DRAW);
;;;2670   
;;;2671   			// 个位
;;;2672   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_3_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value4), LCD_OPERATOR_MODE_DRAW);
00016e  2300              MOVS     r3,#0
000170  f509728e          ADD      r2,r9,#0x11c
000174  215f              MOVS     r1,#0x5f
000176  20c9              MOVS     r0,#0xc9
000178  f7fffffe          BL       LCD_DrawBmpByID
;;;2673   			
;;;2674   			// 清除十位
;;;2675   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
00017c  f507728e          ADD      r2,r7,#0x11c
000180  2301              MOVS     r3,#1
000182  4617              MOV      r7,r2
000184  215f              MOVS     r1,#0x5f
000186  20bc              MOVS     r0,#0xbc
000188  f7fffffe          BL       LCD_DrawBmpByID
;;;2676   
;;;2677   			// 清除百位
;;;2678   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value2), LCD_OPERATOR_MODE_BACKGROUND);
00018c  f506728e          ADD      r2,r6,#0x11c
000190  2301              MOVS     r3,#1
000192  4616              MOV      r6,r2
000194  215f              MOVS     r1,#0x5f
000196  20af              MOVS     r0,#0xaf
000198  f7fffffe          BL       LCD_DrawBmpByID
;;;2679   
;;;2680   			// 清除千位
;;;2681   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_0_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_0_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value1), LCD_OPERATOR_MODE_BACKGROUND);
00019c  f505728e          ADD      r2,r5,#0x11c
0001a0  2301              MOVS     r3,#1
0001a2  4615              MOV      r5,r2
0001a4  215f              MOVS     r1,#0x5f
0001a6  20a2              MOVS     r0,#0xa2
0001a8  f7fffffe          BL       LCD_DrawBmpByID
;;;2682   		
;;;2683   			// 根据数值显示，显示十位
;;;2684   			CHECK_PARAM_LESS_RETURN(distanceFt, 10);
0001ac  2c0a              CMP      r4,#0xa
0001ae  d35e              BCC      |L193.622|
;;;2685   			
;;;2686   			// 十位
;;;2687   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_2_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value3), LCD_OPERATOR_MODE_DRAW);
0001b0  2300              MOVS     r3,#0
0001b2  e000              B        |L193.438|
                  |L193.436|
0001b4  e05b              B        |L193.622|
                  |L193.438|
0001b6  463a              MOV      r2,r7
0001b8  215f              MOVS     r1,#0x5f
0001ba  20bc              MOVS     r0,#0xbc
0001bc  f7fffffe          BL       LCD_DrawBmpByID
;;;2688   
;;;2689   			// 根据数值显示，显示百位
;;;2690   			CHECK_PARAM_LESS_RETURN(distanceFt, 100);
0001c0  2c64              CMP      r4,#0x64
0001c2  d354              BCC      |L193.622|
;;;2691   			
;;;2692   			// 百位
;;;2693   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_1_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value2), LCD_OPERATOR_MODE_DRAW);	
0001c4  2300              MOVS     r3,#0
0001c6  4632              MOV      r2,r6
0001c8  215f              MOVS     r1,#0x5f
0001ca  20af              MOVS     r0,#0xaf
0001cc  f7fffffe          BL       LCD_DrawBmpByID
;;;2694   
;;;2695   			// 根据数值显示，显示千位
;;;2696   			CHECK_PARAM_LESS_RETURN(distanceFt, 1000);
0001d0  4544              CMP      r4,r8
0001d2  d34c              BCC      |L193.622|
;;;2697   			
;;;2698   			// 百位
;;;2699   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_DISTANCE_0_M_X, (uint16)UI_ITEM_COODINATE_NAV_DISTANCE_0_M_Y, (PIC_ID_E)(PIC_ID_NAV_SR_0+value1), LCD_OPERATOR_MODE_DRAW);
0001d4  462a              MOV      r2,r5
0001d6  e8bd5ff0          POP      {r4-r12,lr}
0001da  2300              MOVS     r3,#0
0001dc  215f              MOVS     r1,#0x5f
0001de  20a2              MOVS     r0,#0xa2
0001e0  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L193.484|
0001e4  fbb4f0f7          UDIV     r0,r4,r7              ;2615
0001e8  b2c6              UXTB     r6,r0                 ;2615
0001ea  fbb4f0f7          UDIV     r0,r4,r7              ;2616
0001ee  fb074010          MLS      r0,r7,r0,r4           ;2616
0001f2  fbb0f2f1          UDIV     r2,r0,r1              ;2617
0001f6  b2d4              UXTB     r4,r2                 ;2617
0001f8  fbb0f2f1          UDIV     r2,r0,r1              ;2618
0001fc  fb010712          MLS      r7,r1,r2,r0           ;2618
000200  2301              MOVS     r3,#1                 ;2620
000202  f2401207          MOV      r2,#0x107             ;2620
000206  215f              MOVS     r1,#0x5f              ;2620
000208  20d8              MOVS     r0,#0xd8              ;2620
00020a  f7fffffe          BL       LCD_DrawBmpByID
00020e  2300              MOVS     r3,#0                 ;2625
000210  f44f7283          MOV      r2,#0x106             ;2625
000214  215f              MOVS     r1,#0x5f              ;2625
000216  20d8              MOVS     r0,#0xd8              ;2625
000218  f7fffffe          BL       LCD_DrawBmpByID
00021c  2300              MOVS     r3,#0                 ;2631
00021e  f507728e          ADD      r2,r7,#0x11c          ;2631
000222  215f              MOVS     r1,#0x5f              ;2631
000224  20c9              MOVS     r0,#0xc9              ;2631
000226  f7fffffe          BL       LCD_DrawBmpByID
00022a  f504728e          ADD      r2,r4,#0x11c          ;2634
00022e  2301              MOVS     r3,#1                 ;2634
000230  4614              MOV      r4,r2                 ;2634
000232  215f              MOVS     r1,#0x5f              ;2634
000234  20bc              MOVS     r0,#0xbc              ;2634
000236  f7fffffe          BL       LCD_DrawBmpByID
00023a  f506728e          ADD      r2,r6,#0x11c          ;2637
00023e  2301              MOVS     r3,#1                 ;2637
000240  4616              MOV      r6,r2                 ;2637
000242  215f              MOVS     r1,#0x5f              ;2637
000244  20af              MOVS     r0,#0xaf              ;2637
000246  f7fffffe          BL       LCD_DrawBmpByID
00024a  2d0a              CMP      r5,#0xa               ;2640
00024c  d30f              BCC      |L193.622|
00024e  2300              MOVS     r3,#0                 ;2643
000250  4622              MOV      r2,r4                 ;2643
000252  215f              MOVS     r1,#0x5f              ;2643
000254  20bc              MOVS     r0,#0xbc              ;2643
000256  f7fffffe          BL       LCD_DrawBmpByID
00025a  2d64              CMP      r5,#0x64              ;2646
00025c  d307              BCC      |L193.622|
00025e  4632              MOV      r2,r6                 ;2649
000260  e8bd5ff0          POP      {r4-r12,lr}           ;2649
000264  2300              MOVS     r3,#0                 ;2649
000266  215f              MOVS     r1,#0x5f              ;2649
000268  20af              MOVS     r0,#0xaf              ;2649
00026a  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L193.622|
;;;2700   		}
;;;2701   	}
;;;2702   }
00026e  e8bd9ff0          POP      {r4-r12,pc}
;;;2703   
                          ENDP

000272  0000              DCW      0x0000
                  |L193.628|
                          DCD      0x000186a0

                          AREA ||i.DISPLAY_DrawNavDistanceTime||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawNavDistanceTime PROC
;;;2704   // 显示到达终点的时间
;;;2705   void DISPLAY_DrawNavDistanceTime(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2706   {	
;;;2707   	uint8 value1=0, value2=0;
;;;2708   	uint8 uwHour = (uint8)((ulBuff >> 8) & 0xFF);
000004  f3c02107          UBFX     r1,r0,#8,#8
;;;2709   	uint8 uwMinute = (uint8)(ulBuff & 0xFF);
000008  b2c4              UXTB     r4,r0
;;;2710   	
;;;2711   	// 提取三个数字位上的数字
;;;2712   	value1 = uwHour/10;
00000a  250a              MOVS     r5,#0xa
00000c  fbb1f6f5          UDIV     r6,r1,r5
;;;2713   	value2 = uwHour%10;
000010  fbb1f0f5          UDIV     r0,r1,r5
000014  fb051710          MLS      r7,r5,r0,r1
;;;2714   
;;;2715   	// 显示到达终点的时间图标
;;;2716   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_TIME_ICON_X, 
000018  2300              MOVS     r3,#0
00001a  f2401203          MOV      r2,#0x103
00001e  217a              MOVS     r1,#0x7a
000020  20a7              MOVS     r0,#0xa7
000022  f7fffffe          BL       LCD_DrawBmpByID
;;;2717   					(uint16)UI_ITEM_COODINATE_NAV_TIME_ICON_Y, 
;;;2718   					(PIC_ID_E)(PIC_ID_NAV_ICON_TIME), 
;;;2719   					LCD_OPERATOR_MODE_DRAW);
;;;2720   	
;;;2721   	// 显示小时个位
;;;2722   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_TIME_H_1_X, 
000026  2300              MOVS     r3,#0
000028  f5077293          ADD      r2,r7,#0x126
00002c  217a              MOVS     r1,#0x7a
00002e  20bd              MOVS     r0,#0xbd
000030  f7fffffe          BL       LCD_DrawBmpByID
;;;2723   					(uint16)UI_ITEM_COODINATE_NAV_TIME_H_1_Y, 
;;;2724   					(PIC_ID_E)(PIC_ID_NAV_TIME_0 + value2), 
;;;2725   					LCD_OPERATOR_MODE_DRAW);
;;;2726   	
;;;2727   	// 显示小时十位	
;;;2728   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_TIME_H_10_X, 
000034  2300              MOVS     r3,#0
000036  f5067293          ADD      r2,r6,#0x126
00003a  217a              MOVS     r1,#0x7a
00003c  20b4              MOVS     r0,#0xb4
00003e  f7fffffe          BL       LCD_DrawBmpByID
;;;2729   					(uint16)UI_ITEM_COODINATE_NAV_TIME_H_10_Y, 
;;;2730   					(PIC_ID_E)(PIC_ID_NAV_TIME_0 + value1), 
;;;2731   					LCD_OPERATOR_MODE_DRAW);
;;;2732   
;;;2733   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_TIME_H_X, 
000042  2300              MOVS     r3,#0
000044  f2401201          MOV      r2,#0x101
000048  217a              MOVS     r1,#0x7a
00004a  20c8              MOVS     r0,#0xc8
00004c  f7fffffe          BL       LCD_DrawBmpByID
;;;2734   					(uint16)UI_ITEM_COODINATE_NAV_TIME_H_Y, 
;;;2735   					(PIC_ID_E)(PIC_ID_NAV_ICON_H), 
;;;2736   					LCD_OPERATOR_MODE_DRAW);
;;;2737   					
;;;2738   	value1 = uwMinute/10;
000050  fbb4f6f5          UDIV     r6,r4,r5
;;;2739   	value2 = uwMinute%10;
000054  fbb4f0f5          UDIV     r0,r4,r5
000058  fb054210          MLS      r2,r5,r0,r4
;;;2740   	
;;;2741   	// 显示分钟个位
;;;2742   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_TIME_M_1_X, 
00005c  2300              MOVS     r3,#0
00005e  f5027293          ADD      r2,r2,#0x126
000062  217a              MOVS     r1,#0x7a
000064  20db              MOVS     r0,#0xdb
000066  f7fffffe          BL       LCD_DrawBmpByID
;;;2743   					(uint16)UI_ITEM_COODINATE_NAV_TIME_M_1_Y, 
;;;2744   					(PIC_ID_E)(PIC_ID_NAV_TIME_0 + value2), 
;;;2745   					LCD_OPERATOR_MODE_DRAW);
;;;2746   	
;;;2747   	// 显示分钟十位	
;;;2748   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_TIME_M_10_X, 
00006a  2300              MOVS     r3,#0
00006c  f5067293          ADD      r2,r6,#0x126
000070  217a              MOVS     r1,#0x7a
000072  20d2              MOVS     r0,#0xd2
000074  f7fffffe          BL       LCD_DrawBmpByID
;;;2749   					(uint16)UI_ITEM_COODINATE_NAV_TIME_M_10_Y, 
;;;2750   					(PIC_ID_E)(PIC_ID_NAV_TIME_0 + value1), 
;;;2751   					LCD_OPERATOR_MODE_DRAW);
;;;2752   
;;;2753   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_TIME_M_X, 
000078  e8bd41f0          POP      {r4-r8,lr}
00007c  2300              MOVS     r3,#0
00007e  217a              MOVS     r1,#0x7a
000080  f44f7281          MOV      r2,#0x102
000084  20e6              MOVS     r0,#0xe6
000086  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2754   					(uint16)UI_ITEM_COODINATE_NAV_TIME_M_Y, 
;;;2755   					(PIC_ID_E)(PIC_ID_NAV_ICON_M), 
;;;2756   					LCD_OPERATOR_MODE_DRAW);
;;;2757   }
;;;2758   
                          ENDP


                          AREA ||i.DISPLAY_DrawNavSpeed||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawNavSpeed PROC
;;;2358   
;;;2359   void DISPLAY_DrawNavSpeed(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2360   {	
000004  4605              MOV      r5,r0
;;;2361   	uint8 value1=0, value2=0, value3=0;
;;;2362   	uint16 usLocalBuff = ulBuff%1000;
000006  f44f707a          MOV      r0,#0x3e8
00000a  fbb5f1f0          UDIV     r1,r5,r0
00000e  fb005111          MLS      r1,r0,r1,r5
;;;2363   	
;;;2364   	// 提取三个数字位上的数字
;;;2365   	value1 = usLocalBuff/100;
000012  2264              MOVS     r2,#0x64
000014  fbb1f0f2          UDIV     r0,r1,r2
000018  b2c4              UXTB     r4,r0
;;;2366   	usLocalBuff %= 100;
00001a  fbb1f0f2          UDIV     r0,r1,r2
00001e  fb021110          MLS      r1,r2,r0,r1
;;;2367   	value2 = usLocalBuff/10;
000022  220a              MOVS     r2,#0xa
000024  fbb1f0f2          UDIV     r0,r1,r2
000028  b2c6              UXTB     r6,r0
;;;2368   	value3 = usLocalBuff%10;	
00002a  fbb1f0f2          UDIV     r0,r1,r2
00002e  fb021710          MLS      r7,r2,r0,r1
;;;2369   
;;;2370   	// 显示小数点
;;;2371   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_SPEED_DOR_X, (uint16)UI_ITEM_COODINATE_NAV_SPEED_DOR_Y, PIC_ID_SPEED_DOT, LCD_OPERATOR_MODE_DRAW);
000032  2300              MOVS     r3,#0
000034  f24012c7          MOV      r2,#0x1c7
000038  217c              MOVS     r1,#0x7c
00003a  2072              MOVS     r0,#0x72
00003c  f7fffffe          BL       LCD_DrawBmpByID
;;;2372   
;;;2373   	// 显示个位
;;;2374   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_SPEED_NUM3_X, (uint16)UI_ITEM_COODINATE_NAV_SPEED_NUM3_Y, (PIC_ID_E)(PIC_ID_NAV_SD_0+value3), LCD_OPERATOR_MODE_DRAW);
000040  2300              MOVS     r3,#0
000042  f5077289          ADD      r2,r7,#0x112
000046  2162              MOVS     r1,#0x62
000048  207a              MOVS     r0,#0x7a
00004a  f7fffffe          BL       LCD_DrawBmpByID
;;;2375   
;;;2376   	// 显示十位
;;;2377   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_SPEED_NUM2_X, (uint16)UI_ITEM_COODINATE_NAV_SPEED_NUM2_Y, (PIC_ID_E)(PIC_ID_NAV_S_0+value2), LCD_OPERATOR_MODE_DRAW);
00004e  2300              MOVS     r3,#0
000050  f5067284          ADD      r2,r6,#0x108
000054  2156              MOVS     r1,#0x56
000056  2055              MOVS     r0,#0x55
000058  f7fffffe          BL       LCD_DrawBmpByID
;;;2378   
;;;2379   	if (ulBuff < 100)
00005c  2d64              CMP      r5,#0x64
00005e  d208              BCS      |L195.114|
;;;2380   	{		
;;;2381   		// 清除百位
;;;2382   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_SPEED_NUM1_X, (uint16)UI_ITEM_COODINATE_NAV_SPEED_NUM1_Y, (PIC_ID_E)(PIC_ID_NAV_S_0+value1), LCD_OPERATOR_MODE_BACKGROUND);
000060  f5047284          ADD      r2,r4,#0x108
000064  e8bd41f0          POP      {r4-r8,lr}
000068  2301              MOVS     r3,#1
00006a  2155              MOVS     r1,#0x55
00006c  2033              MOVS     r0,#0x33
00006e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L195.114|
;;;2383   	}
;;;2384   	else
;;;2385   	{	
;;;2386   		// 显示百位
;;;2387   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_SPEED_NUM1_X, (uint16)UI_ITEM_COODINATE_NAV_SPEED_NUM1_Y, (PIC_ID_E)(PIC_ID_NAV_S_0+value1), LCD_OPERATOR_MODE_DRAW);
000072  f5047284          ADD      r2,r4,#0x108
000076  e8bd41f0          POP      {r4-r8,lr}
00007a  2300              MOVS     r3,#0
00007c  2155              MOVS     r1,#0x55
00007e  2033              MOVS     r0,#0x33
000080  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2388   	}
;;;2389   
;;;2390   	
;;;2391   }
;;;2392   
                          ENDP


                          AREA ||i.DISPLAY_DrawNavSpeedUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawNavSpeedUnit PROC
;;;2404   **********************************************************************/
;;;2405   void DISPLAY_DrawNavSpeedUnit(uint32 ulBuff)
000000  f01000ff          ANDS     r0,r0,#0xff
;;;2406   {
000004  d008              BEQ      |L196.24|
;;;2407   	switch ((UNIT_E)ulBuff)
000006  2801              CMP      r0,#1
000008  d10d              BNE      |L196.38|
;;;2408   	{
;;;2409   		case UNIT_METRIC:
;;;2410   
;;;2411   			// 显示图片			
;;;2412   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_SPEED_UNIT_X, (uint16)UI_ITEM_COODINATE_NAV_SPEED_UNIT_Y, PIC_ID_RIDING_KMH, LCD_OPERATOR_MODE_DRAW);
;;;2413   
;;;2414   			break;
;;;2415   
;;;2416   		case UNIT_INCH:
;;;2417   
;;;2418   			// 显示图片		
;;;2419   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_NAV_SPEED_UNIT_X, (uint16)UI_ITEM_COODINATE_NAV_SPEED_UNIT_Y, PIC_ID_RIDING_MPH, LCD_OPERATOR_MODE_DRAW);
00000a  2300              MOVS     r3,#0
00000c  2152              MOVS     r1,#0x52
00000e  f2401289          MOV      r2,#0x189
000012  207d              MOVS     r0,#0x7d
000014  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L196.24|
000018  2300              MOVS     r3,#0                 ;2412
00001a  2152              MOVS     r1,#0x52              ;2412
00001c  f44f72c4          MOV      r2,#0x188             ;2412
000020  207d              MOVS     r0,#0x7d              ;2412
000022  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L196.38|
;;;2420   			
;;;2421   			break;
;;;2422   
;;;2423   		default:
;;;2424   			break;
;;;2425   	}
;;;2426   	
;;;2427   }
000026  4770              BX       lr
;;;2428   
                          ENDP


                          AREA ||i.DISPLAY_DrawPhoneBg||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawPhoneBg PROC
;;;1429   
;;;1430   void DISPLAY_DrawPhoneBg(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;1431   {
000002  d007              BEQ      |L197.20|
;;;1432   	switch (ulBuff)
000004  2801              CMP      r0,#1
000006  d105              BNE      |L197.20|
;;;1433   	{
;;;1434   		case 0:
;;;1435   			break;
;;;1436   
;;;1437   		case 1:
;;;1438   
;;;1439   			// 显示界面背景图
;;;1440   			LCD_DrawBmpByID(UI_ITEM_COODINATE_PHONE_BACKGROUND_X, UI_ITEM_COODINATE_PHONE_BACKGROUND_Y, PIC_ID_CALL_KEY, LCD_OPERATOR_MODE_DRAW);
000008  2300              MOVS     r3,#0
00000a  2263              MOVS     r2,#0x63
00000c  212a              MOVS     r1,#0x2a
00000e  2068              MOVS     r0,#0x68
000010  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L197.20|
;;;1441   			break;
;;;1442   
;;;1443   		default:
;;;1444   			break;
;;;1445   	}
;;;1446   }
000014  4770              BX       lr
;;;1447   
                          ENDP


                          AREA ||i.DISPLAY_DrawPhoneNumber||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawPhoneNumber PROC
;;;1460   
;;;1461   void DISPLAY_DrawPhoneNumber(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;1462   {
000002  b08c              SUB      sp,sp,#0x30
;;;1463   	uint32 i = 0;
000004  2400              MOVS     r4,#0
;;;1464   	uint32 disbuff[11] = {0};
000006  212c              MOVS     r1,#0x2c
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memclr4
;;;1465   
;;;1466   	for(i = 0; i < 11; i++)
;;;1467   	{
;;;1468   		disbuff[i] = callringBuff[i];
00000e  4b43              LDR      r3,|L198.284|
000010  a901              ADD      r1,sp,#4              ;1464
;;;1469   		
;;;1470   		if (disbuff[i] > 9)
;;;1471   		{
;;;1472   			disbuff[i] = 0xFF;
000012  22ff              MOVS     r2,#0xff
                  |L198.20|
000014  5d18              LDRB     r0,[r3,r4]            ;1468
000016  f8410024          STR      r0,[r1,r4,LSL #2]     ;1468
00001a  2809              CMP      r0,#9                 ;1470
00001c  d901              BLS      |L198.34|
00001e  f8412024          STR      r2,[r1,r4,LSL #2]
                  |L198.34|
000022  1c64              ADDS     r4,r4,#1              ;1466
000024  2c0b              CMP      r4,#0xb               ;1466
000026  d3f5              BCC      |L198.20|
;;;1473   		}
;;;1474   	}
;;;1475   	
;;;1476   	// 显示来电数字
;;;1477   	if (0xFF != disbuff[0])
000028  9801              LDR      r0,[sp,#4]
00002a  28ff              CMP      r0,#0xff
00002c  d006              BEQ      |L198.60|
;;;1478   	{
;;;1479   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL1_X, (uint16)UI_ITEM_COODINATE_CALL1_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[0]), LCD_OPERATOR_MODE_DRAW);
00002e  3065              ADDS     r0,r0,#0x65
000030  b282              UXTH     r2,r0
000032  2300              MOVS     r3,#0
000034  2188              MOVS     r1,#0x88
000036  206a              MOVS     r0,#0x6a
000038  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.60|
;;;1480   	}
;;;1481   
;;;1482   	if (0xFF != disbuff[1])
00003c  9802              LDR      r0,[sp,#8]
00003e  28ff              CMP      r0,#0xff
000040  d007              BEQ      |L198.82|
;;;1483   	{
;;;1484   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL2_X, (uint16)UI_ITEM_COODINATE_CALL2_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[1]), LCD_OPERATOR_MODE_DRAW);
000042  9802              LDR      r0,[sp,#8]
000044  2300              MOVS     r3,#0
000046  3065              ADDS     r0,r0,#0x65
000048  b282              UXTH     r2,r0
00004a  2188              MOVS     r1,#0x88
00004c  2073              MOVS     r0,#0x73
00004e  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.82|
;;;1485   	}
;;;1486   
;;;1487   	if (0xFF != disbuff[2])
000052  9803              LDR      r0,[sp,#0xc]
000054  28ff              CMP      r0,#0xff
000056  d007              BEQ      |L198.104|
;;;1488   	{
;;;1489   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL3_X, (uint16)UI_ITEM_COODINATE_CALL3_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[2]), LCD_OPERATOR_MODE_DRAW);
000058  9803              LDR      r0,[sp,#0xc]
00005a  2300              MOVS     r3,#0
00005c  3065              ADDS     r0,r0,#0x65
00005e  b282              UXTH     r2,r0
000060  2188              MOVS     r1,#0x88
000062  207c              MOVS     r0,#0x7c
000064  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.104|
;;;1490   	}
;;;1491   
;;;1492   	if (0xFF != disbuff[3])
000068  9804              LDR      r0,[sp,#0x10]
00006a  28ff              CMP      r0,#0xff
00006c  d007              BEQ      |L198.126|
;;;1493   	{
;;;1494   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL4_X, (uint16)UI_ITEM_COODINATE_CALL4_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[3]), LCD_OPERATOR_MODE_DRAW);
00006e  9804              LDR      r0,[sp,#0x10]
000070  2300              MOVS     r3,#0
000072  3065              ADDS     r0,r0,#0x65
000074  b282              UXTH     r2,r0
000076  2188              MOVS     r1,#0x88
000078  208a              MOVS     r0,#0x8a
00007a  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.126|
;;;1495   	}
;;;1496   
;;;1497   	if (0xFF != disbuff[4])
00007e  9805              LDR      r0,[sp,#0x14]
000080  28ff              CMP      r0,#0xff
000082  d007              BEQ      |L198.148|
;;;1498   	{
;;;1499   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL5_X, (uint16)UI_ITEM_COODINATE_CALL5_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[4]), LCD_OPERATOR_MODE_DRAW);
000084  9805              LDR      r0,[sp,#0x14]
000086  2300              MOVS     r3,#0
000088  3065              ADDS     r0,r0,#0x65
00008a  b282              UXTH     r2,r0
00008c  2188              MOVS     r1,#0x88
00008e  2093              MOVS     r0,#0x93
000090  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.148|
;;;1500   	}
;;;1501   
;;;1502   	if (0xFF != disbuff[5])
000094  9806              LDR      r0,[sp,#0x18]
000096  28ff              CMP      r0,#0xff
000098  d007              BEQ      |L198.170|
;;;1503   	{
;;;1504   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL6_X, (uint16)UI_ITEM_COODINATE_CALL6_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[5]), LCD_OPERATOR_MODE_DRAW);
00009a  9806              LDR      r0,[sp,#0x18]
00009c  2300              MOVS     r3,#0
00009e  3065              ADDS     r0,r0,#0x65
0000a0  b282              UXTH     r2,r0
0000a2  2188              MOVS     r1,#0x88
0000a4  209c              MOVS     r0,#0x9c
0000a6  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.170|
;;;1505   	}
;;;1506   
;;;1507   	if (0xFF != disbuff[6])
0000aa  9807              LDR      r0,[sp,#0x1c]
0000ac  28ff              CMP      r0,#0xff
0000ae  d007              BEQ      |L198.192|
;;;1508   	{
;;;1509   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL7_X, (uint16)UI_ITEM_COODINATE_CALL7_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[6]), LCD_OPERATOR_MODE_DRAW);
0000b0  9807              LDR      r0,[sp,#0x1c]
0000b2  2300              MOVS     r3,#0
0000b4  3065              ADDS     r0,r0,#0x65
0000b6  b282              UXTH     r2,r0
0000b8  2188              MOVS     r1,#0x88
0000ba  20a5              MOVS     r0,#0xa5
0000bc  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.192|
;;;1510   	}
;;;1511   
;;;1512   	if (0xFF != disbuff[7])
0000c0  9808              LDR      r0,[sp,#0x20]
0000c2  28ff              CMP      r0,#0xff
0000c4  d007              BEQ      |L198.214|
;;;1513   	{
;;;1514   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL8_X, (uint16)UI_ITEM_COODINATE_CALL8_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[7]), LCD_OPERATOR_MODE_DRAW);
0000c6  9808              LDR      r0,[sp,#0x20]
0000c8  2300              MOVS     r3,#0
0000ca  3065              ADDS     r0,r0,#0x65
0000cc  b282              UXTH     r2,r0
0000ce  2188              MOVS     r1,#0x88
0000d0  20b2              MOVS     r0,#0xb2
0000d2  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.214|
;;;1515   	}
;;;1516   
;;;1517   	if (0xFF != disbuff[8])
0000d6  9809              LDR      r0,[sp,#0x24]
0000d8  28ff              CMP      r0,#0xff
0000da  d007              BEQ      |L198.236|
;;;1518   	{
;;;1519   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL9_X, (uint16)UI_ITEM_COODINATE_CALL9_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[8]), LCD_OPERATOR_MODE_DRAW);
0000dc  9809              LDR      r0,[sp,#0x24]
0000de  2300              MOVS     r3,#0
0000e0  3065              ADDS     r0,r0,#0x65
0000e2  b282              UXTH     r2,r0
0000e4  2188              MOVS     r1,#0x88
0000e6  20bc              MOVS     r0,#0xbc
0000e8  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.236|
;;;1520   	}
;;;1521   
;;;1522   	if (0xFF != disbuff[9])
0000ec  980a              LDR      r0,[sp,#0x28]
0000ee  28ff              CMP      r0,#0xff
0000f0  d007              BEQ      |L198.258|
;;;1523   	{
;;;1524   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL10_X, (uint16)UI_ITEM_COODINATE_CALL10_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[9]), LCD_OPERATOR_MODE_DRAW);
0000f2  980a              LDR      r0,[sp,#0x28]
0000f4  2300              MOVS     r3,#0
0000f6  3065              ADDS     r0,r0,#0x65
0000f8  b282              UXTH     r2,r0
0000fa  2188              MOVS     r1,#0x88
0000fc  20c5              MOVS     r0,#0xc5
0000fe  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.258|
;;;1525   	}
;;;1526   
;;;1527   	if (0xFF != disbuff[10])
000102  980b              LDR      r0,[sp,#0x2c]
000104  28ff              CMP      r0,#0xff
000106  d007              BEQ      |L198.280|
;;;1528   	{
;;;1529   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_CALL11_X, (uint16)UI_ITEM_COODINATE_CALL11_Y, (PIC_ID_E)(PIC_ID_CALL_X_0 + disbuff[10]), LCD_OPERATOR_MODE_DRAW);
000108  980b              LDR      r0,[sp,#0x2c]
00010a  2300              MOVS     r3,#0
00010c  3065              ADDS     r0,r0,#0x65
00010e  b282              UXTH     r2,r0
000110  2188              MOVS     r1,#0x88
000112  20cf              MOVS     r0,#0xcf
000114  f7fffffe          BL       LCD_DrawBmpByID
                  |L198.280|
;;;1530   	}
;;;1531   }
000118  b00c              ADD      sp,sp,#0x30
00011a  bd10              POP      {r4,pc}
;;;1532   
                          ENDP

                  |L198.284|
                          DCD      callringBuff

                          AREA ||i.DISPLAY_DrawPowerOff||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawPowerOff PROC
;;;348    **********************************************************************/
;;;349    void DISPLAY_DrawPowerOff(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;350    {
;;;351    	LCD_DrawBmpByID(UI_ITEM_COODINATE_GLOBAL_STATUS_BAR_X, UI_ITEM_COODINATE_GLOBAL_STATUS_BAR_Y, PIC_ID_SPLASH, LCD_OPERATOR_MODE_DRAW);
000002  f24012cb          MOV      r2,#0x1cb
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
00000a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;352    
;;;353    }
;;;354    
                          ENDP


                          AREA ||i.DISPLAY_DrawPowerOn||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawPowerOn PROC
;;;317    **********************************************************************/
;;;318    void DISPLAY_DrawPowerOn(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;319    {
;;;320    	LCD_DrawBmpByID(UI_ITEM_COODINATE_GLOBAL_STATUS_BAR_X, UI_ITEM_COODINATE_GLOBAL_STATUS_BAR_Y, PIC_ID_SPLASH, LCD_OPERATOR_MODE_DRAW);
000002  f24012cb          MOV      r2,#0x1cb
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
00000a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;321    
;;;322    }
;;;323    
                          ENDP


                          AREA ||i.DISPLAY_DrawRidingAssist||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawRidingAssist PROC
;;;701    **********************************************************************/
;;;702    void DISPLAY_DrawRidingAssist(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;703    {
000002  4604              MOV      r4,r0
;;;704    	uint8 ucMaxAsis	= (uint8)(PIC_ID_ASSIST_9 - PIC_ID_ASSIST_0);
;;;705    	
;;;706    	if (ASSIST_P == ulBuff)
;;;707    	{
;;;708    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_UP_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_UP_Y, PIC_ID_ASSIST_W_UP, LCD_OPERATOR_MODE_DRAW);
;;;709    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_DOWN_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_DOWN_Y, PIC_ID_ASSIST_W_DOWN, LCD_OPERATOR_MODE_DRAW);
;;;710    		
;;;711    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_Y, PIC_ID_ASSIST_P, LCD_OPERATOR_MODE_DRAW);
000004  f240160f          MOV      r6,#0x10f
000008  f44f7591          MOV      r5,#0x122             ;708
00000c  2c0a              CMP      r4,#0xa               ;706
00000e  d015              BEQ      |L201.60|
;;;712    		
;;;713    		return;
;;;714    	}
;;;715    	
;;;716    	// 参数判断
;;;717    	CHECK_PARAM_OVER_RETURN(ulBuff, ucMaxAsis);
000010  2c09              CMP      r4,#9
000012  d83e              BHI      |L201.146|
;;;718    
;;;719    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_Y, (PIC_ID_E)(ulBuff+PIC_ID_ASSIST_0), LCD_OPERATOR_MODE_DRAW);
000014  f1040010          ADD      r0,r4,#0x10
000018  b282              UXTH     r2,r0
00001a  2300              MOVS     r3,#0
00001c  2153              MOVS     r1,#0x53
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       LCD_DrawBmpByID
;;;720    
;;;721    	if (PARAM_GetMaxAssist() == ulBuff)
000024  481b              LDR      r0,|L201.148|
000026  f890031a          LDRB     r0,[r0,#0x31a]  ; paramCB
00002a  42a0              CMP      r0,r4
00002c  d11a              BNE      |L201.100|
;;;722    	{
;;;723    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_UP_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_UP_Y, PIC_ID_ASSIST_G_UP, LCD_OPERATOR_MODE_DRAW);
00002e  2300              MOVS     r3,#0
000030  221b              MOVS     r2,#0x1b
000032  2147              MOVS     r1,#0x47
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       LCD_DrawBmpByID
00003a  e019              B        |L201.112|
                  |L201.60|
00003c  2300              MOVS     r3,#0                 ;708
00003e  221e              MOVS     r2,#0x1e              ;708
000040  2147              MOVS     r1,#0x47              ;708
000042  4628              MOV      r0,r5                 ;708
000044  f7fffffe          BL       LCD_DrawBmpByID
000048  2300              MOVS     r3,#0                 ;709
00004a  221d              MOVS     r2,#0x1d              ;709
00004c  2190              MOVS     r1,#0x90              ;709
00004e  4628              MOV      r0,r5                 ;709
000050  f7fffffe          BL       LCD_DrawBmpByID
000054  4630              MOV      r0,r6                 ;711
000056  e8bd4070          POP      {r4-r6,lr}            ;711
00005a  2300              MOVS     r3,#0                 ;711
00005c  221c              MOVS     r2,#0x1c              ;711
00005e  2153              MOVS     r1,#0x53              ;711
000060  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L201.100|
;;;724    	}
;;;725    	else
;;;726    	{
;;;727    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_UP_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_UP_Y, PIC_ID_ASSIST_W_UP, LCD_OPERATOR_MODE_DRAW);
000064  2300              MOVS     r3,#0
000066  221e              MOVS     r2,#0x1e
000068  2147              MOVS     r1,#0x47
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       LCD_DrawBmpByID
                  |L201.112|
;;;728    	}
;;;729    
;;;730    	if (0 == ulBuff)
000070  b13c              CBZ      r4,|L201.130|
;;;731    	{
;;;732    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_DOWN_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_DOWN_Y, PIC_ID_ASSIST_G_DOWN, LCD_OPERATOR_MODE_DRAW);
;;;733    	}
;;;734    	else
;;;735    	{
;;;736    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_DOWN_X, (uint16)UI_ITEM_COODINATE_GLOBAL_ASIS_LEVEL_DOWN_Y, PIC_ID_ASSIST_W_DOWN, LCD_OPERATOR_MODE_DRAW);
000072  4628              MOV      r0,r5
000074  e8bd4070          POP      {r4-r6,lr}
000078  2300              MOVS     r3,#0
00007a  221d              MOVS     r2,#0x1d
00007c  2190              MOVS     r1,#0x90
00007e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L201.130|
000082  4628              MOV      r0,r5                 ;732
000084  e8bd4070          POP      {r4-r6,lr}            ;732
000088  2300              MOVS     r3,#0                 ;732
00008a  221a              MOVS     r2,#0x1a              ;732
00008c  2190              MOVS     r1,#0x90              ;732
00008e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L201.146|
;;;737    	}
;;;738    
;;;739    }
000092  bd70              POP      {r4-r6,pc}
;;;740    
                          ENDP

                  |L201.148|
                          DCD      paramCB

                          AREA ||i.DISPLAY_DrawRidingBattery||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawRidingBattery PROC
;;;567    **********************************************************************/
;;;568    void DISPLAY_DrawRidingBattery(uint32 ulBuff)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;569    {
;;;570    	uint16 usWidthMax = 20;			// 电池图显最大宽度，根据UI文件修改
;;;571    	uint16 usWidth;
;;;572    	uint16 usLocalBuff = ulBuff%1000;
000004  f44f717a          MOV      r1,#0x3e8
000008  fbb0f2f1          UDIV     r2,r0,r1
00000c  fb010012          MLS      r0,r1,r2,r0
;;;573    	uint8 value1, value2, value3;
;;;574    	
;;;575    	/* 限制电量最大100% */
;;;576    	LIMIT_TO_MAX(usLocalBuff, 100);	
000010  2864              CMP      r0,#0x64
000012  d900              BLS      |L202.22|
000014  2064              MOVS     r0,#0x64
                  |L202.22|
;;;577    
;;;578    	// 显示图形
;;;579    	usWidth = usLocalBuff * usWidthMax / 100;
000016  eb000180          ADD      r1,r0,r0,LSL #2
00001a  008a              LSLS     r2,r1,#2
00001c  2164              MOVS     r1,#0x64
00001e  fb92f2f1          SDIV     r2,r2,r1
000022  b294              UXTH     r4,r2
;;;580    
;;;581    	value1 = usLocalBuff / 100;
000024  fbb0f2f1          UDIV     r2,r0,r1
000028  b2d7              UXTB     r7,r2
;;;582    	usLocalBuff = usLocalBuff % 100;
00002a  fbb0f2f1          UDIV     r2,r0,r1
00002e  fb010012          MLS      r0,r1,r2,r0
;;;583    	value2 = usLocalBuff / 10;
000032  210a              MOVS     r1,#0xa
000034  fbb0f2f1          UDIV     r2,r0,r1
000038  b2d5              UXTB     r5,r2
;;;584    	value3 = usLocalBuff % 10;
00003a  fbb0f2f1          UDIV     r2,r0,r1
00003e  fb010612          MLS      r6,r1,r2,r0
;;;585    
;;;586    	// 百分比背景
;;;587    	LCD_DrawAreaColor(UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X, UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, 203, 12, LCD_COLOR_BACKGROUND);
000042  f64100e4          MOV      r0,#0x18e4
000046  9000              STR      r0,[sp,#0]
000048  230c              MOVS     r3,#0xc
00004a  22cb              MOVS     r2,#0xcb
00004c  218b              MOVS     r1,#0x8b
00004e  2027              MOVS     r0,#0x27
000050  f7fffffe          BL       LCD_DrawAreaColor
;;;588    	
;;;589    	// 电池百分比
;;;590    	if (0 != value1)	// 三位数
;;;591    	{
;;;592    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X + usWidth * 8, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, (PIC_ID_E)(PIC_ID_BAT_P_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;593    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X + usWidth * 8 + 10, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, (PIC_ID_E)(PIC_ID_BAT_P_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;594    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X + usWidth * 8 + 20, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, (PIC_ID_E)(PIC_ID_BAT_P_0+value3), LCD_OPERATOR_MODE_DRAW);
000054  f04f093b          MOV      r9,#0x3b
000058  2027              MOVS     r0,#0x27              ;587
00005a  f04f0831          MOV      r8,#0x31              ;593
00005e  b327              CBZ      r7,|L202.170|
000060  eb0000c4          ADD      r0,r0,r4,LSL #3       ;592
000064  b280              UXTH     r0,r0                 ;592
000066  2300              MOVS     r3,#0                 ;592
000068  f1070245          ADD      r2,r7,#0x45           ;592
00006c  218b              MOVS     r1,#0x8b              ;592
00006e  f7fffffe          BL       LCD_DrawBmpByID
000072  eb0800c4          ADD      r0,r8,r4,LSL #3       ;593
000076  b280              UXTH     r0,r0                 ;593
000078  2300              MOVS     r3,#0                 ;593
00007a  f1050245          ADD      r2,r5,#0x45           ;593
00007e  218b              MOVS     r1,#0x8b              ;593
000080  f7fffffe          BL       LCD_DrawBmpByID
000084  eb0900c4          ADD      r0,r9,r4,LSL #3
000088  b280              UXTH     r0,r0
00008a  2300              MOVS     r3,#0
00008c  f1060245          ADD      r2,r6,#0x45
000090  218b              MOVS     r1,#0x8b
000092  f7fffffe          BL       LCD_DrawBmpByID
;;;595    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X + usWidth * 8 + 30, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, PIC_ID_BAT_PRECENT, LCD_OPERATOR_MODE_DRAW);
000096  2045              MOVS     r0,#0x45
000098  eb0000c4          ADD      r0,r0,r4,LSL #3
00009c  b280              UXTH     r0,r0
00009e  2300              MOVS     r3,#0
0000a0  224f              MOVS     r2,#0x4f
0000a2  218b              MOVS     r1,#0x8b
0000a4  f7fffffe          BL       LCD_DrawBmpByID
0000a8  e02c              B        |L202.260|
                  |L202.170|
;;;596    	}
;;;597    	else if (0 != value2)// 两位数
0000aa  b1d5              CBZ      r5,|L202.226|
;;;598    	{
;;;599    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X + usWidth * 8, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, (PIC_ID_E)(PIC_ID_BAT_P_0+value2), LCD_OPERATOR_MODE_DRAW);
0000ac  eb0000c4          ADD      r0,r0,r4,LSL #3
0000b0  b280              UXTH     r0,r0
0000b2  2300              MOVS     r3,#0
0000b4  f1050245          ADD      r2,r5,#0x45
0000b8  218b              MOVS     r1,#0x8b
0000ba  f7fffffe          BL       LCD_DrawBmpByID
;;;600    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X + usWidth * 8 + 10, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, (PIC_ID_E)(PIC_ID_BAT_P_0+value3), LCD_OPERATOR_MODE_DRAW);
0000be  eb0800c4          ADD      r0,r8,r4,LSL #3
0000c2  b280              UXTH     r0,r0
0000c4  2300              MOVS     r3,#0
0000c6  f1060245          ADD      r2,r6,#0x45
0000ca  218b              MOVS     r1,#0x8b
0000cc  f7fffffe          BL       LCD_DrawBmpByID
;;;601    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X + usWidth * 8 + 20, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, PIC_ID_BAT_PRECENT, LCD_OPERATOR_MODE_DRAW);
0000d0  eb0900c4          ADD      r0,r9,r4,LSL #3
0000d4  b280              UXTH     r0,r0
0000d6  2300              MOVS     r3,#0
0000d8  224f              MOVS     r2,#0x4f
0000da  218b              MOVS     r1,#0x8b
0000dc  f7fffffe          BL       LCD_DrawBmpByID
0000e0  e010              B        |L202.260|
                  |L202.226|
;;;602    	}
;;;603    	else// 一位数
;;;604    	{
;;;605    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X + usWidth * 8, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, (PIC_ID_E)(PIC_ID_BAT_P_0+value3), LCD_OPERATOR_MODE_DRAW);
0000e2  eb0000c4          ADD      r0,r0,r4,LSL #3
0000e6  b280              UXTH     r0,r0
0000e8  2300              MOVS     r3,#0
0000ea  f1060245          ADD      r2,r6,#0x45
0000ee  218b              MOVS     r1,#0x8b
0000f0  f7fffffe          BL       LCD_DrawBmpByID
;;;606    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_X + usWidth * 8 + 10, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_NUM_Y, PIC_ID_BAT_PRECENT, LCD_OPERATOR_MODE_DRAW);
0000f4  eb0800c4          ADD      r0,r8,r4,LSL #3
0000f8  b280              UXTH     r0,r0
0000fa  2300              MOVS     r3,#0
0000fc  224f              MOVS     r2,#0x4f
0000fe  218b              MOVS     r1,#0x8b
000100  f7fffffe          BL       LCD_DrawBmpByID
                  |L202.260|
;;;607    	}
;;;608    
;;;609    	// 显示电池格数
;;;610    	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_Y, (PIC_ID_E)(PIC_ID_BAT_0+usWidth), LCD_OPERATOR_MODE_DRAW);
000104  3430              ADDS     r4,r4,#0x30
000106  b001              ADD      sp,sp,#4
000108  b2a2              UXTH     r2,r4
00010a  e8bd43f0          POP      {r4-r9,lr}
00010e  2300              MOVS     r3,#0
000110  2199              MOVS     r1,#0x99
000112  201a              MOVS     r0,#0x1a
000114  f7ffbffe          B.W      LCD_DrawBmpByID
;;;611    }
;;;612    
                          ENDP


                          AREA ||i.DISPLAY_DrawRidingBg||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawRidingBg PROC
;;;1070   **********************************************************************/
;;;1071   void DISPLAY_DrawRidingBg(uint32 ulBuff)
000000  2800              CMP      r0,#0
;;;1072   {
000002  d007              BEQ      |L203.20|
;;;1073   	switch (ulBuff)
000004  2801              CMP      r0,#1
000006  d10b              BNE      |L203.32|
;;;1074   	{
;;;1075   		case 0:
;;;1076   			// 显示界面背景图
;;;1077   			LCD_DrawBmpByID(UI_ITEM_COODINATE_RIDING_BACKGROUND_X, UI_ITEM_COODINATE_RIDING_BACKGROUND_Y, PIC_ID_BG_RIDING, LCD_OPERATOR_MODE_BACKGROUND);
;;;1078   			break;
;;;1079   
;;;1080   		case 1:
;;;1081   
;;;1082   			// 显示界面背景图
;;;1083   			LCD_DrawBmpByID(UI_ITEM_COODINATE_RIDING_BACKGROUND_X, UI_ITEM_COODINATE_RIDING_BACKGROUND_Y, PIC_ID_BG_RIDING, LCD_OPERATOR_MODE_DRAW);
000008  2300              MOVS     r3,#0
00000a  2251              MOVS     r2,#0x51
00000c  4619              MOV      r1,r3
00000e  4618              MOV      r0,r3
000010  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L203.20|
000014  2301              MOVS     r3,#1                 ;1077
000016  2251              MOVS     r2,#0x51              ;1077
000018  2100              MOVS     r1,#0                 ;1077
00001a  4608              MOV      r0,r1                 ;1077
00001c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L203.32|
;;;1084   
;;;1085   			break;
;;;1086   
;;;1087   		default:
;;;1088   			break;
;;;1089   	}
;;;1090   
;;;1091   }
000020  4770              BX       lr
;;;1092   
                          ENDP


                          AREA ||i.DISPLAY_DrawRidingCallNum||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawRidingCallNum PROC
;;;1324   
;;;1325   void DISPLAY_DrawRidingCallNum(uint32 ulBuff)
000000  b530              PUSH     {r4,r5,lr}
;;;1326   {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
;;;1327   	uint32 i = 0;
000006  2400              MOVS     r4,#0
;;;1328   	uint32 disbuff[11] = {0};
000008  212c              MOVS     r1,#0x2c
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memclr4
;;;1329   
;;;1330   	for(i = 0; i < 11; i++)
;;;1331   	{
;;;1332   		disbuff[i] = callringBuff[i];
000010  4b4d              LDR      r3,|L204.328|
000012  466a              MOV      r2,sp                 ;1328
;;;1333   		
;;;1334   		if (disbuff[i] > 9)
;;;1335   		{
;;;1336   			disbuff[i] = 0xFF;
000014  20ff              MOVS     r0,#0xff
                  |L204.22|
000016  5d19              LDRB     r1,[r3,r4]            ;1332
000018  f8421024          STR      r1,[r2,r4,LSL #2]     ;1332
00001c  2909              CMP      r1,#9                 ;1334
00001e  d901              BLS      |L204.36|
000020  f8420024          STR      r0,[r2,r4,LSL #2]
                  |L204.36|
000024  1c64              ADDS     r4,r4,#1              ;1330
000026  2c0b              CMP      r4,#0xb               ;1330
000028  d3f5              BCC      |L204.22|
;;;1337   		}
;;;1338   	}
;;;1339   	
;;;1340   	switch (ulBuff)
00002a  2d00              CMP      r5,#0
00002c  d07e              BEQ      |L204.300|
00002e  2d01              CMP      r5,#1
000030  d17d              BNE      |L204.302|
;;;1341   	{
;;;1342   		case 0:
;;;1343   			
;;;1344   			// 显示界面背景图
;;;1345   			LCD_DrawBmpByID(UI_ITEM_COODINATE_RIDING_CALL_BG_X, UI_ITEM_COODINATE_RIDING_CALL_BG_Y, PIC_ID_CALL_BG, LCD_OPERATOR_MODE_BACKGROUND);
;;;1346   			break;
;;;1347   
;;;1348   		case 1:
;;;1349   
;;;1350   			// 显示界面背景图
;;;1351   			LCD_DrawBmpByID(UI_ITEM_COODINATE_RIDING_CALL_BG_X, UI_ITEM_COODINATE_RIDING_CALL_BG_Y, PIC_ID_CALL_BG, LCD_OPERATOR_MODE_DRAW);
000032  2300              MOVS     r3,#0
000034  2261              MOVS     r2,#0x61
000036  2130              MOVS     r1,#0x30
000038  2035              MOVS     r0,#0x35
00003a  f7fffffe          BL       LCD_DrawBmpByID
;;;1352   			
;;;1353   			// 显示来电数字
;;;1354   			if (0xFF != disbuff[0])
00003e  9800              LDR      r0,[sp,#0]
000040  28ff              CMP      r0,#0xff
000042  d006              BEQ      |L204.82|
;;;1355   			{
;;;1356   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL1_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL1_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[0]), LCD_OPERATOR_MODE_DRAW);
000044  3057              ADDS     r0,r0,#0x57
000046  b282              UXTH     r2,r0
000048  2300              MOVS     r3,#0
00004a  2134              MOVS     r1,#0x34
00004c  2046              MOVS     r0,#0x46
00004e  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.82|
;;;1357   			}
;;;1358   
;;;1359   			if (0xFF != disbuff[1])
000052  9801              LDR      r0,[sp,#4]
000054  28ff              CMP      r0,#0xff
000056  d007              BEQ      |L204.104|
;;;1360   			{
;;;1361   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL2_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL2_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[1]), LCD_OPERATOR_MODE_DRAW);
000058  9801              LDR      r0,[sp,#4]
00005a  2300              MOVS     r3,#0
00005c  3057              ADDS     r0,r0,#0x57
00005e  b282              UXTH     r2,r0
000060  2134              MOVS     r1,#0x34
000062  204f              MOVS     r0,#0x4f
000064  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.104|
;;;1362   			}
;;;1363   
;;;1364   			if (0xFF != disbuff[2])
000068  9802              LDR      r0,[sp,#8]
00006a  28ff              CMP      r0,#0xff
00006c  d007              BEQ      |L204.126|
;;;1365   			{
;;;1366   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL3_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL3_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[2]), LCD_OPERATOR_MODE_DRAW);
00006e  9802              LDR      r0,[sp,#8]
000070  2300              MOVS     r3,#0
000072  3057              ADDS     r0,r0,#0x57
000074  b282              UXTH     r2,r0
000076  2134              MOVS     r1,#0x34
000078  2057              MOVS     r0,#0x57
00007a  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.126|
;;;1367   			}
;;;1368   
;;;1369   			if (0xFF != disbuff[3])
00007e  9803              LDR      r0,[sp,#0xc]
000080  28ff              CMP      r0,#0xff
000082  d007              BEQ      |L204.148|
;;;1370   			{
;;;1371   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL4_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL4_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[3]), LCD_OPERATOR_MODE_DRAW);
000084  9803              LDR      r0,[sp,#0xc]
000086  2300              MOVS     r3,#0
000088  3057              ADDS     r0,r0,#0x57
00008a  b282              UXTH     r2,r0
00008c  2134              MOVS     r1,#0x34
00008e  205f              MOVS     r0,#0x5f
000090  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.148|
;;;1372   			}
;;;1373   
;;;1374   			if (0xFF != disbuff[4])
000094  9804              LDR      r0,[sp,#0x10]
000096  28ff              CMP      r0,#0xff
000098  d007              BEQ      |L204.170|
;;;1375   			{
;;;1376   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL5_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL5_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[4]), LCD_OPERATOR_MODE_DRAW);
00009a  9804              LDR      r0,[sp,#0x10]
00009c  2300              MOVS     r3,#0
00009e  3057              ADDS     r0,r0,#0x57
0000a0  b282              UXTH     r2,r0
0000a2  2134              MOVS     r1,#0x34
0000a4  2067              MOVS     r0,#0x67
0000a6  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.170|
;;;1377   			}
;;;1378   
;;;1379   			if (0xFF != disbuff[5])
0000aa  9805              LDR      r0,[sp,#0x14]
0000ac  28ff              CMP      r0,#0xff
0000ae  d007              BEQ      |L204.192|
;;;1380   			{
;;;1381   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL6_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL6_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[5]), LCD_OPERATOR_MODE_DRAW);
0000b0  9805              LDR      r0,[sp,#0x14]
0000b2  2300              MOVS     r3,#0
0000b4  3057              ADDS     r0,r0,#0x57
0000b6  b282              UXTH     r2,r0
0000b8  2134              MOVS     r1,#0x34
0000ba  206f              MOVS     r0,#0x6f
0000bc  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.192|
;;;1382   			}
;;;1383   
;;;1384   			if (0xFF != disbuff[6])
0000c0  9806              LDR      r0,[sp,#0x18]
0000c2  28ff              CMP      r0,#0xff
0000c4  d007              BEQ      |L204.214|
;;;1385   			{
;;;1386   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL7_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL7_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[6]), LCD_OPERATOR_MODE_DRAW);
0000c6  9806              LDR      r0,[sp,#0x18]
0000c8  2300              MOVS     r3,#0
0000ca  3057              ADDS     r0,r0,#0x57
0000cc  b282              UXTH     r2,r0
0000ce  2134              MOVS     r1,#0x34
0000d0  2077              MOVS     r0,#0x77
0000d2  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.214|
;;;1387   			}
;;;1388   
;;;1389   			if (0xFF != disbuff[7])
0000d6  9807              LDR      r0,[sp,#0x1c]
0000d8  28ff              CMP      r0,#0xff
0000da  d007              BEQ      |L204.236|
;;;1390   			{
;;;1391   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL8_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL8_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[7]), LCD_OPERATOR_MODE_DRAW);
0000dc  9807              LDR      r0,[sp,#0x1c]
0000de  2300              MOVS     r3,#0
0000e0  3057              ADDS     r0,r0,#0x57
0000e2  b282              UXTH     r2,r0
0000e4  2134              MOVS     r1,#0x34
0000e6  207f              MOVS     r0,#0x7f
0000e8  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.236|
;;;1392   			}
;;;1393   
;;;1394   			if (0xFF != disbuff[8])
0000ec  9808              LDR      r0,[sp,#0x20]
0000ee  28ff              CMP      r0,#0xff
0000f0  d007              BEQ      |L204.258|
;;;1395   			{
;;;1396   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL9_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL9_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[8]), LCD_OPERATOR_MODE_DRAW);
0000f2  9808              LDR      r0,[sp,#0x20]
0000f4  2300              MOVS     r3,#0
0000f6  3057              ADDS     r0,r0,#0x57
0000f8  b282              UXTH     r2,r0
0000fa  2134              MOVS     r1,#0x34
0000fc  2087              MOVS     r0,#0x87
0000fe  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.258|
;;;1397   			}
;;;1398   
;;;1399   			if (0xFF != disbuff[9])
000102  9809              LDR      r0,[sp,#0x24]
000104  28ff              CMP      r0,#0xff
000106  d007              BEQ      |L204.280|
;;;1400   			{
;;;1401   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL10_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL10_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[9]), LCD_OPERATOR_MODE_DRAW);
000108  9809              LDR      r0,[sp,#0x24]
00010a  2300              MOVS     r3,#0
00010c  3057              ADDS     r0,r0,#0x57
00010e  b282              UXTH     r2,r0
000110  2134              MOVS     r1,#0x34
000112  208f              MOVS     r0,#0x8f
000114  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.280|
;;;1402   			}
;;;1403   
;;;1404   			if (0xFF != disbuff[10])
000118  980a              LDR      r0,[sp,#0x28]
00011a  28ff              CMP      r0,#0xff
00011c  d00a              BEQ      |L204.308|
;;;1405   			{
;;;1406   				LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_CALL11_X, (uint16)UI_ITEM_COODINATE_RIDING_CALL11_Y, (PIC_ID_E)(PIC_ID_CALL_0 + disbuff[10]), LCD_OPERATOR_MODE_DRAW);
00011e  980a              LDR      r0,[sp,#0x28]
000120  2300              MOVS     r3,#0
000122  3057              ADDS     r0,r0,#0x57
000124  b282              UXTH     r2,r0
000126  2134              MOVS     r1,#0x34
000128  2097              MOVS     r0,#0x97
00012a  e001              B        |L204.304|
                  |L204.300|
00012c  e004              B        |L204.312|
                  |L204.302|
00012e  e001              B        |L204.308|
                  |L204.304|
000130  f7fffffe          BL       LCD_DrawBmpByID
                  |L204.308|
;;;1407   			}
;;;1408   			break;
;;;1409   
;;;1410   		default:
;;;1411   			break;
;;;1412   	}
;;;1413   	
;;;1414   }
000134  b00b              ADD      sp,sp,#0x2c
000136  bd30              POP      {r4,r5,pc}
                  |L204.312|
000138  2301              MOVS     r3,#1                 ;1345
00013a  2261              MOVS     r2,#0x61              ;1345
00013c  2130              MOVS     r1,#0x30              ;1345
00013e  2035              MOVS     r0,#0x35              ;1345
000140  f7fffffe          BL       LCD_DrawBmpByID
000144  e7f6              B        |L204.308|
;;;1415   
                          ENDP

000146  0000              DCW      0x0000
                  |L204.328|
                          DCD      callringBuff

                          AREA ||i.DISPLAY_DrawRidingCruise||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawRidingCruise PROC
;;;1310   
;;;1311   void DISPLAY_DrawRidingCruise(uint32 ulBuff)
000000  f0100fff          TST      r0,#0xff
;;;1312   {
000004  d005              BEQ      |L205.18|
;;;1313   	if ((BOOL)ulBuff)
;;;1314   
;;;1315   	{
;;;1316   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_CRUISE_X, (uint16)UI_ITEM_COODINATE_GLOBAL_CRUISE_Y, PIC_ID_ICON_CRUISE, LCD_OPERATOR_MODE_DRAW);
000006  2300              MOVS     r3,#0
000008  22ab              MOVS     r2,#0xab
00000a  2136              MOVS     r1,#0x36
00000c  209e              MOVS     r0,#0x9e
00000e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L205.18|
;;;1317   	}
;;;1318   	else
;;;1319   	{
;;;1320   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_CRUISE_X, (uint16)UI_ITEM_COODINATE_GLOBAL_CRUISE_Y, PIC_ID_ICON_CRUISE, LCD_OPERATOR_MODE_BACKGROUND);
000012  2301              MOVS     r3,#1
000014  22ab              MOVS     r2,#0xab
000016  2136              MOVS     r1,#0x36
000018  209e              MOVS     r0,#0x9e
00001a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1321   	}
;;;1322   	
;;;1323   }
;;;1324   
                          ENDP


                          AREA ||i.DISPLAY_DrawRidingMotorPower||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawRidingMotorPower PROC
;;;1277   **********************************************************************/
;;;1278   void DISPLAY_DrawRidingMotorPower(uint32 ulBuff)
000000  b570              PUSH     {r4-r6,lr}
;;;1279   {
;;;1280   	uint8 eId;
;;;1281   	uint32 ucMaxPower = PARAM_GetPowerMax();
000002  492c              LDR      r1,|L206.180|
000004  f8b112a6          LDRH     r1,[r1,#0x2a6]  ; paramCB
;;;1282   		
;;;1283   	// 限制最大功率
;;;1284   	LIMIT_TO_MAX(ulBuff, ucMaxPower);
000008  4288              CMP      r0,r1
00000a  d900              BLS      |L206.14|
00000c  4608              MOV      r0,r1
                  |L206.14|
;;;1285   
;;;1286   	eId = (ulBuff * 25 / ucMaxPower);
00000e  eb0002c0          ADD      r2,r0,r0,LSL #3
000012  eb021000          ADD      r0,r2,r0,LSL #4
000016  fbb0f0f1          UDIV     r0,r0,r1
00001a  b2c4              UXTB     r4,r0
;;;1287   
;;;1288   	// 限制最大功率显示
;;;1289   	LIMIT_TO_MAX(eId, 25);
00001c  2c19              CMP      r4,#0x19
00001e  d900              BLS      |L206.34|
000020  2419              MOVS     r4,#0x19
                  |L206.34|
;;;1290   
;;;1291   	if (eId < 5)
;;;1292   	{
;;;1293   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_POWER3_X, (uint16)UI_ITEM_COODINATE_RIDING_POWER3_Y, PIC_ID_POWER_3_0, LCD_OPERATOR_MODE_DRAW);
000022  f44f75ac          MOV      r5,#0x158
000026  2c05              CMP      r4,#5                 ;1291
000028  d215              BCS      |L206.86|
00002a  2121              MOVS     r1,#0x21
00002c  2300              MOVS     r3,#0
00002e  462a              MOV      r2,r5
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       LCD_DrawBmpByID
;;;1294   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_POWER2_X, (uint16)UI_ITEM_COODINATE_RIDING_POWER2_Y, PIC_ID_POWER_2_0, LCD_OPERATOR_MODE_DRAW);
000036  2300              MOVS     r3,#0
000038  f240124f          MOV      r2,#0x14f
00003c  2130              MOVS     r1,#0x30
00003e  2008              MOVS     r0,#8
000040  f7fffffe          BL       LCD_DrawBmpByID
;;;1295   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_POWER1_X, (uint16)UI_ITEM_COODINATE_RIDING_POWER1_Y, (PIC_ID_E)(PIC_ID_POWER_1_0 + eId), LCD_OPERATOR_MODE_DRAW);
000044  f50472a5          ADD      r2,r4,#0x14a
000048  e8bd4070          POP      {r4-r6,lr}
00004c  2300              MOVS     r3,#0
00004e  2188              MOVS     r1,#0x88
000050  4618              MOV      r0,r3
000052  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L206.86|
;;;1296   	}
;;;1297   	else if (eId < 13)
;;;1298   	{
;;;1299   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_POWER1_X, (uint16)UI_ITEM_COODINATE_RIDING_POWER1_Y, PIC_ID_POWER_1_4, LCD_OPERATOR_MODE_DRAW);
000056  f44f76a7          MOV      r6,#0x14e
00005a  2c0d              CMP      r4,#0xd               ;1297
00005c  d214              BCS      |L206.136|
00005e  2300              MOVS     r3,#0
000060  4632              MOV      r2,r6
000062  2188              MOVS     r1,#0x88
000064  4618              MOV      r0,r3
000066  f7fffffe          BL       LCD_DrawBmpByID
;;;1300   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_POWER2_X, (uint16)UI_ITEM_COODINATE_RIDING_POWER2_Y, (PIC_ID_E)(PIC_ID_POWER_1_0 + eId + 1), LCD_OPERATOR_MODE_DRAW);
00006a  2300              MOVS     r3,#0
00006c  f204124b          ADD      r2,r4,#0x14b
000070  2130              MOVS     r1,#0x30
000072  2008              MOVS     r0,#8
000074  f7fffffe          BL       LCD_DrawBmpByID
;;;1301   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_POWER3_X, (uint16)UI_ITEM_COODINATE_RIDING_POWER3_Y, PIC_ID_POWER_3_0, LCD_OPERATOR_MODE_DRAW);
000078  462a              MOV      r2,r5
00007a  e8bd4070          POP      {r4-r6,lr}
00007e  2300              MOVS     r3,#0
000080  2121              MOVS     r1,#0x21
000082  4608              MOV      r0,r1
000084  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L206.136|
;;;1302   	}
;;;1303   	else
;;;1304   	{
;;;1305   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_POWER3_X, (uint16)UI_ITEM_COODINATE_RIDING_POWER3_Y, (PIC_ID_E)(PIC_ID_POWER_1_0 + eId + 2), LCD_OPERATOR_MODE_DRAW);
000088  2121              MOVS     r1,#0x21
00008a  2300              MOVS     r3,#0
00008c  f50472a6          ADD      r2,r4,#0x14c
000090  4608              MOV      r0,r1
000092  f7fffffe          BL       LCD_DrawBmpByID
;;;1306   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_POWER2_X, (uint16)UI_ITEM_COODINATE_RIDING_POWER2_Y, PIC_ID_POWER_2_8, LCD_OPERATOR_MODE_DRAW);
000096  2300              MOVS     r3,#0
000098  f2401257          MOV      r2,#0x157
00009c  2130              MOVS     r1,#0x30
00009e  2008              MOVS     r0,#8
0000a0  f7fffffe          BL       LCD_DrawBmpByID
;;;1307   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_POWER1_X, (uint16)UI_ITEM_COODINATE_RIDING_POWER1_Y, PIC_ID_POWER_1_4, LCD_OPERATOR_MODE_DRAW);
0000a4  4632              MOV      r2,r6
0000a6  e8bd4070          POP      {r4-r6,lr}
0000aa  2300              MOVS     r3,#0
0000ac  2188              MOVS     r1,#0x88
0000ae  4618              MOV      r0,r3
0000b0  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1308   	}
;;;1309   }
;;;1310   
                          ENDP

                  |L206.180|
                          DCD      paramCB

                          AREA ||i.DISPLAY_DrawRidingSpeed||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawRidingSpeed PROC
;;;1104   **********************************************************************/
;;;1105   void DISPLAY_DrawRidingSpeed(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1106   {	
000004  4605              MOV      r5,r0
;;;1107   	uint8 value1=0, value2=0, value3=0;
;;;1108   	uint16 usLocalBuff = ulBuff%1000;
000006  f44f707a          MOV      r0,#0x3e8
00000a  fbb5f1f0          UDIV     r1,r5,r0
00000e  fb005111          MLS      r1,r0,r1,r5
;;;1109   	
;;;1110   	// 提取三个数字位上的数字
;;;1111   	value1 = usLocalBuff/100;
000012  2264              MOVS     r2,#0x64
000014  fbb1f0f2          UDIV     r0,r1,r2
000018  b2c4              UXTB     r4,r0
;;;1112   	usLocalBuff %= 100;
00001a  fbb1f0f2          UDIV     r0,r1,r2
00001e  fb021110          MLS      r1,r2,r0,r1
;;;1113   	value2 = usLocalBuff/10;
000022  220a              MOVS     r2,#0xa
000024  fbb1f0f2          UDIV     r0,r1,r2
000028  b2c6              UXTB     r6,r0
;;;1114   	value3 = usLocalBuff%10;	
00002a  fbb1f0f2          UDIV     r0,r1,r2
00002e  fb021710          MLS      r7,r2,r0,r1
;;;1115   
;;;1116   	// 显示小数点
;;;1117   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_SPEED_D_X, (uint16)UI_ITEM_COODINATE_RIDING_SPEED_D_Y, PIC_ID_SPEED_DOT, LCD_OPERATOR_MODE_DRAW);
000032  2300              MOVS     r3,#0
000034  f24012c7          MOV      r2,#0x1c7
000038  217e              MOVS     r1,#0x7e
00003a  2095              MOVS     r0,#0x95
00003c  f7fffffe          BL       LCD_DrawBmpByID
;;;1118   
;;;1119   	// 显示个位
;;;1120   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_SPEED_1_X, (uint16)UI_ITEM_COODINATE_RIDING_SPEED_1_Y, (PIC_ID_E)(PIC_ID_SPEED_DOR_0+value3), LCD_OPERATOR_MODE_DRAW);
000040  2300              MOVS     r3,#0
000042  f20712bd          ADD      r2,r7,#0x1bd
000046  2155              MOVS     r1,#0x55
000048  20a4              MOVS     r0,#0xa4
00004a  f7fffffe          BL       LCD_DrawBmpByID
;;;1121   
;;;1122   	// 显示十位
;;;1123   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_SPEED_10_X, (uint16)UI_ITEM_COODINATE_RIDING_SPEED_10_Y, (PIC_ID_E)(PIC_ID_SPEED_0+value2), LCD_OPERATOR_MODE_DRAW);
00004e  2300              MOVS     r3,#0
000050  f20612b3          ADD      r2,r6,#0x1b3
000054  2142              MOVS     r1,#0x42
000056  2063              MOVS     r0,#0x63
000058  f7fffffe          BL       LCD_DrawBmpByID
;;;1124   
;;;1125   	if (ulBuff < 100)
00005c  2d64              CMP      r5,#0x64
00005e  d208              BCS      |L207.114|
;;;1126   	{		
;;;1127   		// 清除百位
;;;1128   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_SPEED_100_X, (uint16)UI_ITEM_COODINATE_RIDING_SPEED_100_Y, (PIC_ID_E)(PIC_ID_SPEED_0+value1), LCD_OPERATOR_MODE_BACKGROUND);
000060  f20412b3          ADD      r2,r4,#0x1b3
000064  e8bd41f0          POP      {r4-r8,lr}
000068  2301              MOVS     r3,#1
00006a  2142              MOVS     r1,#0x42
00006c  2033              MOVS     r0,#0x33
00006e  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L207.114|
;;;1129   	}
;;;1130   	else
;;;1131   	{	
;;;1132   		// 显示百位
;;;1133   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_SPEED_100_X, (uint16)UI_ITEM_COODINATE_RIDING_SPEED_100_Y, (PIC_ID_E)(PIC_ID_SPEED_0+value1), LCD_OPERATOR_MODE_DRAW);
000072  f20412b3          ADD      r2,r4,#0x1b3
000076  e8bd41f0          POP      {r4-r8,lr}
00007a  2300              MOVS     r3,#0
00007c  2142              MOVS     r1,#0x42
00007e  2033              MOVS     r0,#0x33
000080  f7ffbffe          B.W      LCD_DrawBmpByID
;;;1134   	}
;;;1135   
;;;1136   	
;;;1137   }
;;;1138   
                          ENDP


                          AREA ||i.DISPLAY_DrawRidingSpeedUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawRidingSpeedUnit PROC
;;;1150   **********************************************************************/
;;;1151   void DISPLAY_DrawRidingSpeedUnit(uint32 ulBuff)
000000  f01000ff          ANDS     r0,r0,#0xff
;;;1152   {
000004  d008              BEQ      |L208.24|
;;;1153   	switch ((UNIT_E)ulBuff)
000006  2801              CMP      r0,#1
000008  d10d              BNE      |L208.38|
;;;1154   	{
;;;1155   		case UNIT_METRIC:
;;;1156   
;;;1157   			// 显示图片			
;;;1158   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_SPEED_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_RIDING_SPEED_UNIT_KMH_Y, PIC_ID_RIDING_KMH, LCD_OPERATOR_MODE_DRAW);
;;;1159   
;;;1160   			break;
;;;1161   
;;;1162   		case UNIT_INCH:
;;;1163   
;;;1164   			// 显示图片		
;;;1165   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_SPEED_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_RIDING_SPEED_UNIT_MPH_Y, PIC_ID_RIDING_MPH, LCD_OPERATOR_MODE_DRAW);
00000a  2300              MOVS     r3,#0
00000c  2177              MOVS     r1,#0x77
00000e  f2401289          MOV      r2,#0x189
000012  20cb              MOVS     r0,#0xcb
000014  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L208.24|
000018  2300              MOVS     r3,#0                 ;1158
00001a  2177              MOVS     r1,#0x77              ;1158
00001c  f44f72c4          MOV      r2,#0x188             ;1158
000020  20cb              MOVS     r0,#0xcb              ;1158
000022  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L208.38|
;;;1166   			
;;;1167   			break;
;;;1168   
;;;1169   		default:
;;;1170   			break;
;;;1171   	}
;;;1172   	
;;;1173   }
000026  4770              BX       lr
;;;1174   
                          ENDP


                          AREA ||i.DISPLAY_DrawRidingTrip||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawRidingTrip PROC
;;;1186   **********************************************************************/
;;;1187   void DISPLAY_DrawRidingTrip(uint32 ulBuff)
000000  4770              BX       lr
;;;1188   {	
;;;1189   //	uint8 value1=0, value2=0, value3=0, value4=0, value5=0;
;;;1190   //	uint32 usLocalBuff = ulBuff%100000;
;;;1191   //	
;;;1192   //	// 提取数字
;;;1193   //	value5 = usLocalBuff/10000;
;;;1194   //	usLocalBuff %= 10000;
;;;1195   //	value4 = usLocalBuff/1000;
;;;1196   //	usLocalBuff %= 1000;
;;;1197   //	value3 = usLocalBuff/100;
;;;1198   //	usLocalBuff %= 100;
;;;1199   //	value2 = usLocalBuff/10;
;;;1200   //	value1 = usLocalBuff%10;
;;;1201   //	
;;;1202   //	// 显示个位
;;;1203   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;1204   
;;;1205   //	// 显示十位
;;;1206   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;1207   
;;;1208   //	// 清除百位
;;;1209   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_100_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_100_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
;;;1210   //	// 清除千位
;;;1211   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1000_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1000_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value4), LCD_OPERATOR_MODE_BACKGROUND);
;;;1212   //	// 清除万位
;;;1213   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10000_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10000_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value5), LCD_OPERATOR_MODE_BACKGROUND);
;;;1214   
;;;1215   //	// 根据数值显示，显示百位
;;;1216   //	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
;;;1217   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_100_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_100_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;1218   
;;;1219   //	// 根据数值显示，显示千位
;;;1220   //	CHECK_PARAM_LESS_RETURN(ulBuff, 1000);
;;;1221   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1000_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_1000_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;1222   
;;;1223   //	// 根据数值显示，显示万位
;;;1224   //	CHECK_PARAM_LESS_RETURN(ulBuff, 10000);
;;;1225   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10000_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_10000_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value5), LCD_OPERATOR_MODE_DRAW);
;;;1226   
;;;1227   }
;;;1228   
                          ENDP


                          AREA ||i.DISPLAY_DrawRidingTripUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawRidingTripUnit PROC
;;;1240   **********************************************************************/
;;;1241   void DISPLAY_DrawRidingTripUnit(uint32 ulBuff)
000000  4770              BX       lr
;;;1242   {
;;;1243   //	switch ((UNIT_E)ulBuff)
;;;1244   //	{
;;;1245   //		case UNIT_METRIC:
;;;1246   
;;;1247   //			// 显示图片
;;;1248   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_MPH_Y, PIC_ID_MILES_MED, LCD_OPERATOR_MODE_BACKGROUND);
;;;1249   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_KMH_Y, PIC_ID_KM_MED, LCD_OPERATOR_MODE_DRAW);
;;;1250   
;;;1251   //			break;
;;;1252   
;;;1253   //		case UNIT_INCH:
;;;1254   
;;;1255   //			// 显示图片
;;;1256   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_RIDING_DISTANCE_UNIT_MPH_Y, PIC_ID_MILES_MED, LCD_OPERATOR_MODE_DRAW);
;;;1257   //			
;;;1258   //			break;
;;;1259   
;;;1260   //		default:
;;;1261   //			break;
;;;1262   //	}
;;;1263   	
;;;1264   }
;;;1265   
                          ENDP


                          AREA ||i.DISPLAY_DrawRidingTurnBlink||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawRidingTurnBlink PROC
;;;653    // 转向灯闪烁
;;;654    void DISPLAY_DrawRidingTurnBlink(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;655    {
;;;656    	BOOL bDirection = (BOOL)param;
000002  b2c0              UXTB     r0,r0
;;;657    
;;;658    	if (bDirection)
000004  2800              CMP      r0,#0
000006  d004              BEQ      |L211.18|
;;;659    	{
;;;660    		DISPLAY_ResumeValue(DISPLAY_COMMON_TURN);
000008  e8bd4010          POP      {r4,lr}
00000c  2019              MOVS     r0,#0x19
00000e  f7ffbffe          B.W      DISPLAY_ResumeValue
                  |L211.18|
;;;661    	}
;;;662    	else
;;;663    	{
;;;664    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_LEFT_TURN_X, (uint16)UI_ITEM_COODINATE_LEFT_TURN_Y, PIC_ID_M_SIGNALLEFT, LCD_OPERATOR_MODE_BACKGROUND);
000012  2301              MOVS     r3,#1
000014  22d6              MOVS     r2,#0xd6
000016  211b              MOVS     r1,#0x1b
000018  2005              MOVS     r0,#5
00001a  f7fffffe          BL       LCD_DrawBmpByID
;;;665    		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_RIGHT_TURN_X, (uint16)UI_ITEM_COODINATE_RIGHT_TURN_Y, PIC_ID_M_SIGNALRIGHT, LCD_OPERATOR_MODE_BACKGROUND);
00001e  2301              MOVS     r3,#1
000020  22d7              MOVS     r2,#0xd7
000022  e8bd4010          POP      {r4,lr}
000026  211b              MOVS     r1,#0x1b
000028  f2401029          MOV      r0,#0x129
00002c  f7ffbffe          B.W      LCD_DrawBmpByID
;;;666    	}
;;;667    }
;;;668    
                          ENDP


                          AREA ||i.DISPLAY_DrawShowBatteryFrameBlink||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawShowBatteryFrameBlink PROC
;;;624    **********************************************************************/
;;;625    void DISPLAY_DrawShowBatteryFrameBlink(uint32 param)
000000  4770              BX       lr
;;;626    {
;;;627    //	BOOL bDirection = (BOOL)param;
;;;628    
;;;629    //	uint16 uwBatteryPercert = PARAM_GetBatteryPercent();
;;;630    //	
;;;631    //	switch (bDirection)
;;;632    //	{
;;;633    //		case 0:
;;;634    
;;;635    //			// 黑色背景色
;;;636    //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_GLOBAL_BAT_FRAME_X, (uint16)UI_ITEM_COODINATE_GLOBAL_BAT_FRAME_Y, PIC_ID_BATTERY, LCD_OPERATOR_MODE_ALL_BLACK);
;;;637    
;;;638    //			break;
;;;639    
;;;640    //		case 1:
;;;641    
;;;642    //			// 电池框架 
;;;643    //			//LCD_DrawBmpByID((uint16)UI_COODINATE_GLOBAL_BATTERY_FRAME_X, (uint16)UI_COODINATE_GLOBAL_BATTERY_FRAME_Y, PIC_ID_BATTERY, LCD_OPERATOR_MODE_DRAW);
;;;644    //			
;;;645    //			break;
;;;646    
;;;647    //		default:
;;;648    //			break;
;;;649    //	}
;;;650    
;;;651    }
;;;652    
                          ENDP


                          AREA ||i.DISPLAY_DrawShowCallBlink||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawShowCallBlink PROC
;;;1034   **********************************************************************/
;;;1035   void DISPLAY_DrawShowCallBlink(uint32 param)
000000  4770              BX       lr
;;;1036   {
;;;1037   	
;;;1038   
;;;1039   }
;;;1040   
                          ENDP


                          AREA ||i.DISPLAY_DrawShowCommonCallBlink||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawShowCommonCallBlink PROC
;;;1052   **********************************************************************/
;;;1053   void DISPLAY_DrawShowCommonCallBlink(uint32 param)
000000  4770              BX       lr
;;;1054   {
;;;1055   	
;;;1056   
;;;1057   }
;;;1058   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourAvgSpeed||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourAvgSpeed PROC
;;;2093   **********************************************************************/
;;;2094   void DISPLAY_DrawTourAvgSpeed(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2095   {	
000004  4604              MOV      r4,r0
;;;2096   	uint8 value1=0, value2=0, value3=0;
;;;2097   	uint16 usLocalBuff = ulBuff%1000;
000006  f44f717a          MOV      r1,#0x3e8
00000a  fbb4f0f1          UDIV     r0,r4,r1
00000e  fb014110          MLS      r1,r1,r0,r4
;;;2098   
;;;2099   	// 提取数字
;;;2100   	value3 = usLocalBuff/100;
000012  2364              MOVS     r3,#0x64
000014  fbb1f0f3          UDIV     r0,r1,r3
000018  b2c5              UXTB     r5,r0
;;;2101   	usLocalBuff %= 100;
00001a  fbb1f0f3          UDIV     r0,r1,r3
00001e  fb031110          MLS      r1,r3,r0,r1
;;;2102   	value2 = usLocalBuff/10;
000022  230a              MOVS     r3,#0xa
000024  fbb1f0f3          UDIV     r0,r1,r3
000028  b2c6              UXTB     r6,r0
;;;2103   	value1 = usLocalBuff%10;
00002a  fbb1f0f3          UDIV     r0,r1,r3
00002e  fb031710          MLS      r7,r3,r0,r1
;;;2104   
;;;2105   	LCD_DrawBmpByID(UI_ITEM_COODINATE_TOUR_AVG_SPEED_DOR_X, UI_ITEM_COODINATE_TOUR_AVG_SPEED_DOR_Y, PIC_ID_RECORD_DOT, LCD_OPERATOR_MODE_DRAW);
000032  2300              MOVS     r3,#0
000034  f44f72bf          MOV      r2,#0x17e
000038  214d              MOVS     r1,#0x4d
00003a  205c              MOVS     r0,#0x5c
00003c  f7fffffe          BL       LCD_DrawBmpByID
;;;2106   			
;;;2107   	// 显示个位
;;;2108   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_1_X, (uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_1_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value1), LCD_OPERATOR_MODE_DRAW);
000040  2300              MOVS     r3,#0
000042  f2071267          ADD      r2,r7,#0x167
000046  213d              MOVS     r1,#0x3d
000048  2061              MOVS     r0,#0x61
00004a  f7fffffe          BL       LCD_DrawBmpByID
;;;2109   
;;;2110   	// 显示十位
;;;2111   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_10_X, (uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value2), LCD_OPERATOR_MODE_DRAW);
00004e  2300              MOVS     r3,#0
000050  f2061267          ADD      r2,r6,#0x167
000054  213d              MOVS     r1,#0x3d
000056  204c              MOVS     r0,#0x4c
000058  f7fffffe          BL       LCD_DrawBmpByID
;;;2112   
;;;2113   	// 清除百位
;;;2114   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_100_X, (uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
00005c  f2051267          ADD      r2,r5,#0x167
000060  213d              MOVS     r1,#0x3d
000062  2301              MOVS     r3,#1
000064  4615              MOV      r5,r2
000066  4608              MOV      r0,r1
000068  f7fffffe          BL       LCD_DrawBmpByID
;;;2115   
;;;2116   	// 根据数值显示
;;;2117   	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
00006c  2c64              CMP      r4,#0x64
00006e  d307              BCC      |L215.128|
;;;2118   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_100_X, (uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_DRAW);
000070  462a              MOV      r2,r5
000072  e8bd41f0          POP      {r4-r8,lr}
000076  2300              MOVS     r3,#0
000078  213d              MOVS     r1,#0x3d
00007a  4608              MOV      r0,r1
00007c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L215.128|
;;;2119   
;;;2120   }
000080  e8bd81f0          POP      {r4-r8,pc}
;;;2121   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourAvgSpeedTitile||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourAvgSpeedTitile PROC
;;;2075   
;;;2076   void DISPLAY_DrawTourAvgSpeedTitile(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;2077   {	
;;;2078   	LCD_DrawBmpByID(UI_ITEM_COODINATE_TOUR_AVG_SPEED_TITILE_X, UI_ITEM_COODINATE_TOUR_AVG_SPEED_TITILE_Y, PIC_ID_AVG_SPEED, LCD_OPERATOR_MODE_DRAW);
000002  2222              MOVS     r2,#0x22
000004  2125              MOVS     r1,#0x25
000006  201f              MOVS     r0,#0x1f
000008  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2079   			
;;;2080   }
;;;2081   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourAvgSpeedUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourAvgSpeedUnit PROC
;;;2133   **********************************************************************/
;;;2134   void DISPLAY_DrawTourAvgSpeedUnit(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;2135   {
;;;2136   	switch ((UNIT_E)ulBuff)
000002  f01000ff          ANDS     r0,r0,#0xff
;;;2137   	{
;;;2138   		case UNIT_METRIC:
;;;2139   
;;;2140   			// 显示图片			
;;;2141   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_UNIT_KMH_Y, PIC_ID_RECORD_KMH, LCD_OPERATOR_MODE_DRAW);
000006  f44f72c1          MOV      r2,#0x182
00000a  d00f              BEQ      |L217.44|
00000c  2801              CMP      r0,#1                 ;2136
00000e  d114              BNE      |L217.58|
;;;2142   
;;;2143   			break;
;;;2144   
;;;2145   		case UNIT_INCH:
;;;2146   
;;;2147   			// 显示图片		
;;;2148   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_UNIT_KMH_Y, PIC_ID_RECORD_KMH, LCD_OPERATOR_MODE_BACKGROUND);
000010  2301              MOVS     r3,#1
000012  2146              MOVS     r1,#0x46
000014  2078              MOVS     r0,#0x78
000016  f7fffffe          BL       LCD_DrawBmpByID
;;;2149   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_TOUR_AVG_SPEED_UNIT_MPH_Y, PIC_ID_RECORD_MPH, LCD_OPERATOR_MODE_DRAW);
00001a  2300              MOVS     r3,#0
00001c  2146              MOVS     r1,#0x46
00001e  e8bd4010          POP      {r4,lr}
000022  f2401285          MOV      r2,#0x185
000026  2078              MOVS     r0,#0x78
000028  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L217.44|
00002c  2300              MOVS     r3,#0                 ;2141
00002e  2146              MOVS     r1,#0x46              ;2141
000030  e8bd4010          POP      {r4,lr}               ;2141
000034  2078              MOVS     r0,#0x78              ;2141
000036  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L217.58|
;;;2150   			
;;;2151   			break;
;;;2152   
;;;2153   		default:
;;;2154   			break;
;;;2155   	}
;;;2156   	
;;;2157   }
00003a  bd10              POP      {r4,pc}
;;;2158   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourBg||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourBg PROC
;;;2054   **********************************************************************/
;;;2055   void DISPLAY_DrawTourBg(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;2056   {
;;;2057   	switch (ulBuff)
000002  2800              CMP      r0,#0
000004  d011              BEQ      |L218.42|
000006  2801              CMP      r0,#1
000008  d10f              BNE      |L218.42|
;;;2058   	{
;;;2059   		case 0:
;;;2060   			break;
;;;2061   
;;;2062   		case 1:
;;;2063   
;;;2064   			// 显示界面背景图
;;;2065   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MONITOR_BACKGROUND_X, UI_ITEM_COODINATE_MONITOR_BACKGROUND_Y, PIC_ID_RECORD_BG, LCD_OPERATOR_MODE_DRAW);
00000a  2300              MOVS     r3,#0
00000c  f240127d          MOV      r2,#0x17d
000010  4619              MOV      r1,r3
000012  4618              MOV      r0,r3
000014  f7fffffe          BL       LCD_DrawBmpByID
;;;2066   
;;;2067   			// 显示下方指示标
;;;2068   			LCD_DrawBmpByID(UI_ITEM_COODINATE_MONITOR_CURSIE_X, UI_ITEM_COODINATE_MONITOR_CURSIE_Y, PIC_ID_RECORD_X_2, LCD_OPERATOR_MODE_DRAW);
000018  2300              MOVS     r3,#0
00001a  21a0              MOVS     r1,#0xa0
00001c  e8bd4010          POP      {r4,lr}
000020  f2401287          MOV      r2,#0x187
000024  2097              MOVS     r0,#0x97
000026  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L218.42|
;;;2069   			break;
;;;2070   
;;;2071   		default:
;;;2072   			break;
;;;2073   	}
;;;2074   }
00002a  bd10              POP      {r4,pc}
;;;2075   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourCalories||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourCalories PROC
;;;3091   **********************************************************************/
;;;3092   void DISPLAY_DrawTourCalories(uint32 ulBuff)
000000  4770              BX       lr
;;;3093   {	
;;;3094   //	uint8 value1=0, value2=0, value3=0, value4=0, value5=0, value6=0;
;;;3095   //	uint32 usLocalBuff = ulBuff%1000000;
;;;3096   //	
;;;3097   //	// 提取数字
;;;3098   //	value6 = usLocalBuff/100000;
;;;3099   //	usLocalBuff %= 100000;
;;;3100   //	value5 = usLocalBuff/10000;
;;;3101   //	usLocalBuff %= 10000;
;;;3102   //	value4 = usLocalBuff/1000;
;;;3103   //	usLocalBuff %= 1000;
;;;3104   //	value3 = usLocalBuff/100;
;;;3105   //	usLocalBuff %= 100;
;;;3106   //	value2 = usLocalBuff/10;
;;;3107   //	value1 = usLocalBuff%10;	
;;;3108   
;;;3109   //	// 显示个位
;;;3110   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_1_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_1_Y, (PIC_ID_E)(PIC_ID_TINY_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;3111   
;;;3112   //	// 清除十位
;;;3113   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_10_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value2), LCD_OPERATOR_MODE_BACKGROUND);
;;;3114   
;;;3115   //	// 清除百位
;;;3116   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_100_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
;;;3117   
;;;3118   //	// 清除千位
;;;3119   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value4), LCD_OPERATOR_MODE_BACKGROUND);
;;;3120   
;;;3121   //	// 清除万位
;;;3122   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_10000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value5), LCD_OPERATOR_MODE_BACKGROUND);
;;;3123   
;;;3124   //	// 清除十万位
;;;3125   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_100000_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_100000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value6), LCD_OPERATOR_MODE_BACKGROUND);
;;;3126   
;;;3127   //	// ≥10，显示十位	
;;;3128   //	CHECK_PARAM_LESS_RETURN(ulBuff, 10);
;;;3129   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_10_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;3130   
;;;3131   //	// ≥100，显示百位
;;;3132   //	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
;;;3133   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_100_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;3134   
;;;3135   //	// ≥1000，显示千位
;;;3136   //	CHECK_PARAM_LESS_RETURN(ulBuff, 1000);
;;;3137   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;3138   
;;;3139   //	// ≥10000，显示万位
;;;3140   //	CHECK_PARAM_LESS_RETURN(ulBuff, 10000);
;;;3141   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_10000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value5), LCD_OPERATOR_MODE_DRAW);
;;;3142   
;;;3143   //	// ≥10000，显示十万位
;;;3144   //	CHECK_PARAM_LESS_RETURN(ulBuff, 100000);
;;;3145   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CALORIES_100000_X, (uint16)UI_ITEM_COODINATE_TOUR_CALORIES_100000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value6), LCD_OPERATOR_MODE_DRAW);
;;;3146   
;;;3147   }
;;;3148   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourDistance||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourDistance PROC
;;;2994   **********************************************************************/
;;;2995   void DISPLAY_DrawTourDistance(uint32 ulBuff)
000000  4770              BX       lr
;;;2996   {	
;;;2997   //	uint8 value1=0, value2=0, value3=0, value4=0, value5=0;
;;;2998   //	uint32 usLocalBuff = ulBuff%100000;
;;;2999   //	
;;;3000   //	// 提取数字
;;;3001   //	value5 = usLocalBuff/10000;
;;;3002   //	usLocalBuff %= 10000;
;;;3003   //	value4 = usLocalBuff/1000;
;;;3004   //	usLocalBuff %= 1000;
;;;3005   //	value3 = usLocalBuff/100;
;;;3006   //	usLocalBuff %= 100;
;;;3007   //	value2 = usLocalBuff/10;
;;;3008   //	value1 = usLocalBuff%10;	
;;;3009   
;;;3010   //	// 显示个位
;;;3011   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_1_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_1_Y, (PIC_ID_E)(PIC_ID_TINY_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;3012   
;;;3013   //	// 清除十位
;;;3014   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_10_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value2), LCD_OPERATOR_MODE_BACKGROUND);
;;;3015   
;;;3016   //	// 清除百位
;;;3017   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_100_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
;;;3018   
;;;3019   //	// 清除千位
;;;3020   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value4), LCD_OPERATOR_MODE_BACKGROUND);
;;;3021   
;;;3022   //	// 清除万位
;;;3023   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_10000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value5), LCD_OPERATOR_MODE_BACKGROUND);
;;;3024   
;;;3025   //	// ≥10，显示十位	
;;;3026   //	CHECK_PARAM_LESS_RETURN(ulBuff, 10);
;;;3027   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_10_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;3028   
;;;3029   //	// ≥100，显示百位
;;;3030   //	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
;;;3031   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_100_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;3032   
;;;3033   //	// ≥1000，显示千位
;;;3034   //	CHECK_PARAM_LESS_RETURN(ulBuff, 1000);
;;;3035   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;3036   
;;;3037   //	// ≥10000，显示万位
;;;3038   //	CHECK_PARAM_LESS_RETURN(ulBuff, 10000);
;;;3039   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_10000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value5), LCD_OPERATOR_MODE_DRAW);
;;;3040   
;;;3041   }
;;;3042   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourDistanceUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourDistanceUnit PROC
;;;3054   **********************************************************************/
;;;3055   void DISPLAY_DrawTourDistanceUnit(uint32 ulBuff)
000000  4770              BX       lr
;;;3056   {
;;;3057   //	switch ((UNIT_E)ulBuff)
;;;3058   //	{
;;;3059   //		case UNIT_METRIC:
;;;3060   
;;;3061   //			// 显示图片
;;;3062   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_UNIT_MILES_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_UNIT_MILES_Y, PIC_ID_MILES_SMALL, LCD_OPERATOR_MODE_BACKGROUND);
;;;3063   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_UNIT_KM_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_UNIT_KM_Y, PIC_ID_KM_SMALL, LCD_OPERATOR_MODE_DRAW);
;;;3064   
;;;3065   //			break;
;;;3066   
;;;3067   //		case UNIT_INCH:
;;;3068   
;;;3069   //			// 显示图片
;;;3070   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_UNIT_MILES_X, (uint16)UI_ITEM_COODINATE_TOUR_DISTANCE_UNIT_MILES_Y, PIC_ID_MILES_SMALL, LCD_OPERATOR_MODE_DRAW);
;;;3071   //			
;;;3072   //			break;
;;;3073   
;;;3074   //		default:
;;;3075   //			break;
;;;3076   //	}
;;;3077   	
;;;3078   }
;;;3079   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourMaxSpeed||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourMaxSpeed PROC
;;;2176   **********************************************************************/
;;;2177   void DISPLAY_DrawTourMaxSpeed(uint32 ulBuff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2178   {	
000004  4604              MOV      r4,r0
;;;2179   	uint8 value1=0, value2=0, value3=0;
;;;2180   	uint16 usLocalBuff = ulBuff%1000;
000006  f44f717a          MOV      r1,#0x3e8
00000a  fbb4f0f1          UDIV     r0,r4,r1
00000e  fb014110          MLS      r1,r1,r0,r4
;;;2181   
;;;2182   	// 提取三个数字位上的数字
;;;2183   	value3 = usLocalBuff/100;
000012  2364              MOVS     r3,#0x64
000014  fbb1f0f3          UDIV     r0,r1,r3
000018  b2c5              UXTB     r5,r0
;;;2184   	usLocalBuff %= 100;
00001a  fbb1f0f3          UDIV     r0,r1,r3
00001e  fb031110          MLS      r1,r3,r0,r1
;;;2185   	value2 = usLocalBuff/10;
000022  230a              MOVS     r3,#0xa
000024  fbb1f0f3          UDIV     r0,r1,r3
000028  b2c6              UXTB     r6,r0
;;;2186   	value1 = usLocalBuff%10;	
00002a  fbb1f0f3          UDIV     r0,r1,r3
00002e  fb031710          MLS      r7,r3,r0,r1
;;;2187   
;;;2188   	LCD_DrawBmpByID(UI_ITEM_COODINATE_TOUR_MAX_SPEED_DOR_X, UI_ITEM_COODINATE_TOUR_MAX_SPEED_DOR_Y, PIC_ID_RECORD_DOT, LCD_OPERATOR_MODE_DRAW);
000032  2300              MOVS     r3,#0
000034  f44f72bf          MOV      r2,#0x17e
000038  218f              MOVS     r1,#0x8f
00003a  205c              MOVS     r0,#0x5c
00003c  f7fffffe          BL       LCD_DrawBmpByID
;;;2189   	
;;;2190   	// 显示个位
;;;2191   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_1_X, (uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_1_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value1), LCD_OPERATOR_MODE_DRAW);
000040  2300              MOVS     r3,#0
000042  f2071267          ADD      r2,r7,#0x167
000046  217f              MOVS     r1,#0x7f
000048  2061              MOVS     r0,#0x61
00004a  f7fffffe          BL       LCD_DrawBmpByID
;;;2192   
;;;2193   	// 显示十位
;;;2194   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_10_X, (uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value2), LCD_OPERATOR_MODE_DRAW);
00004e  2300              MOVS     r3,#0
000050  f2061267          ADD      r2,r6,#0x167
000054  217f              MOVS     r1,#0x7f
000056  204c              MOVS     r0,#0x4c
000058  f7fffffe          BL       LCD_DrawBmpByID
;;;2195   
;;;2196   	// 清除百位
;;;2197   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_100_X, (uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
00005c  f2051267          ADD      r2,r5,#0x167
000060  2301              MOVS     r3,#1
000062  4615              MOV      r5,r2
000064  217f              MOVS     r1,#0x7f
000066  203d              MOVS     r0,#0x3d
000068  f7fffffe          BL       LCD_DrawBmpByID
;;;2198   
;;;2199   	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
00006c  2c64              CMP      r4,#0x64
00006e  d307              BCC      |L222.128|
;;;2200   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_100_X, (uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_DRAW);
000070  462a              MOV      r2,r5
000072  e8bd41f0          POP      {r4-r8,lr}
000076  2300              MOVS     r3,#0
000078  217f              MOVS     r1,#0x7f
00007a  203d              MOVS     r0,#0x3d
00007c  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L222.128|
;;;2201   
;;;2202   }
000080  e8bd81f0          POP      {r4-r8,pc}
;;;2203   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourMaxSpeedTitile||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourMaxSpeedTitile PROC
;;;2158   
;;;2159   void DISPLAY_DrawTourMaxSpeedTitile(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;2160   {	
;;;2161   	LCD_DrawBmpByID(UI_ITEM_COODINATE_TOUR_MAX_SPEED_TITILE_X, UI_ITEM_COODINATE_TOUR_MAX_SPEED_TITILE_Y, PIC_ID_MAX_SPEED, LCD_OPERATOR_MODE_DRAW);
000002  22d8              MOVS     r2,#0xd8
000004  2167              MOVS     r1,#0x67
000006  201f              MOVS     r0,#0x1f
000008  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2162   			
;;;2163   }
;;;2164   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourMaxSpeedUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourMaxSpeedUnit PROC
;;;2215   **********************************************************************/
;;;2216   void DISPLAY_DrawTourMaxSpeedUnit(uint32 ulBuff)
000000  b510              PUSH     {r4,lr}
;;;2217   {
;;;2218   	switch ((UNIT_E)ulBuff)
000002  f01000ff          ANDS     r0,r0,#0xff
;;;2219   	{
;;;2220   		case UNIT_METRIC:
;;;2221   
;;;2222   			// 显示图片			
;;;2223   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_UNIT_KMH_Y, PIC_ID_RECORD_KMH, LCD_OPERATOR_MODE_DRAW);
000006  f44f72c1          MOV      r2,#0x182
00000a  d00f              BEQ      |L224.44|
00000c  2801              CMP      r0,#1                 ;2218
00000e  d114              BNE      |L224.58|
;;;2224   
;;;2225   			break;
;;;2226   
;;;2227   		case UNIT_INCH:
;;;2228   
;;;2229   			// 显示图片		
;;;2230   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_UNIT_KMH_Y, PIC_ID_RECORD_KMH, LCD_OPERATOR_MODE_BACKGROUND);
000010  2301              MOVS     r3,#1
000012  2189              MOVS     r1,#0x89
000014  2078              MOVS     r0,#0x78
000016  f7fffffe          BL       LCD_DrawBmpByID
;;;2231   			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_TOUR_MAX_SPEED_UNIT_MPH_Y, PIC_ID_RECORD_MPH, LCD_OPERATOR_MODE_DRAW);
00001a  2300              MOVS     r3,#0
00001c  2189              MOVS     r1,#0x89
00001e  e8bd4010          POP      {r4,lr}
000022  f2401285          MOV      r2,#0x185
000026  2078              MOVS     r0,#0x78
000028  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L224.44|
00002c  2300              MOVS     r3,#0                 ;2223
00002e  2189              MOVS     r1,#0x89              ;2223
000030  e8bd4010          POP      {r4,lr}               ;2223
000034  2078              MOVS     r0,#0x78              ;2223
000036  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L224.58|
;;;2232   			
;;;2233   			break;
;;;2234   
;;;2235   		default:
;;;2236   			break;
;;;2237   	}
;;;2238   	
;;;2239   }
00003a  bd10              POP      {r4,pc}
;;;2240   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourSingleReduceCO2||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawTourSingleReduceCO2 PROC
;;;2253   
;;;2254   void DISPLAY_DrawTourSingleReduceCO2(uint32 ulBuff)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;2255   {
000004  4604              MOV      r4,r0
;;;2256   	uint8 value1=0, value2=0, value3=0, value4=0, value5=0, value6=0;
;;;2257   	uint32 usLocalBuff = ulBuff;
;;;2258   
;;;2259   	// 最大为6位数
;;;2260   	if (ulBuff > 999999)
000006  4849              LDR      r0,|L225.300|
000008  4284              CMP      r4,r0
00000a  d900              BLS      |L225.14|
;;;2261   	{
;;;2262   		ulBuff = 999999;
00000c  4604              MOV      r4,r0
                  |L225.14|
;;;2263   		usLocalBuff = 999999;
;;;2264   	}
;;;2265   	
;;;2266   	// 提取数字
;;;2267   	value6 = usLocalBuff/100000;
00000e  f8dfa120          LDR      r10,|L225.304|
000012  fbb4f0fa          UDIV     r0,r4,r10
000016  b2c5              UXTB     r5,r0
;;;2268   	usLocalBuff %= 100000;
000018  fbb4f1fa          UDIV     r1,r4,r10
00001c  fb0a4011          MLS      r0,r10,r1,r4
;;;2269   	value5 = usLocalBuff/10000;
000020  f2427b10          MOV      r11,#0x2710
000024  fbb0f1fb          UDIV     r1,r0,r11
000028  f00109ff          AND      r9,r1,#0xff
;;;2270   	usLocalBuff %= 10000;
00002c  fbb0f1fb          UDIV     r1,r0,r11
000030  fb0b0011          MLS      r0,r11,r1,r0
;;;2271   	value4 = usLocalBuff/1000;
000034  f44f717a          MOV      r1,#0x3e8
000038  fbb0f2f1          UDIV     r2,r0,r1
00003c  f00208ff          AND      r8,r2,#0xff
;;;2272   	usLocalBuff %= 1000;
000040  fbb0f2f1          UDIV     r2,r0,r1
000044  fb010012          MLS      r0,r1,r2,r0
;;;2273   	value3 = usLocalBuff/100;
000048  2164              MOVS     r1,#0x64
00004a  fbb0f2f1          UDIV     r2,r0,r1
00004e  b2d7              UXTB     r7,r2
;;;2274   	usLocalBuff %= 100;
000050  fbb0f2f1          UDIV     r2,r0,r1
000054  fb010012          MLS      r0,r1,r2,r0
;;;2275   	value2 = usLocalBuff/10;
000058  210a              MOVS     r1,#0xa
00005a  fbb0f2f1          UDIV     r2,r0,r1
00005e  b2d6              UXTB     r6,r2
;;;2276   	value1 = usLocalBuff%10;
000060  fbb0f2f1          UDIV     r2,r0,r1
000064  fb010212          MLS      r2,r1,r2,r0
;;;2277   
;;;2278   	
;;;2279   	// 显示个位
;;;2280   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_1_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_1_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value1), LCD_OPERATOR_MODE_DRAW);
000068  2300              MOVS     r3,#0
00006a  f2021267          ADD      r2,r2,#0x167
00006e  213d              MOVS     r1,#0x3d
000070  f44f7081          MOV      r0,#0x102
000074  f7fffffe          BL       LCD_DrawBmpByID
;;;2281   
;;;2282   	if (ulBuff < 10)
000078  2c0a              CMP      r4,#0xa
00007a  d207              BCS      |L225.140|
;;;2283   	{
;;;2284   		// 清除十位
;;;2285   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_10_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
00007c  2301              MOVS     r3,#1
00007e  f2401267          MOV      r2,#0x167
000082  213d              MOVS     r1,#0x3d
000084  20f3              MOVS     r0,#0xf3
000086  f7fffffe          BL       LCD_DrawBmpByID
00008a  e006              B        |L225.154|
                  |L225.140|
;;;2286   	}
;;;2287   	else
;;;2288   	{
;;;2289   		// 显示十位
;;;2290   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_10_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value2), LCD_OPERATOR_MODE_DRAW);
00008c  2300              MOVS     r3,#0
00008e  f2061267          ADD      r2,r6,#0x167
000092  213d              MOVS     r1,#0x3d
000094  20f3              MOVS     r0,#0xf3
000096  f7fffffe          BL       LCD_DrawBmpByID
                  |L225.154|
;;;2291   	}
;;;2292   	
;;;2293   	if (ulBuff < 100)
00009a  2c64              CMP      r4,#0x64
00009c  d207              BCS      |L225.174|
;;;2294   	{
;;;2295   		// 清除百位
;;;2296   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_100_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
00009e  2301              MOVS     r3,#1
0000a0  f2401267          MOV      r2,#0x167
0000a4  213d              MOVS     r1,#0x3d
0000a6  20e4              MOVS     r0,#0xe4
0000a8  f7fffffe          BL       LCD_DrawBmpByID
0000ac  e006              B        |L225.188|
                  |L225.174|
;;;2297   	}
;;;2298   	else
;;;2299   	{
;;;2300   		// 显示百位
;;;2301   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_100_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_DRAW);
0000ae  2300              MOVS     r3,#0
0000b0  f2071267          ADD      r2,r7,#0x167
0000b4  213d              MOVS     r1,#0x3d
0000b6  20e4              MOVS     r0,#0xe4
0000b8  f7fffffe          BL       LCD_DrawBmpByID
                  |L225.188|
;;;2302   	}
;;;2303   
;;;2304   	if (ulBuff < 1000)
0000bc  f5b47f7a          CMP      r4,#0x3e8
0000c0  d207              BCS      |L225.210|
;;;2305   	{
;;;2306   		// 清除千位
;;;2307   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
0000c2  2301              MOVS     r3,#1
0000c4  f2401267          MOV      r2,#0x167
0000c8  213d              MOVS     r1,#0x3d
0000ca  20d5              MOVS     r0,#0xd5
0000cc  f7fffffe          BL       LCD_DrawBmpByID
0000d0  e006              B        |L225.224|
                  |L225.210|
;;;2308   	}
;;;2309   	else
;;;2310   	{
;;;2311   		// 显示千位
;;;2312   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value4), LCD_OPERATOR_MODE_DRAW);
0000d2  2300              MOVS     r3,#0
0000d4  f2081267          ADD      r2,r8,#0x167
0000d8  213d              MOVS     r1,#0x3d
0000da  20d5              MOVS     r0,#0xd5
0000dc  f7fffffe          BL       LCD_DrawBmpByID
                  |L225.224|
;;;2313   
;;;2314   	}
;;;2315   
;;;2316   	if (ulBuff < 10000)
0000e0  455c              CMP      r4,r11
0000e2  d207              BCS      |L225.244|
;;;2317   	{
;;;2318   		// 清除万位
;;;2319   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_10000_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
0000e4  2301              MOVS     r3,#1
0000e6  f2401267          MOV      r2,#0x167
0000ea  213d              MOVS     r1,#0x3d
0000ec  20c6              MOVS     r0,#0xc6
0000ee  f7fffffe          BL       LCD_DrawBmpByID
0000f2  e006              B        |L225.258|
                  |L225.244|
;;;2320   
;;;2321   	}
;;;2322   	else
;;;2323   	{
;;;2324   		// 显示万位
;;;2325   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_10000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value5), LCD_OPERATOR_MODE_DRAW);
0000f4  2300              MOVS     r3,#0
0000f6  f2091267          ADD      r2,r9,#0x167
0000fa  213d              MOVS     r1,#0x3d
0000fc  20c6              MOVS     r0,#0xc6
0000fe  f7fffffe          BL       LCD_DrawBmpByID
                  |L225.258|
;;;2326   	}
;;;2327   
;;;2328   	if (ulBuff < 100000)
000102  4554              CMP      r4,r10
000104  d208              BCS      |L225.280|
;;;2329   	{
;;;2330   		// 清除十万位
;;;2331   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_100000_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_100000_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
000106  e8bd5ff0          POP      {r4-r12,lr}
00010a  2301              MOVS     r3,#1
00010c  213d              MOVS     r1,#0x3d
00010e  f2401267          MOV      r2,#0x167
000112  20b7              MOVS     r0,#0xb7
000114  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L225.280|
;;;2332   
;;;2333   	}
;;;2334   	else
;;;2335   	{
;;;2336   		// 显示十万位
;;;2337   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_CO2_100000_X, (uint16)UI_ITEM_COODINATE_TOUR_CO2_100000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value6), LCD_OPERATOR_MODE_DRAW);
000118  f2051267          ADD      r2,r5,#0x167
00011c  e8bd5ff0          POP      {r4-r12,lr}
000120  2300              MOVS     r3,#0
000122  213d              MOVS     r1,#0x3d
000124  20b7              MOVS     r0,#0xb7
000126  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2338   	}
;;;2339   }
;;;2340   
                          ENDP

00012a  0000              DCW      0x0000
                  |L225.300|
                          DCD      0x000f423f
                  |L225.304|
                          DCD      0x000186a0

                          AREA ||i.DISPLAY_DrawTourSingleReduceCO2Titile||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourSingleReduceCO2Titile PROC
;;;2240   
;;;2241   void DISPLAY_DrawTourSingleReduceCO2Titile(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;2242   {	
;;;2243   	LCD_DrawBmpByID(UI_ITEM_COODINATE_TOUR_CO2_TITILE_X, UI_ITEM_COODINATE_TOUR_CO2_TITILE_Y, PIC_ID_CO2_AVOIDED, LCD_OPERATOR_MODE_DRAW);
000002  2275              MOVS     r2,#0x75
000004  2125              MOVS     r1,#0x25
000006  20b7              MOVS     r0,#0xb7
000008  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2244   			
;;;2245   }
;;;2246   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourSingleReduceCO2Unit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourSingleReduceCO2Unit PROC
;;;2246   
;;;2247   void DISPLAY_DrawTourSingleReduceCO2Unit(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;2248   {	
;;;2249   	LCD_DrawBmpByID(UI_ITEM_COODINATE_TOUR_CO2_UNIT_X, UI_ITEM_COODINATE_TOUR_CO2_UNIT_Y, PIC_ID_RECORD_KG, LCD_OPERATOR_MODE_DRAW);
000002  f44f72c0          MOV      r2,#0x180
000006  2146              MOVS     r1,#0x46
000008  f2401013          MOV      r0,#0x113
00000c  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2250   			
;;;2251   }
;;;2252   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourSingleSaveTree||, CODE, READONLY, ALIGN=2

                  DISPLAY_DrawTourSingleSaveTree PROC
;;;2759   
;;;2760   void DISPLAY_DrawTourSingleSaveTree(uint32 ulBuff)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;2761   {
000004  4604              MOV      r4,r0
;;;2762   	uint8 value1=0, value2=0, value3=0, value4=0, value5=0, value6=0;
;;;2763   	uint32 usLocalBuff = ulBuff;
;;;2764   
;;;2765   	// 最大为6位数
;;;2766   	if (ulBuff > 999999)
000006  4849              LDR      r0,|L228.300|
000008  4284              CMP      r4,r0
00000a  d900              BLS      |L228.14|
;;;2767   	{
;;;2768   		ulBuff = 999999;
00000c  4604              MOV      r4,r0
                  |L228.14|
;;;2769   		usLocalBuff = 999999;
;;;2770   	}
;;;2771   	
;;;2772   	// 提取数字
;;;2773   	value6 = usLocalBuff/100000;
00000e  f8dfa120          LDR      r10,|L228.304|
000012  fbb4f0fa          UDIV     r0,r4,r10
000016  b2c5              UXTB     r5,r0
;;;2774   	usLocalBuff %= 100000;
000018  fbb4f1fa          UDIV     r1,r4,r10
00001c  fb0a4011          MLS      r0,r10,r1,r4
;;;2775   	value5 = usLocalBuff/10000;
000020  f2427b10          MOV      r11,#0x2710
000024  fbb0f1fb          UDIV     r1,r0,r11
000028  f00109ff          AND      r9,r1,#0xff
;;;2776   	usLocalBuff %= 10000;
00002c  fbb0f1fb          UDIV     r1,r0,r11
000030  fb0b0011          MLS      r0,r11,r1,r0
;;;2777   	value4 = usLocalBuff/1000;
000034  f44f717a          MOV      r1,#0x3e8
000038  fbb0f2f1          UDIV     r2,r0,r1
00003c  f00208ff          AND      r8,r2,#0xff
;;;2778   	usLocalBuff %= 1000;
000040  fbb0f2f1          UDIV     r2,r0,r1
000044  fb010012          MLS      r0,r1,r2,r0
;;;2779   	value3 = usLocalBuff/100;
000048  2164              MOVS     r1,#0x64
00004a  fbb0f2f1          UDIV     r2,r0,r1
00004e  b2d7              UXTB     r7,r2
;;;2780   	usLocalBuff %= 100;
000050  fbb0f2f1          UDIV     r2,r0,r1
000054  fb010012          MLS      r0,r1,r2,r0
;;;2781   	value2 = usLocalBuff/10;
000058  210a              MOVS     r1,#0xa
00005a  fbb0f2f1          UDIV     r2,r0,r1
00005e  b2d6              UXTB     r6,r2
;;;2782   	value1 = usLocalBuff%10;
000060  fbb0f2f1          UDIV     r2,r0,r1
000064  fb010212          MLS      r2,r1,r2,r0
;;;2783   	
;;;2784   	// 显示个位
;;;2785   	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_1_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_1_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value1), LCD_OPERATOR_MODE_DRAW);
000068  2300              MOVS     r3,#0
00006a  f2021267          ADD      r2,r2,#0x167
00006e  217f              MOVS     r1,#0x7f
000070  f44f7081          MOV      r0,#0x102
000074  f7fffffe          BL       LCD_DrawBmpByID
;;;2786   
;;;2787   	if (ulBuff < 10)
000078  2c0a              CMP      r4,#0xa
00007a  d207              BCS      |L228.140|
;;;2788   	{
;;;2789   		// 清除十位
;;;2790   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_10_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
00007c  2301              MOVS     r3,#1
00007e  f2401267          MOV      r2,#0x167
000082  217f              MOVS     r1,#0x7f
000084  20f3              MOVS     r0,#0xf3
000086  f7fffffe          BL       LCD_DrawBmpByID
00008a  e006              B        |L228.154|
                  |L228.140|
;;;2791   	}
;;;2792   	else
;;;2793   	{
;;;2794   		// 显示十位
;;;2795   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_10_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_10_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value2), LCD_OPERATOR_MODE_DRAW);
00008c  2300              MOVS     r3,#0
00008e  f2061267          ADD      r2,r6,#0x167
000092  217f              MOVS     r1,#0x7f
000094  20f3              MOVS     r0,#0xf3
000096  f7fffffe          BL       LCD_DrawBmpByID
                  |L228.154|
;;;2796   	}
;;;2797   
;;;2798   	if (ulBuff < 100)
00009a  2c64              CMP      r4,#0x64
00009c  d207              BCS      |L228.174|
;;;2799   	{
;;;2800   		// 清除百位
;;;2801   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_100_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
00009e  2301              MOVS     r3,#1
0000a0  f2401267          MOV      r2,#0x167
0000a4  217f              MOVS     r1,#0x7f
0000a6  20e4              MOVS     r0,#0xe4
0000a8  f7fffffe          BL       LCD_DrawBmpByID
0000ac  e006              B        |L228.188|
                  |L228.174|
;;;2802   	}
;;;2803   	else
;;;2804   	{
;;;2805   		// 显示百位
;;;2806   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_100_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_100_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value3), LCD_OPERATOR_MODE_DRAW);
0000ae  2300              MOVS     r3,#0
0000b0  f2071267          ADD      r2,r7,#0x167
0000b4  217f              MOVS     r1,#0x7f
0000b6  20e4              MOVS     r0,#0xe4
0000b8  f7fffffe          BL       LCD_DrawBmpByID
                  |L228.188|
;;;2807   	}
;;;2808   
;;;2809   	if (ulBuff < 1000)
0000bc  f5b47f7a          CMP      r4,#0x3e8
0000c0  d207              BCS      |L228.210|
;;;2810   	{
;;;2811   		// 清除千位
;;;2812   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
0000c2  2301              MOVS     r3,#1
0000c4  f2401267          MOV      r2,#0x167
0000c8  217f              MOVS     r1,#0x7f
0000ca  20d5              MOVS     r0,#0xd5
0000cc  f7fffffe          BL       LCD_DrawBmpByID
0000d0  e006              B        |L228.224|
                  |L228.210|
;;;2813   	}
;;;2814   	else
;;;2815   	{
;;;2816   		// 显示千位
;;;2817   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_1000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value4), LCD_OPERATOR_MODE_DRAW);
0000d2  2300              MOVS     r3,#0
0000d4  f2081267          ADD      r2,r8,#0x167
0000d8  217f              MOVS     r1,#0x7f
0000da  20d5              MOVS     r0,#0xd5
0000dc  f7fffffe          BL       LCD_DrawBmpByID
                  |L228.224|
;;;2818   
;;;2819   	}
;;;2820   
;;;2821   	if (ulBuff < 10000)
0000e0  455c              CMP      r4,r11
0000e2  d207              BCS      |L228.244|
;;;2822   	{
;;;2823   		// 清除万位
;;;2824   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_10000_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
0000e4  2301              MOVS     r3,#1
0000e6  f2401267          MOV      r2,#0x167
0000ea  217f              MOVS     r1,#0x7f
0000ec  20c6              MOVS     r0,#0xc6
0000ee  f7fffffe          BL       LCD_DrawBmpByID
0000f2  e006              B        |L228.258|
                  |L228.244|
;;;2825   
;;;2826   	}
;;;2827   	else
;;;2828   	{
;;;2829   		// 显示万位
;;;2830   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_10000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value5), LCD_OPERATOR_MODE_DRAW);
0000f4  2300              MOVS     r3,#0
0000f6  f2091267          ADD      r2,r9,#0x167
0000fa  217f              MOVS     r1,#0x7f
0000fc  20c6              MOVS     r0,#0xc6
0000fe  f7fffffe          BL       LCD_DrawBmpByID
                  |L228.258|
;;;2831   	}
;;;2832   
;;;2833   	if (ulBuff < 100000)
000102  4554              CMP      r4,r10
000104  d208              BCS      |L228.280|
;;;2834   	{
;;;2835   		// 清除十万位
;;;2836   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_100000_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_100000_Y, (PIC_ID_E)(PIC_ID_RECORD_0), LCD_OPERATOR_MODE_BACKGROUND);
000106  e8bd5ff0          POP      {r4-r12,lr}
00010a  2301              MOVS     r3,#1
00010c  217f              MOVS     r1,#0x7f
00010e  f2401267          MOV      r2,#0x167
000112  20b7              MOVS     r0,#0xb7
000114  f7ffbffe          B.W      LCD_DrawBmpByID
                  |L228.280|
;;;2837   
;;;2838   	}
;;;2839   	else
;;;2840   	{
;;;2841   		// 显示十万位
;;;2842   		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TREE_100000_X, (uint16)UI_ITEM_COODINATE_TOUR_TREE_100000_Y, (PIC_ID_E)(PIC_ID_RECORD_0+value6), LCD_OPERATOR_MODE_DRAW);
000118  f2051267          ADD      r2,r5,#0x167
00011c  e8bd5ff0          POP      {r4-r12,lr}
000120  2300              MOVS     r3,#0
000122  217f              MOVS     r1,#0x7f
000124  20b7              MOVS     r0,#0xb7
000126  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2843   	}
;;;2844   }
;;;2845   
                          ENDP

00012a  0000              DCW      0x0000
                  |L228.300|
                          DCD      0x000f423f
                  |L228.304|
                          DCD      0x000186a0

                          AREA ||i.DISPLAY_DrawTourSingleSaveTreeTitile||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourSingleSaveTreeTitile PROC
;;;2340   
;;;2341   void DISPLAY_DrawTourSingleSaveTreeTitile(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;2342   {	
;;;2343   	LCD_DrawBmpByID(UI_ITEM_COODINATE_TOUR_TREE_TITILE_X, UI_ITEM_COODINATE_TOUR_TREE_TITILE_Y, PIC_ID_TREES_SAVED, LCD_OPERATOR_MODE_DRAW);
000002  2165              MOVS     r1,#0x65
000004  f24012eb          MOV      r2,#0x1eb
000008  20b7              MOVS     r0,#0xb7
00000a  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2344   			
;;;2345   }
;;;2346   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourSingleSaveTreeUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourSingleSaveTreeUnit PROC
;;;2346   
;;;2347   void DISPLAY_DrawTourSingleSaveTreeUnit(uint32 ulBuff)
000000  2300              MOVS     r3,#0
;;;2348   {	
;;;2349   	LCD_DrawBmpByID(UI_ITEM_COODINATE_TOUR_TREE_UNIT_X, UI_ITEM_COODINATE_TOUR_TREE_UNIT_Y, PIC_ID_TREES_ICON, LCD_OPERATOR_MODE_DRAW);
000002  f44f72f5          MOV      r2,#0x1ea
000006  2186              MOVS     r1,#0x86
000008  f44f708a          MOV      r0,#0x114
00000c  f7ffbffe          B.W      LCD_DrawBmpByID
;;;2350   			
;;;2351   }
;;;2352   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourSpeed||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourSpeed PROC
;;;3281   **********************************************************************/
;;;3282   void DISPLAY_DrawTourSpeed(uint32 ulBuff)
000000  4770              BX       lr
;;;3283   {
;;;3284   //	uint8 value1=0, value2=0, value3=0;
;;;3285   //	uint32 usLocalBuff = ulBuff%1000;
;;;3286   
;;;3287   //	#warning "这里开放了有问题的代码后，会偶尔出现数字乱码的问题，具体原因待研究"
;;;3288   //#if 1	// OK的代码
;;;3289   //	value1 = usLocalBuff%10;
;;;3290   //	usLocalBuff /= 10;
;;;3291   //	value2 = usLocalBuff%10;
;;;3292   //	value3 = usLocalBuff/10;
;;;3293   //#else	// 有问题的代码
;;;3294   //	value3 = usLocalBuff/100;
;;;3295   //	usLocalBuff %= 100;
;;;3296   //	value2 = usLocalBuff/10;
;;;3297   //	value1 = usLocalBuff%10;
;;;3298   //#endif
;;;3299   //	
;;;3300   //	// 显示个位
;;;3301   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_SPEED_1_X, (uint16)UI_ITEM_COODINATE_TOUR_SPEED_1_Y, (PIC_ID_E)(PIC_ID_SMALL_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;3302   
;;;3303   //	// 显示十位
;;;3304   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_SPEED_10_X, (uint16)UI_ITEM_COODINATE_TOUR_SPEED_10_Y, (PIC_ID_E)(PIC_ID_MED_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;3305   
;;;3306   //	// 百位为0，不显示百位
;;;3307   //	if(ulBuff < 100)
;;;3308   //	{
;;;3309   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_SPEED_100_X, (uint16)UI_ITEM_COODINATE_TOUR_SPEED_100_Y, (PIC_ID_E)(PIC_ID_MED_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
;;;3310   //	}
;;;3311   //	else
;;;3312   //	{
;;;3313   //		LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_SPEED_100_X, (uint16)UI_ITEM_COODINATE_TOUR_SPEED_100_Y, (PIC_ID_E)(PIC_ID_MED_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;3314   //	}
;;;3315   }
;;;3316   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourSpeedUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourSpeedUnit PROC
;;;3328   **********************************************************************/
;;;3329   void DISPLAY_DrawTourSpeedUnit(uint32 ulBuff)
000000  4770              BX       lr
;;;3330   {
;;;3331   //	switch ((UNIT_E)ulBuff)
;;;3332   //	{
;;;3333   //		case UNIT_METRIC:
;;;3334   
;;;3335   //			// 显示图片
;;;3336   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_SPEED_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_TOUR_SPEED_UNIT_KMH_Y, PIC_ID_MPH_SMALL, LCD_OPERATOR_MODE_BACKGROUND);
;;;3337   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_SPEED_UNIT_KMH_X, (uint16)UI_ITEM_COODINATE_TOUR_SPEED_UNIT_KMH_Y, PIC_ID_KMH_SMALL, LCD_OPERATOR_MODE_DRAW);
;;;3338   
;;;3339   //			break;
;;;3340   
;;;3341   //		case UNIT_INCH:
;;;3342   
;;;3343   //			// 显示图片
;;;3344   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_SPEED_UNIT_MPH_X, (uint16)UI_ITEM_COODINATE_TOUR_SPEED_UNIT_MPH_Y, PIC_ID_MPH_SMALL, LCD_OPERATOR_MODE_DRAW);
;;;3345   //			
;;;3346   //			break;
;;;3347   
;;;3348   //		default:
;;;3349   //			break;
;;;3350   //	}
;;;3351   	
;;;3352   }
;;;3353   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourTrip||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourTrip PROC
;;;2857   **********************************************************************/
;;;2858   void DISPLAY_DrawTourTrip(uint32 ulBuff)
000000  4770              BX       lr
;;;2859   {	
;;;2860   //	uint8 value1=0, value2=0, value3=0, value4=0, value5=0;
;;;2861   //	uint32 usLocalBuff = ulBuff%100000;
;;;2862   //	
;;;2863   //	// 提取数字
;;;2864   //	value5 = usLocalBuff/10000;
;;;2865   //	usLocalBuff %= 10000;
;;;2866   //	value4 = usLocalBuff/1000;
;;;2867   //	usLocalBuff %= 1000;
;;;2868   //	value3 = usLocalBuff/100;
;;;2869   //	usLocalBuff %= 100;
;;;2870   //	value2 = usLocalBuff/10;
;;;2871   //	value1 = usLocalBuff%10;
;;;2872   //	
;;;2873   //	// 显示个位
;;;2874   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_1_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_1_Y, (PIC_ID_E)(PIC_ID_TINY_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;2875   
;;;2876   //	// 显示十位
;;;2877   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_10_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;2878   
;;;2879   //	// 清除百位
;;;2880   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_100_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_BACKGROUND);
;;;2881   
;;;2882   //	// 清除千位
;;;2883   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value4), LCD_OPERATOR_MODE_BACKGROUND);
;;;2884   
;;;2885   //	// 清除万位
;;;2886   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_10000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value5), LCD_OPERATOR_MODE_BACKGROUND);
;;;2887   
;;;2888   //	// 根据数值显示，显示百位
;;;2889   //	CHECK_PARAM_LESS_RETURN(ulBuff, 100);
;;;2890   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_100_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;2891   
;;;2892   //	// 根据数值显示，显示千位
;;;2893   //	CHECK_PARAM_LESS_RETURN(ulBuff, 1000);
;;;2894   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;2895   //	
;;;2896   //	// 根据数值显示，显示万位
;;;2897   //	CHECK_PARAM_LESS_RETURN(ulBuff, 10000);
;;;2898   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_10000_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_10000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value5), LCD_OPERATOR_MODE_DRAW);
;;;2899   
;;;2900   }
;;;2901   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourTripTime||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourTripTime PROC
;;;2950   **********************************************************************/
;;;2951   void DISPLAY_DrawTourTripTime(uint32 ulBuff)
000000  4770              BX       lr
;;;2952   {	
;;;2953   //	uint8 value1=0, value2=0, value3=0, value4=0, value5=0, value6=0;
;;;2954   //	uint32 usLocalBuff = ulBuff%1000000;
;;;2955   //	uint8 usMin = (usLocalBuff/60)%60;
;;;2956   //	uint16 usHour = (usLocalBuff/3600)%10000;
;;;2957   //	
;;;2958   //	usHour %= 100;
;;;2959   //	usMin %= 100;
;;;2960   //	
;;;2961   //	// 提取数字
;;;2962   //	value6 = usHour / 1000;
;;;2963   //	usHour %= 1000;
;;;2964   //	value5 = usHour / 100;
;;;2965   //	usHour %= 100;
;;;2966   //	value4 = usHour / 10;
;;;2967   //	value3 = usHour % 10;
;;;2968   //	value2 = usMin / 10;
;;;2969   //	value1 = usMin % 10;
;;;2970   
;;;2971   //	// 显示小时
;;;2972   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_H_1000_X, (uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_H_1000_Y, (PIC_ID_E)(PIC_ID_TINY_0+value6), LCD_OPERATOR_MODE_DRAW);
;;;2973   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_H_100_X, (uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_H_100_Y, (PIC_ID_E)(PIC_ID_TINY_0+value5), LCD_OPERATOR_MODE_DRAW);
;;;2974   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_H_10_X, (uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_H_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value4), LCD_OPERATOR_MODE_DRAW);
;;;2975   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_H_1_X, (uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_H_1_Y, (PIC_ID_E)(PIC_ID_TINY_0+value3), LCD_OPERATOR_MODE_DRAW);
;;;2976   
;;;2977   //	// 显示分钟
;;;2978   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_M_10_X, (uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_M_10_Y, (PIC_ID_E)(PIC_ID_TINY_0+value2), LCD_OPERATOR_MODE_DRAW);
;;;2979   //	LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_M_1_X, (uint16)UI_ITEM_COODINATE_TOUR_RIDING_TIME_M_1_Y, (PIC_ID_E)(PIC_ID_TINY_0+value1), LCD_OPERATOR_MODE_DRAW);
;;;2980   
;;;2981   }
;;;2982   
                          ENDP


                          AREA ||i.DISPLAY_DrawTourTripUnit||, CODE, READONLY, ALIGN=1

                  DISPLAY_DrawTourTripUnit PROC
;;;2913   **********************************************************************/
;;;2914   void DISPLAY_DrawTourTripUnit(uint32 ulBuff)
000000  4770              BX       lr
;;;2915   {
;;;2916   //	switch ((UNIT_E)ulBuff)
;;;2917   //	{
;;;2918   //		case UNIT_METRIC:
;;;2919   
;;;2920   //			// 显示图片
;;;2921   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_UNIT_MILES_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_UNIT_MILES_Y, PIC_ID_MILES_SMALL, LCD_OPERATOR_MODE_BACKGROUND);
;;;2922   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_UNIT_KM_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_UNIT_KM_Y, PIC_ID_KM_SMALL, LCD_OPERATOR_MODE_DRAW);
;;;2923   
;;;2924   //			break;
;;;2925   
;;;2926   //		case UNIT_INCH:
;;;2927   
;;;2928   //			// 显示图片
;;;2929   //			LCD_DrawBmpByID((uint16)UI_ITEM_COODINATE_TOUR_TRIP_UNIT_MILES_X, (uint16)UI_ITEM_COODINATE_TOUR_TRIP_UNIT_MILES_Y, PIC_ID_MILES_SMALL, LCD_OPERATOR_MODE_DRAW);
;;;2930   //			
;;;2931   //			break;
;;;2932   
;;;2933   //		default:
;;;2934   //			break;
;;;2935   //	}
;;;2936   	
;;;2937   }
;;;2938   
                          ENDP


                          AREA ||i.DISPLAY_EnableAdv_Menu1_SET||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableAdv_Menu1_SET PROC
;;;11051  // 使能高级菜单1设置界面
;;;11052  void DISPLAY_EnableAdv_Menu1_SET(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;11053  {
000002  4604              MOV      r4,r0
;;;11054  	// 禁能所有的显示单元
;;;11055  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11056  
;;;11057  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d059              BEQ      |L236.196|
;;;11058  	{
;;;11059  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11060  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );	// 蓝牙连接状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11061  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 	// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11062  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
000028  2101              MOVS     r1,#1
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11063  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000030  2101              MOVS     r1,#1
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11064  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000038  2101              MOVS     r1,#1
00003a  2012              MOVS     r0,#0x12
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11065  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000040  2101              MOVS     r1,#1
000042  2013              MOVS     r0,#0x13
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11066  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000048  2101              MOVS     r1,#1
00004a  2014              MOVS     r0,#0x14
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11067  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000050  2101              MOVS     r1,#1
000052  2015              MOVS     r0,#0x15
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11068  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000058  2101              MOVS     r1,#1
00005a  2016              MOVS     r0,#0x16
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11069  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000060  2101              MOVS     r1,#1
000062  2017              MOVS     r0,#0x17
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11070  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11071  		
;;;11072  		DISPLAY_DISABLE_ENABLE( DISPLAY_ADV_MENU_BG, TRUE );
000070  2101              MOVS     r1,#1
000072  2008              MOVS     r0,#8
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11073  
;;;11074  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_TITLE, TRUE);
000078  2101              MOVS     r1,#1
00007a  2063              MOVS     r0,#0x63
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11075  		
;;;11076  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WHEEL_SIZE, TRUE);
000080  2101              MOVS     r1,#1
000082  2064              MOVS     r0,#0x64
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11077  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WHEEL_METER, TRUE);
000088  2101              MOVS     r1,#1
00008a  2065              MOVS     r0,#0x65
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11078  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_SPEED_SENSOR, TRUE);
000090  2101              MOVS     r1,#1
000092  2066              MOVS     r0,#0x66
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11079  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_VOL, TRUE);
000098  2101              MOVS     r1,#1
00009a  2067              MOVS     r0,#0x67
00009c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11080  		
;;;11081  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WALK_MODE, TRUE);
0000a0  2101              MOVS     r1,#1
0000a2  2068              MOVS     r0,#0x68
0000a4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11082  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_TURN_HANDLE, TRUE);
0000a8  2101              MOVS     r1,#1
0000aa  2069              MOVS     r0,#0x69
0000ac  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11083  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_RESET, TRUE);
0000b0  2101              MOVS     r1,#1
0000b2  206a              MOVS     r0,#0x6a
0000b4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11084  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_CURSOR, TRUE);
0000b8  2101              MOVS     r1,#1
0000ba  e8bd4010          POP      {r4,lr}
0000be  206c              MOVS     r0,#0x6c
0000c0  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L236.196|
;;;11085  		
;;;11086  	}
;;;11087  }
0000c4  bd10              POP      {r4,pc}
;;;11088  
                          ENDP


                          AREA ||i.DISPLAY_EnableAdv_Menu2_Param||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableAdv_Menu2_Param PROC
;;;11147  // 使能设置控制参数界面
;;;11148  void DISPLAY_EnableAdv_Menu2_Param(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;11149  {
000002  4604              MOV      r4,r0
;;;11150  	// 禁能所有的显示单元
;;;11151  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11152  
;;;11153  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d03d              BEQ      |L237.140|
;;;11154  	{
;;;11155  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE);		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11156  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE);// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11157  		//DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE); 		// 灯光
;;;11158  
;;;11159  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE);
000020  2101              MOVS     r1,#1
000022  2007              MOVS     r0,#7
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11160  
;;;11161  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WHEEL_SIZE, TRUE);
000028  2101              MOVS     r1,#1
00002a  2064              MOVS     r0,#0x64
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11162  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WHEEL_METER, TRUE);
000030  2101              MOVS     r1,#1
000032  2065              MOVS     r0,#0x65
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11163  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_VOL, TRUE);
000038  2101              MOVS     r1,#1
00003a  2067              MOVS     r0,#0x67
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11164  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_MAGNETICS, TRUE);
000040  2101              MOVS     r1,#1
000042  2074              MOVS     r0,#0x74
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11165  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_PROTOCOL, TRUE);
000048  2101              MOVS     r1,#1
00004a  2075              MOVS     r0,#0x75
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11166  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_BATTERY_INFO, TRUE);
000050  2101              MOVS     r1,#1
000052  2076              MOVS     r0,#0x76
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11167  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WALK_ASSIST, TRUE);
000058  2101              MOVS     r1,#1
00005a  2077              MOVS     r0,#0x77
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11168  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_UART_VOL, TRUE);
000060  2101              MOVS     r1,#1
000062  2078              MOVS     r0,#0x78
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11169  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_AM_LIMIT, TRUE);
000068  2101              MOVS     r1,#1
00006a  2079              MOVS     r0,#0x79
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11170  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_SPEED_LIMIT, TRUE);
000070  2101              MOVS     r1,#1
000072  207a              MOVS     r0,#0x7a
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11171  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_BACK, TRUE);
000078  2101              MOVS     r1,#1
00007a  207b              MOVS     r0,#0x7b
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11172  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_CURSOR, TRUE);
000080  2101              MOVS     r1,#1
000082  e8bd4010          POP      {r4,lr}
000086  206c              MOVS     r0,#0x6c
000088  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L237.140|
;;;11173  		
;;;11174  	}
;;;11175  }
00008c  bd10              POP      {r4,pc}
;;;11176  
                          ENDP


                          AREA ||i.DISPLAY_EnableAdv_Menu_Choose_Password||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableAdv_Menu_Choose_Password PROC
;;;11107  // 使能选择设置密码界面
;;;11108  void DISPLAY_EnableAdv_Menu_Choose_Password(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;11109  {
000002  4604              MOV      r4,r0
;;;11110  	// 禁能所有的显示单元
;;;11111  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11112  
;;;11113  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d019              BEQ      |L238.68|
;;;11114  	{
;;;11115  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11116  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11117  		//DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
;;;11118  
;;;11119  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000020  2101              MOVS     r1,#1
000022  2007              MOVS     r0,#7
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11120  
;;;11121  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_CHOOSE_PASSWORD_TITLE, TRUE);
000028  2101              MOVS     r1,#1
00002a  206e              MOVS     r0,#0x6e
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11122  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_CHOOSE_PASSWORD_SET, TRUE);
000030  2101              MOVS     r1,#1
000032  206f              MOVS     r0,#0x6f
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11123  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_CHOOSE_PASSWORD_CURSOR, TRUE);
000038  2101              MOVS     r1,#1
00003a  e8bd4010          POP      {r4,lr}
00003e  2070              MOVS     r0,#0x70
000040  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L238.68|
;;;11124  	}
;;;11125  }
000044  bd10              POP      {r4,pc}
;;;11126  
                          ENDP


                          AREA ||i.DISPLAY_EnableAdv_Menu_PasswordGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableAdv_Menu_PasswordGUI PROC
;;;11007  // 使能高级菜单密码登录界面
;;;11008  void DISPLAY_EnableAdv_Menu_PasswordGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;11009  {
000002  4604              MOV      r4,r0
;;;11010  	// 禁能所有的显示单元
;;;11011  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11012  
;;;11013  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d011              BEQ      |L239.52|
;;;11014  	{
;;;11015  		//DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
;;;11016  		//DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
;;;11017  		//DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
;;;11018  
;;;11019  		DISPLAY_DISABLE_ENABLE( DISPLAY_INPUT_PASSWORD_BG, TRUE );
000010  2101              MOVS     r1,#1
000012  2009              MOVS     r0,#9
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11020  
;;;11021  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_PASSWORD_INPUT_TITLE, TRUE);
000018  2101              MOVS     r1,#1
00001a  205b              MOVS     r0,#0x5b
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11022  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_PASSWORD_INPUT_NUM, TRUE);
000020  2101              MOVS     r1,#1
000022  205c              MOVS     r0,#0x5c
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11023  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_PASSWORD_INPUT_CURSOR, TRUE);
000028  2101              MOVS     r1,#1
00002a  e8bd4010          POP      {r4,lr}
00002e  205d              MOVS     r0,#0x5d
000030  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L239.52|
;;;11024  		//DISPLAY_DISABLE_ENABLE(DISPLAY_STATUS_BAR, TRUE);
;;;11025  	}
;;;11026  }
000034  bd10              POP      {r4,pc}
;;;11027  
                          ENDP


                          AREA ||i.DISPLAY_EnableAdv_Menu_Reset||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableAdv_Menu_Reset PROC
;;;11089  // 使能高级菜单恢复出厂界面
;;;11090  void DISPLAY_EnableAdv_Menu_Reset(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;11091  {
000002  4604              MOV      r4,r0
;;;11092  	// 禁能所有的显示单元
;;;11093  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11094  
;;;11095  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d011              BEQ      |L240.52|
;;;11096  	{
;;;11097  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11098  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11099  		//DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
;;;11100  
;;;11101  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000020  2101              MOVS     r1,#1
000022  2007              MOVS     r0,#7
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11102  
;;;11103  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_SET_RESET, TRUE);
000028  2101              MOVS     r1,#1
00002a  e8bd4010          POP      {r4,lr}
00002e  206d              MOVS     r0,#0x6d
000030  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L240.52|
;;;11104  	}
;;;11105  }
000034  bd10              POP      {r4,pc}
;;;11106  
                          ENDP


                          AREA ||i.DISPLAY_EnableAdv_Menu_Set_Password||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableAdv_Menu_Set_Password PROC
;;;11127  // 使能设置密码界面
;;;11128  void DISPLAY_EnableAdv_Menu_Set_Password(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;11129  {
000002  4604              MOV      r4,r0
;;;11130  	// 禁能所有的显示单元
;;;11131  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11132  
;;;11133  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d019              BEQ      |L241.68|
;;;11134  	{
;;;11135  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11136  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11137  		//DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
;;;11138  
;;;11139  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000020  2101              MOVS     r1,#1
000022  2007              MOVS     r0,#7
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11140  
;;;11141  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PASSWORD_TITLE, TRUE);
000028  2101              MOVS     r1,#1
00002a  2071              MOVS     r0,#0x71
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11142  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PASSWORD_SET, TRUE);
000030  2101              MOVS     r1,#1
000032  2072              MOVS     r0,#0x72
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11143  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PASSWORD_CURSOR, TRUE);
000038  2101              MOVS     r1,#1
00003a  e8bd4010          POP      {r4,lr}
00003e  2073              MOVS     r0,#0x73
000040  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L241.68|
;;;11144  	}
;;;11145  }
000044  bd10              POP      {r4,pc}
;;;11146  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuAdvancedSettingsGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuAdvancedSettingsGUI PROC
;;;10252  // 高级设置菜单
;;;10253  void DISPLAY_EnableMenuAdvancedSettingsGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10254  {
000002  4604              MOV      r4,r0
;;;10255  	// 禁能所有的显示单元
;;;10256  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10257  
;;;10258  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d021              BEQ      |L242.84|
;;;10259  	{		
;;;10260  		// 使能控制
;;;10261  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10262  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10263  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10264  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10265  
;;;10266  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000028  2101              MOVS     r1,#1
00002a  2007              MOVS     r0,#7
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10267  
;;;10268  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_TITLE, TRUE );
000030  2101              MOVS     r1,#1
000032  2063              MOVS     r0,#0x63
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10269  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_WHEEL_SIZE, TRUE );
000038  2101              MOVS     r1,#1
00003a  207c              MOVS     r0,#0x7c
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10270  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_SPEED_LIMIT, TRUE );
000040  2101              MOVS     r1,#1
000042  207d              MOVS     r0,#0x7d
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10271  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_ESC, TRUE );
000048  2101              MOVS     r1,#1
00004a  e8bd4010          POP      {r4,lr}
00004e  207e              MOVS     r0,#0x7e
000050  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L242.84|
;;;10272  	}	
;;;10273  }
000054  bd10              POP      {r4,pc}
;;;10274  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuAdvancedSettingsSpeedLimitGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuAdvancedSettingsSpeedLimitGUI PROC
;;;10295  // 高级设置菜单之限速设置
;;;10296  void DISPLAY_EnableMenuAdvancedSettingsSpeedLimitGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10297  {
000002  4604              MOV      r4,r0
;;;10298  	// 禁能所有的显示单元
;;;10299  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10300  
;;;10301  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d015              BEQ      |L243.60|
;;;10302  	{		
;;;10303  		// 使能控制
;;;10304  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10305  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10306  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10307  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10308  
;;;10309  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000028  2101              MOVS     r1,#1
00002a  2007              MOVS     r0,#7
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10310  
;;;10311  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_SETTINGS_SPEED_LIMIT, TRUE );
000030  2101              MOVS     r1,#1
000032  e8bd4010          POP      {r4,lr}
000036  2080              MOVS     r0,#0x80
000038  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L243.60|
;;;10312  	}
;;;10313  }
00003c  bd10              POP      {r4,pc}
;;;10314  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuAdvancedSettingsWheelSizeGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuAdvancedSettingsWheelSizeGUI PROC
;;;10275  // 高级设置菜单之轮径设置
;;;10276  void DISPLAY_EnableMenuAdvancedSettingsWheelSizeGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10277  {
000002  4604              MOV      r4,r0
;;;10278  	// 禁能所有的显示单元
;;;10279  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10280  
;;;10281  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d015              BEQ      |L244.60|
;;;10282  	{		
;;;10283  		// 使能控制
;;;10284  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10285  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10286  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10287  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10288  
;;;10289  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000028  2101              MOVS     r1,#1
00002a  2007              MOVS     r0,#7
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10290  
;;;10291  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADVANCED_SETTINGS_WHEEL_SIZE, TRUE );
000030  2101              MOVS     r1,#1
000032  e8bd4010          POP      {r4,lr}
000036  207f              MOVS     r0,#0x7f
000038  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L244.60|
;;;10292  	}
;;;10293  }
00003c  bd10              POP      {r4,pc}
;;;10294  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuBeforeAdvancedSettingsGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuBeforeAdvancedSettingsGUI PROC
;;;10233  // 进入高级设置菜单前的确认状态
;;;10234  void DISPLAY_EnableMenuBeforeAdvancedSettingsGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10235  {
000002  4604              MOV      r4,r0
;;;10236  	// 禁能所有的显示单元
;;;10237  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10238  
;;;10239  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d011              BEQ      |L245.52|
;;;10240  	{		
;;;10241  		// 使能控制
;;;10242  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10243  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10244  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10245  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10246  
;;;10247  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000028  2101              MOVS     r1,#1
00002a  e8bd4010          POP      {r4,lr}
00002e  2007              MOVS     r0,#7
000030  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L245.52|
;;;10248  
;;;10249  	}	
;;;10250  }
000034  bd10              POP      {r4,pc}
;;;10251  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuErrorGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuErrorGUI PROC
;;;10196  **********************************************************************/
;;;10197  void DISPLAY_EnableMenuErrorGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10198  {
000002  4604              MOV      r4,r0
;;;10199  	// 禁能所有的显示单元
;;;10200  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10201  
;;;10202  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d055              BEQ      |L246.188|
;;;10203  	{		
;;;10204  		// 使能控制		
;;;10205  		DISPLAY_DISABLE_ENABLE( DISPLAY_STATUS_BAR, TRUE );			// 状态栏
000010  2101              MOVS     r1,#1
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10206  		
;;;10207  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
000018  2101              MOVS     r1,#1
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10208  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_BATTARY, TRUE );		// 电池
000020  2101              MOVS     r1,#1
000022  2022              MOVS     r0,#0x22
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10209  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );	// 数据记录状态
000028  2101              MOVS     r1,#1
00002a  200d              MOVS     r0,#0xd
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10210  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_ASSIST, TRUE );			// 助力
000030  2101              MOVS     r1,#1
000032  2021              MOVS     r0,#0x21
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10211  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE );		// 灯光
000038  2101              MOVS     r1,#1
00003a  200f              MOVS     r0,#0xf
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10212  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE );		// 错误标识
000040  2101              MOVS     r1,#1
000042  2010              MOVS     r0,#0x10
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10213  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000048  2101              MOVS     r1,#1
00004a  2012              MOVS     r0,#0x12
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10214  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000050  2101              MOVS     r1,#1
000052  2013              MOVS     r0,#0x13
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10215  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000058  2101              MOVS     r1,#1
00005a  2014              MOVS     r0,#0x14
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10216  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000060  2101              MOVS     r1,#1
000062  2015              MOVS     r0,#0x15
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10217  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000068  2101              MOVS     r1,#1
00006a  2016              MOVS     r0,#0x16
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10218  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000070  2101              MOVS     r1,#1
000072  2017              MOVS     r0,#0x17
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10219  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TURN, TRUE );			// 转向图标
000078  2101              MOVS     r1,#1
00007a  2019              MOVS     r0,#0x19
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10220  		
;;;10221  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_BG, TRUE );				// 静态图片
000080  2101              MOVS     r1,#1
000082  2004              MOVS     r0,#4
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10222  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_SPEED, TRUE );			// 速度
000088  2101              MOVS     r1,#1
00008a  201f              MOVS     r0,#0x1f
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10223  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_SPEED_UNIT, TRUE );		// 速度单位
000090  2101              MOVS     r1,#1
000092  2020              MOVS     r0,#0x20
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10224  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_MOTOR_POWER, TRUE );	// 电机功率
000098  2101              MOVS     r1,#1
00009a  201e              MOVS     r0,#0x1e
00009c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10225  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_CRUISE, TRUE );			// 巡航
0000a0  2101              MOVS     r1,#1
0000a2  2023              MOVS     r0,#0x23
0000a4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10226  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_CALL_NUMBER, TRUE );	// 来电提示
0000a8  2101              MOVS     r1,#1
0000aa  2024              MOVS     r0,#0x24
0000ac  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10227  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ERROR, TRUE );			
0000b0  2101              MOVS     r1,#1
0000b2  e8bd4010          POP      {r4,lr}
0000b6  2043              MOVS     r0,#0x43
0000b8  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L246.188|
;;;10228  
;;;10229  	}
;;;10230  
;;;10231  }
0000bc  bd10              POP      {r4,pc}
;;;10232  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL1GUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL1GUI PROC
;;;10366  **********************************************************************/
;;;10367  void DISPLAY_EnableMenuL1GUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10368  {
000002  4604              MOV      r4,r0
;;;10369  	// 禁能所有的显示单元
;;;10370  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10371  
;;;10372  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d075              BEQ      |L247.252|
;;;10373  	{		
;;;10374  		// 使能控制
;;;10375  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
000010  2101              MOVS     r1,#1
000012  200a              MOVS     r0,#0xa
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10376  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME1, TRUE );		// 时间
000018  2101              MOVS     r1,#1
00001a  200b              MOVS     r0,#0xb
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10377  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000020  2101              MOVS     r1,#1
000022  200c              MOVS     r0,#0xc
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10378  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );	// 数据记录状态
000028  2101              MOVS     r1,#1
00002a  200d              MOVS     r0,#0xd
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10379  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000030  2101              MOVS     r1,#1
000032  200f              MOVS     r0,#0xf
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10380  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000038  2101              MOVS     r1,#1
00003a  2010              MOVS     r0,#0x10
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10381  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_CRUISE, TRUE ); 		// 巡航
000040  2101              MOVS     r1,#1
000042  2011              MOVS     r0,#0x11
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10382  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000048  2101              MOVS     r1,#1
00004a  2012              MOVS     r0,#0x12
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10383  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000050  2101              MOVS     r1,#1
000052  2013              MOVS     r0,#0x13
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10384  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000058  2101              MOVS     r1,#1
00005a  2014              MOVS     r0,#0x14
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10385  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000060  2101              MOVS     r1,#1
000062  2015              MOVS     r0,#0x15
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10386  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000068  2101              MOVS     r1,#1
00006a  2016              MOVS     r0,#0x16
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10387  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000070  2101              MOVS     r1,#1
000072  2017              MOVS     r0,#0x17
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10388  		
;;;10389  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000078  2101              MOVS     r1,#1
00007a  2007              MOVS     r0,#7
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10390  			
;;;10391  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE1, TRUE );
000080  2101              MOVS     r1,#1
000082  2046              MOVS     r0,#0x46
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10392  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE2, TRUE );
000088  2101              MOVS     r1,#1
00008a  2047              MOVS     r0,#0x47
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10393  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE3, TRUE );
000090  2101              MOVS     r1,#1
000092  2048              MOVS     r0,#0x48
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10394  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE4, TRUE );
000098  2101              MOVS     r1,#1
00009a  2049              MOVS     r0,#0x49
00009c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10395  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, TRUE );		
0000a0  2101              MOVS     r1,#1
0000a2  204a              MOVS     r0,#0x4a
0000a4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10396  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, TRUE );	
0000a8  2101              MOVS     r1,#1
0000aa  204b              MOVS     r0,#0x4b
0000ac  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10397  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, TRUE );	
0000b0  2101              MOVS     r1,#1
0000b2  204c              MOVS     r0,#0x4c
0000b4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10398  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, TRUE );
0000b8  2101              MOVS     r1,#1
0000ba  204d              MOVS     r0,#0x4d
0000bc  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10399  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, TRUE );	
0000c0  2101              MOVS     r1,#1
0000c2  204e              MOVS     r0,#0x4e
0000c4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10400  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, TRUE );		
0000c8  2101              MOVS     r1,#1
0000ca  204f              MOVS     r0,#0x4f
0000cc  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10401  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, TRUE );	
0000d0  2101              MOVS     r1,#1
0000d2  2050              MOVS     r0,#0x50
0000d4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10402  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, TRUE );	
0000d8  2101              MOVS     r1,#1
0000da  2051              MOVS     r0,#0x51
0000dc  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10403  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, TRUE ); 
0000e0  2101              MOVS     r1,#1
0000e2  2052              MOVS     r0,#0x52
0000e4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10404  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, TRUE );	
0000e8  2101              MOVS     r1,#1
0000ea  2053              MOVS     r0,#0x53
0000ec  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10405  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACK, TRUE ); 
0000f0  2101              MOVS     r1,#1
0000f2  e8bd4010          POP      {r4,lr}
0000f6  2054              MOVS     r0,#0x54
0000f8  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L247.252|
;;;10406  
;;;10407  	}	
;;;10408  }
0000fc  bd10              POP      {r4,pc}
;;;10409  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL2ClearDataGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL2ClearDataGUI PROC
;;;10459  **********************************************************************/
;;;10460  void DISPLAY_EnableMenuL2ClearDataGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10461  {
000002  4604              MOV      r4,r0
;;;10462  	// 禁能所有的显示单元
;;;10463  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10464  
;;;10465  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d041              BEQ      |L248.148|
;;;10466  	{		
;;;10467  		// 使能控制
;;;10468  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10469  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10470  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10471  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10472  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10473  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10474  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10475  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10476  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10477  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10478  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10479  		
;;;10480  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10481  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10482  
;;;10483  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_TITILE_CLEAR_DATA, TRUE );
000070  2101              MOVS     r1,#1
000072  2083              MOVS     r0,#0x83
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10484  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_CLEAR_DISTANCE, TRUE );	
000078  2101              MOVS     r1,#1
00007a  2084              MOVS     r0,#0x84
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10485  //		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_CLEAR_PERS_BEST, TRUE );	
;;;10486  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_FACTORY_RESET, TRUE );	
000080  2101              MOVS     r1,#1
000082  2085              MOVS     r0,#0x85
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10487  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_CLEAR_BACK, TRUE );
000088  2101              MOVS     r1,#1
00008a  e8bd4010          POP      {r4,lr}
00008e  2086              MOVS     r0,#0x86
000090  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L248.148|
;;;10488  	}	
;;;10489  }
000094  bd10              POP      {r4,pc}
;;;10490  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL2ConnectGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL2ConnectGUI PROC
;;;10421  **********************************************************************/
;;;10422  void DISPLAY_EnableMenuL2ConnectGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10423  {
000002  4604              MOV      r4,r0
;;;10424  	// 禁能所有的显示单元
;;;10425  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10426  
;;;10427  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d035              BEQ      |L249.124|
;;;10428  	{		
;;;10429  		// 使能控制
;;;10430  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10431  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10432  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10433  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10434  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10435  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10436  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10437  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10438  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10439  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10440  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10441  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10442  		
;;;10443  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_QRCODE, TRUE );	
000068  2101              MOVS     r1,#1
00006a  2081              MOVS     r0,#0x81
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10444  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_BACK, TRUE );	
000070  2101              MOVS     r1,#1
000072  e8bd4010          POP      {r4,lr}
000076  2082              MOVS     r0,#0x82
000078  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L249.124|
;;;10445  	}	
;;;10446  }
00007c  bd10              POP      {r4,pc}
;;;10447  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL2SetGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL2SetGUI PROC
;;;10502  **********************************************************************/
;;;10503  void DISPLAY_EnableMenuL2SetGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10504  {
000002  4604              MOV      r4,r0
;;;10505  	// 禁能所有的显示单元
;;;10506  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10507  
;;;10508  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d049              BEQ      |L250.164|
;;;10509  	{		
;;;10510  		// 使能控制
;;;10511  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10512  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10513  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10514  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10515  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10516  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10517  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10518  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10519  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10520  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10521  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10522  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10523  		
;;;10524  		
;;;10525  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10526  	
;;;10527  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_TITILE_SETUP, TRUE );
000070  2101              MOVS     r1,#1
000072  2087              MOVS     r0,#0x87
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10528  //		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_SET_DATE_TIME, TRUE );	
;;;10529  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_SET_AUTOLIGHT, TRUE );	
000078  2101              MOVS     r1,#1
00007a  2088              MOVS     r0,#0x88
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10530  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_SET_UNIT, TRUE );	
000080  2101              MOVS     r1,#1
000082  2089              MOVS     r0,#0x89
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10531  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_SET_LIGTH, TRUE );	
000088  2101              MOVS     r1,#1
00008a  208a              MOVS     r0,#0x8a
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10532  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_SET_POWER_OFF, TRUE );
000090  2101              MOVS     r1,#1
000092  208b              MOVS     r0,#0x8b
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10533  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_SET_BACK, TRUE );
000098  2101              MOVS     r1,#1
00009a  e8bd4010          POP      {r4,lr}
00009e  208c              MOVS     r0,#0x8c
0000a0  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L250.164|
;;;10534  	}	
;;;10535  }
0000a4  bd10              POP      {r4,pc}
;;;10536  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL2SysInfoGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL2SysInfoGUI PROC
;;;10548  **********************************************************************/
;;;10549  void DISPLAY_EnableMenuL2SysInfoGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10550  {
000002  4604              MOV      r4,r0
;;;10551  	// 禁能所有的显示单元
;;;10552  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10553  
;;;10554  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d049              BEQ      |L251.164|
;;;10555  	{		
;;;10556  		// 使能控制
;;;10557  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10558  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10559  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10560  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10561  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10562  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10563  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10564  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10565  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10566  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10567  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10568  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10569  
;;;10570  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10571  
;;;10572  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_TITILE_SYS_INFO, TRUE );
000070  2101              MOVS     r1,#1
000072  208d              MOVS     r0,#0x8d
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10573  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_WHEEL_SIZE, TRUE );	
000078  2101              MOVS     r1,#1
00007a  208e              MOVS     r0,#0x8e
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10574  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_SPEED_LIMIT, TRUE );	
000080  2101              MOVS     r1,#1
000082  208f              MOVS     r0,#0x8f
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10575  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_SPEED_LIMIT_UNIT, TRUE );	
000088  2101              MOVS     r1,#1
00008a  2090              MOVS     r0,#0x90
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10576  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_FW_VERSION, TRUE );
000090  2101              MOVS     r1,#1
000092  2091              MOVS     r0,#0x91
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10577  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L2_SYSTEM_BACK, TRUE );
000098  2101              MOVS     r1,#1
00009a  e8bd4010          POP      {r4,lr}
00009e  2092              MOVS     r0,#0x92
0000a0  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L251.164|
;;;10578  
;;;10579  	}	
;;;10580  }
0000a4  bd10              POP      {r4,pc}
;;;10581  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL3ClearPersBestGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL3ClearPersBestGUI PROC
;;;10635  **********************************************************************/
;;;10636  void DISPLAY_EnableMenuL3ClearPersBestGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10637  {
000002  4604              MOV      r4,r0
;;;10638  	// 禁能所有的显示单元
;;;10639  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10640  
;;;10641  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d03d              BEQ      |L252.140|
;;;10642  	{		
;;;10643  		// 使能控制
;;;10644  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10645  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10646  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10647  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10648  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10649  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10650  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10651  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10652  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10653  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10654  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10655  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10656  
;;;10657  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10658  	
;;;10659  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_CLEAR_PERS_BEST, TRUE );	
000070  2101              MOVS     r1,#1
000072  2094              MOVS     r0,#0x94
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10660  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_YES, TRUE );	
000078  2101              MOVS     r1,#1
00007a  2096              MOVS     r0,#0x96
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10661  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_NO, TRUE );
000080  2101              MOVS     r1,#1
000082  e8bd4010          POP      {r4,lr}
000086  2097              MOVS     r0,#0x97
000088  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L252.140|
;;;10662  	}	
;;;10663  }
00008c  bd10              POP      {r4,pc}
;;;10664  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL3ClearTripGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL3ClearTripGUI PROC
;;;10593  **********************************************************************/
;;;10594  void DISPLAY_EnableMenuL3ClearTripGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10595  {
000002  4604              MOV      r4,r0
;;;10596  	// 禁能所有的显示单元
;;;10597  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10598  
;;;10599  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d041              BEQ      |L253.148|
;;;10600  	{		
;;;10601  		// 使能控制
;;;10602  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10603  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10604  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10605  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10606  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10607  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10608  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10609  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10610  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10611  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10612  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10613  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10614  
;;;10615  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10616  	
;;;10617  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_CLEAR_TRIP, TRUE );	
000070  2101              MOVS     r1,#1
000072  2093              MOVS     r0,#0x93
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10618  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_YES, TRUE );	
000078  2101              MOVS     r1,#1
00007a  2096              MOVS     r0,#0x96
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10619  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_NO, TRUE );	
000080  2101              MOVS     r1,#1
000082  2097              MOVS     r0,#0x97
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10620  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_HINT_CLEAR_TRIP, TRUE );
000088  2101              MOVS     r1,#1
00008a  e8bd4010          POP      {r4,lr}
00008e  2098              MOVS     r0,#0x98
000090  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L253.148|
;;;10621  	}	
;;;10622  }
000094  bd10              POP      {r4,pc}
;;;10623  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL3FactoryResetGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL3FactoryResetGUI PROC
;;;10676  **********************************************************************/
;;;10677  void DISPLAY_EnableMenuL3FactoryResetGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10678  {
000002  4604              MOV      r4,r0
;;;10679  	// 禁能所有的显示单元
;;;10680  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10681  
;;;10682  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d03d              BEQ      |L254.140|
;;;10683  	{		
;;;10684  		// 使能控制
;;;10685  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
000010  2101              MOVS     r1,#1
000012  200a              MOVS     r0,#0xa
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10686  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000018  2101              MOVS     r1,#1
00001a  200c              MOVS     r0,#0xc
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10687  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );	// 蓝牙连接状态
000020  2101              MOVS     r1,#1
000022  200d              MOVS     r0,#0xd
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10688  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000028  2101              MOVS     r1,#1
00002a  200f              MOVS     r0,#0xf
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10689  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000030  2101              MOVS     r1,#1
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10690  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000038  2101              MOVS     r1,#1
00003a  2012              MOVS     r0,#0x12
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10691  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000040  2101              MOVS     r1,#1
000042  2013              MOVS     r0,#0x13
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10692  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000048  2101              MOVS     r1,#1
00004a  2014              MOVS     r0,#0x14
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10693  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000050  2101              MOVS     r1,#1
000052  2015              MOVS     r0,#0x15
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10694  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000058  2101              MOVS     r1,#1
00005a  2016              MOVS     r0,#0x16
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10695  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000060  2101              MOVS     r1,#1
000062  2017              MOVS     r0,#0x17
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10696  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10697  		
;;;10698  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_FACTORY_RESET, TRUE );	
000070  2101              MOVS     r1,#1
000072  2095              MOVS     r0,#0x95
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10699  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_YES, TRUE );	
000078  2101              MOVS     r1,#1
00007a  2096              MOVS     r0,#0x96
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10700  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_NO, TRUE );
000080  2101              MOVS     r1,#1
000082  e8bd4010          POP      {r4,lr}
000086  2097              MOVS     r0,#0x97
000088  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L254.140|
;;;10701  	}	
;;;10702  }
00008c  bd10              POP      {r4,pc}
;;;10703  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL3PowerOffGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL3PowerOffGUI PROC
;;;10886  **********************************************************************/
;;;10887  void DISPLAY_EnableMenuL3PowerOffGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10888  {
000002  4604              MOV      r4,r0
;;;10889  	// 禁能所有的显示单元
;;;10890  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10891  
;;;10892  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d049              BEQ      |L255.164|
;;;10893  	{		
;;;10894  		// 使能控制
;;;10895  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10896  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10897  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10898  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10899  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10900  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10901  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10902  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10903  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10904  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10905  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10906  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10907  
;;;10908  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10909  	
;;;10910  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_SET_POWER_OFF, TRUE );	
000070  2101              MOVS     r1,#1
000072  20a9              MOVS     r0,#0xa9
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10911  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_POWER_OFF, TRUE );	
000078  2101              MOVS     r1,#1
00007a  20aa              MOVS     r0,#0xaa
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10912  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_POWER_OFF_MIN, TRUE );	
000080  2101              MOVS     r1,#1
000082  20ab              MOVS     r0,#0xab
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10913  		
;;;10914  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_PLUS, TRUE );	
000088  2101              MOVS     r1,#1
00008a  209e              MOVS     r0,#0x9e
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10915  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_MINUS, TRUE );
000090  2101              MOVS     r1,#1
000092  209f              MOVS     r0,#0x9f
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10916  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_FINISH, TRUE );
000098  2101              MOVS     r1,#1
00009a  e8bd4010          POP      {r4,lr}
00009e  20a0              MOVS     r0,#0xa0
0000a0  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L255.164|
;;;10917  	}	
;;;10918  }
0000a4  bd10              POP      {r4,pc}
;;;10919  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL3SetAutoLightGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL3SetAutoLightGUI PROC
;;;10758  **********************************************************************/
;;;10759  void DISPLAY_EnableMenuL3SetAutoLightGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10760  {
000002  4604              MOV      r4,r0
;;;10761  	// 禁能所有的显示单元
;;;10762  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10763  
;;;10764  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d03d              BEQ      |L256.140|
;;;10765  	{		
;;;10766  		// 使能控制
;;;10767  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10768  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10769  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10770  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10771  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10772  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10773  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10774  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10775  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10776  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10777  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10778  
;;;10779  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10780  
;;;10781  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_SET_AUTO_LIGHT, TRUE );
000070  2101              MOVS     r1,#1
000072  20a1              MOVS     r0,#0xa1
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10782  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_SET_YES, TRUE );	
000078  2101              MOVS     r1,#1
00007a  20a2              MOVS     r0,#0xa2
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10783  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_SET_NO, TRUE );	
000080  2101              MOVS     r1,#1
000082  e8bd4010          POP      {r4,lr}
000086  20a3              MOVS     r0,#0xa3
000088  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L256.140|
;;;10784  	}	
;;;10785  }
00008c  bd10              POP      {r4,pc}
;;;10786  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL3SetDateTimeGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL3SetDateTimeGUI PROC
;;;10715  **********************************************************************/
;;;10716  void DISPLAY_EnableMenuL3SetDateTimeGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10717  {
000002  4604              MOV      r4,r0
;;;10718  	// 禁能所有的显示单元
;;;10719  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10720  
;;;10721  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d041              BEQ      |L257.148|
;;;10722  	{		
;;;10723  		// 使能控制
;;;10724  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10725  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10726  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10727  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10728  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10729  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10730  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10731  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10732  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10733  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10734  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10735  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10736  
;;;10737  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10738  
;;;10739  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_SET_DATE_TIME, TRUE );
000070  2101              MOVS     r1,#1
000072  209a              MOVS     r0,#0x9a
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10740  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_SET_TIME, TRUE );	
000078  2101              MOVS     r1,#1
00007a  209b              MOVS     r0,#0x9b
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10741  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_SET_DATE, TRUE );	
000080  2101              MOVS     r1,#1
000082  209c              MOVS     r0,#0x9c
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10742  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_BACK, TRUE );	
000088  2101              MOVS     r1,#1
00008a  e8bd4010          POP      {r4,lr}
00008e  209d              MOVS     r0,#0x9d
000090  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L257.148|
;;;10743  	}	
;;;10744  
;;;10745  }
000094  bd10              POP      {r4,pc}
;;;10746  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL3SetLightGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL3SetLightGUI PROC
;;;10840  **********************************************************************/
;;;10841  void DISPLAY_EnableMenuL3SetLightGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10842  {
000002  4604              MOV      r4,r0
;;;10843  	// 禁能所有的显示单元
;;;10844  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10845  
;;;10846  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d045              BEQ      |L258.156|
;;;10847  	{		
;;;10848  		// 使能控制
;;;10849  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10850  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10851  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10852  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10853  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10854  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10855  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10856  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10857  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10858  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10859  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10860  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10861  
;;;10862  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10863  	
;;;10864  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_SET_LIGHT, TRUE );	
000070  2101              MOVS     r1,#1
000072  20a7              MOVS     r0,#0xa7
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10865  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_LIGHT_LEVEL, TRUE );	
000078  2101              MOVS     r1,#1
00007a  20a8              MOVS     r0,#0xa8
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10866  		
;;;10867  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_PLUS, TRUE );	
000080  2101              MOVS     r1,#1
000082  209e              MOVS     r0,#0x9e
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10868  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_MINUS, TRUE );
000088  2101              MOVS     r1,#1
00008a  209f              MOVS     r0,#0x9f
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10869  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_FINISH, TRUE );
000090  2101              MOVS     r1,#1
000092  e8bd4010          POP      {r4,lr}
000096  20a0              MOVS     r0,#0xa0
000098  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L258.156|
;;;10870  
;;;10871  	}	
;;;10872  }
00009c  bd10              POP      {r4,pc}
;;;10873  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL3SetUnitGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL3SetUnitGUI PROC
;;;10799  **********************************************************************/
;;;10800  void DISPLAY_EnableMenuL3SetUnitGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10801  {
000002  4604              MOV      r4,r0
;;;10802  	// 禁能所有的显示单元
;;;10803  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10804  
;;;10805  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d03d              BEQ      |L259.140|
;;;10806  	{		
;;;10807  		// 使能控制
;;;10808  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10809  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10810  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10811  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10812  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10813  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10814  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10815  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10816  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10817  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10818  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10819  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10820  
;;;10821  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10822  
;;;10823  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_TITILE_SET_UNIT, TRUE );
000070  2101              MOVS     r1,#1
000072  20a4              MOVS     r0,#0xa4
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10824  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_SET_UNIT_METRIC, TRUE );	
000078  2101              MOVS     r1,#1
00007a  20a5              MOVS     r0,#0xa5
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10825  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L3_SET_UNIT_INCH, TRUE );	
000080  2101              MOVS     r1,#1
000082  e8bd4010          POP      {r4,lr}
000086  20a6              MOVS     r0,#0xa6
000088  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L259.140|
;;;10826  	}	
;;;10827  }
00008c  bd10              POP      {r4,pc}
;;;10828  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL4SetDateGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL4SetDateGUI PROC
;;;10931  **********************************************************************/
;;;10932  void DISPLAY_EnableMenuL4SetDateGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10933  {
000002  4604              MOV      r4,r0
;;;10934  	// 禁能所有的显示单元
;;;10935  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10936  
;;;10937  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d045              BEQ      |L260.156|
;;;10938  	{		
;;;10939  		// 使能控制
;;;10940  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10941  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10942  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10943  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10944  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10945  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10946  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10947  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10948  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10949  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10950  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10951  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10952  
;;;10953  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10954  	
;;;10955  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L4_TITILE_DATE, TRUE );	
000070  2101              MOVS     r1,#1
000072  20ac              MOVS     r0,#0xac
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10956  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L4_DATE_PLUS, TRUE );	
000078  2101              MOVS     r1,#1
00007a  20ad              MOVS     r0,#0xad
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10957  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L4_DATE_MINUS, TRUE );
000080  2101              MOVS     r1,#1
000082  20ae              MOVS     r0,#0xae
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10958  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L4_DATE_FINISH, TRUE );
000088  2101              MOVS     r1,#1
00008a  20af              MOVS     r0,#0xaf
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10959  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L4_DATE, TRUE );
000090  2101              MOVS     r1,#1
000092  e8bd4010          POP      {r4,lr}
000096  20b0              MOVS     r0,#0xb0
000098  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L260.156|
;;;10960  	}	
;;;10961  }
00009c  bd10              POP      {r4,pc}
;;;10962  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuL4SetTimeGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuL4SetTimeGUI PROC
;;;10975  **********************************************************************/
;;;10976  void DISPLAY_EnableMenuL4SetTimeGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10977  {
000002  4604              MOV      r4,r0
;;;10978  	// 禁能所有的显示单元
;;;10979  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10980  
;;;10981  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d045              BEQ      |L261.156|
;;;10982  	{		
;;;10983  		// 使能控制
;;;10984  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10985  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10986  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10987  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10988  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000028  2101              MOVS     r1,#1
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10989  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000030  2101              MOVS     r1,#1
000032  2012              MOVS     r0,#0x12
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10990  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000038  2101              MOVS     r1,#1
00003a  2013              MOVS     r0,#0x13
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10991  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000040  2101              MOVS     r1,#1
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10992  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000048  2101              MOVS     r1,#1
00004a  2015              MOVS     r0,#0x15
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10993  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000050  2101              MOVS     r1,#1
000052  2016              MOVS     r0,#0x16
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10994  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000058  2101              MOVS     r1,#1
00005a  2017              MOVS     r0,#0x17
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10995  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000060  2101              MOVS     r1,#1
000062  2007              MOVS     r0,#7
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10996  
;;;10997  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000068  2101              MOVS     r1,#1
00006a  2007              MOVS     r0,#7
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10998  	
;;;10999  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L4_TITILE_TIME, TRUE );	
000070  2101              MOVS     r1,#1
000072  20b1              MOVS     r0,#0xb1
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11000  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_PLUS, TRUE );	
000078  2101              MOVS     r1,#1
00007a  209e              MOVS     r0,#0x9e
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11001  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_MINUS, TRUE );
000080  2101              MOVS     r1,#1
000082  209f              MOVS     r0,#0x9f
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11002  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_FINISH, TRUE );
000088  2101              MOVS     r1,#1
00008a  20a0              MOVS     r0,#0xa0
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11003  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_L4_TIME, TRUE );
000090  2101              MOVS     r1,#1
000092  e8bd4010          POP      {r4,lr}
000096  20b2              MOVS     r0,#0xb2
000098  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L261.156|
;;;11004  	}	
;;;11005  }
00009c  bd10              POP      {r4,pc}
;;;11006  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuLockGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuLockGUI PROC
;;;10131  **********************************************************************/
;;;10132  void DISPLAY_EnableMenuLockGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10133  {
000002  4604              MOV      r4,r0
;;;10134  	// 禁能所有的显示单元
;;;10135  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10136  
;;;10137  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d011              BEQ      |L262.52|
;;;10138  	{		
;;;10139  		// 使能控制
;;;10140  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10141  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10142  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10143  
;;;10144  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000020  2101              MOVS     r1,#1
000022  2007              MOVS     r0,#7
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10145  		
;;;10146  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_LOCKED, TRUE );
000028  2101              MOVS     r1,#1
00002a  e8bd4010          POP      {r4,lr}
00002e  2044              MOVS     r0,#0x44
000030  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L262.52|
;;;10147  
;;;10148  	}
;;;10149  	
;;;10150  }
000034  bd10              POP      {r4,pc}
;;;10151  
                          ENDP


                          AREA ||i.DISPLAY_EnableMenuOkGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMenuOkGUI PROC
;;;10163  **********************************************************************/
;;;10164  void DISPLAY_EnableMenuOkGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10165  {
000002  4604              MOV      r4,r0
;;;10166  	// 禁能所有的显示单元
;;;10167  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10168  
;;;10169  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d015              BEQ      |L263.60|
;;;10170  	{		
;;;10171  		// 使能控制
;;;10172  //		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10173  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000010  2101              MOVS     r1,#1
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10174  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );// 数据记录状态
000018  2101              MOVS     r1,#1
00001a  200d              MOVS     r0,#0xd
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10175  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000020  2101              MOVS     r1,#1
000022  200f              MOVS     r0,#0xf
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10176  
;;;10177  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BG, TRUE );
000028  2101              MOVS     r1,#1
00002a  2007              MOVS     r0,#7
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10178  		
;;;10179  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_OK, TRUE );
000030  2101              MOVS     r1,#1
000032  e8bd4010          POP      {r4,lr}
000036  2045              MOVS     r0,#0x45
000038  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L263.60|
;;;10180  
;;;10181  	}
;;;10182  
;;;10183  }
00003c  bd10              POP      {r4,pc}
;;;10184  
                          ENDP


                          AREA ||i.DISPLAY_EnableMonitorGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMonitorGUI PROC
;;;10022  **********************************************************************/
;;;10023  void DISPLAY_EnableMonitorGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10024  {
000002  4604              MOV      r4,r0
;;;10025  	// 禁能所有的显示单元
;;;10026  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10027  
;;;10028  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d061              BEQ      |L264.212|
;;;10029  	{		
;;;10030  		// 使能控制
;;;10031  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME1, TRUE );		// 时间
000010  2101              MOVS     r1,#1
000012  200b              MOVS     r0,#0xb
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10032  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000018  2101              MOVS     r1,#1
00001a  200c              MOVS     r0,#0xc
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10033  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );	// 蓝牙连接状态
000020  2101              MOVS     r1,#1
000022  200d              MOVS     r0,#0xd
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10034  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000028  2101              MOVS     r1,#1
00002a  200f              MOVS     r0,#0xf
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10035  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000030  2101              MOVS     r1,#1
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10036  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_CRUISE, TRUE ); 		// 巡航
000038  2101              MOVS     r1,#1
00003a  2011              MOVS     r0,#0x11
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10037  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000040  2101              MOVS     r1,#1
000042  2012              MOVS     r0,#0x12
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10038  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000048  2101              MOVS     r1,#1
00004a  2013              MOVS     r0,#0x13
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10039  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000050  2101              MOVS     r1,#1
000052  2014              MOVS     r0,#0x14
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10040  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000058  2101              MOVS     r1,#1
00005a  2015              MOVS     r0,#0x15
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10041  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000060  2101              MOVS     r1,#1
000062  2016              MOVS     r0,#0x16
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10042  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000068  2101              MOVS     r1,#1
00006a  2017              MOVS     r0,#0x17
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10043  		
;;;10044  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_BG, TRUE );	
000070  2101              MOVS     r1,#1
000072  2005              MOVS     r0,#5
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10045  		
;;;10046  		DISPLAY_DISABLE_ENABLE( DISPALY_MON_RIDING_TIME_TITILE, TRUE );
000078  2101              MOVS     r1,#1
00007a  202b              MOVS     r0,#0x2b
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10047  		DISPLAY_DISABLE_ENABLE( DISPALY_MON_RIDING_TIME, TRUE );		
000080  2101              MOVS     r1,#1
000082  202c              MOVS     r0,#0x2c
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10048  	
;;;10049  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_CALORIE_TITILE, TRUE );
000088  2101              MOVS     r1,#1
00008a  202d              MOVS     r0,#0x2d
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10050  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_CALORIE, TRUE );
000090  2101              MOVS     r1,#1
000092  202e              MOVS     r0,#0x2e
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10051  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_CALORIE_UNIT, TRUE );
000098  2101              MOVS     r1,#1
00009a  202f              MOVS     r0,#0x2f
00009c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10052  
;;;10053  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_TRIP_TITILE, TRUE ); 
0000a0  2101              MOVS     r1,#1
0000a2  2025              MOVS     r0,#0x25
0000a4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10054  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_TRIP, TRUE ); 	
0000a8  2101              MOVS     r1,#1
0000aa  2026              MOVS     r0,#0x26
0000ac  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10055  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_TRIP_UNIT, TRUE );
0000b0  2101              MOVS     r1,#1
0000b2  2027              MOVS     r0,#0x27
0000b4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10056  		
;;;10057  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_ODO_TITILE, TRUE );
0000b8  2101              MOVS     r1,#1
0000ba  2028              MOVS     r0,#0x28
0000bc  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10058  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_ODO, TRUE ); 	
0000c0  2101              MOVS     r1,#1
0000c2  2029              MOVS     r0,#0x29
0000c4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10059  		DISPLAY_DISABLE_ENABLE( DISPLAY_MON_ODO_UNIT, TRUE );
0000c8  2101              MOVS     r1,#1
0000ca  e8bd4010          POP      {r4,lr}
0000ce  202a              MOVS     r0,#0x2a
0000d0  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L264.212|
;;;10060  	}
;;;10061  	
;;;10062  }
0000d4  bd10              POP      {r4,pc}
;;;10063  
                          ENDP


                          AREA ||i.DISPLAY_EnableMusicGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableMusicGUI PROC
;;;9955   // 使能音乐操作界面
;;;9956   void DISPLAY_EnableMusicGUI(BOOL enale)
000000  2100              MOVS     r1,#0
;;;9957   {
;;;9958   	// 禁能所有的显示单元
;;;9959   	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000002  20b3              MOVS     r0,#0xb3
000004  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
;;;9960   
;;;9961   	if (enale)
;;;9962   	{		
;;;9963   		
;;;9964   	}	
;;;9965   }
;;;9966   
                          ENDP


                          AREA ||i.DISPLAY_EnableNavGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableNavGUI PROC
;;;10315  // 导航界面显示
;;;10316  void DISPLAY_EnableNavGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10317  {
000002  4604              MOV      r4,r0
;;;10318  	// 禁能所有的显示单元
;;;10319  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10320  
;;;10321  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d065              BEQ      |L266.220|
;;;10322  	{		
;;;10323  		// 使能控制		
;;;10324  		DISPLAY_DISABLE_ENABLE( DISPLAY_STATUS_BAR, TRUE );			// 状态栏
000010  2101              MOVS     r1,#1
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10325  
;;;10326  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME1, TRUE );		// 时间
000018  2101              MOVS     r1,#1
00001a  200b              MOVS     r0,#0xb
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10327  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_BATTARY, TRUE );		// 电池
000020  2101              MOVS     r1,#1
000022  2022              MOVS     r0,#0x22
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10328  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );	// 数据记录状态
000028  2101              MOVS     r1,#1
00002a  200d              MOVS     r0,#0xd
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10329  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_ASSIST, TRUE );			// 助力
000030  2101              MOVS     r1,#1
000032  2021              MOVS     r0,#0x21
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10330  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE );		// 灯光
000038  2101              MOVS     r1,#1
00003a  200f              MOVS     r0,#0xf
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10331  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE );		// 错误标识
000040  2101              MOVS     r1,#1
000042  2010              MOVS     r0,#0x10
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10332  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_CRUISE, TRUE ); 		// 巡航
000048  2101              MOVS     r1,#1
00004a  2011              MOVS     r0,#0x11
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10333  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000050  2101              MOVS     r1,#1
000052  2012              MOVS     r0,#0x12
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10334  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000058  2101              MOVS     r1,#1
00005a  2013              MOVS     r0,#0x13
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10335  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000060  2101              MOVS     r1,#1
000062  2014              MOVS     r0,#0x14
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10336  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000068  2101              MOVS     r1,#1
00006a  2015              MOVS     r0,#0x15
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10337  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000070  2101              MOVS     r1,#1
000072  2016              MOVS     r0,#0x16
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10338  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000078  2101              MOVS     r1,#1
00007a  2017              MOVS     r0,#0x17
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10339  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TURN, TRUE );			// 转向图标
000080  2101              MOVS     r1,#1
000082  2019              MOVS     r0,#0x19
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10340  		
;;;10341  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_BG, TRUE );				// 静态图片
000088  2101              MOVS     r1,#1
00008a  2004              MOVS     r0,#4
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10342  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_MOTOR_POWER, TRUE );	// 电机功率
000090  2101              MOVS     r1,#1
000092  201e              MOVS     r0,#0x1e
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10343  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_CRUISE, TRUE );			// 巡航
000098  2101              MOVS     r1,#1
00009a  2023              MOVS     r0,#0x23
00009c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10344  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_CALL_NUMBER, TRUE );	// 来电提示
0000a0  2101              MOVS     r1,#1
0000a2  2024              MOVS     r0,#0x24
0000a4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10345  
;;;10346  		DISPLAY_DISABLE_ENABLE( DISPLAY_NAV_SPEED, TRUE );			// 速度
0000a8  2101              MOVS     r1,#1
0000aa  203d              MOVS     r0,#0x3d
0000ac  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10347  		DISPLAY_DISABLE_ENABLE( DISPLAY_NAV_SPEED_UNIT, TRUE );		// 速度单位
0000b0  2101              MOVS     r1,#1
0000b2  203e              MOVS     r0,#0x3e
0000b4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10348  		DISPLAY_DISABLE_ENABLE( DISPLAY_NAV_BG, TRUE );				// 静态图片
0000b8  2101              MOVS     r1,#1
0000ba  203c              MOVS     r0,#0x3c
0000bc  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10349  		DISPLAY_DISABLE_ENABLE( DISPLAY_NAV_DIRECTION, TRUE );		// 导航方向
0000c0  2101              MOVS     r1,#1
0000c2  203f              MOVS     r0,#0x3f
0000c4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10350  		DISPLAY_DISABLE_ENABLE( DISPLAY_NAV_DISTANCE_UNIT, TRUE );	// 导航距离与单位
0000c8  2101              MOVS     r1,#1
0000ca  2040              MOVS     r0,#0x40
0000cc  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10351  		DISPLAY_DISABLE_ENABLE( DISPLAY_NAV_DISTANCE_TIME, TRUE );
0000d0  2101              MOVS     r1,#1
0000d2  e8bd4010          POP      {r4,lr}
0000d6  2041              MOVS     r0,#0x41
0000d8  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L266.220|
;;;10352  	}
;;;10353  }
0000dc  bd10              POP      {r4,pc}
;;;10354  
                          ENDP


                          AREA ||i.DISPLAY_EnablePhoneGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnablePhoneGUI PROC
;;;9924   // 使能来电操作界面
;;;9925   void DISPLAY_EnablePhoneGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;9926   {
000002  4604              MOV      r4,r0
;;;9927   	// 禁能所有的显示单元
;;;9928   	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9929   
;;;9930   	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d041              BEQ      |L267.148|
;;;9931   	{		
;;;9932   		// 使能控制		
;;;9933   		DISPLAY_DISABLE_ENABLE( DISPLAY_STATUS_BAR, TRUE );				// 状态栏
000010  2101              MOVS     r1,#1
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9934   
;;;9935   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );			// 时间
000018  2101              MOVS     r1,#1
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9936   		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_BATTARY, TRUE );			// 电池
000020  2101              MOVS     r1,#1
000022  2022              MOVS     r0,#0x22
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9937   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );		// 数据记录状态
000028  2101              MOVS     r1,#1
00002a  200d              MOVS     r0,#0xd
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9938   		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_ASSIST, TRUE );				// 助力
000030  2101              MOVS     r1,#1
000032  2021              MOVS     r0,#0x21
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9939   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE );			// 灯光
000038  2101              MOVS     r1,#1
00003a  200f              MOVS     r0,#0xf
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9940   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE );			// 错误标识
000040  2101              MOVS     r1,#1
000042  2010              MOVS     r0,#0x10
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9941   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000048  2101              MOVS     r1,#1
00004a  2012              MOVS     r0,#0x12
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9942   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000050  2101              MOVS     r1,#1
000052  2013              MOVS     r0,#0x13
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9943   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000058  2101              MOVS     r1,#1
00005a  2014              MOVS     r0,#0x14
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9944   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000060  2101              MOVS     r1,#1
000062  2015              MOVS     r0,#0x15
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9945   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000068  2101              MOVS     r1,#1
00006a  2016              MOVS     r0,#0x16
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9946   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000070  2101              MOVS     r1,#1
000072  2017              MOVS     r0,#0x17
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9947   		
;;;9948   		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_BG, TRUE );					// 静态图片
000078  2101              MOVS     r1,#1
00007a  2004              MOVS     r0,#4
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9949   		DISPLAY_DISABLE_ENABLE( DISPLAY_PHONE_BG, TRUE );				// 来电界面
000080  2101              MOVS     r1,#1
000082  201a              MOVS     r0,#0x1a
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9950   		DISPLAY_DISABLE_ENABLE( DISPLAY_PHONE_NUMBER, TRUE );			// 来电电话
000088  2101              MOVS     r1,#1
00008a  e8bd4010          POP      {r4,lr}
00008e  201b              MOVS     r0,#0x1b
000090  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L267.148|
;;;9951   		
;;;9952   	}	
;;;9953   }
000094  bd10              POP      {r4,pc}
;;;9954   
                          ENDP


                          AREA ||i.DISPLAY_EnablePowerON_Menu_PasswordGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_EnablePowerON_Menu_PasswordGUI PROC
;;;11028  // 使能开机密码登录界面
;;;11029  void DISPLAY_EnablePowerON_Menu_PasswordGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;11030  {
000002  4604              MOV      r4,r0
;;;11031  	// 禁能所有的显示单元
;;;11032  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11033  
;;;11034  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d01d              BEQ      |L268.76|
;;;11035  	{
;;;11036  		DISPLAY_DISABLE_ENABLE( DISPLAY_INPUT_PASSWORD_BG, TRUE );
000010  2101              MOVS     r1,#1
000012  2009              MOVS     r0,#9
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11037  
;;;11038  		if (PARAM_GetLockPairState())
000018  480d              LDR      r0,|L268.80|
00001a  f89002f7          LDRB     r0,[r0,#0x2f7]  ; paramCB
00001e  b138              CBZ      r0,|L268.48|
;;;11039  		{
;;;11040  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWERON_PASSWORD_LOCK_ICON, TRUE);
000020  2101              MOVS     r1,#1
000022  205e              MOVS     r0,#0x5e
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11041  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWERON_PASSWORD_COUNT_DOWN, TRUE);
000028  2101              MOVS     r1,#1
00002a  2062              MOVS     r0,#0x62
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
                  |L268.48|
;;;11042  		}
;;;11043  		
;;;11044  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWERON_PASSWORD_INPUT_TITLE, TRUE);
000030  2101              MOVS     r1,#1
000032  205f              MOVS     r0,#0x5f
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11045  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWERON_PASSWORD_INPUT_NUM, TRUE);
000038  2101              MOVS     r1,#1
00003a  2060              MOVS     r0,#0x60
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;11046  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWERON_PASSWORD_INPUT_CURSOR, TRUE);
000040  2101              MOVS     r1,#1
000042  e8bd4010          POP      {r4,lr}
000046  2061              MOVS     r0,#0x61
000048  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L268.76|
;;;11047  		
;;;11048  	}
;;;11049  }
00004c  bd10              POP      {r4,pc}
;;;11050  
                          ENDP

00004e  0000              DCW      0x0000
                  |L268.80|
                          DCD      paramCB

                          AREA ||i.DISPLAY_EnablePowerOffGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnablePowerOffGUI PROC
;;;9898   **********************************************************************/
;;;9899   void DISPLAY_EnablePowerOffGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;9900   {
000002  4604              MOV      r4,r0
;;;9901   	// 禁能所有的显示单元
;;;9902   	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9903   
;;;9904   	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d005              BEQ      |L269.28|
;;;9905   	{		
;;;9906   		// 菜单显示控制
;;;9907   		DISPLAY_DISABLE_ENABLE( DISPLAY_POWER_OFF, TRUE );			// 开机
000010  2101              MOVS     r1,#1
000012  e8bd4010          POP      {r4,lr}
000016  4608              MOV      r0,r1
000018  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L269.28|
;;;9908   	}
;;;9909   
;;;9910   }
00001c  bd10              POP      {r4,pc}
;;;9911   
                          ENDP


                          AREA ||i.DISPLAY_EnablePowerOnGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnablePowerOnGUI PROC
;;;9873   **********************************************************************/
;;;9874   void DISPLAY_EnablePowerOnGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;9875   {
000002  4604              MOV      r4,r0
;;;9876   	// 禁能所有的显示单元
;;;9877   	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9878   
;;;9879   	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d005              BEQ      |L270.28|
;;;9880   	{
;;;9881   		// 菜单显示控制
;;;9882   		DISPLAY_DISABLE_ENABLE( DISPLAY_POWER_ON, TRUE );			// 开机
000010  2101              MOVS     r1,#1
000012  e8bd4010          POP      {r4,lr}
000016  2000              MOVS     r0,#0
000018  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L270.28|
;;;9883   	}
;;;9884   
;;;9885   }
00001c  bd10              POP      {r4,pc}
;;;9886   
                          ENDP


                          AREA ||i.DISPLAY_EnableRidingGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableRidingGUI PROC
;;;9978   **********************************************************************/
;;;9979   void DISPLAY_EnableRidingGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;9980   {
000002  4604              MOV      r4,r0
;;;9981   	// 禁能所有的显示单元
;;;9982   	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9983   
;;;9984   	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d04d              BEQ      |L271.172|
;;;9985   	{		
;;;9986   		// 使能控制		
;;;9987   		DISPLAY_DISABLE_ENABLE( DISPLAY_STATUS_BAR, TRUE );				// 状态栏
000010  2101              MOVS     r1,#1
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9988   
;;;9989   		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_BATTARY, TRUE );			// 电池
000018  2101              MOVS     r1,#1
00001a  2022              MOVS     r0,#0x22
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9990   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );		// 数据记录状态
000020  2101              MOVS     r1,#1
000022  200d              MOVS     r0,#0xd
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9991   		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_ASSIST, TRUE );				// 助力
000028  2101              MOVS     r1,#1
00002a  2021              MOVS     r0,#0x21
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9992   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE );			// 灯光
000030  2101              MOVS     r1,#1
000032  200f              MOVS     r0,#0xf
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9993   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE );			// 错误标识
000038  2101              MOVS     r1,#1
00003a  2010              MOVS     r0,#0x10
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9994   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000040  2101              MOVS     r1,#1
000042  2012              MOVS     r0,#0x12
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9995   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000048  2101              MOVS     r1,#1
00004a  2013              MOVS     r0,#0x13
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9996   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000050  2101              MOVS     r1,#1
000052  2014              MOVS     r0,#0x14
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9997   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000058  2101              MOVS     r1,#1
00005a  2015              MOVS     r0,#0x15
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9998   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000060  2101              MOVS     r1,#1
000062  2016              MOVS     r0,#0x16
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9999   		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000068  2101              MOVS     r1,#1
00006a  2017              MOVS     r0,#0x17
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10000  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TURN, TRUE );			// 转向图标
000070  2101              MOVS     r1,#1
000072  2019              MOVS     r0,#0x19
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10001  		
;;;10002  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_BG, TRUE );					// 静态图片
000078  2101              MOVS     r1,#1
00007a  2004              MOVS     r0,#4
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10003  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_SPEED, TRUE );				// 速度
000080  2101              MOVS     r1,#1
000082  201f              MOVS     r0,#0x1f
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10004  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_SPEED_UNIT, TRUE );			// 速度单位
000088  2101              MOVS     r1,#1
00008a  2020              MOVS     r0,#0x20
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10005  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_MOTOR_POWER, TRUE );		// 电机功率
000090  2101              MOVS     r1,#1
000092  201e              MOVS     r0,#0x1e
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10006  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_CRUISE, TRUE );				// 巡航
000098  2101              MOVS     r1,#1
00009a  2023              MOVS     r0,#0x23
00009c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10007  		DISPLAY_DISABLE_ENABLE( DISPLAY_RID_CALL_NUMBER, TRUE );		// 来电提示
0000a0  2101              MOVS     r1,#1
0000a2  e8bd4010          POP      {r4,lr}
0000a6  2024              MOVS     r0,#0x24
0000a8  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L271.172|
;;;10008  	}	
;;;10009  }
0000ac  bd10              POP      {r4,pc}
;;;10010  
                          ENDP


                          AREA ||i.DISPLAY_EnableTourGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableTourGUI PROC
;;;10075  **********************************************************************/
;;;10076  void DISPLAY_EnableTourGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;10077  {
000002  4604              MOV      r4,r0
;;;10078  	// 禁能所有的显示单元
;;;10079  	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10080  
;;;10081  	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d065              BEQ      |L272.220|
;;;10082  	{		
;;;10083  		// 使能控制
;;;10084  	//	DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME, TRUE );		// 时间
;;;10085  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_TIME1, TRUE );		// 时间
000010  2101              MOVS     r1,#1
000012  200b              MOVS     r0,#0xb
000014  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10086  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY, TRUE );		// 电池
000018  2101              MOVS     r1,#1
00001a  200c              MOVS     r0,#0xc
00001c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10087  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BLUE_STATE, TRUE );	// 蓝牙连接状态
000020  2101              MOVS     r1,#1
000022  200d              MOVS     r0,#0xd
000024  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10088  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_LIGHT, TRUE ); 		// 灯光
000028  2101              MOVS     r1,#1
00002a  200f              MOVS     r0,#0xf
00002c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10089  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_ERROR, TRUE ); 		// 错误
000030  2101              MOVS     r1,#1
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10090  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_CRUISE, TRUE ); 		// 巡航
000038  2101              MOVS     r1,#1
00003a  2011              MOVS     r0,#0x11
00003c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10091  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_4G, TRUE );		// 4G信号
000040  2101              MOVS     r1,#1
000042  2012              MOVS     r0,#0x12
000044  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10092  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_SIGNAL_GPS, TRUE );		// GPS信号
000048  2101              MOVS     r1,#1
00004a  2013              MOVS     r0,#0x13
00004c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10093  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_BATTARY_HELMET, TRUE );	// 头盔电量
000050  2101              MOVS     r1,#1
000052  2014              MOVS     r0,#0x14
000054  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10094  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VIDEO, TRUE );			// 录像 
000058  2101              MOVS     r1,#1
00005a  2015              MOVS     r0,#0x15
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10095  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_PHOTO, TRUE );			// 拍照 
000060  2101              MOVS     r1,#1
000062  2016              MOVS     r0,#0x16
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10096  		DISPLAY_DISABLE_ENABLE( DISPLAY_COMMON_VOICE, TRUE );			// 语音图标
000068  2101              MOVS     r1,#1
00006a  2017              MOVS     r0,#0x17
00006c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10097  		
;;;10098  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_BG, TRUE );		
000070  2101              MOVS     r1,#1
000072  2006              MOVS     r0,#6
000074  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10099  		
;;;10100  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_AVG_SPEED_TITILE, TRUE );
000078  2101              MOVS     r1,#1
00007a  2030              MOVS     r0,#0x30
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10101  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_AVG_SPEED, TRUE );	
000080  2101              MOVS     r1,#1
000082  2031              MOVS     r0,#0x31
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10102  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_AVG_SPEED_UNIT, TRUE );	
000088  2101              MOVS     r1,#1
00008a  2032              MOVS     r0,#0x32
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10103  
;;;10104  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_MAX_SPEED_TITILE, TRUE );		
000090  2101              MOVS     r1,#1
000092  2033              MOVS     r0,#0x33
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10105  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_MAX_SPEED, TRUE );		
000098  2101              MOVS     r1,#1
00009a  2034              MOVS     r0,#0x34
00009c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10106  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_MAX_SPEED_UNIT, TRUE );	
0000a0  2101              MOVS     r1,#1
0000a2  2035              MOVS     r0,#0x35
0000a4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10107  		
;;;10108  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_CO2_AVOIDED_TITILE, TRUE );		
0000a8  2101              MOVS     r1,#1
0000aa  2036              MOVS     r0,#0x36
0000ac  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10109  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_CO2_AVOIDED, TRUE );
0000b0  2101              MOVS     r1,#1
0000b2  2037              MOVS     r0,#0x37
0000b4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10110  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_CO2_AVOIDED_UNIT, TRUE );
0000b8  2101              MOVS     r1,#1
0000ba  2038              MOVS     r0,#0x38
0000bc  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10111  		
;;;10112  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_TREES_SAVED_TITILE, TRUE );		
0000c0  2101              MOVS     r1,#1
0000c2  2039              MOVS     r0,#0x39
0000c4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10113  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_TREES_SAVED, TRUE );		
0000c8  2101              MOVS     r1,#1
0000ca  203a              MOVS     r0,#0x3a
0000cc  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;10114  		DISPLAY_DISABLE_ENABLE( DISPLAY_TOUR_TREES_SAVED_UNIT, TRUE );
0000d0  2101              MOVS     r1,#1
0000d2  e8bd4010          POP      {r4,lr}
0000d6  203b              MOVS     r0,#0x3b
0000d8  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L272.220|
;;;10115  		
;;;10116  	}
;;;10117  	
;;;10118  }
0000dc  bd10              POP      {r4,pc}
;;;10119  
                          ENDP


                          AREA ||i.DISPLAY_EnableUpdataGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_EnableUpdataGUI PROC
;;;9911   
;;;9912   void DISPLAY_EnableUpdataGUI(BOOL enale)
000000  b510              PUSH     {r4,lr}
;;;9913   {
000002  4604              MOV      r4,r0
;;;9914   	// 禁能所有的显示单元
;;;9915   	DISPLAY_DISABLE_ENABLE( DISPLAY_MAX, FALSE );
000004  2100              MOVS     r1,#0
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;9916   
;;;9917   	if (enale)
00000c  2c00              CMP      r4,#0
00000e  d005              BEQ      |L273.28|
;;;9918   	{		
;;;9919   		// 菜单显示控制
;;;9920   		DISPLAY_DISABLE_ENABLE( DISPLAY_BLE_UPDATA, TRUE );			// 蓝牙升级
000010  2101              MOVS     r1,#1
000012  e8bd4010          POP      {r4,lr}
000016  2002              MOVS     r0,#2
000018  f7ffbffe          B.W      DISPLAY_DISABLE_ENABLE
                  |L273.28|
;;;9921   	}
;;;9922   }
00001c  bd10              POP      {r4,pc}
;;;9923   
                          ENDP


                          AREA ||i.DISPLAY_EntreMenuAdvancedPassword||, CODE, READONLY, ALIGN=2

                  DISPLAY_EntreMenuAdvancedPassword PROC
;;;12198  // 调整高级菜单密码
;;;12199  void DISPLAY_EntreMenuAdvancedPassword(uint32 param)
000000  b430              PUSH     {r4,r5}
;;;12200  {
;;;12201  	uint16 password = 0;
;;;12202  	
;;;12203  	displayStateCB.menu.advanced.password.value++;
000002  491b              LDR      r1,|L274.112|
000004  f8b10b44          LDRH     r0,[r1,#0xb44]  ; displayStateCB
000008  1c40              ADDS     r0,r0,#1
00000a  b280              UXTH     r0,r0
00000c  f8a10b44          STRH     r0,[r1,#0xb44]
;;;12204  
;;;12205  	if (displayStateCB.menu.advanced.password.value > 3)
000010  2803              CMP      r0,#3
000012  d926              BLS      |L274.98|
;;;12206  	{
;;;12207  		displayStateCB.menu.advanced.password.value = 0;
000014  f6013144          ADD      r1,r1,#0xb44
000018  2200              MOVS     r2,#0
00001a  800a              STRH     r2,[r1,#0]
;;;12208  
;;;12209  		password = (displayStateCB.menu.advanced.password.number1*1000) + (displayStateCB.menu.advanced.password.number2*100)+
00001c  7888              LDRB     r0,[r1,#2]  ; displayStateCB
00001e  794b              LDRB     r3,[r1,#5]  ; displayStateCB
000020  eb000440          ADD      r4,r0,r0,LSL #1
000024  ebc410c0          RSB      r0,r4,r0,LSL #7
000028  eb0304c0          ADD      r4,r3,r0,LSL #3
00002c  78cb              LDRB     r3,[r1,#3]  ; displayStateCB
00002e  2064              MOVS     r0,#0x64
000030  4343              MULS     r3,r0,r3
000032  7908              LDRB     r0,[r1,#4]  ; displayStateCB
000034  f6a13144          SUB      r1,r1,#0xb44
000038  eb000080          ADD      r0,r0,r0,LSL #2
00003c  eb030040          ADD      r0,r3,r0,LSL #1
000040  4420              ADD      r0,r0,r4
000042  b280              UXTH     r0,r0
;;;12210  			(displayStateCB.menu.advanced.password.number3*10) + (displayStateCB.menu.advanced.password.number4*1);
;;;12211  		if ((password == PARAM_GetMenuPassword()) || (password == SUPER_MENU_PASSWORD))
000044  4b0b              LDR      r3,|L274.116|
000046  f8b332c6          LDRH     r3,[r3,#0x2c6]  ; paramCB
00004a  4283              CMP      r3,r0
00004c  d00b              BEQ      |L274.102|
00004e  f5a063a0          SUB      r3,r0,#0x500
000052  3b22              SUBS     r3,r3,#0x22
000054  d007              BEQ      |L274.102|
;;;12212  		{
;;;12213  			STATE_EnterState(STATE_MENU_ADV_MENU_INFO1);
;;;12214  		}
;;;12215  		else
;;;12216  		{
;;;12217  			displayStateCB.menu.advanced.password.number1=0;
000056  f6013146          ADD      r1,r1,#0xb46
00005a  700a              STRB     r2,[r1,#0]
;;;12218  			displayStateCB.menu.advanced.password.number2=0;
00005c  704a              STRB     r2,[r1,#1]
;;;12219  			displayStateCB.menu.advanced.password.number3=0;
00005e  708a              STRB     r2,[r1,#2]
;;;12220  			displayStateCB.menu.advanced.password.number4=0;
000060  70ca              STRB     r2,[r1,#3]
                  |L274.98|
;;;12221  		}
;;;12222  	}
;;;12223  }
000062  bc30              POP      {r4,r5}
000064  4770              BX       lr
                  |L274.102|
000066  bc30              POP      {r4,r5}               ;12213
000068  2023              MOVS     r0,#0x23              ;12213
00006a  f7ffbffe          B.W      STATE_EnterState
;;;12224  
                          ENDP

00006e  0000              DCW      0x0000
                  |L274.112|
                          DCD      ||.bss||
                  |L274.116|
                          DCD      paramCB

                          AREA ||i.DISPLAY_EntreMenuAdvancedPasswordNum||, CODE, READONLY, ALIGN=2

                  DISPLAY_EntreMenuAdvancedPasswordNum PROC
;;;12399  // 调整高级菜单密码
;;;12400  void DISPLAY_EntreMenuAdvancedPasswordNum(uint32 param)
000000  b570              PUSH     {r4-r6,lr}
;;;12401  {
;;;12402  	// +
;;;12403  	if (DISPLAY_MENU_TUNE_PREVIOUS == param)
;;;12404  	{
;;;12405  		switch (displayStateCB.menu.advanced.password.value)
000002  4a30              LDR      r2,|L275.196|
000004  2801              CMP      r0,#1                 ;12403
000006  8811              LDRH     r1,[r2,#0]
;;;12406  		{
;;;12407  			case 0:
;;;12408  				displayStateCB.menu.advanced.password.number1++;
000008  7893              LDRB     r3,[r2,#2]
;;;12409  				displayStateCB.menu.advanced.password.number1%=10;
;;;12410  				
;;;12411  				break;
;;;12412  
;;;12413  			case 1:
;;;12414  				displayStateCB.menu.advanced.password.number2++;
00000a  78d4              LDRB     r4,[r2,#3]
;;;12415  				displayStateCB.menu.advanced.password.number2%=10;
;;;12416  				
;;;12417  				break;
;;;12418  
;;;12419  			case 2:
;;;12420  				displayStateCB.menu.advanced.password.number3++;
00000c  7915              LDRB     r5,[r2,#4]
;;;12421  				displayStateCB.menu.advanced.password.number3%=10;
;;;12422  				
;;;12423  				break;
;;;12424  
;;;12425  			case 3:
;;;12426  				displayStateCB.menu.advanced.password.number4++;
00000e  7956              LDRB     r6,[r2,#5]
000010  f6a23244          SUB      r2,r2,#0xb44
000014  d00c              BEQ      |L275.48|
;;;12427  				displayStateCB.menu.advanced.password.number4%=10;
;;;12428  				
;;;12429  				break;
;;;12430  
;;;12431  			default:
;;;12432  				break;
;;;12433  		}
;;;12434  
;;;12435  	}
;;;12436  	// -
;;;12437  	else
;;;12438  	{
;;;12439  		switch (displayStateCB.menu.advanced.password.value)
;;;12440  		{
;;;12441  			case 0:
;;;12442  				if (0 == displayStateCB.menu.advanced.password.number1)
;;;12443  				{
;;;12444  					displayStateCB.menu.advanced.password.number1=9;
000016  2009              MOVS     r0,#9
000018  b3b1              CBZ      r1,|L275.136|
00001a  2901              CMP      r1,#1                 ;12439
00001c  d03e              BEQ      |L275.156|
00001e  2902              CMP      r1,#2                 ;12439
000020  d044              BEQ      |L275.172|
000022  2903              CMP      r1,#3                 ;12439
000024  d103              BNE      |L275.46|
;;;12445  					break;
;;;12446  				}
;;;12447  				else
;;;12448  				{
;;;12449  					displayStateCB.menu.advanced.password.number1--;
;;;12450  				}
;;;12451  
;;;12452  				break;
;;;12453  
;;;12454  			case 1:
;;;12455  				if (0 == displayStateCB.menu.advanced.password.number2)
;;;12456  				{
;;;12457  					displayStateCB.menu.advanced.password.number2=9;
;;;12458  					break;
;;;12459  				}
;;;12460  				else
;;;12461  				{
;;;12462  					displayStateCB.menu.advanced.password.number2--;
;;;12463  				}
;;;12464  				
;;;12465  				break;
;;;12466  
;;;12467  			case 2:
;;;12468  				if (0 == displayStateCB.menu.advanced.password.number3)
;;;12469  				{
;;;12470  					displayStateCB.menu.advanced.password.number3=9;
;;;12471  					break;
;;;12472  				}
;;;12473  				else
;;;12474  				{
;;;12475  					displayStateCB.menu.advanced.password.number3--;
;;;12476  				}
;;;12477  				
;;;12478  				break;
;;;12479  
;;;12480  			case 3:
;;;12481  				if (0 == displayStateCB.menu.advanced.password.number4)
000026  b386              CBZ      r6,|L275.138|
;;;12482  				{
;;;12483  					displayStateCB.menu.advanced.password.number4=9;
;;;12484  					break;
;;;12485  				}
;;;12486  				else
;;;12487  				{
;;;12488  					displayStateCB.menu.advanced.password.number4--;
000028  1e76              SUBS     r6,r6,#1
00002a  f8826b49          STRB     r6,[r2,#0xb49]
                  |L275.46|
;;;12489  				}
;;;12490  				
;;;12491  				break;
;;;12492  
;;;12493  			default:
;;;12494  				break;
;;;12495  		}
;;;12496  	}
;;;12497  }
00002e  bd70              POP      {r4-r6,pc}
                  |L275.48|
000030  200a              MOVS     r0,#0xa               ;12409
000032  b171              CBZ      r1,|L275.82|
000034  2901              CMP      r1,#1                 ;12405
000036  d015              BEQ      |L275.100|
000038  2902              CMP      r1,#2                 ;12405
00003a  d01c              BEQ      |L275.118|
00003c  2903              CMP      r1,#3                 ;12405
00003e  d1f6              BNE      |L275.46|
000040  1c76              ADDS     r6,r6,#1              ;12426
000042  b2f1              UXTB     r1,r6                 ;12426
000044  fbb1f3f0          UDIV     r3,r1,r0              ;12427
000048  fb001013          MLS      r0,r0,r3,r1           ;12427
00004c  f8820b49          STRB     r0,[r2,#0xb49]        ;12427
000050  bd70              POP      {r4-r6,pc}
                  |L275.82|
000052  1c5b              ADDS     r3,r3,#1              ;12408
000054  b2d9              UXTB     r1,r3                 ;12408
000056  fbb1f3f0          UDIV     r3,r1,r0              ;12409
00005a  fb001013          MLS      r0,r0,r3,r1           ;12409
00005e  f8820b46          STRB     r0,[r2,#0xb46]        ;12409
000062  bd70              POP      {r4-r6,pc}
                  |L275.100|
000064  1c64              ADDS     r4,r4,#1              ;12414
000066  b2e1              UXTB     r1,r4                 ;12414
000068  fbb1f3f0          UDIV     r3,r1,r0              ;12415
00006c  fb001013          MLS      r0,r0,r3,r1           ;12415
000070  f8820b47          STRB     r0,[r2,#0xb47]        ;12415
000074  bd70              POP      {r4-r6,pc}
                  |L275.118|
000076  1c6d              ADDS     r5,r5,#1              ;12420
000078  b2e9              UXTB     r1,r5                 ;12420
00007a  fbb1f3f0          UDIV     r3,r1,r0              ;12421
00007e  fb001013          MLS      r0,r0,r3,r1           ;12421
000082  f8820b48          STRB     r0,[r2,#0xb48]        ;12421
                  |L275.134|
000086  bd70              POP      {r4-r6,pc}
                  |L275.136|
000088  e000              B        |L275.140|
                  |L275.138|
00008a  e017              B        |L275.188|
                  |L275.140|
00008c  b11b              CBZ      r3,|L275.150|
00008e  1e5b              SUBS     r3,r3,#1              ;12449
000090  f8823b46          STRB     r3,[r2,#0xb46]        ;12449
000094  e7f7              B        |L275.134|
                  |L275.150|
000096  f8820b46          STRB     r0,[r2,#0xb46]        ;12444
00009a  e7f4              B        |L275.134|
                  |L275.156|
00009c  b11c              CBZ      r4,|L275.166|
00009e  1e64              SUBS     r4,r4,#1              ;12462
0000a0  f8824b47          STRB     r4,[r2,#0xb47]        ;12462
0000a4  e7ef              B        |L275.134|
                  |L275.166|
0000a6  f8820b47          STRB     r0,[r2,#0xb47]        ;12457
0000aa  e7ec              B        |L275.134|
                  |L275.172|
0000ac  b11d              CBZ      r5,|L275.182|
0000ae  1e6d              SUBS     r5,r5,#1              ;12475
0000b0  f8825b48          STRB     r5,[r2,#0xb48]        ;12475
0000b4  e7e7              B        |L275.134|
                  |L275.182|
0000b6  f8820b48          STRB     r0,[r2,#0xb48]        ;12470
0000ba  e7e4              B        |L275.134|
                  |L275.188|
0000bc  f8820b49          STRB     r0,[r2,#0xb49]        ;12483
0000c0  e7e1              B        |L275.134|
;;;12498  
                          ENDP

0000c2  0000              DCW      0x0000
                  |L275.196|
                          DCD      ||.bss||+0xb44

                          AREA ||i.DISPLAY_EntrePowerOnPassword||, CODE, READONLY, ALIGN=2

                  DISPLAY_EntrePowerOnPassword PROC
;;;12165  // 调整开机界面密码
;;;12166  void DISPLAY_EntrePowerOnPassword(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;12167  {
;;;12168  	uint16 password = 0;
;;;12169  	
;;;12170  	displayStateCB.menu.root.password.value++;
000002  491e              LDR      r1,|L276.124|
000004  f8b10b36          LDRH     r0,[r1,#0xb36]  ; displayStateCB
000008  1c40              ADDS     r0,r0,#1
00000a  b280              UXTH     r0,r0
00000c  f8a10b36          STRH     r0,[r1,#0xb36]
;;;12171  
;;;12172  	if (displayStateCB.menu.root.password.value > 3)
000010  2803              CMP      r0,#3
000012  d926              BLS      |L276.98|
;;;12173  	{
;;;12174  		displayStateCB.menu.root.password.value = 0;
000014  f6013136          ADD      r1,r1,#0xb36
000018  2200              MOVS     r2,#0
00001a  800a              STRH     r2,[r1,#0]
;;;12175  
;;;12176  		password = (displayStateCB.menu.root.password.number1*1000) + (displayStateCB.menu.root.password.number2*100)+
00001c  7948              LDRB     r0,[r1,#5]  ; displayStateCB
00001e  7a0b              LDRB     r3,[r1,#8]  ; displayStateCB
000020  eb000440          ADD      r4,r0,r0,LSL #1
000024  ebc410c0          RSB      r0,r4,r0,LSL #7
000028  eb0304c0          ADD      r4,r3,r0,LSL #3
00002c  798b              LDRB     r3,[r1,#6]  ; displayStateCB
00002e  2064              MOVS     r0,#0x64
000030  4343              MULS     r3,r0,r3
000032  79c8              LDRB     r0,[r1,#7]  ; displayStateCB
000034  f6a13136          SUB      r1,r1,#0xb36
000038  eb000080          ADD      r0,r0,r0,LSL #2
00003c  eb030040          ADD      r0,r3,r0,LSL #1
000040  4420              ADD      r0,r0,r4
000042  b280              UXTH     r0,r0
;;;12177  			(displayStateCB.menu.root.password.number3*10) + (displayStateCB.menu.root.password.number4*1);
;;;12178  		if ((password == PARAM_GetPowerOnPassword()) || (password == SUPER_MENU_PASSWORD))
000044  4b0e              LDR      r3,|L276.128|
000046  f8b342c8          LDRH     r4,[r3,#0x2c8]  ; paramCB
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L276.100|
00004e  f5a064a0          SUB      r4,r0,#0x500
000052  3c22              SUBS     r4,r4,#0x22
000054  d006              BEQ      |L276.100|
;;;12179  		{
;;;12180  			// 电子锁已连接发送开锁指令
;;;12181  			if (PARAM_GetLockConnectState())
;;;12182  			{
;;;12183  				BLE_HOST_PROTOCOL_SendCmdLockOpen(TRUE);
;;;12184  			}
;;;12185  		
;;;12186  			STATE_EnterState(STATE_RIDING);
;;;12187  		}
;;;12188  		else
;;;12189  		{
;;;12190  			displayStateCB.menu.root.password.number1=0;
000056  f601313b          ADD      r1,r1,#0xb3b
00005a  700a              STRB     r2,[r1,#0]
;;;12191  			displayStateCB.menu.root.password.number2=0;
00005c  704a              STRB     r2,[r1,#1]
;;;12192  			displayStateCB.menu.root.password.number3=0;
00005e  708a              STRB     r2,[r1,#2]
;;;12193  			displayStateCB.menu.root.password.number4=0;
000060  70ca              STRB     r2,[r1,#3]
                  |L276.98|
;;;12194  		}
;;;12195  	}
;;;12196  }
000062  bd10              POP      {r4,pc}
                  |L276.100|
000064  f893020f          LDRB     r0,[r3,#0x20f]        ;12181  ; paramCB
000068  b110              CBZ      r0,|L276.112|
00006a  2001              MOVS     r0,#1                 ;12183
00006c  f7fffffe          BL       BLE_HOST_PROTOCOL_SendCmdLockOpen
                  |L276.112|
000070  e8bd4010          POP      {r4,lr}               ;12186
000074  200b              MOVS     r0,#0xb               ;12186
000076  f7ffbffe          B.W      STATE_EnterState
;;;12197  
                          ENDP

00007a  0000              DCW      0x0000
                  |L276.124|
                          DCD      ||.bss||
                  |L276.128|
                          DCD      paramCB

                          AREA ||i.DISPLAY_EntrePowerOnPasswordLock||, CODE, READONLY, ALIGN=2

                  DISPLAY_EntrePowerOnPasswordLock PROC
;;;12271  // 倒计时
;;;12272  void DISPLAY_EntrePowerOnPasswordLock(uint32 param)
000000  b570              PUSH     {r4-r6,lr}
;;;12273  {
;;;12274  	displayStateCB.menu.root.password.CountDown--;
000002  4a12              LDR      r2,|L277.76|
000004  f8920b38          LDRB     r0,[r2,#0xb38]  ; displayStateCB
000008  1e40              SUBS     r0,r0,#1
00000a  b2c1              UXTB     r1,r0
00000c  f8821b38          STRB     r1,[r2,#0xb38]
;;;12275  
;;;12276  	// 电子锁连接后
;;;12277  	if (PARAM_GetLockConnectState())
000010  4c0f              LDR      r4,|L277.80|
;;;12278  	{
;;;12279  		displayStateCB.menu.root.password.CountDown = 0;
;;;12280  
;;;12281  		STATE_EnterState(stateCB.state);
000012  4810              LDR      r0,|L277.84|
000014  2300              MOVS     r3,#0                 ;12277
000016  f894520f          LDRB     r5,[r4,#0x20f]        ;12277  ; paramCB
00001a  7800              LDRB     r0,[r0,#0]
00001c  2d00              CMP      r5,#0                 ;12277
00001e  d008              BEQ      |L277.50|
000020  f8823b38          STRB     r3,[r2,#0xb38]        ;12279
000024  f7fffffe          BL       STATE_EnterState
;;;12282  
;;;12283  		TIMER_KillTask(TIMER_ID_STATE_CONTROL);
000028  e8bd4070          POP      {r4-r6,lr}
00002c  2000              MOVS     r0,#0
00002e  f7ffbffe          B.W      TIMER_KillTask
                  |L277.50|
;;;12284  
;;;12285  		return;
;;;12286  	}
;;;12287  
;;;12288  	if (!displayStateCB.menu.root.password.CountDown)
000032  2900              CMP      r1,#0
000034  d108              BNE      |L277.72|
;;;12289  	{
;;;12290  		// 电子锁不再进行连接
;;;12291  		PARAM_SetLockPairState(FALSE);
000036  f88432f7          STRB     r3,[r4,#0x2f7]
;;;12292  		STATE_EnterState(stateCB.state);
00003a  f7fffffe          BL       STATE_EnterState
;;;12293  
;;;12294  		TIMER_KillTask(TIMER_ID_STATE_CONTROL);
00003e  e8bd4070          POP      {r4-r6,lr}
000042  2000              MOVS     r0,#0
000044  f7ffbffe          B.W      TIMER_KillTask
                  |L277.72|
;;;12295  	}
;;;12296  }
000048  bd70              POP      {r4-r6,pc}
;;;12297  
                          ENDP

00004a  0000              DCW      0x0000
                  |L277.76|
                          DCD      ||.bss||
                  |L277.80|
                          DCD      paramCB
                  |L277.84|
                          DCD      stateCB

                          AREA ||i.DISPLAY_EntrePowerOnPasswordNum||, CODE, READONLY, ALIGN=2

                  DISPLAY_EntrePowerOnPasswordNum PROC
;;;12298  // 调整开机界面密码
;;;12299  void DISPLAY_EntrePowerOnPasswordNum(uint32 param)
000000  b570              PUSH     {r4-r6,lr}
;;;12300  {
;;;12301  	// +
;;;12302  	if (DISPLAY_MENU_TUNE_PREVIOUS == param)
;;;12303  	{
;;;12304  		switch (displayStateCB.menu.root.password.value)
000002  4a30              LDR      r2,|L278.196|
000004  2801              CMP      r0,#1                 ;12302
000006  8811              LDRH     r1,[r2,#0]
;;;12305  		{
;;;12306  			case 0:
;;;12307  				displayStateCB.menu.root.password.number1++;
000008  7953              LDRB     r3,[r2,#5]
;;;12308  				displayStateCB.menu.root.password.number1%=10;
;;;12309  				
;;;12310  				break;
;;;12311  
;;;12312  			case 1:
;;;12313  				displayStateCB.menu.root.password.number2++;
00000a  7994              LDRB     r4,[r2,#6]
;;;12314  				displayStateCB.menu.root.password.number2%=10;
;;;12315  				
;;;12316  				break;
;;;12317  
;;;12318  			case 2:
;;;12319  				displayStateCB.menu.root.password.number3++;
00000c  79d5              LDRB     r5,[r2,#7]
;;;12320  				displayStateCB.menu.root.password.number3%=10;
;;;12321  				
;;;12322  				break;
;;;12323  
;;;12324  			case 3:
;;;12325  				displayStateCB.menu.root.password.number4++;
00000e  7a16              LDRB     r6,[r2,#8]
000010  f6a23236          SUB      r2,r2,#0xb36
000014  d00c              BEQ      |L278.48|
;;;12326  				displayStateCB.menu.root.password.number4%=10;
;;;12327  				
;;;12328  				break;
;;;12329  
;;;12330  			default:
;;;12331  				break;
;;;12332  		}
;;;12333  
;;;12334  	}
;;;12335  	// -
;;;12336  	else
;;;12337  	{
;;;12338  		switch (displayStateCB.menu.root.password.value)
;;;12339  		{
;;;12340  			case 0:
;;;12341  				if (0 == displayStateCB.menu.root.password.number1)
;;;12342  				{
;;;12343  					displayStateCB.menu.root.password.number1=9;
000016  2009              MOVS     r0,#9
000018  b3b1              CBZ      r1,|L278.136|
00001a  2901              CMP      r1,#1                 ;12338
00001c  d03e              BEQ      |L278.156|
00001e  2902              CMP      r1,#2                 ;12338
000020  d044              BEQ      |L278.172|
000022  2903              CMP      r1,#3                 ;12338
000024  d103              BNE      |L278.46|
;;;12344  					break;
;;;12345  				}
;;;12346  				else
;;;12347  				{
;;;12348  					displayStateCB.menu.root.password.number1--;
;;;12349  				}
;;;12350  
;;;12351  				break;
;;;12352  
;;;12353  			case 1:
;;;12354  				if (0 == displayStateCB.menu.root.password.number2)
;;;12355  				{
;;;12356  					displayStateCB.menu.root.password.number2=9;
;;;12357  					break;
;;;12358  				}
;;;12359  				else
;;;12360  				{
;;;12361  					displayStateCB.menu.root.password.number2--;
;;;12362  				}
;;;12363  				
;;;12364  				break;
;;;12365  
;;;12366  			case 2:
;;;12367  				if (0 == displayStateCB.menu.root.password.number3)
;;;12368  				{
;;;12369  					displayStateCB.menu.root.password.number3=9;
;;;12370  					break;
;;;12371  				}
;;;12372  				else
;;;12373  				{
;;;12374  					displayStateCB.menu.root.password.number3--;
;;;12375  				}
;;;12376  				
;;;12377  				break;
;;;12378  
;;;12379  			case 3:
;;;12380  				if (0 == displayStateCB.menu.root.password.number4)
000026  b386              CBZ      r6,|L278.138|
;;;12381  				{
;;;12382  					displayStateCB.menu.root.password.number4=9;
;;;12383  					break;
;;;12384  				}
;;;12385  				else
;;;12386  				{
;;;12387  					displayStateCB.menu.root.password.number4--;
000028  1e76              SUBS     r6,r6,#1
00002a  f8826b3e          STRB     r6,[r2,#0xb3e]
                  |L278.46|
;;;12388  				}
;;;12389  				
;;;12390  				break;
;;;12391  
;;;12392  			default:
;;;12393  				break;
;;;12394  		}
;;;12395  	}
;;;12396  }
00002e  bd70              POP      {r4-r6,pc}
                  |L278.48|
000030  200a              MOVS     r0,#0xa               ;12308
000032  b171              CBZ      r1,|L278.82|
000034  2901              CMP      r1,#1                 ;12304
000036  d015              BEQ      |L278.100|
000038  2902              CMP      r1,#2                 ;12304
00003a  d01c              BEQ      |L278.118|
00003c  2903              CMP      r1,#3                 ;12304
00003e  d1f6              BNE      |L278.46|
000040  1c76              ADDS     r6,r6,#1              ;12325
000042  b2f1              UXTB     r1,r6                 ;12325
000044  fbb1f3f0          UDIV     r3,r1,r0              ;12326
000048  fb001013          MLS      r0,r0,r3,r1           ;12326
00004c  f8820b3e          STRB     r0,[r2,#0xb3e]        ;12326
000050  bd70              POP      {r4-r6,pc}
                  |L278.82|
000052  1c5b              ADDS     r3,r3,#1              ;12307
000054  b2d9              UXTB     r1,r3                 ;12307
000056  fbb1f3f0          UDIV     r3,r1,r0              ;12308
00005a  fb001013          MLS      r0,r0,r3,r1           ;12308
00005e  f8820b3b          STRB     r0,[r2,#0xb3b]        ;12308
000062  bd70              POP      {r4-r6,pc}
                  |L278.100|
000064  1c64              ADDS     r4,r4,#1              ;12313
000066  b2e1              UXTB     r1,r4                 ;12313
000068  fbb1f3f0          UDIV     r3,r1,r0              ;12314
00006c  fb001013          MLS      r0,r0,r3,r1           ;12314
000070  f8820b3c          STRB     r0,[r2,#0xb3c]        ;12314
000074  bd70              POP      {r4-r6,pc}
                  |L278.118|
000076  1c6d              ADDS     r5,r5,#1              ;12319
000078  b2e9              UXTB     r1,r5                 ;12319
00007a  fbb1f3f0          UDIV     r3,r1,r0              ;12320
00007e  fb001013          MLS      r0,r0,r3,r1           ;12320
000082  f8820b3d          STRB     r0,[r2,#0xb3d]        ;12320
                  |L278.134|
000086  bd70              POP      {r4-r6,pc}
                  |L278.136|
000088  e000              B        |L278.140|
                  |L278.138|
00008a  e017              B        |L278.188|
                  |L278.140|
00008c  b11b              CBZ      r3,|L278.150|
00008e  1e5b              SUBS     r3,r3,#1              ;12348
000090  f8823b3b          STRB     r3,[r2,#0xb3b]        ;12348
000094  e7f7              B        |L278.134|
                  |L278.150|
000096  f8820b3b          STRB     r0,[r2,#0xb3b]        ;12343
00009a  e7f4              B        |L278.134|
                  |L278.156|
00009c  b11c              CBZ      r4,|L278.166|
00009e  1e64              SUBS     r4,r4,#1              ;12361
0000a0  f8824b3c          STRB     r4,[r2,#0xb3c]        ;12361
0000a4  e7ef              B        |L278.134|
                  |L278.166|
0000a6  f8820b3c          STRB     r0,[r2,#0xb3c]        ;12356
0000aa  e7ec              B        |L278.134|
                  |L278.172|
0000ac  b11d              CBZ      r5,|L278.182|
0000ae  1e6d              SUBS     r5,r5,#1              ;12374
0000b0  f8825b3d          STRB     r5,[r2,#0xb3d]        ;12374
0000b4  e7e7              B        |L278.134|
                  |L278.182|
0000b6  f8820b3d          STRB     r0,[r2,#0xb3d]        ;12369
0000ba  e7e4              B        |L278.134|
                  |L278.188|
0000bc  f8820b3e          STRB     r0,[r2,#0xb3e]        ;12382
0000c0  e7e1              B        |L278.134|
;;;12397  
                          ENDP

0000c2  0000              DCW      0x0000
                  |L278.196|
                          DCD      ||.bss||+0xb36

                          AREA ||i.DISPLAY_Init||, CODE, READONLY, ALIGN=2

                  DISPLAY_Init PROC
;;;9519   **********************************************************************/
;;;9520   void DISPLAY_Init(void)
000000  b510              PUSH     {r4,lr}
;;;9521   {
;;;9522   	uint8 i = 0;
000002  2100              MOVS     r1,#0
;;;9523   
;;;9524   	// 初始化读数为无效值
;;;9525   	for ( i = 0; i < DISPLAY_MAX; i++)
000004  2300              MOVS     r3,#0
;;;9526   	{
;;;9527   		displayStateCB.dispCtrl[i].enable 		= FALSE;
000006  48fe              LDR      r0,|L279.1024|
;;;9528   		displayStateCB.dispCtrl[i].param 		  = UINT32_NULL;
000008  1e4c              SUBS     r4,r1,#1
                  |L279.10|
00000a  eb001201          ADD      r2,r0,r1,LSL #4       ;9527
00000e  7013              STRB     r3,[r2,#0]            ;9527
000010  6054              STR      r4,[r2,#4]
;;;9529   		displayStateCB.dispCtrl[i].lastParam 	= UINT32_NULL;
000012  6094              STR      r4,[r2,#8]
;;;9530   		displayStateCB.dispCtrl[i].pService		= NULL;
000014  60d3              STR      r3,[r2,#0xc]
000016  1c49              ADDS     r1,r1,#1              ;9525
000018  b2c9              UXTB     r1,r1                 ;9525
00001a  29b3              CMP      r1,#0xb3              ;9525
00001c  d3f5              BCC      |L279.10|
;;;9531   	}
;;;9532   
;;;9533   	// 函数映射
;;;9534   	// 通用界面
;;;9535   	displayStateCB.dispCtrl[DISPLAY_COMMON_TIME].pService = DISPLAY_DrawCommonTime;
00001e  49f9              LDR      r1,|L279.1028|
000020  f8c010ac          STR      r1,[r0,#0xac]  ; displayStateCB
;;;9536   	displayStateCB.dispCtrl[DISPLAY_COMMON_TIME1].pService = DISPLAY_DrawCommonTime1;
000024  49f8              LDR      r1,|L279.1032|
000026  f8c010bc          STR      r1,[r0,#0xbc]  ; displayStateCB
;;;9537   		
;;;9538   	displayStateCB.dispCtrl[DISPLAY_COMMON_BATTARY].pService = DISPLAY_DrawCommonBattery;
00002a  49f8              LDR      r1,|L279.1036|
00002c  f8c010cc          STR      r1,[r0,#0xcc]  ; displayStateCB
;;;9539   	displayStateCB.dispCtrl[DISPLAY_COMMON_CRUISE].pService = DISPLAY_DrawCommonCurise;
000030  49f7              LDR      r1,|L279.1040|
000032  f8c0111c          STR      r1,[r0,#0x11c]  ; displayStateCB
;;;9540   	displayStateCB.dispCtrl[DISPLAY_COMMON_BLUE_STATE].pService = DISPLAY_DrawCommonRecordState;
000036  49f7              LDR      r1,|L279.1044|
000038  f8c010dc          STR      r1,[r0,#0xdc]  ; displayStateCB
;;;9541   	displayStateCB.dispCtrl[DISPLAY_COMMON_ERROR].pService = DISPLAY_DrawCommonError;
00003c  49f6              LDR      r1,|L279.1048|
00003e  f8c0110c          STR      r1,[r0,#0x10c]  ; displayStateCB
;;;9542   	displayStateCB.dispCtrl[DISPLAY_COMMON_LIGHT].pService = DISPLAY_DrawCommonLight;
000042  49f6              LDR      r1,|L279.1052|
000044  f8c010fc          STR      r1,[r0,#0xfc]  ; displayStateCB
;;;9543   	//displayStateCB.dispCtrl[DISPLAY_COMMON_CALL].pService = DISPLAY_DrawCommonCall;
;;;9544   //	displayStateCB.dispCtrl[DISPLAY_COMMON_SIGNAL_4G].pService = DISPLAY_DrawCommonSignl4G;
;;;9545   //	displayStateCB.dispCtrl[DISPLAY_COMMON_SIGNAL_GPS].pService = DISPLAY_DrawCommonSignlGPS;
;;;9546   	displayStateCB.dispCtrl[DISPLAY_COMMON_BATTARY_HELMET].pService = DISPLAY_DrawCommonHelmetBat;
000048  49f5              LDR      r1,|L279.1056|
00004a  f8c0114c          STR      r1,[r0,#0x14c]  ; displayStateCB
;;;9547   	displayStateCB.dispCtrl[DISPLAY_COMMON_VIDEO].pService = DISPLAY_DrawCommonVideo;
00004e  49f5              LDR      r1,|L279.1060|
000050  f8c0115c          STR      r1,[r0,#0x15c]  ; displayStateCB
;;;9548   	displayStateCB.dispCtrl[DISPLAY_COMMON_PHOTO].pService = DISPLAY_DrawCommonPhoto;
000054  49f4              LDR      r1,|L279.1064|
000056  f8c0116c          STR      r1,[r0,#0x16c]  ; displayStateCB
;;;9549   	displayStateCB.dispCtrl[DISPLAY_COMMON_VOICE].pService = DISPLAY_DrawCommonVoice;
00005a  49f4              LDR      r1,|L279.1068|
00005c  f8c0117c          STR      r1,[r0,#0x17c]  ; displayStateCB
;;;9550   	displayStateCB.dispCtrl[DISPLAY_COMMON_MUSIC_PLAY].pService = DISPLAY_DrawCommonMusicPlay;
000060  49f3              LDR      r1,|L279.1072|
000062  f8c0118c          STR      r1,[r0,#0x18c]  ; displayStateCB
;;;9551   	displayStateCB.dispCtrl[DISPLAY_COMMON_TURN].pService = DISPLAY_DrawCommonTurn;
000066  49f3              LDR      r1,|L279.1076|
000068  f8c0119c          STR      r1,[r0,#0x19c]  ; displayStateCB
;;;9552   	
;;;9553   	// 通用界面
;;;9554   	displayStateCB.dispCtrl[DISPLAY_BLE_UPDATA].pService = DISPLAY_DrawBlueUpdata;
00006c  49f2              LDR      r1,|L279.1080|
00006e  62c1              STR      r1,[r0,#0x2c]  ; displayStateCB
;;;9555   	displayStateCB.dispCtrl[DISPLAY_POWER_ON].pService = DISPLAY_DrawPowerOn;
000070  49f2              LDR      r1,|L279.1084|
000072  60c1              STR      r1,[r0,#0xc]  ; displayStateCB
;;;9556   	displayStateCB.dispCtrl[DISPLAY_POWER_OFF].pService = DISPLAY_DrawPowerOff;
000074  49f2              LDR      r1,|L279.1088|
000076  61c1              STR      r1,[r0,#0x1c]  ; displayStateCB
;;;9557   	displayStateCB.dispCtrl[DISPLAY_STATUS_BAR].pService = DISPLAY_DrawCommonStatusBar;
000078  49f2              LDR      r1,|L279.1092|
00007a  63c1              STR      r1,[r0,#0x3c]  ; displayStateCB
;;;9558   
;;;9559   	// Riding界面
;;;9560   	displayStateCB.dispCtrl[DISPLAY_RID_BG].pService = DISPLAY_DrawRidingBg;
00007c  49f2              LDR      r1,|L279.1096|
00007e  64c1              STR      r1,[r0,#0x4c]  ; displayStateCB
;;;9561   	displayStateCB.dispCtrl[DISPLAY_RID_SPEED].pService = DISPLAY_DrawRidingSpeed;
000080  49f2              LDR      r1,|L279.1100|
000082  f8c011fc          STR      r1,[r0,#0x1fc]  ; displayStateCB
;;;9562   	displayStateCB.dispCtrl[DISPLAY_RID_SPEED_UNIT].pService = DISPLAY_DrawRidingSpeedUnit;
000086  49f2              LDR      r1,|L279.1104|
000088  f8c0120c          STR      r1,[r0,#0x20c]  ; displayStateCB
;;;9563   	displayStateCB.dispCtrl[DISPLAY_RID_ASSIST].pService = DISPLAY_DrawRidingAssist;
00008c  49f1              LDR      r1,|L279.1108|
00008e  f8c0121c          STR      r1,[r0,#0x21c]  ; displayStateCB
;;;9564   	displayStateCB.dispCtrl[DISPLAY_RID_BATTARY].pService = DISPLAY_DrawRidingBattery;
000092  49f1              LDR      r1,|L279.1112|
000094  f8c0122c          STR      r1,[r0,#0x22c]  ; displayStateCB
;;;9565   	displayStateCB.dispCtrl[DISPLAY_RID_MOTOR_POWER].pService = DISPLAY_DrawRidingMotorPower;	
000098  49f0              LDR      r1,|L279.1116|
00009a  f8c011ec          STR      r1,[r0,#0x1ec]  ; displayStateCB
;;;9566   	displayStateCB.dispCtrl[DISPLAY_RID_CRUISE].pService = DISPLAY_DrawRidingCruise;
00009e  49f0              LDR      r1,|L279.1120|
0000a0  f8c0123c          STR      r1,[r0,#0x23c]  ; displayStateCB
;;;9567   	displayStateCB.dispCtrl[DISPLAY_RID_CALL_NUMBER].pService = DISPLAY_DrawRidingCallNum;
0000a4  49ef              LDR      r1,|L279.1124|
0000a6  f8c0124c          STR      r1,[r0,#0x24c]  ; displayStateCB
;;;9568   
;;;9569   	// 来电界面
;;;9570   	displayStateCB.dispCtrl[DISPLAY_PHONE_BG].pService = DISPLAY_DrawPhoneBg;
0000aa  49ef              LDR      r1,|L279.1128|
0000ac  f8c011ac          STR      r1,[r0,#0x1ac]  ; displayStateCB
;;;9571   	displayStateCB.dispCtrl[DISPLAY_PHONE_NUMBER].pService = DISPLAY_DrawPhoneNumber;
0000b0  49ee              LDR      r1,|L279.1132|
0000b2  f8c011bc          STR      r1,[r0,#0x1bc]  ; displayStateCB
;;;9572   	
;;;9573   	// monitor界面
;;;9574   	displayStateCB.dispCtrl[DISPLAY_MON_BG].pService = DISPLAY_DrawMonitorBg;
0000b6  49ee              LDR      r1,|L279.1136|
0000b8  65c1              STR      r1,[r0,#0x5c]  ; displayStateCB
;;;9575   	
;;;9576   	displayStateCB.dispCtrl[DISPLAY_MON_TRIP_TITILE].pService = DISPLAY_DrawMonitorTripTitile;
0000ba  49ee              LDR      r1,|L279.1140|
0000bc  f8c0125c          STR      r1,[r0,#0x25c]  ; displayStateCB
;;;9577   	displayStateCB.dispCtrl[DISPLAY_MON_TRIP].pService = DISPLAY_DrawMonitorTrip;
0000c0  49ed              LDR      r1,|L279.1144|
0000c2  f8c0126c          STR      r1,[r0,#0x26c]  ; displayStateCB
;;;9578   	displayStateCB.dispCtrl[DISPLAY_MON_TRIP_UNIT].pService = DISPLAY_DrawMonitorTripUnit;
0000c6  49ed              LDR      r1,|L279.1148|
0000c8  f8c0127c          STR      r1,[r0,#0x27c]  ; displayStateCB
;;;9579   
;;;9580   	displayStateCB.dispCtrl[DISPLAY_MON_ODO_TITILE].pService = DISPLAY_DrawMonitorOdoTitile;
0000cc  49ec              LDR      r1,|L279.1152|
0000ce  f8c0128c          STR      r1,[r0,#0x28c]  ; displayStateCB
;;;9581   	displayStateCB.dispCtrl[DISPLAY_MON_ODO].pService = DISPLAY_DrawMonitorOdo;
0000d2  49ec              LDR      r1,|L279.1156|
0000d4  f8c0129c          STR      r1,[r0,#0x29c]  ; displayStateCB
;;;9582   	displayStateCB.dispCtrl[DISPLAY_MON_ODO_UNIT].pService = DISPLAY_DrawMonitorOdoUnit;
0000d8  49eb              LDR      r1,|L279.1160|
0000da  f8c012ac          STR      r1,[r0,#0x2ac]  ; displayStateCB
;;;9583   
;;;9584   	displayStateCB.dispCtrl[DISPALY_MON_RIDING_TIME_TITILE].pService = DISPLAY_DrawMonitorRidingTimeTitile;
0000de  49eb              LDR      r1,|L279.1164|
0000e0  f8c012bc          STR      r1,[r0,#0x2bc]  ; displayStateCB
;;;9585   	displayStateCB.dispCtrl[DISPALY_MON_RIDING_TIME].pService = DISPLAY_DrawMonitorRidingTime;
0000e4  49ea              LDR      r1,|L279.1168|
0000e6  f8c012cc          STR      r1,[r0,#0x2cc]  ; displayStateCB
;;;9586   	
;;;9587   	displayStateCB.dispCtrl[DISPLAY_MON_CALORIE_TITILE].pService = DISPLAY_DrawMonitorCalorieTitile;
0000ea  49ea              LDR      r1,|L279.1172|
0000ec  f8c012dc          STR      r1,[r0,#0x2dc]  ; displayStateCB
;;;9588   	displayStateCB.dispCtrl[DISPLAY_MON_CALORIE].pService = DISPLAY_DrawMonitorCalorie;
0000f0  49e9              LDR      r1,|L279.1176|
0000f2  f8c012ec          STR      r1,[r0,#0x2ec]  ; displayStateCB
;;;9589   	displayStateCB.dispCtrl[DISPLAY_MON_CALORIE_UNIT].pService = DISPLAY_DrawMonitorCalorieUnit;
0000f6  49e9              LDR      r1,|L279.1180|
0000f8  f8c012fc          STR      r1,[r0,#0x2fc]  ; displayStateCB
;;;9590   	
;;;9591   	// Tour界面
;;;9592   	displayStateCB.dispCtrl[DISPLAY_TOUR_BG].pService = DISPLAY_DrawTourBg;
0000fc  49e8              LDR      r1,|L279.1184|
0000fe  66c1              STR      r1,[r0,#0x6c]  ; displayStateCB
;;;9593   	
;;;9594   	displayStateCB.dispCtrl[DISPLAY_TOUR_AVG_SPEED_TITILE].pService = DISPLAY_DrawTourAvgSpeedTitile;
000100  49e8              LDR      r1,|L279.1188|
000102  f8c0130c          STR      r1,[r0,#0x30c]  ; displayStateCB
;;;9595   	displayStateCB.dispCtrl[DISPLAY_TOUR_AVG_SPEED].pService = DISPLAY_DrawTourAvgSpeed;
000106  49e8              LDR      r1,|L279.1192|
000108  f8c0131c          STR      r1,[r0,#0x31c]  ; displayStateCB
;;;9596   	displayStateCB.dispCtrl[DISPLAY_TOUR_AVG_SPEED_UNIT].pService = DISPLAY_DrawTourAvgSpeedUnit;
00010c  49e7              LDR      r1,|L279.1196|
00010e  f8c0132c          STR      r1,[r0,#0x32c]  ; displayStateCB
;;;9597   	
;;;9598   	displayStateCB.dispCtrl[DISPLAY_TOUR_MAX_SPEED_TITILE].pService = DISPLAY_DrawTourMaxSpeedTitile;
000112  49e7              LDR      r1,|L279.1200|
000114  f8c0133c          STR      r1,[r0,#0x33c]  ; displayStateCB
;;;9599   	displayStateCB.dispCtrl[DISPLAY_TOUR_MAX_SPEED].pService = DISPLAY_DrawTourMaxSpeed;
000118  49e6              LDR      r1,|L279.1204|
00011a  f8c0134c          STR      r1,[r0,#0x34c]  ; displayStateCB
;;;9600   	displayStateCB.dispCtrl[DISPLAY_TOUR_MAX_SPEED_UNIT].pService = DISPLAY_DrawTourMaxSpeedUnit;
00011e  49e6              LDR      r1,|L279.1208|
000120  f8c0135c          STR      r1,[r0,#0x35c]  ; displayStateCB
;;;9601   	
;;;9602   	displayStateCB.dispCtrl[DISPLAY_TOUR_CO2_AVOIDED_TITILE].pService = DISPLAY_DrawTourSingleReduceCO2Titile;
000124  49e5              LDR      r1,|L279.1212|
000126  f8c0136c          STR      r1,[r0,#0x36c]  ; displayStateCB
;;;9603   	displayStateCB.dispCtrl[DISPLAY_TOUR_CO2_AVOIDED].pService = DISPLAY_DrawTourSingleReduceCO2;
00012a  49e5              LDR      r1,|L279.1216|
00012c  f8c0137c          STR      r1,[r0,#0x37c]  ; displayStateCB
;;;9604   	displayStateCB.dispCtrl[DISPLAY_TOUR_CO2_AVOIDED_UNIT].pService = DISPLAY_DrawTourSingleReduceCO2Unit;
000130  49e4              LDR      r1,|L279.1220|
000132  f8c0138c          STR      r1,[r0,#0x38c]  ; displayStateCB
;;;9605   
;;;9606   	displayStateCB.dispCtrl[DISPLAY_TOUR_TREES_SAVED_TITILE].pService = DISPLAY_DrawTourSingleSaveTreeTitile;
000136  49e4              LDR      r1,|L279.1224|
000138  f8c0139c          STR      r1,[r0,#0x39c]  ; displayStateCB
;;;9607   	displayStateCB.dispCtrl[DISPLAY_TOUR_TREES_SAVED].pService = DISPLAY_DrawTourSingleSaveTree;
00013c  49e3              LDR      r1,|L279.1228|
00013e  f8c013ac          STR      r1,[r0,#0x3ac]  ; displayStateCB
;;;9608   	displayStateCB.dispCtrl[DISPLAY_TOUR_TREES_SAVED_UNIT].pService = DISPLAY_DrawTourSingleSaveTreeUnit;
000142  49e3              LDR      r1,|L279.1232|
000144  f8c013bc          STR      r1,[r0,#0x3bc]  ; displayStateCB
;;;9609   
;;;9610   	// 导航
;;;9611   	displayStateCB.dispCtrl[DISPLAY_NAV_BG].pService = DISPLAY_DrawNavBg;
000148  49e2              LDR      r1,|L279.1236|
00014a  f8c013cc          STR      r1,[r0,#0x3cc]  ; displayStateCB
;;;9612   	displayStateCB.dispCtrl[DISPLAY_NAV_SPEED].pService = DISPLAY_DrawNavSpeed;
00014e  49e2              LDR      r1,|L279.1240|
000150  f8c013dc          STR      r1,[r0,#0x3dc]  ; displayStateCB
;;;9613   	displayStateCB.dispCtrl[DISPLAY_NAV_SPEED_UNIT].pService = DISPLAY_DrawNavSpeedUnit;
000154  49e1              LDR      r1,|L279.1244|
000156  f8c013ec          STR      r1,[r0,#0x3ec]  ; displayStateCB
;;;9614   	displayStateCB.dispCtrl[DISPLAY_NAV_DIRECTION].pService = DISPLAY_DrawNavDirection;
00015a  49e1              LDR      r1,|L279.1248|
00015c  f8c013fc          STR      r1,[r0,#0x3fc]  ; displayStateCB
;;;9615   	displayStateCB.dispCtrl[DISPLAY_NAV_DISTANCE_UNIT].pService = DISPLAY_DrawNavDistanceAndUnit;
000160  49e0              LDR      r1,|L279.1252|
000162  f8c0140c          STR      r1,[r0,#0x40c]  ; displayStateCB
;;;9616   	displayStateCB.dispCtrl[DISPLAY_NAV_DISTANCE_TIME].pService = DISPLAY_DrawNavDistanceTime;
000166  49e0              LDR      r1,|L279.1256|
000168  f8c0141c          STR      r1,[r0,#0x41c]  ; displayStateCB
;;;9617   	
;;;9618   	// Menu界面
;;;9619   	displayStateCB.dispCtrl[DISPLAY_MENU_BG].pService = DISPLAY_DrawMenuBg;
00016c  49df              LDR      r1,|L279.1260|
00016e  67c1              STR      r1,[r0,#0x7c]  ; displayStateCB
;;;9620   
;;;9621   	displayStateCB.dispCtrl[DISPLAY_MENU_TITILE1].pService = DISPLAY_DrawMenuTitle1;
000170  49df              LDR      r1,|L279.1264|
000172  f8c0146c          STR      r1,[r0,#0x46c]  ; displayStateCB
;;;9622   	displayStateCB.dispCtrl[DISPLAY_MENU_TITILE2].pService = DISPLAY_DrawMenuTitle2;
000176  49df              LDR      r1,|L279.1268|
000178  f8c0147c          STR      r1,[r0,#0x47c]  ; displayStateCB
;;;9623   	displayStateCB.dispCtrl[DISPLAY_MENU_TITILE3].pService = DISPLAY_DrawMenuTitle3;
00017c  49de              LDR      r1,|L279.1272|
00017e  f8c0148c          STR      r1,[r0,#0x48c]  ; displayStateCB
;;;9624   	displayStateCB.dispCtrl[DISPLAY_MENU_TITILE4].pService = DISPLAY_DrawMenuTitle4;
000182  49de              LDR      r1,|L279.1276|
000184  f8c0149c          STR      r1,[r0,#0x49c]  ; displayStateCB
;;;9625   	
;;;9626   	displayStateCB.dispCtrl[DISPLAY_MENU_CLEAR_TRIP].pService = DISPLAY_DrawMenuClearData;
000188  49dd              LDR      r1,|L279.1280|
00018a  f8c014ac          STR      r1,[r0,#0x4ac]  ; displayStateCB
;;;9627   	displayStateCB.dispCtrl[DISPLAY_MENU_DISPLAY_UNIT].pService = DISPLAY_DrawMenuDisplayUnit;
00018e  49dd              LDR      r1,|L279.1284|
000190  f8c014bc          STR      r1,[r0,#0x4bc]  ; displayStateCB
;;;9628   	displayStateCB.dispCtrl[DISPLAY_MENU_BACKLIGHT].pService = DISPLAY_DrawMenuBackLight;
000194  49dc              LDR      r1,|L279.1288|
000196  f8c014cc          STR      r1,[r0,#0x4cc]  ; displayStateCB
;;;9629   	displayStateCB.dispCtrl[DISPLAY_MENU_POWEROFF_TIME].pService = DISPLAY_DrawMenuPowerOff;
00019a  49dc              LDR      r1,|L279.1292|
00019c  f8c014dc          STR      r1,[r0,#0x4dc]  ; displayStateCB
;;;9630   	displayStateCB.dispCtrl[DISPLAY_MENU_AUTO_LIGHT].pService = DISPLAY_DrawMenuAutoLight;
0001a0  49db              LDR      r1,|L279.1296|
0001a2  f8c014ec          STR      r1,[r0,#0x4ec]  ; displayStateCB
;;;9631   	displayStateCB.dispCtrl[DISPLAY_MENU_SPEED_LIMIT].pService = DISPLAY_DrawMenuSpeedLimit;
0001a6  49db              LDR      r1,|L279.1300|
0001a8  f8c014fc          STR      r1,[r0,#0x4fc]  ; displayStateCB
;;;9632   	displayStateCB.dispCtrl[DISPLAY_MENU_USER_PASSWORD].pService = DISPLAY_DrawMenuUserPassword;
0001ac  49da              LDR      r1,|L279.1304|
0001ae  f8c0150c          STR      r1,[r0,#0x50c]  ; displayStateCB
;;;9633   	displayStateCB.dispCtrl[DISPLAY_MENU_SYSTEM_INFO].pService = DISPLAY_DrawMenuSystemInfo;
0001b2  49da              LDR      r1,|L279.1308|
0001b4  f8c0151c          STR      r1,[r0,#0x51c]  ; displayStateCB
;;;9634   	displayStateCB.dispCtrl[DISPLAY_MENU_SET_TIME].pService = DISPLAY_DrawMenuSetTime;
0001b8  49d9              LDR      r1,|L279.1312|
0001ba  f8c0152c          STR      r1,[r0,#0x52c]  ; displayStateCB
;;;9635   	displayStateCB.dispCtrl[DISPLAY_MENU_CONNECT].pService = DISPLAY_DrawMenuConnectToApp;
0001be  49d9              LDR      r1,|L279.1316|
0001c0  f8c0153c          STR      r1,[r0,#0x53c]  ; displayStateCB
;;;9636   	displayStateCB.dispCtrl[DISPLAY_MENU_BACK].pService = DISPLAY_DrawMenuBackIcon;
0001c4  49d8              LDR      r1,|L279.1320|
0001c6  f8c0154c          STR      r1,[r0,#0x54c]  ; displayStateCB
;;;9637   	
;;;9638   	// 错码代码界面	
;;;9639   	displayStateCB.dispCtrl[DISPLAY_MENU_ERROR_TITLE].pService = DISPLAY_DrawMenuErrorTitle;
0001ca  49d8              LDR      r1,|L279.1324|
0001cc  f8c0142c          STR      r1,[r0,#0x42c]  ; displayStateCB
;;;9640   	displayStateCB.dispCtrl[DISPLAY_MENU_ERROR].pService = DISPLAY_DrawMenuError;
0001d0  49d7              LDR      r1,|L279.1328|
0001d2  f8c0143c          STR      r1,[r0,#0x43c]  ; displayStateCB
;;;9641   
;;;9642   	// 设防
;;;9643   	displayStateCB.dispCtrl[DISPLAY_MENU_LOCKED].pService = DISPLAY_DrawMenuLock;
0001d6  49d7              LDR      r1,|L279.1332|
0001d8  f8c0144c          STR      r1,[r0,#0x44c]  ; displayStateCB
;;;9644   
;;;9645   	// 设置OK
;;;9646   	displayStateCB.dispCtrl[DISPLAY_MENU_OK].pService = DISPLAY_DrawMenuOk;
0001dc  49d6              LDR      r1,|L279.1336|
0001de  f8c0145c          STR      r1,[r0,#0x45c]  ; displayStateCB
;;;9647   
;;;9648   	// 高级菜单
;;;9649   //	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_BEFORE_ENTER].pService = DISPLAY_DrawMenuBeforeAdvancedSettings;
;;;9650   	
;;;9651   	// L1目录
;;;9652   	
;;;9653   	displayStateCB.dispCtrl[DISPLAY_MENU_L1_ESC].pService = DISPLAY_DrawMenuL1Back;	
0001e2  49d6              LDR      r1,|L279.1340|
0001e4  f8c0159c          STR      r1,[r0,#0x59c]  ; displayStateCB
;;;9654   	displayStateCB.dispCtrl[DISPLAY_MENU_L1_CONNECT].pService = DISPLAY_DrawMenuL1Connect;	
0001e8  49d5              LDR      r1,|L279.1344|
0001ea  f8c0156c          STR      r1,[r0,#0x56c]  ; displayStateCB
;;;9655   	displayStateCB.dispCtrl[DISPLAY_MENU_L1_CLEAR_DATA].pService = DISPLAY_DrawMenuL1ClearData;
0001ee  49d5              LDR      r1,|L279.1348|
0001f0  f8c0157c          STR      r1,[r0,#0x57c]  ; displayStateCB
;;;9656   	displayStateCB.dispCtrl[DISPLAY_MENU_L1_SET].pService = DISPLAY_DrawMenuL1Set;	
0001f4  49d4              LDR      r1,|L279.1352|
0001f6  f8c0158c          STR      r1,[r0,#0x58c]  ; displayStateCB
;;;9657   	displayStateCB.dispCtrl[DISPLAY_MENU_L1_INFO].pService = DISPLAY_DrawMenuL1Info;
0001fa  49d4              LDR      r1,|L279.1356|
0001fc  f8c015ac          STR      r1,[r0,#0x5ac]  ; displayStateCB
;;;9658   
;;;9659   	// 高级菜单密码登录
;;;9660   	displayStateCB.dispCtrl[DISPLAY_INPUT_PASSWORD_BG].pService = DISPLAY_DrawInputPasswordBG;
000200  49d3              LDR      r1,|L279.1360|
000202  f8c0109c          STR      r1,[r0,#0x9c]  ; displayStateCB
;;;9661   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_PASSWORD_INPUT_TITLE].pService = DISPLAY_DrawMenuAdvancedPasswordEnterTitle;
000206  49d3              LDR      r1,|L279.1364|
000208  f8c015bc          STR      r1,[r0,#0x5bc]  ; displayStateCB
;;;9662   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_PASSWORD_INPUT_NUM].pService = DISPLAY_DrawMenuAdvancedPasswordEnterNum;
00020c  49d2              LDR      r1,|L279.1368|
00020e  f8c015cc          STR      r1,[r0,#0x5cc]  ; displayStateCB
;;;9663   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_PASSWORD_INPUT_CURSOR].pService = DISPLAY_DrawMenuAdvancedPasswordEnterCursor;
000212  49d2              LDR      r1,|L279.1372|
000214  f8c015dc          STR      r1,[r0,#0x5dc]  ; displayStateCB
;;;9664   	
;;;9665   	// 开机密码登录
;;;9666   	displayStateCB.dispCtrl[DISPLAY_MENU_POWERON_PASSWORD_LOCK_ICON].pService = DISPLAY_DrawMenuPowerOnPasswordLockIcon;
000218  49d1              LDR      r1,|L279.1376|
00021a  f8c015ec          STR      r1,[r0,#0x5ec]  ; displayStateCB
;;;9667   	displayStateCB.dispCtrl[DISPLAY_MENU_POWERON_PASSWORD_INPUT_TITLE].pService = DISPLAY_DrawMenuPowerOnPasswordEnterTitle;
00021e  49d1              LDR      r1,|L279.1380|
000220  f8c015fc          STR      r1,[r0,#0x5fc]  ; displayStateCB
;;;9668   	displayStateCB.dispCtrl[DISPLAY_MENU_POWERON_PASSWORD_INPUT_NUM].pService = DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterNum;
000224  49d0              LDR      r1,|L279.1384|
000226  f8c0160c          STR      r1,[r0,#0x60c]  ; displayStateCB
;;;9669   	displayStateCB.dispCtrl[DISPLAY_MENU_POWERON_PASSWORD_INPUT_CURSOR].pService = DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterCursor;
00022a  49d0              LDR      r1,|L279.1388|
00022c  f8c0161c          STR      r1,[r0,#0x61c]  ; displayStateCB
;;;9670   	displayStateCB.dispCtrl[DISPLAY_MENU_POWERON_PASSWORD_COUNT_DOWN].pService = DISPLAY_DrawMenuPowerOnPasswordCountDown;
000230  49cf              LDR      r1,|L279.1392|
000232  f8c0162c          STR      r1,[r0,#0x62c]  ; displayStateCB
;;;9671   	
;;;9672   	// 高级菜单
;;;9673   	displayStateCB.dispCtrl[DISPLAY_ADV_MENU_BG].pService = DISPLAY_DrawAdvMenuBg;
000236  49cf              LDR      r1,|L279.1396|
000238  f8c0108c          STR      r1,[r0,#0x8c]  ; displayStateCB
;;;9674   	
;;;9675   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_TITLE].pService = DISPLAY_DrawMenuAdvancedSettingsRootTitle;
00023c  49ce              LDR      r1,|L279.1400|
00023e  f8c0163c          STR      r1,[r0,#0x63c]  ; displayStateCB
;;;9676   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_WHEEL_SIZE].pService = DISPLAY_DrawMenuAdvSettingsWheelSize;
000242  49ce              LDR      r1,|L279.1404|
000244  f8c0164c          STR      r1,[r0,#0x64c]  ; displayStateCB
;;;9677   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_WHEEL_METER].pService = DISPLAY_DrawMenuAdvSettingsWheelMeter;
000248  49cd              LDR      r1,|L279.1408|
00024a  f8c0165c          STR      r1,[r0,#0x65c]  ; displayStateCB
;;;9678   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_SPEED_SENSOR].pService = DISPLAY_DrawMenuAdvSettingsMagnetics;
00024e  49cd              LDR      r1,|L279.1412|
000250  f8c0166c          STR      r1,[r0,#0x66c]  ; displayStateCB
;;;9679   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_VOL].pService = DISPLAY_DrawMenuAdvSettingsVol;
000254  4acc              LDR      r2,|L279.1416|
000256  f8c0267c          STR      r2,[r0,#0x67c]  ; displayStateCB
;;;9680   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_WALK_MODE].pService = DISPLAY_DrawMenuAdvSettingsWalkMode;
00025a  4acc              LDR      r2,|L279.1420|
00025c  f8c0268c          STR      r2,[r0,#0x68c]  ; displayStateCB
;;;9681   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_TURN_HANDLE].pService = DISPLAY_DrawMenuAdvSettingsTurnHandle;
000260  4acb              LDR      r2,|L279.1424|
000262  f8c0269c          STR      r2,[r0,#0x69c]  ; displayStateCB
;;;9682   	//displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_RESET].pService = DISPLAY_DrawMenuAdvancedSettingsRootReset;
;;;9683   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_USER_PASSWORD].pService = DISPLAY_DrawMenuAdvancedSettingsRootSetPassword;
000266  4acb              LDR      r2,|L279.1428|
000268  f8c026bc          STR      r2,[r0,#0x6bc]  ; displayStateCB
;;;9684   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_CURSOR].pService = DISPLAY_DrawMenuAdvancedSettingsRootCursor;
00026c  4aca              LDR      r2,|L279.1432|
00026e  f8c026cc          STR      r2,[r0,#0x6cc]  ; displayStateCB
;;;9685   
;;;9686   	// 恢复出厂设置
;;;9687   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_SET_RESET].pService = DISPLAY_DrawMenuAdvancedSettingsRootSetReset;
000272  4aca              LDR      r2,|L279.1436|
000274  f8c026dc          STR      r2,[r0,#0x6dc]  ; displayStateCB
;;;9688   
;;;9689   	// 修改菜单密码
;;;9690   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_CHOOSE_PASSWORD_TITLE].pService = DISPLAY_DrawMenuAdvancedPasswordChooseTitle;
000278  4ac9              LDR      r2,|L279.1440|
00027a  f8c026ec          STR      r2,[r0,#0x6ec]  ; displayStateCB
;;;9691   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_CHOOSE_PASSWORD_SET].pService = DISPLAY_DrawMenuAdvancedPasswordChooseSet;
00027e  4ac9              LDR      r2,|L279.1444|
000280  f8c026fc          STR      r2,[r0,#0x6fc]  ; displayStateCB
;;;9692   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_CHOOSE_PASSWORD_CURSOR].pService = DISPLAY_DrawMenuAdvancedPasswordChooseCursor;
000284  4ac8              LDR      r2,|L279.1448|
000286  f8c0270c          STR      r2,[r0,#0x70c]  ; displayStateCB
;;;9693   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PASSWORD_TITLE].pService = DISPLAY_DrawMenuAdvancedPasswordSetTitle;
00028a  4ac8              LDR      r2,|L279.1452|
00028c  f8c0271c          STR      r2,[r0,#0x71c]  ; displayStateCB
;;;9694   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PASSWORD_SET].pService = DISPLAY_DrawMenuAdvancedPasswordSetNum;
000290  4ac7              LDR      r2,|L279.1456|
000292  f8c0272c          STR      r2,[r0,#0x72c]  ; displayStateCB
;;;9695   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PASSWORD_CURSOR].pService = DISPLAY_DrawMenuAdvancedPasswordSetCursor;
000296  4ac7              LDR      r2,|L279.1460|
000298  f8c0273c          STR      r2,[r0,#0x73c]  ; displayStateCB
;;;9696   
;;;9697   	// 修改控制器参数
;;;9698   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_VOL].pService = DISPLAY_DrawMenuAdvSettingsVol;
;;;9699   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_MAGNETICS].pService = DISPLAY_DrawMenuAdvSettingsMagnetics;
00029c  f8c0174c          STR      r1,[r0,#0x74c]  ; displayStateCB
;;;9700   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_PROTOCOL].pService = DISPLAY_DrawMenuAdvSettingsProtocol;
0002a0  49c5              LDR      r1,|L279.1464|
0002a2  f8c0175c          STR      r1,[r0,#0x75c]  ; displayStateCB
;;;9701   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_BATTERY_INFO].pService = DISPLAY_DrawMenuAdvSettingsBatteryInfo;
0002a6  49c5              LDR      r1,|L279.1468|
0002a8  f8c0176c          STR      r1,[r0,#0x76c]  ; displayStateCB
;;;9702   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_WALK_ASSIST].pService = DISPLAY_DrawMenuAdvSettingsWalkAssist;
0002ac  49c4              LDR      r1,|L279.1472|
0002ae  f8c0177c          STR      r1,[r0,#0x77c]  ; displayStateCB
;;;9703   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_UART_VOL].pService = DISPLAY_DrawMenuAdvSettingsUartVol;
0002b2  49c4              LDR      r1,|L279.1476|
0002b4  f8c0178c          STR      r1,[r0,#0x78c]  ; displayStateCB
;;;9704   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_AM_LIMIT].pService = DISPLAY_DrawMenuAdvSettingsAmpLimit;
0002b8  49c3              LDR      r1,|L279.1480|
0002ba  f8c0179c          STR      r1,[r0,#0x79c]  ; displayStateCB
;;;9705   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_SPEED_LIMIT].pService = DISPLAY_DrawMenuAdvSettingsSpeedLimit;
0002be  49c3              LDR      r1,|L279.1484|
0002c0  f8c017ac          STR      r1,[r0,#0x7ac]  ; displayStateCB
;;;9706   	displayStateCB.dispCtrl[DISPLAY_MENU_ADV_PARAM_BACK].pService = DISPLAY_DrawMenuAdvSettingsBack;
0002c4  49c2              LDR      r1,|L279.1488|
0002c6  f8c017bc          STR      r1,[r0,#0x7bc]  ; displayStateCB
;;;9707   	
;;;9708   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_WHEEL_SIZE].pService = DISPLAY_DrawMenuAdvancedSettingsRootWheelSize;
0002ca  49c2              LDR      r1,|L279.1492|
0002cc  f8c017cc          STR      r1,[r0,#0x7cc]  ; displayStateCB
;;;9709   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_SPEED_LIMIT].pService = DISPLAY_DrawMenuAdvancedSettingsRootSpeedLimit;
0002d0  49c1              LDR      r1,|L279.1496|
0002d2  f8c017dc          STR      r1,[r0,#0x7dc]  ; displayStateCB
;;;9710   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_ESC].pService = DISPLAY_DrawMenuAdvancedSettingsRootESC;
0002d6  49c1              LDR      r1,|L279.1500|
0002d8  f8c017ec          STR      r1,[r0,#0x7ec]  ; displayStateCB
;;;9711   
;;;9712   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_SETTINGS_WHEEL_SIZE].pService = DISPLAY_DrawMenuAdvancedSettingsWheelSize;
0002dc  49c0              LDR      r1,|L279.1504|
0002de  f8c017fc          STR      r1,[r0,#0x7fc]  ; displayStateCB
;;;9713   	displayStateCB.dispCtrl[DISPLAY_MENU_ADVANCED_SETTINGS_SPEED_LIMIT].pService = DISPLAY_DrawMenuAdvancedSettingsSpeedLimit;
0002e2  49c0              LDR      r1,|L279.1508|
0002e4  f8c0180c          STR      r1,[r0,#0x80c]  ; displayStateCB
;;;9714   
;;;9715   	// L2连接
;;;9716   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_QRCODE].pService = DISPLAY_DrawMenuL2Qrcode;
0002e8  49bf              LDR      r1,|L279.1512|
0002ea  f8c0181c          STR      r1,[r0,#0x81c]  ; displayStateCB
;;;9717   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_BACK].pService = DISPLAY_DrawMenuL2Back;	
0002ee  49bf              LDR      r1,|L279.1516|
0002f0  f8c0182c          STR      r1,[r0,#0x82c]  ; displayStateCB
;;;9718   
;;;9719   	// L2清除数据
;;;9720   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_TITILE_CLEAR_DATA].pService = DISPLAY_DrawMenuL2ClearDataTitle;	
0002f4  49be              LDR      r1,|L279.1520|
0002f6  f8c0183c          STR      r1,[r0,#0x83c]  ; displayStateCB
;;;9721   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_CLEAR_DISTANCE].pService = DISPLAY_DrawMenuL2ClearMileage;
0002fa  49be              LDR      r1,|L279.1524|
0002fc  f8c0184c          STR      r1,[r0,#0x84c]  ; displayStateCB
;;;9722   //	displayStateCB.dispCtrl[DISPLAY_MENU_L2_CLEAR_PERS_BEST].pService = DISPLAY_DrawMenuL2ClearPersBest;	
;;;9723   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_FACTORY_RESET].pService = DISPLAY_DrawMenuL2FactoryReset;
000300  49bd              LDR      r1,|L279.1528|
000302  f8c0185c          STR      r1,[r0,#0x85c]  ; displayStateCB
;;;9724   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_CLEAR_BACK].pService = DISPLAY_DrawMenuL2ClearBack;
000306  49bd              LDR      r1,|L279.1532|
000308  f8c0186c          STR      r1,[r0,#0x86c]  ; displayStateCB
;;;9725   
;;;9726   	// L2设置
;;;9727   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_TITILE_SETUP].pService = DISPLAY_DrawMenuL2SetTitle;	
00030c  49bc              LDR      r1,|L279.1536|
00030e  f8c0187c          STR      r1,[r0,#0x87c]  ; displayStateCB
;;;9728   //	displayStateCB.dispCtrl[DISPLAY_MENU_L2_SET_DATE_TIME].pService = DISPLAY_DrawMenuL2SetDateTime;
;;;9729   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_SET_AUTOLIGHT].pService = DISPLAY_DrawMenuL2SetAutoLight;
000312  49bc              LDR      r1,|L279.1540|
000314  f8c0188c          STR      r1,[r0,#0x88c]  ; displayStateCB
;;;9730   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_SET_UNIT].pService = DISPLAY_DrawMenuL2SetUnit;	
000318  49bb              LDR      r1,|L279.1544|
00031a  f8c0189c          STR      r1,[r0,#0x89c]  ; displayStateCB
;;;9731   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_SET_LIGTH].pService = DISPLAY_DrawMenuL2SetBackLight;
00031e  49bb              LDR      r1,|L279.1548|
000320  f8c018ac          STR      r1,[r0,#0x8ac]  ; displayStateCB
;;;9732   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_SET_POWER_OFF].pService = DISPLAY_DrawMenuL2SetAutoPowerOff;	
000324  49ba              LDR      r1,|L279.1552|
000326  f8c018bc          STR      r1,[r0,#0x8bc]  ; displayStateCB
;;;9733   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_SET_BACK].pService = DISPLAY_DrawMenuL2SetBack;
00032a  49ba              LDR      r1,|L279.1556|
00032c  f8c018cc          STR      r1,[r0,#0x8cc]  ; displayStateCB
;;;9734   
;;;9735   	// L2系统信息
;;;9736   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_TITILE_SYS_INFO].pService = DISPLAY_DrawMenuL2SystemInfoTitle;
000330  49b9              LDR      r1,|L279.1560|
000332  f8c018dc          STR      r1,[r0,#0x8dc]  ; displayStateCB
;;;9737   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_WHEEL_SIZE].pService = DISPLAY_DrawMenuL2SystemInfoWheelSize;	
000336  49b9              LDR      r1,|L279.1564|
000338  f8c018ec          STR      r1,[r0,#0x8ec]  ; displayStateCB
;;;9738   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_SPEED_LIMIT].pService = DISPLAY_DrawMenuL2SystemInfoSpeedLimit;	
00033c  49b8              LDR      r1,|L279.1568|
00033e  f8c018fc          STR      r1,[r0,#0x8fc]  ; displayStateCB
;;;9739   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_SPEED_LIMIT_UNIT].pService = DISPLAY_DrawMenuL2SystemInfoSpeedLimitUnit;	
000342  49b8              LDR      r1,|L279.1572|
000344  f8c0190c          STR      r1,[r0,#0x90c]  ; displayStateCB
;;;9740   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_FW_VERSION].pService = DISPLAY_DrawMenuL2SystemInfoFWVersion;
000348  49b7              LDR      r1,|L279.1576|
00034a  f8c0191c          STR      r1,[r0,#0x91c]  ; displayStateCB
;;;9741   	displayStateCB.dispCtrl[DISPLAY_MENU_L2_SYSTEM_BACK].pService = DISPLAY_DrawMenuL2SystemInfoBack;
00034e  49b7              LDR      r1,|L279.1580|
000350  f8c0192c          STR      r1,[r0,#0x92c]  ; displayStateCB
;;;9742   
;;;9743   	// L3清除里程\个人最佳\恢复出厂设置
;;;9744   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_CLEAR_TRIP].pService = DISPLAY_DrawMenuL3ClearMileageTitle;
000354  49b6              LDR      r1,|L279.1584|
000356  f8c0193c          STR      r1,[r0,#0x93c]  ; displayStateCB
;;;9745   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_CLEAR_PERS_BEST].pService = DISPLAY_DrawMenuL3ClearPersBestTitle;	
00035a  49b6              LDR      r1,|L279.1588|
00035c  f8c0194c          STR      r1,[r0,#0x94c]  ; displayStateCB
;;;9746   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_FACTORY_RESET].pService = DISPLAY_DrawMenuL3FactoryResetTitle;
000360  49b5              LDR      r1,|L279.1592|
000362  f8c0195c          STR      r1,[r0,#0x95c]  ; displayStateCB
;;;9747   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_YES].pService = DISPLAY_DrawMenuL3Yes;	
000366  49b5              LDR      r1,|L279.1596|
000368  f8c0196c          STR      r1,[r0,#0x96c]  ; displayStateCB
;;;9748   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_NO].pService = DISPLAY_DrawMenuL3No;	
00036c  49b4              LDR      r1,|L279.1600|
00036e  f8c0197c          STR      r1,[r0,#0x97c]  ; displayStateCB
;;;9749   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_HINT_CLEAR_TRIP].pService = DISPLAY_DrawMenuL3ClearMileageHint;	
000372  49b4              LDR      r1,|L279.1604|
000374  f8c0198c          STR      r1,[r0,#0x98c]  ; displayStateCB
;;;9750   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_HINT_FACTORY_RESET].pService = DISPLAY_DrawMenuL3FactoryResetHint;	
000378  49b3              LDR      r1,|L279.1608|
00037a  f8c0199c          STR      r1,[r0,#0x99c]  ; displayStateCB
;;;9751   
;;;9752   	// L3设置日期时间
;;;9753   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_SET_DATE_TIME].pService = DISPLAY_DrawMenuL3SetDateTimeTitle;
00037e  49b3              LDR      r1,|L279.1612|
000380  f8c019ac          STR      r1,[r0,#0x9ac]  ; displayStateCB
;;;9754   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_SET_TIME].pService = DISPLAY_DrawMenuL3SetTime;	
000384  49b2              LDR      r1,|L279.1616|
000386  f8c019bc          STR      r1,[r0,#0x9bc]  ; displayStateCB
;;;9755   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_SET_DATE].pService = DISPLAY_DrawMenuL3SetDate;
00038a  49b2              LDR      r1,|L279.1620|
00038c  f8c019cc          STR      r1,[r0,#0x9cc]  ; displayStateCB
;;;9756   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_BACK].pService = DISPLAY_DrawMenuL3Back;	
000390  49b1              LDR      r1,|L279.1624|
000392  f8c019dc          STR      r1,[r0,#0x9dc]  ; displayStateCB
;;;9757   
;;;9758   	displayStateCB.dispCtrl[DISPLAY_MENU_PLUS].pService = DISPLAY_DrawMenuPlus;	
000396  49b1              LDR      r1,|L279.1628|
000398  f8c019ec          STR      r1,[r0,#0x9ec]  ; displayStateCB
;;;9759   	displayStateCB.dispCtrl[DISPLAY_MENU_MINUS].pService = DISPLAY_DrawMenuMinus;
00039c  49b0              LDR      r1,|L279.1632|
00039e  f8c019fc          STR      r1,[r0,#0x9fc]  ; displayStateCB
;;;9760   	displayStateCB.dispCtrl[DISPLAY_MENU_FINISH].pService = DISPLAY_DrawMenuFinish;	
0003a2  49b0              LDR      r1,|L279.1636|
0003a4  f8c01a0c          STR      r1,[r0,#0xa0c]  ; displayStateCB
;;;9761   
;;;9762   	// L3设置自动大灯
;;;9763   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_SET_AUTO_LIGHT].pService = DISPLAY_DrawMenuL3SetAutoLightTitle;
0003a8  49af              LDR      r1,|L279.1640|
0003aa  f8c01a1c          STR      r1,[r0,#0xa1c]  ; displayStateCB
;;;9764   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_SET_YES].pService = DISPLAY_DrawMenuL3SetAutoLightYes;	
0003ae  49af              LDR      r1,|L279.1644|
0003b0  f8c01a2c          STR      r1,[r0,#0xa2c]  ; displayStateCB
;;;9765   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_SET_NO].pService = DISPLAY_DrawMenuL3SetAutoLightNo;	
0003b4  49ae              LDR      r1,|L279.1648|
0003b6  f8c01a3c          STR      r1,[r0,#0xa3c]  ; displayStateCB
;;;9766   	
;;;9767   	// L3设置单位
;;;9768   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_SET_UNIT].pService = DISPLAY_DrawMenuL3SetUnitTitle;
0003ba  49ae              LDR      r1,|L279.1652|
0003bc  f8c01a4c          STR      r1,[r0,#0xa4c]  ; displayStateCB
;;;9769   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_SET_UNIT_METRIC].pService = DISPLAY_DrawMenuL3SetUnitKM;	
0003c0  49ad              LDR      r1,|L279.1656|
0003c2  f8c01a5c          STR      r1,[r0,#0xa5c]  ; displayStateCB
;;;9770   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_SET_UNIT_INCH].pService = DISPLAY_DrawMenuL3SetUnitMiles;	
0003c6  49ad              LDR      r1,|L279.1660|
0003c8  f8c01a6c          STR      r1,[r0,#0xa6c]  ; displayStateCB
;;;9771   
;;;9772   	// L3设置背光
;;;9773   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_SET_LIGHT].pService = DISPLAY_DrawMenuL3SetBackLightTitle;
0003cc  49ac              LDR      r1,|L279.1664|
0003ce  f8c01a7c          STR      r1,[r0,#0xa7c]  ; displayStateCB
;;;9774   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_LIGHT_LEVEL].pService = DISPLAY_DrawMenuL3SetBackLightLevel;
0003d2  49ac              LDR      r1,|L279.1668|
0003d4  f8c01a8c          STR      r1,[r0,#0xa8c]  ; displayStateCB
;;;9775   
;;;9776   	// L3设置自动关机
;;;9777   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_TITILE_SET_POWER_OFF].pService = DISPLAY_DrawMenuL3SetAutoOffTitle;	
0003d8  49ab              LDR      r1,|L279.1672|
0003da  f8c01a9c          STR      r1,[r0,#0xa9c]  ; displayStateCB
;;;9778   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_POWER_OFF].pService = DISPLAY_DrawMenuL3SetAutoOffTimer;	
0003de  49ab              LDR      r1,|L279.1676|
0003e0  f8c01aac          STR      r1,[r0,#0xaac]  ; displayStateCB
;;;9779   	displayStateCB.dispCtrl[DISPLAY_MENU_L3_POWER_OFF_MIN].pService = DISPLAY_DrawMenuL3SetAutoOffMin;
0003e4  49aa              LDR      r1,|L279.1680|
0003e6  f8c01abc          STR      r1,[r0,#0xabc]  ; displayStateCB
;;;9780   
;;;9781   	// L4设置日期
;;;9782   	displayStateCB.dispCtrl[DISPLAY_MENU_L4_TITILE_DATE].pService = DISPLAY_DrawMenuL4SetDateTitle;
0003ea  49aa              LDR      r1,|L279.1684|
0003ec  f8c01acc          STR      r1,[r0,#0xacc]  ; displayStateCB
;;;9783   	displayStateCB.dispCtrl[DISPLAY_MENU_L4_DATE_PLUS].pService = DISPLAY_DrawMenuL4DatePlus;	
0003f0  49a9              LDR      r1,|L279.1688|
0003f2  f8c01adc          STR      r1,[r0,#0xadc]  ; displayStateCB
;;;9784   	displayStateCB.dispCtrl[DISPLAY_MENU_L4_DATE_MINUS].pService = DISPLAY_DrawMenuL4DateMinus;
0003f6  49a9              LDR      r1,|L279.1692|
0003f8  f8c01aec          STR      r1,[r0,#0xaec]  ; displayStateCB
;;;9785   	displayStateCB.dispCtrl[DISPLAY_MENU_L4_DATE_FINISH].pService = DISPLAY_DrawMenuL4DateFinish;	
0003fc  e150              B        |L279.1696|
0003fe  0000              DCW      0x0000
                  |L279.1024|
                          DCD      ||.bss||
                  |L279.1028|
                          DCD      DISPLAY_DrawCommonTime
                  |L279.1032|
                          DCD      DISPLAY_DrawCommonTime1
                  |L279.1036|
                          DCD      DISPLAY_DrawCommonBattery
                  |L279.1040|
                          DCD      DISPLAY_DrawCommonCurise
                  |L279.1044|
                          DCD      DISPLAY_DrawCommonRecordState
                  |L279.1048|
                          DCD      DISPLAY_DrawCommonError
                  |L279.1052|
                          DCD      DISPLAY_DrawCommonLight
                  |L279.1056|
                          DCD      DISPLAY_DrawCommonHelmetBat
                  |L279.1060|
                          DCD      DISPLAY_DrawCommonVideo
                  |L279.1064|
                          DCD      DISPLAY_DrawCommonPhoto
                  |L279.1068|
                          DCD      DISPLAY_DrawCommonVoice
                  |L279.1072|
                          DCD      DISPLAY_DrawCommonMusicPlay
                  |L279.1076|
                          DCD      DISPLAY_DrawCommonTurn
                  |L279.1080|
                          DCD      DISPLAY_DrawBlueUpdata
                  |L279.1084|
                          DCD      DISPLAY_DrawPowerOn
                  |L279.1088|
                          DCD      DISPLAY_DrawPowerOff
                  |L279.1092|
                          DCD      DISPLAY_DrawCommonStatusBar
                  |L279.1096|
                          DCD      DISPLAY_DrawRidingBg
                  |L279.1100|
                          DCD      DISPLAY_DrawRidingSpeed
                  |L279.1104|
                          DCD      DISPLAY_DrawRidingSpeedUnit
                  |L279.1108|
                          DCD      DISPLAY_DrawRidingAssist
                  |L279.1112|
                          DCD      DISPLAY_DrawRidingBattery
                  |L279.1116|
                          DCD      DISPLAY_DrawRidingMotorPower
                  |L279.1120|
                          DCD      DISPLAY_DrawRidingCruise
                  |L279.1124|
                          DCD      DISPLAY_DrawRidingCallNum
                  |L279.1128|
                          DCD      DISPLAY_DrawPhoneBg
                  |L279.1132|
                          DCD      DISPLAY_DrawPhoneNumber
                  |L279.1136|
                          DCD      DISPLAY_DrawMonitorBg
                  |L279.1140|
                          DCD      DISPLAY_DrawMonitorTripTitile
                  |L279.1144|
                          DCD      DISPLAY_DrawMonitorTrip
                  |L279.1148|
                          DCD      DISPLAY_DrawMonitorTripUnit
                  |L279.1152|
                          DCD      DISPLAY_DrawMonitorOdoTitile
                  |L279.1156|
                          DCD      DISPLAY_DrawMonitorOdo
                  |L279.1160|
                          DCD      DISPLAY_DrawMonitorOdoUnit
                  |L279.1164|
                          DCD      DISPLAY_DrawMonitorRidingTimeTitile
                  |L279.1168|
                          DCD      DISPLAY_DrawMonitorRidingTime
                  |L279.1172|
                          DCD      DISPLAY_DrawMonitorCalorieTitile
                  |L279.1176|
                          DCD      DISPLAY_DrawMonitorCalorie
                  |L279.1180|
                          DCD      DISPLAY_DrawMonitorCalorieUnit
                  |L279.1184|
                          DCD      DISPLAY_DrawTourBg
                  |L279.1188|
                          DCD      DISPLAY_DrawTourAvgSpeedTitile
                  |L279.1192|
                          DCD      DISPLAY_DrawTourAvgSpeed
                  |L279.1196|
                          DCD      DISPLAY_DrawTourAvgSpeedUnit
                  |L279.1200|
                          DCD      DISPLAY_DrawTourMaxSpeedTitile
                  |L279.1204|
                          DCD      DISPLAY_DrawTourMaxSpeed
                  |L279.1208|
                          DCD      DISPLAY_DrawTourMaxSpeedUnit
                  |L279.1212|
                          DCD      DISPLAY_DrawTourSingleReduceCO2Titile
                  |L279.1216|
                          DCD      DISPLAY_DrawTourSingleReduceCO2
                  |L279.1220|
                          DCD      DISPLAY_DrawTourSingleReduceCO2Unit
                  |L279.1224|
                          DCD      DISPLAY_DrawTourSingleSaveTreeTitile
                  |L279.1228|
                          DCD      DISPLAY_DrawTourSingleSaveTree
                  |L279.1232|
                          DCD      DISPLAY_DrawTourSingleSaveTreeUnit
                  |L279.1236|
                          DCD      DISPLAY_DrawNavBg
                  |L279.1240|
                          DCD      DISPLAY_DrawNavSpeed
                  |L279.1244|
                          DCD      DISPLAY_DrawNavSpeedUnit
                  |L279.1248|
                          DCD      DISPLAY_DrawNavDirection
                  |L279.1252|
                          DCD      DISPLAY_DrawNavDistanceAndUnit
                  |L279.1256|
                          DCD      DISPLAY_DrawNavDistanceTime
                  |L279.1260|
                          DCD      DISPLAY_DrawMenuBg
                  |L279.1264|
                          DCD      DISPLAY_DrawMenuTitle1
                  |L279.1268|
                          DCD      DISPLAY_DrawMenuTitle2
                  |L279.1272|
                          DCD      DISPLAY_DrawMenuTitle3
                  |L279.1276|
                          DCD      DISPLAY_DrawMenuTitle4
                  |L279.1280|
                          DCD      DISPLAY_DrawMenuClearData
                  |L279.1284|
                          DCD      DISPLAY_DrawMenuDisplayUnit
                  |L279.1288|
                          DCD      DISPLAY_DrawMenuBackLight
                  |L279.1292|
                          DCD      DISPLAY_DrawMenuPowerOff
                  |L279.1296|
                          DCD      DISPLAY_DrawMenuAutoLight
                  |L279.1300|
                          DCD      DISPLAY_DrawMenuSpeedLimit
                  |L279.1304|
                          DCD      DISPLAY_DrawMenuUserPassword
                  |L279.1308|
                          DCD      DISPLAY_DrawMenuSystemInfo
                  |L279.1312|
                          DCD      DISPLAY_DrawMenuSetTime
                  |L279.1316|
                          DCD      DISPLAY_DrawMenuConnectToApp
                  |L279.1320|
                          DCD      DISPLAY_DrawMenuBackIcon
                  |L279.1324|
                          DCD      DISPLAY_DrawMenuErrorTitle
                  |L279.1328|
                          DCD      DISPLAY_DrawMenuError
                  |L279.1332|
                          DCD      DISPLAY_DrawMenuLock
                  |L279.1336|
                          DCD      DISPLAY_DrawMenuOk
                  |L279.1340|
                          DCD      DISPLAY_DrawMenuL1Back
                  |L279.1344|
                          DCD      DISPLAY_DrawMenuL1Connect
                  |L279.1348|
                          DCD      DISPLAY_DrawMenuL1ClearData
                  |L279.1352|
                          DCD      DISPLAY_DrawMenuL1Set
                  |L279.1356|
                          DCD      DISPLAY_DrawMenuL1Info
                  |L279.1360|
                          DCD      DISPLAY_DrawInputPasswordBG
                  |L279.1364|
                          DCD      DISPLAY_DrawMenuAdvancedPasswordEnterTitle
                  |L279.1368|
                          DCD      DISPLAY_DrawMenuAdvancedPasswordEnterNum
                  |L279.1372|
                          DCD      DISPLAY_DrawMenuAdvancedPasswordEnterCursor
                  |L279.1376|
                          DCD      DISPLAY_DrawMenuPowerOnPasswordLockIcon
                  |L279.1380|
                          DCD      DISPLAY_DrawMenuPowerOnPasswordEnterTitle
                  |L279.1384|
                          DCD      DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterNum
                  |L279.1388|
                          DCD      DISPLAY_DrawMenuPowerOnAdvancedPasswordEnterCursor
                  |L279.1392|
                          DCD      DISPLAY_DrawMenuPowerOnPasswordCountDown
                  |L279.1396|
                          DCD      DISPLAY_DrawAdvMenuBg
                  |L279.1400|
                          DCD      DISPLAY_DrawMenuAdvancedSettingsRootTitle
                  |L279.1404|
                          DCD      DISPLAY_DrawMenuAdvSettingsWheelSize
                  |L279.1408|
                          DCD      DISPLAY_DrawMenuAdvSettingsWheelMeter
                  |L279.1412|
                          DCD      DISPLAY_DrawMenuAdvSettingsMagnetics
                  |L279.1416|
                          DCD      DISPLAY_DrawMenuAdvSettingsVol
                  |L279.1420|
                          DCD      DISPLAY_DrawMenuAdvSettingsWalkMode
                  |L279.1424|
                          DCD      DISPLAY_DrawMenuAdvSettingsTurnHandle
                  |L279.1428|
                          DCD      DISPLAY_DrawMenuAdvancedSettingsRootSetPassword
                  |L279.1432|
                          DCD      DISPLAY_DrawMenuAdvancedSettingsRootCursor
                  |L279.1436|
                          DCD      DISPLAY_DrawMenuAdvancedSettingsRootSetReset
                  |L279.1440|
                          DCD      DISPLAY_DrawMenuAdvancedPasswordChooseTitle
                  |L279.1444|
                          DCD      DISPLAY_DrawMenuAdvancedPasswordChooseSet
                  |L279.1448|
                          DCD      DISPLAY_DrawMenuAdvancedPasswordChooseCursor
                  |L279.1452|
                          DCD      DISPLAY_DrawMenuAdvancedPasswordSetTitle
                  |L279.1456|
                          DCD      DISPLAY_DrawMenuAdvancedPasswordSetNum
                  |L279.1460|
                          DCD      DISPLAY_DrawMenuAdvancedPasswordSetCursor
                  |L279.1464|
                          DCD      DISPLAY_DrawMenuAdvSettingsProtocol
                  |L279.1468|
                          DCD      DISPLAY_DrawMenuAdvSettingsBatteryInfo
                  |L279.1472|
                          DCD      DISPLAY_DrawMenuAdvSettingsWalkAssist
                  |L279.1476|
                          DCD      DISPLAY_DrawMenuAdvSettingsUartVol
                  |L279.1480|
                          DCD      DISPLAY_DrawMenuAdvSettingsAmpLimit
                  |L279.1484|
                          DCD      DISPLAY_DrawMenuAdvSettingsSpeedLimit
                  |L279.1488|
                          DCD      DISPLAY_DrawMenuAdvSettingsBack
                  |L279.1492|
                          DCD      DISPLAY_DrawMenuAdvancedSettingsRootWheelSize
                  |L279.1496|
                          DCD      DISPLAY_DrawMenuAdvancedSettingsRootSpeedLimit
                  |L279.1500|
                          DCD      DISPLAY_DrawMenuAdvancedSettingsRootESC
                  |L279.1504|
                          DCD      DISPLAY_DrawMenuAdvancedSettingsWheelSize
                  |L279.1508|
                          DCD      DISPLAY_DrawMenuAdvancedSettingsSpeedLimit
                  |L279.1512|
                          DCD      DISPLAY_DrawMenuL2Qrcode
                  |L279.1516|
                          DCD      DISPLAY_DrawMenuL2Back
                  |L279.1520|
                          DCD      DISPLAY_DrawMenuL2ClearDataTitle
                  |L279.1524|
                          DCD      DISPLAY_DrawMenuL2ClearMileage
                  |L279.1528|
                          DCD      DISPLAY_DrawMenuL2FactoryReset
                  |L279.1532|
                          DCD      DISPLAY_DrawMenuL2ClearBack
                  |L279.1536|
                          DCD      DISPLAY_DrawMenuL2SetTitle
                  |L279.1540|
                          DCD      DISPLAY_DrawMenuL2SetAutoLight
                  |L279.1544|
                          DCD      DISPLAY_DrawMenuL2SetUnit
                  |L279.1548|
                          DCD      DISPLAY_DrawMenuL2SetBackLight
                  |L279.1552|
                          DCD      DISPLAY_DrawMenuL2SetAutoPowerOff
                  |L279.1556|
                          DCD      DISPLAY_DrawMenuL2SetBack
                  |L279.1560|
                          DCD      DISPLAY_DrawMenuL2SystemInfoTitle
                  |L279.1564|
                          DCD      DISPLAY_DrawMenuL2SystemInfoWheelSize
                  |L279.1568|
                          DCD      DISPLAY_DrawMenuL2SystemInfoSpeedLimit
                  |L279.1572|
                          DCD      DISPLAY_DrawMenuL2SystemInfoSpeedLimitUnit
                  |L279.1576|
                          DCD      DISPLAY_DrawMenuL2SystemInfoFWVersion
                  |L279.1580|
                          DCD      DISPLAY_DrawMenuL2SystemInfoBack
                  |L279.1584|
                          DCD      DISPLAY_DrawMenuL3ClearMileageTitle
                  |L279.1588|
                          DCD      DISPLAY_DrawMenuL3ClearPersBestTitle
                  |L279.1592|
                          DCD      DISPLAY_DrawMenuL3FactoryResetTitle
                  |L279.1596|
                          DCD      DISPLAY_DrawMenuL3Yes
                  |L279.1600|
                          DCD      DISPLAY_DrawMenuL3No
                  |L279.1604|
                          DCD      DISPLAY_DrawMenuL3ClearMileageHint
                  |L279.1608|
                          DCD      DISPLAY_DrawMenuL3FactoryResetHint
                  |L279.1612|
                          DCD      DISPLAY_DrawMenuL3SetDateTimeTitle
                  |L279.1616|
                          DCD      DISPLAY_DrawMenuL3SetTime
                  |L279.1620|
                          DCD      DISPLAY_DrawMenuL3SetDate
                  |L279.1624|
                          DCD      DISPLAY_DrawMenuL3Back
                  |L279.1628|
                          DCD      DISPLAY_DrawMenuPlus
                  |L279.1632|
                          DCD      DISPLAY_DrawMenuMinus
                  |L279.1636|
                          DCD      DISPLAY_DrawMenuFinish
                  |L279.1640|
                          DCD      DISPLAY_DrawMenuL3SetAutoLightTitle
                  |L279.1644|
                          DCD      DISPLAY_DrawMenuL3SetAutoLightYes
                  |L279.1648|
                          DCD      DISPLAY_DrawMenuL3SetAutoLightNo
                  |L279.1652|
                          DCD      DISPLAY_DrawMenuL3SetUnitTitle
                  |L279.1656|
                          DCD      DISPLAY_DrawMenuL3SetUnitKM
                  |L279.1660|
                          DCD      DISPLAY_DrawMenuL3SetUnitMiles
                  |L279.1664|
                          DCD      DISPLAY_DrawMenuL3SetBackLightTitle
                  |L279.1668|
                          DCD      DISPLAY_DrawMenuL3SetBackLightLevel
                  |L279.1672|
                          DCD      DISPLAY_DrawMenuL3SetAutoOffTitle
                  |L279.1676|
                          DCD      DISPLAY_DrawMenuL3SetAutoOffTimer
                  |L279.1680|
                          DCD      DISPLAY_DrawMenuL3SetAutoOffMin
                  |L279.1684|
                          DCD      DISPLAY_DrawMenuL4SetDateTitle
                  |L279.1688|
                          DCD      DISPLAY_DrawMenuL4DatePlus
                  |L279.1692|
                          DCD      DISPLAY_DrawMenuL4DateMinus
                  |L279.1696|
0006a0  490d              LDR      r1,|L279.1752|
0006a2  f8c01afc          STR      r1,[r0,#0xafc]  ; displayStateCB
;;;9786   	displayStateCB.dispCtrl[DISPLAY_MENU_L4_DATE].pService = DISPLAY_DrawMenuL4SetDate;	
0006a6  490d              LDR      r1,|L279.1756|
0006a8  f8c01b0c          STR      r1,[r0,#0xb0c]  ; displayStateCB
;;;9787   
;;;9788   	// L4设置时间
;;;9789   	displayStateCB.dispCtrl[DISPLAY_MENU_L4_TITILE_TIME].pService = DISPLAY_DrawMenuL4SetTimeTitle;
0006ac  490c              LDR      r1,|L279.1760|
0006ae  f8c01b1c          STR      r1,[r0,#0xb1c]  ; displayStateCB
;;;9790   	displayStateCB.dispCtrl[DISPLAY_MENU_L4_TIME].pService = DISPLAY_DrawMenuL4SetTime;	
0006b2  490c              LDR      r1,|L279.1764|
0006b4  f8c01b2c          STR      r1,[r0,#0xb2c]  ; displayStateCB
;;;9791   
;;;9792   	// 菜单参数初始化
;;;9793   	displayStateCB.menu.root.id = MENU_ID_ROOT_CLEAR_DATA;
0006b8  f8803b30          STRB     r3,[r0,#0xb30]
;;;9794   	displayStateCB.menu.advanced.id = MENU_ID_ADVANCED_SETTINGS_WHEEL_SIZE;
0006bc  f8803b4d          STRB     r3,[r0,#0xb4d]
;;;9795   	displayStateCB.menu.clear.id = MENU_ID_CLEAR_TRIP_DISTANCE;
0006c0  f8803b52          STRB     r3,[r0,#0xb52]
;;;9796   	displayStateCB.menu.clear.yesNoId = MENU_ID_NO;
0006c4  2101              MOVS     r1,#1
0006c6  f8801b53          STRB     r1,[r0,#0xb53]
;;;9797   //	displayStateCB.menu.setup.id = MENU_ID_SETUP_SET_DATE_TIME;
;;;9798   //	displayStateCB.menu.setup.dateTimeId = MENU_ID_DATE;
;;;9799   	displayStateCB.menu.setup.rtc.tuneBit = RTC_TUNE_BIT_HOUR;
0006ca  f8803b62          STRB     r3,[r0,#0xb62]
;;;9800   
;;;9801   	displayStateCB.menu.advanced.cursorEnter = 0;
0006ce  f8803b4b          STRB     r3,[r0,#0xb4b]
;;;9802   	displayStateCB.menu.advanced.cursor = 0;
0006d2  f8803b4a          STRB     r3,[r0,#0xb4a]
;;;9803   	
;;;9804   	// 注册该模块定时器
;;;9805   //	TIMER_AddTask(TIMER_ID_DISPLAY_TIME,
;;;9806   //					DISPLAY_TIME_COUNT,
;;;9807   //					DISPLAY_CommonTimeCount,
;;;9808   //					UINT32_NULL,
;;;9809   //					TIMER_LOOP_FOREVER,
;;;9810   //					ACTION_MODE_ADD_TO_QUEUE);
;;;9811   	
;;;9812   }
0006d6  bd10              POP      {r4,pc}
;;;9813   
                          ENDP

                  |L279.1752|
                          DCD      DISPLAY_DrawMenuL4DateFinish
                  |L279.1756|
                          DCD      DISPLAY_DrawMenuL4SetDate
                  |L279.1760|
                          DCD      DISPLAY_DrawMenuL4SetTimeTitle
                  |L279.1764|
                          DCD      DISPLAY_DrawMenuL4SetTime

                          AREA ||i.DISPLAY_Menu1_Advanced_Choose||, CODE, READONLY, ALIGN=2

                  DISPLAY_Menu1_Advanced_Choose PROC
;;;11775  // 调整高级菜单1
;;;11776  void DISPLAY_Menu1_Advanced_Choose(uint32 param)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;11777  {
000004  4680              MOV      r8,r0
;;;11778  	// 调整参数
;;;11779  	if (displayStateCB.menu.advanced.cursorEnter > 0)
000006  4ce0              LDR      r4,|L280.904|
000008  f8942b4b          LDRB     r2,[r4,#0xb4b]  ; displayStateCB
00000c  2a00              CMP      r2,#0
00000e  d06e              BEQ      |L280.238|
;;;11780  	{
;;;11781  		if (DISPLAY_MENU_TUNE_PREVIOUS == param)
;;;11782  		{
;;;11783  			switch (displayStateCB.menu.advanced.cursor)
;;;11784  			{
;;;11785  				// 轮径调节
;;;11786  				case 0:
;;;11787  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11788  					{
;;;11789  						paramCB.nvm.param.protocol.wheelSizeID++;
000010  4cde              LDR      r4,|L280.908|
000012  4fdd              LDR      r7,|L280.904|
;;;11790  						if (PARAM_WHEEL_SIZE_27_INCH == paramCB.nvm.param.protocol.wheelSizeID)
;;;11791  						{
;;;11792  							paramCB.nvm.param.protocol.wheelSizeID=PARAM_WHEEL_SIZE_27_5_INCH;
;;;11793  						}
;;;11794  						
;;;11795  						if (PARAM_WHEEL_SIZE_29_INCH == paramCB.nvm.param.protocol.wheelSizeID)
;;;11796  						{
;;;11797  							paramCB.nvm.param.protocol.wheelSizeID=PARAM_WHEEL_SIZE_700C;
000014  f04f0b11          MOV      r11,#0x11
000018  f8b462ba          LDRH     r6,[r4,#0x2ba]        ;11789
;;;11798  						}
;;;11799  
;;;11800  						if (PARAM_WHEEL_SIZE_MAX == paramCB.nvm.param.protocol.wheelSizeID)
;;;11801  						{
;;;11802  							paramCB.nvm.param.protocol.wheelSizeID=PARAM_WHEEL_SIZE_16_INCH;
;;;11803  						}
;;;11804  					}
;;;11805  
;;;11806  					switch (PARAM_GetWheelSizeID())
;;;11807  					{
;;;11808  						case PARAM_WHEEL_SIZE_16_INCH:
;;;11809  							paramCB.nvm.param.protocol.newWheelSizeInch = 160;
;;;11810  							break;
;;;11811  
;;;11812  						case PARAM_WHEEL_SIZE_18_INCH:
;;;11813  							paramCB.nvm.param.protocol.newWheelSizeInch = 180;
;;;11814  							break;
;;;11815  
;;;11816  						case PARAM_WHEEL_SIZE_20_INCH:
;;;11817  							paramCB.nvm.param.protocol.newWheelSizeInch = 200;
;;;11818  							break;
;;;11819  
;;;11820  						case PARAM_WHEEL_SIZE_22_INCH:
;;;11821  							paramCB.nvm.param.protocol.newWheelSizeInch = 220;
;;;11822  							break;
;;;11823  
;;;11824  						case PARAM_WHEEL_SIZE_24_INCH:
;;;11825  							paramCB.nvm.param.protocol.newWheelSizeInch = 240;
;;;11826  							break;
;;;11827  
;;;11828  						case PARAM_WHEEL_SIZE_26_INCH:
;;;11829  							paramCB.nvm.param.protocol.newWheelSizeInch = 260;
;;;11830  							break;
;;;11831  
;;;11832  						case PARAM_WHEEL_SIZE_27_5_INCH:
;;;11833  							paramCB.nvm.param.protocol.newWheelSizeInch = 275;
;;;11834  							break;
;;;11835  
;;;11836  						case PARAM_WHEEL_SIZE_28_INCH:
;;;11837  							paramCB.nvm.param.protocol.newWheelSizeInch = 280;
;;;11838  							break;
;;;11839  
;;;11840  						case PARAM_WHEEL_SIZE_700C:
;;;11841  							paramCB.nvm.param.protocol.newWheelSizeInch = 275;
;;;11842  							break;
;;;11843  
;;;11844  						default:
;;;11845  							paramCB.nvm.param.protocol.newWheelSizeInch = 260;
;;;11846  							break;
;;;11847  					}
;;;11848  					paramCB.nvm.param.protocol.newPerimeter = paramCB.nvm.param.protocol.newWheelSizeInch*0.1f*25.4f*3.14f;
;;;11849  					
;;;11850  					return;
;;;11851  
;;;11852  				// 周长调节
;;;11853  				case 1:
;;;11854  					switch (displayStateCB.menu.advanced.cursorEnter)
;;;11855  					{
;;;11856  						/*case 1:
;;;11857  							paramCB.nvm.param.protocol.newPerimeter+=100;
;;;11858  							paramCB.nvm.param.protocol.newPerimeter%=10000;
;;;11859  							break;*/
;;;11860  
;;;11861  						case 1:
;;;11862  							paramCB.nvm.param.protocol.newPerimeter+=1;
;;;11863  							paramCB.nvm.param.protocol.newPerimeter%=10000;
;;;11864  							break;
;;;11865  
;;;11866  						default:
;;;11867  							break;
;;;11868  					}
;;;11869  					break;
;;;11870  
;;;11871  				// 测速磁钢
;;;11872  				case 2:
;;;11873  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11874  					{
;;;11875  						
;;;11876  						if (12 == paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor)
;;;11877  						{
;;;11878  							paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor = 1;
;;;11879  						}
;;;11880  						else
;;;11881  						{
;;;11882  							paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor++;
;;;11883  						}
;;;11884  						
;;;11885  					}
;;;11886  					break;
;;;11887  
;;;11888  				// 电池电压
;;;11889  				case 3:
;;;11890  					
;;;11891  					if (24 == paramCB.nvm.param.common.battery.voltage)
;;;11892  					{
;;;11893  						paramCB.nvm.param.common.battery.voltage = 36;
;;;11894  					}
;;;11895  					else if (36 == paramCB.nvm.param.common.battery.voltage)
;;;11896  					{
;;;11897  						paramCB.nvm.param.common.battery.voltage = 48;
;;;11898  					}
;;;11899  					else if (48 == paramCB.nvm.param.common.battery.voltage)
;;;11900  					{
;;;11901  						paramCB.nvm.param.common.battery.voltage = 52;
;;;11902  					}
;;;11903  					else if (52 == paramCB.nvm.param.common.battery.voltage)
;;;11904  					{
;;;11905  						paramCB.nvm.param.common.battery.voltage = 60;
;;;11906  					}
;;;11907  					else if (60 == paramCB.nvm.param.common.battery.voltage)
;;;11908  					{
;;;11909  						paramCB.nvm.param.common.battery.voltage = 72;
;;;11910  					}
;;;11911  					else if (72 == paramCB.nvm.param.common.battery.voltage)
;;;11912  					{
;;;11913  						paramCB.nvm.param.common.battery.voltage = 24;
;;;11914  					}
;;;11915  					else
;;;11916  					{
;;;11917  						paramCB.nvm.param.common.battery.voltage = 24;
;;;11918  					}
;;;11919  					break;
;;;11920  
;;;11921  				// 推车助力开关
;;;11922  				case 4:
;;;11923  					paramCB.nvm.param.common.pushAssistSwitch = !paramCB.nvm.param.common.pushAssistSwitch;
00001c  f8940325          LDRB     r0,[r4,#0x325]
;;;11924  					break;
;;;11925  
;;;11926  				// 转把分档
;;;11927  				case 5:
;;;11928  					paramCB.nvm.param.protocol.driver.turnBarLevel = !paramCB.nvm.param.protocol.driver.turnBarLevel;
000020  f894c2fe          LDRB     r12,[r4,#0x2fe]
000024  f894528c          LDRB     r5,[r4,#0x28c]        ;11789
000028  f89432f9          LDRB     r3,[r4,#0x2f9]        ;11876
00002c  f8941338          LDRB     r1,[r4,#0x338]        ;11891
000030  f8977b4a          LDRB     r7,[r7,#0xb4a]        ;11783
000034  f2401913          MOV      r9,#0x113             ;11833
000038  f04f0a18          MOV      r10,#0x18             ;11891
00003c  f1b80f01          CMP      r8,#1                 ;11781
000040  d008              BEQ      |L280.84|
000042  f04f080c          MOV      r8,#0xc               ;11806
;;;11929  					break;
;;;11930  
;;;11931  				// 恢复出厂
;;;11932  				case 6:
;;;11933  
;;;11934  					break;
;;;11935  
;;;11936  				default:
;;;11937  					break;
;;;11938  			}
;;;11939  		}
;;;11940  		else
;;;11941  		{
;;;11942  			switch (displayStateCB.menu.advanced.cursor)
000046  2f06              CMP      r7,#6
000048  d26a              BCS      |L280.288|
00004a  e8dff007          TBB      [pc,r7]
00004e  baef              DCB      0xba,0xef
000050  eeedeceb          DCB      0xee,0xed,0xec,0xeb
                  |L280.84|
000054  2f06              CMP      r7,#6                 ;11783
000056  d263              BCS      |L280.288|
000058  e8dff007          TBB      [pc,r7]               ;11783
00005c  0364717d          DCB      0x03,0x64,0x71,0x7d
000060  a3aa              DCB      0xa3,0xaa
000062  2a01              CMP      r2,#1                 ;11787
000064  d115              BNE      |L280.146|
000066  1c6d              ADDS     r5,r5,#1              ;11789
000068  b2e8              UXTB     r0,r5                 ;11789
00006a  f884028c          STRB     r0,[r4,#0x28c]        ;11789
00006e  280d              CMP      r0,#0xd               ;11790
000070  d102              BNE      |L280.120|
000072  200e              MOVS     r0,#0xe               ;11792
000074  f884028c          STRB     r0,[r4,#0x28c]        ;11792
                  |L280.120|
000078  f894028c          LDRB     r0,[r4,#0x28c]        ;11795  ; paramCB
00007c  2810              CMP      r0,#0x10              ;11795
00007e  d101              BNE      |L280.132|
000080  f884b28c          STRB     r11,[r4,#0x28c]       ;11797
                  |L280.132|
000084  f894028c          LDRB     r0,[r4,#0x28c]        ;11800  ; paramCB
000088  2812              CMP      r0,#0x12              ;11800
00008a  d102              BNE      |L280.146|
00008c  2007              MOVS     r0,#7                 ;11802
00008e  f884028c          STRB     r0,[r4,#0x28c]        ;11802
                  |L280.146|
000092  f894028c          LDRB     r0,[r4,#0x28c]        ;11806  ; paramCB
000096  1fc0              SUBS     r0,r0,#7              ;11806
000098  280b              CMP      r0,#0xb               ;11806
00009a  d22c              BCS      |L280.246|
00009c  e8dff000          TBB      [pc,r0]               ;11806
0000a0  060a0e12          DCB      0x06,0x0a,0x0e,0x12
0000a4  161a2b1f          DCB      0x16,0x1a,0x2b,0x1f
0000a8  222b2800          DCB      0x22,0x2b,0x28,0x00
0000ac  20a0              MOVS     r0,#0xa0              ;11809
0000ae  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11809
0000b2  e024              B        |L280.254|
0000b4  20b4              MOVS     r0,#0xb4              ;11813
0000b6  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11813
0000ba  e020              B        |L280.254|
0000bc  20c8              MOVS     r0,#0xc8              ;11817
0000be  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11817
0000c2  e01c              B        |L280.254|
0000c4  20dc              MOVS     r0,#0xdc              ;11821
0000c6  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11821
0000ca  e018              B        |L280.254|
0000cc  20f0              MOVS     r0,#0xf0              ;11825
0000ce  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11825
0000d2  e014              B        |L280.254|
0000d4  f44f7082          MOV      r0,#0x104             ;11829
0000d8  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11829
0000dc  e00f              B        |L280.254|
0000de  f8a492b6          STRH     r9,[r4,#0x2b6]        ;11833
0000e2  e00c              B        |L280.254|
0000e4  f44f708c          MOV      r0,#0x118             ;11837
0000e8  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11837
0000ec  e007              B        |L280.254|
                  |L280.238|
0000ee  e11b              B        |L280.808|
0000f0  f8a492b6          STRH     r9,[r4,#0x2b6]        ;11841
0000f4  e003              B        |L280.254|
                  |L280.246|
0000f6  f44f7082          MOV      r0,#0x104             ;11845
0000fa  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11845
                  |L280.254|
0000fe  f8b402b6          LDRH     r0,[r4,#0x2b6]        ;11848  ; paramCB
000102  f7fffffe          BL       __aeabi_ui2f
000106  49a2              LDR      r1,|L280.912|
000108  f7fffffe          BL       __aeabi_fmul
00010c  49a1              LDR      r1,|L280.916|
00010e  f7fffffe          BL       __aeabi_fmul
000112  49a1              LDR      r1,|L280.920|
000114  f7fffffe          BL       __aeabi_fmul
000118  f7fffffe          BL       __aeabi_f2uiz
00011c  f8a402ba          STRH     r0,[r4,#0x2ba]        ;11848
                  |L280.288|
;;;11943  			{
;;;11944  				// 轮径调节
;;;11945  				case 0:
;;;11946  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11947  					{
;;;11948  						if (PARAM_WHEEL_SIZE_16_INCH == paramCB.nvm.param.protocol.wheelSizeID)
;;;11949  						{
;;;11950  							paramCB.nvm.param.protocol.wheelSizeID=PARAM_WHEEL_SIZE_700C;
;;;11951  						}
;;;11952  						else 
;;;11953  						{
;;;11954  							paramCB.nvm.param.protocol.wheelSizeID--;
;;;11955  						}
;;;11956  						
;;;11957  						if (PARAM_WHEEL_SIZE_27_INCH == paramCB.nvm.param.protocol.wheelSizeID)
;;;11958  						{
;;;11959  							paramCB.nvm.param.protocol.wheelSizeID=PARAM_WHEEL_SIZE_26_INCH;		
;;;11960  						}
;;;11961  
;;;11962  						if (PARAM_WHEEL_SIZE_29_INCH == paramCB.nvm.param.protocol.wheelSizeID)
;;;11963  						{
;;;11964  							paramCB.nvm.param.protocol.wheelSizeID=PARAM_WHEEL_SIZE_28_INCH;		
;;;11965  						}
;;;11966  					}
;;;11967  					switch (PARAM_GetWheelSizeID())
;;;11968  					{
;;;11969  						case PARAM_WHEEL_SIZE_16_INCH:
;;;11970  							paramCB.nvm.param.protocol.newWheelSizeInch = 160;
;;;11971  							break;
;;;11972  
;;;11973  						case PARAM_WHEEL_SIZE_18_INCH:
;;;11974  							paramCB.nvm.param.protocol.newWheelSizeInch = 180;
;;;11975  							break;
;;;11976  
;;;11977  						case PARAM_WHEEL_SIZE_20_INCH:
;;;11978  							paramCB.nvm.param.protocol.newWheelSizeInch = 200;
;;;11979  							break;
;;;11980  
;;;11981  						case PARAM_WHEEL_SIZE_22_INCH:
;;;11982  							paramCB.nvm.param.protocol.newWheelSizeInch = 220;
;;;11983  							break;
;;;11984  
;;;11985  						case PARAM_WHEEL_SIZE_24_INCH:
;;;11986  							paramCB.nvm.param.protocol.newWheelSizeInch = 240;
;;;11987  							break;
;;;11988  
;;;11989  						case PARAM_WHEEL_SIZE_26_INCH:
;;;11990  							paramCB.nvm.param.protocol.newWheelSizeInch = 260;
;;;11991  							break;
;;;11992  
;;;11993  						case PARAM_WHEEL_SIZE_27_5_INCH:
;;;11994  							paramCB.nvm.param.protocol.newWheelSizeInch = 275;
;;;11995  							break;
;;;11996  
;;;11997  						case PARAM_WHEEL_SIZE_28_INCH:
;;;11998  							paramCB.nvm.param.protocol.newWheelSizeInch = 280;
;;;11999  							break;
;;;12000  
;;;12001  						case PARAM_WHEEL_SIZE_700C:
;;;12002  							paramCB.nvm.param.protocol.newWheelSizeInch = 275;
;;;12003  							break;
;;;12004  							
;;;12005  						default:
;;;12006  							paramCB.nvm.param.protocol.newWheelSizeInch = 260;
;;;12007  							break;
;;;12008  					}
;;;12009  					paramCB.nvm.param.protocol.newPerimeter = paramCB.nvm.param.protocol.newWheelSizeInch*0.1f*25.4f*3.14f;
;;;12010  					return;
;;;12011  
;;;12012  				// 周长调节
;;;12013  				case 1:
;;;12014  					switch (displayStateCB.menu.advanced.cursorEnter)
;;;12015  					{
;;;12016  						/*case 1:
;;;12017  							if (0 == paramCB.nvm.param.protocol.newWheelSizeInch)
;;;12018  							{
;;;12019  								paramCB.nvm.param.protocol.newPerimeter=9999;
;;;12020  							}
;;;12021  							else
;;;12022  							{
;;;12023  								paramCB.nvm.param.protocol.newPerimeter-=100;
;;;12024  							}
;;;12025  		
;;;12026  							break;*/
;;;12027  
;;;12028  						case 1:
;;;12029  							if (0 == paramCB.nvm.param.protocol.newWheelSizeInch)
;;;12030  							{
;;;12031  								paramCB.nvm.param.protocol.newPerimeter=9999;
;;;12032  							}
;;;12033  							else
;;;12034  							{
;;;12035  								paramCB.nvm.param.protocol.newPerimeter--;
;;;12036  							}
;;;12037  							break;
;;;12038  
;;;12039  						default:
;;;12040  							break;
;;;12041  					}
;;;12042  					break;
;;;12043  
;;;12044  				// 测速磁钢
;;;12045  				case 2:
;;;12046  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;12047  					{
;;;12048  						if (1 == paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor)
;;;12049  						{
;;;12050  							paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor = 12;
;;;12051  						}
;;;12052  						else
;;;12053  						{
;;;12054  							paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor--;
;;;12055  						}
;;;12056  					}
;;;12057  					break;
;;;12058  
;;;12059  				// 电池电压
;;;12060  				case 3:
;;;12061  					if (24 == paramCB.nvm.param.common.battery.voltage)
;;;12062  					{
;;;12063  						paramCB.nvm.param.common.battery.voltage = 72;
;;;12064  					}
;;;12065  					else if (36 == paramCB.nvm.param.common.battery.voltage)
;;;12066  					{
;;;12067  						paramCB.nvm.param.common.battery.voltage = 24;
;;;12068  					}
;;;12069  					else if (48 == paramCB.nvm.param.common.battery.voltage)
;;;12070  					{
;;;12071  						paramCB.nvm.param.common.battery.voltage = 36;
;;;12072  					}
;;;12073  					else if (52 == paramCB.nvm.param.common.battery.voltage)
;;;12074  					{
;;;12075  						paramCB.nvm.param.common.battery.voltage = 48;
;;;12076  					}
;;;12077  					else if (60 == paramCB.nvm.param.common.battery.voltage)
;;;12078  					{
;;;12079  						paramCB.nvm.param.common.battery.voltage = 52;
;;;12080  					}
;;;12081  					else if (72 == paramCB.nvm.param.common.battery.voltage)
;;;12082  					{
;;;12083  						paramCB.nvm.param.common.battery.voltage = 60;
;;;12084  					}
;;;12085  					else
;;;12086  					{
;;;12087  						paramCB.nvm.param.common.battery.voltage = 24;
;;;12088  					}
;;;12089  					break;
;;;12090  
;;;12091  				// 推车助力开关
;;;12092  				case 4:
;;;12093  					paramCB.nvm.param.common.pushAssistSwitch = !paramCB.nvm.param.common.pushAssistSwitch;
;;;12094  					break;
;;;12095  
;;;12096  				// 转把分档
;;;12097  				case 5:
;;;12098  					paramCB.nvm.param.protocol.driver.turnBarLevel = !paramCB.nvm.param.protocol.driver.turnBarLevel;
;;;12099  					break;
;;;12100  
;;;12101  				// 恢复出厂
;;;12102  				case 6:
;;;12103  
;;;12104  					break;
;;;12105  
;;;12106  				default:
;;;12107  					break;
;;;12108  			}
;;;12109  		}
;;;12110  	}
;;;12111  	else
;;;12112  	{
;;;12113  		DISPLAY_ResumeValue( DISPLAY_MENU_ADV_PARAM_WHEEL_SIZE);
;;;12114  		DISPLAY_ResumeValue( DISPLAY_MENU_ADV_PARAM_WHEEL_METER);
;;;12115  		DISPLAY_ResumeValue( DISPLAY_MENU_ADV_PARAM_SPEED_SENSOR);
;;;12116  		DISPLAY_ResumeValue( DISPLAY_MENU_ADV_PARAM_VOL);
;;;12117  		DISPLAY_ResumeValue( DISPLAY_MENU_ADV_PARAM_WALK_MODE);
;;;12118  		DISPLAY_ResumeValue( DISPLAY_MENU_ADV_PARAM_TURN_HANDLE);
;;;12119  		DISPLAY_ResumeValue( DISPLAY_MENU_ADV_PARAM_RESET);
;;;12120  		
;;;12121  		// 调整光标
;;;12122  		// +
;;;12123  		if (DISPLAY_MENU_TUNE_PREVIOUS == param)
;;;12124  		{
;;;12125  			if (0 == displayStateCB.menu.advanced.cursor)
;;;12126  			{
;;;12127  				displayStateCB.menu.advanced.cursor = 7;
;;;12128  			}
;;;12129  			else
;;;12130  			{
;;;12131  				displayStateCB.menu.advanced.cursor--;
;;;12132  			}
;;;12133  		}
;;;12134  		// -
;;;12135  		else
;;;12136  		{
;;;12137  			displayStateCB.menu.advanced.cursor++;
;;;12138  			if (displayStateCB.menu.advanced.cursor == 8)
;;;12139  			{
;;;12140  				displayStateCB.menu.advanced.cursor = 0;
;;;12141  			}
;;;12142  		}
;;;12143  	}
;;;12144  	
;;;12145  	//displayStateCB.menu.advanced.cursorEnter = 0;
;;;12146  }
000120  e8bd9ff0          POP      {r4-r12,pc}
000124  2a01              CMP      r2,#1                 ;11854
000126  d1fb              BNE      |L280.288|
000128  1c76              ADDS     r6,r6,#1              ;11862
00012a  b2b0              UXTH     r0,r6                 ;11862
00012c  f2427110          MOV      r1,#0x2710            ;11863
000130  fbb0f2f1          UDIV     r2,r0,r1              ;11863
000134  fb010012          MLS      r0,r1,r2,r0           ;11863
000138  f8a402ba          STRH     r0,[r4,#0x2ba]        ;11863
00013c  e7f0              B        |L280.288|
00013e  2a01              CMP      r2,#1                 ;11873
000140  d1ee              BNE      |L280.288|
000142  2b0c              CMP      r3,#0xc               ;11876
000144  d003              BEQ      |L280.334|
000146  1c5b              ADDS     r3,r3,#1              ;11882
000148  f88432f9          STRB     r3,[r4,#0x2f9]        ;11882
00014c  e7e8              B        |L280.288|
                  |L280.334|
00014e  2001              MOVS     r0,#1                 ;11878
000150  f88402f9          STRB     r0,[r4,#0x2f9]        ;11878
000154  e7e4              B        |L280.288|
000156  2918              CMP      r1,#0x18              ;11891
000158  d00c              BEQ      |L280.372|
00015a  2924              CMP      r1,#0x24              ;11895
00015c  d00e              BEQ      |L280.380|
00015e  2930              CMP      r1,#0x30              ;11899
000160  d010              BEQ      |L280.388|
000162  2934              CMP      r1,#0x34              ;11903
000164  d012              BEQ      |L280.396|
000166  293c              CMP      r1,#0x3c              ;11907
000168  d014              BEQ      |L280.404|
00016a  2948              CMP      r1,#0x48              ;11911
00016c  d016              BEQ      |L280.412|
00016e  f884a338          STRB     r10,[r4,#0x338]       ;11917
000172  e7d5              B        |L280.288|
                  |L280.372|
000174  2024              MOVS     r0,#0x24              ;11893
000176  f8840338          STRB     r0,[r4,#0x338]        ;11893
00017a  e7d1              B        |L280.288|
                  |L280.380|
00017c  2030              MOVS     r0,#0x30              ;11897
00017e  f8840338          STRB     r0,[r4,#0x338]        ;11897
000182  e7cd              B        |L280.288|
                  |L280.388|
000184  2034              MOVS     r0,#0x34              ;11901
000186  f8840338          STRB     r0,[r4,#0x338]        ;11901
00018a  e7c9              B        |L280.288|
                  |L280.396|
00018c  203c              MOVS     r0,#0x3c              ;11905
00018e  f8840338          STRB     r0,[r4,#0x338]        ;11905
000192  e7c5              B        |L280.288|
                  |L280.404|
000194  2048              MOVS     r0,#0x48              ;11909
000196  f8840338          STRB     r0,[r4,#0x338]        ;11909
                  |L280.410|
00019a  e7c1              B        |L280.288|
                  |L280.412|
00019c  f884a338          STRB     r10,[r4,#0x338]       ;11913
0001a0  e7be              B        |L280.288|
0001a2  b118              CBZ      r0,|L280.428|
0001a4  2000              MOVS     r0,#0                 ;11923
                  |L280.422|
0001a6  f8840325          STRB     r0,[r4,#0x325]        ;11923
0001aa  e7b9              B        |L280.288|
                  |L280.428|
0001ac  2001              MOVS     r0,#1                 ;11923
0001ae  e7fa              B        |L280.422|
0001b0  f1bc0f00          CMP      r12,#0                ;11928
0001b4  d003              BEQ      |L280.446|
0001b6  2000              MOVS     r0,#0                 ;11928
                  |L280.440|
0001b8  f88402fe          STRB     r0,[r4,#0x2fe]        ;11928
                  |L280.444|
0001bc  e7b0              B        |L280.288|
                  |L280.446|
0001be  2001              MOVS     r0,#1                 ;11928
0001c0  e7fa              B        |L280.440|
0001c2  2a01              CMP      r2,#1                 ;11946
0001c4  d115              BNE      |L280.498|
0001c6  2d07              CMP      r5,#7                 ;11948
0001c8  d007              BEQ      |L280.474|
0001ca  1e6d              SUBS     r5,r5,#1              ;11954
0001cc  f884528c          STRB     r5,[r4,#0x28c]        ;11954
                  |L280.464|
0001d0  f894028c          LDRB     r0,[r4,#0x28c]        ;11957  ; paramCB
0001d4  280d              CMP      r0,#0xd               ;11957
0001d6  d003              BEQ      |L280.480|
0001d8  e004              B        |L280.484|
                  |L280.474|
0001da  f884b28c          STRB     r11,[r4,#0x28c]       ;11950
0001de  e7f7              B        |L280.464|
                  |L280.480|
0001e0  f884828c          STRB     r8,[r4,#0x28c]        ;11959
                  |L280.484|
0001e4  f894028c          LDRB     r0,[r4,#0x28c]        ;11962  ; paramCB
0001e8  2810              CMP      r0,#0x10              ;11962
0001ea  d102              BNE      |L280.498|
0001ec  200f              MOVS     r0,#0xf               ;11964
0001ee  f884028c          STRB     r0,[r4,#0x28c]        ;11964
                  |L280.498|
0001f2  f894028c          LDRB     r0,[r4,#0x28c]        ;11967  ; paramCB
0001f6  1fc0              SUBS     r0,r0,#7              ;11967
0001f8  280b              CMP      r0,#0xb               ;11967
0001fa  d230              BCS      |L280.606|
0001fc  e8dff000          TBB      [pc,r0]               ;11967
000200  060a0e17          DCB      0x06,0x0a,0x0e,0x17
000204  1b1f2f24          DCB      0x1b,0x1f,0x2f,0x24
000208  272f2c00          DCB      0x27,0x2f,0x2c,0x00
00020c  20a0              MOVS     r0,#0xa0              ;11970
00020e  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11970
000212  e028              B        |L280.614|
000214  20b4              MOVS     r0,#0xb4              ;11974
000216  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11974
00021a  e024              B        |L280.614|
00021c  20c8              MOVS     r0,#0xc8              ;11978
00021e  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11978
000222  e020              B        |L280.614|
000224  e077              B        |L280.790|
000226  e06f              B        |L280.776|
000228  e048              B        |L280.700|
00022a  e03c              B        |L280.678|
00022c  e02d              B        |L280.650|
00022e  20dc              MOVS     r0,#0xdc              ;11982
000230  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11982
000234  e017              B        |L280.614|
000236  20f0              MOVS     r0,#0xf0              ;11986
000238  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11986
00023c  e013              B        |L280.614|
00023e  f44f7082          MOV      r0,#0x104             ;11990
000242  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11990
000246  e00e              B        |L280.614|
000248  f8a492b6          STRH     r9,[r4,#0x2b6]        ;11994
00024c  e00b              B        |L280.614|
00024e  f44f708c          MOV      r0,#0x118             ;11998
000252  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11998
000256  e006              B        |L280.614|
000258  f8a492b6          STRH     r9,[r4,#0x2b6]        ;12002
00025c  e003              B        |L280.614|
                  |L280.606|
00025e  f44f7082          MOV      r0,#0x104             ;12006
000262  f8a402b6          STRH     r0,[r4,#0x2b6]        ;12006
                  |L280.614|
000266  f8b402b6          LDRH     r0,[r4,#0x2b6]        ;12009  ; paramCB
00026a  f7fffffe          BL       __aeabi_ui2f
00026e  4948              LDR      r1,|L280.912|
000270  f7fffffe          BL       __aeabi_fmul
000274  4947              LDR      r1,|L280.916|
000276  f7fffffe          BL       __aeabi_fmul
00027a  4947              LDR      r1,|L280.920|
00027c  f7fffffe          BL       __aeabi_fmul
000280  f7fffffe          BL       __aeabi_f2uiz
000284  f8a402ba          STRH     r0,[r4,#0x2ba]        ;12009
                  |L280.648|
000288  e74a              B        |L280.288|
                  |L280.650|
00028a  2a01              CMP      r2,#1                 ;12014
00028c  d185              BNE      |L280.410|
00028e  f8b402b6          LDRH     r0,[r4,#0x2b6]        ;12029  ; paramCB
000292  b118              CBZ      r0,|L280.668|
000294  1e76              SUBS     r6,r6,#1              ;12035
000296  f8a462ba          STRH     r6,[r4,#0x2ba]        ;12035
00029a  e741              B        |L280.288|
                  |L280.668|
00029c  f242700f          MOV      r0,#0x270f            ;12031
0002a0  f8a402ba          STRH     r0,[r4,#0x2ba]        ;12031
0002a4  e73c              B        |L280.288|
                  |L280.678|
0002a6  2a01              CMP      r2,#1                 ;12046
0002a8  d188              BNE      |L280.444|
0002aa  2b01              CMP      r3,#1                 ;12048
0002ac  d003              BEQ      |L280.694|
0002ae  1e5b              SUBS     r3,r3,#1              ;12054
0002b0  f88432f9          STRB     r3,[r4,#0x2f9]        ;12054
0002b4  e734              B        |L280.288|
                  |L280.694|
0002b6  f88482f9          STRB     r8,[r4,#0x2f9]        ;12050
0002ba  e731              B        |L280.288|
                  |L280.700|
0002bc  2918              CMP      r1,#0x18              ;12061
0002be  d00c              BEQ      |L280.730|
0002c0  2924              CMP      r1,#0x24              ;12065
0002c2  d00e              BEQ      |L280.738|
0002c4  2930              CMP      r1,#0x30              ;12069
0002c6  d00f              BEQ      |L280.744|
0002c8  2934              CMP      r1,#0x34              ;12073
0002ca  d011              BEQ      |L280.752|
0002cc  293c              CMP      r1,#0x3c              ;12077
0002ce  d013              BEQ      |L280.760|
0002d0  2948              CMP      r1,#0x48              ;12081
0002d2  d015              BEQ      |L280.768|
0002d4  f884a338          STRB     r10,[r4,#0x338]       ;12087
0002d8  e722              B        |L280.288|
                  |L280.730|
0002da  2048              MOVS     r0,#0x48              ;12063
0002dc  f8840338          STRB     r0,[r4,#0x338]        ;12063
0002e0  e71e              B        |L280.288|
                  |L280.738|
0002e2  f884a338          STRB     r10,[r4,#0x338]       ;12067
0002e6  e71b              B        |L280.288|
                  |L280.744|
0002e8  2024              MOVS     r0,#0x24              ;12071
0002ea  f8840338          STRB     r0,[r4,#0x338]        ;12071
0002ee  e717              B        |L280.288|
                  |L280.752|
0002f0  2030              MOVS     r0,#0x30              ;12075
0002f2  f8840338          STRB     r0,[r4,#0x338]        ;12075
0002f6  e713              B        |L280.288|
                  |L280.760|
0002f8  2034              MOVS     r0,#0x34              ;12079
0002fa  f8840338          STRB     r0,[r4,#0x338]        ;12079
0002fe  e70f              B        |L280.288|
                  |L280.768|
000300  203c              MOVS     r0,#0x3c              ;12083
000302  f8840338          STRB     r0,[r4,#0x338]        ;12083
000306  e70b              B        |L280.288|
                  |L280.776|
000308  b118              CBZ      r0,|L280.786|
00030a  2000              MOVS     r0,#0                 ;12093
                  |L280.780|
00030c  f8840325          STRB     r0,[r4,#0x325]        ;12093
000310  e706              B        |L280.288|
                  |L280.786|
000312  2001              MOVS     r0,#1                 ;12093
000314  e7fa              B        |L280.780|
                  |L280.790|
000316  f1bc0f00          CMP      r12,#0                ;12098
00031a  d003              BEQ      |L280.804|
00031c  2000              MOVS     r0,#0                 ;12098
                  |L280.798|
00031e  f88402fe          STRB     r0,[r4,#0x2fe]        ;12098
000322  e6fd              B        |L280.288|
                  |L280.804|
000324  2001              MOVS     r0,#1                 ;12098
000326  e7fa              B        |L280.798|
                  |L280.808|
000328  2064              MOVS     r0,#0x64              ;12113
00032a  f7fffffe          BL       DISPLAY_ResumeValue
00032e  2065              MOVS     r0,#0x65              ;12114
000330  f7fffffe          BL       DISPLAY_ResumeValue
000334  2066              MOVS     r0,#0x66              ;12115
000336  f7fffffe          BL       DISPLAY_ResumeValue
00033a  2067              MOVS     r0,#0x67              ;12116
00033c  f7fffffe          BL       DISPLAY_ResumeValue
000340  2068              MOVS     r0,#0x68              ;12117
000342  f7fffffe          BL       DISPLAY_ResumeValue
000346  2069              MOVS     r0,#0x69              ;12118
000348  f7fffffe          BL       DISPLAY_ResumeValue
00034c  206a              MOVS     r0,#0x6a              ;12119
00034e  f7fffffe          BL       DISPLAY_ResumeValue
000352  f1b80f01          CMP      r8,#1                 ;12123
000356  d00b              BEQ      |L280.880|
000358  f8940b4a          LDRB     r0,[r4,#0xb4a]        ;12137  ; displayStateCB
00035c  1c40              ADDS     r0,r0,#1              ;12137
00035e  b2c0              UXTB     r0,r0                 ;12137
000360  f8840b4a          STRB     r0,[r4,#0xb4a]        ;12137
000364  2808              CMP      r0,#8                 ;12138
000366  d18f              BNE      |L280.648|
000368  2000              MOVS     r0,#0                 ;12140
00036a  f8840b4a          STRB     r0,[r4,#0xb4a]        ;12140
00036e  e6d7              B        |L280.288|
                  |L280.880|
000370  f8940b4a          LDRB     r0,[r4,#0xb4a]        ;12125  ; displayStateCB
000374  b118              CBZ      r0,|L280.894|
000376  1e40              SUBS     r0,r0,#1              ;12131
000378  f8840b4a          STRB     r0,[r4,#0xb4a]        ;12131
00037c  e6d0              B        |L280.288|
                  |L280.894|
00037e  2007              MOVS     r0,#7                 ;12127
000380  f8840b4a          STRB     r0,[r4,#0xb4a]        ;12127
000384  e6cc              B        |L280.288|
;;;12147  
                          ENDP

000386  0000              DCW      0x0000
                  |L280.904|
                          DCD      ||.bss||
                  |L280.908|
                          DCD      paramCB
                  |L280.912|
                          DCD      0x3dcccccd
                  |L280.916|
                          DCD      0x41cb3333
                  |L280.920|
                          DCD      0x4048f5c3

                          AREA ||i.DISPLAY_Menu1_Advanced_Choose_Enter||, CODE, READONLY, ALIGN=2

                  DISPLAY_Menu1_Advanced_Choose_Enter PROC
;;;11734  // 调整高级菜单1确认
;;;11735  void DISPLAY_Menu1_Advanced_Choose_Enter(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;11736  {
;;;11737  	switch (displayStateCB.menu.advanced.cursor)
000002  4c14              LDR      r4,|L281.84|
000004  f8940b4a          LDRB     r0,[r4,#0xb4a]  ; displayStateCB
000008  2808              CMP      r0,#8
00000a  d216              BCS      |L281.58|
00000c  e8dff000          TBB      [pc,r0]
000010  04040404          DCB      0x04,0x04,0x04,0x04
000014  04040e12          DCB      0x04,0x04,0x0e,0x12
;;;11738  	{
;;;11739  		case 0:
;;;11740  		case 1:
;;;11741  		case 2:
;;;11742  		case 3:
;;;11743  		case 4:
;;;11744  		case 5:
;;;11745  			if (displayStateCB.menu.advanced.cursorEnter > 0)
000018  f8940b4b          LDRB     r0,[r4,#0xb4b]  ; displayStateCB
00001c  b168              CBZ      r0,|L281.58|
;;;11746  			{								
;;;11747  				// NVM更新，立即写入
;;;11748  				NVM_SetDirtyFlag(TRUE);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       NVM_SetDirtyFlag
;;;11749  				
;;;11750  				displayStateCB.menu.advanced.cursorEnter = 0;
000024  2000              MOVS     r0,#0
000026  f8840b4b          STRB     r0,[r4,#0xb4b]
;;;11751  				return;
;;;11752  			}
;;;11753  			break;
;;;11754  
;;;11755  		// 恢复出厂
;;;11756  		case 6:
;;;11757  			STATE_EnterState(STATE_MENU_CLEAR_FACTORY_RESET);
;;;11758  
;;;11759  			break;
;;;11760  
;;;11761  		// 返回
;;;11762  		case 7:
;;;11763  			STATE_EnterState(STATE_SHOW_POWER_OFF);
;;;11764  			break;
;;;11765  
;;;11766  		default:
;;;11767  
;;;11768  			break;
;;;11769  	}
;;;11770  	displayStateCB.menu.advanced.cursorEnter++;
;;;11771  	displayStateCB.menu.advanced.cursorEnter%=3;
;;;11772  }
00002a  bd10              POP      {r4,pc}
00002c  2015              MOVS     r0,#0x15              ;11757
00002e  f7fffffe          BL       STATE_EnterState
000032  e002              B        |L281.58|
000034  2007              MOVS     r0,#7                 ;11763
000036  f7fffffe          BL       STATE_EnterState
                  |L281.58|
00003a  f8940b4b          LDRB     r0,[r4,#0xb4b]        ;11770  ; displayStateCB
00003e  1c40              ADDS     r0,r0,#1              ;11770
000040  b2c0              UXTB     r0,r0                 ;11770
000042  2103              MOVS     r1,#3                 ;11771
000044  fbb0f2f1          UDIV     r2,r0,r1              ;11771
000048  fb010012          MLS      r0,r1,r2,r0           ;11771
00004c  f8840b4b          STRB     r0,[r4,#0xb4b]        ;11771
000050  bd10              POP      {r4,pc}
;;;11773  
                          ENDP

000052  0000              DCW      0x0000
                  |L281.84|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_Menu1_Advanced_Reset_Choose||, CODE, READONLY, ALIGN=2

                  DISPLAY_Menu1_Advanced_Reset_Choose PROC
;;;11721  // 调整高级菜单1恢复出厂设置
;;;11722  void DISPLAY_Menu1_Advanced_Reset_Choose(uint32 param)
000000  4806              LDR      r0,|L282.28|
;;;11723  {
;;;11724  	if (0 == displayStateCB.menu.advanced.cursor)
000002  f8901b4a          LDRB     r1,[r0,#0xb4a]  ; displayStateCB
000006  2900              CMP      r1,#0
000008  d003              BEQ      |L282.18|
;;;11725  	{
;;;11726  		displayStateCB.menu.advanced.cursor=1;
;;;11727  	}
;;;11728  	else
;;;11729  	{
;;;11730  		displayStateCB.menu.advanced.cursor=0;
00000a  2100              MOVS     r1,#0
00000c  f8801b4a          STRB     r1,[r0,#0xb4a]
;;;11731  	}
;;;11732  }
000010  4770              BX       lr
                  |L282.18|
000012  2101              MOVS     r1,#1                 ;11726
000014  f8801b4a          STRB     r1,[r0,#0xb4a]        ;11726
000018  4770              BX       lr
;;;11733  
                          ENDP

00001a  0000              DCW      0x0000
                  |L282.28|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_Menu1_Advanced_Reset_Enter||, CODE, READONLY, ALIGN=2

                  DISPLAY_Menu1_Advanced_Reset_Enter PROC
;;;11706  
;;;11707  void DISPLAY_Menu1_Advanced_Reset_Enter(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;11708  {
;;;11709  	if (!(BOOL)displayStateCB.menu.advanced.cursor)
000002  4808              LDR      r0,|L283.36|
000004  f8900b4a          LDRB     r0,[r0,#0xb4a]  ; displayStateCB
000008  2800              CMP      r0,#0
00000a  d105              BNE      |L283.24|
;;;11710  	{
;;;11711  		// 恢复出厂数据
;;;11712  		NVM_Load_FactoryReset();
00000c  f7fffffe          BL       NVM_Load_FactoryReset
;;;11713  
;;;11714  		// 恢复出厂设置时，菜单密码设置为有
;;;11715  		paramCB.nvm.param.protocol.menuPasswordSwitch = 0;
000010  4905              LDR      r1,|L283.40|
000012  2000              MOVS     r0,#0
000014  f88102cd          STRB     r0,[r1,#0x2cd]
                  |L283.24|
;;;11716  	}
;;;11717  	
;;;11718  	STATE_EnterState(STATE_MENU_ADV_MENU_INFO1);
000018  e8bd4010          POP      {r4,lr}
00001c  2023              MOVS     r0,#0x23
00001e  f7ffbffe          B.W      STATE_EnterState
;;;11719  }
;;;11720  
                          ENDP

000022  0000              DCW      0x0000
                  |L283.36|
                          DCD      ||.bss||
                  |L283.40|
                          DCD      paramCB

                          AREA ||i.DISPLAY_Menu2_Advanced_Choose||, CODE, READONLY, ALIGN=2

                  DISPLAY_Menu2_Advanced_Choose PROC
;;;11419  // 调整高级菜单2
;;;11420  void DISPLAY_Menu2_Advanced_Choose(uint32 param)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;11421  {
;;;11422  	// 调整参数
;;;11423  	if (displayStateCB.menu.advanced.cursorEnter > 0)
000004  4993              LDR      r1,|L284.596|
000006  460b              MOV      r3,r1
000008  f8912b4b          LDRB     r2,[r1,#0xb4b]  ; displayStateCB
;;;11424  	{
;;;11425  		if (DISPLAY_MENU_TUNE_PREVIOUS == param)
;;;11426  		{
;;;11427  			switch (displayStateCB.menu.advanced.cursor)
00000c  f8935b4a          LDRB     r5,[r3,#0xb4a]
000010  2a00              CMP      r2,#0                 ;11423
000012  d078              BEQ      |L284.262|
;;;11428  			{
;;;11429  				// 轮径调节
;;;11430  				case 0:
;;;11431  					switch (displayStateCB.menu.advanced.cursorEnter)
;;;11432  					{
;;;11433  						case 1:
;;;11434  							paramCB.nvm.param.protocol.newWheelSizeInch+=10;
000014  4c91              LDR      r4,|L284.604|
;;;11435  							paramCB.nvm.param.protocol.newWheelSizeInch%=1000;
;;;11436  							break;
;;;11437  
;;;11438  						case 2:
;;;11439  							paramCB.nvm.param.protocol.newWheelSizeInch+=5;
;;;11440  							paramCB.nvm.param.protocol.newWheelSizeInch%=1000;
;;;11441  							break;
;;;11442  
;;;11443  						default:
;;;11444  							break;
;;;11445  					}
;;;11446  					paramCB.nvm.param.protocol.newPerimeter = paramCB.nvm.param.protocol.newWheelSizeInch*0.1f*25.4f*3.14f;
000016  f8df8240          LDR      r8,|L284.600|
;;;11447  					
;;;11448  					break;
;;;11449  
;;;11450  				// 周长调节
;;;11451  				case 1:
;;;11452  					switch (displayStateCB.menu.advanced.cursorEnter)
;;;11453  					{
;;;11454  						case 1:
;;;11455  							paramCB.nvm.param.protocol.newPerimeter+=100;
;;;11456  							paramCB.nvm.param.protocol.newPerimeter%=10000;
;;;11457  							break;
;;;11458  
;;;11459  						case 2:
;;;11460  							paramCB.nvm.param.protocol.newPerimeter+=1;
;;;11461  							paramCB.nvm.param.protocol.newPerimeter%=10000;
;;;11462  							break;
;;;11463  
;;;11464  						default:
;;;11465  							break;
;;;11466  					}
;;;11467  					break;
;;;11468  
;;;11469  				// 电池电压等级调节
;;;11470  				case 2:
;;;11471  					
;;;11472  					break;
;;;11473  
;;;11474  				// 测数磁钢数调节
;;;11475  				case 3:
;;;11476  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11477  					{
;;;11478  						paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor++;
;;;11479  						paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor%=100;
;;;11480  					}
;;;11481  
;;;11482  					return;
;;;11483  
;;;11484  				// 通信协议选择
;;;11485  				case 4:
;;;11486  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11487  					{
;;;11488  						paramCB.nvm.param.protocol.runProtocol++;
;;;11489  						paramCB.nvm.param.protocol.runProtocol%=100;
;;;11490  					}
;;;11491  
;;;11492  					return;
;;;11493  
;;;11494  				// 电量获取方式选择
;;;11495  				case 5:
;;;11496  					break;
;;;11497  				// 推车助力模式
;;;11498  				case 6:	
;;;11499  					break;
;;;11500  				// 串口电平选择
;;;11501  				case 7:
;;;11502  					break;
;;;11503  
;;;11504  				// 限流设置
;;;11505  				case 8:
;;;11506  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11507  					{
;;;11508  						paramCB.nvm.param.protocol.driver.currentLimit+=(1*1000);
;;;11509  						paramCB.nvm.param.protocol.driver.currentLimit%=(60*1000);
00001a  f64e2e60          MOV      lr,#0xea60
00001e  f8b462ba          LDRH     r6,[r4,#0x2ba]        ;11434
000022  f89472f9          LDRB     r7,[r4,#0x2f9]        ;11478
000026  f894c2bc          LDRB     r12,[r4,#0x2bc]       ;11488
00002a  f8b41300          LDRH     r1,[r4,#0x300]        ;11508
;;;11510  					}
;;;11511  
;;;11512  					return;
;;;11513  
;;;11514  				// 限速设置
;;;11515  				case 9:
;;;11516  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11517  					{
;;;11518  						paramCB.nvm.param.common.speed.limitVal+=(1*10);
00002e  f8b49334          LDRH     r9,[r4,#0x334]
000032  f8b432b6          LDRH     r3,[r4,#0x2b6]        ;11434
000036  2801              CMP      r0,#1                 ;11425
000038  d00c              BEQ      |L284.84|
;;;11519  						paramCB.nvm.param.common.speed.limitVal%=(100*10);
;;;11520  					}
;;;11521  
;;;11522  					return;
;;;11523  
;;;11524  				default:
;;;11525  					break;
;;;11526  			}
;;;11527  		}
;;;11528  		else
;;;11529  		{
;;;11530  			switch (displayStateCB.menu.advanced.cursor)
;;;11531  			{
;;;11532  				// 轮径调节
;;;11533  				case 0:
;;;11534  					switch (displayStateCB.menu.advanced.cursorEnter)
;;;11535  					{
;;;11536  						case 1:
;;;11537  							if (0 == paramCB.nvm.param.protocol.newWheelSizeInch)
;;;11538  							{
;;;11539  								paramCB.nvm.param.protocol.newWheelSizeInch=990;
00003a  f24030de          MOV      r0,#0x3de
;;;11540  							}
;;;11541  							else
;;;11542  							{
;;;11543  								paramCB.nvm.param.protocol.newWheelSizeInch-=10;
;;;11544  							}
;;;11545  							
;;;11546  							break;
;;;11547  
;;;11548  						case 2:
;;;11549  							if (0 == paramCB.nvm.param.protocol.newWheelSizeInch)
;;;11550  							{
;;;11551  								paramCB.nvm.param.protocol.newWheelSizeInch=990;
;;;11552  							}
;;;11553  							else
;;;11554  							{
;;;11555  								paramCB.nvm.param.protocol.newWheelSizeInch-=5;
;;;11556  							}
;;;11557  							break;
;;;11558  
;;;11559  						default:
;;;11560  							break;
;;;11561  					}
;;;11562  					paramCB.nvm.param.protocol.newPerimeter = paramCB.nvm.param.protocol.newWheelSizeInch*0.1f*25.4f*3.14f;
;;;11563  					break;
;;;11564  
;;;11565  				// 周长调节
;;;11566  				case 1:
;;;11567  					switch (displayStateCB.menu.advanced.cursorEnter)
;;;11568  					{
;;;11569  						case 1:
;;;11570  							if (0 == paramCB.nvm.param.protocol.newWheelSizeInch)
;;;11571  							{
;;;11572  								paramCB.nvm.param.protocol.newPerimeter=9999;
;;;11573  							}
;;;11574  							else
;;;11575  							{
;;;11576  								paramCB.nvm.param.protocol.newPerimeter-=100;
;;;11577  							}
;;;11578  		
;;;11579  							break;
;;;11580  
;;;11581  						case 2:
;;;11582  							if (0 == paramCB.nvm.param.protocol.newWheelSizeInch)
;;;11583  							{
;;;11584  								paramCB.nvm.param.protocol.newPerimeter=9999;
;;;11585  							}
;;;11586  							else
;;;11587  							{
;;;11588  								paramCB.nvm.param.protocol.newPerimeter--;
;;;11589  							}
;;;11590  							break;
;;;11591  
;;;11592  						default:
;;;11593  							break;
;;;11594  					}
;;;11595  					break;
;;;11596  				// 电池电压等级调节
;;;11597  				case 2:
;;;11598  					break;
;;;11599  
;;;11600  				// 测数磁钢数调节
;;;11601  				case 3:
;;;11602  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11603  					{
;;;11604  						if (0 == paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor)
;;;11605  						{
;;;11606  							paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor=99;
00003e  f04f0a63          MOV      r10,#0x63
000042  2d0a              CMP      r5,#0xa               ;11530
000044  d23a              BCS      |L284.188|
000046  e8dff005          TBB      [pc,r5]               ;11530
00004a  85ab              DCB      0x85,0xab
00004c  39c1cb39          DCB      0x39,0xc1,0xcb,0x39
000050  3939d8e3          DCB      0x39,0x39,0xd8,0xe3
                  |L284.84|
000054  f44f7a7a          MOV      r10,#0x3e8            ;11435
000058  f04f0b64          MOV      r11,#0x64             ;11479
00005c  2d0a              CMP      r5,#0xa               ;11427
00005e  d22d              BCS      |L284.188|
000060  e8dff005          TBB      [pc,r5]               ;11427
000064  052e2c46          DCB      0x05,0x2e,0x2c,0x46
000068  522c2c2c          DCB      0x52,0x2c,0x2c,0x2c
00006c  5f6b              DCB      0x5f,0x6b
00006e  2a01              CMP      r2,#1                 ;11431
000070  d002              BEQ      |L284.120|
000072  2a02              CMP      r2,#2                 ;11431
000074  d111              BNE      |L284.154|
000076  e008              B        |L284.138|
                  |L284.120|
000078  330a              ADDS     r3,r3,#0xa            ;11434
00007a  b298              UXTH     r0,r3                 ;11434
00007c  fbb0f1fa          UDIV     r1,r0,r10             ;11435
000080  fb0a0011          MLS      r0,r10,r1,r0          ;11435
000084  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11435
000088  e007              B        |L284.154|
                  |L284.138|
00008a  1d5b              ADDS     r3,r3,#5              ;11439
00008c  b298              UXTH     r0,r3                 ;11439
00008e  fbb0f1fa          UDIV     r1,r0,r10             ;11440
000092  fb0a0011          MLS      r0,r10,r1,r0          ;11440
000096  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11440
                  |L284.154|
00009a  f8b402b6          LDRH     r0,[r4,#0x2b6]        ;11446  ; paramCB
00009e  f7fffffe          BL       __aeabi_ui2f
0000a2  4641              MOV      r1,r8                 ;11446
0000a4  f7fffffe          BL       __aeabi_fmul
0000a8  496d              LDR      r1,|L284.608|
0000aa  f7fffffe          BL       __aeabi_fmul
0000ae  496d              LDR      r1,|L284.612|
0000b0  f7fffffe          BL       __aeabi_fmul
0000b4  f7fffffe          BL       __aeabi_f2uiz
0000b8  f8a402ba          STRH     r0,[r4,#0x2ba]        ;11446
                  |L284.188|
;;;11607  						}
;;;11608  						else
;;;11609  						{
;;;11610  							paramCB.nvm.param.protocol.driver.steelNumOfSpeedSensor--;
;;;11611  						}
;;;11612  					}
;;;11613  					return;
;;;11614  
;;;11615  				// 通信协议选择
;;;11616  				case 4:
;;;11617  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11618  					{
;;;11619  						if (0 == paramCB.nvm.param.protocol.runProtocol)
;;;11620  						{
;;;11621  							paramCB.nvm.param.protocol.runProtocol=99;
;;;11622  						}
;;;11623  						else
;;;11624  						{
;;;11625  							paramCB.nvm.param.protocol.runProtocol--;
;;;11626  						}
;;;11627  					}
;;;11628  					return;
;;;11629  					
;;;11630  				// 电量获取方式选择
;;;11631  				case 5:
;;;11632  					break;
;;;11633  				// 推车助力模式
;;;11634  				case 6:
;;;11635  					break;
;;;11636  				// 串口电平选择
;;;11637  				case 7:
;;;11638  					break;
;;;11639  					
;;;11640  				// 限流设置
;;;11641  				case 8:
;;;11642  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11643  					{
;;;11644  						if (0 == paramCB.nvm.param.protocol.driver.currentLimit)
;;;11645  						{
;;;11646  							paramCB.nvm.param.protocol.driver.currentLimit=60*1000;
;;;11647  						}
;;;11648  						else
;;;11649  						{
;;;11650  							paramCB.nvm.param.protocol.driver.currentLimit-=(1*1000);
;;;11651  						}
;;;11652  					}
;;;11653  					return;
;;;11654  
;;;11655  				// 限速设置
;;;11656  				case 9:
;;;11657  					if (1 == displayStateCB.menu.advanced.cursorEnter)
;;;11658  					{
;;;11659  						if (0 == paramCB.nvm.param.common.speed.limitVal)
;;;11660  						{
;;;11661  							paramCB.nvm.param.common.speed.limitVal=(99*10);
;;;11662  						}
;;;11663  						else
;;;11664  						{
;;;11665  							paramCB.nvm.param.common.speed.limitVal-=(1*10);
;;;11666  						}
;;;11667  					}
;;;11668  					return;
;;;11669  
;;;11670  				default:
;;;11671  					break;
;;;11672  			}
;;;11673  		}
;;;11674  		
;;;11675  	}
;;;11676  	else
;;;11677  	{
;;;11678  		// 调整光标
;;;11679  		// +
;;;11680  		if (DISPLAY_MENU_TUNE_PREVIOUS == param)
;;;11681  		{
;;;11682  			if (0 == displayStateCB.menu.advanced.cursor)
;;;11683  			{
;;;11684  				displayStateCB.menu.advanced.cursor = 10;
;;;11685  			}
;;;11686  			else
;;;11687  			{
;;;11688  				displayStateCB.menu.advanced.cursor--;
;;;11689  			}
;;;11690  			
;;;11691  		}
;;;11692  		// -
;;;11693  		else
;;;11694  		{
;;;11695  			displayStateCB.menu.advanced.cursor++;
;;;11696  			if (displayStateCB.menu.advanced.cursor == 11)
;;;11697  			{
;;;11698  				displayStateCB.menu.advanced.cursor = 0;
;;;11699  			}
;;;11700  		}
;;;11701  	}
;;;11702  
;;;11703  	
;;;11704  }
0000bc  e8bd9ff0          POP      {r4-r12,pc}
0000c0  f2427010          MOV      r0,#0x2710            ;11456
0000c4  2a01              CMP      r2,#1                 ;11452
0000c6  d00a              BEQ      |L284.222|
0000c8  2a02              CMP      r2,#2                 ;11452
0000ca  d1f7              BNE      |L284.188|
0000cc  1c76              ADDS     r6,r6,#1              ;11460
0000ce  b2b1              UXTH     r1,r6                 ;11460
0000d0  fbb1f2f0          UDIV     r2,r1,r0              ;11461
0000d4  fb001012          MLS      r0,r0,r2,r1           ;11461
0000d8  f8a402ba          STRH     r0,[r4,#0x2ba]        ;11461
                  |L284.220|
0000dc  e7ee              B        |L284.188|
                  |L284.222|
0000de  3664              ADDS     r6,r6,#0x64           ;11455
0000e0  b2b1              UXTH     r1,r6                 ;11455
0000e2  fbb1f2f0          UDIV     r2,r1,r0              ;11456
0000e6  fb001012          MLS      r0,r0,r2,r1           ;11456
0000ea  f8a402ba          STRH     r0,[r4,#0x2ba]        ;11456
                  |L284.238|
0000ee  e7e5              B        |L284.188|
0000f0  2a01              CMP      r2,#1                 ;11476
0000f2  d1e3              BNE      |L284.188|
0000f4  1c7f              ADDS     r7,r7,#1              ;11478
0000f6  b2f8              UXTB     r0,r7                 ;11478
0000f8  fbb0f1fb          UDIV     r1,r0,r11             ;11479
0000fc  fb0b0011          MLS      r0,r11,r1,r0          ;11479
000100  f88402f9          STRB     r0,[r4,#0x2f9]        ;11479
000104  e7da              B        |L284.188|
                  |L284.262|
000106  e090              B        |L284.554|
000108  2a01              CMP      r2,#1                 ;11486
00010a  d1d7              BNE      |L284.188|
00010c  f10c0c01          ADD      r12,r12,#1            ;11488
000110  f00c00ff          AND      r0,r12,#0xff          ;11488
000114  fbb0f1fb          UDIV     r1,r0,r11             ;11489
000118  fb0b0011          MLS      r0,r11,r1,r0          ;11489
00011c  f88402bc          STRB     r0,[r4,#0x2bc]        ;11489
                  |L284.288|
000120  e7cc              B        |L284.188|
000122  2a01              CMP      r2,#1                 ;11506
000124  d1ca              BNE      |L284.188|
000126  f501717a          ADD      r1,r1,#0x3e8          ;11508
00012a  b288              UXTH     r0,r1                 ;11508
00012c  fbb0f1fe          UDIV     r1,r0,lr              ;11509
000130  fb0e0011          MLS      r0,lr,r1,r0           ;11509
000134  f8a40300          STRH     r0,[r4,#0x300]        ;11509
000138  e7c0              B        |L284.188|
00013a  2a01              CMP      r2,#1                 ;11516
00013c  d1be              BNE      |L284.188|
00013e  f109090a          ADD      r9,r9,#0xa            ;11518
000142  fa1ff089          UXTH     r0,r9                 ;11518
000146  fbb0f1fa          UDIV     r1,r0,r10             ;11519
00014a  fb0a0011          MLS      r0,r10,r1,r0          ;11519
00014e  f8a40334          STRH     r0,[r4,#0x334]        ;11519
                  |L284.338|
000152  e7b3              B        |L284.188|
000154  2a01              CMP      r2,#1                 ;11534
000156  d002              BEQ      |L284.350|
000158  2a02              CMP      r2,#2                 ;11534
00015a  d10c              BNE      |L284.374|
00015c  e007              B        |L284.366|
                  |L284.350|
00015e  b11b              CBZ      r3,|L284.360|
000160  3b0a              SUBS     r3,r3,#0xa            ;11543
000162  f8a432b6          STRH     r3,[r4,#0x2b6]        ;11543
000166  e006              B        |L284.374|
                  |L284.360|
000168  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11539
00016c  e003              B        |L284.374|
                  |L284.366|
00016e  b1a3              CBZ      r3,|L284.410|
000170  1f5b              SUBS     r3,r3,#5              ;11555
000172  f8a432b6          STRH     r3,[r4,#0x2b6]        ;11555
                  |L284.374|
000176  f8b402b6          LDRH     r0,[r4,#0x2b6]        ;11562  ; paramCB
00017a  f7fffffe          BL       __aeabi_ui2f
00017e  4641              MOV      r1,r8                 ;11562
000180  f7fffffe          BL       __aeabi_fmul
000184  4936              LDR      r1,|L284.608|
000186  f7fffffe          BL       __aeabi_fmul
00018a  4936              LDR      r1,|L284.612|
00018c  f7fffffe          BL       __aeabi_fmul
000190  f7fffffe          BL       __aeabi_f2uiz
000194  f8a402ba          STRH     r0,[r4,#0x2ba]        ;11562
000198  e790              B        |L284.188|
                  |L284.410|
00019a  f8a402b6          STRH     r0,[r4,#0x2b6]        ;11551
00019e  e7ea              B        |L284.374|
0001a0  f242700f          MOV      r0,#0x270f            ;11572
0001a4  2a01              CMP      r2,#1                 ;11567
0001a6  d006              BEQ      |L284.438|
0001a8  2a02              CMP      r2,#2                 ;11567
0001aa  d187              BNE      |L284.188|
0001ac  b15b              CBZ      r3,|L284.454|
0001ae  1e76              SUBS     r6,r6,#1              ;11588
0001b0  f8a462ba          STRH     r6,[r4,#0x2ba]        ;11588
0001b4  e782              B        |L284.188|
                  |L284.438|
0001b6  b11b              CBZ      r3,|L284.448|
0001b8  3e64              SUBS     r6,r6,#0x64           ;11576
0001ba  f8a462ba          STRH     r6,[r4,#0x2ba]        ;11576
0001be  e77d              B        |L284.188|
                  |L284.448|
0001c0  f8a402ba          STRH     r0,[r4,#0x2ba]        ;11572
0001c4  e77a              B        |L284.188|
                  |L284.454|
0001c6  f8a402ba          STRH     r0,[r4,#0x2ba]        ;11584
0001ca  e777              B        |L284.188|
0001cc  2a01              CMP      r2,#1                 ;11602
0001ce  d185              BNE      |L284.220|
0001d0  b11f              CBZ      r7,|L284.474|
0001d2  1e7f              SUBS     r7,r7,#1              ;11610
0001d4  f88472f9          STRB     r7,[r4,#0x2f9]        ;11610
0001d8  e770              B        |L284.188|
                  |L284.474|
0001da  f884a2f9          STRB     r10,[r4,#0x2f9]       ;11606
0001de  e76d              B        |L284.188|
0001e0  2a01              CMP      r2,#1                 ;11617
0001e2  d184              BNE      |L284.238|
0001e4  f1bc0f00          CMP      r12,#0                ;11619
0001e8  d004              BEQ      |L284.500|
0001ea  f1ac0c01          SUB      r12,r12,#1            ;11625
0001ee  f884c2bc          STRB     r12,[r4,#0x2bc]       ;11625
0001f2  e763              B        |L284.188|
                  |L284.500|
0001f4  f884a2bc          STRB     r10,[r4,#0x2bc]       ;11621
0001f8  e760              B        |L284.188|
0001fa  2a01              CMP      r2,#1                 ;11642
0001fc  d190              BNE      |L284.288|
0001fe  b121              CBZ      r1,|L284.522|
000200  f5a1717a          SUB      r1,r1,#0x3e8          ;11650
000204  f8a41300          STRH     r1,[r4,#0x300]        ;11650
000208  e758              B        |L284.188|
                  |L284.522|
00020a  f8a4e300          STRH     lr,[r4,#0x300]        ;11646
00020e  e755              B        |L284.188|
000210  2a01              CMP      r2,#1                 ;11657
000212  d185              BNE      |L284.288|
000214  f1b90f00          CMP      r9,#0                 ;11659
000218  d004              BEQ      |L284.548|
00021a  f1a9090a          SUB      r9,r9,#0xa            ;11665
00021e  f8a49334          STRH     r9,[r4,#0x334]        ;11665
000222  e74b              B        |L284.188|
                  |L284.548|
000224  f8a40334          STRH     r0,[r4,#0x334]        ;11661
000228  e748              B        |L284.188|
                  |L284.554|
00022a  2801              CMP      r0,#1                 ;11680
00022c  d009              BEQ      |L284.578|
00022e  1c6d              ADDS     r5,r5,#1              ;11695
000230  b2e8              UXTB     r0,r5                 ;11695
000232  f8810b4a          STRB     r0,[r1,#0xb4a]        ;11695
000236  280b              CMP      r0,#0xb               ;11696
000238  d18b              BNE      |L284.338|
00023a  2000              MOVS     r0,#0                 ;11698
00023c  f8810b4a          STRB     r0,[r1,#0xb4a]        ;11698
000240  e73c              B        |L284.188|
                  |L284.578|
000242  b11d              CBZ      r5,|L284.588|
000244  1e6d              SUBS     r5,r5,#1              ;11688
000246  f8815b4a          STRB     r5,[r1,#0xb4a]        ;11688
00024a  e737              B        |L284.188|
                  |L284.588|
00024c  200a              MOVS     r0,#0xa               ;11684
00024e  f8810b4a          STRB     r0,[r1,#0xb4a]        ;11684
000252  e733              B        |L284.188|
;;;11705  
                          ENDP

                  |L284.596|
                          DCD      ||.bss||
                  |L284.600|
                          DCD      0x3dcccccd
                  |L284.604|
                          DCD      paramCB
                  |L284.608|
                          DCD      0x41cb3333
                  |L284.612|
                          DCD      0x4048f5c3

                          AREA ||i.DISPLAY_Menu2_Advanced_Choose_Enter||, CODE, READONLY, ALIGN=2

                  DISPLAY_Menu2_Advanced_Choose_Enter PROC
;;;11256  // 调整高级菜单2确认
;;;11257  void DISPLAY_Menu2_Advanced_Choose_Enter(uint32 param)
000000  b570              PUSH     {r4-r6,lr}
;;;11258  {
;;;11259  	uint8 value = 0;
000002  2000              MOVS     r0,#0
;;;11260  
;;;11261  	switch (displayStateCB.menu.advanced.cursor)
000004  4d4b              LDR      r5,|L285.308|
;;;11262  	{
;;;11263  		// 轮径调整
;;;11264  		case 0:
;;;11265  		// 周长调整
;;;11266  		case 1:
;;;11267  			if (displayStateCB.menu.advanced.cursorEnter > 1)
;;;11268  			{
;;;11269  				// NVM更新，立即写入
;;;11270  				NVM_SetDirtyFlag(TRUE);
;;;11271  			}
;;;11272  			break;
;;;11273  
;;;11274  		// 电池电压等级选择
;;;11275  		case 2:
;;;11276  			switch (paramCB.nvm.param.common.battery.voltage)
;;;11277  			{
;;;11278  				case 24:
;;;11279  					value = 0;
;;;11280  					break;
;;;11281  
;;;11282  				case 36:
;;;11283  					value = 1;
;;;11284  					break;
;;;11285  
;;;11286  				case 48:
;;;11287  					value = 2;
;;;11288  					break;
;;;11289  
;;;11290  				/*case 60:
;;;11291  					value = 3;
;;;11292  					break;
;;;11293  
;;;11294  				case 72:
;;;11295  					value = 4;
;;;11296  					break;*/
;;;11297  
;;;11298  				default:
;;;11299  					break;
;;;11300  			}
;;;11301  
;;;11302  			value++;
;;;11303  			value%=3;
000006  2403              MOVS     r4,#3
000008  4629              MOV      r1,r5                 ;11261
00000a  f8953b4a          LDRB     r3,[r5,#0xb4a]        ;11261  ; displayStateCB
00000e  4a4a              LDR      r2,|L285.312|
000010  f8911b4b          LDRB     r1,[r1,#0xb4b]        ;11267
000014  2b0b              CMP      r3,#0xb               ;11261
000016  d20c              BCS      |L285.50|
000018  e8dff003          TBB      [pc,r3]               ;11261
00001c  06060c4d          DCB      0x06,0x06,0x0c,0x4d
000020  4d556470          DCB      0x4d,0x55,0x64,0x70
000024  4d4d7c00          DCB      0x4d,0x4d,0x7c,0x00
000028  2901              CMP      r1,#1                 ;11267
00002a  d978              BLS      |L285.286|
00002c  2001              MOVS     r0,#1                 ;11270
00002e  f7fffffe          BL       NVM_SetDirtyFlag
                  |L285.50|
000032  e074              B        |L285.286|
000034  f8921338          LDRB     r1,[r2,#0x338]        ;11276  ; paramCB
000038  2918              CMP      r1,#0x18              ;11276
00003a  d007              BEQ      |L285.76|
00003c  2924              CMP      r1,#0x24              ;11276
00003e  d002              BEQ      |L285.70|
000040  2930              CMP      r1,#0x30              ;11276
000042  d103              BNE      |L285.76|
000044  e001              B        |L285.74|
                  |L285.70|
000046  2001              MOVS     r0,#1                 ;11283
000048  e000              B        |L285.76|
                  |L285.74|
00004a  2002              MOVS     r0,#2                 ;11287
                  |L285.76|
00004c  1c40              ADDS     r0,r0,#1              ;11302
00004e  b2c0              UXTB     r0,r0                 ;11302
000050  fbb0f1f4          UDIV     r1,r0,r4
000054  fb040011          MLS      r0,r4,r1,r0
000058  b120              CBZ      r0,|L285.100|
;;;11304  
;;;11305  			switch (value)
00005a  2801              CMP      r0,#1
00005c  d006              BEQ      |L285.108|
00005e  2802              CMP      r0,#2
000060  d10b              BNE      |L285.122|
000062  e007              B        |L285.116|
                  |L285.100|
;;;11306  			{
;;;11307  				case 0:
;;;11308  					paramCB.nvm.param.common.battery.voltage = 24;
000064  2018              MOVS     r0,#0x18
000066  f8820338          STRB     r0,[r2,#0x338]
;;;11309  					break;
00006a  e006              B        |L285.122|
                  |L285.108|
;;;11310  
;;;11311  				case 1:
;;;11312  					paramCB.nvm.param.common.battery.voltage = 36;
00006c  2024              MOVS     r0,#0x24
00006e  f8820338          STRB     r0,[r2,#0x338]
;;;11313  					break;
000072  e002              B        |L285.122|
                  |L285.116|
;;;11314  
;;;11315  				case 2:
;;;11316  					paramCB.nvm.param.common.battery.voltage = 48;
000074  2030              MOVS     r0,#0x30
000076  f8820338          STRB     r0,[r2,#0x338]
                  |L285.122|
;;;11317  					break;
;;;11318  
;;;11319  				/*case 3:
;;;11320  					paramCB.nvm.param.common.battery.voltage = 60;
;;;11321  					break;
;;;11322  
;;;11323  				case 4:
;;;11324  					paramCB.nvm.param.common.battery.voltage = 72;
;;;11325  					break;*/
;;;11326  
;;;11327  				default:
;;;11328  					break; 
;;;11329  			}
;;;11330  
;;;11331  			switch (PARAM_GetBatteryVoltageLevel())
00007a  f8920338          LDRB     r0,[r2,#0x338]  ; paramCB
00007e  2818              CMP      r0,#0x18
000080  d00c              BEQ      |L285.156|
000082  2824              CMP      r0,#0x24
000084  d00f              BEQ      |L285.166|
;;;11332  			{
;;;11333  				case 24:
;;;11334  					PARAM_SetLowVoltageThreshold(21000);
;;;11335  					break;
;;;11336  
;;;11337  				case 36:
;;;11338  					PARAM_SetLowVoltageThreshold(31500);
;;;11339  					break;
;;;11340  
;;;11341  				case 48:
;;;11342  					PARAM_SetLowVoltageThreshold(42000);
000086  f24a4110          MOV      r1,#0xa410
00008a  2830              CMP      r0,#0x30              ;11331
00008c  d010              BEQ      |L285.176|
;;;11343  					break;
;;;11344  
;;;11345  				default:
;;;11346  					PARAM_SetLowVoltageThreshold(42000);
00008e  f8a21302          STRH     r1,[r2,#0x302]
                  |L285.146|
;;;11347  					break;
;;;11348  			}
;;;11349  				
;;;11350  			// NVM更新，立即写入
;;;11351  			NVM_SetDirtyFlag(TRUE);
000092  e8bd4070          POP      {r4-r6,lr}
000096  2001              MOVS     r0,#1
000098  f7ffbffe          B.W      NVM_SetDirtyFlag
                  |L285.156|
00009c  f2452008          MOV      r0,#0x5208            ;11334
0000a0  f8a20302          STRH     r0,[r2,#0x302]        ;11334
0000a4  e7f5              B        |L285.146|
                  |L285.166|
0000a6  f647300c          MOV      r0,#0x7b0c            ;11338
0000aa  f8a20302          STRH     r0,[r2,#0x302]        ;11338
0000ae  e7f0              B        |L285.146|
                  |L285.176|
0000b0  f8a21302          STRH     r1,[r2,#0x302]        ;11342
0000b4  e7ed              B        |L285.146|
;;;11352  
;;;11353  			return;
;;;11354  
;;;11355  		// 测试磁钢数
;;;11356  		case 3:
;;;11357  		// 通信协议选择
;;;11358  		case 4:
;;;11359  		// 限流调整
;;;11360  		case 8:
;;;11361  		// 限速调整
;;;11362  		case 9:
;;;11363  			if (displayStateCB.menu.advanced.cursorEnter > 0)
0000b6  b391              CBZ      r1,|L285.286|
;;;11364  			{								
;;;11365  				// NVM更新，立即写入
;;;11366  				NVM_SetDirtyFlag(TRUE);
0000b8  2001              MOVS     r0,#1
0000ba  f7fffffe          BL       NVM_SetDirtyFlag
;;;11367  				
;;;11368  				displayStateCB.menu.advanced.cursorEnter = 0;
0000be  2000              MOVS     r0,#0
0000c0  f8850b4b          STRB     r0,[r5,#0xb4b]
;;;11369  				return;
;;;11370  			}
;;;11371  			break;
;;;11372  
;;;11373  		// 设置电量获取方式	
;;;11374  		case 5:
;;;11375  			paramCB.nvm.param.common.percentageMethod++;
;;;11376  			paramCB.nvm.param.common.percentageMethod%=3;
;;;11377  
;;;11378  			// NVM更新，立即写入
;;;11379  			NVM_SetDirtyFlag(TRUE);
;;;11380  
;;;11381  			return;
;;;11382  
;;;11383  		// 选择推车助力
;;;11384  		case 6:
;;;11385  			paramCB.nvm.param.common.pushAssistSwitch++;
;;;11386  			paramCB.nvm.param.common.pushAssistSwitch%=2;
;;;11387  
;;;11388  			// NVM更新，立即写入
;;;11389  			NVM_SetDirtyFlag(TRUE);
;;;11390  			
;;;11391  			return;
;;;11392  
;;;11393  		// 选择串口电平
;;;11394  		case 7:
;;;11395  			paramCB.nvm.param.common.uartLevel++;
;;;11396  			paramCB.nvm.param.common.uartLevel%=2;
;;;11397  
;;;11398  			// NVM更新，立即写入
;;;11399  			NVM_SetDirtyFlag(TRUE);
;;;11400  
;;;11401  			return;
;;;11402  
;;;11403  		// 返回1级菜单
;;;11404  		case 10:
;;;11405  			STATE_EnterState(STATE_MENU_ADV_MENU_INFO1);
;;;11406  
;;;11407  			return;
;;;11408  
;;;11409  		default:
;;;11410  			break;
;;;11411  	}
;;;11412  	
;;;11413  	displayStateCB.menu.advanced.cursorEnter++;
;;;11414  	displayStateCB.menu.advanced.cursorEnter%=3;
;;;11415  }
0000c4  bd70              POP      {r4-r6,pc}
0000c6  f8920324          LDRB     r0,[r2,#0x324]        ;11375  ; paramCB
0000ca  1c40              ADDS     r0,r0,#1              ;11375
0000cc  b2c0              UXTB     r0,r0                 ;11375
0000ce  fbb0f1f4          UDIV     r1,r0,r4              ;11376
0000d2  fb040011          MLS      r0,r4,r1,r0           ;11376
0000d6  f8820324          STRB     r0,[r2,#0x324]        ;11376
0000da  e8bd4070          POP      {r4-r6,lr}            ;11379
0000de  2001              MOVS     r0,#1                 ;11379
0000e0  f7ffbffe          B.W      NVM_SetDirtyFlag
0000e4  f8920325          LDRB     r0,[r2,#0x325]        ;11385  ; paramCB
0000e8  1c40              ADDS     r0,r0,#1              ;11385
0000ea  f0000001          AND      r0,r0,#1              ;11386
0000ee  f8820325          STRB     r0,[r2,#0x325]        ;11386
0000f2  e8bd4070          POP      {r4-r6,lr}            ;11389
0000f6  2001              MOVS     r0,#1                 ;11389
0000f8  f7ffbffe          B.W      NVM_SetDirtyFlag
0000fc  f8920327          LDRB     r0,[r2,#0x327]        ;11395  ; paramCB
000100  1c40              ADDS     r0,r0,#1              ;11395
000102  f0000001          AND      r0,r0,#1              ;11396
000106  f8820327          STRB     r0,[r2,#0x327]        ;11396
00010a  e8bd4070          POP      {r4-r6,lr}            ;11399
00010e  2001              MOVS     r0,#1                 ;11399
000110  f7ffbffe          B.W      NVM_SetDirtyFlag
000114  e8bd4070          POP      {r4-r6,lr}            ;11405
000118  2023              MOVS     r0,#0x23              ;11405
00011a  f7ffbffe          B.W      STATE_EnterState
                  |L285.286|
00011e  f8950b4b          LDRB     r0,[r5,#0xb4b]        ;11413  ; displayStateCB
000122  1c40              ADDS     r0,r0,#1              ;11413
000124  b2c0              UXTB     r0,r0                 ;11413
000126  fbb0f1f4          UDIV     r1,r0,r4              ;11414
00012a  fb040011          MLS      r0,r4,r1,r0           ;11414
00012e  f8850b4b          STRB     r0,[r5,#0xb4b]        ;11414
000132  bd70              POP      {r4-r6,pc}
;;;11416  
                          ENDP

                  |L285.308|
                          DCD      ||.bss||
                  |L285.312|
                          DCD      paramCB

                          AREA ||i.DISPLAY_MenuAdvancedSettingsEnter||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuAdvancedSettingsEnter PROC
;;;11201  // 高级菜单设置入口
;;;11202  void DISPLAY_MenuAdvancedSettingsEnter(uint32 ulParam)
000000  4809              LDR      r0,|L286.40|
;;;11203  {
;;;11204  	MENU_ID_E id = displayStateCB.menu.advanced.id;
000002  f8900b4d          LDRB     r0,[r0,#0xb4d]  ; displayStateCB
;;;11205  	
;;;11206  	// 参数判断
;;;11207  	CHECK_PARAM_OVER_RETURN(id, MENU_ID_ADCANCED_SETTINGS_COUNT);
000006  2803              CMP      r0,#3
000008  d80d              BHI      |L286.38|
;;;11208  	
;;;11209  	switch (id)
00000a  b130              CBZ      r0,|L286.26|
00000c  2801              CMP      r0,#1
00000e  d007              BEQ      |L286.32|
000010  2802              CMP      r0,#2
000012  d108              BNE      |L286.38|
;;;11210  	{
;;;11211  		case MENU_ID_ADVANCED_SETTINGS_WHEEL_SIZE:
;;;11212  			
;;;11213  			STATE_EnterState(STATE_MENU_ADVANCED_SETTINGS_WHEEL_SIZE);
;;;11214  				
;;;11215  			break;
;;;11216  
;;;11217  		case MENU_ID_ADVANCED_SETTINGS_SPEED_LIMIT:
;;;11218  
;;;11219  			STATE_EnterState(STATE_MENU_ADVANCED_SETTINGS_SPEED_LIMIT);
;;;11220  			
;;;11221  			break;
;;;11222  
;;;11223  		case MENU_ID_ADVANCED_SETTINGS_ESC:
;;;11224  
;;;11225  			STATE_EnterState(STATE_RIDING);
000014  200b              MOVS     r0,#0xb
000016  f7ffbffe          B.W      STATE_EnterState
                  |L286.26|
00001a  2020              MOVS     r0,#0x20              ;11213
00001c  f7ffbffe          B.W      STATE_EnterState
                  |L286.32|
000020  2021              MOVS     r0,#0x21              ;11219
000022  f7ffbffe          B.W      STATE_EnterState
                  |L286.38|
;;;11226  			
;;;11227  			break;
;;;11228  
;;;11229  		default:
;;;11230  			break;
;;;11231  	}
;;;11232  
;;;11233  }
000026  4770              BX       lr
;;;11234  
                          ENDP

                  |L286.40|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuAdvancedSettingsSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuAdvancedSettingsSelect PROC
;;;11184  // 根菜单选项切换
;;;11185  void DISPLAY_MenuAdvancedSettingsSelect(uint32 direction)
000000  b2c3              UXTB     r3,r0
;;;11186  {
;;;11187  	DISPLAY_MENU_TUNE_DIRECTION_E dir = (DISPLAY_MENU_TUNE_DIRECTION_E)direction;
;;;11188  	
;;;11189  	if(DISPLAY_MENU_TUNE_NEXT == dir)
;;;11190  	{
;;;11191  		displayStateCB.menu.advanced.id ++;
000002  4a0c              LDR      r2,|L287.52|
;;;11192  		displayStateCB.menu.advanced.id %= MENU_ID_ADCANCED_SETTINGS_COUNT;
000004  2103              MOVS     r1,#3
000006  2b00              CMP      r3,#0                 ;11189
000008  f8920b4d          LDRB     r0,[r2,#0xb4d]        ;11191
00000c  d008              BEQ      |L287.32|
;;;11193  	}
;;;11194  	else
;;;11195  	{
;;;11196  		displayStateCB.menu.advanced.id += (MENU_ID_ADCANCED_SETTINGS_COUNT - 1);
00000e  1c80              ADDS     r0,r0,#2
000010  b2c0              UXTB     r0,r0
;;;11197  		displayStateCB.menu.advanced.id %= MENU_ID_ADCANCED_SETTINGS_COUNT;
000012  fbb0f3f1          UDIV     r3,r0,r1
000016  fb010013          MLS      r0,r1,r3,r0
00001a  f8820b4d          STRB     r0,[r2,#0xb4d]
;;;11198  	}
;;;11199  }
00001e  4770              BX       lr
                  |L287.32|
000020  1c40              ADDS     r0,r0,#1              ;11191
000022  b2c0              UXTB     r0,r0                 ;11191
000024  fbb0f3f1          UDIV     r3,r0,r1              ;11192
000028  fb010013          MLS      r0,r1,r3,r0           ;11192
00002c  f8820b4d          STRB     r0,[r2,#0xb4d]        ;11192
000030  4770              BX       lr
;;;11200  
                          ENDP

000032  0000              DCW      0x0000
                  |L287.52|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuAdvancedSettingsTuneSpeedLimit||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuAdvancedSettingsTuneSpeedLimit PROC
;;;12499  // 高级菜单限速设置，单位:0.1km/h
;;;12500  void DISPLAY_MenuAdvancedSettingsTuneSpeedLimit(uint32 param)
000000  b530              PUSH     {r4,r5,lr}
;;;12501  {
;;;12502  	if (UNIT_METRIC == PARAM_GetUnit())
000002  4923              LDR      r1,|L288.144|
;;;12503  	{
;;;12504  		// +
;;;12505  		if (DISPLAY_MENU_TUNE_PREVIOUS == param)
;;;12506  		{
;;;12507  			if (displayStateCB.menu.advanced.speedLimit < 500)
000004  4a23              LDR      r2,|L288.148|
000006  f8915319          LDRB     r5,[r1,#0x319]        ;12502  ; paramCB
00000a  f8b21b50          LDRH     r1,[r2,#0xb50]
00000e  2d00              CMP      r5,#0                 ;12502
;;;12508  			{
;;;12509  				displayStateCB.menu.advanced.speedLimit += 10;
000010  f101030a          ADD      r3,r1,#0xa
;;;12510  			}
;;;12511  			
;;;12512  			if (displayStateCB.menu.advanced.speedLimit >= 500)
;;;12513  			{
;;;12514  				displayStateCB.menu.advanced.speedLimit = 500;
;;;12515  			}
;;;12516  		}
;;;12517  		// -
;;;12518  		else
;;;12519  		{
;;;12520  			if (displayStateCB.menu.advanced.speedLimit > 150)
;;;12521  			{
;;;12522  				displayStateCB.menu.advanced.speedLimit -= 10;
000014  f1a1040a          SUB      r4,r1,#0xa
000018  b29b              UXTH     r3,r3                 ;12509
00001a  b2a4              UXTH     r4,r4
00001c  d00d              BEQ      |L288.58|
;;;12523  			}
;;;12524  
;;;12525  			if (displayStateCB.menu.advanced.speedLimit <= 150)
;;;12526  			{
;;;12527  				displayStateCB.menu.advanced.speedLimit = 150;
;;;12528  			}
;;;12529  		}
;;;12530  	}
;;;12531  	else
;;;12532  	{
;;;12533  		// +
;;;12534  		if (DISPLAY_MENU_TUNE_PREVIOUS == param)
00001e  2801              CMP      r0,#1
000020  d026              BEQ      |L288.112|
;;;12535  		{
;;;12536  			if (displayStateCB.menu.advanced.speedLimit < 311)
;;;12537  			{
;;;12538  				displayStateCB.menu.advanced.speedLimit += 10;
;;;12539  			}
;;;12540  
;;;12541  			if (displayStateCB.menu.advanced.speedLimit >= 311)
;;;12542  			{
;;;12543  				displayStateCB.menu.advanced.speedLimit = 311;
;;;12544  			}
;;;12545  		}
;;;12546  		// -
;;;12547  		else
;;;12548  		{
;;;12549  			if (displayStateCB.menu.advanced.speedLimit > 93)
000022  295d              CMP      r1,#0x5d
000024  d901              BLS      |L288.42|
;;;12550  			{
;;;12551  				displayStateCB.menu.advanced.speedLimit -= 10;
000026  f8a24b50          STRH     r4,[r2,#0xb50]
                  |L288.42|
;;;12552  			}
;;;12553  			
;;;12554  			if (displayStateCB.menu.advanced.speedLimit <= 93)
00002a  f8b20b50          LDRH     r0,[r2,#0xb50]  ; displayStateCB
00002e  285d              CMP      r0,#0x5d
000030  d802              BHI      |L288.56|
;;;12555  			{
;;;12556  				displayStateCB.menu.advanced.speedLimit = 93;
000032  205d              MOVS     r0,#0x5d
000034  f8a20b50          STRH     r0,[r2,#0xb50]
                  |L288.56|
;;;12557  			}
;;;12558  		}
;;;12559  	}
;;;12560  }
000038  bd30              POP      {r4,r5,pc}
                  |L288.58|
00003a  2801              CMP      r0,#1                 ;12505
00003c  d00b              BEQ      |L288.86|
00003e  2996              CMP      r1,#0x96              ;12520
000040  d901              BLS      |L288.70|
000042  f8a24b50          STRH     r4,[r2,#0xb50]        ;12522
                  |L288.70|
000046  f8b20b50          LDRH     r0,[r2,#0xb50]        ;12525  ; displayStateCB
00004a  2896              CMP      r0,#0x96              ;12525
00004c  d8f4              BHI      |L288.56|
00004e  2096              MOVS     r0,#0x96              ;12527
000050  f8a20b50          STRH     r0,[r2,#0xb50]        ;12527
                  |L288.84|
000054  bd30              POP      {r4,r5,pc}
                  |L288.86|
000056  f44f70fa          MOV      r0,#0x1f4             ;12507
00005a  4281              CMP      r1,r0                 ;12507
00005c  d201              BCS      |L288.98|
00005e  f8a23b50          STRH     r3,[r2,#0xb50]        ;12509
                  |L288.98|
000062  f8b21b50          LDRH     r1,[r2,#0xb50]        ;12512  ; displayStateCB
000066  4281              CMP      r1,r0                 ;12512
000068  d3f4              BCC      |L288.84|
00006a  f8a20b50          STRH     r0,[r2,#0xb50]        ;12514
                  |L288.110|
00006e  bd30              POP      {r4,r5,pc}
                  |L288.112|
000070  f44f749b          MOV      r4,#0x136             ;12536
000074  42a1              CMP      r1,r4                 ;12536
000076  d801              BHI      |L288.124|
000078  f8a23b50          STRH     r3,[r2,#0xb50]        ;12538
                  |L288.124|
00007c  f8b20b50          LDRH     r0,[r2,#0xb50]        ;12541  ; displayStateCB
000080  42a0              CMP      r0,r4                 ;12541
000082  d9f4              BLS      |L288.110|
000084  f2401037          MOV      r0,#0x137             ;12543
000088  f8a20b50          STRH     r0,[r2,#0xb50]        ;12543
00008c  bd30              POP      {r4,r5,pc}
;;;12561  
                          ENDP

00008e  0000              DCW      0x0000
                  |L288.144|
                          DCD      paramCB
                  |L288.148|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuAdvancedSettingsTuneWheelSize||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuAdvancedSettingsTuneWheelSize PROC
;;;11235  // 高级菜单轮径ID设置
;;;11236  void DISPLAY_MenuAdvancedSettingsTuneWheelSize(uint32 param)
000000  4a08              LDR      r2,|L289.36|
;;;11237  {
;;;11238  	// +
;;;11239  	if(DISPLAY_MENU_TUNE_PREVIOUS == param)
000002  2801              CMP      r0,#1
;;;11240  	{
;;;11241  		if(displayStateCB.menu.advanced.wheelSizeID < PARAM_WHEEL_SIZE_MAX-1)
000004  f8921b4e          LDRB     r1,[r2,#0xb4e]
000008  d005              BEQ      |L289.22|
;;;11242  		{
;;;11243  			displayStateCB.menu.advanced.wheelSizeID ++;
;;;11244  		}
;;;11245  	}
;;;11246  	// -
;;;11247  	else
;;;11248  	{
;;;11249  		if(displayStateCB.menu.advanced.wheelSizeID > PARAM_WHEEL_SIZE_4_5_INCH)
00000a  2900              CMP      r1,#0
00000c  d002              BEQ      |L289.20|
;;;11250  		{
;;;11251  			displayStateCB.menu.advanced.wheelSizeID --;
00000e  1e49              SUBS     r1,r1,#1
000010  f8821b4e          STRB     r1,[r2,#0xb4e]
                  |L289.20|
;;;11252  		}
;;;11253  	}
;;;11254  }
000014  4770              BX       lr
                  |L289.22|
000016  2911              CMP      r1,#0x11              ;11241
000018  d2fc              BCS      |L289.20|
00001a  1c49              ADDS     r1,r1,#1              ;11243
00001c  f8821b4e          STRB     r1,[r2,#0xb4e]        ;11243
000020  4770              BX       lr
;;;11255  
                          ENDP

000022  0000              DCW      0x0000
                  |L289.36|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuAdvancedSettingsdefault||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuAdvancedSettingsdefault PROC
;;;11178  // 一级目录选项
;;;11179  void DISPLAY_MenuAdvancedSettingsdefault(void)
000000  4902              LDR      r1,|L290.12|
;;;11180  {
;;;11181  	displayStateCB.menu.advanced.id = MENU_ID_ADVANCED_SETTINGS_WHEEL_SIZE;
000002  2000              MOVS     r0,#0
000004  f8810b4d          STRB     r0,[r1,#0xb4d]
;;;11182  }
000008  4770              BX       lr
;;;11183  
                          ENDP

00000a  0000              DCW      0x0000
                  |L290.12|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuDefault||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuDefault PROC
;;;12579  
;;;12580  void DISPLAY_MenuDefault(void)
000000  4804              LDR      r0,|L291.20|
;;;12581  {
;;;12582  	// 菜单参数初始化
;;;12583  	displayStateCB.menu.root.id = MENU_ID_ROOT_CLEAR_DATA;
000002  2100              MOVS     r1,#0
000004  f8001c13          STRB     r1,[r0,#-0x13]
;;;12584  	displayStateCB.menu.advanced.id = MENU_ID_ADVANCED_SETTINGS_WHEEL_SIZE;
000008  7281              STRB     r1,[r0,#0xa]
;;;12585  	displayStateCB.menu.clear.id = MENU_ID_CLEAR_TRIP_DISTANCE;
00000a  73c1              STRB     r1,[r0,#0xf]
;;;12586  	displayStateCB.menu.clear.yesNoId = MENU_ID_NO;
00000c  2201              MOVS     r2,#1
00000e  7402              STRB     r2,[r0,#0x10]
;;;12587  //	displayStateCB.menu.setup.id = MENU_ID_SETUP_SET_DATE_TIME;
;;;12588  //	displayStateCB.menu.setup.dateTimeId = MENU_ID_DATE;
;;;12589  	displayStateCB.menu.setup.rtc.tuneBit = RTC_TUNE_BIT_HOUR;
000010  77c1              STRB     r1,[r0,#0x1f]
;;;12590  }
000012  4770              BX       lr
;;;12591  
                          ENDP

                  |L291.20|
                          DCD      ||.bss||+0xb43

                          AREA ||i.DISPLAY_MenuL1Enter||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL1Enter PROC
;;;13256  **********************************************************************/
;;;13257  void DISPLAY_MenuL1Enter(uint32 ulParam)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;13258  {
;;;13259  	MENU_ID_E id = displayStateCB.menu.root.id;
000004  4c7c              LDR      r4,|L292.504|
000006  f8940b30          LDRB     r0,[r4,#0xb30]  ; displayStateCB
;;;13260  	
;;;13261  	// 参数判断
;;;13262  	CHECK_PARAM_OVER_RETURN(id, MENU_ID_ROOT_COUNT);
00000a  280b              CMP      r0,#0xb
00000c  d83c              BHI      |L292.136|
;;;13263  
;;;13264  	if (MENU_ID_ROOT_CLEAR_DATA == displayStateCB.menu.root.id)
00000e  b960              CBNZ     r0,|L292.42|
;;;13265  	{
;;;13266  		displayStateCB.menu.root.enterFlag++;
000010  f8940b31          LDRB     r0,[r4,#0xb31]  ; displayStateCB
000014  1c40              ADDS     r0,r0,#1
000016  f8840b31          STRB     r0,[r4,#0xb31]
;;;13267  		PARAM_ClearTrip();
00001a  f7fffffe          BL       PARAM_ClearTrip
;;;13268  //		TIMER_AddTask(TIMER_ID_MENU_CLEAR_DATA_RETURN,
;;;13269  //							1000,
;;;13270  //							ClearData_ReturnMenuRoot,
;;;13271  //							0,
;;;13272  //							1,
;;;13273  //							ACTION_MODE_ADD_TO_QUEUE);
;;;13274  
;;;13275  		LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_M_CLEAR_SUCCEEDED_X, UI_ITEM_COODINATE_MENU_M_CLEAR_SUCCEEDED_Y, PIC_ID_M_CLEAR_SUCCEEDED, LCD_OPERATOR_MODE_DRAW);
00001e  2300              MOVS     r3,#0
000020  22cd              MOVS     r2,#0xcd
000022  214a              MOVS     r1,#0x4a
000024  2074              MOVS     r0,#0x74
000026  f7fffffe          BL       LCD_DrawBmpByID
                  |L292.42|
;;;13276  		
;;;13277  	}
;;;13278  	
;;;13279  	if (MENU_ID_ROOT_SET_TIME == displayStateCB.menu.root.id)
00002a  f8940b30          LDRB     r0,[r4,#0xb30]  ; displayStateCB
00002e  2500              MOVS     r5,#0                 ;13266
;;;13280  	{
;;;13281  		if (displayStateCB.menu.root.enterFlag == 1)
;;;13282  		{
;;;13283  			displayStateCB.menu.root.rtc.tuneBit++;
;;;13284  		}
;;;13285  
;;;13286  		switch(displayStateCB.menu.root.rtc.tuneBit)
;;;13287  		{
;;;13288  			// 调整小时时，+ -键用于调整小时
;;;13289  			case RTC_TUNE_BIT_HOUR:
;;;13290  				
;;;13291  				// 开启时钟闪烁 								
;;;13292  				DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_HOUR, BLINK_MODE_BLINK_HIGH_SPEED);
;;;13293  
;;;13294  				break;
;;;13295  
;;;13296  			// 调整分钟时，+ -键用于调整分钟
;;;13297  			case RTC_TUNE_BIT_MINUTE:
;;;13298  			
;;;13299  				// 关闭时钟闪烁,打开分钟闪烁
;;;13300  				DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_HOUR, BLINK_MODE_ON);
;;;13301  				DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_MINUTE, BLINK_MODE_BLINK_HIGH_SPEED);
;;;13302  				
;;;13303  				break;
;;;13304  
;;;13305  			default:
;;;13306  				break;
;;;13307  		}
;;;13308  			
;;;13309  		if (RTC_TUNE_BIT_COUNT == displayStateCB.menu.root.rtc.tuneBit)
;;;13310  		{
;;;13311  			displayStateCB.menu.root.rtc.tuneBit = RTC_TUNE_BIT_HOUR;
;;;13312  			displayStateCB.menu.root.enterFlag = 0;
;;;13313  			DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_HOUR, BLINK_MODE_ON);
;;;13314  			DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_MINUTE, BLINK_MODE_ON);
;;;13315  
;;;13316  //			TIMER_KillTask(TIMER_ID_SET_TIME_BLINK);
;;;13317  
;;;13318  			PARAM_SetRTCHour(displayStateCB.menu.root.rtc.hour);
;;;13319  			PARAM_SetRTCMin(displayStateCB.menu.root.rtc.minute);
;;;13320  			
;;;13321  			// 设置RTC的时间
;;;13322  			DS1302_SetTime(displayStateCB.menu.root.rtc.hour,
;;;13323  						   displayStateCB.menu.root.rtc.minute,
;;;13324  						   0);
;;;13325  			return;
;;;13326  		}
;;;13327  		
;;;13328  		if (displayStateCB.menu.root.enterFlag < 1)
;;;13329  		{
;;;13330  			displayStateCB.menu.root.enterFlag++;
;;;13331  		}
;;;13332  	}
;;;13333  	else if (MENU_ID_ROOT_BACK == displayStateCB.menu.root.id)
;;;13334  	{
;;;13335  		STATE_EnterState(STATE_RIDING);
;;;13336  		displayStateCB.menu.root.enterFlag = 0;
;;;13337  	}
;;;13338  	else if (MENU_ID_ROOT_USER_PASSWORD == displayStateCB.menu.root.id)
;;;13339  	{
;;;13340  		if (0xFF == displayStateCB.menu.root.password.menuCursor)
000030  27ff              MOVS     r7,#0xff
000032  4e72              LDR      r6,|L292.508|
000034  f04f0801          MOV      r8,#1                 ;13266
000038  2808              CMP      r0,#8                 ;13279
00003a  d027              BEQ      |L292.140|
00003c  280a              CMP      r0,#0xa               ;13333
00003e  d063              BEQ      |L292.264|
000040  2806              CMP      r0,#6                 ;13338
000042  d067              BEQ      |L292.276|
;;;13341  		{
;;;13342  			displayStateCB.menu.root.password.menuCursor = 0;
;;;13343  		}
;;;13344  
;;;13345  		if (0 == displayStateCB.menu.root.password.menuCursor)
;;;13346  		{
;;;13347  			displayStateCB.menu.root.enterFlag ++;
;;;13348  			displayStateCB.menu.root.password.numberCursor = 0;
;;;13349  			
;;;13350  			if(displayStateCB.menu.root.enterFlag == 2)
;;;13351  			{
;;;13352  				displayStateCB.menu.root.enterFlag = 1;
;;;13353  				paramCB.nvm.param.protocol.powerPasswordSwitchShow = !paramCB.nvm.param.protocol.powerPasswordSwitchShow;
;;;13354  				displayStateCB.menu.root.password.numberCursor = 0xFF;
;;;13355  			}
;;;13356  		}
;;;13357  		
;;;13358  		if (1 == displayStateCB.menu.root.password.menuCursor)
;;;13359  		{
;;;13360  			if(displayStateCB.menu.root.enterFlag < 6)
;;;13361  			{
;;;13362  				if (displayStateCB.menu.root.enterFlag > 1)
;;;13363  				{
;;;13364  					displayStateCB.menu.root.password.numberCursor++;
;;;13365  					displayStateCB.menu.root.password.numberCursor%=4;
;;;13366  				}
;;;13367  				else
;;;13368  				{
;;;13369  					displayStateCB.menu.root.password.numberCursor = 0;
;;;13370  				}
;;;13371  
;;;13372  				displayStateCB.menu.root.enterFlag++;
;;;13373  				if(6 == displayStateCB.menu.root.enterFlag)
;;;13374  				{
;;;13375  					displayStateCB.menu.root.password.numberCursor = 0x04;
;;;13376  				}
;;;13377  			}
;;;13378  		}
;;;13379  
;;;13380  		if (2 == displayStateCB.menu.root.password.menuCursor)
;;;13381  		{
;;;13382  			displayStateCB.menu.root.enterFlag = 0;
;;;13383  			displayStateCB.menu.root.password.numberCursor = 0xFF;
;;;13384  			displayStateCB.menu.root.password.menuCursor = 0xFF;
;;;13385  
;;;13386  			paramCB.nvm.param.protocol.powerOnPassword = (displayStateCB.menu.root.password.number1*1000) 
;;;13387  														+ (displayStateCB.menu.root.password.number2*100)
;;;13388  														+ (displayStateCB.menu.root.password.number3*10) 
;;;13389  														+ (displayStateCB.menu.root.password.number4*1);
;;;13390  		}
;;;13391  	}
;;;13392  	else
;;;13393  	{
;;;13394  		if( MENU_ID_ROOT_CLEAR_DATA == displayStateCB.menu.root.id ||
000044  b170              CBZ      r0,|L292.100|
;;;13395  			  MENU_ID_ROOT_SYSTEM_INFO == displayStateCB.menu.root.id ||
000046  2807              CMP      r0,#7
000048  d00c              BEQ      |L292.100|
;;;13396  			  MENU_ID_ROOT_CONNECT_TO_APP == displayStateCB.menu.root.id )
00004a  2809              CMP      r0,#9
00004c  d00a              BEQ      |L292.100|
;;;13397  		{ 
;;;13398  			// 此三项无需给enterFlag ++
;;;13399  		}
;;;13400  		else 
;;;13401  		{
;;;13402  			switch(displayStateCB.menu.root.id)
00004e  2801              CMP      r0,#1
000050  d07e              BEQ      |L292.336|
000052  2804              CMP      r0,#4
000054  d07d              BEQ      |L292.338|
;;;13403  			{
;;;13404  
;;;13405  				case MENU_ID_ROOT_DISPLAY_UNIT:
;;;13406  				
;;;13407  					if (UNIT_METRIC == PARAM_GetUnit())
;;;13408  					{
;;;13409  						PARAM_SetUnit(UNIT_INCH);
;;;13410  					}
;;;13411  					else
;;;13412  					{
;;;13413  						PARAM_SetUnit(UNIT_METRIC);
;;;13414  					}
;;;13415  					break;
;;;13416  					
;;;13417  				case MENU_ID_ROOT_AUTO_LIGHT:
;;;13418  				
;;;13419  					paramCB.nvm.param.common.backlight.autoLight = !paramCB.nvm.param.common.backlight.autoLight;
;;;13420  					paramCB.runtime.headAutoLight = paramCB.nvm.param.common.backlight.autoLight;
;;;13421  					DISPLAY_ResumeValue(DISPLAY_COMMON_LIGHT);
;;;13422  					
;;;13423  					break;
;;;13424  
;;;13425  				default:
;;;13426  				
;;;13427  					displayStateCB.menu.root.enterFlag++;
000056  f8940b31          LDRB     r0,[r4,#0xb31]  ; displayStateCB
00005a  1c40              ADDS     r0,r0,#1
;;;13428  					displayStateCB.menu.root.enterFlag%=2;	
00005c  f0000001          AND      r0,r0,#1
000060  f8840b31          STRB     r0,[r4,#0xb31]
                  |L292.100|
;;;13429  					break;
;;;13430  			}
;;;13431  		}
;;;13432  	
;;;13433  		displayStateCB.menu.root.rtc.hour = PARAM_GetRTCHour();
000064  f89601f8          LDRB     r0,[r6,#0x1f8]  ; paramCB
000068  f8840b40          STRB     r0,[r4,#0xb40]
;;;13434  		displayStateCB.menu.root.rtc.minute = PARAM_GetRTCMin();
00006c  f89601f9          LDRB     r0,[r6,#0x1f9]  ; paramCB
000070  f8840b41          STRB     r0,[r4,#0xb41]
;;;13435  		displayStateCB.menu.root.speedLimit = PARAM_GetSpeedLimit();
000074  f7fffffe          BL       PARAM_GetSpeedLimit
000078  f8a40b34          STRH     r0,[r4,#0xb34]
                  |L292.124|
;;;13436  		
;;;13437  	}
;;;13438  	
;;;13439  	if (1 == displayStateCB.menu.root.enterFlag)
00007c  f8940b31          LDRB     r0,[r4,#0xb31]  ; displayStateCB
000080  2801              CMP      r0,#1
000082  d101              BNE      |L292.136|
;;;13440  	{
;;;13441  		displayStateCB.menu.root.password.numberCursor = 0xFF;
000084  f8847b39          STRB     r7,[r4,#0xb39]
                  |L292.136|
;;;13442  	}
;;;13443  }
000088  e8bd81f0          POP      {r4-r8,pc}
                  |L292.140|
00008c  f8940b31          LDRB     r0,[r4,#0xb31]        ;13281  ; displayStateCB
000090  2801              CMP      r0,#1                 ;13281
000092  d104              BNE      |L292.158|
000094  f8940b42          LDRB     r0,[r4,#0xb42]        ;13283  ; displayStateCB
000098  1c40              ADDS     r0,r0,#1              ;13283
00009a  f8840b42          STRB     r0,[r4,#0xb42]        ;13283
                  |L292.158|
00009e  f8940b42          LDRB     r0,[r4,#0xb42]        ;13286  ; displayStateCB
0000a2  b110              CBZ      r0,|L292.170|
0000a4  2801              CMP      r0,#1                 ;13286
0000a6  d10d              BNE      |L292.196|
0000a8  e004              B        |L292.180|
                  |L292.170|
0000aa  2103              MOVS     r1,#3                 ;13292
0000ac  4608              MOV      r0,r1                 ;13292
0000ae  f7fffffe          BL       DISPLAY_BLINK_ModeControl
0000b2  e007              B        |L292.196|
                  |L292.180|
0000b4  2101              MOVS     r1,#1                 ;13300
0000b6  2003              MOVS     r0,#3                 ;13300
0000b8  f7fffffe          BL       DISPLAY_BLINK_ModeControl
0000bc  2103              MOVS     r1,#3                 ;13301
0000be  2004              MOVS     r0,#4                 ;13301
0000c0  f7fffffe          BL       DISPLAY_BLINK_ModeControl
                  |L292.196|
0000c4  f8940b42          LDRB     r0,[r4,#0xb42]        ;13309  ; displayStateCB
0000c8  2802              CMP      r0,#2                 ;13309
0000ca  d006              BEQ      |L292.218|
0000cc  f8940b31          LDRB     r0,[r4,#0xb31]        ;13328  ; displayStateCB
0000d0  2800              CMP      r0,#0                 ;13328
0000d2  d1d3              BNE      |L292.124|
0000d4  f8848b31          STRB     r8,[r4,#0xb31]        ;13330
                  |L292.216|
0000d8  e7d0              B        |L292.124|
                  |L292.218|
0000da  f6043431          ADD      r4,r4,#0xb31          ;13311
0000de  7465              STRB     r5,[r4,#0x11]         ;13311
0000e0  7025              STRB     r5,[r4,#0]            ;13312
0000e2  2101              MOVS     r1,#1                 ;13313
0000e4  2003              MOVS     r0,#3                 ;13313
0000e6  f7fffffe          BL       DISPLAY_BLINK_ModeControl
0000ea  2101              MOVS     r1,#1                 ;13314
0000ec  2004              MOVS     r0,#4                 ;13314
0000ee  f7fffffe          BL       DISPLAY_BLINK_ModeControl
0000f2  7be0              LDRB     r0,[r4,#0xf]          ;13318  ; displayStateCB
0000f4  f88601f8          STRB     r0,[r6,#0x1f8]        ;13318
0000f8  7c21              LDRB     r1,[r4,#0x10]         ;13319  ; displayStateCB
0000fa  f88611f9          STRB     r1,[r6,#0x1f9]        ;13319
0000fe  e8bd41f0          POP      {r4-r8,lr}            ;13322
000102  2200              MOVS     r2,#0                 ;13322
000104  f7ffbffe          B.W      DS1302_SetTime
                  |L292.264|
000108  200b              MOVS     r0,#0xb               ;13335
00010a  f7fffffe          BL       STATE_EnterState
00010e  f8845b31          STRB     r5,[r4,#0xb31]        ;13336
000112  e7b3              B        |L292.124|
                  |L292.276|
000114  f8940b3a          LDRB     r0,[r4,#0xb3a]        ;13340  ; displayStateCB
000118  28ff              CMP      r0,#0xff              ;13340
00011a  d101              BNE      |L292.288|
00011c  f8845b3a          STRB     r5,[r4,#0xb3a]        ;13342
                  |L292.288|
000120  f8941b3a          LDRB     r1,[r4,#0xb3a]        ;13345  ; displayStateCB
000124  b999              CBNZ     r1,|L292.334|
000126  f8940b31          LDRB     r0,[r4,#0xb31]        ;13347  ; displayStateCB
00012a  1c40              ADDS     r0,r0,#1              ;13347
00012c  b2c0              UXTB     r0,r0                 ;13347
00012e  f8840b31          STRB     r0,[r4,#0xb31]        ;13347
000132  f8845b39          STRB     r5,[r4,#0xb39]        ;13348
000136  2802              CMP      r0,#2                 ;13350
000138  d109              BNE      |L292.334|
00013a  f8848b31          STRB     r8,[r4,#0xb31]        ;13352
00013e  f89602cc          LDRB     r0,[r6,#0x2cc]        ;13353  ; paramCB
000142  b150              CBZ      r0,|L292.346|
000144  2000              MOVS     r0,#0                 ;13353
                  |L292.326|
000146  f88602cc          STRB     r0,[r6,#0x2cc]        ;13353
00014a  f8847b39          STRB     r7,[r4,#0xb39]        ;13354
                  |L292.334|
00014e  e001              B        |L292.340|
                  |L292.336|
000150  e03b              B        |L292.458|
                  |L292.338|
000152  e043              B        |L292.476|
                  |L292.340|
000154  2901              CMP      r1,#1                 ;13358
000156  d002              BEQ      |L292.350|
000158  e01a              B        |L292.400|
                  |L292.346|
00015a  2001              MOVS     r0,#1                 ;13353
00015c  e7f3              B        |L292.326|
                  |L292.350|
00015e  f8940b31          LDRB     r0,[r4,#0xb31]        ;13360  ; displayStateCB
000162  2806              CMP      r0,#6                 ;13360
000164  d214              BCS      |L292.400|
000166  2801              CMP      r0,#1                 ;13362
000168  d907              BLS      |L292.378|
00016a  f8942b39          LDRB     r2,[r4,#0xb39]        ;13364  ; displayStateCB
00016e  1c52              ADDS     r2,r2,#1              ;13364
000170  f0020203          AND      r2,r2,#3              ;13365
000174  f8842b39          STRB     r2,[r4,#0xb39]        ;13365
000178  e001              B        |L292.382|
                  |L292.378|
00017a  f8845b39          STRB     r5,[r4,#0xb39]        ;13369
                  |L292.382|
00017e  1c40              ADDS     r0,r0,#1              ;13372
000180  b2c0              UXTB     r0,r0                 ;13372
000182  f8840b31          STRB     r0,[r4,#0xb31]        ;13372
000186  2806              CMP      r0,#6                 ;13373
000188  d102              BNE      |L292.400|
00018a  2004              MOVS     r0,#4                 ;13375
00018c  f8840b39          STRB     r0,[r4,#0xb39]        ;13375
                  |L292.400|
000190  2902              CMP      r1,#2                 ;13380
000192  d1a1              BNE      |L292.216|
000194  f6043431          ADD      r4,r4,#0xb31          ;13382
000198  7025              STRB     r5,[r4,#0]            ;13382
00019a  7227              STRB     r7,[r4,#8]            ;13383
00019c  7267              STRB     r7,[r4,#9]            ;13384
00019e  7aa0              LDRB     r0,[r4,#0xa]          ;13386  ; displayStateCB
0001a0  7b61              LDRB     r1,[r4,#0xd]          ;13386  ; displayStateCB
0001a2  eb000240          ADD      r2,r0,r0,LSL #1       ;13386
0001a6  ebc210c0          RSB      r0,r2,r0,LSL #7       ;13386
0001aa  eb0102c0          ADD      r2,r1,r0,LSL #3       ;13386
0001ae  7ae1              LDRB     r1,[r4,#0xb]          ;13386  ; displayStateCB
0001b0  2064              MOVS     r0,#0x64              ;13386
0001b2  4341              MULS     r1,r0,r1              ;13386
0001b4  7b20              LDRB     r0,[r4,#0xc]          ;13386  ; displayStateCB
0001b6  f6a43431          SUB      r4,r4,#0xb31          ;13386
0001ba  eb000080          ADD      r0,r0,r0,LSL #2       ;13386
0001be  eb010040          ADD      r0,r1,r0,LSL #1       ;13386
0001c2  4410              ADD      r0,r0,r2              ;13386
0001c4  f8a602c8          STRH     r0,[r6,#0x2c8]        ;13386
0001c8  e758              B        |L292.124|
                  |L292.458|
0001ca  f8960319          LDRB     r0,[r6,#0x319]        ;13407  ; paramCB
0001ce  b110              CBZ      r0,|L292.470|
0001d0  f8865319          STRB     r5,[r6,#0x319]        ;13413
0001d4  e746              B        |L292.100|
                  |L292.470|
0001d6  f8868319          STRB     r8,[r6,#0x319]        ;13409
0001da  e743              B        |L292.100|
                  |L292.476|
0001dc  f8960332          LDRB     r0,[r6,#0x332]        ;13419  ; paramCB
0001e0  b140              CBZ      r0,|L292.500|
0001e2  2000              MOVS     r0,#0                 ;13419
                  |L292.484|
0001e4  f8860332          STRB     r0,[r6,#0x332]        ;13419
0001e8  f8860257          STRB     r0,[r6,#0x257]        ;13420
0001ec  200f              MOVS     r0,#0xf               ;13421
0001ee  f7fffffe          BL       DISPLAY_ResumeValue
0001f2  e737              B        |L292.100|
                  |L292.500|
0001f4  2001              MOVS     r0,#1                 ;13419
0001f6  e7f5              B        |L292.484|
;;;13444  
                          ENDP

                  |L292.504|
                          DCD      ||.bss||
                  |L292.508|
                          DCD      paramCB

                          AREA ||i.DISPLAY_MenuL1Select||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL1Select PROC
;;;12604  // 根菜单选项切换
;;;12605  void DISPLAY_MenuL1Select(uint32 direction)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;12606  {
000004  4682              MOV      r10,r0
;;;12607  	
;;;12608  	DISPLAY_MENU_TUNE_DIRECTION_E dir = (DISPLAY_MENU_TUNE_DIRECTION_E)direction;
000006  f00a04ff          AND      r4,r10,#0xff
;;;12609  	displayStateCB.menu.root.speedLimit = PARAM_GetSpeedLimit();
00000a  f7fffffe          BL       PARAM_GetSpeedLimit
00000e  4efb              LDR      r6,|L293.1020|
000010  f8a60b34          STRH     r0,[r6,#0xb34]
;;;12610  	
;;;12611  		// 到达上下限后不响应
;;;12612  	/*
;;;12613  	DISPLAY_ResumeValue(DISPLAY_MENU_CLEAR_TRIP);
;;;12614  	DISPLAY_ResumeValue(DISPLAY_MENU_DISPLAY_UNIT);
;;;12615  	
;;;12616  	
;;;12617  	DISPLAY_ResumeValue(DISPLAY_MENU_AUTO_LIGHT);
;;;12618  	
;;;12619  	DISPLAY_ResumeValue(DISPLAY_MENU_USER_PASSWORD);
;;;12620  	DISPLAY_ResumeValue(DISPLAY_MENU_SYSTEM_INFO);
;;;12621  	DISPLAY_ResumeValue(DISPLAY_MENU_SET_TIME);
;;;12622  	DISPLAY_ResumeValue(DISPLAY_MENU_CONNECT);
;;;12623  	DISPLAY_ResumeValue(DISPLAY_MENU_BACK);
;;;12624  */
;;;12625  	DISPLAY_ResumeValue(DISPLAY_MENU_SET_TIME);
000014  2052              MOVS     r0,#0x52
000016  f7fffffe          BL       DISPLAY_ResumeValue
;;;12626  	DISPLAY_ResumeValue(DISPLAY_MENU_USER_PASSWORD);
00001a  2050              MOVS     r0,#0x50
00001c  f7fffffe          BL       DISPLAY_ResumeValue
;;;12627  	DISPLAY_ResumeValue(DISPLAY_MENU_BACK); // 子菜单刷新上下限图标
000020  2054              MOVS     r0,#0x54
000022  f7fffffe          BL       DISPLAY_ResumeValue
;;;12628  	
;;;12629  	if (displayStateCB.menu.root.enterFlag > 0)
000026  f8961b31          LDRB     r1,[r6,#0xb31]  ; displayStateCB
;;;12630  	{
;;;12631  		switch (displayStateCB.menu.root.id)
;;;12632  		{
;;;12633  			case MENU_ID_ROOT_CLEAR_DATA:
;;;12634  
;;;12635  				break;
;;;12636  
;;;12637  			case MENU_ID_ROOT_DISPLAY_UNIT:
;;;12638  
;;;12639  				break;
;;;12640  
;;;12641  			case MENU_ID_ROOT_BACKLIGHT:
;;;12642  
;;;12643  				if (DISPLAY_MENU_TUNE_NEXT == dir)	// --
;;;12644  				{
;;;12645  					if (BACK_LIGHT_LEVEL_20_100 == paramCB.nvm.param.common.brightness)
;;;12646  					{
;;;12647  						paramCB.nvm.param.common.brightness = BACK_LIGHT_LEVEL_20_100;
;;;12648  					}
;;;12649  					else
;;;12650  					{
;;;12651  						paramCB.nvm.param.common.brightness--;
;;;12652  						DISPLAY_ResumeValue(DISPLAY_MENU_BACKLIGHT);
;;;12653  					}
;;;12654  				}
;;;12655  				else
;;;12656  				{
;;;12657  					if (BACK_LIGHT_LEVEL_AUTO == paramCB.nvm.param.common.brightness)
;;;12658  					{
;;;12659  						paramCB.nvm.param.common.brightness = BACK_LIGHT_LEVEL_AUTO;
;;;12660  					}
;;;12661  					else
;;;12662  					{
;;;12663  						paramCB.nvm.param.common.brightness++;
;;;12664  						DISPLAY_ResumeValue(DISPLAY_MENU_BACKLIGHT);
;;;12665  					}
;;;12666  				}
;;;12667  
;;;12668  			
;;;12669  				BACK_LIGHT_Start((BACK_LIGHT_LEVEL_E)paramCB.nvm.param.common.brightness);
;;;12670  				
;;;12671  				break;
;;;12672  
;;;12673  			case MENU_ID_ROOT_POWEROFF_TIME:
;;;12674  
;;;12675  				if (DISPLAY_MENU_TUNE_NEXT == dir)	// --
;;;12676  				{
;;;12677  					switch(paramCB.nvm.param.common.powerOffTime)
;;;12678  					{
;;;12679  						case 3:
;;;12680  							paramCB.nvm.param.common.powerOffTime = 0;
;;;12681  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12682  						break;
;;;12683  						
;;;12684  						case 5:
;;;12685  							paramCB.nvm.param.common.powerOffTime = 3;
;;;12686  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12687  						break;
;;;12688  						
;;;12689  						case 10:
;;;12690  							paramCB.nvm.param.common.powerOffTime = 5;
;;;12691  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12692  						break;
;;;12693  						
;;;12694  						case 30:
;;;12695  							paramCB.nvm.param.common.powerOffTime = 10;
00002a  250a              MOVS     r5,#0xa
00002c  4ff4              LDR      r7,|L293.1024|
00002e  f04f0800          MOV      r8,#0                 ;12629
000032  2900              CMP      r1,#0                 ;12629
000034  d06b              BEQ      |L293.270|
000036  f8960b30          LDRB     r0,[r6,#0xb30]        ;12631  ; displayStateCB
;;;12696  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12697  						break;
;;;12698  						
;;;12699  						case 60:
;;;12700  							paramCB.nvm.param.common.powerOffTime = 30;
;;;12701  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12702  						break;
;;;12703  					
;;;12704  						default:
;;;12705  							// 到达下限后不响应
;;;12706  							if(paramCB.nvm.param.common.powerOffTime != 0)
;;;12707  							{
;;;12708  								paramCB.nvm.param.common.powerOffTime = 0;
;;;12709  								DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12710  							}
;;;12711  						
;;;12712  						break;
;;;12713  					}
;;;12714  
;;;12715  				}
;;;12716  				else
;;;12717  				{
;;;12718  					switch(paramCB.nvm.param.common.powerOffTime)
;;;12719  					{
;;;12720  						case 3:
;;;12721  							paramCB.nvm.param.common.powerOffTime = 5;
;;;12722  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12723  						break;
;;;12724  						
;;;12725  						case 5:
;;;12726  							paramCB.nvm.param.common.powerOffTime = 10;
;;;12727  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12728  						break;
;;;12729  						
;;;12730  						case 10:
;;;12731  							paramCB.nvm.param.common.powerOffTime = 30;
;;;12732  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12733  						break;
;;;12734  						
;;;12735  						case 30:
;;;12736  							paramCB.nvm.param.common.powerOffTime = 60;
00003a  f04f093c          MOV      r9,#0x3c
00003e  2809              CMP      r0,#9                 ;12631
000040  d27e              BCS      |L293.320|
000042  e8dff000          TBB      [pc,r0]               ;12631
000046  c8c8              DCB      0xc8,0xc8
000048  0529c89a          DCB      0x05,0x29,0xc8,0x9a
00004c  ffc8ef00          DCB      0xff,0xc8,0xef,0x00
000050  b17c              CBZ      r4,|L293.114|
000052  f8970320          LDRB     r0,[r7,#0x320]        ;12657  ; paramCB
000056  2806              CMP      r0,#6                 ;12657
000058  d01a              BEQ      |L293.144|
00005a  1c40              ADDS     r0,r0,#1              ;12663
00005c  f8870320          STRB     r0,[r7,#0x320]        ;12663
000060  204c              MOVS     r0,#0x4c              ;12664
000062  f7fffffe          BL       DISPLAY_ResumeValue
                  |L293.102|
000066  f8970320          LDRB     r0,[r7,#0x320]        ;12669  ; paramCB
00006a  e8bd47f0          POP      {r4-r10,lr}           ;12669
00006e  f7ffbffe          B.W      BACK_LIGHT_Start
                  |L293.114|
000072  f8970320          LDRB     r0,[r7,#0x320]        ;12645  ; paramCB
000076  2801              CMP      r0,#1                 ;12645
000078  d006              BEQ      |L293.136|
00007a  1e40              SUBS     r0,r0,#1              ;12651
00007c  f8870320          STRB     r0,[r7,#0x320]        ;12651
000080  204c              MOVS     r0,#0x4c              ;12652
000082  f7fffffe          BL       DISPLAY_ResumeValue
000086  e7ee              B        |L293.102|
                  |L293.136|
000088  2001              MOVS     r0,#1                 ;12647
00008a  f8870320          STRB     r0,[r7,#0x320]        ;12647
00008e  e7ea              B        |L293.102|
                  |L293.144|
000090  2006              MOVS     r0,#6                 ;12659
000092  f8870320          STRB     r0,[r7,#0x320]        ;12659
000096  e7e6              B        |L293.102|
000098  2105              MOVS     r1,#5                 ;12631
00009a  2203              MOVS     r2,#3                 ;12631
00009c  231e              MOVS     r3,#0x1e              ;12700
00009e  b144              CBZ      r4,|L293.178|
0000a0  f8970321          LDRB     r0,[r7,#0x321]        ;12718  ; paramCB
0000a4  2805              CMP      r0,#5                 ;12718
0000a6  d050              BEQ      |L293.330|
0000a8  dc38              BGT      |L293.284|
0000aa  b378              CBZ      r0,|L293.268|
0000ac  2803              CMP      r0,#3                 ;12718
0000ae  d139              BNE      |L293.292|
0000b0  e043              B        |L293.314|
                  |L293.178|
0000b2  f8970321          LDRB     r0,[r7,#0x321]        ;12677  ; paramCB
0000b6  280a              CMP      r0,#0xa               ;12677
0000b8  d01c              BEQ      |L293.244|
0000ba  dc04              BGT      |L293.198|
0000bc  2803              CMP      r0,#3                 ;12677
0000be  d00d              BEQ      |L293.220|
0000c0  2805              CMP      r0,#5                 ;12677
0000c2  d104              BNE      |L293.206|
0000c4  e010              B        |L293.232|
                  |L293.198|
0000c6  281e              CMP      r0,#0x1e              ;12677
0000c8  d01a              BEQ      |L293.256|
0000ca  283c              CMP      r0,#0x3c              ;12677
0000cc  d020              BEQ      |L293.272|
                  |L293.206|
0000ce  b320              CBZ      r0,|L293.282|
0000d0  f8878321          STRB     r8,[r7,#0x321]        ;12708
0000d4  204d              MOVS     r0,#0x4d              ;12709
0000d6  f7fffffe          BL       DISPLAY_ResumeValue
0000da  e02a              B        |L293.306|
                  |L293.220|
0000dc  f8878321          STRB     r8,[r7,#0x321]        ;12680
0000e0  204d              MOVS     r0,#0x4d              ;12681
0000e2  f7fffffe          BL       DISPLAY_ResumeValue
0000e6  e024              B        |L293.306|
                  |L293.232|
0000e8  f8872321          STRB     r2,[r7,#0x321]        ;12685
0000ec  204d              MOVS     r0,#0x4d              ;12686
0000ee  f7fffffe          BL       DISPLAY_ResumeValue
0000f2  e01e              B        |L293.306|
                  |L293.244|
0000f4  f8871321          STRB     r1,[r7,#0x321]        ;12690
0000f8  204d              MOVS     r0,#0x4d              ;12691
0000fa  f7fffffe          BL       DISPLAY_ResumeValue
0000fe  e018              B        |L293.306|
                  |L293.256|
000100  f8875321          STRB     r5,[r7,#0x321]        ;12695
000104  204d              MOVS     r0,#0x4d              ;12696
000106  f7fffffe          BL       DISPLAY_ResumeValue
00010a  e012              B        |L293.306|
                  |L293.268|
00010c  e02f              B        |L293.366|
                  |L293.270|
00010e  e188              B        |L293.1058|
                  |L293.272|
000110  f8873321          STRB     r3,[r7,#0x321]        ;12700
000114  204d              MOVS     r0,#0x4d              ;12701
000116  f7fffffe          BL       DISPLAY_ResumeValue
                  |L293.282|
00011a  e00a              B        |L293.306|
                  |L293.284|
00011c  280a              CMP      r0,#0xa               ;12718
00011e  d01a              BEQ      |L293.342|
000120  281e              CMP      r0,#0x1e              ;12718
000122  d01e              BEQ      |L293.354|
                  |L293.292|
;;;12737  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12738  						break;
;;;12739  						
;;;12740  						case 0:
;;;12741  							paramCB.nvm.param.common.powerOffTime = 3;
;;;12742  							DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;12743  						break;
;;;12744  					
;;;12745  						default:
;;;12746  							// 到达上限后不响应
;;;12747  							if(paramCB.nvm.param.common.powerOffTime != 60)
000124  283c              CMP      r0,#0x3c
000126  d004              BEQ      |L293.306|
;;;12748  							{
;;;12749  								paramCB.nvm.param.common.powerOffTime = 60;
000128  f8879321          STRB     r9,[r7,#0x321]
;;;12750  								DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
00012c  204d              MOVS     r0,#0x4d
00012e  f7fffffe          BL       DISPLAY_ResumeValue
                  |L293.306|
;;;12751  							}
;;;12752  						break;
;;;12753  							
;;;12754  					}
;;;12755  
;;;12756  				}
;;;12757  
;;;12758  //				TIMER_KillTask(TIMER_ID_AUTO_POWER_OFF);
;;;12759  		
;;;12760  				// 重置自动关机任务
;;;12761  				STATE_ResetAutoPowerOffControl();
000132  e8bd47f0          POP      {r4-r10,lr}
000136  f7ffbffe          B.W      STATE_ResetAutoPowerOffControl
                  |L293.314|
00013a  f8871321          STRB     r1,[r7,#0x321]        ;12721
00013e  e000              B        |L293.322|
                  |L293.320|
000140  e049              B        |L293.470|
                  |L293.322|
000142  204d              MOVS     r0,#0x4d              ;12722
000144  f7fffffe          BL       DISPLAY_ResumeValue
000148  e7f3              B        |L293.306|
                  |L293.330|
00014a  f8875321          STRB     r5,[r7,#0x321]        ;12726
00014e  204d              MOVS     r0,#0x4d              ;12727
000150  f7fffffe          BL       DISPLAY_ResumeValue
000154  e7ed              B        |L293.306|
                  |L293.342|
000156  f8873321          STRB     r3,[r7,#0x321]        ;12731
00015a  204d              MOVS     r0,#0x4d              ;12732
00015c  f7fffffe          BL       DISPLAY_ResumeValue
000160  e7e7              B        |L293.306|
                  |L293.354|
000162  f8879321          STRB     r9,[r7,#0x321]        ;12736
000166  204d              MOVS     r0,#0x4d              ;12737
000168  f7fffffe          BL       DISPLAY_ResumeValue
00016c  e7e1              B        |L293.306|
                  |L293.366|
00016e  f8872321          STRB     r2,[r7,#0x321]        ;12741
000172  204d              MOVS     r0,#0x4d              ;12742
000174  f7fffffe          BL       DISPLAY_ResumeValue
000178  e7db              B        |L293.306|
;;;12762  				break;
;;;12763  
;;;12764  			case MENU_ID_ROOT_AUTO_LIGHT:
;;;12765  
;;;12766  				break;
;;;12767  
;;;12768  			case MENU_ID_ROOT_SPEED_LIMIT:
;;;12769  
;;;12770  				if (UNIT_METRIC == PARAM_GetUnit())
00017a  f8970319          LDRB     r0,[r7,#0x319]  ; paramCB
00017e  b360              CBZ      r0,|L293.474|
;;;12771  				{
;;;12772  					if (DISPLAY_MENU_TUNE_NEXT == dir)	// --
;;;12773  					{
;;;12774  						if (displayStateCB.menu.root.speedLimit > 100)
;;;12775  						{
;;;12776  							displayStateCB.menu.root.speedLimit-=10;
;;;12777  							DISPLAY_ResumeValue(DISPLAY_MENU_SPEED_LIMIT);
;;;12778  						}
;;;12779  					}
;;;12780  					else
;;;12781  					{
;;;12782  						if (displayStateCB.menu.root.speedLimit < 410)
;;;12783  						{
;;;12784  							displayStateCB.menu.root.speedLimit+=10;
;;;12785  							DISPLAY_ResumeValue(DISPLAY_MENU_SPEED_LIMIT);
;;;12786  						}
;;;12787  					}
;;;12788  				}
;;;12789  				else
;;;12790  				{
;;;12791  					if (DISPLAY_MENU_TUNE_NEXT == dir)	// --
000180  b3c4              CBZ      r4,|L293.500|
;;;12792  					{
;;;12793  						if (displayStateCB.menu.root.speedLimit > 62)
;;;12794  						{
;;;12795  							displayStateCB.menu.root.speedLimit-=10;
;;;12796  							DISPLAY_ResumeValue(DISPLAY_MENU_SPEED_LIMIT);
;;;12797  							
;;;12798  						}
;;;12799  					}
;;;12800  					else
;;;12801  					{
;;;12802  						if (displayStateCB.menu.root.speedLimit < 254)
000182  f8b60b34          LDRH     r0,[r6,#0xb34]  ; displayStateCB
000186  28fe              CMP      r0,#0xfe
000188  d20c              BCS      |L293.420|
;;;12803  						{
;;;12804  							displayStateCB.menu.root.speedLimit+=10;
00018a  300a              ADDS     r0,r0,#0xa
00018c  f8a60b34          STRH     r0,[r6,#0xb34]
;;;12805  							DISPLAY_ResumeValue(DISPLAY_MENU_SPEED_LIMIT);
000190  204f              MOVS     r0,#0x4f
000192  f7fffffe          BL       DISPLAY_ResumeValue
;;;12806  							if(displayStateCB.menu.root.speedLimit > speedLimitMPH_H)
000196  f8b60b34          LDRH     r0,[r6,#0xb34]  ; displayStateCB
00019a  28fc              CMP      r0,#0xfc
00019c  d902              BLS      |L293.420|
;;;12807  							{
;;;12808  								displayStateCB.menu.root.speedLimit = 254;
00019e  20fe              MOVS     r0,#0xfe
0001a0  f8a60b34          STRH     r0,[r6,#0xb34]
                  |L293.420|
;;;12809  							}
;;;12810  						}
;;;12811  					}
;;;12812  				}
;;;12813  
;;;12814  				if (UNIT_METRIC == PARAM_GetUnit())
0001a4  f8970319          LDRB     r0,[r7,#0x319]  ; paramCB
0001a8  b380              CBZ      r0,|L293.524|
;;;12815  				{
;;;12816  					// 以公制保存，舍弃小数位
;;;12817  					PARAM_SetSpeedLimit(((displayStateCB.menu.root.speedLimit + 5)/10*10));
;;;12818  				}
;;;12819  				else
;;;12820  				{
;;;12821  					// 以公制保存，因为公制转英制丢失了1个精度，因此再转回来需要加回来丢失的1个精度
;;;12822  					PARAM_SetSpeedLimit((displayStateCB.menu.root.speedLimit/METRIC_TO_INCH_COFF+1)/10*10);
0001aa  f8b60b34          LDRH     r0,[r6,#0xb34]  ; displayStateCB
0001ae  f7fffffe          BL       __aeabi_ui2f
0001b2  4994              LDR      r1,|L293.1028|
0001b4  f7fffffe          BL       __aeabi_fdiv
0001b8  f04f517e          MOV      r1,#0x3f800000
0001bc  f7fffffe          BL       __aeabi_fadd
0001c0  4c91              LDR      r4,|L293.1032|
0001c2  4621              MOV      r1,r4
0001c4  f7fffffe          BL       __aeabi_fdiv
0001c8  4621              MOV      r1,r4
0001ca  f7fffffe          BL       __aeabi_fmul
0001ce  f7fffffe          BL       __aeabi_f2uiz
0001d2  f8a70334          STRH     r0,[r7,#0x334]
                  |L293.470|
;;;12823  				}
;;;12824  				break;
;;;12825  
;;;12826  			case MENU_ID_ROOT_USER_PASSWORD:
;;;12827  
;;;12828  				if (DISPLAY_MENU_TUNE_PREVIOUS == dir)	// --
;;;12829  				{
;;;12830  					// 有密码
;;;12831  					if (!paramCB.nvm.param.protocol.powerPasswordSwitchShow)
;;;12832  					{
;;;12833  						switch (displayStateCB.menu.root.enterFlag)
;;;12834  						{
;;;12835  							case 1:
;;;12836  								if (0 == displayStateCB.menu.root.password.menuCursor)
;;;12837  								{
;;;12838  									displayStateCB.menu.root.password.menuCursor = 2;
;;;12839  								}
;;;12840  								else
;;;12841  								{
;;;12842  									displayStateCB.menu.root.password.menuCursor --;
;;;12843  								}
;;;12844  								break;
;;;12845  
;;;12846  							case 2:
;;;12847  								switch (displayStateCB.menu.root.password.menuCursor)
;;;12848  								{
;;;12849  									case 1:
;;;12850  										displayStateCB.menu.root.password.number1++;
;;;12851  										displayStateCB.menu.root.password.number1%=10;
;;;12852  										break;
;;;12853  
;;;12854  									default:
;;;12855  										break;
;;;12856  								}
;;;12857  								
;;;12858  								break;
;;;12859  
;;;12860  							case 3:
;;;12861  								displayStateCB.menu.root.password.number2++;
;;;12862  								displayStateCB.menu.root.password.number2%=10;
;;;12863  								
;;;12864  								break;
;;;12865  
;;;12866  							case 4:
;;;12867  								displayStateCB.menu.root.password.number3++;
;;;12868  								displayStateCB.menu.root.password.number3%=10;
;;;12869  								
;;;12870  								break;
;;;12871  
;;;12872  							case 5:
;;;12873  								displayStateCB.menu.root.password.number4++;
;;;12874  								displayStateCB.menu.root.password.number4%=10;
;;;12875  								
;;;12876  								break;
;;;12877  							default:
;;;12878  								break;
;;;12879  						}
;;;12880  					}
;;;12881  					else
;;;12882  					{
;;;12883  						switch (displayStateCB.menu.root.enterFlag)
;;;12884  						{
;;;12885  							case 1:
;;;12886  								if (0 == displayStateCB.menu.root.password.menuCursor)
;;;12887  								{
;;;12888  									displayStateCB.menu.root.password.menuCursor = 2;
;;;12889  								}
;;;12890  								else
;;;12891  								{
;;;12892  									displayStateCB.menu.root.password.menuCursor = 0;
;;;12893  								}
;;;12894  								break;
;;;12895  									
;;;12896  							default:
;;;12897  								break;
;;;12898  						}
;;;12899  					}
;;;12900  				}
;;;12901  				else
;;;12902  				{
;;;12903  					// 有密码
;;;12904  					if (!paramCB.nvm.param.protocol.powerPasswordSwitchShow)
;;;12905  					{
;;;12906  						switch (displayStateCB.menu.root.enterFlag)
;;;12907  						{
;;;12908  							case 1:
;;;12909  								displayStateCB.menu.root.password.menuCursor++;
;;;12910  								if (3 == displayStateCB.menu.root.password.menuCursor)
;;;12911  								{
;;;12912  									displayStateCB.menu.root.password.menuCursor = 0;
;;;12913  								}
;;;12914  								break;
;;;12915  								
;;;12916  							case 2:
;;;12917  								switch (displayStateCB.menu.root.password.menuCursor)
;;;12918  								{
;;;12919  									case 1:
;;;12920  										displayStateCB.menu.root.password.number1+=(10-1);
;;;12921  										displayStateCB.menu.root.password.number1%=10;
;;;12922  										break;
;;;12923  
;;;12924  									default:
;;;12925  										break;
;;;12926  								}
;;;12927  								break;
;;;12928  							
;;;12929  							case 3:
;;;12930  								displayStateCB.menu.root.password.number2+=(10-1);
;;;12931  								displayStateCB.menu.root.password.number2%=10;
;;;12932  								
;;;12933  								break;
;;;12934  
;;;12935  							case 4:
;;;12936  								displayStateCB.menu.root.password.number3+=(10-1);
;;;12937  								displayStateCB.menu.root.password.number3%=10;
;;;12938  								
;;;12939  								break;
;;;12940  
;;;12941  							case 5:
;;;12942  								displayStateCB.menu.root.password.number4+=(10-1);
;;;12943  								displayStateCB.menu.root.password.number4%=10;
;;;12944  								
;;;12945  								break;
;;;12946  
;;;12947  							default:
;;;12948  								break;
;;;12949  						}
;;;12950  					}
;;;12951  					else
;;;12952  					{
;;;12953  						switch (displayStateCB.menu.root.enterFlag)
;;;12954  						{
;;;12955  							case 1:
;;;12956  
;;;12957  								if (0 == displayStateCB.menu.root.password.menuCursor)
;;;12958  								{
;;;12959  									displayStateCB.menu.root.password.menuCursor = 2;
;;;12960  								}
;;;12961  								else
;;;12962  								{
;;;12963  									displayStateCB.menu.root.password.menuCursor = 0;
;;;12964  								}
;;;12965  								
;;;12966  								break;
;;;12967  									
;;;12968  							default:
;;;12969  								break;
;;;12970  						}
;;;12971  					}	
;;;12972  				}
;;;12973  				
;;;12974  				break;
;;;12975  
;;;12976  			case MENU_ID_ROOT_SYSTEM_INFO:
;;;12977  
;;;12978  				break;
;;;12979  
;;;12980  			case MENU_ID_ROOT_SET_TIME:
;;;12981  
;;;12982  
;;;12983  				DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_HOUR, BLINK_MODE_ON);
;;;12984  				DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_MINUTE, BLINK_MODE_ON);
;;;12985  			
;;;12986  ////				TIMER_AddTask(TIMER_ID_SET_TIME_BLINK,
;;;12987  //								500,
;;;12988  //								DISPLAY_SetTime_BLINKOnOff,
;;;12989  //								TRUE,
;;;12990  //								1,
;;;12991  //								ACTION_MODE_ADD_TO_QUEUE);
;;;12992  
;;;12993  				switch (displayStateCB.menu.root.rtc.tuneBit)
;;;12994  				{
;;;12995  					// 调整小时时，+ -键用于调整小时
;;;12996  					case RTC_TUNE_BIT_HOUR:
;;;12997  
;;;12998  						// +
;;;12999  						if(DISPLAY_MENU_TUNE_NEXT == direction)
;;;13000  						{
;;;13001  							displayStateCB.menu.root.rtc.hour += 24*5-1;
;;;13002  							displayStateCB.menu.root.rtc.hour %= 24;
;;;13003  						}
;;;13004  						// -
;;;13005  						else
;;;13006  						{
;;;13007  							displayStateCB.menu.root.rtc.hour += 1;
;;;13008  							displayStateCB.menu.root.rtc.hour %= 24;
;;;13009  						}
;;;13010  						break;
;;;13011  
;;;13012  					// 调整分钟时，+ -键用于调整分钟
;;;13013  					case RTC_TUNE_BIT_MINUTE:
;;;13014  
;;;13015  						// +
;;;13016  						if(DISPLAY_MENU_TUNE_NEXT == direction)
;;;13017  						{
;;;13018  							displayStateCB.menu.root.rtc.minute += 60*2-1;
;;;13019  							displayStateCB.menu.root.rtc.minute %= 60;
;;;13020  						}
;;;13021  						// -
;;;13022  						else
;;;13023  						{
;;;13024  							displayStateCB.menu.root.rtc.minute += 1;
;;;13025  							displayStateCB.menu.root.rtc.minute %= 60;
;;;13026  						}
;;;13027  						break;
;;;13028  						
;;;13029  					default:
;;;13030  						break;
;;;13031  				}
;;;13032  				break;
;;;13033  
;;;13034  			case MENU_ID_ROOT_CONNECT_TO_APP:
;;;13035  
;;;13036  				break;
;;;13037  
;;;13038  			default:
;;;13039  				break;
;;;13040  		}
;;;13041  	}
;;;13042  	else
;;;13043  	{
;;;13044  		// 刷新菜单栏数据
;;;13045  		DISPLAY_ResumeValue(DISPLAY_MENU_CLEAR_TRIP);
;;;13046  		DISPLAY_ResumeValue(DISPLAY_MENU_DISPLAY_UNIT);
;;;13047  		DISPLAY_ResumeValue(DISPLAY_MENU_BACKLIGHT);
;;;13048  		DISPLAY_ResumeValue(DISPLAY_MENU_POWEROFF_TIME);
;;;13049  		DISPLAY_ResumeValue(DISPLAY_MENU_AUTO_LIGHT);
;;;13050  		DISPLAY_ResumeValue(DISPLAY_MENU_SPEED_LIMIT);
;;;13051  		DISPLAY_ResumeValue(DISPLAY_MENU_USER_PASSWORD);
;;;13052  		DISPLAY_ResumeValue(DISPLAY_MENU_SYSTEM_INFO);
;;;13053  		DISPLAY_ResumeValue(DISPLAY_MENU_SET_TIME);
;;;13054  		DISPLAY_ResumeValue(DISPLAY_MENU_CONNECT);
;;;13055  		// 有无蓝牙
;;;13056  		if (PARAM_GetExistBle())
;;;13057  		{
;;;13058  			
;;;13059  			if(DISPLAY_MENU_TUNE_NEXT == dir)
;;;13060  			{
;;;13061  				if(displayStateCB.menu.root.id < MENU_ID_ROOT_BACK)
;;;13062  				{
;;;13063  				displayStateCB.menu.root.id ++;
;;;13064  				displayStateCB.menu.root.id %= MENU_ID_ROOT_COUNT;
;;;13065  				}
;;;13066  			}
;;;13067  			else
;;;13068  			{
;;;13069  				if(displayStateCB.menu.root.id != MENU_ID_ROOT_CLEAR_DATA)
;;;13070  				{
;;;13071  				displayStateCB.menu.root.id += (MENU_ID_ROOT_COUNT - 1);
;;;13072  				displayStateCB.menu.root.id %= MENU_ID_ROOT_COUNT;
;;;13073  				}
;;;13074  			}
;;;13075  		}
;;;13076  		else
;;;13077  		{
;;;13078  			if(DISPLAY_MENU_TUNE_NEXT == dir)
;;;13079  			{
;;;13080  				displayStateCB.menu.root.id ++;
;;;13081  				displayStateCB.menu.root.id %= MENU_ID_ROOT_BACK;
;;;13082  			}
;;;13083  			else
;;;13084  			{
;;;13085  				displayStateCB.menu.root.id += (MENU_ID_ROOT_BACK - 1);
;;;13086  				displayStateCB.menu.root.id %= MENU_ID_ROOT_BACK;
;;;13087  			}
;;;13088  		}
;;;13089  		
;;;13090  		// 背光界面逻辑
;;;13091  		if(MENU_ID_ROOT_BACKLIGHT == displayStateCB.menu.root.id)
;;;13092  		{
;;;13093  			BACK_LIGHT_Start((BACK_LIGHT_LEVEL_E)paramCB.nvm.param.common.brightness);
;;;13094  			paramCB.runtime.headAutoLight = 0;
;;;13095  		}
;;;13096  		else
;;;13097  		{
;;;13098  			if(PARAM_GetLightSwitch())
;;;13099  			{
;;;13100  				BACK_LIGHT_Start(BACK_LIGHT_LEVEL_20_100);
;;;13101  			}
;;;13102  			paramCB.runtime.headAutoLight = paramCB.nvm.param.common.backlight.autoLight;
;;;13103  		}
;;;13104  	}
;;;13105  	
;;;13106  }
0001d6  e8bd87f0          POP      {r4-r10,pc}
                  |L293.474|
0001da  b164              CBZ      r4,|L293.502|
0001dc  f8b60b34          LDRH     r0,[r6,#0xb34]        ;12782  ; displayStateCB
0001e0  f5b07fcd          CMP      r0,#0x19a             ;12782
0001e4  d2de              BCS      |L293.420|
0001e6  300a              ADDS     r0,r0,#0xa            ;12784
0001e8  f8a60b34          STRH     r0,[r6,#0xb34]        ;12784
0001ec  204f              MOVS     r0,#0x4f              ;12785
0001ee  f7fffffe          BL       DISPLAY_ResumeValue
0001f2  e7d7              B        |L293.420|
                  |L293.500|
0001f4  e00b              B        |L293.526|
                  |L293.502|
0001f6  f8b60b34          LDRH     r0,[r6,#0xb34]        ;12774  ; displayStateCB
0001fa  2864              CMP      r0,#0x64              ;12774
0001fc  d9d2              BLS      |L293.420|
0001fe  380a              SUBS     r0,r0,#0xa            ;12776
000200  f8a60b34          STRH     r0,[r6,#0xb34]        ;12776
000204  204f              MOVS     r0,#0x4f              ;12777
000206  f7fffffe          BL       DISPLAY_ResumeValue
00020a  e7cb              B        |L293.420|
                  |L293.524|
00020c  e00c              B        |L293.552|
                  |L293.526|
00020e  f8b60b34          LDRH     r0,[r6,#0xb34]        ;12793  ; displayStateCB
000212  283e              CMP      r0,#0x3e              ;12793
000214  d9c6              BLS      |L293.420|
000216  380a              SUBS     r0,r0,#0xa            ;12795
000218  f8a60b34          STRH     r0,[r6,#0xb34]        ;12795
00021c  204f              MOVS     r0,#0x4f              ;12796
00021e  f7fffffe          BL       DISPLAY_ResumeValue
000222  e7bf              B        |L293.420|
000224  e0b5              B        |L293.914|
000226  e00d              B        |L293.580|
                  |L293.552|
000228  f8b60b34          LDRH     r0,[r6,#0xb34]        ;12817  ; displayStateCB
00022c  f64f71ff          MOV      r1,#0xffff            ;12817
000230  1d40              ADDS     r0,r0,#5              ;12817
000232  fbb0f0f5          UDIV     r0,r0,r5              ;12817
000236  eb000080          ADD      r0,r0,r0,LSL #2       ;12817
00023a  ea010040          AND      r0,r1,r0,LSL #1       ;12817
00023e  f8a70334          STRH     r0,[r7,#0x334]        ;12817
                  |L293.578|
000242  e7c8              B        |L293.470|
                  |L293.580|
000244  2202              MOVS     r2,#2                 ;12631
000246  2c01              CMP      r4,#1                 ;12828
000248  d00a              BEQ      |L293.608|
00024a  f89702cc          LDRB     r0,[r7,#0x2cc]        ;12904  ; paramCB
00024e  b398              CBZ      r0,|L293.696|
000250  2901              CMP      r1,#1                 ;12953
000252  d1c0              BNE      |L293.470|
000254  f8960b3a          LDRB     r0,[r6,#0xb3a]        ;12957  ; displayStateCB
000258  b378              CBZ      r0,|L293.698|
00025a  f8868b3a          STRB     r8,[r6,#0xb3a]        ;12963
00025e  e7ba              B        |L293.470|
                  |L293.608|
000260  f89702cc          LDRB     r0,[r7,#0x2cc]        ;12831  ; paramCB
000264  b138              CBZ      r0,|L293.630|
000266  2901              CMP      r1,#1                 ;12883
000268  d1b5              BNE      |L293.470|
00026a  f8960b3a          LDRB     r0,[r6,#0xb3a]        ;12886  ; displayStateCB
00026e  b380              CBZ      r0,|L293.722|
000270  f8868b3a          STRB     r8,[r6,#0xb3a]        ;12892
000274  e7af              B        |L293.470|
                  |L293.630|
000276  2906              CMP      r1,#6                 ;12833
000278  d2ad              BCS      |L293.470|
00027a  e8dff001          TBB      [pc,r1]               ;12833
00027e  0304              DCB      0x03,0x04
000280  0e1f2b36          DCB      0x0e,0x1f,0x2b,0x36
000284  e7a7              B        |L293.470|
000286  f8960b3a          LDRB     r0,[r6,#0xb3a]        ;12836  ; displayStateCB
00028a  b118              CBZ      r0,|L293.660|
00028c  1e40              SUBS     r0,r0,#1              ;12842
00028e  f8860b3a          STRB     r0,[r6,#0xb3a]        ;12842
000292  e7a0              B        |L293.470|
                  |L293.660|
000294  f8862b3a          STRB     r2,[r6,#0xb3a]        ;12838
000298  e79d              B        |L293.470|
00029a  f8960b3a          LDRB     r0,[r6,#0xb3a]        ;12847  ; displayStateCB
00029e  2801              CMP      r0,#1                 ;12847
0002a0  d199              BNE      |L293.470|
0002a2  f8960b3b          LDRB     r0,[r6,#0xb3b]        ;12850  ; displayStateCB
0002a6  1c40              ADDS     r0,r0,#1              ;12850
0002a8  b2c0              UXTB     r0,r0                 ;12850
0002aa  fbb0f1f5          UDIV     r1,r0,r5              ;12851
0002ae  fb050011          MLS      r0,r5,r1,r0           ;12851
0002b2  f8860b3b          STRB     r0,[r6,#0xb3b]        ;12851
                  |L293.694|
0002b6  e78e              B        |L293.470|
                  |L293.696|
0002b8  e025              B        |L293.774|
                  |L293.698|
0002ba  e067              B        |L293.908|
0002bc  f8960b3c          LDRB     r0,[r6,#0xb3c]        ;12861  ; displayStateCB
0002c0  1c40              ADDS     r0,r0,#1              ;12861
0002c2  b2c0              UXTB     r0,r0                 ;12861
0002c4  fbb0f1f5          UDIV     r1,r0,r5              ;12862
0002c8  fb050011          MLS      r0,r5,r1,r0           ;12862
0002cc  f8860b3c          STRB     r0,[r6,#0xb3c]        ;12862
0002d0  e781              B        |L293.470|
                  |L293.722|
0002d2  e015              B        |L293.768|
0002d4  f8960b3d          LDRB     r0,[r6,#0xb3d]        ;12867  ; displayStateCB
0002d8  1c40              ADDS     r0,r0,#1              ;12867
0002da  b2c0              UXTB     r0,r0                 ;12867
0002dc  fbb0f1f5          UDIV     r1,r0,r5              ;12868
0002e0  fb050011          MLS      r0,r5,r1,r0           ;12868
0002e4  f8860b3d          STRB     r0,[r6,#0xb3d]        ;12868
0002e8  e775              B        |L293.470|
0002ea  f8960b3e          LDRB     r0,[r6,#0xb3e]        ;12873  ; displayStateCB
0002ee  1c40              ADDS     r0,r0,#1              ;12873
0002f0  b2c0              UXTB     r0,r0                 ;12873
0002f2  fbb0f1f5          UDIV     r1,r0,r5              ;12874
0002f6  fb050011          MLS      r0,r5,r1,r0           ;12874
0002fa  f8860b3e          STRB     r0,[r6,#0xb3e]        ;12874
0002fe  e76a              B        |L293.470|
                  |L293.768|
000300  f8862b3a          STRB     r2,[r6,#0xb3a]        ;12888
000304  e767              B        |L293.470|
                  |L293.774|
000306  2906              CMP      r1,#6                 ;12906
000308  d29b              BCS      |L293.578|
00030a  e8dff001          TBB      [pc,r1]               ;12906
00030e  0304              DCB      0x03,0x04
000310  0f1e2934          DCB      0x0f,0x1e,0x29,0x34
000314  e75f              B        |L293.470|
000316  f8960b3a          LDRB     r0,[r6,#0xb3a]        ;12909  ; displayStateCB
00031a  1c40              ADDS     r0,r0,#1              ;12909
00031c  b2c0              UXTB     r0,r0                 ;12909
00031e  f8860b3a          STRB     r0,[r6,#0xb3a]        ;12909
000322  2803              CMP      r0,#3                 ;12910
000324  d18d              BNE      |L293.578|
000326  f8868b3a          STRB     r8,[r6,#0xb3a]        ;12912
00032a  e754              B        |L293.470|
00032c  f8960b3a          LDRB     r0,[r6,#0xb3a]        ;12917  ; displayStateCB
000330  2801              CMP      r0,#1                 ;12917
000332  d186              BNE      |L293.578|
000334  f8960b3b          LDRB     r0,[r6,#0xb3b]        ;12920  ; displayStateCB
000338  3009              ADDS     r0,r0,#9              ;12920
00033a  b2c0              UXTB     r0,r0                 ;12920
00033c  fbb0f1f5          UDIV     r1,r0,r5              ;12921
000340  fb050011          MLS      r0,r5,r1,r0           ;12921
000344  f8860b3b          STRB     r0,[r6,#0xb3b]        ;12921
000348  e745              B        |L293.470|
00034a  f8960b3c          LDRB     r0,[r6,#0xb3c]        ;12930  ; displayStateCB
00034e  3009              ADDS     r0,r0,#9              ;12930
000350  b2c0              UXTB     r0,r0                 ;12930
000352  fbb0f1f5          UDIV     r1,r0,r5              ;12931
000356  fb050011          MLS      r0,r5,r1,r0           ;12931
00035a  f8860b3c          STRB     r0,[r6,#0xb3c]        ;12931
00035e  e73a              B        |L293.470|
000360  f8960b3d          LDRB     r0,[r6,#0xb3d]        ;12936  ; displayStateCB
000364  3009              ADDS     r0,r0,#9              ;12936
000366  b2c0              UXTB     r0,r0                 ;12936
000368  fbb0f1f5          UDIV     r1,r0,r5              ;12937
00036c  fb050011          MLS      r0,r5,r1,r0           ;12937
000370  f8860b3d          STRB     r0,[r6,#0xb3d]        ;12937
000374  e72f              B        |L293.470|
000376  f8960b3e          LDRB     r0,[r6,#0xb3e]        ;12942  ; displayStateCB
00037a  3009              ADDS     r0,r0,#9              ;12942
00037c  b2c0              UXTB     r0,r0                 ;12942
00037e  fbb0f1f5          UDIV     r1,r0,r5              ;12943
000382  fb050011          MLS      r0,r5,r1,r0           ;12943
000386  f8860b3e          STRB     r0,[r6,#0xb3e]        ;12943
00038a  e724              B        |L293.470|
                  |L293.908|
00038c  f8862b3a          STRB     r2,[r6,#0xb3a]        ;12959
000390  e721              B        |L293.470|
                  |L293.914|
000392  2101              MOVS     r1,#1                 ;12983
000394  2003              MOVS     r0,#3                 ;12983
000396  f7fffffe          BL       DISPLAY_BLINK_ModeControl
00039a  2101              MOVS     r1,#1                 ;12984
00039c  2004              MOVS     r0,#4                 ;12984
00039e  f7fffffe          BL       DISPLAY_BLINK_ModeControl
0003a2  f8960b42          LDRB     r0,[r6,#0xb42]        ;12993  ; displayStateCB
0003a6  b178              CBZ      r0,|L293.968|
0003a8  2801              CMP      r0,#1                 ;12993
0003aa  d184              BNE      |L293.694|
0003ac  f1ba0f00          CMP      r10,#0                ;13016
0003b0  d02c              BEQ      |L293.1036|
0003b2  f8960b41          LDRB     r0,[r6,#0xb41]        ;13024  ; displayStateCB
0003b6  1c40              ADDS     r0,r0,#1              ;13024
0003b8  b2c0              UXTB     r0,r0                 ;13024
0003ba  fbb0f1f9          UDIV     r1,r0,r9              ;13025
0003be  fb090011          MLS      r0,r9,r1,r0           ;13025
0003c2  f8860b41          STRB     r0,[r6,#0xb41]        ;13025
0003c6  e706              B        |L293.470|
                  |L293.968|
0003c8  2018              MOVS     r0,#0x18              ;13002
0003ca  f1ba0f00          CMP      r10,#0                ;12999
0003ce  d00a              BEQ      |L293.998|
0003d0  f8961b40          LDRB     r1,[r6,#0xb40]        ;13007  ; displayStateCB
0003d4  1c49              ADDS     r1,r1,#1              ;13007
0003d6  b2c9              UXTB     r1,r1                 ;13007
0003d8  fbb1f2f0          UDIV     r2,r1,r0              ;13008
0003dc  fb001012          MLS      r0,r0,r2,r1           ;13008
0003e0  f8860b40          STRB     r0,[r6,#0xb40]        ;13008
0003e4  e6f7              B        |L293.470|
                  |L293.998|
0003e6  f8961b40          LDRB     r1,[r6,#0xb40]        ;13001  ; displayStateCB
0003ea  3177              ADDS     r1,r1,#0x77           ;13001
0003ec  b2c9              UXTB     r1,r1                 ;13001
0003ee  fbb1f2f0          UDIV     r2,r1,r0              ;13002
0003f2  fb001012          MLS      r0,r0,r2,r1           ;13002
0003f6  f8860b40          STRB     r0,[r6,#0xb40]        ;13002
0003fa  e6ec              B        |L293.470|
                  |L293.1020|
                          DCD      ||.bss||
                  |L293.1024|
                          DCD      paramCB
                  |L293.1028|
                          DCD      0x3f1f122b
                  |L293.1032|
                          DCD      0x41200000
                  |L293.1036|
00040c  f8960b41          LDRB     r0,[r6,#0xb41]        ;13018  ; displayStateCB
000410  3077              ADDS     r0,r0,#0x77           ;13018
000412  b2c0              UXTB     r0,r0                 ;13018
000414  fbb0f1f9          UDIV     r1,r0,r9              ;13019
000418  fb090011          MLS      r0,r9,r1,r0           ;13019
00041c  f8860b41          STRB     r0,[r6,#0xb41]        ;13019
000420  e6d9              B        |L293.470|
                  |L293.1058|
000422  204a              MOVS     r0,#0x4a              ;13045
000424  f7fffffe          BL       DISPLAY_ResumeValue
000428  204b              MOVS     r0,#0x4b              ;13046
00042a  f7fffffe          BL       DISPLAY_ResumeValue
00042e  204c              MOVS     r0,#0x4c              ;13047
000430  f7fffffe          BL       DISPLAY_ResumeValue
000434  204d              MOVS     r0,#0x4d              ;13048
000436  f7fffffe          BL       DISPLAY_ResumeValue
00043a  204e              MOVS     r0,#0x4e              ;13049
00043c  f7fffffe          BL       DISPLAY_ResumeValue
000440  204f              MOVS     r0,#0x4f              ;13050
000442  f7fffffe          BL       DISPLAY_ResumeValue
000446  2050              MOVS     r0,#0x50              ;13051
000448  f7fffffe          BL       DISPLAY_ResumeValue
00044c  2051              MOVS     r0,#0x51              ;13052
00044e  f7fffffe          BL       DISPLAY_ResumeValue
000452  2052              MOVS     r0,#0x52              ;13053
000454  f7fffffe          BL       DISPLAY_ResumeValue
000458  2053              MOVS     r0,#0x53              ;13054
00045a  f7fffffe          BL       DISPLAY_ResumeValue
00045e  f8970323          LDRB     r0,[r7,#0x323]        ;13056  ; paramCB
000462  b1d0              CBZ      r0,|L293.1178|
000464  210b              MOVS     r1,#0xb               ;13064
000466  b15c              CBZ      r4,|L293.1152|
000468  f8960b30          LDRB     r0,[r6,#0xb30]        ;13069  ; displayStateCB
00046c  b300              CBZ      r0,|L293.1200|
00046e  300a              ADDS     r0,r0,#0xa            ;13071
000470  b2c0              UXTB     r0,r0                 ;13071
000472  fbb0f2f1          UDIV     r2,r0,r1              ;13072
000476  fb010012          MLS      r0,r1,r2,r0           ;13072
00047a  f8860b30          STRB     r0,[r6,#0xb30]        ;13072
00047e  e017              B        |L293.1200|
                  |L293.1152|
000480  f8960b30          LDRB     r0,[r6,#0xb30]        ;13061  ; displayStateCB
000484  280a              CMP      r0,#0xa               ;13061
000486  d213              BCS      |L293.1200|
000488  1c40              ADDS     r0,r0,#1              ;13063
00048a  b2c0              UXTB     r0,r0                 ;13063
00048c  fbb0f2f1          UDIV     r2,r0,r1              ;13064
000490  fb010012          MLS      r0,r1,r2,r0           ;13064
000494  f8860b30          STRB     r0,[r6,#0xb30]        ;13064
000498  e00a              B        |L293.1200|
                  |L293.1178|
00049a  b1c4              CBZ      r4,|L293.1230|
00049c  f8960b30          LDRB     r0,[r6,#0xb30]        ;13085  ; displayStateCB
0004a0  3009              ADDS     r0,r0,#9              ;13085
0004a2  b2c0              UXTB     r0,r0                 ;13085
0004a4  fbb0f1f5          UDIV     r1,r0,r5              ;13086
0004a8  fb050011          MLS      r0,r5,r1,r0           ;13086
0004ac  f8860b30          STRB     r0,[r6,#0xb30]        ;13086
                  |L293.1200|
0004b0  f8960b30          LDRB     r0,[r6,#0xb30]        ;13091  ; displayStateCB
0004b4  2802              CMP      r0,#2                 ;13091
0004b6  d015              BEQ      |L293.1252|
0004b8  f8970202          LDRB     r0,[r7,#0x202]        ;13098  ; paramCB
0004bc  b110              CBZ      r0,|L293.1220|
0004be  2001              MOVS     r0,#1                 ;13100
0004c0  f7fffffe          BL       BACK_LIGHT_Start
                  |L293.1220|
0004c4  f8970332          LDRB     r0,[r7,#0x332]        ;13102  ; paramCB
0004c8  f8870257          STRB     r0,[r7,#0x257]        ;13102
0004cc  e683              B        |L293.470|
                  |L293.1230|
0004ce  f8960b30          LDRB     r0,[r6,#0xb30]        ;13080  ; displayStateCB
0004d2  1c40              ADDS     r0,r0,#1              ;13080
0004d4  b2c0              UXTB     r0,r0                 ;13080
0004d6  fbb0f1f5          UDIV     r1,r0,r5              ;13081
0004da  fb050011          MLS      r0,r5,r1,r0           ;13081
0004de  f8860b30          STRB     r0,[r6,#0xb30]        ;13081
0004e2  e7e5              B        |L293.1200|
                  |L293.1252|
0004e4  f8970320          LDRB     r0,[r7,#0x320]        ;13093  ; paramCB
0004e8  f7fffffe          BL       BACK_LIGHT_Start
0004ec  f8878257          STRB     r8,[r7,#0x257]        ;13094
0004f0  e671              B        |L293.470|
;;;13107  
                          ENDP


                          AREA ||i.DISPLAY_MenuL1SelectFast||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL1SelectFast PROC
;;;13109  // 根菜单选项切换
;;;13110  void DISPLAY_MenuL1SelectFast(uint32 direction)
000000  b570              PUSH     {r4-r6,lr}
;;;13111  {
000002  4605              MOV      r5,r0
;;;13112  	
;;;13113  	DISPLAY_MENU_TUNE_DIRECTION_E dir = (DISPLAY_MENU_TUNE_DIRECTION_E)direction;
000004  b2ee              UXTB     r6,r5
;;;13114  
;;;13115  	DISPLAY_ResumeValue(DISPLAY_MENU_SET_TIME);
000006  2052              MOVS     r0,#0x52
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;13116  	DISPLAY_ResumeValue(DISPLAY_MENU_BACK); // 子菜单刷新上下限图标
00000c  2054              MOVS     r0,#0x54
00000e  f7fffffe          BL       DISPLAY_ResumeValue
;;;13117  	if (displayStateCB.menu.root.enterFlag > 0)
000012  4c57              LDR      r4,|L294.368|
000014  f8940b31          LDRB     r0,[r4,#0xb31]  ; displayStateCB
000018  2800              CMP      r0,#0
00001a  d020              BEQ      |L294.94|
;;;13118  	{
;;;13119  		switch (displayStateCB.menu.root.id)
00001c  f8941b30          LDRB     r1,[r4,#0xb30]  ; displayStateCB
000020  2905              CMP      r1,#5
000022  d01d              BEQ      |L294.96|
000024  2908              CMP      r1,#8
000026  d11a              BNE      |L294.94|
;;;13120  		{
;;;13121  			
;;;13122  			case MENU_ID_ROOT_SPEED_LIMIT:
;;;13123  
;;;13124  				if (UNIT_METRIC == PARAM_GetUnit())
;;;13125  				{
;;;13126  					if (DISPLAY_MENU_TUNE_NEXT == dir)	// --
;;;13127  					{ 
;;;13128  						if (displayStateCB.menu.root.speedLimit > 100)
;;;13129  						{
;;;13130  							displayStateCB.menu.root.speedLimit-=10;
;;;13131  							DISPLAY_ResumeValue(DISPLAY_MENU_SPEED_LIMIT);
;;;13132  						}
;;;13133  					}
;;;13134  					else
;;;13135  					{
;;;13136  						if (displayStateCB.menu.root.speedLimit < 410)
;;;13137  						{
;;;13138  							displayStateCB.menu.root.speedLimit+=10;
;;;13139  							DISPLAY_ResumeValue(DISPLAY_MENU_SPEED_LIMIT);
;;;13140  						}
;;;13141  					}
;;;13142  				}
;;;13143  				else
;;;13144  				{
;;;13145  					if (DISPLAY_MENU_TUNE_NEXT == dir)	// --
;;;13146  					{
;;;13147  						if (displayStateCB.menu.root.speedLimit > 62)
;;;13148  						{
;;;13149  							displayStateCB.menu.root.speedLimit-=10;
;;;13150  							DISPLAY_ResumeValue(DISPLAY_MENU_SPEED_LIMIT);
;;;13151  						}
;;;13152  					}
;;;13153  					else
;;;13154  					{
;;;13155  						if (displayStateCB.menu.root.speedLimit < 254)
;;;13156  						{
;;;13157  							displayStateCB.menu.root.speedLimit+=10;
;;;13158  							DISPLAY_ResumeValue(DISPLAY_MENU_SPEED_LIMIT);
;;;13159  							if(displayStateCB.menu.root.speedLimit > 254)
;;;13160  							{
;;;13161  							displayStateCB.menu.root.speedLimit = 254;
;;;13162  							}
;;;13163  						}
;;;13164  					}
;;;13165  				}
;;;13166  
;;;13167  				if (UNIT_METRIC == PARAM_GetUnit())
;;;13168  				{
;;;13169  					// 以公制保存，舍弃小数位
;;;13170  					PARAM_SetSpeedLimit((displayStateCB.menu.root.speedLimit/10*10));
;;;13171  				}
;;;13172  				else
;;;13173  				{
;;;13174  					// 以公制保存，因为公制转英制丢失了1个精度，因此再转回来需要加回来丢失的1个精度
;;;13175  					PARAM_SetSpeedLimit((displayStateCB.menu.root.speedLimit/METRIC_TO_INCH_COFF+1)/10*10);
;;;13176  				}
;;;13177  				break;
;;;13178  
;;;13179  
;;;13180  			case MENU_ID_ROOT_SET_TIME:
;;;13181  				
;;;13182  				DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_HOUR, BLINK_MODE_ON);
000028  2101              MOVS     r1,#1
00002a  2003              MOVS     r0,#3
00002c  f7fffffe          BL       DISPLAY_BLINK_ModeControl
;;;13183  				DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_MINUTE, BLINK_MODE_ON);
000030  2101              MOVS     r1,#1
000032  2004              MOVS     r0,#4
000034  f7fffffe          BL       DISPLAY_BLINK_ModeControl
;;;13184  //			
;;;13185  //				TIMER_AddTask(TIMER_ID_SET_TIME_BLINK,
;;;13186  //								500,
;;;13187  //								DISPLAY_SetTime_BLINKOnOff,
;;;13188  //								TRUE,
;;;13189  //								1,
;;;13190  //								ACTION_MODE_ADD_TO_QUEUE);
;;;13191  
;;;13192  				switch (displayStateCB.menu.root.rtc.tuneBit)
000038  f8940b42          LDRB     r0,[r4,#0xb42]  ; displayStateCB
00003c  2800              CMP      r0,#0
00003e  d074              BEQ      |L294.298|
000040  2801              CMP      r0,#1
000042  d10c              BNE      |L294.94|
;;;13193  				{
;;;13194  					// 调整小时时，+ -键用于调整小时
;;;13195  					case RTC_TUNE_BIT_HOUR:
;;;13196  
;;;13197  						// +
;;;13198  						if(DISPLAY_MENU_TUNE_NEXT == direction)
;;;13199  						{
;;;13200  							displayStateCB.menu.root.rtc.hour += 24*5-1;
;;;13201  							displayStateCB.menu.root.rtc.hour %= 24;
;;;13202  						}
;;;13203  						// -
;;;13204  						else
;;;13205  						{
;;;13206  							displayStateCB.menu.root.rtc.hour += 1;
;;;13207  							displayStateCB.menu.root.rtc.hour %= 24;
;;;13208  						}
;;;13209  						break;
;;;13210  
;;;13211  					// 调整分钟时，+ -键用于调整分钟
;;;13212  					case RTC_TUNE_BIT_MINUTE:
;;;13213  
;;;13214  						// +
;;;13215  						if(DISPLAY_MENU_TUNE_NEXT == direction)
;;;13216  						{
;;;13217  							displayStateCB.menu.root.rtc.minute += 60*2-1;
;;;13218  							displayStateCB.menu.root.rtc.minute %= 60;
000044  213c              MOVS     r1,#0x3c
000046  2d00              CMP      r5,#0                 ;13215
000048  d06e              BEQ      |L294.296|
;;;13219  						}
;;;13220  						// -
;;;13221  						else
;;;13222  						{
;;;13223  							displayStateCB.menu.root.rtc.minute += 1;
00004a  f8940b41          LDRB     r0,[r4,#0xb41]  ; displayStateCB
00004e  1c40              ADDS     r0,r0,#1
000050  b2c0              UXTB     r0,r0
;;;13224  							displayStateCB.menu.root.rtc.minute %= 60;
000052  fbb0f2f1          UDIV     r2,r0,r1
000056  fb010012          MLS      r0,r1,r2,r0
00005a  f8840b41          STRB     r0,[r4,#0xb41]
                  |L294.94|
;;;13225  						}
;;;13226  						break;
;;;13227  						
;;;13228  					default:
;;;13229  						break;
;;;13230  				}
;;;13231  				break;
;;;13232  
;;;13233  			case MENU_ID_ROOT_CONNECT_TO_APP:
;;;13234  
;;;13235  				break;
;;;13236  
;;;13237  			default:
;;;13238  				break;
;;;13239  		}
;;;13240  	}
;;;13241  
;;;13242  }
00005e  bd70              POP      {r4-r6,pc}
                  |L294.96|
000060  4d44              LDR      r5,|L294.372|
000062  f8950319          LDRB     r0,[r5,#0x319]        ;13124  ; paramCB
000066  b358              CBZ      r0,|L294.192|
000068  b3be              CBZ      r6,|L294.218|
00006a  f8b40b34          LDRH     r0,[r4,#0xb34]        ;13155  ; displayStateCB
00006e  28fe              CMP      r0,#0xfe              ;13155
000070  d20c              BCS      |L294.140|
000072  300a              ADDS     r0,r0,#0xa            ;13157
000074  f8a40b34          STRH     r0,[r4,#0xb34]        ;13157
000078  204f              MOVS     r0,#0x4f              ;13158
00007a  f7fffffe          BL       DISPLAY_ResumeValue
00007e  f8b40b34          LDRH     r0,[r4,#0xb34]        ;13159  ; displayStateCB
000082  28fe              CMP      r0,#0xfe              ;13159
000084  d902              BLS      |L294.140|
000086  20fe              MOVS     r0,#0xfe              ;13161
000088  f8a40b34          STRH     r0,[r4,#0xb34]        ;13161
                  |L294.140|
00008c  f8950319          LDRB     r0,[r5,#0x319]        ;13167  ; paramCB
000090  b378              CBZ      r0,|L294.242|
000092  f8b40b34          LDRH     r0,[r4,#0xb34]        ;13175  ; displayStateCB
000096  f7fffffe          BL       __aeabi_ui2f
00009a  4937              LDR      r1,|L294.376|
00009c  f7fffffe          BL       __aeabi_fdiv
0000a0  f04f517e          MOV      r1,#0x3f800000        ;13175
0000a4  f7fffffe          BL       __aeabi_fadd
0000a8  4c34              LDR      r4,|L294.380|
0000aa  4621              MOV      r1,r4                 ;13175
0000ac  f7fffffe          BL       __aeabi_fdiv
0000b0  4621              MOV      r1,r4                 ;13175
0000b2  f7fffffe          BL       __aeabi_fmul
0000b6  f7fffffe          BL       __aeabi_f2uiz
0000ba  f8a50334          STRH     r0,[r5,#0x334]        ;13175
0000be  bd70              POP      {r4-r6,pc}
                  |L294.192|
0000c0  b166              CBZ      r6,|L294.220|
0000c2  f8b40b34          LDRH     r0,[r4,#0xb34]        ;13136  ; displayStateCB
0000c6  f5b07fcd          CMP      r0,#0x19a             ;13136
0000ca  d2df              BCS      |L294.140|
0000cc  300a              ADDS     r0,r0,#0xa            ;13138
0000ce  f8a40b34          STRH     r0,[r4,#0xb34]        ;13138
0000d2  204f              MOVS     r0,#0x4f              ;13139
0000d4  f7fffffe          BL       DISPLAY_ResumeValue
0000d8  e7d8              B        |L294.140|
                  |L294.218|
0000da  e00b              B        |L294.244|
                  |L294.220|
0000dc  f8b40b34          LDRH     r0,[r4,#0xb34]        ;13128  ; displayStateCB
0000e0  2864              CMP      r0,#0x64              ;13128
0000e2  d9d3              BLS      |L294.140|
0000e4  380a              SUBS     r0,r0,#0xa            ;13130
0000e6  f8a40b34          STRH     r0,[r4,#0xb34]        ;13130
0000ea  204f              MOVS     r0,#0x4f              ;13131
0000ec  f7fffffe          BL       DISPLAY_ResumeValue
0000f0  e7cc              B        |L294.140|
                  |L294.242|
0000f2  e00a              B        |L294.266|
                  |L294.244|
0000f4  f8b40b34          LDRH     r0,[r4,#0xb34]        ;13147  ; displayStateCB
0000f8  283e              CMP      r0,#0x3e              ;13147
0000fa  d9c7              BLS      |L294.140|
0000fc  380a              SUBS     r0,r0,#0xa            ;13149
0000fe  f8a40b34          STRH     r0,[r4,#0xb34]        ;13149
000102  204f              MOVS     r0,#0x4f              ;13150
000104  f7fffffe          BL       DISPLAY_ResumeValue
000108  e7c0              B        |L294.140|
                  |L294.266|
00010a  f8b40b34          LDRH     r0,[r4,#0xb34]        ;13170  ; displayStateCB
00010e  210a              MOVS     r1,#0xa               ;13170
000110  fbb0f0f1          UDIV     r0,r0,r1              ;13170
000114  eb000080          ADD      r0,r0,r0,LSL #2       ;13170
000118  f64f71ff          MOV      r1,#0xffff            ;13170
00011c  ea010040          AND      r0,r1,r0,LSL #1       ;13170
000120  f8a50334          STRH     r0,[r5,#0x334]        ;13170
                  |L294.292|
000124  bd70              POP      {r4-r6,pc}
000126  e000              B        |L294.298|
                  |L294.296|
000128  e017              B        |L294.346|
                  |L294.298|
00012a  2118              MOVS     r1,#0x18              ;13201
00012c  b155              CBZ      r5,|L294.324|
00012e  f8940b40          LDRB     r0,[r4,#0xb40]        ;13206  ; displayStateCB
000132  1c40              ADDS     r0,r0,#1              ;13206
000134  b2c0              UXTB     r0,r0                 ;13206
000136  fbb0f2f1          UDIV     r2,r0,r1              ;13207
00013a  fb010012          MLS      r0,r1,r2,r0           ;13207
00013e  f8840b40          STRB     r0,[r4,#0xb40]        ;13207
000142  e7ef              B        |L294.292|
                  |L294.324|
000144  f8940b40          LDRB     r0,[r4,#0xb40]        ;13200  ; displayStateCB
000148  3077              ADDS     r0,r0,#0x77           ;13200
00014a  b2c0              UXTB     r0,r0                 ;13200
00014c  fbb0f2f1          UDIV     r2,r0,r1              ;13201
000150  fb010012          MLS      r0,r1,r2,r0           ;13201
000154  f8840b40          STRB     r0,[r4,#0xb40]        ;13201
000158  e7e4              B        |L294.292|
                  |L294.346|
00015a  f8940b41          LDRB     r0,[r4,#0xb41]        ;13217  ; displayStateCB
00015e  3077              ADDS     r0,r0,#0x77           ;13217
000160  b2c0              UXTB     r0,r0                 ;13217
000162  fbb0f2f1          UDIV     r2,r0,r1              ;13218
000166  fb010012          MLS      r0,r1,r2,r0           ;13218
00016a  f8840b41          STRB     r0,[r4,#0xb41]        ;13218
00016e  e7d9              B        |L294.292|
;;;13243  
                          ENDP

                  |L294.368|
                          DCD      ||.bss||
                  |L294.372|
                          DCD      paramCB
                  |L294.376|
                          DCD      0x3f1f122b
                  |L294.380|
                          DCD      0x41200000

                          AREA ||i.DISPLAY_MenuL1default||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL1default PROC
;;;12574  // 一级目录选项
;;;12575  void DISPLAY_MenuL1default(void)
000000  4902              LDR      r1,|L295.12|
;;;12576  {
;;;12577  	displayStateCB.menu.root.id = MENU_ID_ROOT_CLEAR_DATA;
000002  2000              MOVS     r0,#0
000004  f8810b30          STRB     r0,[r1,#0xb30]
;;;12578  }
000008  4770              BX       lr
;;;12579  
                          ENDP

00000a  0000              DCW      0x0000
                  |L295.12|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL2ClearDataEnter||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL2ClearDataEnter PROC
;;;13485  **********************************************************************/
;;;13486  void DISPLAY_MenuL2ClearDataEnter(uint32 ulParam)
000000  4908              LDR      r1,|L296.36|
;;;13487  {
;;;13488  
;;;13489  	MENU_ID_E id = displayStateCB.menu.clear.id;
000002  f8910b52          LDRB     r0,[r1,#0xb52]  ; displayStateCB
;;;13490  	
;;;13491  	// 参数判断
;;;13492  	CHECK_PARAM_OVER_RETURN(id, MENU_ID_CLEAR_COUNT);
000006  2802              CMP      r0,#2
000008  d80b              BHI      |L296.34|
;;;13493  
;;;13494  	switch (id)
00000a  b120              CBZ      r0,|L296.22|
00000c  2801              CMP      r0,#1
00000e  d108              BNE      |L296.34|
;;;13495  	{
;;;13496  		case MENU_ID_CLEAR_TRIP_DISTANCE:
;;;13497  			displayStateCB.menu.clear.yesNoId = MENU_ID_NO;
;;;13498  			
;;;13499  			STATE_EnterState(STATE_MENU_CLEAR_TRIP_DISTANCE);
;;;13500  				
;;;13501  			break;
;;;13502  			
;;;13503  //		case MENU_ID_CLEAR_PERSONAL_BEST:
;;;13504  //			displayStateCB.menu.clear.yesNoId = MENU_ID_NO;
;;;13505  
;;;13506  //			STATE_EnterState(STATE_MENU_CLEAR_PERSONAL_BEST);
;;;13507  //			
;;;13508  //			break;
;;;13509  
;;;13510  //		case MENU_ID_CLEAR_FACTORY_RESET:
;;;13511  //			displayStateCB.menu.clear.yesNoId = MENU_ID_NO;
;;;13512  
;;;13513  //			STATE_EnterState(STATE_MENU_CLEAR_FACTORY_RESET);
;;;13514  //			
;;;13515  //			break;
;;;13516  
;;;13517  		case MENU_ID_CLEAR_BACK:
;;;13518  
;;;13519  			STATE_EnterState(STATE_MENU_ROOT);
000010  200f              MOVS     r0,#0xf
000012  f7ffbffe          B.W      STATE_EnterState
                  |L296.22|
000016  2001              MOVS     r0,#1                 ;13497
000018  f8810b53          STRB     r0,[r1,#0xb53]        ;13497
00001c  2014              MOVS     r0,#0x14              ;13499
00001e  f7ffbffe          B.W      STATE_EnterState
                  |L296.34|
;;;13520  			
;;;13521  			break;
;;;13522  
;;;13523  		default:
;;;13524  			break;
;;;13525  	}
;;;13526  
;;;13527  }
000022  4770              BX       lr
;;;13528  
                          ENDP

                  |L296.36|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL2ClearDataSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL2ClearDataSelect PROC
;;;13457  // 清空数据根菜单选项切换
;;;13458  void DISPLAY_MenuL2ClearDataSelect(uint32 direction)
000000  b2c2              UXTB     r2,r0
;;;13459  {
;;;13460  	DISPLAY_MENU_TUNE_DIRECTION_E dir = (DISPLAY_MENU_TUNE_DIRECTION_E)direction;
;;;13461  	
;;;13462  	if(DISPLAY_MENU_TUNE_NEXT == dir)
;;;13463  	{
;;;13464  		displayStateCB.menu.clear.id ++;
000002  4908              LDR      r1,|L297.36|
000004  f8910b52          LDRB     r0,[r1,#0xb52]
000008  1c40              ADDS     r0,r0,#1
00000a  b2c0              UXTB     r0,r0
00000c  2a00              CMP      r2,#0                 ;13462
00000e  d004              BEQ      |L297.26|
;;;13465  		displayStateCB.menu.clear.id %= MENU_ID_CLEAR_COUNT;
;;;13466  	}
;;;13467  	else
;;;13468  	{
;;;13469  		displayStateCB.menu.clear.id += (MENU_ID_CLEAR_COUNT - 1);
;;;13470  		displayStateCB.menu.clear.id %= MENU_ID_CLEAR_COUNT;
000010  f0000001          AND      r0,r0,#1
000014  f8810b52          STRB     r0,[r1,#0xb52]
;;;13471  	}
;;;13472  }
000018  4770              BX       lr
                  |L297.26|
00001a  f0000001          AND      r0,r0,#1              ;13465
00001e  f8810b52          STRB     r0,[r1,#0xb52]        ;13465
000022  4770              BX       lr
;;;13473  
                          ENDP

                  |L297.36|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL2SetEnter||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL2SetEnter PROC
;;;13569  **********************************************************************/
;;;13570  void DISPLAY_MenuL2SetEnter(uint32 ulParam)
000000  480d              LDR      r0,|L298.56|
;;;13571  {
;;;13572  	MENU_ID_E id = displayStateCB.menu.setup.id;
000002  f8900b54          LDRB     r0,[r0,#0xb54]  ; displayStateCB
;;;13573  	
;;;13574  	// 参数判断
;;;13575  	CHECK_PARAM_OVER_RETURN(id, MENU_ID_SETUP_COUNT);
000006  2805              CMP      r0,#5
000008  d814              BHI      |L298.52|
;;;13576  
;;;13577  	switch (id)
00000a  d213              BCS      |L298.52|
00000c  e8dff000          TBB      [pc,r0]
000010  0306090c          DCB      0x03,0x06,0x09,0x0c
000014  0f00              DCB      0x0f,0x00
;;;13578  	{
;;;13579  //		case MENU_ID_SETUP_SET_DATE_TIME:
;;;13580  //			
;;;13581  //			displayStateCB.menu.setup.dateTimeId = MENU_ID_DATE;
;;;13582  //			
;;;13583  //			STATE_EnterState(STATE_MENU_SET_DATE_RTC);
;;;13584  //				
;;;13585  //			break;
;;;13586  
;;;13587  		case MENU_ID_SETUP_SET_AUTOLIGHT:
;;;13588  
;;;13589  			STATE_EnterState(STATE_MENU_SET_AUTO_LIGHT);
000016  2018              MOVS     r0,#0x18
000018  f7ffbffe          B.W      STATE_EnterState
;;;13590  			break;
;;;13591  			
;;;13592  		case MENU_ID_SETUP_SET_UNIT:
;;;13593  
;;;13594  			STATE_EnterState(STATE_MENU_SET_UNIT);
00001c  2019              MOVS     r0,#0x19
00001e  f7ffbffe          B.W      STATE_EnterState
;;;13595  			
;;;13596  			break;
;;;13597  
;;;13598  		case MENU_ID_SETUP_SET_BRIGHTNESS:
;;;13599  
;;;13600  			STATE_EnterState(STATE_MENU_SET_BRIGHTNESS);
000022  201a              MOVS     r0,#0x1a
000024  f7ffbffe          B.W      STATE_EnterState
;;;13601  			
;;;13602  			break;
;;;13603  
;;;13604  		case MENU_ID_SETUP_AUTO_POWER_OFF:
;;;13605  
;;;13606  			STATE_EnterState(STATE_MENU_SET_AUTO_POWER_OFF_TIME);
000028  201b              MOVS     r0,#0x1b
00002a  f7ffbffe          B.W      STATE_EnterState
;;;13607  			
;;;13608  			break;
;;;13609  
;;;13610  		case MENU_ID_SETUP_BACK:
;;;13611  
;;;13612  			STATE_EnterState(STATE_MENU_ROOT);
00002e  200f              MOVS     r0,#0xf
000030  f7ffbffe          B.W      STATE_EnterState
                  |L298.52|
;;;13613  			
;;;13614  			break;
;;;13615  
;;;13616  		default:
;;;13617  			break;
;;;13618  	}
;;;13619  
;;;13620  }
000034  4770              BX       lr
;;;13621  
                          ENDP

000036  0000              DCW      0x0000
                  |L298.56|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL2SetSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL2SetSelect PROC
;;;13541  // 调整设置界面的菜单ID
;;;13542  void DISPLAY_MenuL2SetSelect(uint32 direction)
000000  b2c3              UXTB     r3,r0
;;;13543  {
;;;13544  	DISPLAY_MENU_TUNE_DIRECTION_E dir = (DISPLAY_MENU_TUNE_DIRECTION_E)direction;
;;;13545  	
;;;13546  	if(DISPLAY_MENU_TUNE_NEXT == dir)
;;;13547  	{
;;;13548  		displayStateCB.menu.setup.id ++;
000002  4a0c              LDR      r2,|L299.52|
;;;13549  		displayStateCB.menu.setup.id %= MENU_ID_SETUP_COUNT;
000004  2105              MOVS     r1,#5
000006  2b00              CMP      r3,#0                 ;13546
000008  f8920b54          LDRB     r0,[r2,#0xb54]        ;13548
00000c  d008              BEQ      |L299.32|
;;;13550  	}
;;;13551  	else
;;;13552  	{
;;;13553  		displayStateCB.menu.setup.id += (MENU_ID_SETUP_COUNT - 1);
00000e  1d00              ADDS     r0,r0,#4
000010  b2c0              UXTB     r0,r0
;;;13554  		displayStateCB.menu.setup.id %= MENU_ID_SETUP_COUNT;
000012  fbb0f3f1          UDIV     r3,r0,r1
000016  fb010013          MLS      r0,r1,r3,r0
00001a  f8820b54          STRB     r0,[r2,#0xb54]
;;;13555  	}
;;;13556  }
00001e  4770              BX       lr
                  |L299.32|
000020  1c40              ADDS     r0,r0,#1              ;13548
000022  b2c0              UXTB     r0,r0                 ;13548
000024  fbb0f3f1          UDIV     r3,r0,r1              ;13549
000028  fb010013          MLS      r0,r1,r3,r0           ;13549
00002c  f8820b54          STRB     r0,[r2,#0xb54]        ;13549
000030  4770              BX       lr
;;;13557  
                          ENDP

000032  0000              DCW      0x0000
                  |L299.52|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL3ClearPersBestEnter||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL3ClearPersBestEnter PROC
;;;13728  **********************************************************************/
;;;13729  void DISPLAY_MenuL3ClearPersBestEnter(uint32 ulParam)
000000  b510              PUSH     {r4,lr}
;;;13730  {
;;;13731  	MENU_ID_E id = displayStateCB.menu.clear.yesNoId;
000002  480a              LDR      r0,|L300.44|
000004  f8900b53          LDRB     r0,[r0,#0xb53]  ; displayStateCB
;;;13732  	
;;;13733  	// 参数判断
;;;13734  	CHECK_PARAM_OVER_RETURN(id, MENU_ID_YES_NO_COUNT);
000008  2802              CMP      r0,#2
00000a  d80e              BHI      |L300.42|
;;;13735  
;;;13736  	switch (id)
00000c  b130              CBZ      r0,|L300.28|
00000e  2801              CMP      r0,#1
000010  d10b              BNE      |L300.42|
;;;13737  	{
;;;13738  		case MENU_ID_YES:
;;;13739  			// 清空个人最佳
;;;13740  			PARAM_ClearPersonalBestTrip();
;;;13741  
;;;13742  			// 进入清除成功状态
;;;13743  			STATE_EnterState(STATE_MENU_CLEAR_OK);
;;;13744  				
;;;13745  			break;
;;;13746  			
;;;13747  		case MENU_ID_NO:		
;;;13748  			
;;;13749  			STATE_EnterState(STATE_MENU_CLEAR_DATA_ROOT);
000012  e8bd4010          POP      {r4,lr}
000016  2013              MOVS     r0,#0x13
000018  f7ffbffe          B.W      STATE_EnterState
                  |L300.28|
00001c  f7fffffe          BL       PARAM_ClearPersonalBestTrip
000020  e8bd4010          POP      {r4,lr}               ;13743
000024  2016              MOVS     r0,#0x16              ;13743
000026  f7ffbffe          B.W      STATE_EnterState
                  |L300.42|
;;;13750  			
;;;13751  			break;
;;;13752  
;;;13753  		default:
;;;13754  			break;
;;;13755  	}	
;;;13756  }
00002a  bd10              POP      {r4,pc}
;;;13757  
                          ENDP

                  |L300.44|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL3ClearPersBestSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL3ClearPersBestSelect PROC
;;;13702  **********************************************************************/
;;;13703  void DISPLAY_MenuL3ClearPersBestSelect(uint32 bIsAdd)
000000  4a08              LDR      r2,|L301.36|
;;;13704  {
;;;13705  	if (bIsAdd)
;;;13706  	{
;;;13707  		displayStateCB.menu.clear.yesNoId ++;
000002  f8921b53          LDRB     r1,[r2,#0xb53]
000006  1c49              ADDS     r1,r1,#1
000008  b2c9              UXTB     r1,r1
00000a  2800              CMP      r0,#0                 ;13705
00000c  d004              BEQ      |L301.24|
;;;13708  		displayStateCB.menu.clear.yesNoId %= MENU_ID_YES_NO_COUNT;
00000e  f0010001          AND      r0,r1,#1
000012  f8820b53          STRB     r0,[r2,#0xb53]
;;;13709  	}
;;;13710  	else
;;;13711  	{
;;;13712  		displayStateCB.menu.clear.yesNoId += (MENU_ID_YES_NO_COUNT - 1);
;;;13713  		displayStateCB.menu.clear.yesNoId %= MENU_ID_YES_NO_COUNT;
;;;13714  	}
;;;13715  }
000016  4770              BX       lr
                  |L301.24|
000018  f0010001          AND      r0,r1,#1              ;13713
00001c  f8820b53          STRB     r0,[r2,#0xb53]        ;13713
000020  4770              BX       lr
;;;13716  
                          ENDP

000022  0000              DCW      0x0000
                  |L301.36|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL3ClearTripEnter||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL3ClearTripEnter PROC
;;;13661  **********************************************************************/
;;;13662  void DISPLAY_MenuL3ClearTripEnter(uint32 ulParam)
000000  b510              PUSH     {r4,lr}
;;;13663  {
;;;13664  	MENU_ID_E id = displayStateCB.menu.clear.yesNoId;
000002  480a              LDR      r0,|L302.44|
000004  f8900b53          LDRB     r0,[r0,#0xb53]  ; displayStateCB
;;;13665  	
;;;13666  	// 参数判断
;;;13667  	CHECK_PARAM_OVER_RETURN(id, MENU_ID_YES_NO_COUNT);
000008  2802              CMP      r0,#2
00000a  d80e              BHI      |L302.42|
;;;13668  
;;;13669  	switch (id)
00000c  b130              CBZ      r0,|L302.28|
00000e  2801              CMP      r0,#1
000010  d10b              BNE      |L302.42|
;;;13670  	{
;;;13671  		case MENU_ID_YES:
;;;13672  			// 由参数层完成清空
;;;13673  			PARAM_ClearTrip();
;;;13674  			
;;;13675  			// 进入清除成功状态
;;;13676  			STATE_EnterState(STATE_MENU_CLEAR_OK);
;;;13677  				
;;;13678  			break;
;;;13679  			
;;;13680  		case MENU_ID_NO:		
;;;13681  			
;;;13682  			STATE_EnterState(STATE_MENU_CLEAR_DATA_ROOT);
000012  e8bd4010          POP      {r4,lr}
000016  2013              MOVS     r0,#0x13
000018  f7ffbffe          B.W      STATE_EnterState
                  |L302.28|
00001c  f7fffffe          BL       PARAM_ClearTrip
000020  e8bd4010          POP      {r4,lr}               ;13676
000024  2016              MOVS     r0,#0x16              ;13676
000026  f7ffbffe          B.W      STATE_EnterState
                  |L302.42|
;;;13683  			
;;;13684  			break;
;;;13685  
;;;13686  		default:
;;;13687  			break;
;;;13688  	}
;;;13689  }
00002a  bd10              POP      {r4,pc}
;;;13690  
                          ENDP

                  |L302.44|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL3ClearTripSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL3ClearTripSelect PROC
;;;13634  // 三级目录选项
;;;13635  void DISPLAY_MenuL3ClearTripSelect(uint32 bIsAdd)
000000  4a08              LDR      r2,|L303.36|
;;;13636  {
;;;13637  	if (bIsAdd)
;;;13638  	{
;;;13639  		displayStateCB.menu.clear.yesNoId ++;
000002  f8921b53          LDRB     r1,[r2,#0xb53]
000006  1c49              ADDS     r1,r1,#1
000008  b2c9              UXTB     r1,r1
00000a  2800              CMP      r0,#0                 ;13637
00000c  d004              BEQ      |L303.24|
;;;13640  		displayStateCB.menu.clear.yesNoId %= MENU_ID_YES_NO_COUNT;
00000e  f0010001          AND      r0,r1,#1
000012  f8820b53          STRB     r0,[r2,#0xb53]
;;;13641  	}
;;;13642  	else
;;;13643  	{
;;;13644  		displayStateCB.menu.clear.yesNoId += (MENU_ID_YES_NO_COUNT - 1);
;;;13645  		displayStateCB.menu.clear.yesNoId %= MENU_ID_YES_NO_COUNT;
;;;13646  	}
;;;13647  
;;;13648  }
000016  4770              BX       lr
                  |L303.24|
000018  f0010001          AND      r0,r1,#1              ;13645
00001c  f8820b53          STRB     r0,[r2,#0xb53]        ;13645
000020  4770              BX       lr
;;;13649  
                          ENDP

000022  0000              DCW      0x0000
                  |L303.36|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL3FactoryResetEnter||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL3FactoryResetEnter PROC
;;;13796  **********************************************************************/
;;;13797  void DISPLAY_MenuL3FactoryResetEnter(uint32 ulParam)
000000  b510              PUSH     {r4,lr}
;;;13798  {
;;;13799  	MENU_ID_E id = displayStateCB.menu.clear.yesNoId;
000002  480a              LDR      r0,|L304.44|
000004  f8900b53          LDRB     r0,[r0,#0xb53]  ; displayStateCB
;;;13800  	
;;;13801  	// 参数判断
;;;13802  	CHECK_PARAM_OVER_RETURN(id, MENU_ID_YES_NO_COUNT);
000008  2802              CMP      r0,#2
00000a  d80e              BHI      |L304.42|
;;;13803  
;;;13804  	switch (id)
00000c  b130              CBZ      r0,|L304.28|
00000e  2801              CMP      r0,#1
000010  d10b              BNE      |L304.42|
;;;13805  	{
;;;13806  		case MENU_ID_YES:
;;;13807  
;;;13808  			// 恢复出厂设置
;;;13809  			NVM_Load_FactoryReset();
;;;13810  			
;;;13811  			STATE_EnterState(STATE_MENU_ADV_MENU_INFO1);
;;;13812  				
;;;13813  			break;
;;;13814  			
;;;13815  		case MENU_ID_NO:		
;;;13816  			
;;;13817  			STATE_EnterState(STATE_MENU_ADV_MENU_INFO1);
000012  e8bd4010          POP      {r4,lr}
000016  2023              MOVS     r0,#0x23
000018  f7ffbffe          B.W      STATE_EnterState
                  |L304.28|
00001c  f7fffffe          BL       NVM_Load_FactoryReset
000020  e8bd4010          POP      {r4,lr}               ;13811
000024  2023              MOVS     r0,#0x23              ;13811
000026  f7ffbffe          B.W      STATE_EnterState
                  |L304.42|
;;;13818  			
;;;13819  			break;
;;;13820  
;;;13821  		default:
;;;13822  			break;
;;;13823  	}	
;;;13824  
;;;13825  }
00002a  bd10              POP      {r4,pc}
;;;13826  
                          ENDP

                  |L304.44|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL3FactoryResetSelect||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuL3FactoryResetSelect PROC
;;;13769  **********************************************************************/
;;;13770  void DISPLAY_MenuL3FactoryResetSelect(uint32 bIsAdd)
000000  4a08              LDR      r2,|L305.36|
;;;13771  {
;;;13772  	if (bIsAdd)
;;;13773  	{
;;;13774  		displayStateCB.menu.clear.yesNoId ++;
000002  f8921b53          LDRB     r1,[r2,#0xb53]
000006  1c49              ADDS     r1,r1,#1
000008  b2c9              UXTB     r1,r1
00000a  2800              CMP      r0,#0                 ;13772
00000c  d004              BEQ      |L305.24|
;;;13775  		displayStateCB.menu.clear.yesNoId %= MENU_ID_YES_NO_COUNT;
00000e  f0010001          AND      r0,r1,#1
000012  f8820b53          STRB     r0,[r2,#0xb53]
;;;13776  	}
;;;13777  	else
;;;13778  	{
;;;13779  		displayStateCB.menu.clear.yesNoId += (MENU_ID_YES_NO_COUNT - 1);
;;;13780  		displayStateCB.menu.clear.yesNoId %= MENU_ID_YES_NO_COUNT;
;;;13781  	}
;;;13782  
;;;13783  }
000016  4770              BX       lr
                  |L305.24|
000018  f0010001          AND      r0,r1,#1              ;13780
00001c  f8820b53          STRB     r0,[r2,#0xb53]        ;13780
000020  4770              BX       lr
;;;13784  
                          ENDP

000022  0000              DCW      0x0000
                  |L305.36|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuL3SetDateTimeEnter||, CODE, READONLY, ALIGN=1

                  DISPLAY_MenuL3SetDateTimeEnter PROC
;;;13867  
;;;13868  void DISPLAY_MenuL3SetDateTimeEnter(uint32 ulParam)
000000  4770              BX       lr
;;;13869  {
;;;13870  //	MENU_ID_E id = displayStateCB.menu.setup.dateTimeId;
;;;13871  //	
;;;13872  //	// 参数判断
;;;13873  //	CHECK_PARAM_OVER_RETURN(id, MENU_ID_DATE_TIME_COUNT);
;;;13874  
;;;13875  //	switch (id)
;;;13876  //	{
;;;13877  //		case MENU_ID_DATE:
;;;13878  //			displayStateCB.menu.setup.date.tuneBit = DATE_TUNE_BIT_YEAR;
;;;13879  //			
;;;13880  //			STATE_EnterState(STATE_MENU_SET_DATE);
;;;13881  //		
;;;13882  //			break;
;;;13883  //			
;;;13884  //		case MENU_ID_TIME:
;;;13885  //			displayStateCB.menu.setup.rtc.tuneBit = RTC_TUNE_BIT_HOUR;
;;;13886  
;;;13887  //			STATE_EnterState(STATE_MENU_SET_RTC);
;;;13888  //			
;;;13889  //			break;
;;;13890  
;;;13891  //		case MENU_ID_DATE_TIME_BACK:
;;;13892  
;;;13893  //			STATE_EnterState(STATE_MENU_SET_ROOT);
;;;13894  //			
;;;13895  //			break;
;;;13896  
;;;13897  //		default:
;;;13898  //			break;
;;;13899  //	}
;;;13900  
;;;13901  }
;;;13902  
                          ENDP


                          AREA ||i.DISPLAY_MenuL3SetDateTimeSelect||, CODE, READONLY, ALIGN=1

                  DISPLAY_MenuL3SetDateTimeSelect PROC
;;;13838  **********************************************************************/
;;;13839  void DISPLAY_MenuL3SetDateTimeSelect(uint32 direction)
000000  4770              BX       lr
;;;13840  {
;;;13841  //	DISPLAY_MENU_TUNE_DIRECTION_E dir = (DISPLAY_MENU_TUNE_DIRECTION_E)direction;
;;;13842  //	
;;;13843  //	if(DISPLAY_MENU_TUNE_NEXT == dir)
;;;13844  //	{
;;;13845  //		displayStateCB.menu.setup.dateTimeId ++;
;;;13846  //		displayStateCB.menu.setup.dateTimeId %= MENU_ID_DATE_TIME_COUNT;
;;;13847  //	}
;;;13848  //	else
;;;13849  //	{
;;;13850  //		displayStateCB.menu.setup.dateTimeId += (MENU_ID_DATE_TIME_COUNT - 1);
;;;13851  //		displayStateCB.menu.setup.dateTimeId %= MENU_ID_DATE_TIME_COUNT;
;;;13852  //	}
;;;13853  }
;;;13854  
                          ENDP


                          AREA ||i.DISPLAY_MenuSwitchDateTuneBit||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuSwitchDateTuneBit PROC
;;;14304  **********************************************************************/
;;;14305  void DISPLAY_MenuSwitchDateTuneBit(uint32 param)
000000  4a07              LDR      r2,|L308.32|
;;;14306  {
;;;14307  	displayStateCB.menu.setup.date.tuneBit ++;
000002  f8920b5e          LDRB     r0,[r2,#0xb5e]  ; displayStateCB
000006  1c40              ADDS     r0,r0,#1
000008  b2c0              UXTB     r0,r0
;;;14308  	displayStateCB.menu.setup.date.tuneBit %= DATE_TUNE_BIT_COUNT;
00000a  2103              MOVS     r1,#3
00000c  fbb0f3f1          UDIV     r3,r0,r1
000010  fb010013          MLS      r0,r1,r3,r0
000014  f8820b5e          STRB     r0,[r2,#0xb5e]
;;;14309  
;;;14310  	// 重新进入当前的状态
;;;14311  	STATE_EnterState(stateCB.state);
000018  4802              LDR      r0,|L308.36|
00001a  7800              LDRB     r0,[r0,#0]  ; stateCB
00001c  f7ffbffe          B.W      STATE_EnterState
;;;14312  }
;;;14313  
                          ENDP

                  |L308.32|
                          DCD      ||.bss||
                  |L308.36|
                          DCD      stateCB

                          AREA ||i.DISPLAY_MenuSwitchRTCTuneBit||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuSwitchRTCTuneBit PROC
;;;14394  **********************************************************************/
;;;14395  void DISPLAY_MenuSwitchRTCTuneBit(uint32 param)
000000  4905              LDR      r1,|L309.24|
;;;14396  {
;;;14397  	displayStateCB.menu.setup.rtc.tuneBit ++;
000002  f8910b62          LDRB     r0,[r1,#0xb62]  ; displayStateCB
000006  1c40              ADDS     r0,r0,#1
;;;14398  	displayStateCB.menu.setup.rtc.tuneBit %= RTC_TUNE_BIT_COUNT;
000008  f0000001          AND      r0,r0,#1
00000c  f8810b62          STRB     r0,[r1,#0xb62]
;;;14399  
;;;14400  	// 重新进入当前的状态
;;;14401  	STATE_EnterState(stateCB.state);
000010  4802              LDR      r0,|L309.28|
000012  7800              LDRB     r0,[r0,#0]  ; stateCB
000014  f7ffbffe          B.W      STATE_EnterState
;;;14402  }
;;;14403  
                          ENDP

                  |L309.24|
                          DCD      ||.bss||
                  |L309.28|
                          DCD      stateCB

                          AREA ||i.DISPLAY_MenuTuneAutoLight||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuTuneAutoLight PROC
;;;14415  **********************************************************************/
;;;14416  void DISPLAY_MenuTuneAutoLight(uint32 bIsAdd)
000000  4a08              LDR      r2,|L310.36|
;;;14417  {
;;;14418  	if (bIsAdd)
;;;14419  	{
;;;14420  		displayStateCB.menu.setup.autoLight ++;
000002  f8921b55          LDRB     r1,[r2,#0xb55]
000006  1c49              ADDS     r1,r1,#1
000008  b2c9              UXTB     r1,r1
00000a  2800              CMP      r0,#0                 ;14418
00000c  d004              BEQ      |L310.24|
;;;14421  		displayStateCB.menu.setup.autoLight %= MENU_ID_YES_NO_COUNT;
00000e  f0010001          AND      r0,r1,#1
000012  f8820b55          STRB     r0,[r2,#0xb55]
;;;14422  	}
;;;14423  	else
;;;14424  	{
;;;14425  		displayStateCB.menu.setup.autoLight += (MENU_ID_YES_NO_COUNT - 1);
;;;14426  		displayStateCB.menu.setup.autoLight %= MENU_ID_YES_NO_COUNT;
;;;14427  	}	
;;;14428  }
000016  4770              BX       lr
                  |L310.24|
000018  f0010001          AND      r0,r1,#1              ;14426
00001c  f8820b55          STRB     r0,[r2,#0xb55]        ;14426
000020  4770              BX       lr
;;;14429  
                          ENDP

000022  0000              DCW      0x0000
                  |L310.36|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuTuneAutoPowerOffTime||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuTuneAutoPowerOffTime PROC
;;;14516  **********************************************************************/
;;;14517  void DISPLAY_MenuTuneAutoPowerOffTime(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;14518  {
;;;14519  	uint8 direction = (param/100)%10;
000002  2264              MOVS     r2,#0x64
000004  fbb0f1f2          UDIV     r1,r0,r2
000008  230a              MOVS     r3,#0xa
00000a  fbb1f4f3          UDIV     r4,r1,r3
00000e  fb031114          MLS      r1,r3,r4,r1
;;;14520  	uint8 step = param%100;
000012  fbb0f3f2          UDIV     r3,r0,r2
000016  fb020013          MLS      r0,r2,r3,r0
;;;14521  
;;;14522  	// +
;;;14523  	if(0 == direction)
;;;14524  	{
;;;14525  		displayStateCB.menu.setup.powerOffTime += step;
00001a  4c0e              LDR      r4,|L311.84|
;;;14526  		displayStateCB.menu.setup.powerOffTime %= 11;
00001c  230b              MOVS     r3,#0xb
00001e  2900              CMP      r1,#0                 ;14523
000020  f8942b58          LDRB     r2,[r4,#0xb58]        ;14525
000024  d00c              BEQ      |L311.64|
;;;14527  	}
;;;14528  	// -
;;;14529  	else if(1 == direction)
000026  2901              CMP      r1,#1
000028  d109              BNE      |L311.62|
;;;14530  	{
;;;14531  		displayStateCB.menu.setup.powerOffTime += 11*2-step;
00002a  f1c00016          RSB      r0,r0,#0x16
00002e  4410              ADD      r0,r0,r2
000030  b2c0              UXTB     r0,r0
;;;14532  		displayStateCB.menu.setup.powerOffTime %= 11;
000032  fbb0f1f3          UDIV     r1,r0,r3
000036  fb030011          MLS      r0,r3,r1,r0
00003a  f8840b58          STRB     r0,[r4,#0xb58]
                  |L311.62|
;;;14533  	}
;;;14534  	else
;;;14535  	{}
;;;14536  
;;;14537  	// 最小限制0分钟
;;;14538  	//LIMIT_TO_MIN(displayStateCB.menu.setup.powerOffTime, 0);
;;;14539  	
;;;14540  }
00003e  bd10              POP      {r4,pc}
                  |L311.64|
000040  4410              ADD      r0,r0,r2              ;14525
000042  b2c0              UXTB     r0,r0                 ;14525
000044  fbb0f1f3          UDIV     r1,r0,r3              ;14526
000048  fb030011          MLS      r0,r3,r1,r0           ;14526
00004c  f8840b58          STRB     r0,[r4,#0xb58]        ;14526
000050  bd10              POP      {r4,pc}
;;;14541  
                          ENDP

000052  0000              DCW      0x0000
                  |L311.84|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuTuneBackLightLevel||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuTuneBackLightLevel PROC
;;;14468  **********************************************************************/
;;;14469  void DISPLAY_MenuTuneBackLightLevel(uint32 bIsAdd)
000000  4a11              LDR      r2,|L312.72|
;;;14470  {
;;;14471  	if (bIsAdd)
000002  2800              CMP      r0,#0
;;;14472  	{
;;;14473  		displayStateCB.menu.setup.brightness ++;
000004  f8921b57          LDRB     r1,[r2,#0xb57]
000008  d009              BEQ      |L312.30|
00000a  1c49              ADDS     r1,r1,#1
00000c  b2c8              UXTB     r0,r1
00000e  f8820b57          STRB     r0,[r2,#0xb57]
;;;14474  		if (displayStateCB.menu.setup.brightness > 5)
000012  2805              CMP      r0,#5
000014  d907              BLS      |L312.38|
;;;14475  		{
;;;14476  			displayStateCB.menu.setup.brightness = 0;
000016  2000              MOVS     r0,#0
000018  f8820b57          STRB     r0,[r2,#0xb57]
00001c  e003              B        |L312.38|
                  |L312.30|
;;;14477  		}
;;;14478  		
;;;14479  	}
;;;14480  	else
;;;14481  	{
;;;14482  		if (displayStateCB.menu.setup.brightness == 0)
00001e  b151              CBZ      r1,|L312.54|
;;;14483  		{
;;;14484  			displayStateCB.menu.setup.brightness = 5;
;;;14485  		}
;;;14486  		else
;;;14487  		{
;;;14488  			displayStateCB.menu.setup.brightness --;
000020  1e49              SUBS     r1,r1,#1
000022  f8821b57          STRB     r1,[r2,#0xb57]
                  |L312.38|
;;;14489  		}
;;;14490  		
;;;14491  	}
;;;14492  
;;;14493  	if (0 == displayStateCB.menu.setup.brightness)
000026  f8920b57          LDRB     r0,[r2,#0xb57]  ; displayStateCB
;;;14494  	{
;;;14495  		PARAM_SetBrightness(BACK_LIGHT_LEVEL_AUTO);
00002a  4908              LDR      r1,|L312.76|
00002c  b138              CBZ      r0,|L312.62|
;;;14496  	}
;;;14497  	else
;;;14498  	{
;;;14499  		PARAM_SetBrightness((BACK_LIGHT_LEVEL_E)displayStateCB.menu.setup.brightness);
00002e  f8810320          STRB     r0,[r1,#0x320]
;;;14500  		BACK_LIGHT_Start((BACK_LIGHT_LEVEL_E)displayStateCB.menu.setup.brightness);
000032  f7ffbffe          B.W      BACK_LIGHT_Start
                  |L312.54|
000036  2005              MOVS     r0,#5                 ;14484
000038  f8820b57          STRB     r0,[r2,#0xb57]        ;14484
00003c  e7f3              B        |L312.38|
                  |L312.62|
00003e  2006              MOVS     r0,#6                 ;14495
000040  f8810320          STRB     r0,[r1,#0x320]        ;14495
;;;14501  	}
;;;14502  	
;;;14503  }
000044  4770              BX       lr
;;;14504  
                          ENDP

000046  0000              DCW      0x0000
                  |L312.72|
                          DCD      ||.bss||
                  |L312.76|
                          DCD      paramCB

                          AREA ||i.DISPLAY_MenuTuneDateDay||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuTuneDateDay PROC
;;;14263  **********************************************************************/
;;;14264  void DISPLAY_MenuTuneDateDay(uint32 param)
000000  b5f0              PUSH     {r4-r7,lr}
;;;14265  {
;;;14266  	uint8 direction = (param/100)%10;
000002  2164              MOVS     r1,#0x64
000004  fbb0f2f1          UDIV     r2,r0,r1
000008  230a              MOVS     r3,#0xa
00000a  fbb2f4f3          UDIV     r4,r2,r3
00000e  fb032414          MLS      r4,r3,r4,r2
;;;14267  	uint8 step = param%100;
000012  fbb0f2f1          UDIV     r2,r0,r1
000016  fb010512          MLS      r5,r1,r2,r0
;;;14268  
;;;14269  	// 取出天数的模
;;;14270  	uint8 localDay = DISPLAY_VerifyDay(displayStateCB.menu.setup.date.year, displayStateCB.menu.setup.date.month, &displayStateCB.menu.setup.date.day);
00001a  4e17              LDR      r6,|L313.120|
00001c  f606325d          ADD      r2,r6,#0xb5d
000020  f8961b5c          LDRB     r1,[r6,#0xb5c]  ; displayStateCB
000024  f8b60b5a          LDRH     r0,[r6,#0xb5a]  ; displayStateCB
000028  4617              MOV      r7,r2
00002a  f7fffffe          BL       DISPLAY_VerifyDay
;;;14271  
;;;14272  	// +
;;;14273  	if(0 == direction)
00002e  b114              CBZ      r4,|L313.54|
;;;14274  	{
;;;14275  		displayStateCB.menu.setup.date.day %= localDay;
;;;14276  		displayStateCB.menu.setup.date.day += step;
;;;14277  	}
;;;14278  	// -
;;;14279  	else if(1 == direction)
000030  2c01              CMP      r4,#1
000032  d00a              BEQ      |L313.74|
000034  e016              B        |L313.100|
                  |L313.54|
000036  f8961b5d          LDRB     r1,[r6,#0xb5d]        ;14275  ; displayStateCB
00003a  fbb1f2f0          UDIV     r2,r1,r0              ;14275
00003e  fb001012          MLS      r0,r0,r2,r1           ;14275
000042  4428              ADD      r0,r0,r5              ;14276
000044  f8860b5d          STRB     r0,[r6,#0xb5d]        ;14276
000048  e00c              B        |L313.100|
                  |L313.74|
;;;14280  	{
;;;14281  		displayStateCB.menu.setup.date.day += localDay-1;
00004a  f8962b5d          LDRB     r2,[r6,#0xb5d]  ; displayStateCB
00004e  1e41              SUBS     r1,r0,#1
000050  4411              ADD      r1,r1,r2
;;;14282  		displayStateCB.menu.setup.date.day -= step;
000052  1b49              SUBS     r1,r1,r5
000054  b2c9              UXTB     r1,r1
;;;14283  		displayStateCB.menu.setup.date.day %= localDay;
000056  fbb1f2f0          UDIV     r2,r1,r0
00005a  fb001012          MLS      r0,r0,r2,r1
;;;14284  		displayStateCB.menu.setup.date.day += 1;
00005e  1c40              ADDS     r0,r0,#1
000060  f8860b5d          STRB     r0,[r6,#0xb5d]
                  |L313.100|
;;;14285  	}
;;;14286  	else
;;;14287  	{}
;;;14288  
;;;14289  	// 校正日期合法性
;;;14290  	DISPLAY_VerifyDay(displayStateCB.menu.setup.date.year, displayStateCB.menu.setup.date.month, &displayStateCB.menu.setup.date.day);
000064  f8961b5c          LDRB     r1,[r6,#0xb5c]  ; displayStateCB
000068  f8b60b5a          LDRH     r0,[r6,#0xb5a]  ; displayStateCB
00006c  463a              MOV      r2,r7
00006e  e8bd40f0          POP      {r4-r7,lr}
000072  f7ffbffe          B.W      DISPLAY_VerifyDay
;;;14291  }
;;;14292  
                          ENDP

000076  0000              DCW      0x0000
                  |L313.120|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuTuneDateMonth||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuTuneDateMonth PROC
;;;14223  **********************************************************************/
;;;14224  void DISPLAY_MenuTuneDateMonth(uint32 param)
000000  b410              PUSH     {r4}
;;;14225  {
;;;14226  	uint8 direction = (param/100)%10;
000002  2264              MOVS     r2,#0x64
000004  fbb0f1f2          UDIV     r1,r0,r2
000008  230a              MOVS     r3,#0xa
00000a  fbb1f4f3          UDIV     r4,r1,r3
00000e  fb031114          MLS      r1,r3,r4,r1
;;;14227  	uint8 step = param%100;
000012  fbb0f3f2          UDIV     r3,r0,r2
000016  fb020213          MLS      r2,r2,r3,r0
;;;14228  
;;;14229  	// +
;;;14230  	if(0 == direction)
;;;14231  	{
;;;14232  		displayStateCB.menu.setup.date.month %= 12;
00001a  4c11              LDR      r4,|L314.96|
00001c  230c              MOVS     r3,#0xc
00001e  2900              CMP      r1,#0                 ;14230
000020  f8940b5c          LDRB     r0,[r4,#0xb5c]
000024  d002              BEQ      |L314.44|
;;;14233  		displayStateCB.menu.setup.date.month += step;
;;;14234  	}
;;;14235  	// -
;;;14236  	else if(1 == direction)
000026  2901              CMP      r1,#1
000028  d008              BEQ      |L314.60|
00002a  e011              B        |L314.80|
                  |L314.44|
00002c  fbb0f1f3          UDIV     r1,r0,r3              ;14232
000030  fb030011          MLS      r0,r3,r1,r0           ;14232
000034  4410              ADD      r0,r0,r2              ;14233
000036  f8840b5c          STRB     r0,[r4,#0xb5c]        ;14233
00003a  e009              B        |L314.80|
                  |L314.60|
;;;14237  	{
;;;14238  		displayStateCB.menu.setup.date.month += 11;
00003c  300b              ADDS     r0,r0,#0xb
;;;14239  		displayStateCB.menu.setup.date.month -= step;
00003e  1a80              SUBS     r0,r0,r2
000040  b2c0              UXTB     r0,r0
;;;14240  		displayStateCB.menu.setup.date.month %= 12;
000042  fbb0f1f3          UDIV     r1,r0,r3
000046  fb030011          MLS      r0,r3,r1,r0
;;;14241  		displayStateCB.menu.setup.date.month += 1;
00004a  1c40              ADDS     r0,r0,#1
00004c  f8840b5c          STRB     r0,[r4,#0xb5c]
                  |L314.80|
;;;14242  	}
;;;14243  	else
;;;14244  	{}
;;;14245  
;;;14246  	// 校正日期合法性
;;;14247  	DISPLAY_VerifyDay(displayStateCB.menu.setup.date.year, displayStateCB.menu.setup.date.month, &displayStateCB.menu.setup.date.day);
000050  f8941b5c          LDRB     r1,[r4,#0xb5c]  ; displayStateCB
000054  f8b40b5a          LDRH     r0,[r4,#0xb5a]  ; displayStateCB
000058  bc10              POP      {r4}
00005a  4a02              LDR      r2,|L314.100|
00005c  f7ffbffe          B.W      DISPLAY_VerifyDay
;;;14248  }
;;;14249  
                          ENDP

                  |L314.96|
                          DCD      ||.bss||
                  |L314.100|
                          DCD      ||.bss||+0xb5d

                          AREA ||i.DISPLAY_MenuTuneDateYear||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuTuneDateYear PROC
;;;14182  **********************************************************************/
;;;14183  void DISPLAY_MenuTuneDateYear(uint32 param)
000000  b410              PUSH     {r4}
;;;14184  {
;;;14185  	uint8 direction = (param/100)%10;
000002  2364              MOVS     r3,#0x64
000004  fbb0f1f3          UDIV     r1,r0,r3
000008  220a              MOVS     r2,#0xa
00000a  fbb1f4f2          UDIV     r4,r1,r2
00000e  fb021114          MLS      r1,r2,r4,r1
;;;14186  	uint8 step = param%100;
000012  fbb0f2f3          UDIV     r2,r0,r3
000016  fb030212          MLS      r2,r3,r2,r0
;;;14187  
;;;14188  	// +
;;;14189  	if(0 == direction)
;;;14190  	{
;;;14191  		displayStateCB.menu.setup.date.year += step;
00001a  4c13              LDR      r4,|L315.104|
00001c  2900              CMP      r1,#0                 ;14189
00001e  f8b40b5a          LDRH     r0,[r4,#0xb5a]
000022  d002              BEQ      |L315.42|
;;;14192  		displayStateCB.menu.setup.date.year %= 100;
;;;14193  		displayStateCB.menu.setup.date.year += 2000;
;;;14194  	}
;;;14195  	// -
;;;14196  	else if(1 == direction)
000024  2901              CMP      r1,#1
000026  d00b              BEQ      |L315.64|
000028  e015              B        |L315.86|
                  |L315.42|
00002a  4410              ADD      r0,r0,r2              ;14191
00002c  b280              UXTH     r0,r0                 ;14191
00002e  fbb0f1f3          UDIV     r1,r0,r3              ;14192
000032  fb030011          MLS      r0,r3,r1,r0           ;14192
000036  f50060fa          ADD      r0,r0,#0x7d0          ;14193
00003a  f8a40b5a          STRH     r0,[r4,#0xb5a]        ;14193
00003e  e00a              B        |L315.86|
                  |L315.64|
;;;14197  	{
;;;14198  		displayStateCB.menu.setup.date.year += 100;
000040  3064              ADDS     r0,r0,#0x64
;;;14199  		displayStateCB.menu.setup.date.year -= step;
000042  1a80              SUBS     r0,r0,r2
000044  b280              UXTH     r0,r0
;;;14200  		displayStateCB.menu.setup.date.year %= 100;
000046  fbb0f1f3          UDIV     r1,r0,r3
00004a  fb030011          MLS      r0,r3,r1,r0
;;;14201  		displayStateCB.menu.setup.date.year += 2000;
00004e  f50060fa          ADD      r0,r0,#0x7d0
000052  f8a40b5a          STRH     r0,[r4,#0xb5a]
                  |L315.86|
;;;14202  	}
;;;14203  	else
;;;14204  	{}
;;;14205  
;;;14206  	// 校正日期合法性
;;;14207  	DISPLAY_VerifyDay(displayStateCB.menu.setup.date.year, displayStateCB.menu.setup.date.month, &displayStateCB.menu.setup.date.day);
000056  f8941b5c          LDRB     r1,[r4,#0xb5c]  ; displayStateCB
00005a  f8b40b5a          LDRH     r0,[r4,#0xb5a]  ; displayStateCB
00005e  bc10              POP      {r4}
000060  4a02              LDR      r2,|L315.108|
000062  f7ffbffe          B.W      DISPLAY_VerifyDay
;;;14208  }
;;;14209  
                          ENDP

000066  0000              DCW      0x0000
                  |L315.104|
                          DCD      ||.bss||
                  |L315.108|
                          DCD      ||.bss||+0xb5d

                          AREA ||i.DISPLAY_MenuTuneRTCHour||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuTuneRTCHour PROC
;;;14327  **********************************************************************/
;;;14328  void DISPLAY_MenuTuneRTCHour(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;14329  {
;;;14330  	uint8 direction = (param/100)%10;
000002  2264              MOVS     r2,#0x64
000004  fbb0f1f2          UDIV     r1,r0,r2
000008  230a              MOVS     r3,#0xa
00000a  fbb1f4f3          UDIV     r4,r1,r3
00000e  fb031114          MLS      r1,r3,r4,r1
;;;14331  	uint8 step = param%100;
000012  fbb0f3f2          UDIV     r3,r0,r2
000016  fb020013          MLS      r0,r2,r3,r0
;;;14332  
;;;14333  	// +
;;;14334  	if(0 == direction)
;;;14335  	{
;;;14336  		displayStateCB.menu.setup.rtc.hour += step;
00001a  4c0e              LDR      r4,|L316.84|
;;;14337  		displayStateCB.menu.setup.rtc.hour %= 24;
00001c  2318              MOVS     r3,#0x18
00001e  2900              CMP      r1,#0                 ;14334
000020  f8942b60          LDRB     r2,[r4,#0xb60]        ;14336
000024  d00c              BEQ      |L316.64|
;;;14338  	}
;;;14339  	// -
;;;14340  	else if(1 == direction)
000026  2901              CMP      r1,#1
000028  d109              BNE      |L316.62|
;;;14341  	{
;;;14342  		displayStateCB.menu.setup.rtc.hour += 24*5-step;
00002a  f1c00078          RSB      r0,r0,#0x78
00002e  4410              ADD      r0,r0,r2
000030  b2c0              UXTB     r0,r0
;;;14343  		displayStateCB.menu.setup.rtc.hour %= 24;
000032  fbb0f1f3          UDIV     r1,r0,r3
000036  fb030011          MLS      r0,r3,r1,r0
00003a  f8840b60          STRB     r0,[r4,#0xb60]
                  |L316.62|
;;;14344  	}
;;;14345  	else
;;;14346  	{}
;;;14347  }
00003e  bd10              POP      {r4,pc}
                  |L316.64|
000040  4410              ADD      r0,r0,r2              ;14336
000042  b2c0              UXTB     r0,r0                 ;14336
000044  fbb0f1f3          UDIV     r1,r0,r3              ;14337
000048  fb030011          MLS      r0,r3,r1,r0           ;14337
00004c  f8840b60          STRB     r0,[r4,#0xb60]        ;14337
000050  bd10              POP      {r4,pc}
;;;14348  
                          ENDP

000052  0000              DCW      0x0000
                  |L316.84|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuTuneRTCMinute||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuTuneRTCMinute PROC
;;;14361  **********************************************************************/
;;;14362  void DISPLAY_MenuTuneRTCMinute(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;14363  {
;;;14364  	uint8 direction = (param/100)%10;
000002  2264              MOVS     r2,#0x64
000004  fbb0f1f2          UDIV     r1,r0,r2
000008  230a              MOVS     r3,#0xa
00000a  fbb1f4f3          UDIV     r4,r1,r3
00000e  fb031114          MLS      r1,r3,r4,r1
;;;14365  	uint8 step = param%100;
000012  fbb0f3f2          UDIV     r3,r0,r2
000016  fb020013          MLS      r0,r2,r3,r0
;;;14366  
;;;14367  	// +
;;;14368  	if(0 == direction)
;;;14369  	{
;;;14370  		displayStateCB.menu.setup.rtc.minute += step;
00001a  4c0e              LDR      r4,|L317.84|
;;;14371  		displayStateCB.menu.setup.rtc.minute %= 60;
00001c  233c              MOVS     r3,#0x3c
00001e  2900              CMP      r1,#0                 ;14368
000020  f8942b61          LDRB     r2,[r4,#0xb61]        ;14370
000024  d00c              BEQ      |L317.64|
;;;14372  	}
;;;14373  	// -
;;;14374  	else if(1 == direction)
000026  2901              CMP      r1,#1
000028  d109              BNE      |L317.62|
;;;14375  	{
;;;14376  		displayStateCB.menu.setup.rtc.minute += 60*2-step;
00002a  f1c00078          RSB      r0,r0,#0x78
00002e  4410              ADD      r0,r0,r2
000030  b2c0              UXTB     r0,r0
;;;14377  		displayStateCB.menu.setup.rtc.minute %= 60;
000032  fbb0f1f3          UDIV     r1,r0,r3
000036  fb030011          MLS      r0,r3,r1,r0
00003a  f8840b61          STRB     r0,[r4,#0xb61]
                  |L317.62|
;;;14378  	}
;;;14379  	else
;;;14380  	{}
;;;14381  }
00003e  bd10              POP      {r4,pc}
                  |L317.64|
000040  4410              ADD      r0,r0,r2              ;14370
000042  b2c0              UXTB     r0,r0                 ;14370
000044  fbb0f1f3          UDIV     r1,r0,r3              ;14371
000048  fb030011          MLS      r0,r3,r1,r0           ;14371
00004c  f8840b61          STRB     r0,[r4,#0xb61]        ;14371
000050  bd10              POP      {r4,pc}
;;;14382  
                          ENDP

000052  0000              DCW      0x0000
                  |L317.84|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_MenuTuneUnit||, CODE, READONLY, ALIGN=2

                  DISPLAY_MenuTuneUnit PROC
;;;14442  **********************************************************************/
;;;14443  void DISPLAY_MenuTuneUnit(uint32 bIsAdd)
000000  4a08              LDR      r2,|L318.36|
;;;14444  {
;;;14445  	if (bIsAdd)
;;;14446  	{
;;;14447  		displayStateCB.menu.setup.unit ++;
000002  f8921b56          LDRB     r1,[r2,#0xb56]
000006  1c49              ADDS     r1,r1,#1
000008  b2c9              UXTB     r1,r1
00000a  2800              CMP      r0,#0                 ;14445
00000c  d004              BEQ      |L318.24|
;;;14448  		displayStateCB.menu.setup.unit %= UINT_COUNT;
00000e  f0010001          AND      r0,r1,#1
000012  f8820b56          STRB     r0,[r2,#0xb56]
;;;14449  	}
;;;14450  	else
;;;14451  	{
;;;14452  		displayStateCB.menu.setup.unit += (UINT_COUNT - 1);
;;;14453  		displayStateCB.menu.setup.unit %= UINT_COUNT;
;;;14454  	}	
;;;14455  }
000016  4770              BX       lr
                  |L318.24|
000018  f0010001          AND      r0,r1,#1              ;14453
00001c  f8820b56          STRB     r0,[r2,#0xb56]        ;14453
000020  4770              BX       lr
;;;14456  
                          ENDP

000022  0000              DCW      0x0000
                  |L318.36|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_Process||, CODE, READONLY, ALIGN=2

                  DISPLAY_Process PROC
;;;9826   // 显示状态过程处理
;;;9827   void DISPLAY_Process(void)
000000  b570              PUSH     {r4-r6,lr}
;;;9828   {	
;;;9829   	uint16 i;
;;;9830   	DISPLAY_CTRL_CB* pCB;
;;;9831   	
;;;9832   	// 闪烁输出控制，注意顺序不能更改
;;;9833   	DISPLAY_BLINK_OutPutControl();
000002  f7fffffe          BL       DISPLAY_BLINK_OutPutControl
;;;9834   
;;;9835   	for ( i = 0; i < DISPLAY_MAX; i++)
000006  2500              MOVS     r5,#0
;;;9836   	{
;;;9837   		// 获取显示单元的地址
;;;9838   		pCB = &displayStateCB.dispCtrl[(DISPLAY_ITEM_E)i];
000008  4e0a              LDR      r6,|L319.52|
                  |L319.10|
00000a  b2e8              UXTB     r0,r5
00000c  eb061400          ADD      r4,r6,r0,LSL #4
;;;9839   		if (NULL == pCB)
000010  b154              CBZ      r4,|L319.40|
;;;9840   		{
;;;9841   			continue;
;;;9842   		}
;;;9843   
;;;9844   		// 显示使能并且值有更新
;;;9845   		if ( (pCB->enable) && (pCB->param != pCB->lastParam) )
000012  7820              LDRB     r0,[r4,#0]
000014  b140              CBZ      r0,|L319.40|
000016  e9d40101          LDRD     r0,r1,[r4,#4]
00001a  4288              CMP      r0,r1
00001c  d004              BEQ      |L319.40|
;;;9846   		{
;;;9847   			// 函数为空，跳过
;;;9848   			if(NULL == pCB->pService)
00001e  68e1              LDR      r1,[r4,#0xc]
000020  b111              CBZ      r1,|L319.40|
;;;9849   			{
;;;9850   				continue;
;;;9851   			}
;;;9852   				
;;;9853   			//  调用函数显示对应模块
;;;9854   			pCB->pService(pCB->param);
000022  4788              BLX      r1
;;;9855   
;;;9856   			// 更新上一次的值
;;;9857   			pCB->lastParam = pCB->param;
000024  6860              LDR      r0,[r4,#4]
000026  60a0              STR      r0,[r4,#8]
                  |L319.40|
000028  1c6d              ADDS     r5,r5,#1              ;9835
00002a  b2ad              UXTH     r5,r5                 ;9835
00002c  2db3              CMP      r5,#0xb3              ;9835
00002e  d3ec              BCC      |L319.10|
;;;9858   		}
;;;9859   	}
;;;9860   }
000030  bd70              POP      {r4-r6,pc}
;;;9861   
                          ENDP

000032  0000              DCW      0x0000
                  |L319.52|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ResumeValue||, CODE, READONLY, ALIGN=2

                  DISPLAY_ResumeValue PROC
;;;241    **********************************************************************/
;;;242    void DISPLAY_ResumeValue(DISPLAY_ITEM_E eUnit)
000000  28b3              CMP      r0,#0xb3
;;;243    {
000002  d80a              BHI      |L320.26|
;;;244    	DISPLAY_ITEM_E i;
;;;245    
;;;246    	// 参数判断
;;;247    	CHECK_PARAM_OVER_RETURN(eUnit, DISPLAY_MAX);
;;;248    
;;;249    	// 单次显示单元，禁止在使用过程中恢复其值	
;;;250    	CHECK_PARAM_LESS_RETURN(eUnit, DISPLAY_RID_BG);
000004  2804              CMP      r0,#4
000006  d308              BCC      |L320.26|
;;;251    
;;;252    	// 恢复除单次显示单元外的所有显示单元
;;;253    	if (DISPLAY_MAX == eUnit)	
;;;254    	{
;;;255    		for (i = DISPLAY_RID_BG; i < DISPLAY_MAX; i++)
;;;256    		{
;;;257    			displayStateCB.dispCtrl[i].param = UINT32_NULL;
000008  4b09              LDR      r3,|L320.48|
00000a  f04f32ff          MOV      r2,#0xffffffff
00000e  28b3              CMP      r0,#0xb3              ;253
000010  d004              BEQ      |L320.28|
;;;258    			displayStateCB.dispCtrl[i].lastParam = UINT32_NULL;
;;;259    		}
;;;260    
;;;261    		return;		
;;;262    	}
;;;263    	
;;;264    	// 恢复指定显示单元
;;;265    	displayStateCB.dispCtrl[eUnit].param = UINT32_NULL;
000012  eb031000          ADD      r0,r3,r0,LSL #4
000016  6042              STR      r2,[r0,#4]
;;;266    	displayStateCB.dispCtrl[eUnit].lastParam = UINT32_NULL;
000018  6082              STR      r2,[r0,#8]
                  |L320.26|
;;;267    
;;;268    }
00001a  4770              BX       lr
                  |L320.28|
00001c  2004              MOVS     r0,#4                 ;255
                  |L320.30|
00001e  eb031100          ADD      r1,r3,r0,LSL #4       ;257
000022  604a              STR      r2,[r1,#4]            ;257
000024  608a              STR      r2,[r1,#8]            ;258
000026  1c40              ADDS     r0,r0,#1              ;255
000028  b2c0              UXTB     r0,r0                 ;255
00002a  28b3              CMP      r0,#0xb3              ;255
00002c  d3f7              BCC      |L320.30|
00002e  4770              BX       lr
;;;269    
                          ENDP

                  |L320.48|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_SetMenuAdvancedPassword||, CODE, READONLY, ALIGN=2

                  DISPLAY_SetMenuAdvancedPassword PROC
;;;12148  // 设置高级菜单密码
;;;12149  void DISPLAY_SetMenuAdvancedPassword(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;12150  {
;;;12151  	
;;;12152  	displayStateCB.menu.advanced.password.value++;
000002  4914              LDR      r1,|L321.84|
000004  f8b10b44          LDRH     r0,[r1,#0xb44]  ; displayStateCB
000008  1c40              ADDS     r0,r0,#1
00000a  b280              UXTH     r0,r0
00000c  f8a10b44          STRH     r0,[r1,#0xb44]
;;;12153  	if (displayStateCB.menu.advanced.password.value > 3)
000010  2803              CMP      r0,#3
000012  d91d              BLS      |L321.80|
;;;12154  	{
;;;12155  		paramCB.nvm.param.protocol.menuPassword = ((displayStateCB.menu.advanced.password.number1*1000) +
000014  f6013146          ADD      r1,r1,#0xb46
000018  7808              LDRB     r0,[r1,#0]  ; displayStateCB
00001a  78ca              LDRB     r2,[r1,#3]  ; displayStateCB
00001c  eb000340          ADD      r3,r0,r0,LSL #1
000020  ebc310c0          RSB      r0,r3,r0,LSL #7
000024  eb0203c0          ADD      r3,r2,r0,LSL #3
000028  784a              LDRB     r2,[r1,#1]  ; displayStateCB
00002a  2064              MOVS     r0,#0x64
00002c  4342              MULS     r2,r0,r2
00002e  7888              LDRB     r0,[r1,#2]  ; displayStateCB
000030  4909              LDR      r1,|L321.88|
000032  eb000080          ADD      r0,r0,r0,LSL #2
000036  eb020040          ADD      r0,r2,r0,LSL #1
00003a  4418              ADD      r0,r0,r3
00003c  f8a102c6          STRH     r0,[r1,#0x2c6]
;;;12156  													(displayStateCB.menu.advanced.password.number2*100) +
;;;12157  													(displayStateCB.menu.advanced.password.number3*10) +
;;;12158  													(displayStateCB.menu.advanced.password.number4*1));
;;;12159  		// NVM更新，立即写入
;;;12160  		NVM_SetDirtyFlag(TRUE);
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       NVM_SetDirtyFlag
;;;12161  		STATE_EnterState(STATE_MENU_ADV_MENU_INFO1);
000046  e8bd4010          POP      {r4,lr}
00004a  2023              MOVS     r0,#0x23
00004c  f7ffbffe          B.W      STATE_EnterState
                  |L321.80|
;;;12162  	}
;;;12163  }
000050  bd10              POP      {r4,pc}
;;;12164  
                          ENDP

000052  0000              DCW      0x0000
                  |L321.84|
                          DCD      ||.bss||
                  |L321.88|
                          DCD      paramCB

                          AREA ||i.DISPLAY_SetTime_BLINKOnOff||, CODE, READONLY, ALIGN=2

                  DISPLAY_SetTime_BLINKOnOff PROC
;;;132    
;;;133    void DISPLAY_SetTime_BLINKOnOff(uint32 param)
000000  4807              LDR      r0,|L322.32|
;;;134    {
;;;135    		
;;;136    	switch (displayStateCB.menu.root.rtc.tuneBit)
000002  f8900b42          LDRB     r0,[r0,#0xb42]  ; displayStateCB
000006  2800              CMP      r0,#0
000008  d005              BEQ      |L322.22|
00000a  2801              CMP      r0,#1
00000c  d107              BNE      |L322.30|
;;;137    	{	
;;;138    		// 调整小时时，+ -键用于调整小时
;;;139    		case RTC_TUNE_BIT_HOUR:	
;;;140    			DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_HOUR, BLINK_MODE_BLINK_HIGH_SPEED);
;;;141    		break;
;;;142    
;;;143    		// 调整分钟时，+ -键用于调整分钟
;;;144    		case RTC_TUNE_BIT_MINUTE:
;;;145    			DISPLAY_BLINK_ModeControl(BLINK_NAME_SET_MINUTE, BLINK_MODE_BLINK_HIGH_SPEED);
00000e  2103              MOVS     r1,#3
000010  2004              MOVS     r0,#4
000012  f7ffbffe          B.W      DISPLAY_BLINK_ModeControl
                  |L322.22|
000016  2103              MOVS     r1,#3                 ;140
000018  4608              MOV      r0,r1                 ;140
00001a  f7ffbffe          B.W      DISPLAY_BLINK_ModeControl
                  |L322.30|
;;;146    		break;
;;;147    		
;;;148    		defalut:
;;;149    			break;
;;;150    	}
;;;151    }
00001e  4770              BX       lr
;;;152    
                          ENDP

                  |L322.32|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenu1AdvancedChoosePasswordGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenu1AdvancedChoosePasswordGUI PROC
;;;16523  // 高级菜单选择设置密码状态
;;;16524  void DISPLAY_ShowMenu1AdvancedChoosePasswordGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;16525  {			
;;;16526  	// 在(0,0)位置显示背景
;;;16527  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L323.20|
;;;16528  	{
;;;16529  		// 恢复所有的值为初始值
;;;16530  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;16531  
;;;16532  		// 更新背景 		
;;;16533  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L323.20|
;;;16534  	}
;;;16535  
;;;16536  	// 通用界面显示
;;;16537  	DISPLAY_Update_Title();
000014  f7fffffe          BL       DISPLAY_Update_Title
;;;16538  
;;;16539  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_CHOOSE_PASSWORD_TITLE, TRUE);
000018  2101              MOVS     r1,#1
00001a  206e              MOVS     r0,#0x6e
00001c  f7fffffe          BL       DISPLAY_UpdateValue
;;;16540  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_CHOOSE_PASSWORD_SET, paramCB.nvm.param.protocol.menuPasswordSwitch);
000020  4806              LDR      r0,|L323.60|
000022  f89012cd          LDRB     r1,[r0,#0x2cd]  ; paramCB
000026  206f              MOVS     r0,#0x6f
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;16541  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_CHOOSE_PASSWORD_CURSOR, displayStateCB.menu.advanced.cursor);
00002c  4804              LDR      r0,|L323.64|
00002e  f8901b4a          LDRB     r1,[r0,#0xb4a]  ; displayStateCB
000032  2070              MOVS     r0,#0x70
000034  f85deb04          POP      {lr}
000038  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16542  }
;;;16543  
                          ENDP

                  |L323.60|
                          DCD      paramCB
                  |L323.64|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenu1AdvancedResetGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenu1AdvancedResetGUI PROC
;;;16504  // 高级菜单恢复出厂设置状态
;;;16505  void DISPLAY_ShowMenu1AdvancedResetGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;16506  {
;;;16507  	// 在(0,0)位置显示背景
;;;16508  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L324.20|
;;;16509  	{
;;;16510  		// 恢复所有的值为初始值
;;;16511  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;16512  
;;;16513  		// 更新背景 		
;;;16514  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L324.20|
;;;16515  	}
;;;16516  
;;;16517  	// 通用界面显示
;;;16518  	DISPLAY_Update_Title();
000014  f7fffffe          BL       DISPLAY_Update_Title
;;;16519  
;;;16520  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_SET_RESET, displayStateCB.menu.advanced.cursor);
000018  4803              LDR      r0,|L324.40|
00001a  f8901b4a          LDRB     r1,[r0,#0xb4a]  ; displayStateCB
00001e  206d              MOVS     r0,#0x6d
000020  f85deb04          POP      {lr}
000024  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16521  }
;;;16522  
                          ENDP

                  |L324.40|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenu1AdvancedSetPasswordGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenu1AdvancedSetPasswordGUI PROC
;;;16545  // 高级菜单设置密码状态
;;;16546  void DISPLAY_ShowMenu1AdvancedSetPasswordGUI(BOOL refreshAll)
000000  b530              PUSH     {r4,r5,lr}
;;;16547  {
;;;16548  	uint16 password = (displayStateCB.menu.advanced.password.number1*1000) + (displayStateCB.menu.advanced.password.number2*100)+
000002  4c18              LDR      r4,|L325.100|
000004  f8941b46          LDRB     r1,[r4,#0xb46]  ; displayStateCB
000008  f8942b49          LDRB     r2,[r4,#0xb49]  ; displayStateCB
00000c  eb010341          ADD      r3,r1,r1,LSL #1
000010  ebc311c1          RSB      r1,r3,r1,LSL #7
000014  eb0203c1          ADD      r3,r2,r1,LSL #3
000018  f8942b47          LDRB     r2,[r4,#0xb47]  ; displayStateCB
00001c  2164              MOVS     r1,#0x64
00001e  434a              MULS     r2,r1,r2
000020  f8941b48          LDRB     r1,[r4,#0xb48]  ; displayStateCB
000024  eb010181          ADD      r1,r1,r1,LSL #2
000028  eb020141          ADD      r1,r2,r1,LSL #1
00002c  4419              ADD      r1,r1,r3
00002e  b28d              UXTH     r5,r1
;;;16549  					(displayStateCB.menu.advanced.password.number3*10) + (displayStateCB.menu.advanced.password.number4*1);
;;;16550  					
;;;16551  	// 在(0,0)位置显示背景
;;;16552  	if(refreshAll)
000030  2800              CMP      r0,#0
000032  d006              BEQ      |L325.66|
;;;16553  	{
;;;16554  		// 恢复所有的值为初始值
;;;16555  		DISPLAY_ResumeValue(DISPLAY_MAX);
000034  20b3              MOVS     r0,#0xb3
000036  f7fffffe          BL       DISPLAY_ResumeValue
;;;16556  
;;;16557  		// 更新背景 		
;;;16558  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00003a  2101              MOVS     r1,#1
00003c  2007              MOVS     r0,#7
00003e  f7fffffe          BL       DISPLAY_UpdateValue
                  |L325.66|
;;;16559  	}
;;;16560  
;;;16561  	// 通用界面显示
;;;16562  	DISPLAY_Update_Title();
000042  f7fffffe          BL       DISPLAY_Update_Title
;;;16563  
;;;16564  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PASSWORD_TITLE, TRUE);
000046  2101              MOVS     r1,#1
000048  2071              MOVS     r0,#0x71
00004a  f7fffffe          BL       DISPLAY_UpdateValue
;;;16565  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PASSWORD_SET, password);
00004e  4629              MOV      r1,r5
000050  2072              MOVS     r0,#0x72
000052  f7fffffe          BL       DISPLAY_UpdateValue
;;;16566  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PASSWORD_CURSOR, displayStateCB.menu.advanced.password.value);
000056  f8b41b44          LDRH     r1,[r4,#0xb44]  ; displayStateCB
00005a  e8bd4030          POP      {r4,r5,lr}
00005e  2073              MOVS     r0,#0x73
000060  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16567  }
;;;16568  
                          ENDP

                  |L325.100|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenu1AdvancedSettingsGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenu1AdvancedSettingsGUI PROC
;;;16405  // 高级菜单1设置状态
;;;16406  void DISPLAY_ShowMenu1AdvancedSettingsGUI(BOOL refreshAll)
000000  b5f0              PUSH     {r4-r7,lr}
;;;16407  {
;;;16408  	uint8 dir = displayStateCB.menu.advanced.cursor;
000002  4e58              LDR      r6,|L326.356|
000004  f8965b4a          LDRB     r5,[r6,#0xb4a]  ; displayStateCB
;;;16409  	uint16 wheelValue = 0;
000008  2400              MOVS     r4,#0
;;;16410  	
;;;16411  	// 在(0,0)位置显示背景
;;;16412  	if (refreshAll)
00000a  2800              CMP      r0,#0
00000c  d006              BEQ      |L326.28|
;;;16413  	{
;;;16414  		// 恢复所有的值为初始值
;;;16415  		DISPLAY_ResumeValue(DISPLAY_MAX);
00000e  20b3              MOVS     r0,#0xb3
000010  f7fffffe          BL       DISPLAY_ResumeValue
;;;16416  
;;;16417  		// 更新背景 		
;;;16418  		DISPLAY_UpdateValue(DISPLAY_ADV_MENU_BG, 1);
000014  2101              MOVS     r1,#1
000016  2008              MOVS     r0,#8
000018  f7fffffe          BL       DISPLAY_UpdateValue
                  |L326.28|
;;;16419  	}
;;;16420  
;;;16421  	// 通用界面显示
;;;16422  	DISPLAY_Update_Title();
00001c  f7fffffe          BL       DISPLAY_Update_Title
;;;16423  
;;;16424  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_TITLE, dir);
000020  4629              MOV      r1,r5
000022  2063              MOVS     r0,#0x63
000024  f7fffffe          BL       DISPLAY_UpdateValue
;;;16425  
;;;16426  	switch (PARAM_GetWheelSizeID())
000028  4f4f              LDR      r7,|L326.360|
00002a  f897028c          LDRB     r0,[r7,#0x28c]  ; paramCB
00002e  1fc0              SUBS     r0,r0,#7
000030  280b              CMP      r0,#0xb
000032  d21c              BCS      |L326.110|
000034  e8dff000          TBB      [pc,r0]
000038  06080a0c          DCB      0x06,0x08,0x0a,0x0c
00003c  0e101b13          DCB      0x0e,0x10,0x1b,0x13
000040  161b1900          DCB      0x16,0x1b,0x19,0x00
;;;16427  	{
;;;16428  		case PARAM_WHEEL_SIZE_16_INCH:
;;;16429  			wheelValue = 160;
000044  24a0              MOVS     r4,#0xa0
;;;16430  			break;
000046  e012              B        |L326.110|
;;;16431  		case PARAM_WHEEL_SIZE_18_INCH:
;;;16432  			wheelValue = 180;
000048  24b4              MOVS     r4,#0xb4
;;;16433  			break;
00004a  e010              B        |L326.110|
;;;16434  		case PARAM_WHEEL_SIZE_20_INCH:
;;;16435  			wheelValue = 200;
00004c  24c8              MOVS     r4,#0xc8
;;;16436  			break;
00004e  e00e              B        |L326.110|
;;;16437  		case PARAM_WHEEL_SIZE_22_INCH:
;;;16438  			wheelValue = 220;
000050  24dc              MOVS     r4,#0xdc
;;;16439  			break;
000052  e00c              B        |L326.110|
;;;16440  		case PARAM_WHEEL_SIZE_24_INCH:
;;;16441  			wheelValue = 240;
000054  24f0              MOVS     r4,#0xf0
;;;16442  			break;
000056  e00a              B        |L326.110|
;;;16443  		case PARAM_WHEEL_SIZE_26_INCH:
;;;16444  			wheelValue = 260;
000058  f44f7482          MOV      r4,#0x104
;;;16445  			break;
00005c  e007              B        |L326.110|
;;;16446  		case PARAM_WHEEL_SIZE_27_5_INCH:
;;;16447  			wheelValue = 275;
00005e  f2401413          MOV      r4,#0x113
;;;16448  			break;
000062  e004              B        |L326.110|
;;;16449  		case PARAM_WHEEL_SIZE_28_INCH:
;;;16450  			wheelValue = 280;
000064  f44f748c          MOV      r4,#0x118
;;;16451  			break;
000068  e001              B        |L326.110|
;;;16452  		case PARAM_WHEEL_SIZE_700C:
;;;16453  			wheelValue = 700;
00006a  f44f742f          MOV      r4,#0x2bc
                  |L326.110|
;;;16454  			break;	
;;;16455  		default:
;;;16456  			break;
;;;16457  	}
;;;16458  	switch (dir)
00006e  2d08              CMP      r5,#8
000070  d26d              BCS      |L326.334|
000072  e8dff005          TBB      [pc,r5]
000076  0404              DCB      0x04,0x04
000078  04043b3b          DCB      0x04,0x04,0x3b,0x3b
00007c  3b3b              DCB      0x3b,0x3b
;;;16459  	{
;;;16460  		case 0:
;;;16461  		case 1:
;;;16462  		case 2:
;;;16463  		case 3:
;;;16464  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WHEEL_SIZE, TRUE);
00007e  2101              MOVS     r1,#1
000080  2064              MOVS     r0,#0x64
000082  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16465  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WHEEL_METER, TRUE);
000086  2101              MOVS     r1,#1
000088  2065              MOVS     r0,#0x65
00008a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16466  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_SPEED_SENSOR, TRUE);
00008e  2101              MOVS     r1,#1
000090  2066              MOVS     r0,#0x66
000092  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16467  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_VOL, TRUE);
000096  2101              MOVS     r1,#1
000098  2067              MOVS     r0,#0x67
00009a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16468  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WALK_MODE, FALSE);
00009e  2100              MOVS     r1,#0
0000a0  2068              MOVS     r0,#0x68
0000a2  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16469  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_TURN_HANDLE, FALSE);
0000a6  2100              MOVS     r1,#0
0000a8  2069              MOVS     r0,#0x69
0000aa  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16470  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_RESET, FALSE);
0000ae  2100              MOVS     r1,#0
0000b0  206a              MOVS     r0,#0x6a
0000b2  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16471  
;;;16472  			DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_WHEEL_SIZE, (uint32)(wheelValue<<16) | dir);
0000b6  ea454104          ORR      r1,r5,r4,LSL #16
0000ba  2064              MOVS     r0,#0x64
0000bc  f7fffffe          BL       DISPLAY_UpdateValue
;;;16473  			DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_WHEEL_METER, (uint32)(PARAM_GetNewperimeter()<<16) | dir);
0000c0  f8b702ba          LDRH     r0,[r7,#0x2ba]  ; paramCB
0000c4  ea454100          ORR      r1,r5,r0,LSL #16
0000c8  2065              MOVS     r0,#0x65
0000ca  f7fffffe          BL       DISPLAY_UpdateValue
;;;16474  			DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_SPEED_SENSOR, (uint32)(PARAM_GetCycleOfSteelNum()<<16) | dir);
0000ce  f89702f9          LDRB     r0,[r7,#0x2f9]  ; paramCB
0000d2  ea454100          ORR      r1,r5,r0,LSL #16
0000d6  2066              MOVS     r0,#0x66
0000d8  f7fffffe          BL       DISPLAY_UpdateValue
;;;16475  			DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_VOL, (uint32)(PARAM_GetBatteryVoltageLevel()<<16) | dir);
0000dc  f8970338          LDRB     r0,[r7,#0x338]  ; paramCB
0000e0  ea454100          ORR      r1,r5,r0,LSL #16
0000e4  2067              MOVS     r0,#0x67
0000e6  f7fffffe          BL       DISPLAY_UpdateValue
;;;16476  			break;
0000ea  e030              B        |L326.334|
;;;16477  
;;;16478  		case 4:
;;;16479  		case 5:
;;;16480  		case 6:
;;;16481  		case 7:
;;;16482  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WHEEL_SIZE, FALSE);
0000ec  2100              MOVS     r1,#0
0000ee  2064              MOVS     r0,#0x64
0000f0  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16483  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WHEEL_METER, FALSE);
0000f4  2100              MOVS     r1,#0
0000f6  2065              MOVS     r0,#0x65
0000f8  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16484  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_SPEED_SENSOR, FALSE);
0000fc  2100              MOVS     r1,#0
0000fe  2066              MOVS     r0,#0x66
000100  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16485  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_VOL, FALSE);
000104  2100              MOVS     r1,#0
000106  2067              MOVS     r0,#0x67
000108  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16486  		
;;;16487  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_WALK_MODE, TRUE);
00010c  2101              MOVS     r1,#1
00010e  2068              MOVS     r0,#0x68
000110  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16488  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_TURN_HANDLE, TRUE);
000114  2101              MOVS     r1,#1
000116  2069              MOVS     r0,#0x69
000118  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16489  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_ADV_PARAM_RESET, TRUE);
00011c  2101              MOVS     r1,#1
00011e  206a              MOVS     r0,#0x6a
000120  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;16490  
;;;16491  			DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_WALK_MODE, (uint32)(PARAM_GetPushAssistSwitch()<<16) | dir);
000124  f8970325          LDRB     r0,[r7,#0x325]  ; paramCB
000128  ea454100          ORR      r1,r5,r0,LSL #16
00012c  2068              MOVS     r0,#0x68
00012e  f7fffffe          BL       DISPLAY_UpdateValue
;;;16492  			DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_TURN_HANDLE, (uint32)(PARAM_GetTurnbarLevel()<<16) | dir);
000132  f89702fe          LDRB     r0,[r7,#0x2fe]  ; paramCB
000136  ea454100          ORR      r1,r5,r0,LSL #16
00013a  2069              MOVS     r0,#0x69
00013c  f7fffffe          BL       DISPLAY_UpdateValue
;;;16493  			DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_RESET, (uint32)(displayStateCB.menu.advanced.resetFlag<<16) | dir);
000140  f8960b4c          LDRB     r0,[r6,#0xb4c]  ; displayStateCB
000144  ea454100          ORR      r1,r5,r0,LSL #16
000148  206a              MOVS     r0,#0x6a
00014a  f7fffffe          BL       DISPLAY_UpdateValue
                  |L326.334|
;;;16494  			
;;;16495  			break;
;;;16496  
;;;16497  		default:
;;;16498  			break;
;;;16499  	}
;;;16500  	
;;;16501  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_CURSOR, ((displayStateCB.menu.advanced.cursor << 4) | displayStateCB.menu.advanced.cursorEnter));
00014e  f8960b4b          LDRB     r0,[r6,#0xb4b]  ; displayStateCB
000152  f8961b4a          LDRB     r1,[r6,#0xb4a]  ; displayStateCB
000156  e8bd40f0          POP      {r4-r7,lr}
00015a  ea401101          ORR      r1,r0,r1,LSL #4
00015e  206c              MOVS     r0,#0x6c
000160  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16502  }
;;;16503  
                          ENDP

                  |L326.356|
                          DCD      ||.bss||
                  |L326.360|
                          DCD      paramCB

                          AREA ||i.DISPLAY_ShowMenu2AdvancedParamGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenu2AdvancedParamGUI PROC
;;;16569  // 高级菜单设置密码状态
;;;16570  void DISPLAY_ShowMenu2AdvancedParamGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;16571  {
;;;16572  	// 在(0,0)位置显示背景
;;;16573  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L327.20|
;;;16574  	{
;;;16575  		// 恢复所有的值为初始值
;;;16576  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;16577  
;;;16578  		// 更新背景 		
;;;16579  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L327.20|
;;;16580  	}
;;;16581  
;;;16582  	// 通用界面显示
;;;16583  	DISPLAY_Update_Title();
000014  f7fffffe          BL       DISPLAY_Update_Title
;;;16584  
;;;16585  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_WHEEL_SIZE, PARAM_GetNewWheelSizeInch());
000018  4b1e              LDR      r3,|L327.148|
00001a  2064              MOVS     r0,#0x64
00001c  f8331c64          LDRH     r1,[r3,#-0x64]  ; paramCB
000020  f7fffffe          BL       DISPLAY_UpdateValue
;;;16586  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_WHEEL_METER, PARAM_GetNewperimeter());
000024  f8331c60          LDRH     r1,[r3,#-0x60]  ; paramCB
000028  2065              MOVS     r0,#0x65
00002a  f7fffffe          BL       DISPLAY_UpdateValue
;;;16587  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_VOL, PARAM_GetBatteryVoltageLevel());
00002e  7f99              LDRB     r1,[r3,#0x1e]  ; paramCB
000030  2067              MOVS     r0,#0x67
000032  f7fffffe          BL       DISPLAY_UpdateValue
;;;16588  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_MAGNETICS, PARAM_GetCycleOfSteelNum());
000036  f8131c21          LDRB     r1,[r3,#-0x21]  ; paramCB
00003a  2074              MOVS     r0,#0x74
00003c  f7fffffe          BL       DISPLAY_UpdateValue
;;;16589  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_PROTOCOL, PARAM_GetRunProtocol());
000040  f8131c5e          LDRB     r1,[r3,#-0x5e]  ; paramCB
000044  2075              MOVS     r0,#0x75
000046  f7fffffe          BL       DISPLAY_UpdateValue
;;;16590  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_BATTERY_INFO, PARAM_GetPercentageMethod());
00004a  7a99              LDRB     r1,[r3,#0xa]  ; paramCB
00004c  2076              MOVS     r0,#0x76
00004e  f7fffffe          BL       DISPLAY_UpdateValue
;;;16591  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_WALK_ASSIST, PARAM_GetPushAssistSwitch());
000052  7ad9              LDRB     r1,[r3,#0xb]  ; paramCB
000054  2077              MOVS     r0,#0x77
000056  f7fffffe          BL       DISPLAY_UpdateValue
;;;16592  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_UART_VOL, PARAM_GetUartLevel());
00005a  7b59              LDRB     r1,[r3,#0xd]  ; paramCB
00005c  2078              MOVS     r0,#0x78
00005e  f7fffffe          BL       DISPLAY_UpdateValue
;;;16593  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_AM_LIMIT, PARAM_GetCurrentLimit());
000062  f8331c1a          LDRH     r1,[r3,#-0x1a]  ; paramCB
000066  2079              MOVS     r0,#0x79
000068  f7fffffe          BL       DISPLAY_UpdateValue
;;;16594  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_SPEED_LIMIT, paramCB.nvm.param.common.speed.limitVal);
00006c  8b59              LDRH     r1,[r3,#0x1a]  ; paramCB
00006e  207a              MOVS     r0,#0x7a
000070  f7fffffe          BL       DISPLAY_UpdateValue
;;;16595  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_BACK, TRUE);
000074  2101              MOVS     r1,#1
000076  207b              MOVS     r0,#0x7b
000078  f7fffffe          BL       DISPLAY_UpdateValue
;;;16596  	
;;;16597  	DISPLAY_UpdateValue(DISPLAY_MENU_ADV_PARAM_CURSOR, ((displayStateCB.menu.advanced.cursor << 4) | displayStateCB.menu.advanced.cursorEnter));
00007c  4806              LDR      r0,|L327.152|
00007e  f8901b4b          LDRB     r1,[r0,#0xb4b]  ; displayStateCB
000082  f8900b4a          LDRB     r0,[r0,#0xb4a]  ; displayStateCB
000086  f85deb04          POP      {lr}
00008a  ea411100          ORR      r1,r1,r0,LSL #4
00008e  206c              MOVS     r0,#0x6c
000090  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16598  }
;;;16599  
                          ENDP

                  |L327.148|
                          DCD      paramCB+0x31a
                  |L327.152|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenuAdvancedSettingsGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuAdvancedSettingsGUI PROC
;;;15309  
;;;15310  void DISPLAY_ShowMenuAdvancedSettingsGUI(BOOL refreshAll, MENU_ID_E id)
000000  b510              PUSH     {r4,lr}
;;;15311  {
000002  460c              MOV      r4,r1
;;;15312  	// 参数判断
;;;15313  	if (id >= MENU_ID_ROOT_COUNT)
000004  2c0b              CMP      r4,#0xb
000006  d248              BCS      |L328.154|
;;;15314  	{
;;;15315  		return;
;;;15316  	}
;;;15317  
;;;15318  	// 在(0,0)位置显示背景
;;;15319  	if(refreshAll)
000008  b130              CBZ      r0,|L328.24|
;;;15320  	{
;;;15321  		// 恢复所有的值为初始值
;;;15322  		DISPLAY_ResumeValue(DISPLAY_MAX);
00000a  20b3              MOVS     r0,#0xb3
00000c  f7fffffe          BL       DISPLAY_ResumeValue
;;;15323  
;;;15324  		// 更新背景 		
;;;15325  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
000010  2101              MOVS     r1,#1
000012  2007              MOVS     r0,#7
000014  f7fffffe          BL       DISPLAY_UpdateValue
                  |L328.24|
;;;15326  	}
;;;15327  
;;;15328  	// 通用界面显示
;;;15329  	DISPLAY_Update_Title();
000018  f7fffffe          BL       DISPLAY_Update_Title
;;;15330  
;;;15331  	// 主菜单初始状态(默认)
;;;15332  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_TITLE, 1);
00001c  2101              MOVS     r1,#1
00001e  2063              MOVS     r0,#0x63
000020  f7fffffe          BL       DISPLAY_UpdateValue
;;;15333  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_WHEEL_SIZE, 1);
000024  2101              MOVS     r1,#1
000026  207c              MOVS     r0,#0x7c
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;15334  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_SPEED_LIMIT, 1);
00002c  2101              MOVS     r1,#1
00002e  207d              MOVS     r0,#0x7d
000030  f7fffffe          BL       DISPLAY_UpdateValue
;;;15335  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_ESC, 1);
000034  2101              MOVS     r1,#1
000036  207e              MOVS     r0,#0x7e
000038  f7fffffe          BL       DISPLAY_UpdateValue
;;;15336  
;;;15337  	switch (id)
00003c  b18c              CBZ      r4,|L328.98|
00003e  2c01              CMP      r4,#1
000040  d01d              BEQ      |L328.126|
000042  2c02              CMP      r4,#2
000044  d129              BNE      |L328.154|
;;;15338  	{
;;;15339  		case MENU_ID_ADVANCED_SETTINGS_WHEEL_SIZE:
;;;15340  			DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_WHEEL_SIZE, 1);
;;;15341  			DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_SPEED_LIMIT, 0);
;;;15342  			DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_ESC, 0);
;;;15343  			break;
;;;15344  
;;;15345  		case MENU_ID_ADVANCED_SETTINGS_SPEED_LIMIT:
;;;15346  			DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_WHEEL_SIZE, 0);
;;;15347  			DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_SPEED_LIMIT, 1);
;;;15348  			DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_ESC, 0);
;;;15349  			break;
;;;15350  
;;;15351  		case MENU_ID_ADVANCED_SETTINGS_ESC:
;;;15352  			DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_WHEEL_SIZE, 0);
000046  2100              MOVS     r1,#0
000048  207c              MOVS     r0,#0x7c
00004a  f7fffffe          BL       DISPLAY_UpdateValue
;;;15353  			DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_SPEED_LIMIT, 0);
00004e  2100              MOVS     r1,#0
000050  207d              MOVS     r0,#0x7d
000052  f7fffffe          BL       DISPLAY_UpdateValue
;;;15354  			DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_ESC, 1);
000056  2101              MOVS     r1,#1
000058  e8bd4010          POP      {r4,lr}
00005c  207e              MOVS     r0,#0x7e
00005e  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L328.98|
000062  2101              MOVS     r1,#1                 ;15340
000064  207c              MOVS     r0,#0x7c              ;15340
000066  f7fffffe          BL       DISPLAY_UpdateValue
00006a  2100              MOVS     r1,#0                 ;15341
00006c  207d              MOVS     r0,#0x7d              ;15341
00006e  f7fffffe          BL       DISPLAY_UpdateValue
000072  2100              MOVS     r1,#0                 ;15342
000074  e8bd4010          POP      {r4,lr}               ;15342
000078  207e              MOVS     r0,#0x7e              ;15342
00007a  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L328.126|
00007e  2100              MOVS     r1,#0                 ;15346
000080  207c              MOVS     r0,#0x7c              ;15346
000082  f7fffffe          BL       DISPLAY_UpdateValue
000086  2101              MOVS     r1,#1                 ;15347
000088  207d              MOVS     r0,#0x7d              ;15347
00008a  f7fffffe          BL       DISPLAY_UpdateValue
00008e  2100              MOVS     r1,#0                 ;15348
000090  e8bd4010          POP      {r4,lr}               ;15348
000094  207e              MOVS     r0,#0x7e              ;15348
000096  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L328.154|
;;;15355  			break;
;;;15356  
;;;15357  		default:
;;;15358  			break;
;;;15359  	}
;;;15360  }
00009a  bd10              POP      {r4,pc}
;;;15361  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuAdvancedSettingsSpeedLimitGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuAdvancedSettingsSpeedLimitGUI PROC
;;;15380  
;;;15381  void DISPLAY_ShowMenuAdvancedSettingsSpeedLimitGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;15382  {
;;;15383  	// 在(0,0)位置显示背景
;;;15384  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L329.20|
;;;15385  	{
;;;15386  		// 恢复所有的值为初始值
;;;15387  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;15388  
;;;15389  		// 更新背景 		
;;;15390  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L329.20|
;;;15391  	}
;;;15392  
;;;15393  	// 通用界面显示
;;;15394  	DISPLAY_Update_Title();
000014  f7fffffe          BL       DISPLAY_Update_Title
;;;15395  
;;;15396  	// 主菜单初始状态(默认)
;;;15397  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_SETTINGS_SPEED_LIMIT, displayStateCB.menu.advanced.speedLimit/10);
000018  4805              LDR      r0,|L329.48|
00001a  210a              MOVS     r1,#0xa
00001c  f8b00b50          LDRH     r0,[r0,#0xb50]  ; displayStateCB
000020  f85deb04          POP      {lr}
000024  fbb0f1f1          UDIV     r1,r0,r1
000028  2080              MOVS     r0,#0x80
00002a  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15398  }
;;;15399  
                          ENDP

00002e  0000              DCW      0x0000
                  |L329.48|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenuAdvancedSettingsWheelSizeGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuAdvancedSettingsWheelSizeGUI PROC
;;;15361  
;;;15362  void DISPLAY_ShowMenuAdvancedSettingsWheelSizeGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;15363  {
;;;15364  	// 在(0,0)位置显示背景
;;;15365  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L330.20|
;;;15366  	{
;;;15367  		// 恢复所有的值为初始值
;;;15368  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;15369  
;;;15370  		// 更新背景 		
;;;15371  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L330.20|
;;;15372  	}
;;;15373  
;;;15374  	// 通用界面显示
;;;15375  	DISPLAY_Update_Title();
000014  f7fffffe          BL       DISPLAY_Update_Title
;;;15376  
;;;15377  	// 主菜单初始状态(默认)
;;;15378  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_SETTINGS_WHEEL_SIZE, displayStateCB.menu.advanced.wheelSizeID);
000018  4803              LDR      r0,|L330.40|
00001a  f8901b4e          LDRB     r1,[r0,#0xb4e]  ; displayStateCB
00001e  207f              MOVS     r0,#0x7f
000020  f85deb04          POP      {lr}
000024  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15379  }
;;;15380  
                          ENDP

                  |L330.40|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenuBeforeAdvancedSettingsGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuBeforeAdvancedSettingsGUI PROC
;;;15292  // 进入高级菜单前的确认状态
;;;15293  void DISPLAY_ShowMenuBeforeAdvancedSettingsGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;15294  {
;;;15295  	// 在(0,0)位置显示背景
;;;15296  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L331.20|
;;;15297  	{
;;;15298  		// 恢复所有的值为初始值
;;;15299  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;15300  
;;;15301  		// 更新背景 		
;;;15302  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L331.20|
;;;15303  	}
;;;15304  
;;;15305  	// 通用界面显示
;;;15306  	DISPLAY_Update_Title();
000014  f85deb04          POP      {lr}
000018  f7ffbffe          B.W      DISPLAY_Update_Title
;;;15307  
;;;15308  }
;;;15309  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuEntrePasswordGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuEntrePasswordGUI PROC
;;;16380  
;;;16381  void DISPLAY_ShowMenuEntrePasswordGUI(BOOL refreshAll)
000000  b530              PUSH     {r4,r5,lr}
;;;16382  {
;;;16383  	uint16 password = (displayStateCB.menu.advanced.password.number1*1000) + (displayStateCB.menu.advanced.password.number2*100)+
000002  4c18              LDR      r4,|L332.100|
000004  f8941b46          LDRB     r1,[r4,#0xb46]  ; displayStateCB
000008  f8942b49          LDRB     r2,[r4,#0xb49]  ; displayStateCB
00000c  eb010341          ADD      r3,r1,r1,LSL #1
000010  ebc311c1          RSB      r1,r3,r1,LSL #7
000014  eb0203c1          ADD      r3,r2,r1,LSL #3
000018  f8942b47          LDRB     r2,[r4,#0xb47]  ; displayStateCB
00001c  2164              MOVS     r1,#0x64
00001e  434a              MULS     r2,r1,r2
000020  f8941b48          LDRB     r1,[r4,#0xb48]  ; displayStateCB
000024  eb010181          ADD      r1,r1,r1,LSL #2
000028  eb020141          ADD      r1,r2,r1,LSL #1
00002c  4419              ADD      r1,r1,r3
00002e  b28d              UXTH     r5,r1
;;;16384  					(displayStateCB.menu.advanced.password.number3*10) + (displayStateCB.menu.advanced.password.number4*1);
;;;16385  	
;;;16386  	// 在(0,0)位置显示背景
;;;16387  	if(refreshAll)
000030  2800              CMP      r0,#0
000032  d006              BEQ      |L332.66|
;;;16388  	{
;;;16389  		// 恢复所有的值为初始值
;;;16390  		DISPLAY_ResumeValue(DISPLAY_MAX);
000034  20b3              MOVS     r0,#0xb3
000036  f7fffffe          BL       DISPLAY_ResumeValue
;;;16391  
;;;16392  		// 更新背景 		
;;;16393  		DISPLAY_UpdateValue(DISPLAY_INPUT_PASSWORD_BG, 1);
00003a  2101              MOVS     r1,#1
00003c  2009              MOVS     r0,#9
00003e  f7fffffe          BL       DISPLAY_UpdateValue
                  |L332.66|
;;;16394  	}
;;;16395  
;;;16396  	// 通用界面显示
;;;16397  	DISPLAY_Update_Title();
000042  f7fffffe          BL       DISPLAY_Update_Title
;;;16398  	
;;;16399  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_PASSWORD_INPUT_TITLE, TRUE);
000046  2101              MOVS     r1,#1
000048  205b              MOVS     r0,#0x5b
00004a  f7fffffe          BL       DISPLAY_UpdateValue
;;;16400  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_PASSWORD_INPUT_NUM, password);
00004e  4629              MOV      r1,r5
000050  205c              MOVS     r0,#0x5c
000052  f7fffffe          BL       DISPLAY_UpdateValue
;;;16401  	DISPLAY_UpdateValue(DISPLAY_MENU_ADVANCED_PASSWORD_INPUT_CURSOR, displayStateCB.menu.advanced.password.value);
000056  f8b41b44          LDRH     r1,[r4,#0xb44]  ; displayStateCB
00005a  e8bd4030          POP      {r4,r5,lr}
00005e  205d              MOVS     r0,#0x5d
000060  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16402  	//DISPLAY_UpdateValue(DISPLAY_STATUS_BAR, TRUE);
;;;16403  }
;;;16404  
                          ENDP

                  |L332.100|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenuErrorGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuErrorGUI PROC
;;;15201  **********************************************************************/
;;;15202  void DISPLAY_ShowMenuErrorGUI(BOOL refreshAll)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;15203  {
000004  4683              MOV      r11,r0
;;;15204  	uint16 uwSpeed = (uint16)(PARAM_GetSpeed());
000006  f7fffffe          BL       PARAM_GetSpeed
00000a  4606              MOV      r6,r0
;;;15205  	uint16 uwUint = PARAM_GetUnit();
00000c  4c66              LDR      r4,|L333.424|
00000e  f8947319          LDRB     r7,[r4,#0x319]  ; paramCB
;;;15206  	uint16 uwPower = (uint16)PARAM_GetPower();
000012  f8b4822e          LDRH     r8,[r4,#0x22e]  ; paramCB
;;;15207  	uint16 uwAssist = PARAM_IsPushAssistOn() ? ASSIST_P : PARAM_GetAssistLevel();
000016  f89401ff          LDRB     r0,[r4,#0x1ff]  ; paramCB
00001a  b108              CBZ      r0,|L333.32|
00001c  250a              MOVS     r5,#0xa
00001e  e002              B        |L333.38|
                  |L333.32|
000020  f7fffffe          BL       PARAM_GetAssistLevel
000024  4605              MOV      r5,r0
                  |L333.38|
;;;15208  	uint16 uwTime = ((PARAM_GetRTCHour() << 8) | PARAM_GetRTCMin());
000026  f89401f9          LDRB     r0,[r4,#0x1f9]  ; paramCB
00002a  f89411f8          LDRB     r1,[r4,#0x1f8]  ; paramCB
00002e  ea402901          ORR      r9,r0,r1,LSL #8
;;;15209  	uint32 Call4gstate = (PARAM_GetHelmetConnectState() << 16) | paramCB.runtime.iot.signal4G;
000032  f894017e          LDRB     r0,[r4,#0x17e]  ; paramCB
000036  f894120d          LDRB     r1,[r4,#0x20d]  ; paramCB
00003a  ea404a01          ORR      r10,r0,r1,LSL #16
;;;15210  
;;;15211  	
;;;15212  	// 在(0,0)位置显示背景
;;;15213  	if(refreshAll)
00003e  f1bb0f00          CMP      r11,#0
000042  d006              BEQ      |L333.82|
;;;15214  	{
;;;15215  		// 恢复所有的值为初始值
;;;15216  		DISPLAY_ResumeValue(DISPLAY_MAX);
000044  20b3              MOVS     r0,#0xb3
000046  f7fffffe          BL       DISPLAY_ResumeValue
;;;15217  
;;;15218  		// 更新背景 		
;;;15219  		DISPLAY_UpdateValue(DISPLAY_RID_BG, 1);
00004a  2101              MOVS     r1,#1
00004c  2004              MOVS     r0,#4
00004e  f7fffffe          BL       DISPLAY_UpdateValue
                  |L333.82|
;;;15220  	}
;;;15221  
;;;15222  	// 进入音乐播放模式
;;;15223  	if (paramCB.runtime.musicPlayMode)
000052  f894020a          LDRB     r0,[r4,#0x20a]  ; paramCB
000056  b168              CBZ      r0,|L333.116|
;;;15224  	{
;;;15225  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_TIME, FALSE);
000058  2100              MOVS     r1,#0
00005a  200a              MOVS     r0,#0xa
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15226  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_MUSIC_PLAY, TRUE);			
000060  2101              MOVS     r1,#1
000062  2018              MOVS     r0,#0x18
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15227  		DISPLAY_UpdateValue(DISPLAY_COMMON_MUSIC_PLAY, paramCB.runtime.musicState);
000068  f8941213          LDRB     r1,[r4,#0x213]  ; paramCB
00006c  2018              MOVS     r0,#0x18
00006e  f7fffffe          BL       DISPLAY_UpdateValue
000072  e00b              B        |L333.140|
                  |L333.116|
;;;15228  	}
;;;15229  	else// 时间显示
;;;15230  	{
;;;15231  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_TIME, TRUE);	
000074  2101              MOVS     r1,#1
000076  200a              MOVS     r0,#0xa
000078  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15232  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_MUSIC_PLAY, FALSE);					
00007c  2100              MOVS     r1,#0
00007e  2018              MOVS     r0,#0x18
000080  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15233  		DISPLAY_UpdateValue(DISPLAY_COMMON_TIME, uwTime);
000084  4649              MOV      r1,r9
000086  200a              MOVS     r0,#0xa
000088  f7fffffe          BL       DISPLAY_UpdateValue
                  |L333.140|
;;;15234  	}
;;;15235  	
;;;15236  	if (PARAM_GetExistBle())
00008c  f8940323          LDRB     r0,[r4,#0x323]  ; paramCB
000090  b120              CBZ      r0,|L333.156|
;;;15237  	{
;;;15238  		DISPLAY_UpdateValue(DISPLAY_COMMON_BLUE_STATE, PARAM_GetBleConnectState());
000092  f8941203          LDRB     r1,[r4,#0x203]  ; paramCB
000096  200d              MOVS     r0,#0xd
000098  f7fffffe          BL       DISPLAY_UpdateValue
                  |L333.156|
;;;15239  	}
;;;15240  	
;;;15241  	DISPLAY_UpdateValue(DISPLAY_COMMON_LIGHT, PARAM_GetLightSwitch()| (paramCB.runtime.headAutoLight << 4) );
00009c  f8940202          LDRB     r0,[r4,#0x202]  ; paramCB
0000a0  f8941257          LDRB     r1,[r4,#0x257]  ; paramCB
0000a4  ea401101          ORR      r1,r0,r1,LSL #4
0000a8  200f              MOVS     r0,#0xf
0000aa  f7fffffe          BL       DISPLAY_UpdateValue
;;;15242  	DISPLAY_UpdateValue(DISPLAY_COMMON_ERROR, (PARAM_GetErrorCode() == 0 ? 0:1));
0000ae  f8940221          LDRB     r0,[r4,#0x221]  ; paramCB
0000b2  b108              CBZ      r0,|L333.184|
0000b4  2101              MOVS     r1,#1
0000b6  e000              B        |L333.186|
                  |L333.184|
0000b8  2100              MOVS     r1,#0
                  |L333.186|
0000ba  2010              MOVS     r0,#0x10
0000bc  f7fffffe          BL       DISPLAY_UpdateValue
;;;15243  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_4G, Call4gstate);
0000c0  4651              MOV      r1,r10
0000c2  2012              MOVS     r0,#0x12
0000c4  f7fffffe          BL       DISPLAY_UpdateValue
;;;15244  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_GPS, paramCB.runtime.iot.signalGps);
0000c8  f20414ef          ADD      r4,r4,#0x1ef
0000cc  2013              MOVS     r0,#0x13
0000ce  f8141c73          LDRB     r1,[r4,#-0x73]  ; paramCB
0000d2  f7fffffe          BL       DISPLAY_UpdateValue
;;;15245  	DISPLAY_UpdateValue(DISPLAY_COMMON_BATTARY_HELMET, ((uint16)PARAM_GetHelmetConnectState() << 8) |PARAM_GetHelmetBattery());
0000d6  7fe0              LDRB     r0,[r4,#0x1f]  ; paramCB
0000d8  7fa1              LDRB     r1,[r4,#0x1e]  ; paramCB
0000da  ea402101          ORR      r1,r0,r1,LSL #8
0000de  2014              MOVS     r0,#0x14
0000e0  f7fffffe          BL       DISPLAY_UpdateValue
;;;15246  	DISPLAY_UpdateValue(DISPLAY_COMMON_VIDEO, paramCB.runtime.videoSwitch);
0000e4  7da1              LDRB     r1,[r4,#0x16]  ; paramCB
0000e6  2015              MOVS     r0,#0x15
0000e8  f7fffffe          BL       DISPLAY_UpdateValue
;;;15247  	DISPLAY_UpdateValue(DISPLAY_COMMON_PHOTO, paramCB.runtime.photoSwitch);
0000ec  7de1              LDRB     r1,[r4,#0x17]  ; paramCB
0000ee  2016              MOVS     r0,#0x16
0000f0  f7fffffe          BL       DISPLAY_UpdateValue
;;;15248  	DISPLAY_UpdateValue(DISPLAY_COMMON_VOICE, paramCB.runtime.voiceSwitch);
0000f4  7e21              LDRB     r1,[r4,#0x18]  ; paramCB
0000f6  2017              MOVS     r0,#0x17
0000f8  f7fffffe          BL       DISPLAY_UpdateValue
;;;15249  
;;;15250  	if (PARAM_GetHelmetConnectState())
0000fc  7fa0              LDRB     r0,[r4,#0x1e]  ; paramCB
0000fe  f2a414ef          SUB      r4,r4,#0x1ef
000102  b128              CBZ      r0,|L333.272|
;;;15251  	{
;;;15252  		DISPLAY_UpdateValue(DISPLAY_COMMON_TURN, PARAM_GetTurnState());
000104  f8941208          LDRB     r1,[r4,#0x208]  ; paramCB
000108  2019              MOVS     r0,#0x19
00010a  f7fffffe          BL       DISPLAY_UpdateValue
00010e  e003              B        |L333.280|
                  |L333.272|
;;;15253  	}
;;;15254  	else
;;;15255  	{
;;;15256  		DISPLAY_UpdateValue(DISPLAY_COMMON_TURN, FALSE);
000110  2100              MOVS     r1,#0
000112  2019              MOVS     r0,#0x19
000114  f7fffffe          BL       DISPLAY_UpdateValue
                  |L333.280|
;;;15257  	}
;;;15258  	
;;;15259  	// Riding界面显示
;;;15260  	DISPLAY_UpdateValue(DISPLAY_RID_BATTARY, PARAM_GetBatteryPercent());
000118  f8941172          LDRB     r1,[r4,#0x172]  ; paramCB
00011c  2022              MOVS     r0,#0x22
00011e  f7fffffe          BL       DISPLAY_UpdateValue
;;;15261  	DISPLAY_UpdateValue(DISPLAY_RID_ASSIST, uwAssist);
000122  4629              MOV      r1,r5
000124  2021              MOVS     r0,#0x21
000126  f7fffffe          BL       DISPLAY_UpdateValue
;;;15262  	DISPLAY_UpdateValue(DISPLAY_RID_SPEED, uwSpeed);
00012a  4631              MOV      r1,r6
00012c  201f              MOVS     r0,#0x1f
00012e  f7fffffe          BL       DISPLAY_UpdateValue
;;;15263  	DISPLAY_UpdateValue(DISPLAY_RID_SPEED_UNIT, uwUint);
000132  4639              MOV      r1,r7
000134  2020              MOVS     r0,#0x20
000136  f7fffffe          BL       DISPLAY_UpdateValue
;;;15264  	DISPLAY_UpdateValue(DISPLAY_RID_MOTOR_POWER, uwPower);
00013a  4641              MOV      r1,r8
00013c  201e              MOVS     r0,#0x1e
00013e  f7fffffe          BL       DISPLAY_UpdateValue
;;;15265  	
;;;15266  	DISPLAY_UpdateValue(DISPLAY_COMMON_ERROR, (PARAM_GetErrorCode() == 0 ? 0:1));
000142  f8940221          LDRB     r0,[r4,#0x221]  ; paramCB
000146  b108              CBZ      r0,|L333.332|
000148  2101              MOVS     r1,#1
00014a  e000              B        |L333.334|
                  |L333.332|
00014c  2100              MOVS     r1,#0
                  |L333.334|
00014e  2010              MOVS     r0,#0x10
000150  f7fffffe          BL       DISPLAY_UpdateValue
;;;15267  
;;;15268  	// 骑行界面来电提示
;;;15269  	if (PARAM_GetHelmetConnectState()|| PARAM_GetBleCallRing())
000154  f894020d          LDRB     r0,[r4,#0x20d]  ; paramCB
000158  b910              CBNZ     r0,|L333.352|
00015a  f8940204          LDRB     r0,[r4,#0x204]  ; paramCB
00015e  b190              CBZ      r0,|L333.390|
                  |L333.352|
;;;15270  	{
;;;15271  		DISPLAY_UpdateValue(DISPLAY_RID_CALL_NUMBER, PARAM_GetCallerIgnoreState());
000160  f894120c          LDRB     r1,[r4,#0x20c]  ; paramCB
000164  2024              MOVS     r0,#0x24
000166  f7fffffe          BL       DISPLAY_UpdateValue
;;;15272  
;;;15273  		if (PARAM_GetCallerIgnoreState())
00016a  f894020c          LDRB     r0,[r4,#0x20c]  ; paramCB
00016e  b120              CBZ      r0,|L333.378|
;;;15274  		{
;;;15275  			DISPLAY_UpdateValue(DISPLAY_MENU_ERROR, 0x00);
000170  2100              MOVS     r1,#0
000172  2043              MOVS     r0,#0x43
000174  f7fffffe          BL       DISPLAY_UpdateValue
000178  e00e              B        |L333.408|
                  |L333.378|
;;;15276  		}	
;;;15277  		else
;;;15278  		{
;;;15279  			DISPLAY_UpdateValue(DISPLAY_MENU_ERROR, PARAM_GetErrorCode());
00017a  f8941221          LDRB     r1,[r4,#0x221]  ; paramCB
00017e  2043              MOVS     r0,#0x43
000180  f7fffffe          BL       DISPLAY_UpdateValue
000184  e008              B        |L333.408|
                  |L333.390|
;;;15280  		}
;;;15281  	}
;;;15282  	else
;;;15283  	{
;;;15284  		DISPLAY_UpdateValue(DISPLAY_RID_CALL_NUMBER, FALSE);
000186  2100              MOVS     r1,#0
000188  2024              MOVS     r0,#0x24
00018a  f7fffffe          BL       DISPLAY_UpdateValue
;;;15285  
;;;15286  		DISPLAY_UpdateValue(DISPLAY_MENU_ERROR, PARAM_GetErrorCode());
00018e  f8941221          LDRB     r1,[r4,#0x221]  ; paramCB
000192  2043              MOVS     r0,#0x43
000194  f7fffffe          BL       DISPLAY_UpdateValue
                  |L333.408|
;;;15287  	} 
;;;15288  	
;;;15289  	DISPLAY_UpdateValue(DISPLAY_RID_CRUISE, PARAM_GetCruiseState());
000198  f89411fe          LDRB     r1,[r4,#0x1fe]  ; paramCB
00019c  e8bd5ff0          POP      {r4-r12,lr}
0001a0  2023              MOVS     r0,#0x23
0001a2  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15290  }
;;;15291  
                          ENDP

0001a6  0000              DCW      0x0000
                  |L333.424|
                          DCD      paramCB

                          AREA ||i.DISPLAY_ShowMenuL1GUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuL1GUI PROC
;;;15414  // 【参数】背景刷新请求，为真时刷新背景
;;;15415  void DISPLAY_ShowMenuL1GUI(BOOL refreshAll, MENU_ID_E id)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;15416  {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
;;;15417  	displayStateCB.menu.root.speedLimit = PARAM_GetSpeedLimit();
000008  f7fffffe          BL       PARAM_GetSpeedLimit
00000c  4cfe              LDR      r4,|L334.1032|
00000e  8020              STRH     r0,[r4,#0]
;;;15418  	uint32 uwSpeedLimitUnit = ((uint16)PARAM_GetUnit() << 8) | (((displayStateCB.menu.root.speedLimit + 5) / 10) & 0xFF);
000010  1d40              ADDS     r0,r0,#5
000012  220a              MOVS     r2,#0xa
000014  fbb0f6f2          UDIV     r6,r0,r2
000018  4dfc              LDR      r5,|L334.1036|
00001a  f8951319          LDRB     r1,[r5,#0x319]  ; paramCB
00001e  f361261f          BFI      r6,r1,#8,#24
;;;15419  	uint16 usSetTime = (((uint16)displayStateCB.menu.root.rtc.hour << 8) | (uint16)displayStateCB.menu.root.rtc.minute);
000022  7b60              LDRB     r0,[r4,#0xd]  ; displayStateCB
000024  7b21              LDRB     r1,[r4,#0xc]  ; displayStateCB
000026  ea402701          ORR      r7,r0,r1,LSL #8
;;;15420  	uint16 uwPassword = (displayStateCB.menu.root.password.number1*1000) + (displayStateCB.menu.root.password.number2*100)+
00002a  79e2              LDRB     r2,[r4,#7]  ; displayStateCB
00002c  7aa0              LDRB     r0,[r4,#0xa]  ; displayStateCB
00002e  eb020142          ADD      r1,r2,r2,LSL #1
000032  ebc111c2          RSB      r1,r1,r2,LSL #7
000036  eb0002c1          ADD      r2,r0,r1,LSL #3
00003a  7a21              LDRB     r1,[r4,#8]  ; displayStateCB
00003c  2064              MOVS     r0,#0x64
00003e  4341              MULS     r1,r0,r1
000040  7a60              LDRB     r0,[r4,#9]  ; displayStateCB
000042  f6a43434          SUB      r4,r4,#0xb34
000046  eb000080          ADD      r0,r0,r0,LSL #2
00004a  eb010040          ADD      r0,r1,r0,LSL #1
00004e  4410              ADD      r0,r0,r2
000050  fa1ffa80          UXTH     r10,r0
;;;15421  					(displayStateCB.menu.root.password.number3*10) + (displayStateCB.menu.root.password.number4*1);
;;;15422  					
;;;15423  	// 参数判断
;;;15424  	if (id >= MENU_ID_ROOT_COUNT)
000054  f1b90f0b          CMP      r9,#0xb
000058  d27e              BCS      |L334.344|
;;;15425  	{
;;;15426  		return;
;;;15427  	}
;;;15428  
;;;15429  	// 在(0,0)位置显示背景
;;;15430  	if (refreshAll)
00005a  f1b80f00          CMP      r8,#0
00005e  d006              BEQ      |L334.110|
;;;15431  	{
;;;15432  		// 恢复所有的值为初始值
;;;15433  		DISPLAY_ResumeValue(DISPLAY_MAX);
000060  20b3              MOVS     r0,#0xb3
000062  f7fffffe          BL       DISPLAY_ResumeValue
;;;15434  
;;;15435  		// 更新背景 		
;;;15436  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
000066  2101              MOVS     r1,#1
000068  2007              MOVS     r0,#7
00006a  f7fffffe          BL       DISPLAY_UpdateValue
                  |L334.110|
;;;15437  	}
;;;15438  
;;;15439  	// 通用界面显示
;;;15440  	DISPLAY_Update_Title();
00006e  f7fffffe          BL       DISPLAY_Update_Title
;;;15441  
;;;15442  	// 主菜单初始状态(默认)
;;;15443  	// 有蓝牙+有开机密码
;;;15444  	if (PARAM_GetExistBle())
000072  f8950323          LDRB     r0,[r5,#0x323]  ; paramCB
000076  b1a8              CBZ      r0,|L334.164|
;;;15445  	{
;;;15446  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE1, TRUE );
000078  2101              MOVS     r1,#1
00007a  2046              MOVS     r0,#0x46
00007c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15447  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE2, FALSE );
000080  2100              MOVS     r1,#0
000082  2047              MOVS     r0,#0x47
000084  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15448  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE3, FALSE );
000088  2100              MOVS     r1,#0
00008a  2048              MOVS     r0,#0x48
00008c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15449  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE4, FALSE );
000090  2100              MOVS     r1,#0
000092  2049              MOVS     r0,#0x49
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15450  		
;;;15451  		DISPLAY_UpdateValue(DISPLAY_MENU_TITILE1, displayStateCB.menu.root.id);
000098  f8941b30          LDRB     r1,[r4,#0xb30]  ; displayStateCB
00009c  2046              MOVS     r0,#0x46
00009e  f7fffffe          BL       DISPLAY_UpdateValue
0000a2  e014              B        |L334.206|
                  |L334.164|
;;;15452  	}
;;;15453  
;;;15454  	// 无蓝牙+有开机密码
;;;15455  	else if (!PARAM_GetExistBle())
;;;15456  	{
;;;15457  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE1, FALSE );
0000a4  2100              MOVS     r1,#0
0000a6  2046              MOVS     r0,#0x46
0000a8  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15458  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE2, FALSE );
0000ac  2100              MOVS     r1,#0
0000ae  2047              MOVS     r0,#0x47
0000b0  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15459  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE3, TRUE );
0000b4  2101              MOVS     r1,#1
0000b6  2048              MOVS     r0,#0x48
0000b8  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15460  		DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_TITILE4, FALSE );
0000bc  2100              MOVS     r1,#0
0000be  2049              MOVS     r0,#0x49
0000c0  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15461  		
;;;15462  		DISPLAY_UpdateValue(DISPLAY_MENU_TITILE3, displayStateCB.menu.root.id);
0000c4  f8941b30          LDRB     r1,[r4,#0xb30]  ; displayStateCB
0000c8  2048              MOVS     r0,#0x48
0000ca  f7fffffe          BL       DISPLAY_UpdateValue
                  |L334.206|
;;;15463  	}
;;;15464  	
;;;15465  	DISPLAY_UpdateValue(DISPLAY_MENU_BACK, (((uint16)displayStateCB.menu.root.enterFlag << 8) | (displayStateCB.menu.root.id & 0xFF)));
0000ce  f8940b30          LDRB     r0,[r4,#0xb30]  ; displayStateCB
0000d2  f8941b31          LDRB     r1,[r4,#0xb31]  ; displayStateCB
0000d6  ea402101          ORR      r1,r0,r1,LSL #8
0000da  2054              MOVS     r0,#0x54
0000dc  f7fffffe          BL       DISPLAY_UpdateValue
;;;15466  	
;;;15467  	switch (displayStateCB.menu.root.id)
0000e0  f8940b30          LDRB     r0,[r4,#0xb30]  ; displayStateCB
0000e4  280a              CMP      r0,#0xa
0000e6  d237              BCS      |L334.344|
0000e8  e8dff000          TBB      [pc,r0]
0000ec  05346594          DCB      0x05,0x34,0x65,0x94
0000f0  c3f2fcfb          DCB      0xc3,0xf2,0xfc,0xfb
0000f4  faf9              DCB      0xfa,0xf9
;;;15468  	{
;;;15469  		case MENU_ID_ROOT_CLEAR_DATA:
;;;15470  
;;;15471  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, TRUE );		
0000f6  2101              MOVS     r1,#1
0000f8  204a              MOVS     r0,#0x4a
0000fa  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15472  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, FALSE );	
0000fe  2100              MOVS     r1,#0
000100  204b              MOVS     r0,#0x4b
000102  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15473  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, FALSE );	
000106  2100              MOVS     r1,#0
000108  204c              MOVS     r0,#0x4c
00010a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15474  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, FALSE );
00010e  2100              MOVS     r1,#0
000110  204d              MOVS     r0,#0x4d
000112  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15475  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, FALSE );	
000116  2100              MOVS     r1,#0
000118  204e              MOVS     r0,#0x4e
00011a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15476  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, FALSE );		
00011e  2100              MOVS     r1,#0
000120  204f              MOVS     r0,#0x4f
000122  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15477  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, FALSE );	
000126  2100              MOVS     r1,#0
000128  2050              MOVS     r0,#0x50
00012a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15478  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, FALSE );	
00012e  2100              MOVS     r1,#0
000130  2051              MOVS     r0,#0x51
000132  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15479  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, FALSE ); 
000136  2100              MOVS     r1,#0
000138  2052              MOVS     r0,#0x52
00013a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15480  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, FALSE );	
00013e  2100              MOVS     r1,#0
000140  2053              MOVS     r0,#0x53
000142  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15481  
;;;15482  			DISPLAY_UpdateValue(DISPLAY_MENU_CLEAR_TRIP, displayStateCB.menu.root.clearFlag);
000146  f8941b32          LDRB     r1,[r4,#0xb32]  ; displayStateCB
00014a  e8bd47f0          POP      {r4-r10,lr}
00014e  204a              MOVS     r0,#0x4a
000150  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15483  
;;;15484  			break;
;;;15485  
;;;15486  		case MENU_ID_ROOT_DISPLAY_UNIT:
;;;15487  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, FALSE );		
000154  2100              MOVS     r1,#0
000156  e000              B        |L334.346|
                  |L334.344|
000158  e1b8              B        |L334.1228|
                  |L334.346|
00015a  204a              MOVS     r0,#0x4a
00015c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15488  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, TRUE );	
000160  2101              MOVS     r1,#1
000162  204b              MOVS     r0,#0x4b
000164  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15489  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, FALSE );	
000168  2100              MOVS     r1,#0
00016a  204c              MOVS     r0,#0x4c
00016c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15490  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, FALSE );
000170  2100              MOVS     r1,#0
000172  204d              MOVS     r0,#0x4d
000174  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15491  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, FALSE );	
000178  2100              MOVS     r1,#0
00017a  204e              MOVS     r0,#0x4e
00017c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15492  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, FALSE );		
000180  2100              MOVS     r1,#0
000182  204f              MOVS     r0,#0x4f
000184  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15493  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, FALSE );	
000188  2100              MOVS     r1,#0
00018a  2050              MOVS     r0,#0x50
00018c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15494  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, FALSE );	
000190  2100              MOVS     r1,#0
000192  2051              MOVS     r0,#0x51
000194  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15495  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, FALSE ); 
000198  2100              MOVS     r1,#0
00019a  2052              MOVS     r0,#0x52
00019c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15496  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, FALSE );	
0001a0  2100              MOVS     r1,#0
0001a2  2053              MOVS     r0,#0x53
0001a4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15497  			
;;;15498  			DISPLAY_UpdateValue(DISPLAY_MENU_DISPLAY_UNIT, PARAM_GetUnit());
0001a8  f8951319          LDRB     r1,[r5,#0x319]  ; paramCB
0001ac  e8bd47f0          POP      {r4-r10,lr}
0001b0  204b              MOVS     r0,#0x4b
0001b2  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15499  
;;;15500  			break;
;;;15501  
;;;15502  		case MENU_ID_ROOT_BACKLIGHT:
;;;15503  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, FALSE );		
0001b6  2100              MOVS     r1,#0
0001b8  204a              MOVS     r0,#0x4a
0001ba  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15504  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, FALSE );	
0001be  2100              MOVS     r1,#0
0001c0  204b              MOVS     r0,#0x4b
0001c2  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15505  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, TRUE );	
0001c6  2101              MOVS     r1,#1
0001c8  204c              MOVS     r0,#0x4c
0001ca  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15506  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, FALSE );
0001ce  2100              MOVS     r1,#0
0001d0  204d              MOVS     r0,#0x4d
0001d2  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15507  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, FALSE );	
0001d6  2100              MOVS     r1,#0
0001d8  204e              MOVS     r0,#0x4e
0001da  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15508  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, FALSE );		
0001de  2100              MOVS     r1,#0
0001e0  204f              MOVS     r0,#0x4f
0001e2  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15509  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, FALSE );	
0001e6  2100              MOVS     r1,#0
0001e8  2050              MOVS     r0,#0x50
0001ea  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15510  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, FALSE );	
0001ee  2100              MOVS     r1,#0
0001f0  2051              MOVS     r0,#0x51
0001f2  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15511  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, FALSE ); 
0001f6  2100              MOVS     r1,#0
0001f8  2052              MOVS     r0,#0x52
0001fa  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15512  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, FALSE );	
0001fe  2100              MOVS     r1,#0
000200  2053              MOVS     r0,#0x53
000202  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15513  
;;;15514  			DISPLAY_UpdateValue(DISPLAY_MENU_BACKLIGHT, PARAM_GetBrightness());
000206  f8951320          LDRB     r1,[r5,#0x320]  ; paramCB
00020a  e8bd47f0          POP      {r4-r10,lr}
00020e  204c              MOVS     r0,#0x4c
000210  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15515  
;;;15516  			break;
;;;15517  
;;;15518  		case MENU_ID_ROOT_POWEROFF_TIME:
;;;15519  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, FALSE );		
000214  2100              MOVS     r1,#0
000216  204a              MOVS     r0,#0x4a
000218  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15520  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, FALSE );	
00021c  2100              MOVS     r1,#0
00021e  204b              MOVS     r0,#0x4b
000220  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15521  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, FALSE );	
000224  2100              MOVS     r1,#0
000226  204c              MOVS     r0,#0x4c
000228  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15522  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, TRUE );
00022c  2101              MOVS     r1,#1
00022e  204d              MOVS     r0,#0x4d
000230  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15523  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, FALSE );	
000234  2100              MOVS     r1,#0
000236  204e              MOVS     r0,#0x4e
000238  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15524  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, FALSE );		
00023c  2100              MOVS     r1,#0
00023e  204f              MOVS     r0,#0x4f
000240  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15525  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, FALSE );	
000244  2100              MOVS     r1,#0
000246  2050              MOVS     r0,#0x50
000248  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15526  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, FALSE );	
00024c  2100              MOVS     r1,#0
00024e  2051              MOVS     r0,#0x51
000250  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15527  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, FALSE ); 
000254  2100              MOVS     r1,#0
000256  2052              MOVS     r0,#0x52
000258  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15528  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, FALSE );	
00025c  2100              MOVS     r1,#0
00025e  2053              MOVS     r0,#0x53
000260  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15529  
;;;15530  			DISPLAY_UpdateValue(DISPLAY_MENU_POWEROFF_TIME, PARAM_GetPowerOffTime());
000264  f8951321          LDRB     r1,[r5,#0x321]  ; paramCB
000268  e8bd47f0          POP      {r4-r10,lr}
00026c  204d              MOVS     r0,#0x4d
00026e  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15531  
;;;15532  			break;
;;;15533  
;;;15534  		case MENU_ID_ROOT_AUTO_LIGHT:
;;;15535  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, FALSE );		
000272  2100              MOVS     r1,#0
000274  204a              MOVS     r0,#0x4a
000276  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15536  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, FALSE );	
00027a  2100              MOVS     r1,#0
00027c  204b              MOVS     r0,#0x4b
00027e  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15537  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, FALSE );	
000282  2100              MOVS     r1,#0
000284  204c              MOVS     r0,#0x4c
000286  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15538  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, FALSE );
00028a  2100              MOVS     r1,#0
00028c  204d              MOVS     r0,#0x4d
00028e  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15539  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, TRUE );	
000292  2101              MOVS     r1,#1
000294  204e              MOVS     r0,#0x4e
000296  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15540  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, FALSE );		
00029a  2100              MOVS     r1,#0
00029c  204f              MOVS     r0,#0x4f
00029e  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15541  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, FALSE );	
0002a2  2100              MOVS     r1,#0
0002a4  2050              MOVS     r0,#0x50
0002a6  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15542  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, FALSE );	
0002aa  2100              MOVS     r1,#0
0002ac  2051              MOVS     r0,#0x51
0002ae  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15543  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, FALSE ); 
0002b2  2100              MOVS     r1,#0
0002b4  2052              MOVS     r0,#0x52
0002b6  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15544  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, FALSE );	
0002ba  2100              MOVS     r1,#0
0002bc  2053              MOVS     r0,#0x53
0002be  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15545  
;;;15546  			DISPLAY_UpdateValue(DISPLAY_MENU_AUTO_LIGHT, paramCB.nvm.param.common.backlight.autoLight);
0002c2  f8951332          LDRB     r1,[r5,#0x332]  ; paramCB
0002c6  e8bd47f0          POP      {r4-r10,lr}
0002ca  204e              MOVS     r0,#0x4e
0002cc  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15547  
;;;15548  			break;
;;;15549  
;;;15550  		case MENU_ID_ROOT_SPEED_LIMIT:
;;;15551  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, FALSE );		
0002d0  2100              MOVS     r1,#0
0002d2  204a              MOVS     r0,#0x4a
0002d4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15552  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, FALSE );	
0002d8  2100              MOVS     r1,#0
0002da  204b              MOVS     r0,#0x4b
0002dc  e003              B        |L334.742|
0002de  e0c7              B        |L334.1136|
0002e0  e098              B        |L334.1044|
0002e2  e062              B        |L334.938|
0002e4  e027              B        |L334.822|
                  |L334.742|
0002e6  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15553  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, FALSE );	
0002ea  2100              MOVS     r1,#0
0002ec  204c              MOVS     r0,#0x4c
0002ee  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15554  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, FALSE );
0002f2  2100              MOVS     r1,#0
0002f4  204d              MOVS     r0,#0x4d
0002f6  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15555  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, FALSE );	
0002fa  2100              MOVS     r1,#0
0002fc  204e              MOVS     r0,#0x4e
0002fe  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15556  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, TRUE );		
000302  2101              MOVS     r1,#1
000304  204f              MOVS     r0,#0x4f
000306  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15557  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, FALSE );	
00030a  2100              MOVS     r1,#0
00030c  2050              MOVS     r0,#0x50
00030e  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15558  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, FALSE );	
000312  2100              MOVS     r1,#0
000314  2051              MOVS     r0,#0x51
000316  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15559  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, FALSE ); 
00031a  2100              MOVS     r1,#0
00031c  2052              MOVS     r0,#0x52
00031e  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15560  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, FALSE );	
000322  2100              MOVS     r1,#0
000324  2053              MOVS     r0,#0x53
000326  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15561  			
;;;15562  			DISPLAY_UpdateValue(DISPLAY_MENU_SPEED_LIMIT, uwSpeedLimitUnit);
00032a  4631              MOV      r1,r6
00032c  e8bd47f0          POP      {r4-r10,lr}
000330  204f              MOVS     r0,#0x4f
000332  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L334.822|
;;;15563  
;;;15564  			break;
;;;15565  
;;;15566  		case MENU_ID_ROOT_USER_PASSWORD:
;;;15567  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, FALSE );		
000336  2100              MOVS     r1,#0
000338  204a              MOVS     r0,#0x4a
00033a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15568  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, FALSE );	
00033e  2100              MOVS     r1,#0
000340  204b              MOVS     r0,#0x4b
000342  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15569  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, FALSE );	
000346  2100              MOVS     r1,#0
000348  204c              MOVS     r0,#0x4c
00034a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15570  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, FALSE );
00034e  2100              MOVS     r1,#0
000350  204d              MOVS     r0,#0x4d
000352  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15571  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, FALSE );	
000356  2100              MOVS     r1,#0
000358  204e              MOVS     r0,#0x4e
00035a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15572  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, FALSE );		
00035e  2100              MOVS     r1,#0
000360  204f              MOVS     r0,#0x4f
000362  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15573  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, TRUE );	
000366  2101              MOVS     r1,#1
000368  2050              MOVS     r0,#0x50
00036a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15574  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, FALSE );	
00036e  2100              MOVS     r1,#0
000370  2051              MOVS     r0,#0x51
000372  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15575  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, FALSE ); 
000376  2100              MOVS     r1,#0
000378  2052              MOVS     r0,#0x52
00037a  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15576  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, FALSE );	
00037e  2100              MOVS     r1,#0
000380  2053              MOVS     r0,#0x53
000382  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15577  			
;;;15578  			DISPLAY_UpdateValue(DISPLAY_MENU_USER_PASSWORD, (((uint32)uwPassword << 16) 
000386  f8941b39          LDRB     r1,[r4,#0xb39]  ; displayStateCB
00038a  f8940b3a          LDRB     r0,[r4,#0xb3a]  ; displayStateCB
00038e  f361101f          BFI      r0,r1,#4,#28
000392  0600              LSLS     r0,r0,#24
000394  0c00              LSRS     r0,r0,#16
000396  ea40410a          ORR      r1,r0,r10,LSL #16
00039a  f89502cc          LDRB     r0,[r5,#0x2cc]  ; paramCB
00039e  e8bd47f0          POP      {r4-r10,lr}
0003a2  4301              ORRS     r1,r1,r0
0003a4  2050              MOVS     r0,#0x50
0003a6  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L334.938|
;;;15579  															| ((((uint32)(displayStateCB.menu.root.password.numberCursor << 4) | (displayStateCB.menu.root.password.menuCursor & 0x0F)) & 0xFF) << 8)
;;;15580  															| paramCB.nvm.param.protocol.powerPasswordSwitchShow));
;;;15581  
;;;15582  			break;
;;;15583  
;;;15584  		case MENU_ID_ROOT_SYSTEM_INFO:
;;;15585  
;;;15586  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, FALSE );		
0003aa  2100              MOVS     r1,#0
0003ac  204a              MOVS     r0,#0x4a
0003ae  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15587  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, FALSE );	
0003b2  2100              MOVS     r1,#0
0003b4  204b              MOVS     r0,#0x4b
0003b6  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15588  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, FALSE );	
0003ba  2100              MOVS     r1,#0
0003bc  204c              MOVS     r0,#0x4c
0003be  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15589  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, FALSE );
0003c2  2100              MOVS     r1,#0
0003c4  204d              MOVS     r0,#0x4d
0003c6  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15590  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, FALSE );	
0003ca  2100              MOVS     r1,#0
0003cc  204e              MOVS     r0,#0x4e
0003ce  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15591  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, FALSE );		
0003d2  2100              MOVS     r1,#0
0003d4  204f              MOVS     r0,#0x4f
0003d6  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15592  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, FALSE );	
0003da  2100              MOVS     r1,#0
0003dc  2050              MOVS     r0,#0x50
0003de  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15593  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, TRUE );	
0003e2  2101              MOVS     r1,#1
0003e4  2051              MOVS     r0,#0x51
0003e6  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15594  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, FALSE ); 
0003ea  2100              MOVS     r1,#0
0003ec  2052              MOVS     r0,#0x52
0003ee  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15595  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, FALSE );	
0003f2  2100              MOVS     r1,#0
0003f4  2053              MOVS     r0,#0x53
0003f6  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15596  
;;;15597  			DISPLAY_UpdateValue(DISPLAY_MENU_SYSTEM_INFO, PARAM_GetFWVersion());
0003fa  f8d5126c          LDR      r1,[r5,#0x26c]  ; paramCB
0003fe  e8bd47f0          POP      {r4-r10,lr}
000402  2051              MOVS     r0,#0x51
000404  e004              B        |L334.1040|
000406  0000              DCW      0x0000
                  |L334.1032|
                          DCD      ||.bss||+0xb34
                  |L334.1036|
                          DCD      paramCB
                  |L334.1040|
000410  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L334.1044|
;;;15598  
;;;15599  			break;
;;;15600  
;;;15601  		case MENU_ID_ROOT_SET_TIME:
;;;15602  
;;;15603  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, FALSE );		
000414  2100              MOVS     r1,#0
000416  204a              MOVS     r0,#0x4a
000418  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15604  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, FALSE );	
00041c  2100              MOVS     r1,#0
00041e  204b              MOVS     r0,#0x4b
000420  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15605  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, FALSE );	
000424  2100              MOVS     r1,#0
000426  204c              MOVS     r0,#0x4c
000428  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15606  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, FALSE );
00042c  2100              MOVS     r1,#0
00042e  204d              MOVS     r0,#0x4d
000430  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15607  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, FALSE );	
000434  2100              MOVS     r1,#0
000436  204e              MOVS     r0,#0x4e
000438  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15608  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, FALSE );		
00043c  2100              MOVS     r1,#0
00043e  204f              MOVS     r0,#0x4f
000440  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15609  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, FALSE );	
000444  2100              MOVS     r1,#0
000446  2050              MOVS     r0,#0x50
000448  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15610  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, FALSE );	
00044c  2100              MOVS     r1,#0
00044e  2051              MOVS     r0,#0x51
000450  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15611  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, TRUE ); 
000454  2101              MOVS     r1,#1
000456  2052              MOVS     r0,#0x52
000458  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15612  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, FALSE );	
00045c  2100              MOVS     r1,#0
00045e  2053              MOVS     r0,#0x53
000460  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15613  			
;;;15614  			DISPLAY_UpdateValue(DISPLAY_MENU_SET_TIME, usSetTime);
000464  4639              MOV      r1,r7
000466  e8bd47f0          POP      {r4-r10,lr}
00046a  2052              MOVS     r0,#0x52
00046c  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L334.1136|
;;;15615  
;;;15616  			break;
;;;15617  
;;;15618  		case MENU_ID_ROOT_CONNECT_TO_APP:
;;;15619  
;;;15620  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CLEAR_TRIP, FALSE );		
000470  2100              MOVS     r1,#0
000472  204a              MOVS     r0,#0x4a
000474  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15621  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_DISPLAY_UNIT, FALSE );	
000478  2100              MOVS     r1,#0
00047a  204b              MOVS     r0,#0x4b
00047c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15622  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_BACKLIGHT, FALSE );	
000480  2100              MOVS     r1,#0
000482  204c              MOVS     r0,#0x4c
000484  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15623  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_POWEROFF_TIME, FALSE );
000488  2100              MOVS     r1,#0
00048a  204d              MOVS     r0,#0x4d
00048c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15624  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_AUTO_LIGHT, FALSE );	
000490  2100              MOVS     r1,#0
000492  204e              MOVS     r0,#0x4e
000494  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15625  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SPEED_LIMIT, FALSE );		
000498  2100              MOVS     r1,#0
00049a  204f              MOVS     r0,#0x4f
00049c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15626  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_USER_PASSWORD, FALSE );	
0004a0  2100              MOVS     r1,#0
0004a2  2050              MOVS     r0,#0x50
0004a4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15627  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SYSTEM_INFO, FALSE );	
0004a8  2100              MOVS     r1,#0
0004aa  2051              MOVS     r0,#0x51
0004ac  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15628  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_SET_TIME, FALSE ); 
0004b0  2100              MOVS     r1,#0
0004b2  2052              MOVS     r0,#0x52
0004b4  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15629  			DISPLAY_DISABLE_ENABLE( DISPLAY_MENU_CONNECT, TRUE );	
0004b8  2101              MOVS     r1,#1
0004ba  2053              MOVS     r0,#0x53
0004bc  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15630  			
;;;15631  			DISPLAY_UpdateValue(DISPLAY_MENU_CONNECT, 1);
0004c0  e8bd47f0          POP      {r4-r10,lr}
0004c4  2101              MOVS     r1,#1
0004c6  2053              MOVS     r0,#0x53
0004c8  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L334.1228|
;;;15632  
;;;15633  			break;
;;;15634  
;;;15635  		default:
;;;15636  			break;
;;;15637  	}
;;;15638  }
0004cc  e8bd87f0          POP      {r4-r10,pc}
;;;15639  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL2ClearDataGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuL2ClearDataGUI PROC
;;;15684  **********************************************************************/
;;;15685  void DISPLAY_ShowMenuL2ClearDataGUI(BOOL refreshAll, MENU_ID_E id)
000000  b510              PUSH     {r4,lr}
;;;15686  {
000002  460c              MOV      r4,r1
;;;15687  	// 参数判断
;;;15688  	if (id >= MENU_ID_CLEAR_COUNT)
000004  2c02              CMP      r4,#2
000006  d223              BCS      |L335.80|
;;;15689  	{
;;;15690  		return;
;;;15691  	}
;;;15692  
;;;15693  	// 在(0,0)位置显示背景
;;;15694  	if(refreshAll)
000008  b130              CBZ      r0,|L335.24|
;;;15695  	{
;;;15696  		// 恢复所有的值为初始值
;;;15697  		DISPLAY_ResumeValue(DISPLAY_MAX);
00000a  20b3              MOVS     r0,#0xb3
00000c  f7fffffe          BL       DISPLAY_ResumeValue
;;;15698  
;;;15699  		// 更新背景 		
;;;15700  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
000010  2101              MOVS     r1,#1
000012  2007              MOVS     r0,#7
000014  f7fffffe          BL       DISPLAY_UpdateValue
                  |L335.24|
;;;15701  	}
;;;15702  
;;;15703  	// 通用界面显示
;;;15704  	DISPLAY_Update_Title();
000018  f7fffffe          BL       DISPLAY_Update_Title
;;;15705  
;;;15706  	// 主菜单初始状态(默认)
;;;15707  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_TITILE_CLEAR_DATA, 1);
00001c  2101              MOVS     r1,#1
00001e  2083              MOVS     r0,#0x83
000020  f7fffffe          BL       DISPLAY_UpdateValue
;;;15708  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_CLEAR_DISTANCE, 1);
000024  2101              MOVS     r1,#1
000026  2084              MOVS     r0,#0x84
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;15709  //	DISPLAY_UpdateValue(DISPLAY_MENU_L2_CLEAR_PERS_BEST, 0);
;;;15710  //	DISPLAY_UpdateValue(DISPLAY_MENU_L2_FACTORY_RESET, 0);
;;;15711  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_CLEAR_BACK, 0);
00002c  2100              MOVS     r1,#0
00002e  2086              MOVS     r0,#0x86
000030  f7fffffe          BL       DISPLAY_UpdateValue
;;;15712  
;;;15713  	switch (id)
000034  2c00              CMP      r4,#0
000036  d00b              BEQ      |L335.80|
000038  2c01              CMP      r4,#1
00003a  d109              BNE      |L335.80|
;;;15714  	{
;;;15715  		case MENU_ID_CLEAR_TRIP_DISTANCE:
;;;15716  			break;
;;;15717  			
;;;15718  //		case MENU_ID_CLEAR_PERSONAL_BEST:
;;;15719  
;;;15720  //			DISPLAY_UpdateValue(DISPLAY_MENU_L2_CLEAR_DISTANCE, 0);
;;;15721  ////			DISPLAY_UpdateValue(DISPLAY_MENU_L2_CLEAR_PERS_BEST, 1);
;;;15722  //			
;;;15723  //			break;
;;;15724  
;;;15725  //		case MENU_ID_CLEAR_FACTORY_RESET:
;;;15726  //			
;;;15727  //			DISPLAY_UpdateValue(DISPLAY_MENU_L2_CLEAR_DISTANCE, 0);
;;;15728  //			DISPLAY_UpdateValue(DISPLAY_MENU_L2_FACTORY_RESET, 1);
;;;15729  //			
;;;15730  //			break;
;;;15731  
;;;15732  		case MENU_ID_CLEAR_BACK:
;;;15733  
;;;15734  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_CLEAR_DISTANCE, 0);
00003c  2100              MOVS     r1,#0
00003e  2084              MOVS     r0,#0x84
000040  f7fffffe          BL       DISPLAY_UpdateValue
;;;15735  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_CLEAR_BACK, 1);
000044  2101              MOVS     r1,#1
000046  e8bd4010          POP      {r4,lr}
00004a  2086              MOVS     r0,#0x86
00004c  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L335.80|
;;;15736  			
;;;15737  			break;
;;;15738  
;;;15739  		default:
;;;15740  			break;
;;;15741  	}
;;;15742  
;;;15743  }
000050  bd10              POP      {r4,pc}
;;;15744  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL2ConnectGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuL2ConnectGUI PROC
;;;15651  **********************************************************************/
;;;15652  void DISPLAY_ShowMenuL2ConnectGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;15653  {
;;;15654  	// 在(0,0)位置显示背景
;;;15655  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L336.20|
;;;15656  	{
;;;15657  		// 恢复所有的值为初始值
;;;15658  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;15659  
;;;15660  		// 更新背景 		
;;;15661  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L336.20|
;;;15662  	}
;;;15663  
;;;15664  	// 通用界面显示
;;;15665  	DISPLAY_Update_Title();
000014  f7fffffe          BL       DISPLAY_Update_Title
;;;15666  
;;;15667  	// 主菜单初始状态(默认)
;;;15668  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_QRCODE, 1);
000018  2101              MOVS     r1,#1
00001a  2081              MOVS     r0,#0x81
00001c  f7fffffe          BL       DISPLAY_UpdateValue
;;;15669  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_BACK, 1);
000020  2101              MOVS     r1,#1
000022  2082              MOVS     r0,#0x82
000024  f85deb04          POP      {lr}
000028  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15670  
;;;15671  }
;;;15672  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL2SetGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuL2SetGUI PROC
;;;15756  **********************************************************************/
;;;15757  void DISPLAY_ShowMenuL2SetGUI(BOOL refreshAll, MENU_ID_E id)
000000  b510              PUSH     {r4,lr}
;;;15758  {
000002  460c              MOV      r4,r1
;;;15759  	// 参数判断
;;;15760  	if (id >= MENU_ID_SETUP_COUNT)
000004  2c05              CMP      r4,#5
000006  d252              BCS      |L337.174|
;;;15761  	{
;;;15762  		return;
;;;15763  	}
;;;15764  
;;;15765  	// 在(0,0)位置显示背景
;;;15766  	if(refreshAll)
000008  b130              CBZ      r0,|L337.24|
;;;15767  	{
;;;15768  		// 恢复所有的值为初始值
;;;15769  		DISPLAY_ResumeValue(DISPLAY_MAX);
00000a  20b3              MOVS     r0,#0xb3
00000c  f7fffffe          BL       DISPLAY_ResumeValue
;;;15770  
;;;15771  		// 更新背景 		
;;;15772  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
000010  2101              MOVS     r1,#1
000012  2007              MOVS     r0,#7
000014  f7fffffe          BL       DISPLAY_UpdateValue
                  |L337.24|
;;;15773  	}
;;;15774  
;;;15775  	// 通用界面显示
;;;15776  	DISPLAY_Update_Title();
000018  f7fffffe          BL       DISPLAY_Update_Title
;;;15777  
;;;15778  	// 主菜单初始状态(默认)
;;;15779  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_TITILE_SETUP, 1);
00001c  2101              MOVS     r1,#1
00001e  2087              MOVS     r0,#0x87
000020  f7fffffe          BL       DISPLAY_UpdateValue
;;;15780  	//DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_DATE_TIME, 1);
;;;15781  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_AUTOLIGHT, 1);
000024  2101              MOVS     r1,#1
000026  2088              MOVS     r0,#0x88
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;15782  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_UNIT, 0);
00002c  2100              MOVS     r1,#0
00002e  2089              MOVS     r0,#0x89
000030  f7fffffe          BL       DISPLAY_UpdateValue
;;;15783  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_LIGTH, 0);
000034  2100              MOVS     r1,#0
000036  208a              MOVS     r0,#0x8a
000038  f7fffffe          BL       DISPLAY_UpdateValue
;;;15784  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_POWER_OFF, 0);
00003c  2100              MOVS     r1,#0
00003e  208b              MOVS     r0,#0x8b
000040  f7fffffe          BL       DISPLAY_UpdateValue
;;;15785  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_BACK, 0);
000044  2100              MOVS     r1,#0
000046  208c              MOVS     r0,#0x8c
000048  f7fffffe          BL       DISPLAY_UpdateValue
;;;15786  
;;;15787  	switch (id)
00004c  2c03              CMP      r4,#3
00004e  d024              BEQ      |L337.154|
000050  dc0d              BGT      |L337.110|
000052  2c01              CMP      r4,#1
000054  d017              BEQ      |L337.134|
000056  2c02              CMP      r4,#2
000058  d129              BNE      |L337.174|
;;;15788  	{
;;;15789  //		case MENU_ID_SETUP_SET_DATE_TIME:
;;;15790  //			break;
;;;15791  
;;;15792  		case DISPLAY_MENU_L2_SET_AUTOLIGHT:
;;;15793  
;;;15794  			break;
;;;15795  			
;;;15796  		case MENU_ID_SETUP_SET_UNIT:
;;;15797  
;;;15798  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_AUTOLIGHT, 0);
;;;15799  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_UNIT, 1);
;;;15800  			
;;;15801  			break;
;;;15802  
;;;15803  		case MENU_ID_SETUP_SET_BRIGHTNESS:
;;;15804  			
;;;15805  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_AUTOLIGHT, 0);
00005a  2100              MOVS     r1,#0
00005c  2088              MOVS     r0,#0x88
00005e  f7fffffe          BL       DISPLAY_UpdateValue
;;;15806  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_LIGTH, 1);
000062  2101              MOVS     r1,#1
000064  e8bd4010          POP      {r4,lr}
000068  208a              MOVS     r0,#0x8a
00006a  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L337.110|
00006e  2c04              CMP      r4,#4                 ;15787
000070  d11d              BNE      |L337.174|
;;;15807  			
;;;15808  			break;
;;;15809  
;;;15810  		case MENU_ID_SETUP_AUTO_POWER_OFF:
;;;15811  
;;;15812  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_AUTOLIGHT, 0);
;;;15813  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_POWER_OFF, 1);
;;;15814  			
;;;15815  			break;
;;;15816  
;;;15817  		case MENU_ID_SETUP_BACK:
;;;15818  
;;;15819  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_AUTOLIGHT, 0);
000072  2100              MOVS     r1,#0
000074  2088              MOVS     r0,#0x88
000076  f7fffffe          BL       DISPLAY_UpdateValue
;;;15820  			DISPLAY_UpdateValue(DISPLAY_MENU_L2_SET_BACK, 1);
00007a  2101              MOVS     r1,#1
00007c  e8bd4010          POP      {r4,lr}
000080  208c              MOVS     r0,#0x8c
000082  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L337.134|
000086  2100              MOVS     r1,#0                 ;15798
000088  2088              MOVS     r0,#0x88              ;15798
00008a  f7fffffe          BL       DISPLAY_UpdateValue
00008e  2101              MOVS     r1,#1                 ;15799
000090  e8bd4010          POP      {r4,lr}               ;15799
000094  2089              MOVS     r0,#0x89              ;15799
000096  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L337.154|
00009a  2100              MOVS     r1,#0                 ;15812
00009c  2088              MOVS     r0,#0x88              ;15812
00009e  f7fffffe          BL       DISPLAY_UpdateValue
0000a2  2101              MOVS     r1,#1                 ;15813
0000a4  e8bd4010          POP      {r4,lr}               ;15813
0000a8  208b              MOVS     r0,#0x8b              ;15813
0000aa  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L337.174|
;;;15821  			
;;;15822  			break;
;;;15823  
;;;15824  		default:
;;;15825  			break;
;;;15826  	}
;;;15827  
;;;15828  }
0000ae  bd10              POP      {r4,pc}
;;;15829  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL2SysInfoGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuL2SysInfoGUI PROC
;;;15841  **********************************************************************/
;;;15842  void DISPLAY_ShowMenuL2SysInfoGUI(BOOL refreshAll)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;15843  {
000004  4606              MOV      r6,r0
;;;15844  	uint16 speedLimit = (uint16)(PARAM_GetSpeedLimit()/10);
000006  f7fffffe          BL       PARAM_GetSpeedLimit
00000a  210a              MOVS     r1,#0xa
00000c  fbb0f7f1          UDIV     r7,r0,r1
;;;15845  	UNIT_E unit = PARAM_GetUnit();
000010  4c14              LDR      r4,|L338.100|
000012  f8945319          LDRB     r5,[r4,#0x319]  ; paramCB
;;;15846  
;;;15847  	// 显示背景
;;;15848  	if(refreshAll)
000016  b136              CBZ      r6,|L338.38|
;;;15849  	{
;;;15850  		// 恢复所有的值为初始值
;;;15851  		DISPLAY_ResumeValue(DISPLAY_MAX);
000018  20b3              MOVS     r0,#0xb3
00001a  f7fffffe          BL       DISPLAY_ResumeValue
;;;15852  
;;;15853  		// 更新背景 		
;;;15854  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00001e  2101              MOVS     r1,#1
000020  2007              MOVS     r0,#7
000022  f7fffffe          BL       DISPLAY_UpdateValue
                  |L338.38|
;;;15855  	}
;;;15856  
;;;15857  	// 通用界面显示
;;;15858  	DISPLAY_Update_Title();
000026  f7fffffe          BL       DISPLAY_Update_Title
;;;15859  
;;;15860  	// 主菜单初始状态(默认)
;;;15861  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_TITILE_SYS_INFO, 1);
00002a  2101              MOVS     r1,#1
00002c  208d              MOVS     r0,#0x8d
00002e  f7fffffe          BL       DISPLAY_UpdateValue
;;;15862  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_WHEEL_SIZE,  PARAM_GetNewWheelSizeInch());
000032  f8b412b6          LDRH     r1,[r4,#0x2b6]  ; paramCB
000036  208e              MOVS     r0,#0x8e
000038  f7fffffe          BL       DISPLAY_UpdateValue
;;;15863  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_SPEED_LIMIT, speedLimit);
00003c  4639              MOV      r1,r7
00003e  208f              MOVS     r0,#0x8f
000040  f7fffffe          BL       DISPLAY_UpdateValue
;;;15864  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_SPEED_LIMIT_UNIT, unit);
000044  4629              MOV      r1,r5
000046  2090              MOVS     r0,#0x90
000048  f7fffffe          BL       DISPLAY_UpdateValue
;;;15865  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_SYSTEM_BACK, 1);
00004c  2101              MOVS     r1,#1
00004e  2092              MOVS     r0,#0x92
000050  f7fffffe          BL       DISPLAY_UpdateValue
;;;15866  	DISPLAY_UpdateValue(DISPLAY_MENU_L2_FW_VERSION, PARAM_GetFWVersion());
000054  f8d4126c          LDR      r1,[r4,#0x26c]  ; paramCB
000058  e8bd41f0          POP      {r4-r8,lr}
00005c  2091              MOVS     r0,#0x91
00005e  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15867  }
;;;15868  
                          ENDP

000062  0000              DCW      0x0000
                  |L338.100|
                          DCD      paramCB

                          AREA ||i.DISPLAY_ShowMenuL3ClearPersBestGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuL3ClearPersBestGUI PROC
;;;15937  **********************************************************************/
;;;15938  void DISPLAY_ShowMenuL3ClearPersBestGUI(BOOL refreshAll, MENU_ID_E id)
000000  b510              PUSH     {r4,lr}
;;;15939  {
000002  460c              MOV      r4,r1
;;;15940  	// 参数判断
;;;15941  	if (id >= MENU_ID_YES_NO_COUNT )
000004  2c02              CMP      r4,#2
000006  d221              BCS      |L339.76|
;;;15942  	{
;;;15943  		return;
;;;15944  	}
;;;15945  
;;;15946  	// 在(0,0)位置显示背景
;;;15947  	if(refreshAll)
000008  b130              CBZ      r0,|L339.24|
;;;15948  	{
;;;15949  		// 恢复所有的值为初始值
;;;15950  		DISPLAY_ResumeValue(DISPLAY_MAX);
00000a  20b3              MOVS     r0,#0xb3
00000c  f7fffffe          BL       DISPLAY_ResumeValue
;;;15951  
;;;15952  		// 更新背景 		
;;;15953  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
000010  2101              MOVS     r1,#1
000012  2007              MOVS     r0,#7
000014  f7fffffe          BL       DISPLAY_UpdateValue
                  |L339.24|
;;;15954  	}
;;;15955  
;;;15956  	// 通用界面显示
;;;15957  	DISPLAY_Update_Title();
000018  f7fffffe          BL       DISPLAY_Update_Title
;;;15958  
;;;15959  	// 主菜单初始状态(默认)
;;;15960  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_CLEAR_PERS_BEST, 1);
00001c  2101              MOVS     r1,#1
00001e  2094              MOVS     r0,#0x94
000020  f7fffffe          BL       DISPLAY_UpdateValue
;;;15961  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_YES, 0);
000024  2100              MOVS     r1,#0
000026  2096              MOVS     r0,#0x96
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;15962  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_NO, 1);
00002c  2101              MOVS     r1,#1
00002e  2097              MOVS     r0,#0x97
000030  f7fffffe          BL       DISPLAY_UpdateValue
;;;15963  
;;;15964  	switch (id)
000034  2c00              CMP      r4,#0
000036  d109              BNE      |L339.76|
;;;15965  	{
;;;15966  		case MENU_ID_YES:
;;;15967  			
;;;15968  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_NO, 0);
000038  2100              MOVS     r1,#0
00003a  2097              MOVS     r0,#0x97
00003c  f7fffffe          BL       DISPLAY_UpdateValue
;;;15969  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_YES, 1);	
000040  2101              MOVS     r1,#1
000042  e8bd4010          POP      {r4,lr}
000046  2096              MOVS     r0,#0x96
000048  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L339.76|
;;;15970  			
;;;15971  			break;
;;;15972  			
;;;15973  		case MENU_ID_NO:			
;;;15974  			break;
;;;15975  
;;;15976  		default:
;;;15977  			break;
;;;15978  	}
;;;15979  
;;;15980  }
00004c  bd10              POP      {r4,pc}
;;;15981  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL3ClearTripGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuL3ClearTripGUI PROC
;;;15880  **********************************************************************/
;;;15881  void DISPLAY_ShowMenuL3ClearTripGUI(BOOL refreshAll, MENU_ID_E id)
000000  b510              PUSH     {r4,lr}
;;;15882  {
000002  460c              MOV      r4,r1
;;;15883  	// 参数判断
;;;15884  	if (id >= MENU_ID_YES_NO_COUNT)
000004  2c02              CMP      r4,#2
000006  d225              BCS      |L340.84|
;;;15885  	{
;;;15886  		return;
;;;15887  	}
;;;15888  
;;;15889  	// 在(0,0)位置显示背景
;;;15890  	if(refreshAll)
000008  b130              CBZ      r0,|L340.24|
;;;15891  	{
;;;15892  		// 恢复所有的值为初始值
;;;15893  		DISPLAY_ResumeValue(DISPLAY_MAX);
00000a  20b3              MOVS     r0,#0xb3
00000c  f7fffffe          BL       DISPLAY_ResumeValue
;;;15894  
;;;15895  		// 更新背景 		
;;;15896  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
000010  2101              MOVS     r1,#1
000012  2007              MOVS     r0,#7
000014  f7fffffe          BL       DISPLAY_UpdateValue
                  |L340.24|
;;;15897  	}
;;;15898  
;;;15899  	// 通用界面显示
;;;15900  	DISPLAY_Update_Title();
000018  f7fffffe          BL       DISPLAY_Update_Title
;;;15901  
;;;15902  	// 主菜单初始状态(默认)
;;;15903  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_CLEAR_TRIP, 1);
00001c  2101              MOVS     r1,#1
00001e  2093              MOVS     r0,#0x93
000020  f7fffffe          BL       DISPLAY_UpdateValue
;;;15904  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_YES, 0);
000024  2100              MOVS     r1,#0
000026  2096              MOVS     r0,#0x96
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;15905  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_NO, 1);
00002c  2101              MOVS     r1,#1
00002e  2097              MOVS     r0,#0x97
000030  f7fffffe          BL       DISPLAY_UpdateValue
;;;15906  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_HINT_CLEAR_TRIP, 1);
000034  2101              MOVS     r1,#1
000036  2098              MOVS     r0,#0x98
000038  f7fffffe          BL       DISPLAY_UpdateValue
;;;15907  
;;;15908  	switch (id)
00003c  2c00              CMP      r4,#0
00003e  d109              BNE      |L340.84|
;;;15909  	{
;;;15910  		case MENU_ID_YES:
;;;15911  			
;;;15912  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_NO, 0);
000040  2100              MOVS     r1,#0
000042  2097              MOVS     r0,#0x97
000044  f7fffffe          BL       DISPLAY_UpdateValue
;;;15913  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_YES, 1);	
000048  2101              MOVS     r1,#1
00004a  e8bd4010          POP      {r4,lr}
00004e  2096              MOVS     r0,#0x96
000050  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L340.84|
;;;15914  			
;;;15915  			break;
;;;15916  			
;;;15917  		case MENU_ID_NO:			
;;;15918  			break;
;;;15919  
;;;15920  		default:
;;;15921  			break;
;;;15922  	}
;;;15923  	
;;;15924  }
000054  bd10              POP      {r4,pc}
;;;15925  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL3FactoryResetGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuL3FactoryResetGUI PROC
;;;15993  **********************************************************************/
;;;15994  void DISPLAY_ShowMenuL3FactoryResetGUI(BOOL refreshAll, MENU_ID_E id)
000000  b510              PUSH     {r4,lr}
;;;15995  {
000002  460c              MOV      r4,r1
;;;15996  	// 参数判断
;;;15997  	if (id >= MENU_ID_YES_NO_COUNT)
000004  2c02              CMP      r4,#2
000006  d21d              BCS      |L341.68|
;;;15998  	{
;;;15999  		return;
;;;16000  	}
;;;16001  
;;;16002  	// 在(0,0)位置显示背景
;;;16003  	if(refreshAll)
000008  b110              CBZ      r0,|L341.16|
;;;16004  	{
;;;16005  		// 恢复所有的值为初始值
;;;16006  		DISPLAY_ResumeValue(DISPLAY_MAX);
00000a  20b3              MOVS     r0,#0xb3
00000c  f7fffffe          BL       DISPLAY_ResumeValue
                  |L341.16|
;;;16007  	}
;;;16008  
;;;16009  	// 通用界面显示
;;;16010  	DISPLAY_Update_Title();
000010  f7fffffe          BL       DISPLAY_Update_Title
;;;16011  
;;;16012  	// 主菜单初始状态(默认)
;;;16013  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_FACTORY_RESET, 1);
000014  2101              MOVS     r1,#1
000016  2095              MOVS     r0,#0x95
000018  f7fffffe          BL       DISPLAY_UpdateValue
;;;16014  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_YES, 0);
00001c  2100              MOVS     r1,#0
00001e  2096              MOVS     r0,#0x96
000020  f7fffffe          BL       DISPLAY_UpdateValue
;;;16015  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_NO, 1);
000024  2101              MOVS     r1,#1
000026  2097              MOVS     r0,#0x97
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;16016  
;;;16017  	switch (id)
00002c  2c00              CMP      r4,#0
00002e  d109              BNE      |L341.68|
;;;16018  	{
;;;16019  		case MENU_ID_YES:
;;;16020  			
;;;16021  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_NO, 0);
000030  2100              MOVS     r1,#0
000032  2097              MOVS     r0,#0x97
000034  f7fffffe          BL       DISPLAY_UpdateValue
;;;16022  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_YES, 1);	
000038  2101              MOVS     r1,#1
00003a  e8bd4010          POP      {r4,lr}
00003e  2096              MOVS     r0,#0x96
000040  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L341.68|
;;;16023  			
;;;16024  			break;
;;;16025  			
;;;16026  		case MENU_ID_NO:			
;;;16027  			break;
;;;16028  
;;;16029  		default:
;;;16030  			break;
;;;16031  	}
;;;16032  
;;;16033  }
000044  bd10              POP      {r4,pc}
;;;16034  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL3PowerOffGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuL3PowerOffGUI PROC
;;;16251  **********************************************************************/
;;;16252  void DISPLAY_ShowMenuL3PowerOffGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;16253  {
;;;16254  	// 在(0,0)位置显示背景
;;;16255  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L342.20|
;;;16256  	{
;;;16257  		// 恢复所有的值为初始值
;;;16258  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;16259  
;;;16260  		// 更新背景 		
;;;16261  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L342.20|
;;;16262  	}
;;;16263  
;;;16264  	// 通用界面显示
;;;16265  	DISPLAY_Update_Title();
000014  f7fffffe          BL       DISPLAY_Update_Title
;;;16266  
;;;16267  	// 菜单初始状态(默认)
;;;16268  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_SET_POWER_OFF, 1);
000018  2101              MOVS     r1,#1
00001a  20a9              MOVS     r0,#0xa9
00001c  f7fffffe          BL       DISPLAY_UpdateValue
;;;16269  	DISPLAY_UpdateValue(DISPLAY_MENU_PLUS, 1);
000020  2101              MOVS     r1,#1
000022  209e              MOVS     r0,#0x9e
000024  f7fffffe          BL       DISPLAY_UpdateValue
;;;16270  	DISPLAY_UpdateValue(DISPLAY_MENU_MINUS, 1);
000028  2101              MOVS     r1,#1
00002a  209f              MOVS     r0,#0x9f
00002c  f7fffffe          BL       DISPLAY_UpdateValue
;;;16271  	DISPLAY_UpdateValue(DISPLAY_MENU_FINISH, 1);
000030  2101              MOVS     r1,#1
000032  20a0              MOVS     r0,#0xa0
000034  f7fffffe          BL       DISPLAY_UpdateValue
;;;16272  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_POWER_OFF, displayStateCB.menu.setup.powerOffTime);
000038  4805              LDR      r0,|L342.80|
00003a  f8901b58          LDRB     r1,[r0,#0xb58]  ; displayStateCB
00003e  20aa              MOVS     r0,#0xaa
000040  f7fffffe          BL       DISPLAY_UpdateValue
;;;16273  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_POWER_OFF_MIN,1);
000044  2101              MOVS     r1,#1
000046  20ab              MOVS     r0,#0xab
000048  f85deb04          POP      {lr}
00004c  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16274  
;;;16275  }
;;;16276  
                          ENDP

                  |L342.80|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenuL3SetAutoLightGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuL3SetAutoLightGUI PROC
;;;16103  **********************************************************************/
;;;16104  void DISPLAY_ShowMenuL3SetAutoLightGUI(BOOL refreshAll, MENU_ID_E id)
000000  b510              PUSH     {r4,lr}
;;;16105  {
000002  460c              MOV      r4,r1
;;;16106  	// 参数判断
;;;16107  	if (id >= MENU_ID_YES_NO_COUNT)
000004  2c02              CMP      r4,#2
000006  d223              BCS      |L343.80|
;;;16108  	{
;;;16109  		return;
;;;16110  	}
;;;16111  
;;;16112  	// 在(0,0)位置显示背景
;;;16113  	if(refreshAll)
000008  b130              CBZ      r0,|L343.24|
;;;16114  	{
;;;16115  		// 恢复所有的值为初始值
;;;16116  		DISPLAY_ResumeValue(DISPLAY_MAX);
00000a  20b3              MOVS     r0,#0xb3
00000c  f7fffffe          BL       DISPLAY_ResumeValue
;;;16117  
;;;16118  		// 更新背景 		
;;;16119  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
000010  2101              MOVS     r1,#1
000012  2007              MOVS     r0,#7
000014  f7fffffe          BL       DISPLAY_UpdateValue
                  |L343.24|
;;;16120  	}
;;;16121  
;;;16122  	// 通用界面显示
;;;16123  	DISPLAY_Update_Title();
000018  f7fffffe          BL       DISPLAY_Update_Title
;;;16124  
;;;16125  	// 主菜单初始状态(默认)
;;;16126  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_SET_AUTO_LIGHT, 1);
00001c  2101              MOVS     r1,#1
00001e  20a1              MOVS     r0,#0xa1
000020  f7fffffe          BL       DISPLAY_UpdateValue
;;;16127  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_SET_YES, 1);
000024  2101              MOVS     r1,#1
000026  20a2              MOVS     r0,#0xa2
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;16128  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_SET_NO, 0);
00002c  2100              MOVS     r1,#0
00002e  20a3              MOVS     r0,#0xa3
000030  f7fffffe          BL       DISPLAY_UpdateValue
;;;16129  
;;;16130  	switch (id)
000034  2c00              CMP      r4,#0
000036  d00b              BEQ      |L343.80|
000038  2c01              CMP      r4,#1
00003a  d109              BNE      |L343.80|
;;;16131  	{
;;;16132  		case MENU_ID_YES:	
;;;16133  			
;;;16134  			break;
;;;16135  			
;;;16136  		case MENU_ID_NO:		
;;;16137  			
;;;16138  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_SET_YES, 0);
00003c  2100              MOVS     r1,#0
00003e  20a2              MOVS     r0,#0xa2
000040  f7fffffe          BL       DISPLAY_UpdateValue
;;;16139  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_SET_NO, 1);
000044  2101              MOVS     r1,#1
000046  e8bd4010          POP      {r4,lr}
00004a  20a3              MOVS     r0,#0xa3
00004c  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L343.80|
;;;16140  			
;;;16141  			break;
;;;16142  
;;;16143  		default:
;;;16144  			break;
;;;16145  	}
;;;16146  }
000050  bd10              POP      {r4,pc}
;;;16147  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL3SetDateTimeGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuL3SetDateTimeGUI PROC
;;;16047  **********************************************************************/
;;;16048  void DISPLAY_ShowMenuL3SetDateTimeGUI(BOOL refreshAll, MENU_ID_E id)
000000  b510              PUSH     {r4,lr}
;;;16049  {
000002  460c              MOV      r4,r1
;;;16050  	// 在(0,0)位置显示背景
;;;16051  	if(refreshAll)
000004  2800              CMP      r0,#0
000006  d006              BEQ      |L344.22|
;;;16052  	{
;;;16053  		// 恢复所有的值为初始值
;;;16054  		DISPLAY_ResumeValue(DISPLAY_MAX);
000008  20b3              MOVS     r0,#0xb3
00000a  f7fffffe          BL       DISPLAY_ResumeValue
;;;16055  
;;;16056  		// 更新背景 		
;;;16057  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000e  2101              MOVS     r1,#1
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       DISPLAY_UpdateValue
                  |L344.22|
;;;16058  	}
;;;16059  
;;;16060  	// 通用界面显示 
;;;16061  	DISPLAY_Update_Title();
000016  f7fffffe          BL       DISPLAY_Update_Title
;;;16062  
;;;16063  	switch (id)
00001a  b18c              CBZ      r4,|L344.64|
00001c  2c01              CMP      r4,#1
00001e  d01d              BEQ      |L344.92|
000020  2c02              CMP      r4,#2
000022  d129              BNE      |L344.120|
;;;16064  	{
;;;16065  		case MENU_ID_DATE:
;;;16066  			
;;;16067  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_DATE, 1);
;;;16068  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_TIME, 0);
;;;16069  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_BACK, 0);
;;;16070  			
;;;16071  			break;
;;;16072  
;;;16073  		case MENU_ID_TIME:
;;;16074  			
;;;16075  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_DATE, 0);
;;;16076  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_TIME, 1);
;;;16077  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_BACK, 0);
;;;16078  			
;;;16079  			break;
;;;16080  
;;;16081  		case MENU_ID_DATE_TIME_BACK:
;;;16082  			
;;;16083  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_DATE, 0);
000024  2100              MOVS     r1,#0
000026  209c              MOVS     r0,#0x9c
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;16084  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_TIME, 0);
00002c  2100              MOVS     r1,#0
00002e  209b              MOVS     r0,#0x9b
000030  f7fffffe          BL       DISPLAY_UpdateValue
;;;16085  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_BACK, 1);
000034  2101              MOVS     r1,#1
000036  e8bd4010          POP      {r4,lr}
00003a  209d              MOVS     r0,#0x9d
00003c  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L344.64|
000040  2101              MOVS     r1,#1                 ;16067
000042  209c              MOVS     r0,#0x9c              ;16067
000044  f7fffffe          BL       DISPLAY_UpdateValue
000048  2100              MOVS     r1,#0                 ;16068
00004a  209b              MOVS     r0,#0x9b              ;16068
00004c  f7fffffe          BL       DISPLAY_UpdateValue
000050  2100              MOVS     r1,#0                 ;16069
000052  e8bd4010          POP      {r4,lr}               ;16069
000056  209d              MOVS     r0,#0x9d              ;16069
000058  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L344.92|
00005c  2100              MOVS     r1,#0                 ;16075
00005e  209c              MOVS     r0,#0x9c              ;16075
000060  f7fffffe          BL       DISPLAY_UpdateValue
000064  2101              MOVS     r1,#1                 ;16076
000066  209b              MOVS     r0,#0x9b              ;16076
000068  f7fffffe          BL       DISPLAY_UpdateValue
00006c  2100              MOVS     r1,#0                 ;16077
00006e  e8bd4010          POP      {r4,lr}               ;16077
000072  209d              MOVS     r0,#0x9d              ;16077
000074  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L344.120|
;;;16086  			
;;;16087  			break;
;;;16088  
;;;16089  		default:
;;;16090  			break;
;;;16091  
;;;16092  	}
;;;16093  	
;;;16094  }
000078  bd10              POP      {r4,pc}
;;;16095  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL3SetLightGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuL3SetLightGUI PROC
;;;16215  **********************************************************************/
;;;16216  void DISPLAY_ShowMenuL3SetLightGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;16217  {
;;;16218  	// 在(0,0)位置显示背景
;;;16219  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L345.20|
;;;16220  	{
;;;16221  		// 恢复所有的值为初始值
;;;16222  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;16223  
;;;16224  		// 更新背景 		
;;;16225  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L345.20|
;;;16226  	}
;;;16227  
;;;16228  	// 通用界面显示
;;;16229  	DISPLAY_Update_Title();
000014  f7fffffe          BL       DISPLAY_Update_Title
;;;16230  
;;;16231  	// 菜单初始状态(默认)
;;;16232  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_SET_LIGHT, 1);
000018  2101              MOVS     r1,#1
00001a  20a7              MOVS     r0,#0xa7
00001c  f7fffffe          BL       DISPLAY_UpdateValue
;;;16233  	DISPLAY_UpdateValue(DISPLAY_MENU_PLUS, 1);
000020  2101              MOVS     r1,#1
000022  209e              MOVS     r0,#0x9e
000024  f7fffffe          BL       DISPLAY_UpdateValue
;;;16234  	DISPLAY_UpdateValue(DISPLAY_MENU_MINUS, 1);
000028  2101              MOVS     r1,#1
00002a  209f              MOVS     r0,#0x9f
00002c  f7fffffe          BL       DISPLAY_UpdateValue
;;;16235  	DISPLAY_UpdateValue(DISPLAY_MENU_FINISH, 1);
000030  2101              MOVS     r1,#1
000032  20a0              MOVS     r0,#0xa0
000034  f7fffffe          BL       DISPLAY_UpdateValue
;;;16236  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_LIGHT_LEVEL, displayStateCB.menu.setup.brightness);
000038  4803              LDR      r0,|L345.72|
00003a  f8901b57          LDRB     r1,[r0,#0xb57]  ; displayStateCB
00003e  20a8              MOVS     r0,#0xa8
000040  f85deb04          POP      {lr}
000044  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16237  	
;;;16238  }
;;;16239  
                          ENDP

                  |L345.72|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenuL3SetUnitGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuL3SetUnitGUI PROC
;;;16160  **********************************************************************/
;;;16161  void DISPLAY_ShowMenuL3SetUnitGUI(BOOL refreshAll, MENU_ID_E id)
000000  b510              PUSH     {r4,lr}
;;;16162  {
000002  460c              MOV      r4,r1
;;;16163  	// 参数判断
;;;16164  	if (id >= MENU_ID_UNIT_COUNT)
000004  2c02              CMP      r4,#2
000006  d223              BCS      |L346.80|
;;;16165  	{
;;;16166  		return;
;;;16167  	}
;;;16168  
;;;16169  	// 在(0,0)位置显示背景
;;;16170  	if(refreshAll)
000008  b130              CBZ      r0,|L346.24|
;;;16171  	{
;;;16172  		// 恢复所有的值为初始值
;;;16173  		DISPLAY_ResumeValue(DISPLAY_MAX);
00000a  20b3              MOVS     r0,#0xb3
00000c  f7fffffe          BL       DISPLAY_ResumeValue
;;;16174  
;;;16175  		// 更新背景 		
;;;16176  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
000010  2101              MOVS     r1,#1
000012  2007              MOVS     r0,#7
000014  f7fffffe          BL       DISPLAY_UpdateValue
                  |L346.24|
;;;16177  	}
;;;16178  
;;;16179  	// 通用界面显示
;;;16180  	DISPLAY_Update_Title();
000018  f7fffffe          BL       DISPLAY_Update_Title
;;;16181  
;;;16182  	// 主菜单初始状态(默认)
;;;16183  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_TITILE_SET_UNIT, 1);
00001c  2101              MOVS     r1,#1
00001e  20a4              MOVS     r0,#0xa4
000020  f7fffffe          BL       DISPLAY_UpdateValue
;;;16184  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_UNIT_METRIC, 1);
000024  2101              MOVS     r1,#1
000026  20a5              MOVS     r0,#0xa5
000028  f7fffffe          BL       DISPLAY_UpdateValue
;;;16185  	DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_UNIT_INCH, 0);
00002c  2100              MOVS     r1,#0
00002e  20a6              MOVS     r0,#0xa6
000030  f7fffffe          BL       DISPLAY_UpdateValue
;;;16186  
;;;16187  	switch (id)
000034  2c00              CMP      r4,#0
000036  d00b              BEQ      |L346.80|
000038  2c01              CMP      r4,#1
00003a  d109              BNE      |L346.80|
;;;16188  	{
;;;16189  		case MENU_ID_UNIT_METRIC:			
;;;16190  			break;
;;;16191  			
;;;16192  		case MENU_ID_UNIT_INCH:		
;;;16193  			
;;;16194  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_UNIT_METRIC, 0);
00003c  2100              MOVS     r1,#0
00003e  20a5              MOVS     r0,#0xa5
000040  f7fffffe          BL       DISPLAY_UpdateValue
;;;16195  			DISPLAY_UpdateValue(DISPLAY_MENU_L3_SET_UNIT_INCH, 1);
000044  2101              MOVS     r1,#1
000046  e8bd4010          POP      {r4,lr}
00004a  20a6              MOVS     r0,#0xa6
00004c  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L346.80|
;;;16196  			
;;;16197  			break;
;;;16198  
;;;16199  		default:
;;;16200  			break;
;;;16201  	}
;;;16202  }
000050  bd10              POP      {r4,pc}
;;;16203  
                          ENDP


                          AREA ||i.DISPLAY_ShowMenuL4SetDateGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuL4SetDateGUI PROC
;;;16288  **********************************************************************/
;;;16289  void DISPLAY_ShowMenuL4SetDateGUI(BOOL refreshAll)
000000  b510              PUSH     {r4,lr}
;;;16290  {
;;;16291  	uint32 usSetDate = (((uint32)displayStateCB.menu.setup.date.year << 16) 
000002  4a14              LDR      r2,|L347.84|
000004  8811              LDRH     r1,[r2,#0]  ; displayStateCB
000006  7893              LDRB     r3,[r2,#2]  ; displayStateCB
000008  0409              LSLS     r1,r1,#16
00000a  ea412403          ORR      r4,r1,r3,LSL #8
00000e  78d1              LDRB     r1,[r2,#3]  ; displayStateCB
000010  430c              ORRS     r4,r4,r1
;;;16292  						| ((uint32)displayStateCB.menu.setup.date.month << 8)
;;;16293  						| ((uint32)displayStateCB.menu.setup.date.day));
;;;16294  
;;;16295  	// 在(0,0)位置显示背景
;;;16296  	if(refreshAll)
000012  2800              CMP      r0,#0
000014  d006              BEQ      |L347.36|
;;;16297  	{
;;;16298  		// 恢复所有的值为初始值
;;;16299  		DISPLAY_ResumeValue(DISPLAY_MAX);
000016  20b3              MOVS     r0,#0xb3
000018  f7fffffe          BL       DISPLAY_ResumeValue
;;;16300  
;;;16301  		// 更新背景 		
;;;16302  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00001c  2101              MOVS     r1,#1
00001e  2007              MOVS     r0,#7
000020  f7fffffe          BL       DISPLAY_UpdateValue
                  |L347.36|
;;;16303  	}
;;;16304  
;;;16305  	// 通用界面显示 
;;;16306  	DISPLAY_Update_Title();
000024  f7fffffe          BL       DISPLAY_Update_Title
;;;16307  
;;;16308  	// 主菜单初始状态(默认)
;;;16309  	DISPLAY_UpdateValue(DISPLAY_MENU_L4_TITILE_DATE, 1);
000028  2101              MOVS     r1,#1
00002a  20ac              MOVS     r0,#0xac
00002c  f7fffffe          BL       DISPLAY_UpdateValue
;;;16310  	DISPLAY_UpdateValue(DISPLAY_MENU_L4_DATE_PLUS, 1);
000030  2101              MOVS     r1,#1
000032  20ad              MOVS     r0,#0xad
000034  f7fffffe          BL       DISPLAY_UpdateValue
;;;16311  	DISPLAY_UpdateValue(DISPLAY_MENU_L4_DATE_MINUS, 1);
000038  2101              MOVS     r1,#1
00003a  20ae              MOVS     r0,#0xae
00003c  f7fffffe          BL       DISPLAY_UpdateValue
;;;16312  	DISPLAY_UpdateValue(DISPLAY_MENU_L4_DATE_FINISH, 1);
000040  2101              MOVS     r1,#1
000042  20af              MOVS     r0,#0xaf
000044  f7fffffe          BL       DISPLAY_UpdateValue
;;;16313  	DISPLAY_UpdateValue(DISPLAY_MENU_L4_DATE, usSetDate);
000048  4621              MOV      r1,r4
00004a  e8bd4010          POP      {r4,lr}
00004e  20b0              MOVS     r0,#0xb0
000050  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16314  
;;;16315  }
;;;16316  
                          ENDP

                  |L347.84|
                          DCD      ||.bss||+0xb5a

                          AREA ||i.DISPLAY_ShowMenuL4SetTimeGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuL4SetTimeGUI PROC
;;;16328  **********************************************************************/
;;;16329  void DISPLAY_ShowMenuL4SetTimeGUI(BOOL refreshAll)
000000  b510              PUSH     {r4,lr}
;;;16330  {
;;;16331  	uint16 usSetTime = (((uint16)displayStateCB.menu.setup.rtc.hour << 8) | (uint16)displayStateCB.menu.setup.rtc.minute);
000002  4914              LDR      r1,|L348.84|
000004  f8912b61          LDRB     r2,[r1,#0xb61]  ; displayStateCB
000008  f8911b60          LDRB     r1,[r1,#0xb60]  ; displayStateCB
00000c  ea422401          ORR      r4,r2,r1,LSL #8
;;;16332  
;;;16333  	// 在(0,0)位置显示背景
;;;16334  	if(refreshAll)
000010  2800              CMP      r0,#0
000012  d006              BEQ      |L348.34|
;;;16335  	{
;;;16336  		// 恢复所有的值为初始值
;;;16337  		DISPLAY_ResumeValue(DISPLAY_MAX);
000014  20b3              MOVS     r0,#0xb3
000016  f7fffffe          BL       DISPLAY_ResumeValue
;;;16338  
;;;16339  		// 更新背景 		
;;;16340  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00001a  2101              MOVS     r1,#1
00001c  2007              MOVS     r0,#7
00001e  f7fffffe          BL       DISPLAY_UpdateValue
                  |L348.34|
;;;16341  	}
;;;16342  
;;;16343  	// 通用界面显示
;;;16344  	DISPLAY_Update_Title();
000022  f7fffffe          BL       DISPLAY_Update_Title
;;;16345  
;;;16346  	// 主菜单初始状态(默认)
;;;16347  	DISPLAY_UpdateValue(DISPLAY_MENU_L4_TITILE_TIME, 1);
000026  2101              MOVS     r1,#1
000028  20b1              MOVS     r0,#0xb1
00002a  f7fffffe          BL       DISPLAY_UpdateValue
;;;16348  	DISPLAY_UpdateValue(DISPLAY_MENU_PLUS, 1);
00002e  2101              MOVS     r1,#1
000030  209e              MOVS     r0,#0x9e
000032  f7fffffe          BL       DISPLAY_UpdateValue
;;;16349  	DISPLAY_UpdateValue(DISPLAY_MENU_MINUS, 1);
000036  2101              MOVS     r1,#1
000038  209f              MOVS     r0,#0x9f
00003a  f7fffffe          BL       DISPLAY_UpdateValue
;;;16350  	DISPLAY_UpdateValue(DISPLAY_MENU_FINISH, 1);
00003e  2101              MOVS     r1,#1
000040  20a0              MOVS     r0,#0xa0
000042  f7fffffe          BL       DISPLAY_UpdateValue
;;;16351  	DISPLAY_UpdateValue(DISPLAY_MENU_L4_TIME, usSetTime);
000046  4621              MOV      r1,r4
000048  e8bd4010          POP      {r4,lr}
00004c  20b2              MOVS     r0,#0xb2
00004e  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16352  
;;;16353  }
;;;16354  
                          ENDP

000052  0000              DCW      0x0000
                  |L348.84|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenuLockGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMenuLockGUI PROC
;;;15132  // 【参数】背景刷新请求，为真时刷新背景
;;;15133  void DISPLAY_ShowMenuLockGUI(BOOL refreshAll)
000000  b510              PUSH     {r4,lr}
;;;15134  {
;;;15135  	// 在(0,0)位置显示背景
;;;15136  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L349.20|
;;;15137  	{
;;;15138  		// 恢复所有的值为初始值
;;;15139  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;15140  
;;;15141  		// 更新背景 		
;;;15142  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L349.20|
;;;15143  	}
;;;15144  
;;;15145  	// 设防时，来电与灯光都默认关闭，背光恢复之前设置
;;;15146  	PARAM_SetLightSwitch(FALSE);
000014  4c0e              LDR      r4,|L349.80|
000016  2000              MOVS     r0,#0
000018  f8840202          STRB     r0,[r4,#0x202]
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       UART_PROTOCOL_SetTxAtOnceRequest
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       UART_PROTOCOL1_SetTxAtOnceRequest
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       UART_PROTOCOL2_SetTxAtOnceRequest
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       UART_PROTOCOL3_SetTxAtOnceRequest
;;;15147  	
;;;15148  	BACK_LIGHT_Start((BACK_LIGHT_LEVEL_E)displayStateCB.menu.setup.brightness);
000034  4807              LDR      r0,|L349.84|
000036  f8900b57          LDRB     r0,[r0,#0xb57]  ; displayStateCB
00003a  f7fffffe          BL       BACK_LIGHT_Start
;;;15149  
;;;15150  	// 通用界面显示
;;;15151  	DISPLAY_Update_Title();
00003e  f7fffffe          BL       DISPLAY_Update_Title
;;;15152  
;;;15153  	// 设防界面
;;;15154  	DISPLAY_UpdateValue(DISPLAY_MENU_LOCKED, PARAM_GetWarningStatus());
000042  f894122d          LDRB     r1,[r4,#0x22d]  ; paramCB
000046  e8bd4010          POP      {r4,lr}
00004a  2044              MOVS     r0,#0x44
00004c  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15155  
;;;15156  }
;;;15157  
                          ENDP

                  |L349.80|
                          DCD      paramCB
                  |L349.84|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_ShowMenuOkGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowMenuOkGUI PROC
;;;15169  **********************************************************************/
;;;15170  void DISPLAY_ShowMenuOkGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;15171  {
;;;15172  	// 在(0,0)位置显示背景
;;;15173  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L350.20|
;;;15174  	{
;;;15175  		// 恢复所有的值为初始值
;;;15176  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
;;;15177  
;;;15178  		// 更新背景 		
;;;15179  		DISPLAY_UpdateValue(DISPLAY_MENU_BG, 1);
00000c  2101              MOVS     r1,#1
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       DISPLAY_UpdateValue
                  |L350.20|
;;;15180  	}
;;;15181  
;;;15182  	// 通用界面显示
;;;15183  	DISPLAY_Update_Title();
000014  f7fffffe          BL       DISPLAY_Update_Title
;;;15184  
;;;15185  	// 设置OK界面
;;;15186  	DISPLAY_UpdateValue(DISPLAY_MENU_OK, 1);
000018  2101              MOVS     r1,#1
00001a  2045              MOVS     r0,#0x45
00001c  f85deb04          POP      {lr}
000020  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15187  }
;;;15188  
                          ENDP


                          AREA ||i.DISPLAY_ShowMonitorGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowMonitorGUI PROC
;;;14945  // 【参数】背景刷新请求，为真时刷新背景
;;;14946  void DISPLAY_ShowMonitorGUI(BOOL refreshAll)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;14947  {
000004  4605              MOV      r5,r0
;;;14948  	uint32 uwTripTime = PARAM_GetTripRidingTime();
000006  4c25              LDR      r4,|L351.156|
000008  f8d4735c          LDR      r7,[r4,#0x35c]  ; paramCB
;;;14949  	uint16 uwTrip = (uint16)(PARAM_GetTrip());
00000c  f7fffffe          BL       PARAM_GetTrip
000010  fa1ff880          UXTH     r8,r0
;;;14950  	uint16 uwUnit = PARAM_GetUnit();
000014  f8949319          LDRB     r9,[r4,#0x319]  ; paramCB
;;;14951  	uint16 uwCalories = PARAM_GetTripCalories();
000018  f8b40354          LDRH     r0,[r4,#0x354]  ; paramCB
00001c  b284              UXTH     r4,r0
;;;14952  	uint32 uwDistance = (uint16)PARAM_GetTotalDistance()/10;	
00001e  f7fffffe          BL       PARAM_GetTotalDistance
000022  b280              UXTH     r0,r0
000024  210a              MOVS     r1,#0xa
000026  fbb0f6f1          UDIV     r6,r0,r1
;;;14953  	
;;;14954  	// 在(0,0)位置显示背景
;;;14955  	if(refreshAll)
00002a  b135              CBZ      r5,|L351.58|
;;;14956  	{
;;;14957  		// 恢复所有的值为初始值
;;;14958  		DISPLAY_ResumeValue(DISPLAY_MAX);
00002c  20b3              MOVS     r0,#0xb3
00002e  f7fffffe          BL       DISPLAY_ResumeValue
;;;14959  
;;;14960  		// 更新背景 		
;;;14961  		DISPLAY_UpdateValue(DISPLAY_MON_BG, 1);
000032  2101              MOVS     r1,#1
000034  2005              MOVS     r0,#5
000036  f7fffffe          BL       DISPLAY_UpdateValue
                  |L351.58|
;;;14962  	}	
;;;14963  
;;;14964  	// 通用界面显示
;;;14965  	DISPLAY_Update_Title();
00003a  f7fffffe          BL       DISPLAY_Update_Title
;;;14966  
;;;14967  	// Monitor界面显示
;;;14968  	DISPLAY_UpdateValue(DISPLAY_MON_CALORIE_TITILE, TRUE);
00003e  2101              MOVS     r1,#1
000040  202d              MOVS     r0,#0x2d
000042  f7fffffe          BL       DISPLAY_UpdateValue
;;;14969  	DISPLAY_UpdateValue(DISPLAY_MON_CALORIE, uwCalories);
000046  4621              MOV      r1,r4
000048  202e              MOVS     r0,#0x2e
00004a  f7fffffe          BL       DISPLAY_UpdateValue
;;;14970  	DISPLAY_UpdateValue(DISPLAY_MON_CALORIE_UNIT, TRUE);
00004e  2101              MOVS     r1,#1
000050  202f              MOVS     r0,#0x2f
000052  f7fffffe          BL       DISPLAY_UpdateValue
;;;14971  	
;;;14972  	DISPLAY_UpdateValue(DISPALY_MON_RIDING_TIME_TITILE, TRUE);
000056  2101              MOVS     r1,#1
000058  202b              MOVS     r0,#0x2b
00005a  f7fffffe          BL       DISPLAY_UpdateValue
;;;14973  	DISPLAY_UpdateValue(DISPALY_MON_RIDING_TIME, uwTripTime);
00005e  4639              MOV      r1,r7
000060  202c              MOVS     r0,#0x2c
000062  f7fffffe          BL       DISPLAY_UpdateValue
;;;14974  
;;;14975  	DISPLAY_UpdateValue(DISPLAY_MON_TRIP_TITILE,  TRUE);
000066  2101              MOVS     r1,#1
000068  2025              MOVS     r0,#0x25
00006a  f7fffffe          BL       DISPLAY_UpdateValue
;;;14976  	DISPLAY_UpdateValue(DISPLAY_MON_TRIP,  uwTrip);
00006e  4641              MOV      r1,r8
000070  2026              MOVS     r0,#0x26
000072  f7fffffe          BL       DISPLAY_UpdateValue
;;;14977  	DISPLAY_UpdateValue(DISPLAY_MON_TRIP_UNIT, uwUnit);
000076  4649              MOV      r1,r9
000078  2027              MOVS     r0,#0x27
00007a  f7fffffe          BL       DISPLAY_UpdateValue
;;;14978  
;;;14979  	DISPLAY_UpdateValue(DISPLAY_MON_ODO_TITILE, TRUE);
00007e  2101              MOVS     r1,#1
000080  2028              MOVS     r0,#0x28
000082  f7fffffe          BL       DISPLAY_UpdateValue
;;;14980  	DISPLAY_UpdateValue(DISPLAY_MON_ODO,  uwDistance);
000086  4631              MOV      r1,r6
000088  2029              MOVS     r0,#0x29
00008a  f7fffffe          BL       DISPLAY_UpdateValue
;;;14981  	DISPLAY_UpdateValue(DISPLAY_MON_ODO_UNIT, uwUnit);
00008e  4649              MOV      r1,r9
000090  e8bd47f0          POP      {r4-r10,lr}
000094  202a              MOVS     r0,#0x2a
000096  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;14982  }
;;;14983  
                          ENDP

00009a  0000              DCW      0x0000
                  |L351.156|
                          DCD      paramCB

                          AREA ||i.DISPLAY_ShowNavGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowNavGUI PROC
;;;15036  // 显示导航界面
;;;15037  void DISPLAY_ShowNavGUI(BOOL refreshAll)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;15038  {
000004  4681              MOV      r9,r0
;;;15039  	uint16 uwSpeed = (uint16)(PARAM_GetSpeed());
000006  f7fffffe          BL       PARAM_GetSpeed
00000a  4606              MOV      r6,r0
;;;15040  	uint16 uwUint = PARAM_GetUnit();
00000c  4c67              LDR      r4,|L352.428|
00000e  f8940319          LDRB     r0,[r4,#0x319]  ; paramCB
000012  9001              STR      r0,[sp,#4]
;;;15041  	uint16 uwPower = (uint16)PARAM_GetPower();
000014  f8b4722e          LDRH     r7,[r4,#0x22e]  ; paramCB
;;;15042  	uint16 uwAssist = PARAM_IsPushAssistOn() ? ASSIST_P : PARAM_GetAssistLevel();
000018  f89401ff          LDRB     r0,[r4,#0x1ff]  ; paramCB
00001c  b108              CBZ      r0,|L352.34|
00001e  250a              MOVS     r5,#0xa
000020  e002              B        |L352.40|
                  |L352.34|
000022  f7fffffe          BL       PARAM_GetAssistLevel
000026  4605              MOV      r5,r0
                  |L352.40|
;;;15043  	uint16 uwDirection = PARAM_GetHudnavDirection();
000028  f8940286          LDRB     r0,[r4,#0x286]  ; paramCB
00002c  9000              STR      r0,[sp,#0]
;;;15044  	uint32 uwDistanceAndUnit = (((uint32)PARAM_GetHudnavWptDist() << 16) | (PARAM_GetUnit() & 0xFFFF));
00002e  f8940319          LDRB     r0,[r4,#0x319]  ; paramCB
000032  f8b41284          LDRH     r1,[r4,#0x284]  ; paramCB
000036  ea404801          ORR      r8,r0,r1,LSL #16
;;;15045  	uint16 uwTime = ((PARAM_GetRTCHour() << 8) | PARAM_GetRTCMin());
00003a  f89401f9          LDRB     r0,[r4,#0x1f9]  ; paramCB
00003e  f89411f8          LDRB     r1,[r4,#0x1f8]  ; paramCB
000042  ea402a01          ORR      r10,r0,r1,LSL #8
;;;15046  	uint32 Call4gstate = (PARAM_GetHelmetConnectState() << 16) | paramCB.runtime.iot.signal4G;
000046  f894017e          LDRB     r0,[r4,#0x17e]  ; paramCB
00004a  f894120d          LDRB     r1,[r4,#0x20d]  ; paramCB
00004e  ea404b01          ORR      r11,r0,r1,LSL #16
;;;15047  	
;;;15048  	// 在(0,0)位置显示背景
;;;15049  	if(refreshAll)
000052  f1b90f00          CMP      r9,#0
000056  d00a              BEQ      |L352.110|
;;;15050  	{
;;;15051  		// 恢复所有的值为初始值
;;;15052  		DISPLAY_ResumeValue(DISPLAY_MAX);
000058  20b3              MOVS     r0,#0xb3
00005a  f7fffffe          BL       DISPLAY_ResumeValue
;;;15053  
;;;15054  		// 更新背景 		
;;;15055  		DISPLAY_UpdateValue(DISPLAY_RID_BG, 1);
00005e  2101              MOVS     r1,#1
000060  2004              MOVS     r0,#4
000062  f7fffffe          BL       DISPLAY_UpdateValue
;;;15056  		DISPLAY_UpdateValue(DISPLAY_NAV_BG, 1);
000066  2101              MOVS     r1,#1
000068  203c              MOVS     r0,#0x3c
00006a  f7fffffe          BL       DISPLAY_UpdateValue
                  |L352.110|
;;;15057  	}
;;;15058  	
;;;15059  	// 进入音乐播放模式
;;;15060  	if (paramCB.runtime.musicPlayMode)
00006e  f894020a          LDRB     r0,[r4,#0x20a]  ; paramCB
000072  b168              CBZ      r0,|L352.144|
;;;15061  	{
;;;15062  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_TIME, FALSE);
000074  2100              MOVS     r1,#0
000076  200a              MOVS     r0,#0xa
000078  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15063  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_MUSIC_PLAY, TRUE);			
00007c  2101              MOVS     r1,#1
00007e  2018              MOVS     r0,#0x18
000080  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15064  		DISPLAY_UpdateValue(DISPLAY_COMMON_MUSIC_PLAY, paramCB.runtime.musicState);
000084  f8941213          LDRB     r1,[r4,#0x213]  ; paramCB
000088  2018              MOVS     r0,#0x18
00008a  f7fffffe          BL       DISPLAY_UpdateValue
00008e  e00b              B        |L352.168|
                  |L352.144|
;;;15065  	}
;;;15066  	else// 时间显示
;;;15067  	{
;;;15068  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_TIME, TRUE);	
000090  2101              MOVS     r1,#1
000092  200a              MOVS     r0,#0xa
000094  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15069  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_MUSIC_PLAY, FALSE);					
000098  2100              MOVS     r1,#0
00009a  2018              MOVS     r0,#0x18
00009c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;15070  		DISPLAY_UpdateValue(DISPLAY_COMMON_TIME, uwTime);
0000a0  4651              MOV      r1,r10
0000a2  200a              MOVS     r0,#0xa
0000a4  f7fffffe          BL       DISPLAY_UpdateValue
                  |L352.168|
;;;15071  	}
;;;15072  	
;;;15073  	if (PARAM_GetExistBle())
0000a8  f8940323          LDRB     r0,[r4,#0x323]  ; paramCB
0000ac  b120              CBZ      r0,|L352.184|
;;;15074  	{
;;;15075  		DISPLAY_UpdateValue(DISPLAY_COMMON_BLUE_STATE, PARAM_GetBleConnectState());
0000ae  f8941203          LDRB     r1,[r4,#0x203]  ; paramCB
0000b2  200d              MOVS     r0,#0xd
0000b4  f7fffffe          BL       DISPLAY_UpdateValue
                  |L352.184|
;;;15076  	}
;;;15077  	
;;;15078  	DISPLAY_UpdateValue(DISPLAY_COMMON_LIGHT, PARAM_GetLightSwitch()| (paramCB.runtime.headAutoLight << 4));
0000b8  f8940202          LDRB     r0,[r4,#0x202]  ; paramCB
0000bc  f8941257          LDRB     r1,[r4,#0x257]  ; paramCB
0000c0  ea401101          ORR      r1,r0,r1,LSL #4
0000c4  200f              MOVS     r0,#0xf
0000c6  f7fffffe          BL       DISPLAY_UpdateValue
;;;15079  	DISPLAY_UpdateValue(DISPLAY_COMMON_ERROR, (PARAM_GetErrorCode() == 0 ? 0:1));
0000ca  f8940221          LDRB     r0,[r4,#0x221]  ; paramCB
0000ce  b108              CBZ      r0,|L352.212|
0000d0  2101              MOVS     r1,#1
0000d2  e000              B        |L352.214|
                  |L352.212|
0000d4  2100              MOVS     r1,#0
                  |L352.214|
0000d6  2010              MOVS     r0,#0x10
0000d8  f7fffffe          BL       DISPLAY_UpdateValue
;;;15080  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_4G, Call4gstate);
0000dc  4659              MOV      r1,r11
0000de  2012              MOVS     r0,#0x12
0000e0  f7fffffe          BL       DISPLAY_UpdateValue
;;;15081  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_GPS, paramCB.runtime.iot.signalGps);
0000e4  f20414ef          ADD      r4,r4,#0x1ef
0000e8  2013              MOVS     r0,#0x13
0000ea  f8141c73          LDRB     r1,[r4,#-0x73]  ; paramCB
0000ee  f7fffffe          BL       DISPLAY_UpdateValue
;;;15082  	DISPLAY_UpdateValue(DISPLAY_COMMON_BATTARY_HELMET, ((uint16)PARAM_GetHelmetConnectState() << 8) |PARAM_GetHelmetBattery());
0000f2  7fe0              LDRB     r0,[r4,#0x1f]  ; paramCB
0000f4  7fa1              LDRB     r1,[r4,#0x1e]  ; paramCB
0000f6  ea402101          ORR      r1,r0,r1,LSL #8
0000fa  2014              MOVS     r0,#0x14
0000fc  f7fffffe          BL       DISPLAY_UpdateValue
;;;15083  	DISPLAY_UpdateValue(DISPLAY_COMMON_VIDEO, paramCB.runtime.videoSwitch);
000100  7da1              LDRB     r1,[r4,#0x16]  ; paramCB
000102  2015              MOVS     r0,#0x15
000104  f7fffffe          BL       DISPLAY_UpdateValue
;;;15084  	DISPLAY_UpdateValue(DISPLAY_COMMON_PHOTO, paramCB.runtime.photoSwitch);
000108  7de1              LDRB     r1,[r4,#0x17]  ; paramCB
00010a  2016              MOVS     r0,#0x16
00010c  f7fffffe          BL       DISPLAY_UpdateValue
;;;15085  	DISPLAY_UpdateValue(DISPLAY_COMMON_VOICE, paramCB.runtime.voiceSwitch);
000110  7e21              LDRB     r1,[r4,#0x18]  ; paramCB
000112  2017              MOVS     r0,#0x17
000114  f7fffffe          BL       DISPLAY_UpdateValue
;;;15086  	
;;;15087  	if (PARAM_GetHelmetConnectState())
000118  7fa0              LDRB     r0,[r4,#0x1e]  ; paramCB
00011a  f2a414ef          SUB      r4,r4,#0x1ef
00011e  b128              CBZ      r0,|L352.300|
;;;15088  	{
;;;15089  		DISPLAY_UpdateValue(DISPLAY_COMMON_TURN, PARAM_GetTurnState());
000120  f8941208          LDRB     r1,[r4,#0x208]  ; paramCB
000124  2019              MOVS     r0,#0x19
000126  f7fffffe          BL       DISPLAY_UpdateValue
00012a  e003              B        |L352.308|
                  |L352.300|
;;;15090  	}
;;;15091  	else
;;;15092  	{
;;;15093  		DISPLAY_UpdateValue(DISPLAY_COMMON_TURN, FALSE);
00012c  2100              MOVS     r1,#0
00012e  2019              MOVS     r0,#0x19
000130  f7fffffe          BL       DISPLAY_UpdateValue
                  |L352.308|
;;;15094  	}
;;;15095  	
;;;15096  	// Riding界面显示
;;;15097  	DISPLAY_UpdateValue(DISPLAY_RID_BATTARY, PARAM_GetBatteryPercent());
000134  f8941172          LDRB     r1,[r4,#0x172]  ; paramCB
000138  2022              MOVS     r0,#0x22
00013a  f7fffffe          BL       DISPLAY_UpdateValue
;;;15098  	DISPLAY_UpdateValue(DISPLAY_RID_ASSIST, uwAssist);
00013e  4629              MOV      r1,r5
000140  2021              MOVS     r0,#0x21
000142  f7fffffe          BL       DISPLAY_UpdateValue
;;;15099  	DISPLAY_UpdateValue(DISPLAY_RID_MOTOR_POWER, uwPower);
000146  4639              MOV      r1,r7
000148  201e              MOVS     r0,#0x1e
00014a  f7fffffe          BL       DISPLAY_UpdateValue
;;;15100  	DISPLAY_UpdateValue(DISPLAY_RID_CRUISE, PARAM_GetCruiseState());
00014e  f89411fe          LDRB     r1,[r4,#0x1fe]  ; paramCB
000152  2023              MOVS     r0,#0x23
000154  f7fffffe          BL       DISPLAY_UpdateValue
;;;15101  	DISPLAY_UpdateValue(DISPLAY_NAV_SPEED, uwSpeed);
000158  4631              MOV      r1,r6
00015a  203d              MOVS     r0,#0x3d
00015c  f7fffffe          BL       DISPLAY_UpdateValue
;;;15102  	DISPLAY_UpdateValue(DISPLAY_NAV_SPEED_UNIT, uwUint);
000160  203e              MOVS     r0,#0x3e
000162  9901              LDR      r1,[sp,#4]
000164  f7fffffe          BL       DISPLAY_UpdateValue
;;;15103  	DISPLAY_UpdateValue(DISPLAY_NAV_DIRECTION, uwDirection);
000168  203f              MOVS     r0,#0x3f
00016a  9900              LDR      r1,[sp,#0]
00016c  f7fffffe          BL       DISPLAY_UpdateValue
;;;15104  	DISPLAY_UpdateValue(DISPLAY_NAV_DISTANCE_UNIT, uwDistanceAndUnit);
000170  4641              MOV      r1,r8
000172  2040              MOVS     r0,#0x40
000174  f7fffffe          BL       DISPLAY_UpdateValue
;;;15105  	DISPLAY_UpdateValue(DISPLAY_NAV_DISTANCE_TIME, (PARAM_GetHudnavEtaHour() << 8) | PARAM_GetHudnavEtaMinute());
000178  f8940288          LDRB     r0,[r4,#0x288]  ; paramCB
00017c  f8941287          LDRB     r1,[r4,#0x287]  ; paramCB
000180  ea402101          ORR      r1,r0,r1,LSL #8
000184  2041              MOVS     r0,#0x41
000186  f7fffffe          BL       DISPLAY_UpdateValue
;;;15106  
;;;15107  	// 骑行界面来电提示
;;;15108  	if (PARAM_GetHelmetConnectState())
00018a  f894020d          LDRB     r0,[r4,#0x20d]  ; paramCB
00018e  b130              CBZ      r0,|L352.414|
;;;15109  	{
;;;15110  		DISPLAY_UpdateValue(DISPLAY_RID_CALL_NUMBER, PARAM_GetCallerIgnoreState());
000190  f894120c          LDRB     r1,[r4,#0x20c]  ; paramCB
000194  e8bd5ffc          POP      {r2-r12,lr}
000198  2024              MOVS     r0,#0x24
00019a  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L352.414|
;;;15111  	}
;;;15112  	else
;;;15113  	{
;;;15114  		DISPLAY_UpdateValue(DISPLAY_RID_CALL_NUMBER, FALSE);
00019e  e8bd5ffc          POP      {r2-r12,lr}
0001a2  2100              MOVS     r1,#0
0001a4  2024              MOVS     r0,#0x24
0001a6  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15115  	} 
;;;15116  }
;;;15117  
                          ENDP

0001aa  0000              DCW      0x0000
                  |L352.428|
                          DCD      paramCB

                          AREA ||i.DISPLAY_ShowPMusicGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowPMusicGUI PROC
;;;14751  // 显示音乐操作界面
;;;14752  void DISPLAY_ShowPMusicGUI(BOOL refreshAll)
000000  2800              CMP      r0,#0
;;;14753  {
000002  d002              BEQ      |L353.10|
;;;14754  	// 在(0,0)位置显示背景
;;;14755  	if(refreshAll)
;;;14756  	{
;;;14757  		// 恢复所有的值为初始值
;;;14758  		DISPLAY_ResumeValue(DISPLAY_MAX);
000004  20b3              MOVS     r0,#0xb3
000006  f7ffbffe          B.W      DISPLAY_ResumeValue
                  |L353.10|
;;;14759  	}
;;;14760  
;;;14761  }
00000a  4770              BX       lr
;;;14762  
                          ENDP


                          AREA ||i.DISPLAY_ShowPhoneGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowPhoneGUI PROC
;;;14763  // 显示来电操作界面
;;;14764  void DISPLAY_ShowPhoneGUI(BOOL refreshAll)
000000  b570              PUSH     {r4-r6,lr}
;;;14765  {
;;;14766  	uint16 uwTime = ((PARAM_GetRTCHour() << 8) | PARAM_GetRTCMin());
000002  4c32              LDR      r4,|L354.204|
000004  f89411f9          LDRB     r1,[r4,#0x1f9]  ; paramCB
000008  f89421f8          LDRB     r2,[r4,#0x1f8]  ; paramCB
00000c  ea412602          ORR      r6,r1,r2,LSL #8
;;;14767  	uint32 Call4gstate = (PARAM_GetHelmetConnectState() << 16) | (PARAM_GetCallerIgnoreState() << 8) | paramCB.runtime.iot.signal4G;
000010  f894120d          LDRB     r1,[r4,#0x20d]  ; paramCB
000014  f894220c          LDRB     r2,[r4,#0x20c]  ; paramCB
000018  0409              LSLS     r1,r1,#16
00001a  ea412502          ORR      r5,r1,r2,LSL #8
00001e  f894117e          LDRB     r1,[r4,#0x17e]  ; paramCB
000022  430d              ORRS     r5,r5,r1
;;;14768  	
;;;14769  	// 在(0,0)位置显示背景
;;;14770  	if (refreshAll)
000024  2800              CMP      r0,#0
000026  d006              BEQ      |L354.54|
;;;14771  	{
;;;14772  		// 恢复所有的值为初始值
;;;14773  		DISPLAY_ResumeValue(DISPLAY_MAX);
000028  20b3              MOVS     r0,#0xb3
00002a  f7fffffe          BL       DISPLAY_ResumeValue
;;;14774  
;;;14775  		// 更新背景 		
;;;14776  		DISPLAY_UpdateValue(DISPLAY_RID_BG, 0);
00002e  2100              MOVS     r1,#0
000030  2004              MOVS     r0,#4
000032  f7fffffe          BL       DISPLAY_UpdateValue
                  |L354.54|
;;;14777  	}
;;;14778  
;;;14779  	DISPLAY_UpdateValue(DISPLAY_COMMON_TIME, uwTime);
000036  4631              MOV      r1,r6
000038  200a              MOVS     r0,#0xa
00003a  f7fffffe          BL       DISPLAY_UpdateValue
;;;14780  	
;;;14781  	if (PARAM_GetExistBle())
00003e  f8940323          LDRB     r0,[r4,#0x323]  ; paramCB
000042  b120              CBZ      r0,|L354.78|
;;;14782  	{
;;;14783  		DISPLAY_UpdateValue(DISPLAY_COMMON_BLUE_STATE, PARAM_GetBleConnectState());
000044  f8941203          LDRB     r1,[r4,#0x203]  ; paramCB
000048  200d              MOVS     r0,#0xd
00004a  f7fffffe          BL       DISPLAY_UpdateValue
                  |L354.78|
;;;14784  	}
;;;14785  	
;;;14786  	DISPLAY_UpdateValue(DISPLAY_COMMON_LIGHT, PARAM_GetLightSwitch()| (paramCB.runtime.headAutoLight << 4));
00004e  f8940202          LDRB     r0,[r4,#0x202]  ; paramCB
000052  f8941257          LDRB     r1,[r4,#0x257]  ; paramCB
000056  ea401101          ORR      r1,r0,r1,LSL #4
00005a  200f              MOVS     r0,#0xf
00005c  f7fffffe          BL       DISPLAY_UpdateValue
;;;14787  	DISPLAY_UpdateValue(DISPLAY_COMMON_ERROR, (PARAM_GetErrorCode() == 0 ? 0:1));
000060  f8940221          LDRB     r0,[r4,#0x221]  ; paramCB
000064  b108              CBZ      r0,|L354.106|
000066  2101              MOVS     r1,#1
000068  e000              B        |L354.108|
                  |L354.106|
00006a  2100              MOVS     r1,#0
                  |L354.108|
00006c  2010              MOVS     r0,#0x10
00006e  f7fffffe          BL       DISPLAY_UpdateValue
;;;14788  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_4G, Call4gstate);
000072  4629              MOV      r1,r5
000074  2012              MOVS     r0,#0x12
000076  f7fffffe          BL       DISPLAY_UpdateValue
;;;14789  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_GPS, paramCB.runtime.iot.signalGps);
00007a  f20414ef          ADD      r4,r4,#0x1ef
00007e  2013              MOVS     r0,#0x13
000080  f8141c73          LDRB     r1,[r4,#-0x73]  ; paramCB
000084  f7fffffe          BL       DISPLAY_UpdateValue
;;;14790  	DISPLAY_UpdateValue(DISPLAY_COMMON_BATTARY_HELMET, ((uint16)PARAM_GetHelmetConnectState() << 8) |PARAM_GetHelmetBattery());
000088  7fe0              LDRB     r0,[r4,#0x1f]  ; paramCB
00008a  7fa1              LDRB     r1,[r4,#0x1e]  ; paramCB
00008c  ea402101          ORR      r1,r0,r1,LSL #8
000090  2014              MOVS     r0,#0x14
000092  f7fffffe          BL       DISPLAY_UpdateValue
;;;14791  	DISPLAY_UpdateValue(DISPLAY_COMMON_VIDEO, paramCB.runtime.videoSwitch);
000096  7da1              LDRB     r1,[r4,#0x16]  ; paramCB
000098  2015              MOVS     r0,#0x15
00009a  f7fffffe          BL       DISPLAY_UpdateValue
;;;14792  	DISPLAY_UpdateValue(DISPLAY_COMMON_PHOTO, paramCB.runtime.photoSwitch);
00009e  7de1              LDRB     r1,[r4,#0x17]  ; paramCB
0000a0  2016              MOVS     r0,#0x16
0000a2  f7fffffe          BL       DISPLAY_UpdateValue
;;;14793  	DISPLAY_UpdateValue(DISPLAY_COMMON_VOICE, paramCB.runtime.voiceSwitch);
0000a6  7e21              LDRB     r1,[r4,#0x18]  ; paramCB
0000a8  2017              MOVS     r0,#0x17
0000aa  f7fffffe          BL       DISPLAY_UpdateValue
;;;14794  	DISPLAY_UpdateValue(DISPLAY_COMMON_TURN, PARAM_GetTurnState());
0000ae  7e61              LDRB     r1,[r4,#0x19]  ; paramCB
0000b0  2019              MOVS     r0,#0x19
0000b2  f7fffffe          BL       DISPLAY_UpdateValue
;;;14795  
;;;14796  	// 来电提示
;;;14797  	DISPLAY_UpdateValue(DISPLAY_PHONE_BG, TRUE);
0000b6  2101              MOVS     r1,#1
0000b8  201a              MOVS     r0,#0x1a
0000ba  f7fffffe          BL       DISPLAY_UpdateValue
;;;14798  	DISPLAY_UpdateValue(DISPLAY_PHONE_NUMBER, TRUE);
0000be  e8bd4070          POP      {r4-r6,lr}
0000c2  2101              MOVS     r1,#1
0000c4  201b              MOVS     r0,#0x1b
0000c6  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;14799  }
;;;14800  
                          ENDP

0000ca  0000              DCW      0x0000
                  |L354.204|
                          DCD      paramCB

                          AREA ||i.DISPLAY_ShowPowerOffGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowPowerOffGUI PROC
;;;14813  **********************************************************************/
;;;14814  void DISPLAY_ShowPowerOffGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;14815  {
;;;14816  	// 在(0,0)位置显示背景
;;;14817  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d002              BEQ      |L355.12|
;;;14818  	{
;;;14819  		// 恢复所有的值为初始值
;;;14820  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
                  |L355.12|
;;;14821  	}
;;;14822  
;;;14823  	// 关机
;;;14824  	DISPLAY_UpdateValue(DISPLAY_POWER_OFF, 1);
00000c  2101              MOVS     r1,#1
00000e  4608              MOV      r0,r1
000010  f85deb04          POP      {lr}
000014  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;14825  }
;;;14826  
                          ENDP


                          AREA ||i.DISPLAY_ShowPowerOnGUI||, CODE, READONLY, ALIGN=1

                  DISPLAY_ShowPowerOnGUI PROC
;;;14736  **********************************************************************/
;;;14737  void DISPLAY_ShowPowerOnGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;14738  {
;;;14739  	// 在(0,0)位置显示背景
;;;14740  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d002              BEQ      |L356.12|
;;;14741  	{
;;;14742  		// 恢复所有的值为初始值
;;;14743  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
                  |L356.12|
;;;14744  	}
;;;14745  	
;;;14746  	// 开机
;;;14747  	DISPLAY_UpdateValue(DISPLAY_POWER_ON, 1);
00000c  2101              MOVS     r1,#1
00000e  2000              MOVS     r0,#0
000010  f85deb04          POP      {lr}
000014  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;14748  
;;;14749  }
;;;14750  
                          ENDP


                          AREA ||i.DISPLAY_ShowPowerOnPasswordGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowPowerOnPasswordGUI PROC
;;;16354  
;;;16355  void DISPLAY_ShowPowerOnPasswordGUI(BOOL refreshAll)
000000  b530              PUSH     {r4,r5,lr}
;;;16356  {
;;;16357  	uint16 password = (displayStateCB.menu.root.password.number1*1000) + (displayStateCB.menu.root.password.number2*100)+
000002  4c1f              LDR      r4,|L357.128|
000004  f8941b3b          LDRB     r1,[r4,#0xb3b]  ; displayStateCB
000008  f8942b3e          LDRB     r2,[r4,#0xb3e]  ; displayStateCB
00000c  eb010341          ADD      r3,r1,r1,LSL #1
000010  ebc311c1          RSB      r1,r3,r1,LSL #7
000014  eb0203c1          ADD      r3,r2,r1,LSL #3
000018  f8942b3c          LDRB     r2,[r4,#0xb3c]  ; displayStateCB
00001c  2164              MOVS     r1,#0x64
00001e  434a              MULS     r2,r1,r2
000020  f8941b3d          LDRB     r1,[r4,#0xb3d]  ; displayStateCB
000024  eb010181          ADD      r1,r1,r1,LSL #2
000028  eb020141          ADD      r1,r2,r1,LSL #1
00002c  4419              ADD      r1,r1,r3
00002e  b28d              UXTH     r5,r1
;;;16358  					(displayStateCB.menu.root.password.number3*10) + (displayStateCB.menu.root.password.number4*1);
;;;16359  	
;;;16360  	// 在(0,0)位置显示背景
;;;16361  	if(refreshAll)
000030  2800              CMP      r0,#0
000032  d006              BEQ      |L357.66|
;;;16362  	{
;;;16363  		// 恢复所有的值为初始值
;;;16364  		DISPLAY_ResumeValue(DISPLAY_MAX);
000034  20b3              MOVS     r0,#0xb3
000036  f7fffffe          BL       DISPLAY_ResumeValue
;;;16365  
;;;16366  		// 更新背景 		
;;;16367  		DISPLAY_UpdateValue(DISPLAY_INPUT_PASSWORD_BG, 1);
00003a  2101              MOVS     r1,#1
00003c  2009              MOVS     r0,#9
00003e  f7fffffe          BL       DISPLAY_UpdateValue
                  |L357.66|
;;;16368  	}
;;;16369  
;;;16370  	// 上电后先不进行头盔连接
;;;16371  //	TIMER_ResetTimer(TIMER_ID_BLE_HELMET_PAIR);
;;;16372  //	TIMER_ResetTimer(TIMER_ID_BLE_READ_HELMET_INFO);
;;;16373  	
;;;16374  	DISPLAY_UpdateValue(DISPLAY_MENU_POWERON_PASSWORD_LOCK_ICON, PARAM_GetLockKeyFlag());
000042  4810              LDR      r0,|L357.132|
000044  f8901212          LDRB     r1,[r0,#0x212]  ; paramCB
000048  205e              MOVS     r0,#0x5e
00004a  f7fffffe          BL       DISPLAY_UpdateValue
;;;16375  	DISPLAY_UpdateValue(DISPLAY_MENU_POWERON_PASSWORD_INPUT_TITLE, TRUE);
00004e  2101              MOVS     r1,#1
000050  205f              MOVS     r0,#0x5f
000052  f7fffffe          BL       DISPLAY_UpdateValue
;;;16376  	DISPLAY_UpdateValue(DISPLAY_MENU_POWERON_PASSWORD_INPUT_NUM, (password << 8) | displayStateCB.menu.root.password.CountDown);
000056  f6043436          ADD      r4,r4,#0xb36
00005a  78a0              LDRB     r0,[r4,#2]  ; displayStateCB
00005c  ea402105          ORR      r1,r0,r5,LSL #8
000060  2060              MOVS     r0,#0x60
000062  f7fffffe          BL       DISPLAY_UpdateValue
;;;16377  	DISPLAY_UpdateValue(DISPLAY_MENU_POWERON_PASSWORD_INPUT_CURSOR, (displayStateCB.menu.root.password.value << 8) | displayStateCB.menu.root.password.CountDown);
000066  78a0              LDRB     r0,[r4,#2]  ; displayStateCB
000068  8821              LDRH     r1,[r4,#0]  ; displayStateCB
00006a  ea402101          ORR      r1,r0,r1,LSL #8
00006e  2061              MOVS     r0,#0x61
000070  f7fffffe          BL       DISPLAY_UpdateValue
;;;16378  	DISPLAY_UpdateValue(DISPLAY_MENU_POWERON_PASSWORD_COUNT_DOWN, displayStateCB.menu.root.password.CountDown);
000074  78a1              LDRB     r1,[r4,#2]  ; displayStateCB
000076  e8bd4030          POP      {r4,r5,lr}
00007a  2062              MOVS     r0,#0x62
00007c  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;16379  }
;;;16380  
                          ENDP

                  |L357.128|
                          DCD      ||.bss||
                  |L357.132|
                          DCD      paramCB

                          AREA ||i.DISPLAY_ShowRidingGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowRidingGUI PROC
;;;14854  // 【参数】背景刷新请求，为真时刷新背景
;;;14855  void DISPLAY_ShowRidingGUI(BOOL refreshAll)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;14856  {
000004  4683              MOV      r11,r0
;;;14857  	uint16 uwSpeed = (uint16)(PARAM_GetSpeed());
000006  f7fffffe          BL       PARAM_GetSpeed
00000a  4606              MOV      r6,r0
;;;14858  	uint16 uwUint = PARAM_GetUnit();
00000c  4c59              LDR      r4,|L358.372|
00000e  f8947319          LDRB     r7,[r4,#0x319]  ; paramCB
;;;14859  	uint16 uwPower = PARAM_GetPower();
000012  f8b4822e          LDRH     r8,[r4,#0x22e]  ; paramCB
;;;14860  	uint16 uwAssist = PARAM_IsPushAssistOn() ? ASSIST_P : PARAM_GetAssistLevel();
000016  f89401ff          LDRB     r0,[r4,#0x1ff]  ; paramCB
00001a  b108              CBZ      r0,|L358.32|
00001c  250a              MOVS     r5,#0xa
00001e  e002              B        |L358.38|
                  |L358.32|
000020  f7fffffe          BL       PARAM_GetAssistLevel
000024  4605              MOV      r5,r0
                  |L358.38|
;;;14861  	uint16 uwTime = ((PARAM_GetRTCHour() << 8) | PARAM_GetRTCMin());
000026  f89401f9          LDRB     r0,[r4,#0x1f9]  ; paramCB
00002a  f89411f8          LDRB     r1,[r4,#0x1f8]  ; paramCB
00002e  ea402901          ORR      r9,r0,r1,LSL #8
;;;14862  	uint32 Call4gstate = (PARAM_GetHelmetConnectState() << 16) | paramCB.runtime.iot.signal4G;
000032  f894017e          LDRB     r0,[r4,#0x17e]  ; paramCB
000036  f894120d          LDRB     r1,[r4,#0x20d]  ; paramCB
00003a  ea404a01          ORR      r10,r0,r1,LSL #16
;;;14863  	
;;;14864  	// 在(0,0)位置显示背景
;;;14865  	if (refreshAll)
00003e  f1bb0f00          CMP      r11,#0
000042  d006              BEQ      |L358.82|
;;;14866  	{
;;;14867  		// 恢复所有的值为初始值
;;;14868  		DISPLAY_ResumeValue(DISPLAY_MAX);
000044  20b3              MOVS     r0,#0xb3
000046  f7fffffe          BL       DISPLAY_ResumeValue
;;;14869  
;;;14870  		// 更新背景 		
;;;14871  		DISPLAY_UpdateValue(DISPLAY_RID_BG, 1);
00004a  2101              MOVS     r1,#1
00004c  2004              MOVS     r0,#4
00004e  f7fffffe          BL       DISPLAY_UpdateValue
                  |L358.82|
;;;14872  	}
;;;14873  
;;;14874  	// 进入音乐播放模式
;;;14875  	if (paramCB.runtime.musicPlayMode)
000052  f894020a          LDRB     r0,[r4,#0x20a]  ; paramCB
000056  b168              CBZ      r0,|L358.116|
;;;14876  	{
;;;14877  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_TIME, FALSE);
000058  2100              MOVS     r1,#0
00005a  200a              MOVS     r0,#0xa
00005c  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;14878  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_MUSIC_PLAY, TRUE);			
000060  2101              MOVS     r1,#1
000062  2018              MOVS     r0,#0x18
000064  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;14879  		DISPLAY_UpdateValue(DISPLAY_COMMON_MUSIC_PLAY, paramCB.runtime.musicState);
000068  f8941213          LDRB     r1,[r4,#0x213]  ; paramCB
00006c  2018              MOVS     r0,#0x18
00006e  f7fffffe          BL       DISPLAY_UpdateValue
000072  e00b              B        |L358.140|
                  |L358.116|
;;;14880  	}
;;;14881  	else// 时间显示
;;;14882  	{
;;;14883  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_TIME, TRUE);	
000074  2101              MOVS     r1,#1
000076  200a              MOVS     r0,#0xa
000078  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;14884  		DISPLAY_DISABLE_ENABLE(DISPLAY_COMMON_MUSIC_PLAY, FALSE);					
00007c  2100              MOVS     r1,#0
00007e  2018              MOVS     r0,#0x18
000080  f7fffffe          BL       DISPLAY_DISABLE_ENABLE
;;;14885  		DISPLAY_UpdateValue(DISPLAY_COMMON_TIME, uwTime);
000084  4649              MOV      r1,r9
000086  200a              MOVS     r0,#0xa
000088  f7fffffe          BL       DISPLAY_UpdateValue
                  |L358.140|
;;;14886  	}
;;;14887  	
;;;14888  	if (PARAM_GetExistBle())
00008c  f8940323          LDRB     r0,[r4,#0x323]  ; paramCB
000090  b120              CBZ      r0,|L358.156|
;;;14889  	{
;;;14890  		DISPLAY_UpdateValue(DISPLAY_COMMON_BLUE_STATE, PARAM_GetBleConnectState());
000092  f8941203          LDRB     r1,[r4,#0x203]  ; paramCB
000096  200d              MOVS     r0,#0xd
000098  f7fffffe          BL       DISPLAY_UpdateValue
                  |L358.156|
;;;14891  	}
;;;14892  	
;;;14893  	DISPLAY_UpdateValue(DISPLAY_COMMON_LIGHT, PARAM_GetLightSwitch()| (paramCB.runtime.headAutoLight << 4));
00009c  f8940202          LDRB     r0,[r4,#0x202]  ; paramCB
0000a0  f8941257          LDRB     r1,[r4,#0x257]  ; paramCB
0000a4  ea401101          ORR      r1,r0,r1,LSL #4
0000a8  200f              MOVS     r0,#0xf
0000aa  f7fffffe          BL       DISPLAY_UpdateValue
;;;14894  	DISPLAY_UpdateValue(DISPLAY_COMMON_ERROR, (PARAM_GetErrorCode() == 0 ? 0:1));
0000ae  f8940221          LDRB     r0,[r4,#0x221]  ; paramCB
0000b2  b108              CBZ      r0,|L358.184|
0000b4  2101              MOVS     r1,#1
0000b6  e000              B        |L358.186|
                  |L358.184|
0000b8  2100              MOVS     r1,#0
                  |L358.186|
0000ba  2010              MOVS     r0,#0x10
0000bc  f7fffffe          BL       DISPLAY_UpdateValue
;;;14895  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_4G, Call4gstate);
0000c0  4651              MOV      r1,r10
0000c2  2012              MOVS     r0,#0x12
0000c4  f7fffffe          BL       DISPLAY_UpdateValue
;;;14896  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_GPS, paramCB.runtime.iot.signalGps);
0000c8  f20414ef          ADD      r4,r4,#0x1ef
0000cc  2013              MOVS     r0,#0x13
0000ce  f8141c73          LDRB     r1,[r4,#-0x73]  ; paramCB
0000d2  f7fffffe          BL       DISPLAY_UpdateValue
;;;14897  	DISPLAY_UpdateValue(DISPLAY_COMMON_BATTARY_HELMET, ((uint16)PARAM_GetHelmetConnectState() << 8) |PARAM_GetHelmetBattery());
0000d6  7fe0              LDRB     r0,[r4,#0x1f]  ; paramCB
0000d8  7fa1              LDRB     r1,[r4,#0x1e]  ; paramCB
0000da  ea402101          ORR      r1,r0,r1,LSL #8
0000de  2014              MOVS     r0,#0x14
0000e0  f7fffffe          BL       DISPLAY_UpdateValue
;;;14898  	DISPLAY_UpdateValue(DISPLAY_COMMON_VIDEO, paramCB.runtime.videoSwitch);
0000e4  7da1              LDRB     r1,[r4,#0x16]  ; paramCB
0000e6  2015              MOVS     r0,#0x15
0000e8  f7fffffe          BL       DISPLAY_UpdateValue
;;;14899  	DISPLAY_UpdateValue(DISPLAY_COMMON_PHOTO, paramCB.runtime.photoSwitch);
0000ec  7de1              LDRB     r1,[r4,#0x17]  ; paramCB
0000ee  2016              MOVS     r0,#0x16
0000f0  f7fffffe          BL       DISPLAY_UpdateValue
;;;14900  	DISPLAY_UpdateValue(DISPLAY_COMMON_VOICE, paramCB.runtime.voiceSwitch);
0000f4  7e21              LDRB     r1,[r4,#0x18]  ; paramCB
0000f6  2017              MOVS     r0,#0x17
0000f8  f7fffffe          BL       DISPLAY_UpdateValue
;;;14901  	
;;;14902  	if (PARAM_GetHelmetConnectState())
0000fc  7fa0              LDRB     r0,[r4,#0x1e]  ; paramCB
0000fe  f2a414ef          SUB      r4,r4,#0x1ef
000102  b128              CBZ      r0,|L358.272|
;;;14903  	{
;;;14904  		DISPLAY_UpdateValue(DISPLAY_COMMON_TURN, PARAM_GetTurnState());
000104  f8941208          LDRB     r1,[r4,#0x208]  ; paramCB
000108  2019              MOVS     r0,#0x19
00010a  f7fffffe          BL       DISPLAY_UpdateValue
00010e  e003              B        |L358.280|
                  |L358.272|
;;;14905  	}
;;;14906  	else
;;;14907  	{
;;;14908  		DISPLAY_UpdateValue(DISPLAY_COMMON_TURN, FALSE);
000110  2100              MOVS     r1,#0
000112  2019              MOVS     r0,#0x19
000114  f7fffffe          BL       DISPLAY_UpdateValue
                  |L358.280|
;;;14909  	}
;;;14910  
;;;14911  	// Riding界面显示
;;;14912  	DISPLAY_UpdateValue(DISPLAY_RID_BATTARY, PARAM_GetBatteryPercent());
000118  f8941172          LDRB     r1,[r4,#0x172]  ; paramCB
00011c  2022              MOVS     r0,#0x22
00011e  f7fffffe          BL       DISPLAY_UpdateValue
;;;14913  	DISPLAY_UpdateValue(DISPLAY_RID_ASSIST, uwAssist);
000122  4629              MOV      r1,r5
000124  2021              MOVS     r0,#0x21
000126  f7fffffe          BL       DISPLAY_UpdateValue
;;;14914  	DISPLAY_UpdateValue(DISPLAY_RID_SPEED, uwSpeed);
00012a  4631              MOV      r1,r6
00012c  201f              MOVS     r0,#0x1f
00012e  f7fffffe          BL       DISPLAY_UpdateValue
;;;14915  	DISPLAY_UpdateValue(DISPLAY_RID_SPEED_UNIT, uwUint);
000132  4639              MOV      r1,r7
000134  2020              MOVS     r0,#0x20
000136  f7fffffe          BL       DISPLAY_UpdateValue
;;;14916  	DISPLAY_UpdateValue(DISPLAY_RID_MOTOR_POWER, uwPower);
00013a  4641              MOV      r1,r8
00013c  201e              MOVS     r0,#0x1e
00013e  f7fffffe          BL       DISPLAY_UpdateValue
;;;14917  	DISPLAY_UpdateValue(DISPLAY_RID_CRUISE, PARAM_GetCruiseState());
000142  f89411fe          LDRB     r1,[r4,#0x1fe]  ; paramCB
000146  2023              MOVS     r0,#0x23
000148  f7fffffe          BL       DISPLAY_UpdateValue
;;;14918  
;;;14919  	// 骑行界面来电提示
;;;14920  	if (PARAM_GetHelmetConnectState()|| PARAM_GetBleCallRing())
00014c  f894020d          LDRB     r0,[r4,#0x20d]  ; paramCB
000150  b910              CBNZ     r0,|L358.344|
000152  f8940204          LDRB     r0,[r4,#0x204]  ; paramCB
000156  b130              CBZ      r0,|L358.358|
                  |L358.344|
;;;14921  	{
;;;14922  		DISPLAY_UpdateValue(DISPLAY_RID_CALL_NUMBER, PARAM_GetCallerIgnoreState());
000158  f894120c          LDRB     r1,[r4,#0x20c]  ; paramCB
00015c  e8bd5ff0          POP      {r4-r12,lr}
000160  2024              MOVS     r0,#0x24
000162  f7ffbffe          B.W      DISPLAY_UpdateValue
                  |L358.358|
;;;14923  	}
;;;14924  	else
;;;14925  	{
;;;14926  		DISPLAY_UpdateValue(DISPLAY_RID_CALL_NUMBER, FALSE);
000166  e8bd5ff0          POP      {r4-r12,lr}
00016a  2100              MOVS     r1,#0
00016c  2024              MOVS     r0,#0x24
00016e  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;14927  	} 
;;;14928  }
;;;14929  
                          ENDP

000172  0000              DCW      0x0000
                  |L358.372|
                          DCD      paramCB

                          AREA ||i.DISPLAY_ShowTourGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowTourGUI PROC
;;;14998  // 【参数】背景刷新请求，为真时刷新背景
;;;14999  void DISPLAY_ShowTourGUI(BOOL refreshAll)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;15000  {
000004  4604              MOV      r4,r0
;;;15001  	uint16 uwAvgSpeed = (uint16)(PARAM_GetTripAverageSpeed());
000006  f7fffffe          BL       PARAM_GetTripAverageSpeed
00000a  4680              MOV      r8,r0
;;;15002  	uint16 uwMaxSpeed = (uint16)(PARAM_GetTripMaxSpeed());
00000c  f7fffffe          BL       PARAM_GetTripMaxSpeed
000010  4607              MOV      r7,r0
;;;15003  	UNIT_E dataUnit = PARAM_GetUnit();
000012  4e2c              LDR      r6,|L359.196|
000014  f8965319          LDRB     r5,[r6,#0x319]  ; paramCB
;;;15004  	
;;;15005  	// 在(0,0)位置显示背景
;;;15006  	if(refreshAll)
000018  b134              CBZ      r4,|L359.40|
;;;15007  	{
;;;15008  		// 恢复所有的值为初始值
;;;15009  		DISPLAY_ResumeValue(DISPLAY_MAX);
00001a  20b3              MOVS     r0,#0xb3
00001c  f7fffffe          BL       DISPLAY_ResumeValue
;;;15010  
;;;15011  		// 更新背景
;;;15012  		DISPLAY_UpdateValue(DISPLAY_TOUR_BG, 1);
000020  2101              MOVS     r1,#1
000022  2006              MOVS     r0,#6
000024  f7fffffe          BL       DISPLAY_UpdateValue
                  |L359.40|
;;;15013  	}	
;;;15014  	
;;;15015  	// 通用界面显示
;;;15016  	DISPLAY_Update_Title();
000028  f7fffffe          BL       DISPLAY_Update_Title
;;;15017  
;;;15018  	// Tour界面显示
;;;15019  	DISPLAY_UpdateValue(DISPLAY_TOUR_AVG_SPEED_TITILE, TRUE);
00002c  2101              MOVS     r1,#1
00002e  2030              MOVS     r0,#0x30
000030  f7fffffe          BL       DISPLAY_UpdateValue
;;;15020  	DISPLAY_UpdateValue(DISPLAY_TOUR_AVG_SPEED, uwAvgSpeed);
000034  4641              MOV      r1,r8
000036  2031              MOVS     r0,#0x31
000038  f7fffffe          BL       DISPLAY_UpdateValue
;;;15021  	DISPLAY_UpdateValue(DISPLAY_TOUR_AVG_SPEED_UNIT, dataUnit);
00003c  4629              MOV      r1,r5
00003e  2032              MOVS     r0,#0x32
000040  f7fffffe          BL       DISPLAY_UpdateValue
;;;15022  	
;;;15023  	DISPLAY_UpdateValue(DISPLAY_TOUR_MAX_SPEED_TITILE, TRUE);
000044  2101              MOVS     r1,#1
000046  2033              MOVS     r0,#0x33
000048  f7fffffe          BL       DISPLAY_UpdateValue
;;;15024  	DISPLAY_UpdateValue(DISPLAY_TOUR_MAX_SPEED, uwMaxSpeed);
00004c  4639              MOV      r1,r7
00004e  2034              MOVS     r0,#0x34
000050  f7fffffe          BL       DISPLAY_UpdateValue
;;;15025  	DISPLAY_UpdateValue(DISPLAY_TOUR_MAX_SPEED_UNIT, dataUnit);
000054  4629              MOV      r1,r5
000056  2035              MOVS     r0,#0x35
000058  f7fffffe          BL       DISPLAY_UpdateValue
;;;15026  	
;;;15027  	DISPLAY_UpdateValue(DISPLAY_TOUR_CO2_AVOIDED_TITILE, TRUE);
00005c  2101              MOVS     r1,#1
00005e  2036              MOVS     r0,#0x36
000060  f7fffffe          BL       DISPLAY_UpdateValue
;;;15028  	DISPLAY_UpdateValue(DISPLAY_TOUR_CO2_AVOIDED, paramCB.nvm.param.common.record.trip.distance*0.174f + 0.5f);
000064  f8d60350          LDR      r0,[r6,#0x350]  ; paramCB
000068  f7fffffe          BL       __aeabi_ui2f
00006c  4916              LDR      r1,|L359.200|
00006e  f7fffffe          BL       __aeabi_fmul
000072  f04f547c          MOV      r4,#0x3f000000
000076  4621              MOV      r1,r4
000078  f7fffffe          BL       __aeabi_fadd
00007c  f7fffffe          BL       __aeabi_f2uiz
000080  4601              MOV      r1,r0
000082  2037              MOVS     r0,#0x37
000084  f7fffffe          BL       DISPLAY_UpdateValue
;;;15029  	DISPLAY_UpdateValue(DISPLAY_TOUR_CO2_AVOIDED_UNIT, TRUE);
000088  2101              MOVS     r1,#1
00008a  2038              MOVS     r0,#0x38
00008c  f7fffffe          BL       DISPLAY_UpdateValue
;;;15030  	
;;;15031  	DISPLAY_UpdateValue(DISPLAY_TOUR_TREES_SAVED_TITILE, TRUE);
000090  2101              MOVS     r1,#1
000092  2039              MOVS     r0,#0x39
000094  f7fffffe          BL       DISPLAY_UpdateValue
;;;15032  	DISPLAY_UpdateValue(DISPLAY_TOUR_TREES_SAVED, paramCB.nvm.param.common.record.trip.distance*0.0136f + 0.5f);
000098  f8d60350          LDR      r0,[r6,#0x350]  ; paramCB
00009c  f7fffffe          BL       __aeabi_ui2f
0000a0  490a              LDR      r1,|L359.204|
0000a2  f7fffffe          BL       __aeabi_fmul
0000a6  4621              MOV      r1,r4
0000a8  f7fffffe          BL       __aeabi_fadd
0000ac  f7fffffe          BL       __aeabi_f2uiz
0000b0  4601              MOV      r1,r0
0000b2  203a              MOVS     r0,#0x3a
0000b4  f7fffffe          BL       DISPLAY_UpdateValue
;;;15033  	DISPLAY_UpdateValue(DISPLAY_TOUR_TREES_SAVED_UNIT, TRUE);
0000b8  e8bd41f0          POP      {r4-r8,lr}
0000bc  2101              MOVS     r1,#1
0000be  203b              MOVS     r0,#0x3b
0000c0  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;15034  }
;;;15035  
                          ENDP

                  |L359.196|
                          DCD      paramCB
                  |L359.200|
                          DCD      0x3e322d0e
                  |L359.204|
                          DCD      0x3c5ed289

                          AREA ||i.DISPLAY_ShowUpdataGUI||, CODE, READONLY, ALIGN=2

                  DISPLAY_ShowUpdataGUI PROC
;;;14826  
;;;14827  void DISPLAY_ShowUpdataGUI(BOOL refreshAll)
000000  b500              PUSH     {lr}
;;;14828  {
;;;14829  	// 在(0,0)位置显示背景
;;;14830  	if(refreshAll)
000002  2800              CMP      r0,#0
000004  d002              BEQ      |L360.12|
;;;14831  	{
;;;14832  		// 恢复所有的值为初始值
;;;14833  		DISPLAY_ResumeValue(DISPLAY_MAX);
000006  20b3              MOVS     r0,#0xb3
000008  f7fffffe          BL       DISPLAY_ResumeValue
                  |L360.12|
;;;14834  	}
;;;14835  
;;;14836  	// 蓝牙升级界面
;;;14837  	DISPLAY_UpdateValue(DISPLAY_BLE_UPDATA, paramCB.runtime.blueUpDataState);
00000c  4803              LDR      r0,|L360.28|
00000e  f89011fc          LDRB     r1,[r0,#0x1fc]  ; paramCB
000012  2002              MOVS     r0,#2
000014  f85deb04          POP      {lr}
000018  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;14838  }
;;;14839  
                          ENDP

                  |L360.28|
                          DCD      paramCB

                          AREA ||i.DISPLAY_UpdateValue||, CODE, READONLY, ALIGN=2

                  DISPLAY_UpdateValue PROC
;;;220    **********************************************************************/
;;;221    void DISPLAY_UpdateValue(DISPLAY_ITEM_E eUnit, uint32 usBuff)
000000  28b3              CMP      r0,#0xb3
;;;222    {	
000002  d203              BCS      |L361.12|
;;;223    	// 参数判断
;;;224    	CHECK_PARAM_OVER_SAME_RETURN(eUnit, DISPLAY_MAX);
;;;225    
;;;226    	// 更新当前读数
;;;227    	displayStateCB.dispCtrl[eUnit].param = usBuff;
000004  4a02              LDR      r2,|L361.16|
000006  eb021000          ADD      r0,r2,r0,LSL #4
00000a  6041              STR      r1,[r0,#4]
                  |L361.12|
;;;228    }
00000c  4770              BX       lr
;;;229    
                          ENDP

00000e  0000              DCW      0x0000
                  |L361.16|
                          DCD      ||.bss||

                          AREA ||i.DISPLAY_Update_Title||, CODE, READONLY, ALIGN=2

                  DISPLAY_Update_Title PROC
;;;14698  // 更新标题栏的参数
;;;14699  void DISPLAY_Update_Title(void)
000000  b530              PUSH     {r4,r5,lr}
;;;14700  {
;;;14701  	uint16 uwTime = ((PARAM_GetRTCHour() << 8) | PARAM_GetRTCMin());
000002  4b2b              LDR      r3,|L362.176|
000004  7ad8              LDRB     r0,[r3,#0xb]  ; paramCB
000006  7a99              LDRB     r1,[r3,#0xa]  ; paramCB
000008  ea402101          ORR      r1,r0,r1,LSL #8
;;;14702  	uint32 Call4gstate = (PARAM_GetHelmetConnectState() << 16) | (PARAM_GetCallerIgnoreState() << 8) | paramCB.runtime.iot.signal4G;
00000c  7fd8              LDRB     r0,[r3,#0x1f]  ; paramCB
00000e  7f9a              LDRB     r2,[r3,#0x1e]  ; paramCB
000010  0400              LSLS     r0,r0,#16
000012  ea402402          ORR      r4,r0,r2,LSL #8
000016  f8130c70          LDRB     r0,[r3,#-0x70]  ; paramCB
00001a  4304              ORRS     r4,r4,r0
;;;14703  
;;;14704  	uint8  light = PARAM_GetLightSwitch()|(paramCB.runtime.headAutoLight << 4);
00001c  7d18              LDRB     r0,[r3,#0x14]  ; paramCB
00001e  f8932069          LDRB     r2,[r3,#0x69]  ; paramCB
000022  ea401002          ORR      r0,r0,r2,LSL #4
000026  b2c5              UXTB     r5,r0
;;;14705  		
;;;14706  	DISPLAY_UpdateValue(DISPLAY_COMMON_TIME1, uwTime);
000028  200b              MOVS     r0,#0xb
00002a  f7fffffe          BL       DISPLAY_UpdateValue
;;;14707  	DISPLAY_UpdateValue(DISPLAY_COMMON_BATTARY, PARAM_GetBatteryPercent());
00002e  f8131c7c          LDRB     r1,[r3,#-0x7c]  ; paramCB
000032  200c              MOVS     r0,#0xc
000034  f7fffffe          BL       DISPLAY_UpdateValue
;;;14708  	DISPLAY_UpdateValue(DISPLAY_COMMON_CRUISE, PARAM_GetCruiseState());
000038  7c19              LDRB     r1,[r3,#0x10]  ; paramCB
00003a  2011              MOVS     r0,#0x11
00003c  f7fffffe          BL       DISPLAY_UpdateValue
;;;14709  	if (PARAM_GetExistBle())
000040  f8930135          LDRB     r0,[r3,#0x135]  ; paramCB
000044  f5a373f7          SUB      r3,r3,#0x1ee
000048  b120              CBZ      r0,|L362.84|
;;;14710  	{
;;;14711  		DISPLAY_UpdateValue(DISPLAY_COMMON_BLUE_STATE, PARAM_GetBleConnectState());
00004a  f8931203          LDRB     r1,[r3,#0x203]  ; paramCB
00004e  200d              MOVS     r0,#0xd
000050  f7fffffe          BL       DISPLAY_UpdateValue
                  |L362.84|
;;;14712  	}
;;;14713  	
;;;14714  	DISPLAY_UpdateValue(DISPLAY_COMMON_LIGHT, light);
000054  4629              MOV      r1,r5
000056  200f              MOVS     r0,#0xf
000058  f7fffffe          BL       DISPLAY_UpdateValue
;;;14715  	DISPLAY_UpdateValue(DISPLAY_COMMON_ERROR, (PARAM_GetErrorCode() == 0 ? 0:1));
00005c  f8930221          LDRB     r0,[r3,#0x221]  ; paramCB
000060  b108              CBZ      r0,|L362.102|
000062  2101              MOVS     r1,#1
000064  e000              B        |L362.104|
                  |L362.102|
000066  2100              MOVS     r1,#0
                  |L362.104|
000068  2010              MOVS     r0,#0x10
00006a  f7fffffe          BL       DISPLAY_UpdateValue
;;;14716  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_4G, Call4gstate);
00006e  4621              MOV      r1,r4
000070  2012              MOVS     r0,#0x12
000072  f7fffffe          BL       DISPLAY_UpdateValue
;;;14717  	DISPLAY_UpdateValue(DISPLAY_COMMON_SIGNAL_GPS, paramCB.runtime.iot.signalGps);
000076  f20313ef          ADD      r3,r3,#0x1ef
00007a  2013              MOVS     r0,#0x13
00007c  f8131c73          LDRB     r1,[r3,#-0x73]  ; paramCB
000080  f7fffffe          BL       DISPLAY_UpdateValue
;;;14718  	DISPLAY_UpdateValue(DISPLAY_COMMON_BATTARY_HELMET, ((uint16)PARAM_GetHelmetConnectState() << 8) |PARAM_GetHelmetBattery());
000084  7fd8              LDRB     r0,[r3,#0x1f]  ; paramCB
000086  7f99              LDRB     r1,[r3,#0x1e]  ; paramCB
000088  ea402101          ORR      r1,r0,r1,LSL #8
00008c  2014              MOVS     r0,#0x14
00008e  f7fffffe          BL       DISPLAY_UpdateValue
;;;14719  	DISPLAY_UpdateValue(DISPLAY_COMMON_VIDEO, paramCB.runtime.videoSwitch);
000092  7d99              LDRB     r1,[r3,#0x16]  ; paramCB
000094  2015              MOVS     r0,#0x15
000096  f7fffffe          BL       DISPLAY_UpdateValue
;;;14720  	DISPLAY_UpdateValue(DISPLAY_COMMON_PHOTO, paramCB.runtime.photoSwitch);
00009a  7dd9              LDRB     r1,[r3,#0x17]  ; paramCB
00009c  2016              MOVS     r0,#0x16
00009e  f7fffffe          BL       DISPLAY_UpdateValue
;;;14721  	DISPLAY_UpdateValue(DISPLAY_COMMON_VOICE, paramCB.runtime.voiceSwitch);
0000a2  7e19              LDRB     r1,[r3,#0x18]  ; paramCB
0000a4  e8bd4030          POP      {r4,r5,lr}
0000a8  2017              MOVS     r0,#0x17
0000aa  f7ffbffe          B.W      DISPLAY_UpdateValue
;;;14722  }
;;;14723  
                          ENDP

0000ae  0000              DCW      0x0000
                  |L362.176|
                          DCD      paramCB+0x1ee

                          AREA ||i.DISPLAY_VerifyDay||, CODE, READONLY, ALIGN=1

                  DISPLAY_VerifyDay PROC
;;;154    // 年月日数值合法性处理，根据输入的年、月数值，自动调整日值，以保证合法性
;;;155    uint8 DISPLAY_VerifyDay(uint16 year, uint8 month, uint8 *day)
000000  b510              PUSH     {r4,lr}
;;;156    {
;;;157    	uint8 localDay;
;;;158    	
;;;159    	// 调整月后，对日的数值合法性进行处理
;;;160    	// 4,6,9,11月，30天，当调到当前月时，日不能超过30
;;;161    	if((4 == month)||(6 == month)||(9 == month)||(11 == month))
;;;162    	{
;;;163    		localDay = 30;
;;;164    		if (*day > 30)
000002  7813              LDRB     r3,[r2,#0]
000004  2904              CMP      r1,#4                 ;161
000006  d00d              BEQ      |L363.36|
000008  2906              CMP      r1,#6                 ;161
00000a  d00b              BEQ      |L363.36|
00000c  2909              CMP      r1,#9                 ;161
00000e  d009              BEQ      |L363.36|
000010  290b              CMP      r1,#0xb               ;161
000012  d007              BEQ      |L363.36|
;;;165    		{
;;;166    			*day = 30;
;;;167    		}
;;;168    	}
;;;169    	// 2月，根据平年闰年处理
;;;170    	else if(2 == month)
000014  2902              CMP      r1,#2
000016  d00b              BEQ      |L363.48|
;;;171    	{
;;;172    		// 闰年
;;;173    		if ((year%400==0) || ((year%4==0)&&(year%100!=0)))
;;;174    		{
;;;175    			localDay = 29;
;;;176    			if (*day > 29)
;;;177    			{
;;;178    				*day = 29;
;;;179    			}
;;;180    		}
;;;181    		// 平年
;;;182    		else
;;;183    		{
;;;184    			localDay = 28;
;;;185    			if (*day > 28)
;;;186    			{
;;;187    				*day = 28;
;;;188    			}
;;;189    		}
;;;190    	}
;;;191    	// 1,3,5,7,8,10,12月，31天
;;;192    	else
;;;193    	{
;;;194    		localDay = 31;
000018  201f              MOVS     r0,#0x1f
;;;195    		if (*day > 31)
00001a  2b1f              CMP      r3,#0x1f
00001c  d901              BLS      |L363.34|
;;;196    		{
;;;197    			*day = 31;
00001e  211f              MOVS     r1,#0x1f
000020  7011              STRB     r1,[r2,#0]
                  |L363.34|
;;;198    		}
;;;199    	}
;;;200    
;;;201    	return localDay;
;;;202    }
000022  bd10              POP      {r4,pc}
                  |L363.36|
000024  201e              MOVS     r0,#0x1e              ;163
000026  2b1e              CMP      r3,#0x1e              ;164
000028  d9fb              BLS      |L363.34|
00002a  211e              MOVS     r1,#0x1e              ;166
00002c  7011              STRB     r1,[r2,#0]            ;166
                  |L363.46|
00002e  bd10              POP      {r4,pc}
                  |L363.48|
000030  f44f71c8          MOV      r1,#0x190             ;173
000034  fbb0f4f1          UDIV     r4,r0,r1              ;173
000038  fb010114          MLS      r1,r1,r4,r0           ;173
00003c  b139              CBZ      r1,|L363.78|
00003e  0781              LSLS     r1,r0,#30             ;173
000040  d10b              BNE      |L363.90|
000042  2164              MOVS     r1,#0x64              ;173
000044  fbb0f4f1          UDIV     r4,r0,r1              ;173
000048  fb010014          MLS      r0,r1,r4,r0           ;173
00004c  b128              CBZ      r0,|L363.90|
                  |L363.78|
00004e  201d              MOVS     r0,#0x1d              ;175
000050  2b1d              CMP      r3,#0x1d              ;176
000052  d9ec              BLS      |L363.46|
000054  211d              MOVS     r1,#0x1d              ;178
000056  7011              STRB     r1,[r2,#0]            ;178
                  |L363.88|
000058  bd10              POP      {r4,pc}
                  |L363.90|
00005a  201c              MOVS     r0,#0x1c              ;184
00005c  2b1c              CMP      r3,#0x1c              ;185
00005e  d9fb              BLS      |L363.88|
000060  211c              MOVS     r1,#0x1c              ;187
000062  7011              STRB     r1,[r2,#0]            ;187
000064  bd10              POP      {r4,pc}
;;;203    
                          ENDP


                          AREA ||i.GetPicIDFromWheelSizeID||, CODE, READONLY, ALIGN=1

                  GetPicIDFromWheelSizeID PROC
;;;48     
;;;49     PIC_ID_E GetPicIDFromWheelSizeID(uint16 wheelSizeID)
000000  4770              BX       lr
;;;50     {
;;;51     //	PIC_ID_E picID = PIC_ID_WHEELSIZE_26;
;;;52     //	
;;;53     //	switch (wheelSizeID)
;;;54     //	{
;;;55     //		case 45:
;;;56     //			picID = PIC_ID_WHEELSIZE_4_5;
;;;57     //			break;
;;;58     
;;;59     //		case 60:
;;;60     //			picID = PIC_ID_WHEELSIZE_6;
;;;61     //			break;
;;;62     //		case 64:
;;;63     //			picID = PIC_ID_WHEELSIZE_6_4;
;;;64     //			break;
;;;65     
;;;66     //		case 80:
;;;67     //			picID = PIC_ID_WHEELSIZE_8;
;;;68     //			break;
;;;69     
;;;70     //		case 100:
;;;71     //			picID = PIC_ID_WHEELSIZE_10;
;;;72     //			break;
;;;73     
;;;74     //		case 120:
;;;75     //			picID = PIC_ID_WHEELSIZE_12;
;;;76     //			break;
;;;77     //			
;;;78     //		case 140:
;;;79     //			picID = PIC_ID_WHEELSIZE_14;
;;;80     //			break;
;;;81     //			
;;;82     //		case 160:
;;;83     //			picID = PIC_ID_WHEELSIZE_16;
;;;84     //			break;
;;;85     //			
;;;86     //		case 180:
;;;87     //			picID = PIC_ID_WHEELSIZE_18;
;;;88     //			break;
;;;89     //			
;;;90     //		case 200:
;;;91     //			picID = PIC_ID_WHEELSIZE_20;
;;;92     //			break;
;;;93     //			
;;;94     //		case 220:
;;;95     //			picID = PIC_ID_WHEELSIZE_22;
;;;96     //			break;
;;;97     //			
;;;98     //		case 240:
;;;99     //			picID = PIC_ID_WHEELSIZE_24;
;;;100    //			break;
;;;101    //			
;;;102    //		case 260:
;;;103    //			picID = PIC_ID_WHEELSIZE_26;
;;;104    //			break;
;;;105    //			
;;;106    //		case 270:
;;;107    //			picID = PIC_ID_WHEELSIZE_27;
;;;108    //			break;
;;;109    //			
;;;110    //		case 275:
;;;111    //			picID = PIC_ID_WHEELSIZE_275;
;;;112    //			break;
;;;113    //			
;;;114    //		case 280:
;;;115    //			picID = PIC_ID_WHEELSIZE_28;
;;;116    //			break;
;;;117    //			
;;;118    //		case 290:
;;;119    //			picID = PIC_ID_WHEELSIZE_29;
;;;120    //			break;
;;;121    //			
;;;122    //		/*case PARAM_WHEEL_SIZE_700C:
;;;123    //			picID = PIC_ID_WHEELSIZE_700C;
;;;124    //			break;*/
;;;125    
;;;126    //		default:
;;;127    //			break;
;;;128    //	}
;;;129    
;;;130    //	return picID;
;;;131    }
;;;132    
                          ENDP


                          AREA ||i.PassWordChangeOK_Return||, CODE, READONLY, ALIGN=2

                  PassWordChangeOK_Return PROC
;;;16932  
;;;16933  void PassWordChangeOK_Return(uint32 param)
000000  b508              PUSH     {r3,lr}
;;;16934  {
;;;16935  	displayStateCB.menu.root.password.numberCursor = 0x0F;
000002  481f              LDR      r0,|L365.128|
000004  210f              MOVS     r1,#0xf
000006  f8801b39          STRB     r1,[r0,#0xb39]
;;;16936  	displayStateCB.menu.root.enterFlag = 1;
00000a  2101              MOVS     r1,#1
00000c  f8801b31          STRB     r1,[r0,#0xb31]
;;;16937  	LCD_DrawAreaColor(70, 32, 230, 130, LCD_COLOR_BACKGROUND);
000010  f64100e4          MOV      r0,#0x18e4
000014  9000              STR      r0,[sp,#0]
000016  2382              MOVS     r3,#0x82
000018  22e6              MOVS     r2,#0xe6
00001a  2120              MOVS     r1,#0x20
00001c  2046              MOVS     r0,#0x46
00001e  f7fffffe          BL       LCD_DrawAreaColor
;;;16938  	
;;;16939  	// 标题字体
;;;16940  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_TITILE_X, UI_ITEM_COODINATE_MENU_PASSWORD_TITILE_Y, PIC_ID_PASSWORD_TITILE, LCD_OPERATOR_MODE_DRAW);
000022  2300              MOVS     r3,#0
000024  f2401249          MOV      r2,#0x149
000028  212f              MOVS     r1,#0x2f
00002a  205b              MOVS     r0,#0x5b
00002c  f7fffffe          BL       LCD_DrawBmpByID
;;;16941  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_CHANGE_PASSWORD_TITILE_X, UI_ITEM_COODINATE_MENU_CHANGE_PASSWORD_TITILE_Y, PIC_ID_CHANGE_PASSWORD_TITILE_W, LCD_OPERATOR_MODE_DRAW);
000030  2300              MOVS     r3,#0
000032  2271              MOVS     r2,#0x71
000034  2156              MOVS     r1,#0x56
000036  205a              MOVS     r0,#0x5a
000038  f7fffffe          BL       LCD_DrawBmpByID
;;;16942  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_BACK_X, UI_ITEM_COODINATE_MENU_PASSWORD_BACK_Y, PIC_ID_PASSWORD_BACK, LCD_OPERATOR_MODE_DRAW);
00003c  2300              MOVS     r3,#0
00003e  f240123b          MOV      r2,#0x13b
000042  2180              MOVS     r1,#0x80
000044  205b              MOVS     r0,#0x5b
000046  f7fffffe          BL       LCD_DrawBmpByID
;;;16943  	
;;;16944  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_SWITCH_X, UI_ITEM_COODINATE_MENU_PASSWORD_SWITCH_Y, PIC_ID_G_ON, LCD_OPERATOR_MODE_DRAW);
00004a  2300              MOVS     r3,#0
00004c  229b              MOVS     r2,#0x9b
00004e  2130              MOVS     r1,#0x30
000050  20fa              MOVS     r0,#0xfa
000052  f7fffffe          BL       LCD_DrawBmpByID
;;;16945  
;;;16946  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR1_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_BACKGROUND);
000056  2301              MOVS     r3,#1
000058  22e5              MOVS     r2,#0xe5
00005a  212f              MOVS     r1,#0x2f
00005c  2048              MOVS     r0,#0x48
00005e  f7fffffe          BL       LCD_DrawBmpByID
;;;16947  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR2_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_DRAW);
000062  2300              MOVS     r3,#0
000064  22e5              MOVS     r2,#0xe5
000066  2156              MOVS     r1,#0x56
000068  2048              MOVS     r0,#0x48
00006a  f7fffffe          BL       LCD_DrawBmpByID
;;;16948  	LCD_DrawBmpByID(UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_X, UI_ITEM_COODINATE_MENU_PASSWORD_CURSOR7_Y, PIC_ID_MENU_CURSOR_K, LCD_OPERATOR_MODE_BACKGROUND);
00006e  b001              ADD      sp,sp,#4
000070  2301              MOVS     r3,#1
000072  22e5              MOVS     r2,#0xe5
000074  2180              MOVS     r1,#0x80
000076  2048              MOVS     r0,#0x48
000078  f85deb04          POP      {lr}
00007c  f7ffbffe          B.W      LCD_DrawBmpByID
;;;16949  
;;;16950  }
;;;16951  
                          ENDP

                  |L365.128|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  displayStateCB
                          %        2916
                  stBlinkCB
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  s_ulStartTimeLowSpeed
                          DCD      0x00000000
                  s_ulStartTimeHighSpeed
                          DCD      0x00000000
                  s_ulStartTimeSuperSpeed
                          DCD      0x00000000
                  s_ulStartTime_1_10
                          DCD      0x00000000
                  s_ulWaitTime_1_10
                          DCD      0x00000064
                  s_ulStartTime_3_4
                          DCD      0x00000000
                  s_ulWaitTime_3_4
                          DCD      0x000002ee

;*** Start embedded assembler ***

#line 1 "User\\display.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_display_c_b032f22b____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___9_display_c_b032f22b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_display_c_b032f22b____REVSH|
#line 128
|__asm___9_display_c_b032f22b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
