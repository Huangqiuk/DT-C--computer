; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_exmc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_exmc.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_exmc.crf Libraries\src\gd32f10x_exmc.c]
                          THUMB

                          AREA ||i.exmc_ecc_get||, CODE, READONLY, ALIGN=1

                  exmc_ecc_get PROC
;;;388    */
;;;389    uint32_t exmc_ecc_get(uint32_t nand_bank)
000000  0140              LSLS     r0,r0,#5
;;;390    {
;;;391        return (EXMC_NECC(nand_bank));
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6d40              LDR      r0,[r0,#0x54]
;;;392    }
000008  4770              BX       lr
;;;393    
                          ENDP


                          AREA ||i.exmc_flag_clear||, CODE, READONLY, ALIGN=1

                  exmc_flag_clear PROC
;;;586    */
;;;587    void exmc_flag_clear(uint32_t bank, uint32_t flag)
000000  0140              LSLS     r0,r0,#5
;;;588    {
;;;589        /* NAND bank1,bank2 or PC card bank3 */
;;;590        EXMC_NPINTEN(bank) &= ~flag;
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6c42              LDR      r2,[r0,#0x44]
000008  438a              BICS     r2,r2,r1
00000a  6442              STR      r2,[r0,#0x44]
;;;591    }
00000c  4770              BX       lr
;;;592    
                          ENDP


                          AREA ||i.exmc_flag_get||, CODE, READONLY, ALIGN=1

                  exmc_flag_get PROC
;;;554    */
;;;555    FlagStatus exmc_flag_get(uint32_t bank, uint32_t flag)
000000  0140              LSLS     r0,r0,#5
;;;556    {
;;;557        uint32_t status = 0x00000000U;
;;;558    
;;;559        /* NAND bank1,bank2 or PC card bank3 */
;;;560        status = EXMC_NPINTEN(bank);
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6c40              LDR      r0,[r0,#0x44]
;;;561        
;;;562        if ((status & flag) != (uint32_t)flag ){
000008  4381              BICS     r1,r1,r0
00000a  d001              BEQ      |L3.16|
;;;563            /* flag is reset */
;;;564            return RESET;
00000c  2000              MOVS     r0,#0
;;;565        }else{
;;;566            /* flag is set */
;;;567            return SET;
;;;568        }
;;;569    }
00000e  4770              BX       lr
                  |L3.16|
000010  2001              MOVS     r0,#1                 ;567
000012  4770              BX       lr
;;;570    
                          ENDP


                          AREA ||i.exmc_interrupt_disable||, CODE, READONLY, ALIGN=1

                  exmc_interrupt_disable PROC
;;;532    */
;;;533    void exmc_interrupt_disable(uint32_t bank, uint32_t interrupt_source)
000000  0140              LSLS     r0,r0,#5
;;;534    {
;;;535        /* NAND bank1,bank2 or PC card bank3 */
;;;536        EXMC_NPINTEN(bank) &= ~interrupt_source;
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6c42              LDR      r2,[r0,#0x44]
000008  438a              BICS     r2,r2,r1
00000a  6442              STR      r2,[r0,#0x44]
;;;537    }
00000c  4770              BX       lr
;;;538    
                          ENDP


                          AREA ||i.exmc_interrupt_enable||, CODE, READONLY, ALIGN=1

                  exmc_interrupt_enable PROC
;;;511    */
;;;512    void exmc_interrupt_enable(uint32_t bank, uint32_t interrupt_source)
000000  0140              LSLS     r0,r0,#5
;;;513    {
;;;514        /* NAND bank1, bank2 or PC card bank3 */
;;;515        EXMC_NPINTEN(bank) |= interrupt_source;
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6c42              LDR      r2,[r0,#0x44]
000008  430a              ORRS     r2,r2,r1
00000a  6442              STR      r2,[r0,#0x44]
;;;516    }
00000c  4770              BX       lr
;;;517    
                          ENDP


                          AREA ||i.exmc_interrupt_flag_clear||, CODE, READONLY, ALIGN=1

                  exmc_interrupt_flag_clear PROC
;;;641    */
;;;642    void exmc_interrupt_flag_clear(uint32_t bank, uint32_t interrupt_source)
000000  0140              LSLS     r0,r0,#5
;;;643    {
;;;644        /* NAND bank1, bank2 or PC card bank3 */
;;;645        EXMC_NPINTEN(bank) &= ~(interrupt_source >> INTEN_INTS_OFFSET);
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6c42              LDR      r2,[r0,#0x44]
000008  ea2201d1          BIC      r1,r2,r1,LSR #3
00000c  6441              STR      r1,[r0,#0x44]
;;;646    }
00000e  4770              BX       lr
                          ENDP


                          AREA ||i.exmc_interrupt_flag_get||, CODE, READONLY, ALIGN=1

                  exmc_interrupt_flag_get PROC
;;;607    */
;;;608    FlagStatus exmc_interrupt_flag_get(uint32_t bank, uint32_t interrupt_source)
000000  0140              LSLS     r0,r0,#5
;;;609    {
;;;610        uint32_t status = 0x00000000U,interrupt_enable = 0x00000000U,interrupt_state = 0x00000000U;
;;;611    
;;;612        /* NAND bank1,bank2 or PC card bank3 */
;;;613        status = EXMC_NPINTEN(bank);
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6c40              LDR      r0,[r0,#0x44]
;;;614        interrupt_state = (status & (interrupt_source >> INTEN_INTS_OFFSET));
000008  ea0002d1          AND      r2,r0,r1,LSR #3
;;;615    
;;;616        interrupt_enable = (status & interrupt_source);
00000c  4008              ANDS     r0,r0,r1
;;;617    
;;;618        if ((interrupt_enable) && (interrupt_state)){
00000e  2800              CMP      r0,#0
000010  d002              BEQ      |L7.24|
000012  b10a              CBZ      r2,|L7.24|
;;;619            /* interrupt flag is set */
;;;620            return SET;
000014  2001              MOVS     r0,#1
;;;621        }else{
;;;622            /* interrupt flag is reset */
;;;623            return RESET;
;;;624        }
;;;625    }
000016  4770              BX       lr
                  |L7.24|
000018  2000              MOVS     r0,#0                 ;623
00001a  4770              BX       lr
;;;626    
                          ENDP


                          AREA ||i.exmc_nand_deinit||, CODE, READONLY, ALIGN=1

                  exmc_nand_deinit PROC
;;;260    */
;;;261    void exmc_nand_deinit(uint32_t nand_bank)
000000  2118              MOVS     r1,#0x18
;;;262    {
;;;263        /* EXMC_BANK1_NAND or EXMC_BANK2_NAND */
;;;264        EXMC_NPCTL(nand_bank) = BANK1_2_NPCTL_RESET;
000002  0140              LSLS     r0,r0,#5
000004  f1a040c0          SUB      r0,r0,#0x60000000
000008  6401              STR      r1,[r0,#0x40]
;;;265        EXMC_NPINTEN(nand_bank) = BANK1_2_NPINTEN_RESET;
00000a  2140              MOVS     r1,#0x40
00000c  6441              STR      r1,[r0,#0x44]
;;;266        EXMC_NPCTCFG(nand_bank) = BANK1_2_NPCTCFG_RESET;
00000e  f04f31fc          MOV      r1,#0xfcfcfcfc
000012  6481              STR      r1,[r0,#0x48]
;;;267        EXMC_NPATCFG(nand_bank) = BANK1_2_NPATCFG_RESET;
000014  64c1              STR      r1,[r0,#0x4c]
;;;268    }
000016  4770              BX       lr
;;;269    
                          ENDP


                          AREA ||i.exmc_nand_disable||, CODE, READONLY, ALIGN=1

                  exmc_nand_disable PROC
;;;357    */
;;;358    void exmc_nand_disable(uint32_t nand_bank)
000000  0140              LSLS     r0,r0,#5
;;;359    {
;;;360        EXMC_NPCTL(nand_bank) &= ~EXMC_NPCTL_NDBKEN;
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6c01              LDR      r1,[r0,#0x40]
000008  f0210104          BIC      r1,r1,#4
00000c  6401              STR      r1,[r0,#0x40]
;;;361    }
00000e  4770              BX       lr
;;;362    
                          ENDP


                          AREA ||i.exmc_nand_ecc_config||, CODE, READONLY, ALIGN=1

                  exmc_nand_ecc_config PROC
;;;370    */
;;;371    void exmc_nand_ecc_config(uint32_t nand_bank, ControlStatus newvalue)
000000  0140              LSLS     r0,r0,#5
;;;372    {
;;;373        if (ENABLE == newvalue){
;;;374            /* enable the selected NAND bank ECC function */
;;;375            EXMC_NPCTL(nand_bank) |= EXMC_NPCTL_ECCEN;
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  2901              CMP      r1,#1                 ;373
000008  d004              BEQ      |L10.20|
;;;376        }else{
;;;377            /* disable the selected NAND bank ECC function */
;;;378            EXMC_NPCTL(nand_bank) &= ~EXMC_NPCTL_ECCEN;
00000a  6c01              LDR      r1,[r0,#0x40]
00000c  f0210140          BIC      r1,r1,#0x40
000010  6401              STR      r1,[r0,#0x40]
;;;379        }
;;;380    }
000012  4770              BX       lr
                  |L10.20|
000014  6c01              LDR      r1,[r0,#0x40]         ;375
000016  f0410140          ORR      r1,r1,#0x40           ;375
00001a  6401              STR      r1,[r0,#0x40]         ;375
00001c  4770              BX       lr
;;;381    
                          ENDP


                          AREA ||i.exmc_nand_enable||, CODE, READONLY, ALIGN=1

                  exmc_nand_enable PROC
;;;345    */
;;;346    void exmc_nand_enable(uint32_t nand_bank)
000000  0140              LSLS     r0,r0,#5
;;;347    {
;;;348        EXMC_NPCTL(nand_bank) |= EXMC_NPCTL_NDBKEN;
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6c01              LDR      r1,[r0,#0x40]
000008  f0410104          ORR      r1,r1,#4
00000c  6401              STR      r1,[r0,#0x40]
;;;349    }
00000e  4770              BX       lr
;;;350    
                          ENDP


                          AREA ||i.exmc_nand_init||, CODE, READONLY, ALIGN=1

                  exmc_nand_init PROC
;;;284    */
;;;285    void exmc_nand_init(exmc_nand_parameter_struct* exmc_nand_init_struct)
000000  b570              PUSH     {r4-r6,lr}
;;;286    {
;;;287        uint32_t npctl = 0x00000000U, npctcfg = 0x00000000U, npatcfg = 0x00000000U;
;;;288        
;;;289        npctl = (uint32_t)(exmc_nand_init_struct->wait_feature << NPCTL_NDWTEN_OFFSET)|
000002  6842              LDR      r2,[r0,#4]
000004  6941              LDR      r1,[r0,#0x14]
000006  6903              LDR      r3,[r0,#0x10]
000008  4311              ORRS     r1,r1,r2
00000a  6982              LDR      r2,[r0,#0x18]
00000c  0052              LSLS     r2,r2,#1
00000e  ea421283          ORR      r2,r2,r3,LSL #6
000012  4311              ORRS     r1,r1,r2
000014  68c2              LDR      r2,[r0,#0xc]
000016  4311              ORRS     r1,r1,r2
000018  6882              LDR      r2,[r0,#8]
00001a  4311              ORRS     r1,r1,r2
00001c  f0410208          ORR      r2,r1,#8
;;;290                           EXMC_NPCTL_NDTP |
;;;291                           exmc_nand_init_struct->databus_width |
;;;292                          (exmc_nand_init_struct->ecc_logic << NPCTL_ECCEN_OFFSET)|
;;;293                           exmc_nand_init_struct->ecc_size |
;;;294                           exmc_nand_init_struct->ctr_latency |
;;;295                           exmc_nand_init_struct->atr_latency;
;;;296    
;;;297        npctcfg = (uint32_t)((exmc_nand_init_struct->common_space_timing->setuptime - 1U) & EXMC_NPCTCFG_COMSET ) |
000020  69c1              LDR      r1,[r0,#0x1c]
000022  f64f76ff          MOV      r6,#0xffff
000026  7b0b              LDRB     r3,[r1,#0xc]
000028  688c              LDR      r4,[r1,#8]
00002a  1e5b              SUBS     r3,r3,#1
00002c  1e64              SUBS     r4,r4,#1
00002e  b2db              UXTB     r3,r3
000030  ea062404          AND      r4,r6,r4,LSL #8
000034  4323              ORRS     r3,r3,r4
000036  790c              LDRB     r4,[r1,#4]
000038  7809              LDRB     r1,[r1,#0]
00003a  ea434304          ORR      r3,r3,r4,LSL #16
00003e  1e49              SUBS     r1,r1,#1
000040  ea436301          ORR      r3,r3,r1,LSL #24
;;;298                            (((exmc_nand_init_struct->common_space_timing->waittime - 1U) << NPCTCFG_COMWAIT_OFFSET) & EXMC_NPCTCFG_COMWAIT ) |
;;;299                            ((exmc_nand_init_struct->common_space_timing->holdtime << NPCTCFG_COMHLD_OFFSET) & EXMC_NPCTCFG_COMHLD ) |
;;;300                            (((exmc_nand_init_struct->common_space_timing->databus_hiztime - 1U) << NPCTCFG_COMHIZ_OFFSET) & EXMC_NPCTCFG_COMHIZ );
;;;301    
;;;302        npatcfg = (uint32_t)((exmc_nand_init_struct->attribute_space_timing->setuptime - 1U) & EXMC_NPATCFG_ATTSET ) |
000044  6a01              LDR      r1,[r0,#0x20]
000046  7b0c              LDRB     r4,[r1,#0xc]
000048  688d              LDR      r5,[r1,#8]
00004a  1e64              SUBS     r4,r4,#1
00004c  1e6d              SUBS     r5,r5,#1
00004e  b2e4              UXTB     r4,r4
000050  ea062505          AND      r5,r6,r5,LSL #8
000054  432c              ORRS     r4,r4,r5
000056  790d              LDRB     r5,[r1,#4]
000058  7809              LDRB     r1,[r1,#0]
00005a  ea444405          ORR      r4,r4,r5,LSL #16
00005e  1e49              SUBS     r1,r1,#1
000060  ea446101          ORR      r1,r4,r1,LSL #24
;;;303                            (((exmc_nand_init_struct->attribute_space_timing->waittime - 1U) << NPATCFG_ATTWAIT_OFFSET) & EXMC_NPATCFG_ATTWAIT ) |
;;;304                            ((exmc_nand_init_struct->attribute_space_timing->holdtime << NPATCFG_ATTHLD_OFFSET) & EXMC_NPATCFG_ATTHLD ) |
;;;305                            (((exmc_nand_init_struct->attribute_space_timing->databus_hiztime -1U) << NPATCFG_ATTHIZ_OFFSET) & EXMC_NPATCFG_ATTHIZ );
;;;306    
;;;307        /* EXMC_BANK1_NAND or EXMC_BANK2_NAND initialize */
;;;308        EXMC_NPCTL(exmc_nand_init_struct->nand_bank) = npctl;
000064  6804              LDR      r4,[r0,#0]
000066  0164              LSLS     r4,r4,#5
000068  f1a444c0          SUB      r4,r4,#0x60000000
00006c  6422              STR      r2,[r4,#0x40]
;;;309        EXMC_NPCTCFG(exmc_nand_init_struct->nand_bank) = npctcfg;
00006e  6802              LDR      r2,[r0,#0]
000070  0152              LSLS     r2,r2,#5
000072  f1a242c0          SUB      r2,r2,#0x60000000
000076  6493              STR      r3,[r2,#0x48]
;;;310        EXMC_NPATCFG(exmc_nand_init_struct->nand_bank) = npatcfg;
000078  6800              LDR      r0,[r0,#0]
00007a  0140              LSLS     r0,r0,#5
00007c  f1a040c0          SUB      r0,r0,#0x60000000
000080  64c1              STR      r1,[r0,#0x4c]
;;;311    }
000082  bd70              POP      {r4-r6,pc}
;;;312    
                          ENDP


                          AREA ||i.exmc_nand_struct_para_init||, CODE, READONLY, ALIGN=1

                  exmc_nand_struct_para_init PROC
;;;318    */
;;;319    void exmc_nand_struct_para_init(exmc_nand_parameter_struct* exmc_nand_init_struct)
000000  2101              MOVS     r1,#1
;;;320    {
;;;321        /* configure the structure with default value */
;;;322        exmc_nand_init_struct->nand_bank = EXMC_BANK1_NAND;
000002  6001              STR      r1,[r0,#0]
;;;323        exmc_nand_init_struct->wait_feature = DISABLE;
000004  2100              MOVS     r1,#0
000006  6181              STR      r1,[r0,#0x18]
;;;324        exmc_nand_init_struct->databus_width = EXMC_NAND_DATABUS_WIDTH_8B;
000008  6141              STR      r1,[r0,#0x14]
;;;325        exmc_nand_init_struct->ecc_logic = DISABLE;
00000a  6101              STR      r1,[r0,#0x10]
;;;326        exmc_nand_init_struct->ecc_size = EXMC_ECC_SIZE_256BYTES;
00000c  6041              STR      r1,[r0,#4]
;;;327        exmc_nand_init_struct->ctr_latency = 0x0U;
00000e  60c1              STR      r1,[r0,#0xc]
;;;328        exmc_nand_init_struct->atr_latency = 0x0U;
000010  6081              STR      r1,[r0,#8]
;;;329        exmc_nand_init_struct->common_space_timing->setuptime = 0xFCU;
000012  69c2              LDR      r2,[r0,#0x1c]
000014  21fc              MOVS     r1,#0xfc
000016  60d1              STR      r1,[r2,#0xc]
;;;330        exmc_nand_init_struct->common_space_timing->waittime = 0xFCU;
000018  69c2              LDR      r2,[r0,#0x1c]
00001a  6091              STR      r1,[r2,#8]
;;;331        exmc_nand_init_struct->common_space_timing->holdtime = 0xFCU;
00001c  69c2              LDR      r2,[r0,#0x1c]
00001e  6051              STR      r1,[r2,#4]
;;;332        exmc_nand_init_struct->common_space_timing->databus_hiztime = 0xFCU;
000020  69c2              LDR      r2,[r0,#0x1c]
000022  6011              STR      r1,[r2,#0]
;;;333        exmc_nand_init_struct->attribute_space_timing->setuptime = 0xFCU;
000024  6a02              LDR      r2,[r0,#0x20]
000026  60d1              STR      r1,[r2,#0xc]
;;;334        exmc_nand_init_struct->attribute_space_timing->waittime = 0xFCU;
000028  6a02              LDR      r2,[r0,#0x20]
00002a  6091              STR      r1,[r2,#8]
;;;335        exmc_nand_init_struct->attribute_space_timing->holdtime = 0xFCU;
00002c  6a02              LDR      r2,[r0,#0x20]
00002e  6051              STR      r1,[r2,#4]
;;;336        exmc_nand_init_struct->attribute_space_timing->databus_hiztime = 0xFCU;
000030  6a00              LDR      r0,[r0,#0x20]
000032  6001              STR      r1,[r0,#0]
;;;337    }
000034  4770              BX       lr
;;;338    
                          ENDP


                          AREA ||i.exmc_norsram_deinit||, CODE, READONLY, ALIGN=1

                  exmc_norsram_deinit PROC
;;;100    */
;;;101    void exmc_norsram_deinit(uint32_t norsram_region)
000000  00c1              LSLS     r1,r0,#3
;;;102    {
;;;103        /* reset the registers */
;;;104        if(EXMC_BANK0_NORSRAM_REGION0 == norsram_region){
;;;105            EXMC_SNCTL(norsram_region) = BANK0_SNCTL0_REGION_RESET;
;;;106        }else{
;;;107            EXMC_SNCTL(norsram_region) = BANK0_SNCTL1_2_3_REGION_RESET;
000002  f1a141c0          SUB      r1,r1,#0x60000000
000006  2800              CMP      r0,#0                 ;104
000008  d008              BEQ      |L14.28|
00000a  f24300d2          MOV      r0,#0x30d2
00000e  6008              STR      r0,[r1,#0]
                  |L14.16|
;;;108        }
;;;109    
;;;110        EXMC_SNTCFG(norsram_region) = BANK0_SNTCFG_RESET;
000010  f06f4070          MVN      r0,#0xf0000000
000014  6048              STR      r0,[r1,#4]
;;;111        EXMC_SNWTCFG(norsram_region) = BANK0_SNWTCFG_RESET;
000016  f8c10104          STR      r0,[r1,#0x104]
;;;112    }
00001a  4770              BX       lr
                  |L14.28|
00001c  f04f4220          MOV      r2,#0xa0000000        ;105
000020  f24300db          MOV      r0,#0x30db            ;105
000024  6010              STR      r0,[r2,#0]            ;105
000026  e7f3              B        |L14.16|
;;;113    
                          ENDP


                          AREA ||i.exmc_norsram_disable||, CODE, READONLY, ALIGN=1

                  exmc_norsram_disable PROC
;;;248    */
;;;249    void exmc_norsram_disable(uint32_t norsram_region)
000000  00c0              LSLS     r0,r0,#3
;;;250    {
;;;251        EXMC_SNCTL(norsram_region) &= ~(uint32_t)EXMC_SNCTL_NRBKEN;
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6801              LDR      r1,[r0,#0]
000008  f0210101          BIC      r1,r1,#1
00000c  6001              STR      r1,[r0,#0]
;;;252    }
00000e  4770              BX       lr
;;;253    
                          ENDP


                          AREA ||i.exmc_norsram_enable||, CODE, READONLY, ALIGN=1

                  exmc_norsram_enable PROC
;;;236    */
;;;237    void exmc_norsram_enable(uint32_t norsram_region)
000000  00c0              LSLS     r0,r0,#3
;;;238    {
;;;239        EXMC_SNCTL(norsram_region) |= (uint32_t)EXMC_SNCTL_NRBKEN;
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  6801              LDR      r1,[r0,#0]
000008  f0410101          ORR      r1,r1,#1
00000c  6001              STR      r1,[r0,#0]
;;;240    }
00000e  4770              BX       lr
;;;241    
                          ENDP


                          AREA ||i.exmc_norsram_init||, CODE, READONLY, ALIGN=2

                  exmc_norsram_init PROC
;;;134    */
;;;135    void exmc_norsram_init(exmc_norsram_parameter_struct* exmc_norsram_init_struct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;136    {
;;;137        uint32_t snctl = 0x00000000U, sntcfg = 0x00000000U, snwtcfg = 0x00000000U;
;;;138    
;;;139        /* get the register value */
;;;140        snctl = EXMC_SNCTL(exmc_norsram_init_struct->norsram_region);
000004  6801              LDR      r1,[r0,#0]
000006  00cc              LSLS     r4,r1,#3
000008  f1a444c0          SUB      r4,r4,#0x60000000
00000c  6821              LDR      r1,[r4,#0]
;;;141    
;;;142        /* clear relative bits */
;;;143        snctl &= ((uint32_t)~(EXMC_SNCTL_NREN | EXMC_SNCTL_NRTP | EXMC_SNCTL_NRW | EXMC_SNCTL_SBRSTEN | 
00000e  4a38              LDR      r2,|L17.240|
000010  4011              ANDS     r1,r1,r2
;;;144                              EXMC_SNCTL_NRWTPOL | EXMC_SNCTL_WRAPEN | EXMC_SNCTL_NRWTCFG | EXMC_SNCTL_WREN | 
;;;145                              EXMC_SNCTL_NRWTEN | EXMC_SNCTL_EXMODEN | EXMC_SNCTL_ASYNCWAIT | EXMC_SNCTL_SYNCWR | 
;;;146                              EXMC_SNCTL_NRMUX ));
;;;147    
;;;148        snctl |= (uint32_t)(exmc_norsram_init_struct->address_data_mux << SNCTL_NRMUX_OFFSET) |
000012  e9d0230a          LDRD     r2,r3,[r0,#0x28]
000016  6b05              LDR      r5,[r0,#0x30]
000018  6a46              LDR      r6,[r0,#0x24]
00001a  006d              LSLS     r5,r5,#1
00001c  431a              ORRS     r2,r2,r3
00001e  ea452506          ORR      r5,r5,r6,LSL #8
000022  432a              ORRS     r2,r2,r5
000024  6a05              LDR      r5,[r0,#0x20]
000026  68c6              LDR      r6,[r0,#0xc]
000028  432a              ORRS     r2,r2,r5
00002a  69c5              LDR      r5,[r0,#0x1c]
00002c  ea422285          ORR      r2,r2,r5,LSL #10
000030  6985              LDR      r5,[r0,#0x18]
000032  432a              ORRS     r2,r2,r5
000034  6945              LDR      r5,[r0,#0x14]
000036  ea423205          ORR      r2,r2,r5,LSL #12
00003a  6905              LDR      r5,[r0,#0x10]
00003c  ea423245          ORR      r2,r2,r5,LSL #13
000040  6885              LDR      r5,[r0,#8]
000042  ea423285          ORR      r2,r2,r5,LSL #14
000046  ea4232c6          ORR      r2,r2,r6,LSL #15
00004a  6846              LDR      r6,[r0,#4]
00004c  4332              ORRS     r2,r2,r6
00004e  430a              ORRS     r2,r2,r1
;;;149                            exmc_norsram_init_struct->memory_type |
;;;150                            exmc_norsram_init_struct->databus_width |
;;;151                           (exmc_norsram_init_struct->burst_mode << SNCTL_SBRSTEN_OFFSET) |
;;;152                            exmc_norsram_init_struct->nwait_polarity |
;;;153                           (exmc_norsram_init_struct->wrap_burst_mode << SNCTL_WRAPEN_OFFSET) |
;;;154                            exmc_norsram_init_struct->nwait_config |
;;;155                           (exmc_norsram_init_struct->memory_write << SNCTL_WREN_OFFSET) |
;;;156                           (exmc_norsram_init_struct->nwait_signal << SNCTL_NRWTEN_OFFSET) |
;;;157                           (exmc_norsram_init_struct->extended_mode << SNCTL_EXMODEN_OFFSET) |
;;;158                           (exmc_norsram_init_struct->asyn_wait << SNCTL_ASYNCWAIT_OFFSET) |
;;;159                            exmc_norsram_init_struct->write_mode;
;;;160    
;;;161        sntcfg = (uint32_t)((exmc_norsram_init_struct->read_write_timing->asyn_address_setuptime - 1U ) & EXMC_SNTCFG_ASET )|
000050  6b41              LDR      r1,[r0,#0x34]
000052  f44f2870          MOV      r8,#0xf0000
000056  7e0e              LDRB     r6,[r1,#0x18]
000058  7d0f              LDRB     r7,[r1,#0x14]
00005a  1e76              SUBS     r6,r6,#1
00005c  1e7f              SUBS     r7,r7,#1
00005e  f006060f          AND      r6,r6,#0xf
000062  073f              LSLS     r7,r7,#28
000064  f8d1c010          LDR      r12,[r1,#0x10]
000068  ea466617          ORR      r6,r6,r7,LSR #24
00006c  f1ac0c01          SUB      r12,r12,#1
000070  f64f77ff          MOV      r7,#0xffff
000074  ea072c0c          AND      r12,r7,r12,LSL #8
000078  ea46060c          ORR      r6,r6,r12
00007c  f8b1c00c          LDRH     r12,[r1,#0xc]
000080  f1ac0c01          SUB      r12,r12,#1
000084  ea084c0c          AND      r12,r8,r12,LSL #16
000088  ea46060c          ORR      r6,r6,r12
00008c  f8d1c008          LDR      r12,[r1,#8]
000090  ea46060c          ORR      r6,r6,r12
000094  f8d1c004          LDR      r12,[r1,#4]
000098  6809              LDR      r1,[r1,#0]
00009a  ea46060c          ORR      r6,r6,r12
00009e  430e              ORRS     r6,r6,r1
;;;162                           (((exmc_norsram_init_struct->read_write_timing->asyn_address_holdtime - 1U ) << SNTCFG_AHLD_OFFSET ) & EXMC_SNTCFG_AHLD ) |
;;;163                           (((exmc_norsram_init_struct->read_write_timing->asyn_data_setuptime - 1U ) << SNTCFG_DSET_OFFSET ) & EXMC_SNTCFG_DSET ) |
;;;164                           (((exmc_norsram_init_struct->read_write_timing->bus_latency - 1U ) << SNTCFG_BUSLAT_OFFSET ) & EXMC_SNTCFG_BUSLAT )|
;;;165                           exmc_norsram_init_struct->read_write_timing->syn_clk_division |
;;;166                           exmc_norsram_init_struct->read_write_timing->syn_data_latency |
;;;167                           exmc_norsram_init_struct->read_write_timing->asyn_access_mode;
;;;168    
;;;169        /* nor flash access enable */
;;;170        if(EXMC_MEMORY_TYPE_NOR == exmc_norsram_init_struct->memory_type){
0000a0  2b08              CMP      r3,#8
0000a2  d101              BNE      |L17.168|
;;;171            snctl |= (uint32_t)EXMC_SNCTL_NREN;
0000a4  f0420240          ORR      r2,r2,#0x40
                  |L17.168|
;;;172        }
;;;173    
;;;174        /* extended mode configure */
;;;175        if(ENABLE == exmc_norsram_init_struct->extended_mode){
0000a8  2d01              CMP      r5,#1
0000aa  d00f              BEQ      |L17.204|
;;;176            snwtcfg = (uint32_t)(((exmc_norsram_init_struct->write_timing->asyn_address_setuptime - 1U) & EXMC_SNWTCFG_WASET) |
;;;177                                 (((exmc_norsram_init_struct->write_timing->asyn_address_holdtime - 1U) << SNTCFG_AHLD_OFFSET ) & EXMC_SNWTCFG_WAHLD)|
;;;178                                 (((exmc_norsram_init_struct->write_timing->asyn_data_setuptime - 1U) << SNTCFG_DSET_OFFSET) & EXMC_SNWTCFG_WDSET) |
;;;179                                  exmc_norsram_init_struct->write_timing->asyn_access_mode);
;;;180        }else{
;;;181            snwtcfg = BANK0_SNWTCFG_RESET;
0000ac  f06f4370          MVN      r3,#0xf0000000
                  |L17.176|
;;;182        }
;;;183    
;;;184        /* configure the registers */
;;;185        EXMC_SNCTL(exmc_norsram_init_struct->norsram_region) = snctl;
0000b0  6022              STR      r2,[r4,#0]
;;;186        EXMC_SNTCFG(exmc_norsram_init_struct->norsram_region) = sntcfg;
0000b2  6801              LDR      r1,[r0,#0]
0000b4  00c9              LSLS     r1,r1,#3
0000b6  f1a141c0          SUB      r1,r1,#0x60000000
0000ba  604e              STR      r6,[r1,#4]
;;;187        EXMC_SNWTCFG(exmc_norsram_init_struct->norsram_region) = snwtcfg;
0000bc  6800              LDR      r0,[r0,#0]
0000be  00c0              LSLS     r0,r0,#3
0000c0  f1a040c0          SUB      r0,r0,#0x60000000
0000c4  f8c03104          STR      r3,[r0,#0x104]
;;;188    }
0000c8  e8bd81f0          POP      {r4-r8,pc}
                  |L17.204|
0000cc  6b81              LDR      r1,[r0,#0x38]         ;176
0000ce  7e0d              LDRB     r5,[r1,#0x18]         ;176
0000d0  680b              LDR      r3,[r1,#0]            ;176
0000d2  1e6d              SUBS     r5,r5,#1              ;176
0000d4  f005050f          AND      r5,r5,#0xf            ;176
0000d8  432b              ORRS     r3,r3,r5              ;176
0000da  7d0d              LDRB     r5,[r1,#0x14]         ;176
0000dc  6909              LDR      r1,[r1,#0x10]         ;176
0000de  1e6d              SUBS     r5,r5,#1              ;176
0000e0  072d              LSLS     r5,r5,#28             ;176
0000e2  1e49              SUBS     r1,r1,#1              ;176
0000e4  ea072101          AND      r1,r7,r1,LSL #8       ;176
0000e8  ea416515          ORR      r5,r1,r5,LSR #24      ;176
0000ec  432b              ORRS     r3,r3,r5              ;176
0000ee  e7df              B        |L17.176|
;;;189    
                          ENDP

                  |L17.240|
                          DCD      0xfff70081

                          AREA ||i.exmc_norsram_struct_para_init||, CODE, READONLY, ALIGN=1

                  exmc_norsram_struct_para_init PROC
;;;195    */
;;;196    void exmc_norsram_struct_para_init(exmc_norsram_parameter_struct* exmc_norsram_init_struct)
000000  b530              PUSH     {r4,r5,lr}
;;;197    {
;;;198        /* configure the structure with default value */
;;;199        exmc_norsram_init_struct->norsram_region = EXMC_BANK0_NORSRAM_REGION0;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
;;;200        exmc_norsram_init_struct->address_data_mux = ENABLE;
000006  2201              MOVS     r2,#1
000008  6302              STR      r2,[r0,#0x30]
;;;201        exmc_norsram_init_struct->memory_type = EXMC_MEMORY_TYPE_SRAM;
00000a  62c1              STR      r1,[r0,#0x2c]
;;;202        exmc_norsram_init_struct->databus_width = EXMC_NOR_DATABUS_WIDTH_8B;
00000c  6281              STR      r1,[r0,#0x28]
;;;203        exmc_norsram_init_struct->burst_mode = DISABLE;
00000e  6241              STR      r1,[r0,#0x24]
;;;204        exmc_norsram_init_struct->nwait_polarity = EXMC_NWAIT_POLARITY_LOW;
000010  6201              STR      r1,[r0,#0x20]
;;;205        exmc_norsram_init_struct->wrap_burst_mode = DISABLE;
000012  61c1              STR      r1,[r0,#0x1c]
;;;206        exmc_norsram_init_struct->nwait_config = EXMC_NWAIT_CONFIG_BEFORE;
000014  6181              STR      r1,[r0,#0x18]
;;;207        exmc_norsram_init_struct->memory_write = ENABLE;
000016  6142              STR      r2,[r0,#0x14]
;;;208        exmc_norsram_init_struct->nwait_signal = ENABLE;
000018  6102              STR      r2,[r0,#0x10]
;;;209        exmc_norsram_init_struct->extended_mode = DISABLE;
00001a  6081              STR      r1,[r0,#8]
;;;210        exmc_norsram_init_struct->asyn_wait = DISABLE;
00001c  60c1              STR      r1,[r0,#0xc]
;;;211        exmc_norsram_init_struct->write_mode = EXMC_ASYN_WRITE;
00001e  6041              STR      r1,[r0,#4]
;;;212    
;;;213        /* read/write timing configure */
;;;214        exmc_norsram_init_struct->read_write_timing->asyn_address_setuptime = 0xFU;
000020  6b43              LDR      r3,[r0,#0x34]
000022  220f              MOVS     r2,#0xf
000024  619a              STR      r2,[r3,#0x18]
;;;215        exmc_norsram_init_struct->read_write_timing->asyn_address_holdtime = 0xFU;
000026  6b43              LDR      r3,[r0,#0x34]
000028  615a              STR      r2,[r3,#0x14]
;;;216        exmc_norsram_init_struct->read_write_timing->asyn_data_setuptime = 0xFFU;
00002a  6b44              LDR      r4,[r0,#0x34]
00002c  23ff              MOVS     r3,#0xff
00002e  6123              STR      r3,[r4,#0x10]
;;;217        exmc_norsram_init_struct->read_write_timing->bus_latency = 0xFU;
000030  6b44              LDR      r4,[r0,#0x34]
000032  60e2              STR      r2,[r4,#0xc]
;;;218        exmc_norsram_init_struct->read_write_timing->syn_clk_division = EXMC_SYN_CLOCK_RATIO_16_CLK;
000034  6b45              LDR      r5,[r0,#0x34]
000036  0514              LSLS     r4,r2,#20
000038  60ac              STR      r4,[r5,#8]
;;;219        exmc_norsram_init_struct->read_write_timing->syn_data_latency = EXMC_DATALAT_17_CLK;
00003a  6b45              LDR      r5,[r0,#0x34]
00003c  0614              LSLS     r4,r2,#24
00003e  606c              STR      r4,[r5,#4]
;;;220        exmc_norsram_init_struct->read_write_timing->asyn_access_mode = EXMC_ACCESS_MODE_A;
000040  6b44              LDR      r4,[r0,#0x34]
000042  6021              STR      r1,[r4,#0]
;;;221    
;;;222        /* write timing configure, when extended mode is used */
;;;223        exmc_norsram_init_struct->write_timing->asyn_address_setuptime = 0xFU;
000044  6b84              LDR      r4,[r0,#0x38]
000046  61a2              STR      r2,[r4,#0x18]
;;;224        exmc_norsram_init_struct->write_timing->asyn_address_holdtime = 0xFU;
000048  6b84              LDR      r4,[r0,#0x38]
00004a  6162              STR      r2,[r4,#0x14]
;;;225        exmc_norsram_init_struct->write_timing->asyn_data_setuptime = 0xFFU;
00004c  6b84              LDR      r4,[r0,#0x38]
00004e  6123              STR      r3,[r4,#0x10]
;;;226        exmc_norsram_init_struct->write_timing->bus_latency = 0xFU;
000050  6b83              LDR      r3,[r0,#0x38]
000052  60da              STR      r2,[r3,#0xc]
;;;227        exmc_norsram_init_struct->write_timing->asyn_access_mode = EXMC_ACCESS_MODE_A;
000054  6b80              LDR      r0,[r0,#0x38]
000056  6001              STR      r1,[r0,#0]
;;;228    }
000058  bd30              POP      {r4,r5,pc}
;;;229    
                          ENDP


                          AREA ||i.exmc_pccard_deinit||, CODE, READONLY, ALIGN=2

                  exmc_pccard_deinit PROC
;;;399    */
;;;400    void exmc_pccard_deinit(void)
000000  4805              LDR      r0,|L19.24|
;;;401    {
;;;402        /* EXMC_BANK3_PCCARD */
;;;403        EXMC_NPCTL3 = BANK3_NPCTL_RESET;
000002  2118              MOVS     r1,#0x18
000004  6001              STR      r1,[r0,#0]
;;;404        EXMC_NPINTEN3 = BANK3_NPINTEN_RESET;
000006  2140              MOVS     r1,#0x40
000008  6041              STR      r1,[r0,#4]
;;;405        EXMC_NPCTCFG3 = BANK3_NPCTCFG_RESET;
00000a  f04f31fc          MOV      r1,#0xfcfcfcfc
00000e  6081              STR      r1,[r0,#8]
;;;406        EXMC_NPATCFG3 = BANK3_NPATCFG_RESET;
000010  60c1              STR      r1,[r0,#0xc]
;;;407        EXMC_PIOTCFG3 = BANK3_PIOTCFG3_RESET;
000012  6101              STR      r1,[r0,#0x10]
;;;408    }
000014  4770              BX       lr
;;;409    
                          ENDP

000016  0000              DCW      0x0000
                  |L19.24|
                          DCD      0xa00000a0

                          AREA ||i.exmc_pccard_disable||, CODE, READONLY, ALIGN=2

                  exmc_pccard_disable PROC
;;;491    */
;;;492    void exmc_pccard_disable(void)
000000  4802              LDR      r0,|L20.12|
;;;493    {
;;;494       EXMC_NPCTL3 &= ~EXMC_NPCTL_NDBKEN;
000002  6801              LDR      r1,[r0,#0]
000004  f0210104          BIC      r1,r1,#4
000008  6001              STR      r1,[r0,#0]
;;;495    }
00000a  4770              BX       lr
;;;496    
                          ENDP

                  |L20.12|
                          DCD      0xa00000a0

                          AREA ||i.exmc_pccard_enable||, CODE, READONLY, ALIGN=2

                  exmc_pccard_enable PROC
;;;480    */
;;;481    void exmc_pccard_enable(void)
000000  4802              LDR      r0,|L21.12|
;;;482    {
;;;483        EXMC_NPCTL3 |= EXMC_NPCTL_NDBKEN;
000002  6801              LDR      r1,[r0,#0]
000004  f0410104          ORR      r1,r1,#4
000008  6001              STR      r1,[r0,#0]
;;;484    }
00000a  4770              BX       lr
;;;485    
                          ENDP

                  |L21.12|
                          DCD      0xa00000a0

                          AREA ||i.exmc_pccard_init||, CODE, READONLY, ALIGN=2

                  exmc_pccard_init PROC
;;;421    */
;;;422    void exmc_pccard_init(exmc_pccard_parameter_struct* exmc_pccard_init_struct)
000000  b530              PUSH     {r4,r5,lr}
;;;423    {
;;;424        /* configure the EXMC bank3 PC card control register */
;;;425        EXMC_NPCTL3 = (uint32_t)(exmc_pccard_init_struct->wait_feature << NPCTL_NDWTEN_OFFSET) |
000002  e9d02100          LDRD     r2,r1,[r0,#0]
000006  4311              ORRS     r1,r1,r2
000008  6882              LDR      r2,[r0,#8]
00000a  2310              MOVS     r3,#0x10
00000c  ea430242          ORR      r2,r3,r2,LSL #1
000010  4311              ORRS     r1,r1,r2
000012  4a1b              LDR      r2,|L22.128|
000014  6011              STR      r1,[r2,#0]
;;;426                                 EXMC_NAND_DATABUS_WIDTH_16B |  
;;;427                                 exmc_pccard_init_struct->ctr_latency |
;;;428                                 exmc_pccard_init_struct->atr_latency ;
;;;429    
;;;430        /* configure the EXMC bank3 PC card common space timing configuration register */
;;;431        EXMC_NPCTCFG3 = (uint32_t)((exmc_pccard_init_struct->common_space_timing->setuptime - 1U)& EXMC_NPCTCFG_COMSET ) |
000016  68c1              LDR      r1,[r0,#0xc]
000018  7b0b              LDRB     r3,[r1,#0xc]
00001a  688d              LDR      r5,[r1,#8]
00001c  1e5b              SUBS     r3,r3,#1
00001e  b2dc              UXTB     r4,r3
000020  1e6d              SUBS     r5,r5,#1
000022  f64f73ff          MOV      r3,#0xffff
000026  ea032505          AND      r5,r3,r5,LSL #8
00002a  432c              ORRS     r4,r4,r5
00002c  790d              LDRB     r5,[r1,#4]
00002e  7809              LDRB     r1,[r1,#0]
000030  ea444405          ORR      r4,r4,r5,LSL #16
000034  1e49              SUBS     r1,r1,#1
000036  ea446101          ORR      r1,r4,r1,LSL #24
00003a  6091              STR      r1,[r2,#8]
;;;432                                  (((exmc_pccard_init_struct->common_space_timing->waittime - 1U) << NPCTCFG_COMWAIT_OFFSET) & EXMC_NPCTCFG_COMWAIT ) |
;;;433                                  ((exmc_pccard_init_struct->common_space_timing->holdtime << NPCTCFG_COMHLD_OFFSET) & EXMC_NPCTCFG_COMHLD ) |
;;;434                                  (((exmc_pccard_init_struct->common_space_timing->databus_hiztime - 1U) << NPCTCFG_COMHIZ_OFFSET) & EXMC_NPCTCFG_COMHIZ );
;;;435    
;;;436        /* configure the EXMC bank3 PC card attribute space timing configuration register */
;;;437        EXMC_NPATCFG3 = (uint32_t)((exmc_pccard_init_struct->attribute_space_timing->setuptime - 1U) & EXMC_NPATCFG_ATTSET ) |
00003c  6901              LDR      r1,[r0,#0x10]
00003e  7b0c              LDRB     r4,[r1,#0xc]
000040  688d              LDR      r5,[r1,#8]
000042  1e64              SUBS     r4,r4,#1
000044  1e6d              SUBS     r5,r5,#1
000046  b2e4              UXTB     r4,r4
000048  ea032505          AND      r5,r3,r5,LSL #8
00004c  432c              ORRS     r4,r4,r5
00004e  790d              LDRB     r5,[r1,#4]
000050  7809              LDRB     r1,[r1,#0]
000052  ea444405          ORR      r4,r4,r5,LSL #16
000056  1e49              SUBS     r1,r1,#1
000058  ea446101          ORR      r1,r4,r1,LSL #24
00005c  60d1              STR      r1,[r2,#0xc]
;;;438                                  (((exmc_pccard_init_struct->attribute_space_timing->waittime - 1U) << NPATCFG_ATTWAIT_OFFSET) & EXMC_NPATCFG_ATTWAIT ) |
;;;439                                  ((exmc_pccard_init_struct->attribute_space_timing->holdtime << NPATCFG_ATTHLD_OFFSET) & EXMC_NPATCFG_ATTHLD )|
;;;440                                  (((exmc_pccard_init_struct->attribute_space_timing->databus_hiztime -1U) << NPATCFG_ATTHIZ_OFFSET) & EXMC_NPATCFG_ATTHIZ );
;;;441    
;;;442        /* configure the EXMC bank3 PC card io space timing configuration register */
;;;443        EXMC_PIOTCFG3 = (uint32_t)((exmc_pccard_init_struct->io_space_timing->setuptime - 1U) & EXMC_PIOTCFG3_IOSET ) |
00005e  6940              LDR      r0,[r0,#0x14]
000060  7b01              LDRB     r1,[r0,#0xc]
000062  6884              LDR      r4,[r0,#8]
000064  1e49              SUBS     r1,r1,#1
000066  1e64              SUBS     r4,r4,#1
000068  b2c9              UXTB     r1,r1
00006a  ea032304          AND      r3,r3,r4,LSL #8
00006e  4319              ORRS     r1,r1,r3
000070  7903              LDRB     r3,[r0,#4]
000072  7800              LDRB     r0,[r0,#0]
000074  ea414103          ORR      r1,r1,r3,LSL #16
000078  ea416000          ORR      r0,r1,r0,LSL #24
00007c  6110              STR      r0,[r2,#0x10]
;;;444                                  (((exmc_pccard_init_struct->io_space_timing->waittime - 1U) << PIOTCFG_IOWAIT_OFFSET) & EXMC_PIOTCFG3_IOWAIT ) |
;;;445                                  ((exmc_pccard_init_struct->io_space_timing->holdtime << PIOTCFG_IOHLD_OFFSET) & EXMC_PIOTCFG3_IOHLD )|
;;;446                                  ((exmc_pccard_init_struct->io_space_timing->databus_hiztime << PIOTCFG_IOHIZ_OFFSET) & EXMC_PIOTCFG3_IOHIZ );
;;;447    }
00007e  bd30              POP      {r4,r5,pc}
;;;448    
                          ENDP

                  |L22.128|
                          DCD      0xa00000a0

                          AREA ||i.exmc_pccard_struct_para_init||, CODE, READONLY, ALIGN=1

                  exmc_pccard_struct_para_init PROC
;;;454    */
;;;455    void exmc_pccard_struct_para_init(exmc_pccard_parameter_struct* exmc_pccard_init_struct)
000000  2100              MOVS     r1,#0
;;;456    {
;;;457        /* configure the structure with default value */
;;;458        exmc_pccard_init_struct->wait_feature = DISABLE;
000002  6081              STR      r1,[r0,#8]
;;;459        exmc_pccard_init_struct->ctr_latency = 0x0U;
000004  6041              STR      r1,[r0,#4]
;;;460        exmc_pccard_init_struct->atr_latency = 0x0U;
000006  6001              STR      r1,[r0,#0]
;;;461        exmc_pccard_init_struct->common_space_timing->setuptime = 0xFCU;
000008  68c2              LDR      r2,[r0,#0xc]
00000a  21fc              MOVS     r1,#0xfc
00000c  60d1              STR      r1,[r2,#0xc]
;;;462        exmc_pccard_init_struct->common_space_timing->waittime = 0xFCU;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  6091              STR      r1,[r2,#8]
;;;463        exmc_pccard_init_struct->common_space_timing->holdtime = 0xFCU;
000012  68c2              LDR      r2,[r0,#0xc]
000014  6051              STR      r1,[r2,#4]
;;;464        exmc_pccard_init_struct->common_space_timing->databus_hiztime = 0xFCU;
000016  68c2              LDR      r2,[r0,#0xc]
000018  6011              STR      r1,[r2,#0]
;;;465        exmc_pccard_init_struct->attribute_space_timing->setuptime = 0xFCU;
00001a  6902              LDR      r2,[r0,#0x10]
00001c  60d1              STR      r1,[r2,#0xc]
;;;466        exmc_pccard_init_struct->attribute_space_timing->waittime = 0xFCU;
00001e  6902              LDR      r2,[r0,#0x10]
000020  6091              STR      r1,[r2,#8]
;;;467        exmc_pccard_init_struct->attribute_space_timing->holdtime = 0xFCU;
000022  6902              LDR      r2,[r0,#0x10]
000024  6051              STR      r1,[r2,#4]
;;;468        exmc_pccard_init_struct->attribute_space_timing->databus_hiztime = 0xFCU;
000026  6902              LDR      r2,[r0,#0x10]
000028  6011              STR      r1,[r2,#0]
;;;469        exmc_pccard_init_struct->io_space_timing->setuptime = 0xFCU;
00002a  6942              LDR      r2,[r0,#0x14]
00002c  60d1              STR      r1,[r2,#0xc]
;;;470        exmc_pccard_init_struct->io_space_timing->waittime = 0xFCU;
00002e  6942              LDR      r2,[r0,#0x14]
000030  6091              STR      r1,[r2,#8]
;;;471        exmc_pccard_init_struct->io_space_timing->holdtime = 0xFCU;
000032  6942              LDR      r2,[r0,#0x14]
000034  6051              STR      r1,[r2,#4]
;;;472        exmc_pccard_init_struct->io_space_timing->databus_hiztime = 0xFCU;
000036  6940              LDR      r0,[r0,#0x14]
000038  6001              STR      r1,[r0,#0]
;;;473    }
00003a  4770              BX       lr
;;;474    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_exmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_exmc_c_39d0925f____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___15_gd32f10x_exmc_c_39d0925f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_exmc_c_39d0925f____REVSH|
#line 128
|__asm___15_gd32f10x_exmc_c_39d0925f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
