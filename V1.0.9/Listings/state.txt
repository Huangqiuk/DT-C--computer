; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\state.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\state.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\state.crf User\state.c]
                          THUMB

                          AREA ||i.All_GND_Test||, CODE, READONLY, ALIGN=2

                  All_GND_Test PROC
;;;64     // GND检测 先测油门GND，再测刹把GND
;;;65     void  All_GND_Test(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;66     {
;;;67         switch (stateCB.step)
000002  48e7              LDR      r0,|L1.928|
;;;68         {
;;;69             case STEP_NULL: // 空步骤
;;;70                 break;
;;;71     
;;;72             case STEP_GND_TEST_WAIT_RESPONSE: // 等待万用表回应
;;;73                 break;
;;;74     
;;;75             case STEP_GND_TEST_ENTRY: // 入口步骤
;;;76                 gnd_cnt = 0;
;;;77                 Clear_All_Lines();
;;;78                 Display_Centered(0, "GND");
;;;79                 Display_Centered(1, "Testing");
;;;80     
;;;81                 // 测试引脚复位
;;;82                 AVO_PIN_Reset();
;;;83     
;;;84                 // 添加超时
;;;85                 TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000004  4ce7              LDR      r4,|L1.932|
;;;86                               dut_info.timeout_Period * 1000,
;;;87                               STATE_SwitchStep,
;;;88                               STEP_GND_TEST_COMMUNICATION_TIME_OUT,
;;;89                               1,
;;;90                               ACTION_MODE_ADD_TO_QUEUE);
;;;91     
;;;92                 if (dut_info.gnd == GND_TYPE_THROTTLE_BRAKE)
;;;93                 {
;;;94                     STATE_SwitchStep(STEP_GND_TEST_THROTTLE_GND);
;;;95                 }
;;;96                 if (dut_info.gnd == GND_TYPE_BRAKE)
;;;97                 {
;;;98                     STATE_SwitchStep(STEP_GND_TEST_BRAKE_GND);
;;;99                 }
;;;100                if (dut_info.gnd == GND_TYPE_THROTTLE)
;;;101                {
;;;102                    STATE_SwitchStep(STEP_GND_TEST_THROTTLE_GND);
;;;103                }
;;;104                if (dut_info.gnd == GND_TYPE_DERAILLEUR)
;;;105                {
;;;106                    STATE_SwitchStep(STEP_GND_TEST_DERAILLEUR_GND);
;;;107                }
;;;108                if (dut_info.gnd == GND_TYPE_BRAKE_DERAILLEUR)
;;;109                {
;;;110                    STATE_SwitchStep(STEP_GND_TEST_BRAKE_GND);
;;;111                }            
;;;112                break;
;;;113    
;;;114            case STEP_GND_TEST_THROTTLE_GND: // 测油门阻抗
;;;115                STATE_SwitchStep(STEP_GND_TEST_WAIT_RESPONSE);
;;;116    
;;;117                // 打开测试引脚
;;;118                THROTTLE_GND_TEST_EN_ON();
;;;119    
;;;120                // 通知万用表测阻抗
;;;121                AVO_PROTOCOL_Send_Type_Chl(MEASURE_OHM, 0);
;;;122                AVO_PROTOCOL_Send_Type_Chl(MEASURE_OHM, 0);
;;;123                Clear_All_Lines();
;;;124                Display_Centered(0, "GND");
;;;125                Display_Centered(1, "AVO METER");
;;;126                Display_Centered(2, "Measurement");
;;;127                break;
;;;128    
;;;129            case STEP_GND_TEST_CHECK_THROTTLE_GND_VALUE:     // 比对GND
;;;130                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);      // 喂狗
;;;131    
;;;132                // 油门GND正常
;;;133                if ((50 > ohm.INT) && (dut_info.gnd == GND_TYPE_THROTTLE_BRAKE))
000006  4de8              LDR      r5,|L1.936|
000008  8840              LDRH     r0,[r0,#2]            ;67  ; stateCB
00000a  280b              CMP      r0,#0xb               ;67
00000c  d27e              BCS      |L1.268|
00000e  e8dff000          TBB      [pc,r0]               ;67
000012  7d06              DCB      0x7d,0x06
000014  7d4066be          DCB      0x7d,0x40,0x66,0xbe
000018  e4fdfcfb          DCB      0xe4,0xfd,0xfc,0xfb
00001c  fa00              DCB      0xfa,0x00
00001e  49e3              LDR      r1,|L1.940|
000020  2000              MOVS     r0,#0                 ;76
000022  7008              STRB     r0,[r1,#0]            ;76
000024  f7fffffe          BL       Clear_All_Lines
000028  a1e1              ADR      r1,|L1.944|
00002a  2000              MOVS     r0,#0                 ;78
00002c  f7fffffe          BL       Display_Centered
000030  a1e0              ADR      r1,|L1.948|
000032  2001              MOVS     r0,#1                 ;79
000034  f7fffffe          BL       Display_Centered
000038  f7fffffe          BL       AVO_PIN_Reset
00003c  2001              MOVS     r0,#1                 ;85
00003e  9000              STR      r0,[sp,#0]            ;85
000040  9001              STR      r0,[sp,#4]            ;85
000042  f894102f          LDRB     r1,[r4,#0x2f]         ;85  ; dut_info
000046  f44f707a          MOV      r0,#0x3e8             ;85
00004a  4341              MULS     r1,r0,r1              ;85
00004c  230a              MOVS     r3,#0xa               ;85
00004e  4adb              LDR      r2,|L1.956|
000050  2008              MOVS     r0,#8                 ;85
000052  f7fffffe          BL       TIMER_AddTask
000056  7e20              LDRB     r0,[r4,#0x18]         ;92  ; dut_info
000058  2803              CMP      r0,#3                 ;92
00005a  d101              BNE      |L1.96|
00005c  f7fffffe          BL       STATE_SwitchStep
                  |L1.96|
000060  7e20              LDRB     r0,[r4,#0x18]         ;96  ; dut_info
000062  2802              CMP      r0,#2                 ;96
000064  d102              BNE      |L1.108|
000066  2005              MOVS     r0,#5                 ;98
000068  f7fffffe          BL       STATE_SwitchStep
                  |L1.108|
00006c  7e20              LDRB     r0,[r4,#0x18]         ;100  ; dut_info
00006e  2801              CMP      r0,#1                 ;100
000070  d102              BNE      |L1.120|
000072  2003              MOVS     r0,#3                 ;102
000074  f7fffffe          BL       STATE_SwitchStep
                  |L1.120|
000078  7e20              LDRB     r0,[r4,#0x18]         ;104  ; dut_info
00007a  2804              CMP      r0,#4                 ;104
00007c  d102              BNE      |L1.132|
00007e  2007              MOVS     r0,#7                 ;106
000080  f7fffffe          BL       STATE_SwitchStep
                  |L1.132|
000084  7e20              LDRB     r0,[r4,#0x18]         ;108  ; dut_info
000086  2805              CMP      r0,#5                 ;108
000088  d140              BNE      |L1.268|
00008a  e8bd407c          POP      {r2-r6,lr}            ;110
00008e  f7ffbffe          B.W      STATE_SwitchStep
000092  2002              MOVS     r0,#2                 ;115
000094  f7fffffe          BL       STATE_SwitchStep
000098  4cc9              LDR      r4,|L1.960|
00009a  2380              MOVS     r3,#0x80              ;118
00009c  2203              MOVS     r2,#3                 ;118
00009e  2110              MOVS     r1,#0x10              ;118
0000a0  4620              MOV      r0,r4                 ;118
0000a2  f7fffffe          BL       gpio_init
0000a6  2180              MOVS     r1,#0x80              ;118
0000a8  4620              MOV      r0,r4                 ;118
0000aa  f7fffffe          BL       gpio_bit_set
0000ae  2100              MOVS     r1,#0                 ;121
0000b0  2003              MOVS     r0,#3                 ;121
0000b2  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000b6  2100              MOVS     r1,#0                 ;122
0000b8  2003              MOVS     r0,#3                 ;122
0000ba  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000be  f7fffffe          BL       Clear_All_Lines
0000c2  a1bb              ADR      r1,|L1.944|
0000c4  2000              MOVS     r0,#0                 ;124
0000c6  f7fffffe          BL       Display_Centered
0000ca  a1be              ADR      r1,|L1.964|
0000cc  2001              MOVS     r0,#1                 ;125
0000ce  f7fffffe          BL       Display_Centered
0000d2  e8bd407c          POP      {r2-r6,lr}            ;126
0000d6  a1be              ADR      r1,|L1.976|
0000d8  2002              MOVS     r0,#2                 ;126
0000da  f7ffbffe          B.W      Display_Centered
0000de  2008              MOVS     r0,#8                 ;130
0000e0  f7fffffe          BL       TIMER_ResetTimer
0000e4  6828              LDR      r0,[r5,#0]  ; ohm
0000e6  2832              CMP      r0,#0x32
0000e8  da02              BGE      |L1.240|
0000ea  7e21              LDRB     r1,[r4,#0x18]  ; dut_info
0000ec  2903              CMP      r1,#3
0000ee  d028              BEQ      |L1.322|
                  |L1.240|
;;;134                {
;;;135                    Clear_All_Lines();
;;;136                    Display_Centered(0, "GND");
;;;137                    Display_Centered(1, "THROTTLE");
;;;138                    Display_Centered(2, "Normal");
;;;139    
;;;140                    STATE_SwitchStep(STEP_GND_TEST_BRAKE_GND);
;;;141                }
;;;142                else if ((50 > ohm.INT) && (dut_info.gnd == GND_TYPE_THROTTLE))
0000f0  2832              CMP      r0,#0x32
0000f2  da02              BGE      |L1.250|
0000f4  7e21              LDRB     r1,[r4,#0x18]  ; dut_info
0000f6  2901              CMP      r1,#1
0000f8  d036              BEQ      |L1.360|
                  |L1.250|
;;;143                {
;;;144                    Clear_All_Lines();
;;;145                    Display_Centered(0, "GND");
;;;146                    Display_Centered(1, "THROTTLE");
;;;147                    Display_Centered(2, "Normal");
;;;148                    STATE_SwitchStep(STEP_GND_TEST_COMPLETE);
;;;149                }
;;;150                else if (ohm.INT)
0000fa  2800              CMP      r0,#0
0000fc  d006              BEQ      |L1.268|
;;;151                {
;;;152        #if DEBUG_ENABLE
;;;153                    Clear_All_Lines();
0000fe  f7fffffe          BL       Clear_All_Lines
;;;154                    Display_Centered(0, "GND");
000102  a1ab              ADR      r1,|L1.944|
000104  2000              MOVS     r0,#0
000106  f7fffffe          BL       Display_Centered
;;;155                    Display_Centered(1, "THROTTLE");
00010a  e000              B        |L1.270|
                  |L1.268|
00010c  e11c              B        |L1.840|
                  |L1.270|
00010e  a1b3              ADR      r1,|L1.988|
000110  2001              MOVS     r0,#1
000112  f7fffffe          BL       Display_Centered
;;;156                    Display_Centered(2, "Abnormal");
000116  a1b4              ADR      r1,|L1.1000|
000118  2002              MOVS     r0,#2
00011a  f7fffffe          BL       Display_Centered
;;;157                    Display_YX_Format(3, 0, "%d", ohm.INT);
00011e  a2b5              ADR      r2,|L1.1012|
000120  2100              MOVS     r1,#0
000122  2003              MOVS     r0,#3
000124  682b              LDR      r3,[r5,#0]  ; ohm
000126  f7fffffe          BL       Display_YX_Format
;;;158        #endif
;;;159                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_GND_TEST, FALSE);
00012a  2100              MOVS     r1,#0
00012c  2004              MOVS     r0,#4
00012e  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;160                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
000132  2008              MOVS     r0,#8
000134  f7fffffe          BL       TIMER_KillTask
;;;161                    STATE_EnterState(STATE_STANDBY);
000138  e8bd407c          POP      {r2-r6,lr}
00013c  2001              MOVS     r0,#1
00013e  f7ffbffe          B.W      STATE_EnterState
                  |L1.322|
000142  f7fffffe          BL       Clear_All_Lines
000146  a19a              ADR      r1,|L1.944|
000148  2000              MOVS     r0,#0                 ;136
00014a  f7fffffe          BL       Display_Centered
00014e  a1a3              ADR      r1,|L1.988|
000150  2001              MOVS     r0,#1                 ;137
000152  f7fffffe          BL       Display_Centered
000156  a1a8              ADR      r1,|L1.1016|
000158  2002              MOVS     r0,#2                 ;138
00015a  f7fffffe          BL       Display_Centered
00015e  e8bd407c          POP      {r2-r6,lr}            ;140
000162  2005              MOVS     r0,#5                 ;140
000164  f7ffbffe          B.W      STATE_SwitchStep
                  |L1.360|
000168  f7fffffe          BL       Clear_All_Lines
00016c  a190              ADR      r1,|L1.944|
00016e  2000              MOVS     r0,#0                 ;145
000170  f7fffffe          BL       Display_Centered
000174  a199              ADR      r1,|L1.988|
000176  2001              MOVS     r0,#1                 ;146
000178  f7fffffe          BL       Display_Centered
00017c  a19e              ADR      r1,|L1.1016|
00017e  2002              MOVS     r0,#2                 ;147
000180  f7fffffe          BL       Display_Centered
000184  e8bd407c          POP      {r2-r6,lr}            ;148
000188  2009              MOVS     r0,#9                 ;148
00018a  f7ffbffe          B.W      STATE_SwitchStep
;;;162                }
;;;163                break;
;;;164    
;;;165            case STEP_GND_TEST_BRAKE_GND: // 测刹把阻抗
;;;166                STATE_SwitchStep(STEP_GND_TEST_WAIT_RESPONSE);
00018e  2002              MOVS     r0,#2
000190  f7fffffe          BL       STATE_SwitchStep
;;;167    
;;;168                // 打开测试引脚
;;;169                BRAKE_GND_TEST_EN_ON();
000194  4c9a              LDR      r4,|L1.1024|
000196  2380              MOVS     r3,#0x80
000198  2203              MOVS     r2,#3
00019a  2110              MOVS     r1,#0x10
00019c  4620              MOV      r0,r4
00019e  f7fffffe          BL       gpio_init
0001a2  2180              MOVS     r1,#0x80
0001a4  4620              MOV      r0,r4
0001a6  f7fffffe          BL       gpio_bit_set
;;;170    
;;;171                // 通知万用表测阻抗
;;;172                AVO_PROTOCOL_Send_Type_Chl(MEASURE_OHM, 0);
0001aa  2100              MOVS     r1,#0
0001ac  2003              MOVS     r0,#3
0001ae  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
;;;173                AVO_PROTOCOL_Send_Type_Chl(MEASURE_OHM, 0);
0001b2  2100              MOVS     r1,#0
0001b4  2003              MOVS     r0,#3
0001b6  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
;;;174                Clear_All_Lines();
0001ba  f7fffffe          BL       Clear_All_Lines
;;;175                Display_Centered(0, "GND");
0001be  a17c              ADR      r1,|L1.944|
0001c0  2000              MOVS     r0,#0
0001c2  f7fffffe          BL       Display_Centered
;;;176                Display_Centered(1, "AVO METER");
0001c6  a17f              ADR      r1,|L1.964|
0001c8  2001              MOVS     r0,#1
0001ca  f7fffffe          BL       Display_Centered
;;;177                Display_Centered(2, "Measurement");
0001ce  e8bd407c          POP      {r2-r6,lr}
0001d2  a17f              ADR      r1,|L1.976|
0001d4  2002              MOVS     r0,#2
0001d6  f7ffbffe          B.W      Display_Centered
;;;178                break;
;;;179    
;;;180            case STEP_GND_TEST_CHECK_BRAKE_GND_VALUE:     // 比对GND
;;;181                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);  // 喂狗
0001da  2008              MOVS     r0,#8
0001dc  f7fffffe          BL       TIMER_ResetTimer
;;;182    
;;;183                // 刹把GND正常
;;;184                if ((50 > ohm.INT) && (dut_info.gnd != GND_TYPE_BRAKE_DERAILLEUR))
0001e0  6828              LDR      r0,[r5,#0]  ; ohm
0001e2  2832              CMP      r0,#0x32
0001e4  da18              BGE      |L1.536|
0001e6  7e20              LDRB     r0,[r4,#0x18]  ; dut_info
0001e8  2805              CMP      r0,#5
0001ea  d015              BEQ      |L1.536|
;;;185                {
;;;186                    Clear_All_Lines();
0001ec  f7fffffe          BL       Clear_All_Lines
;;;187                    Display_Centered(0, "GND");
0001f0  a16f              ADR      r1,|L1.944|
0001f2  2000              MOVS     r0,#0
0001f4  f7fffffe          BL       Display_Centered
;;;188                    Display_Centered(1, "BRAKE");
0001f8  a182              ADR      r1,|L1.1028|
0001fa  2001              MOVS     r0,#1
0001fc  f7fffffe          BL       Display_Centered
;;;189                    Display_Centered(2, "GND Normal");
000200  a182              ADR      r1,|L1.1036|
000202  2002              MOVS     r0,#2
000204  e003              B        |L1.526|
000206  e0b6              B        |L1.886|
000208  e0a1              B        |L1.846|
00020a  e065              B        |L1.728|
00020c  e03e              B        |L1.652|
                  |L1.526|
00020e  f7fffffe          BL       Display_Centered
;;;190                    STATE_SwitchStep(STEP_GND_TEST_COMPLETE);
000212  2009              MOVS     r0,#9
000214  f7fffffe          BL       STATE_SwitchStep
                  |L1.536|
;;;191                }
;;;192                
;;;193                // 刹把GND正常
;;;194                if ((50 > ohm.INT) && (dut_info.gnd == GND_TYPE_BRAKE_DERAILLEUR))
000218  6828              LDR      r0,[r5,#0]  ; ohm
00021a  2832              CMP      r0,#0x32
00021c  da13              BGE      |L1.582|
00021e  7e20              LDRB     r0,[r4,#0x18]  ; dut_info
000220  2805              CMP      r0,#5
000222  d110              BNE      |L1.582|
;;;195                {
;;;196                    Clear_All_Lines();
000224  f7fffffe          BL       Clear_All_Lines
;;;197                    Display_Centered(0, "GND");
000228  a161              ADR      r1,|L1.944|
00022a  2000              MOVS     r0,#0
00022c  f7fffffe          BL       Display_Centered
;;;198                    Display_Centered(1, "BRAKE");
000230  a174              ADR      r1,|L1.1028|
000232  2001              MOVS     r0,#1
000234  f7fffffe          BL       Display_Centered
;;;199                    Display_Centered(2, "GND Normal");
000238  a174              ADR      r1,|L1.1036|
00023a  2002              MOVS     r0,#2
00023c  f7fffffe          BL       Display_Centered
;;;200                    STATE_SwitchStep(STEP_GND_TEST_DERAILLEUR_GND);
000240  2007              MOVS     r0,#7
000242  f7fffffe          BL       STATE_SwitchStep
                  |L1.582|
;;;201                } 
;;;202    
;;;203                // 不正常            
;;;204                if(50 < ohm.INT)
000246  6828              LDR      r0,[r5,#0]  ; ohm
000248  2832              CMP      r0,#0x32
00024a  dd7d              BLE      |L1.840|
;;;205                {
;;;206        #if DEBUG_ENABLE
;;;207                    Clear_All_Lines();
00024c  f7fffffe          BL       Clear_All_Lines
;;;208                    Display_Centered(0, "GND");
000250  a157              ADR      r1,|L1.944|
000252  2000              MOVS     r0,#0
000254  f7fffffe          BL       Display_Centered
;;;209                    Display_Centered(1, "BRAKE");
000258  a16a              ADR      r1,|L1.1028|
00025a  2001              MOVS     r0,#1
00025c  f7fffffe          BL       Display_Centered
;;;210                    Display_Centered(2, "Abnormal");
000260  a161              ADR      r1,|L1.1000|
000262  2002              MOVS     r0,#2
000264  f7fffffe          BL       Display_Centered
;;;211                    Display_YX_Format(3, 0, "%d", ohm.INT);
000268  a262              ADR      r2,|L1.1012|
00026a  2100              MOVS     r1,#0
00026c  2003              MOVS     r0,#3
00026e  682b              LDR      r3,[r5,#0]  ; ohm
000270  f7fffffe          BL       Display_YX_Format
;;;212        #endif
;;;213                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_GND_TEST, FALSE);
000274  2100              MOVS     r1,#0
000276  2004              MOVS     r0,#4
000278  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;214                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00027c  2008              MOVS     r0,#8
00027e  f7fffffe          BL       TIMER_KillTask
;;;215                    STATE_EnterState(STATE_STANDBY);
000282  e8bd407c          POP      {r2-r6,lr}
000286  2001              MOVS     r0,#1
000288  f7ffbffe          B.W      STATE_EnterState
                  |L1.652|
;;;216                }
;;;217                break;
;;;218    
;;;219            case STEP_GND_TEST_DERAILLEUR_GND:      // 测电子变速阻抗
;;;220                STATE_SwitchStep(STEP_GND_TEST_WAIT_RESPONSE);
00028c  2002              MOVS     r0,#2
00028e  f7fffffe          BL       STATE_SwitchStep
;;;221    
;;;222                // 打开测试引脚
;;;223                DERAILLEUR_GND_TEST_EN_ON();
000292  4c61              LDR      r4,|L1.1048|
000294  2302              MOVS     r3,#2
000296  2203              MOVS     r2,#3
000298  2110              MOVS     r1,#0x10
00029a  4620              MOV      r0,r4
00029c  f7fffffe          BL       gpio_init
0002a0  2102              MOVS     r1,#2
0002a2  4620              MOV      r0,r4
0002a4  f7fffffe          BL       gpio_bit_set
;;;224    
;;;225                // 通知万用表测阻抗
;;;226                AVO_PROTOCOL_Send_Type_Chl(MEASURE_OHM, 0);
0002a8  2100              MOVS     r1,#0
0002aa  2003              MOVS     r0,#3
0002ac  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
;;;227                AVO_PROTOCOL_Send_Type_Chl(MEASURE_OHM, 0);
0002b0  2100              MOVS     r1,#0
0002b2  2003              MOVS     r0,#3
0002b4  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
;;;228                Clear_All_Lines();
0002b8  f7fffffe          BL       Clear_All_Lines
;;;229                Display_Centered(0, "GND");
0002bc  a13c              ADR      r1,|L1.944|
0002be  2000              MOVS     r0,#0
0002c0  f7fffffe          BL       Display_Centered
;;;230                Display_Centered(1, "AVO METER");
0002c4  a13f              ADR      r1,|L1.964|
0002c6  2001              MOVS     r0,#1
0002c8  f7fffffe          BL       Display_Centered
;;;231                Display_Centered(2, "Measurement");
0002cc  e8bd407c          POP      {r2-r6,lr}
0002d0  a13f              ADR      r1,|L1.976|
0002d2  2002              MOVS     r0,#2
0002d4  f7ffbffe          B.W      Display_Centered
                  |L1.728|
;;;232                break;
;;;233    
;;;234            case STEP_GND_TEST_CHECK_DERAILLEUR_GND_VALUE:     // 比对GND
;;;235                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);  // 喂狗
0002d8  2008              MOVS     r0,#8
0002da  f7fffffe          BL       TIMER_ResetTimer
;;;236    
;;;237                // 刹把GND正常
;;;238                if (50 > ohm.INT)
0002de  6828              LDR      r0,[r5,#0]  ; ohm
0002e0  2832              CMP      r0,#0x32
0002e2  da12              BGE      |L1.778|
;;;239                {
;;;240                    Clear_All_Lines();
0002e4  f7fffffe          BL       Clear_All_Lines
;;;241                    Display_Centered(0, "GND");
0002e8  a131              ADR      r1,|L1.944|
0002ea  2000              MOVS     r0,#0
0002ec  f7fffffe          BL       Display_Centered
;;;242                    Display_Centered(1, "DERAILLEUR");
0002f0  a14a              ADR      r1,|L1.1052|
0002f2  2001              MOVS     r0,#1
0002f4  f7fffffe          BL       Display_Centered
;;;243                    Display_Centered(2, "GND Normal");
0002f8  a144              ADR      r1,|L1.1036|
0002fa  2002              MOVS     r0,#2
0002fc  f7fffffe          BL       Display_Centered
;;;244                    STATE_SwitchStep(STEP_GND_TEST_COMPLETE);
000300  e8bd407c          POP      {r2-r6,lr}
000304  2009              MOVS     r0,#9
000306  f7ffbffe          B.W      STATE_SwitchStep
                  |L1.778|
;;;245                }
;;;246                else
;;;247                {
;;;248        #if DEBUG_ENABLE
;;;249                    Clear_All_Lines();
00030a  f7fffffe          BL       Clear_All_Lines
;;;250                    Display_Centered(0, "GND");
00030e  a128              ADR      r1,|L1.944|
000310  2000              MOVS     r0,#0
000312  f7fffffe          BL       Display_Centered
;;;251                    Display_Centered(1, "DERAILLEUR");
000316  a141              ADR      r1,|L1.1052|
000318  2001              MOVS     r0,#1
00031a  f7fffffe          BL       Display_Centered
;;;252                    Display_Centered(2, "Abnormal");
00031e  a132              ADR      r1,|L1.1000|
000320  2002              MOVS     r0,#2
000322  f7fffffe          BL       Display_Centered
;;;253                    Display_YX_Format(3, 0, "%d", ohm.INT);
000326  a233              ADR      r2,|L1.1012|
000328  2100              MOVS     r1,#0
00032a  2003              MOVS     r0,#3
00032c  682b              LDR      r3,[r5,#0]  ; ohm
00032e  f7fffffe          BL       Display_YX_Format
;;;254        #endif
;;;255                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_GND_TEST, FALSE);
000332  2100              MOVS     r1,#0
000334  2004              MOVS     r0,#4
000336  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;256                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00033a  2008              MOVS     r0,#8
00033c  f7fffffe          BL       TIMER_KillTask
;;;257                    STATE_EnterState(STATE_STANDBY);
000340  e8bd407c          POP      {r2-r6,lr}
000344  2001              MOVS     r0,#1
000346  e000              B        |L1.842|
                  |L1.840|
000348  e029              B        |L1.926|
                  |L1.842|
00034a  f7ffbffe          B.W      STATE_EnterState
                  |L1.846|
;;;258                }
;;;259                break;
;;;260                
;;;261            case STEP_GND_TEST_COMPLETE: // GND测试完成步骤，关闭测试引脚，然后上报结果
;;;262                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00034e  2008              MOVS     r0,#8
000350  f7fffffe          BL       TIMER_KillTask
;;;263        #if DEBUG_ENABLE
;;;264                Clear_All_Lines();
000354  f7fffffe          BL       Clear_All_Lines
;;;265                Display_Centered(0, "GND Test Pass");
000358  a133              ADR      r1,|L1.1064|
00035a  2000              MOVS     r0,#0
00035c  f7fffffe          BL       Display_Centered
;;;266        #endif
;;;267                AVO_PIN_Reset();
000360  f7fffffe          BL       AVO_PIN_Reset
;;;268    
;;;269                // 上报测试成功
;;;270                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_GND_TEST, TRUE);
000364  2101              MOVS     r1,#1
000366  2004              MOVS     r0,#4
000368  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;271                STATE_EnterState(STATE_STANDBY);
00036c  e8bd407c          POP      {r2-r6,lr}
000370  2001              MOVS     r0,#1
000372  f7ffbffe          B.W      STATE_EnterState
                  |L1.886|
;;;272                break;
;;;273    
;;;274            case STEP_GND_TEST_COMMUNICATION_TIME_OUT: // 通讯超时
;;;275                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
000376  2008              MOVS     r0,#8
000378  f7fffffe          BL       TIMER_KillTask
;;;276        #if DEBUG_ENABLE
;;;277                // LCD显示
;;;278                Vertical_Scrolling_Display(excepMsgBuff, 4, 0);
00037c  4808              LDR      r0,|L1.928|
00037e  2200              MOVS     r2,#0
000380  2104              MOVS     r1,#4
000382  3054              ADDS     r0,r0,#0x54
000384  f7fffffe          BL       Vertical_Scrolling_Display
;;;279        #endif
;;;280                AVO_PIN_Reset();
000388  f7fffffe          BL       AVO_PIN_Reset
;;;281                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_GND_TEST, FALSE);
00038c  2100              MOVS     r1,#0
00038e  2004              MOVS     r0,#4
000390  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;282                STATE_EnterState(STATE_STANDBY);
000394  e8bd407c          POP      {r2-r6,lr}
000398  2001              MOVS     r0,#1
00039a  f7ffbffe          B.W      STATE_EnterState
                  |L1.926|
;;;283                break;
;;;284    
;;;285            default:
;;;286                break;
;;;287        }
;;;288    }
00039e  bd7c              POP      {r2-r6,pc}
;;;289    
                          ENDP

                  |L1.928|
                          DCD      ||.data||+0x6
                  |L1.932|
                          DCD      dut_info
                  |L1.936|
                          DCD      ohm
                  |L1.940|
                          DCD      gnd_cnt
                  |L1.944|
0003b0  474e4400          DCB      "GND",0
                  |L1.948|
0003b4  54657374          DCB      "Testing",0
0003b8  696e6700
                  |L1.956|
                          DCD      STATE_SwitchStep
                  |L1.960|
                          DCD      0x40011000
                  |L1.964|
0003c4  41564f20          DCB      "AVO METER",0
0003c8  4d455445
0003cc  5200    
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L1.976|
0003d0  4d656173          DCB      "Measurement",0
0003d4  7572656d
0003d8  656e7400
                  |L1.988|
0003dc  5448524f          DCB      "THROTTLE",0
0003e0  54544c45
0003e4  00      
0003e5  00                DCB      0
0003e6  00                DCB      0
0003e7  00                DCB      0
                  |L1.1000|
0003e8  41626e6f          DCB      "Abnormal",0
0003ec  726d616c
0003f0  00      
0003f1  00                DCB      0
0003f2  00                DCB      0
0003f3  00                DCB      0
                  |L1.1012|
0003f4  256400            DCB      "%d",0
0003f7  00                DCB      0
                  |L1.1016|
0003f8  4e6f726d          DCB      "Normal",0
0003fc  616c00  
0003ff  00                DCB      0
                  |L1.1024|
                          DCD      0x40011400
                  |L1.1028|
000404  4252414b          DCB      "BRAKE",0
000408  4500    
00040a  00                DCB      0
00040b  00                DCB      0
                  |L1.1036|
00040c  474e4420          DCB      "GND Normal",0
000410  4e6f726d
000414  616c00  
000417  00                DCB      0
                  |L1.1048|
                          DCD      0x40010800
                  |L1.1052|
00041c  44455241          DCB      "DERAILLEUR",0
000420  494c4c45
000424  555200  
000427  00                DCB      0
                  |L1.1064|
000428  474e4420          DCB      "GND Test Pass",0
00042c  54657374
000430  20506173
000434  7300    
000436  00                DCB      0
000437  00                DCB      0

                          AREA ||i.STATE_EnterState||, CODE, READONLY, ALIGN=2

                  STATE_EnterState PROC
;;;5012   // 每个状态的入口处理
;;;5013   void STATE_EnterState(uint32 state)
000000  493d              LDR      r1,|L2.248|
;;;5014   {
;;;5015       // 让当前的状态成为历史
;;;5016       stateCB.preState = stateCB.state;
000002  780a              LDRB     r2,[r1,#0]  ; stateCB
000004  704a              STRB     r2,[r1,#1]
;;;5017   
;;;5018       // 设置新的状态
;;;5019       stateCB.state = (STATE_E)state;
000006  7008              STRB     r0,[r1,#0]
;;;5020   
;;;5021       // 各状态的入口设定
;;;5022       switch (state)
000008  282e              CMP      r0,#0x2e
00000a  d274              BCS      |L2.246|
00000c  e8dff000          TBB      [pc,r0]
000010  73733817          DCB      0x73,0x73,0x38,0x17
000014  1a1d2023          DCB      0x1a,0x1d,0x20,0x23
000018  26292c73          DCB      0x26,0x29,0x2c,0x73
00001c  73323573          DCB      0x73,0x32,0x35,0x73
000020  2f3b3e41          DCB      0x2f,0x3b,0x3e,0x41
000024  44474a4d          DCB      0x44,0x47,0x4a,0x4d
000028  73735356          DCB      0x73,0x73,0x53,0x56
00002c  73507361          DCB      0x73,0x50,0x73,0x61
000030  73737373          DCB      0x73,0x73,0x73,0x73
000034  5d597373          DCB      0x5d,0x59,0x73,0x73
000038  73646d70          DCB      0x73,0x64,0x6d,0x70
00003c  676a              DCB      0x67,0x6a
;;;5023       {
;;;5024           // ■■ 空状态 ■■
;;;5025           case STATE_NULL: // 不使用
;;;5026               break;
;;;5027   
;;;5028           case STATE_STANDBY:            
;;;5029               break;
;;;5030   
;;;5031           // GND测试
;;;5032           case STATE_UART_GND_TEST:
;;;5033               STATE_SwitchStep(STEP_GND_TEST_ENTRY);
00003e  2001              MOVS     r0,#1
000040  f7ffbffe          B.W      STATE_SwitchStep
;;;5034               break;
;;;5035   
;;;5036           /******************************************UART***************************************/
;;;5037   
;;;5038           // 大灯测试
;;;5039           case STATE_UART_HEADLIGHT_TEST:
;;;5040               STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_ENTRY);
000044  2010              MOVS     r0,#0x10
000046  f7ffbffe          B.W      STATE_SwitchStep
;;;5041               break;
;;;5042   
;;;5043           // 近光灯测试
;;;5044           case STATE_UART_LBEAM_TEST:
;;;5045               STATE_SwitchStep(STEP_LBEAM_UART_TEST_ENTRY);
00004a  2018              MOVS     r0,#0x18
00004c  f7ffbffe          B.W      STATE_SwitchStep
;;;5046               break;
;;;5047   
;;;5048           // 远光灯测试
;;;5049           case STATE_UART_HBEAM_TEST:
;;;5050               STATE_SwitchStep(STEP_HBEAM_UART_TEST_ENTRY);
000050  2020              MOVS     r0,#0x20
000052  f7ffbffe          B.W      STATE_SwitchStep
;;;5051               break;
;;;5052   
;;;5053           // 左转向灯测试
;;;5054           case STATE_UART_LEFT_TURN_SIGNAL_TEST:
;;;5055               STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_ENTRY);
000056  2028              MOVS     r0,#0x28
000058  f7ffbffe          B.W      STATE_SwitchStep
;;;5056               break;
;;;5057   
;;;5058           // 右转向灯测试
;;;5059           case STATE_UART_RIGHT_TURN_SIGNAL_TEST:
;;;5060               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_ENTRY);
00005c  2031              MOVS     r0,#0x31
00005e  f7ffbffe          B.W      STATE_SwitchStep
;;;5061               break;
;;;5062   
;;;5063           // 油门测试
;;;5064           case STATE_UART_THROTTLE_TEST:
;;;5065               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_ENTRY);
000062  203b              MOVS     r0,#0x3b
000064  f7ffbffe          B.W      STATE_SwitchStep
;;;5066               break;
;;;5067   
;;;5068           // 刹把测试
;;;5069           case STATE_UART_BRAKE_TEST:
;;;5070               STATE_SwitchStep(STEP_BRAKE_UART_TEST_ENTRY);
000068  2044              MOVS     r0,#0x44
00006a  f7ffbffe          B.W      STATE_SwitchStep
;;;5071               break;
;;;5072   
;;;5073           // 电子变速测试
;;;5074           case STATE_UART_DERAILLEUR_TEST:
;;;5075               STATE_SwitchStep(STEP_DERAILLEUR_UART_TEST_ENTRY);
00006e  204d              MOVS     r0,#0x4d
000070  f7ffbffe          B.W      STATE_SwitchStep
;;;5076               break;
;;;5077               
;;;5078           // vlk测试
;;;5079           case STATE_UART_VLK_TEST:
;;;5080               STATE_SwitchStep(STEP_VLK_UART_TEST_ENTRY);
000074  2056              MOVS     r0,#0x56
000076  f7ffbffe          B.W      STATE_SwitchStep
;;;5081               break;
;;;5082   
;;;5083           // 电压校准测试
;;;5084           case STATE_UART_VOLTAGE_TEST:
;;;5085               STATE_SwitchStep(STEP_CALIBRATION_UART_TEST_ENTRY);
00007a  205c              MOVS     r0,#0x5c
00007c  f7ffbffe          B.W      STATE_SwitchStep
;;;5086               break;
;;;5087   
;;;5088           // UART测试
;;;5089           case STATE_UART_TEST:
;;;5090               STATE_SwitchStep(STEP_UART_TEST_ENTRY);
000080  200b              MOVS     r0,#0xb
000082  f7ffbffe          B.W      STATE_SwitchStep
;;;5091               break;
;;;5092   
;;;5093           /*****************************CAN***************************************/
;;;5094   
;;;5095           // 大灯测试
;;;5096           case STATE_CAN_HEADLIGHT_TEST:
;;;5097               STATE_SwitchStep(STEP_HEADLIGHT_CAN_TEST_ENTRY);
000086  206b              MOVS     r0,#0x6b
000088  f7ffbffe          B.W      STATE_SwitchStep
;;;5098               break;
;;;5099   
;;;5100           // 近光灯测试
;;;5101           case STATE_CAN_LBEAM_TEST:
;;;5102               STATE_SwitchStep(STEP_LBEAM_CAN_TEST_ENTRY);
00008c  2074              MOVS     r0,#0x74
00008e  f7ffbffe          B.W      STATE_SwitchStep
;;;5103               break;
;;;5104   
;;;5105           // 远光灯测试
;;;5106           case STATE_CAN_HBEAM_TEST:
;;;5107               STATE_SwitchStep(STEP_HBEAM_CAN_TEST_ENTRY);
000092  207c              MOVS     r0,#0x7c
000094  f7ffbffe          B.W      STATE_SwitchStep
;;;5108               break;
;;;5109   
;;;5110           // 左转向灯测试
;;;5111           case STATE_CAN_LEFT_TURN_SIGNAL_TEST:
;;;5112               STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_CAN_TEST_ENTRY);
000098  2084              MOVS     r0,#0x84
00009a  f7ffbffe          B.W      STATE_SwitchStep
;;;5113               break;
;;;5114   
;;;5115           // 右转向灯测试
;;;5116           case STATE_CAN_RIGHT_TURN_SIGNAL_TEST:
;;;5117               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_CAN_TEST_ENTRY);
00009e  208d              MOVS     r0,#0x8d
0000a0  f7ffbffe          B.W      STATE_SwitchStep
;;;5118               break;
;;;5119   
;;;5120           // 油门测试
;;;5121           case STATE_CAN_THROTTLE_TEST:
;;;5122               STATE_SwitchStep(STEP_THROTTLE_CAN_TEST_ENTRY);
0000a4  2096              MOVS     r0,#0x96
0000a6  f7ffbffe          B.W      STATE_SwitchStep
;;;5123               break;
;;;5124   
;;;5125           // 刹车测试
;;;5126           case STATE_CAN_BRAKE_TEST:
;;;5127               STATE_SwitchStep(STEP_BRAKE_CAN_TEST_ENTRY);
0000aa  209f              MOVS     r0,#0x9f
0000ac  f7ffbffe          B.W      STATE_SwitchStep
;;;5128               break;
;;;5129   
;;;5130           // 电子变速测试
;;;5131           case STATE_CAN_DERAILLEUR_TEST:
;;;5132               STATE_SwitchStep(STEP_DERAILLEUR_CAN_TEST_COMMUNICATION_TIME_OUT);
0000b0  20b0              MOVS     r0,#0xb0
0000b2  f7ffbffe          B.W      STATE_SwitchStep
;;;5133               break;
;;;5134               
;;;5135           // vlk测试
;;;5136           case STATE_CAN_VLK_TEST:
;;;5137               STATE_SwitchStep(STEP_VLK_CAN_TEST_ENTRY);
0000b6  20b1              MOVS     r0,#0xb1
0000b8  f7ffbffe          B.W      STATE_SwitchStep
;;;5138               break;
;;;5139   
;;;5140           // 电压校准测试
;;;5141           case STATE_CAN_VOLTAGE_TEST:
;;;5142               STATE_SwitchStep(STEP_CALIBRATION_CAN_TEST_ENTRY);
0000bc  20b7              MOVS     r0,#0xb7
0000be  f7ffbffe          B.W      STATE_SwitchStep
;;;5143               break;
;;;5144   
;;;5145           /*****************************UP***************************************/
;;;5146   
;;;5147           // 通用彩屏串口升级
;;;5148           case STATE_CM_UART_BC_UPGRADE:
;;;5149               STATE_SwitchStep(STEP_CM_UART_UPGRADE_ENTRY);
0000c2  f2401013          MOV      r0,#0x113
0000c6  f7ffbffe          B.W      STATE_SwitchStep
;;;5150               break;
;;;5151   
;;;5152           // 通用数码管/段码屏串口升级
;;;5153           case STATE_CM_UART_SEG_UPGRADE:
;;;5154               STATE_SwitchStep(STEP_SEG_UART_UPGRADE_ENTRY);
0000ca  f44f7096          MOV      r0,#0x12c
0000ce  f7ffbffe          B.W      STATE_SwitchStep
;;;5155               break;
;;;5156   
;;;5157           // 通用彩屏CAN升级
;;;5158           case STATE_CM_CAN_UPGRADE:
;;;5159               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_ENTRY);
0000d2  20d7              MOVS     r0,#0xd7
0000d4  f7ffbffe          B.W      STATE_SwitchStep
;;;5160               break;
;;;5161   
;;;5162           /************************************以下为小米串口测试***************************************************/
;;;5163   
;;;5164           // 大灯测试
;;;5165           case STATE_UART_XM_HEADLIGHT_TEST:
;;;5166               STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_ENTRY);
0000d8  2010              MOVS     r0,#0x10
0000da  f7ffbffe          B.W      STATE_SwitchStep
;;;5167               break;
;;;5168   
;;;5169           // 油门测试
;;;5170           case STATE_UART_XM_THROTTLE_TEST:
;;;5171               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_ENTRY);
0000de  203b              MOVS     r0,#0x3b
0000e0  f7ffbffe          B.W      STATE_SwitchStep
;;;5172               break;
;;;5173   
;;;5174           // 刹车测试
;;;5175           case STATE_UART_XM_BRAKE_TEST:
;;;5176               STATE_SwitchStep(STEP_BRAKE_UART_TEST_ENTRY);
0000e4  2044              MOVS     r0,#0x44
0000e6  f7ffbffe          B.W      STATE_SwitchStep
;;;5177               break;
;;;5178   
;;;5179           // 左转向灯测试
;;;5180           case STATE_UART_XM_LEFT_TURN_SIGNAL_TEST:
;;;5181               STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_ENTRY);
0000ea  2028              MOVS     r0,#0x28
0000ec  f7ffbffe          B.W      STATE_SwitchStep
;;;5182               break;
;;;5183   
;;;5184           // 右转向灯测试
;;;5185           case STATE_UART_XM_RIGHT_TURN_SIGNAL_TEST:
;;;5186               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_ENTRY);
0000f0  2031              MOVS     r0,#0x31
0000f2  f7ffbffe          B.W      STATE_SwitchStep
                  |L2.246|
;;;5187               break;
;;;5188               
;;;5189           default:
;;;5190               break;
;;;5191       }
;;;5192   }
0000f6  4770              BX       lr
;;;5193   
                          ENDP

                  |L2.248|
                          DCD      ||.data||+0x6

                          AREA ||i.STATE_Init||, CODE, READONLY, ALIGN=2

                  STATE_Init PROC
;;;51     
;;;52     void STATE_Init(void)
000000  4802              LDR      r0,|L3.12|
;;;53     {
;;;54         stateCB.preState = STATE_STANDBY;
000002  2101              MOVS     r1,#1
000004  7041              STRB     r1,[r0,#1]
;;;55         stateCB.state = STATE_STANDBY;
000006  7001              STRB     r1,[r0,#0]
;;;56     }
000008  4770              BX       lr
;;;57     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      ||.data||+0x6

                          AREA ||i.STATE_Process||, CODE, READONLY, ALIGN=2

                  STATE_Process PROC
;;;5196   // 每个状态下的过程处理
;;;5197   void STATE_Process(void)
000000  b510              PUSH     {r4,lr}
;;;5198   {
;;;5199       switch (stateCB.state)
000002  487e              LDR      r0,|L4.508|
000004  7800              LDRB     r0,[r0,#0]  ; stateCB
000006  282e              CMP      r0,#0x2e
000008  d27d              BCS      |L4.262|
00000a  e8dff000          TBB      [pc,r0]
00000e  f5f5              DCB      0xf5,0xf5
000010  171f272f          DCB      0x17,0x1f,0x27,0x2f
000014  373f474f          DCB      0x37,0x3f,0x47,0x4f
000018  57f5f567          DCB      0x57,0xf5,0xf5,0x67
00001c  6ff55f77          DCB      0x6f,0xf5,0x5f,0x77
000020  7f858b91          DCB      0x7f,0x85,0x8b,0x91
000024  979df5f5          DCB      0x97,0x9d,0xf5,0xf5
000028  a9aff5a3          DCB      0xa9,0xaf,0xf5,0xa3
00002c  f5b5f5f5          DCB      0xf5,0xb5,0xf5,0xf5
000030  f5f5c5bd          DCB      0xf5,0xf5,0xc5,0xbd
000034  f5f5f5cd          DCB      0xf5,0xf5,0xf5,0xcd
000038  d5dde5ed          DCB      0xd5,0xdd,0xe5,0xed
;;;5200       {
;;;5201           // ■■ 空状态 ■■
;;;5202           case STATE_NULL:
;;;5203               break;
;;;5204   
;;;5205           // 待机状态
;;;5206           case STATE_STANDBY:
;;;5207               break;
;;;5208   
;;;5209           // UART测试
;;;5210           case STATE_UART_TEST:
;;;5211               UART_DRIVE_Process();               // UART驱动层过程处理
00003c  f7fffffe          BL       UART_DRIVE_Process
;;;5212               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
000040  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5213               UART_Test();
000044  e8bd4010          POP      {r4,lr}
000048  f7ffbffe          B.W      UART_Test
;;;5214               break;
;;;5215   
;;;5216           // GND测试
;;;5217           case STATE_UART_GND_TEST:
;;;5218               UART_DRIVE_Process();               // UART驱动层过程处理
00004c  f7fffffe          BL       UART_DRIVE_Process
;;;5219               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
000050  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5220               All_GND_Test();
000054  e8bd4010          POP      {r4,lr}
000058  f7ffbffe          B.W      All_GND_Test
;;;5221               break;
;;;5222   
;;;5223           /* 以下为串口测试  */
;;;5224           // 大灯测试
;;;5225           case STATE_UART_HEADLIGHT_TEST:
;;;5226               UART_DRIVE_Process();               // UART驱动层过程处理
00005c  f7fffffe          BL       UART_DRIVE_Process
;;;5227               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
000060  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5228               STEP_Process_HeadLightUartTest();
000064  e8bd4010          POP      {r4,lr}
000068  f7ffbffe          B.W      STEP_Process_HeadLightUartTest
;;;5229               break;
;;;5230   
;;;5231           // 近光灯测试
;;;5232           case STATE_UART_LBEAM_TEST:
;;;5233               UART_DRIVE_Process();               // UART驱动层过程处理
00006c  f7fffffe          BL       UART_DRIVE_Process
;;;5234               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
000070  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5235               STEP_Process_LbeamUartTest();
000074  e8bd4010          POP      {r4,lr}
000078  f7ffbffe          B.W      STEP_Process_LbeamUartTest
;;;5236               break;
;;;5237   
;;;5238           // 远光灯测试
;;;5239           case STATE_UART_HBEAM_TEST:
;;;5240               UART_DRIVE_Process();               // UART驱动层过程处理
00007c  f7fffffe          BL       UART_DRIVE_Process
;;;5241               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
000080  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5242               STEP_Process_HbeamUartTest();
000084  e8bd4010          POP      {r4,lr}
000088  f7ffbffe          B.W      STEP_Process_HbeamUartTest
;;;5243               break;
;;;5244   
;;;5245           // 左转向灯测试
;;;5246           case STATE_UART_LEFT_TURN_SIGNAL_TEST:
;;;5247               UART_DRIVE_Process();               // UART驱动层过程处理
00008c  f7fffffe          BL       UART_DRIVE_Process
;;;5248               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
000090  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5249               STEP_Process_Left_TurnSignalUartTest();
000094  e8bd4010          POP      {r4,lr}
000098  f7ffbffe          B.W      STEP_Process_Left_TurnSignalUartTest
;;;5250               break;
;;;5251   
;;;5252           // 右转向灯测试
;;;5253           case STATE_UART_RIGHT_TURN_SIGNAL_TEST:
;;;5254               UART_DRIVE_Process();               // UART驱动层过程处理
00009c  f7fffffe          BL       UART_DRIVE_Process
;;;5255               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
0000a0  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5256               STEP_Process_Right_TurnSignalUartTest();
0000a4  e8bd4010          POP      {r4,lr}
0000a8  f7ffbffe          B.W      STEP_Process_Right_TurnSignalUartTest
;;;5257               break;
;;;5258   
;;;5259           // 油门测试
;;;5260           case STATE_UART_THROTTLE_TEST:
;;;5261               UART_DRIVE_Process();               // UART驱动层过程处理
0000ac  f7fffffe          BL       UART_DRIVE_Process
;;;5262               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
0000b0  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5263               STEP_Process_ThrottleUartTest();
0000b4  e8bd4010          POP      {r4,lr}
0000b8  f7ffbffe          B.W      STEP_Process_ThrottleUartTest
;;;5264               break;
;;;5265   
;;;5266           // 刹把测试
;;;5267           case STATE_UART_BRAKE_TEST:
;;;5268               UART_DRIVE_Process();               // UART驱动层过程处理
0000bc  f7fffffe          BL       UART_DRIVE_Process
;;;5269               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
0000c0  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5270               STEP_Process_BrakeUartTest();
0000c4  e8bd4010          POP      {r4,lr}
0000c8  f7ffbffe          B.W      STEP_Process_BrakeUartTest
;;;5271               break;
;;;5272   
;;;5273           // 电子变速测试
;;;5274           case STATE_UART_DERAILLEUR_TEST:
;;;5275               UART_DRIVE_Process();               // UART驱动层过程处理
0000cc  f7fffffe          BL       UART_DRIVE_Process
;;;5276               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
0000d0  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5277               STEP_Process_DerailleurUartTest();
0000d4  e8bd4010          POP      {r4,lr}
0000d8  f7ffbffe          B.W      STEP_Process_DerailleurUartTest
;;;5278               break;
;;;5279               
;;;5280           // VLK测试
;;;5281           case STATE_UART_VLK_TEST:
;;;5282               UART_DRIVE_Process();               // UART驱动层过程处理
0000dc  f7fffffe          BL       UART_DRIVE_Process
;;;5283               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
0000e0  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5284               STEP_Process_VlkUartTest();
0000e4  e8bd4010          POP      {r4,lr}
0000e8  f7ffbffe          B.W      STEP_Process_VlkUartTest
;;;5285               break;
;;;5286   
;;;5287           // 电压校准测试
;;;5288           case STATE_UART_VOLTAGE_TEST:
;;;5289               UART_DRIVE_Process();               // UART驱动层过程处理
0000ec  f7fffffe          BL       UART_DRIVE_Process
;;;5290               DUT_UART_PROTOCOL_Process();        // UART协议层过程处理
0000f0  f7fffffe          BL       DUT_UART_PROTOCOL_Process
;;;5291               STEP_Process_CalibrationUartTest();
0000f4  e8bd4010          POP      {r4,lr}
0000f8  f7ffbffe          B.W      STEP_Process_CalibrationUartTest
;;;5292               break;
;;;5293   
;;;5294           /* 以下为CAN测试  */
;;;5295           // 大灯测试
;;;5296           case STATE_CAN_HEADLIGHT_TEST:
;;;5297               CAN_PROTOCOL_Process_Test();
0000fc  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5298               STEP_Process_HeadLightCanTest();
000100  e8bd4010          POP      {r4,lr}
000104  e000              B        |L4.264|
                  |L4.262|
000106  e077              B        |L4.504|
                  |L4.264|
000108  f7ffbffe          B.W      STEP_Process_HeadLightCanTest
;;;5299               break;
;;;5300   
;;;5301           // 近光灯测试
;;;5302           case STATE_CAN_LBEAM_TEST:
;;;5303               CAN_PROTOCOL_Process_Test();
00010c  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5304               STEP_Process_LbeamCanTest();
000110  e8bd4010          POP      {r4,lr}
000114  f7ffbffe          B.W      STEP_Process_LbeamCanTest
;;;5305               break;
;;;5306   
;;;5307           // 远光灯测试
;;;5308           case STATE_CAN_HBEAM_TEST:
;;;5309               CAN_PROTOCOL_Process_Test();
000118  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5310               STEP_Process_HbeamCanTest();
00011c  e8bd4010          POP      {r4,lr}
000120  f7ffbffe          B.W      STEP_Process_HbeamCanTest
;;;5311               break;
;;;5312   
;;;5313           // 左转向灯测试
;;;5314           case STATE_CAN_LEFT_TURN_SIGNAL_TEST:
;;;5315               CAN_PROTOCOL_Process_Test();
000124  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5316               STEP_Process_Left_TurnSignalCanTest();
000128  e8bd4010          POP      {r4,lr}
00012c  f7ffbffe          B.W      STEP_Process_Left_TurnSignalCanTest
;;;5317               break;
;;;5318   
;;;5319           // 右转向灯测试
;;;5320           case STATE_CAN_RIGHT_TURN_SIGNAL_TEST:
;;;5321               CAN_PROTOCOL_Process_Test();
000130  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5322               STEP_Process_Right_TurnSignalCanTest();
000134  e8bd4010          POP      {r4,lr}
000138  f7ffbffe          B.W      STEP_Process_Right_TurnSignalCanTest
;;;5323               break;
;;;5324   
;;;5325           // 油门测试
;;;5326           case STATE_CAN_THROTTLE_TEST:
;;;5327               CAN_PROTOCOL_Process_Test();
00013c  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5328               STEP_Process_ThrottleCanTest();
000140  e8bd4010          POP      {r4,lr}
000144  f7ffbffe          B.W      STEP_Process_ThrottleCanTest
;;;5329               break;
;;;5330   
;;;5331           // 刹把测试
;;;5332           case STATE_CAN_BRAKE_TEST:
;;;5333               CAN_PROTOCOL_Process_Test();
000148  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5334               STEP_Process_BrakeCanTest();
00014c  e8bd4010          POP      {r4,lr}
000150  f7ffbffe          B.W      STEP_Process_BrakeCanTest
;;;5335               break;
;;;5336   
;;;5337           // 电子变速测试
;;;5338           case STATE_CAN_DERAILLEUR_TEST:
;;;5339               CAN_PROTOCOL_Process_Test();
000154  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5340               STEP_Process_DerailleurCanTest();
000158  e8bd4010          POP      {r4,lr}
00015c  f7ffbffe          B.W      STEP_Process_DerailleurCanTest
;;;5341               break;
;;;5342               
;;;5343           // VLK测试
;;;5344           case STATE_CAN_VLK_TEST:
;;;5345               CAN_PROTOCOL_Process_Test();
000160  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5346               STEP_Process_VlkCanTest();
000164  e8bd4010          POP      {r4,lr}
000168  f7ffbffe          B.W      STEP_Process_VlkCanTest
;;;5347               break;
;;;5348   
;;;5349           // 电压校准测试
;;;5350           case STATE_CAN_VOLTAGE_TEST:
;;;5351               CAN_PROTOCOL_Process_Test();
00016c  f7fffffe          BL       CAN_PROTOCOL_Process_Test
;;;5352               STEP_Process_CalibrationCanTest();
000170  e8bd4010          POP      {r4,lr}
000174  f7ffbffe          B.W      STEP_Process_CalibrationCanTest
;;;5353               break;
;;;5354   
;;;5355           /************************************以下为CAN升级***************************************************/
;;;5356   
;;;5357           // 通用彩屏can升级
;;;5358           case STATE_CM_CAN_UPGRADE:
;;;5359               CAN_PROTOCOL_Process_DT();      // 迪太升级协议
000178  f7fffffe          BL       CAN_PROTOCOL_Process_DT
;;;5360               CAN_PROTOCOL_Process_3A();      // 添加app中的3a解析协议
00017c  f7fffffe          BL       CAN_PROTOCOL_Process_3A
;;;5361               STEP_Process_CmCanUpgrade();
000180  e8bd4010          POP      {r4,lr}
000184  f7ffbffe          B.W      STEP_Process_CmCanUpgrade
;;;5362               break;
;;;5363   
;;;5364           /************************************以下为串口升级***************************************************/
;;;5365   
;;;5366           // 通用彩屏串口升级
;;;5367           case STATE_CM_UART_BC_UPGRADE:
;;;5368               UART_DRIVE_Process();               // UART驱动层过程处理
000188  f7fffffe          BL       UART_DRIVE_Process
;;;5369               UART_PROTOCOL_Process();        // UART协议层过程处理
00018c  f7fffffe          BL       UART_PROTOCOL_Process
;;;5370               STEP_Process_CmUartUpgrade();   // 步骤
000190  e8bd4010          POP      {r4,lr}
000194  f7ffbffe          B.W      STEP_Process_CmUartUpgrade
;;;5371               break;
;;;5372   
;;;5373           // 数码管、段码屏串口升级
;;;5374           case STATE_CM_UART_SEG_UPGRADE:
;;;5375               UART_DRIVE_Process();           // UART驱动层过程处理
000198  f7fffffe          BL       UART_DRIVE_Process
;;;5376               UART_PROTOCOL_Process();        // UART协议层过程处理
00019c  f7fffffe          BL       UART_PROTOCOL_Process
;;;5377               STEP_Process_SegUartUpgrade();
0001a0  e8bd4010          POP      {r4,lr}
0001a4  f7ffbffe          B.W      STEP_Process_SegUartUpgrade
;;;5378               break;
;;;5379           
;;;5380           /************************************以下为小米串口测试***************************************************/
;;;5381           
;;;5382           // (小米)大灯测试
;;;5383           case STATE_UART_XM_HEADLIGHT_TEST:
;;;5384               UART_DRIVE_Process();               // UART驱动层过程处理
0001a8  f7fffffe          BL       UART_DRIVE_Process
;;;5385               UART_PROTOCOL_XM_Process();         // UART协议层过程处理
0001ac  f7fffffe          BL       UART_PROTOCOL_XM_Process
;;;5386               STEP_Process_XM_HeadLightUartTest();
0001b0  e8bd4010          POP      {r4,lr}
0001b4  f7ffbffe          B.W      STEP_Process_XM_HeadLightUartTest
;;;5387               break;
;;;5388   
;;;5389           // (小米)左转向灯测试
;;;5390           case STATE_UART_XM_LEFT_TURN_SIGNAL_TEST:
;;;5391               UART_DRIVE_Process();               // UART驱动层过程处理
0001b8  f7fffffe          BL       UART_DRIVE_Process
;;;5392               UART_PROTOCOL_XM_Process();         // UART协议层过程处理
0001bc  f7fffffe          BL       UART_PROTOCOL_XM_Process
;;;5393               STEP_Process_XM_Left_TurnSignalUartTest();
0001c0  e8bd4010          POP      {r4,lr}
0001c4  f7ffbffe          B.W      STEP_Process_XM_Left_TurnSignalUartTest
;;;5394               break;
;;;5395   
;;;5396           // (小米)右转向灯测试
;;;5397           case STATE_UART_XM_RIGHT_TURN_SIGNAL_TEST:
;;;5398               UART_DRIVE_Process();               // UART驱动层过程处理
0001c8  f7fffffe          BL       UART_DRIVE_Process
;;;5399               UART_PROTOCOL_XM_Process();         // UART协议层过程处理
0001cc  f7fffffe          BL       UART_PROTOCOL_XM_Process
;;;5400               STEP_Process_XM_Right_TurnSignalUartTest();
0001d0  e8bd4010          POP      {r4,lr}
0001d4  f7ffbffe          B.W      STEP_Process_XM_Right_TurnSignalUartTest
;;;5401               break;
;;;5402   
;;;5403           // (小米)油门测试
;;;5404           case STATE_UART_XM_THROTTLE_TEST:
;;;5405               UART_DRIVE_Process();               // UART驱动层过程处理
0001d8  f7fffffe          BL       UART_DRIVE_Process
;;;5406               UART_PROTOCOL_XM_Process();         // UART协议层过程处理
0001dc  f7fffffe          BL       UART_PROTOCOL_XM_Process
;;;5407               STEP_Process_XM_ThrottleUartTest();
0001e0  e8bd4010          POP      {r4,lr}
0001e4  f7ffbffe          B.W      STEP_Process_XM_ThrottleUartTest
;;;5408               break;
;;;5409   
;;;5410           // (小米)刹把测试
;;;5411           case STATE_UART_XM_BRAKE_TEST:
;;;5412               UART_DRIVE_Process();               // UART驱动层过程处理
0001e8  f7fffffe          BL       UART_DRIVE_Process
;;;5413               UART_PROTOCOL_XM_Process();         // UART协议层过程处理
0001ec  f7fffffe          BL       UART_PROTOCOL_XM_Process
;;;5414               STEP_Process_XM_BrakeUartTest();
0001f0  e8bd4010          POP      {r4,lr}
0001f4  f7ffbffe          B.W      STEP_Process_XM_BrakeUartTest
                  |L4.504|
;;;5415               break;
;;;5416               
;;;5417           default:
;;;5418               break;
;;;5419       }
;;;5420   }
0001f8  bd10              POP      {r4,pc}
                          ENDP

0001fa  0000              DCW      0x0000
                  |L4.508|
                          DCD      ||.data||+0x6

                          AREA ||i.STATE_SwitchStep||, CODE, READONLY, ALIGN=2

                  STATE_SwitchStep PROC
;;;58     // 步骤切换函数
;;;59     void STATE_SwitchStep(uint32 param)
000000  4901              LDR      r1,|L5.8|
;;;60     {
;;;61         stateCB.step = (STEP_E)param;
000002  8048              STRH     r0,[r1,#2]
;;;62     }
000004  4770              BX       lr
;;;63     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||+0x6

                          AREA ||i.STEP_Process_BrakeCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_BrakeCanTest PROC
;;;2793   // 刹把测试
;;;2794   void STEP_Process_BrakeCanTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;2795   {
;;;2796       switch (stateCB.step)
000002  48ce              LDR      r0,|L6.828|
;;;2797       {
;;;2798           case STEP_NULL: // 空步骤
;;;2799               break;
;;;2800   
;;;2801           case STEP_BRAKE_CAN_TEST_ENTRY: // 入口步骤
;;;2802               STATE_SwitchStep(STEP_BRAKE_CAN_TEST_VCC);
;;;2803               CAN_PROTOCOL_TEST_Init(dut_info.can_baudRate); 
000004  4cce              LDR      r4,|L6.832|
;;;2804               Clear_All_Lines();
;;;2805               Display_Centered(0, "BRAKE");
;;;2806               Display_Centered(1, "Testing");
;;;2807   
;;;2808               // 测试引脚复位
;;;2809               AVO_PIN_Reset();
;;;2810               break;
;;;2811   
;;;2812           case STEP_BRAKE_CAN_TEST_WAIT_RESPONSE: // 等待仪表或万用表回应
;;;2813               break;
;;;2814   
;;;2815           case STEP_BRAKE_CAN_TEST_VCC: // 通知万用表测VCC
;;;2816               STATE_SwitchStep(STEP_BRAKE_CAN_TEST_WAIT_RESPONSE);
;;;2817   
;;;2818               // 打开VCC测试引脚
;;;2819               BRAKE_VCC_TEST_EN_ON();
;;;2820   
;;;2821               // 通知万用表测电压
;;;2822               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;2823               Clear_All_Lines();
;;;2824               Display_Centered(0, "BRAKE");
;;;2825               Display_Centered(1, "AVO METER");
;;;2826               Display_Centered(2, "Measurement");
;;;2827   
;;;2828               // 添加超时
;;;2829               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;2830                             4000,
;;;2831                             STATE_SwitchStep,
;;;2832                             STEP_BRAKE_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;2833                             1,
;;;2834                             ACTION_MODE_ADD_TO_QUEUE);
;;;2835               break;
;;;2836   
;;;2837           // 比对VCC
;;;2838           case STEP_BRAKE_CAN_TEST_CHECK_VOLTAGE_VALUE:
;;;2839               STATE_SwitchStep(STEP_BRAKE_CAN_TEST_WAIT_RESPONSE);
;;;2840               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2841   
;;;2842               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;2843               {
;;;2844                   // 调整DAC输出,单位mv
;;;2845                   DAC1_output(FIRST_DAC);
;;;2846                   Delayms(300);
000006  f44f7696          MOV      r6,#0x12c
00000a  8840              LDRH     r0,[r0,#2]            ;2796  ; stateCB
;;;2847                   Clear_All_Lines();
;;;2848                   Display_Centered(0, "BRAKE");
;;;2849                   Display_Centered(1, "VCC");
;;;2850                   Display_Centered(2, "Normal");
;;;2851   
;;;2852                   // 获取油门AD值
;;;2853                   CAN_PROTOCOL_TEST_SendCmdParamAck(CAN_PROTOCOL_TEST_CMD_GET_THROTTLE_BRAKE_AD, 2);
;;;2854               }
;;;2855               // VCC不正常，则上报
;;;2856               else
;;;2857               {
;;;2858                   Clear_All_Lines();
;;;2859                   Display_Centered(0, "BRAKE");
;;;2860                   Display_Centered(1, "VCC");
;;;2861                   Display_Centered(2, "Abnormal");
;;;2862                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2863                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2864                   STATE_EnterState(STATE_STANDBY);
;;;2865               }
;;;2866               break;
;;;2867   
;;;2868           // 在这进行判断数值是否正常，第一次
;;;2869           case STEP_BRAKE_CAN_TEST_CHECK_DAC1_VALUE:
;;;2870               STATE_SwitchStep(STEP_BRAKE_CAN_TEST_WAIT_RESPONSE);
;;;2871               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2872   
;;;2873               // 处理DAC1数值检查逻辑
;;;2874               if ((dut_info.brakeAd > FIRST_DAC - ERROR_DAC) && (dut_info.brakeAd < FIRST_DAC + ERROR_DAC))
00000c  f24035e7          MOV      r5,#0x3e7
000010  28a3              CMP      r0,#0xa3              ;2796
000012  d07d              BEQ      |L6.272|
000014  dc4e              BGT      |L6.180|
000016  28a0              CMP      r0,#0xa0              ;2796
000018  d07b              BEQ      |L6.274|
00001a  dc17              BGT      |L6.76|
00001c  2800              CMP      r0,#0                 ;2796
00001e  d078              BEQ      |L6.274|
000020  289f              CMP      r0,#0x9f              ;2796
000022  d176              BNE      |L6.274|
000024  20a1              MOVS     r0,#0xa1              ;2802
000026  f7fffffe          BL       STATE_SwitchStep
00002a  8ba0              LDRH     r0,[r4,#0x1c]         ;2803  ; dut_info
00002c  f7fffffe          BL       CAN_PROTOCOL_TEST_Init
000030  f7fffffe          BL       Clear_All_Lines
000034  a1c3              ADR      r1,|L6.836|
000036  2000              MOVS     r0,#0                 ;2805
000038  f7fffffe          BL       Display_Centered
00003c  a1c3              ADR      r1,|L6.844|
00003e  2001              MOVS     r0,#1                 ;2806
000040  f7fffffe          BL       Display_Centered
000044  e8bd407c          POP      {r2-r6,lr}            ;2809
000048  f7ffbffe          B.W      AVO_PIN_Reset
                  |L6.76|
00004c  28a1              CMP      r0,#0xa1              ;2796
00004e  d054              BEQ      |L6.250|
000050  4dc0              LDR      r5,|L6.852|
000052  28a2              CMP      r0,#0xa2              ;2796
000054  d17e              BNE      |L6.340|
000056  20a0              MOVS     r0,#0xa0              ;2839
000058  f7fffffe          BL       STATE_SwitchStep
00005c  2008              MOVS     r0,#8                 ;2840
00005e  f7fffffe          BL       TIMER_ResetTimer
000062  6ba0              LDR      r0,[r4,#0x38]         ;2842  ; dut_info
000064  f7fffffe          BL       __aeabi_ui2f
000068  6829              LDR      r1,[r5,#0]            ;2842  ; measure
00006a  f7fffffe          BL       __aeabi_cfcmple
00006e  d273              BCS      |L6.344|
000070  6b60              LDR      r0,[r4,#0x34]         ;2842  ; dut_info
000072  f7fffffe          BL       __aeabi_ui2f
000076  6829              LDR      r1,[r5,#0]            ;2842  ; measure
000078  f7fffffe          BL       __aeabi_cfrcmple
00007c  d26c              BCS      |L6.344|
00007e  f44f707a          MOV      r0,#0x3e8             ;2845
000082  f7fffffe          BL       DAC1_output
000086  4630              MOV      r0,r6                 ;2846
000088  f7fffffe          BL       Delayms
00008c  f7fffffe          BL       Clear_All_Lines
000090  a1ac              ADR      r1,|L6.836|
000092  2000              MOVS     r0,#0                 ;2848
000094  f7fffffe          BL       Display_Centered
000098  a1af              ADR      r1,|L6.856|
00009a  2001              MOVS     r0,#1                 ;2849
00009c  f7fffffe          BL       Display_Centered
0000a0  a1ae              ADR      r1,|L6.860|
0000a2  2002              MOVS     r0,#2                 ;2850
0000a4  f7fffffe          BL       Display_Centered
0000a8  e8bd407c          POP      {r2-r6,lr}            ;2853
0000ac  2102              MOVS     r1,#2                 ;2853
0000ae  20eb              MOVS     r0,#0xeb              ;2853
0000b0  f7ffbffe          B.W      CAN_PROTOCOL_TEST_SendCmdParamAck
                  |L6.180|
0000b4  28a4              CMP      r0,#0xa4              ;2796
0000b6  d07d              BEQ      |L6.436|
0000b8  28a5              CMP      r0,#0xa5              ;2796
0000ba  d07c              BEQ      |L6.438|
0000bc  28a6              CMP      r0,#0xa6              ;2796
0000be  d07b              BEQ      |L6.440|
0000c0  28a7              CMP      r0,#0xa7              ;2796
0000c2  d147              BNE      |L6.340|
;;;2875               {
;;;2876                   // 调整DAC输出,单位mv
;;;2877                   DAC1_output(SECOND_DAC);
;;;2878                   Delayms(300);
;;;2879                   Clear_All_Lines();
;;;2880                   Display_Centered(0, "BRAKE");
;;;2881                   Display_Centered(1, "Adjusting DAC");
;;;2882                   Display_Centered(2, "First");
;;;2883   
;;;2884                   // 获取油门AD值
;;;2885                   CAN_PROTOCOL_TEST_SendCmdParamAck(CAN_PROTOCOL_TEST_CMD_GET_THROTTLE_BRAKE_AD, 2);
;;;2886               }
;;;2887               else
;;;2888               {
;;;2889                   Clear_All_Lines();
;;;2890                   Display_Centered(0, "BRAKE");
;;;2891                   Display_Centered(1, "SIG1");
;;;2892                   Display_Centered(2, "Abnormal");
;;;2893                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2894                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2895                   STATE_EnterState(STATE_STANDBY);
;;;2896               }
;;;2897               break;
;;;2898   
;;;2899           // 在这进行判断数值是否正常，第二次
;;;2900           case STEP_BRAKE_CAN_TEST_CHECK_DAC3_VALUE:
;;;2901               STATE_SwitchStep(STEP_BRAKE_CAN_TEST_WAIT_RESPONSE);
;;;2902               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2903   
;;;2904               // 处理DAC5数值检查逻辑
;;;2905               if ((dut_info.brakeAd > SECOND_DAC - ERROR_DAC) && (dut_info.brakeAd < SECOND_DAC + ERROR_DAC))
;;;2906               {
;;;2907                   // 调整DAC输出,单位mv
;;;2908                   DAC1_output(THIRD_DAC);
;;;2909                   Delayms(300);
;;;2910                   Clear_All_Lines();
;;;2911                   Display_Centered(0, "BRAKE");
;;;2912                   Display_Centered(1, "Adjusting DAC");
;;;2913                   Display_Centered(2, "Second");
;;;2914   
;;;2915                   // 获取油门AD值
;;;2916                   CAN_PROTOCOL_TEST_SendCmdParamAck(CAN_PROTOCOL_TEST_CMD_GET_THROTTLE_BRAKE_AD, 2);
;;;2917               }
;;;2918               else
;;;2919               {
;;;2920                   Clear_All_Lines();
;;;2921                   Display_Centered(0, "BRAKE");
;;;2922                   Display_Centered(1, "SIG2");
;;;2923                   Display_Centered(2, "Abnormal");
;;;2924                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2925                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2926                   STATE_EnterState(STATE_STANDBY);
;;;2927               }
;;;2928               break;
;;;2929   
;;;2930           // 在这进行判断数值是否正常，第三次
;;;2931           case STEP_BRAKE_CAN_TEST_CHECK_DAC5_VALUE:
;;;2932               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2933   
;;;2934               // 处理DAC5数值检查逻辑
;;;2935               if ((dut_info.brakeAd > THIRD_DAC - ERROR_DAC) && (dut_info.brakeAd < THIRD_DAC + ERROR_DAC))
;;;2936               {
;;;2937                   // 3次都正常则测试通过
;;;2938                   Clear_All_Lines();
;;;2939                   Display_Centered(0, "BRAKE");
;;;2940                   Display_Centered(1, "Adjusting DAC");
;;;2941                   Display_Centered(2, "Third");
;;;2942                   STATE_SwitchStep(STEP_BRAKE_CAN_TEST_COMPLETE);
;;;2943               }
;;;2944               else
;;;2945               {
;;;2946                   Clear_All_Lines();
;;;2947                   Display_Centered(0, "BRAKE");
;;;2948                   Display_Centered(1, "SIG3");
;;;2949                   Display_Centered(2, "Abnormal");
;;;2950                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2951                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2952                   STATE_EnterState(STATE_STANDBY);
;;;2953               }
;;;2954               break;
;;;2955   
;;;2956           // 油门测试完成步骤，关闭DAC输出调整为0，然后上报结果
;;;2957           case STEP_BRAKE_CAN_TEST_COMPLETE:
;;;2958               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2959               AVO_PIN_Reset();
;;;2960               Clear_All_Lines();
;;;2961               Display_Centered(0, "BRAKE");
;;;2962               Display_Centered(1, "Test Pass");
;;;2963               STATE_EnterState(STATE_STANDBY);
;;;2964               DAC0_output(0);
;;;2965               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;2966               break;
;;;2967   
;;;2968           // 通信超时，给出油门测试函数，并且case上面的步骤
;;;2969           case STEP_BRAKE_CAN_TEST_COMMUNICATION_TIME_OUT:
;;;2970               DAC0_output(0);
0000c4  2000              MOVS     r0,#0
0000c6  f7fffffe          BL       DAC0_output
;;;2971               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
0000ca  2100              MOVS     r1,#0
0000cc  200b              MOVS     r0,#0xb
0000ce  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;2972               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0000d2  2008              MOVS     r0,#8
0000d4  f7fffffe          BL       TIMER_KillTask
;;;2973               AVO_PIN_Reset();
0000d8  f7fffffe          BL       AVO_PIN_Reset
;;;2974               Clear_All_Lines();
0000dc  f7fffffe          BL       Clear_All_Lines
;;;2975               Display_Centered(0, "BRAKE");
0000e0  a198              ADR      r1,|L6.836|
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       Display_Centered
;;;2976               Display_Centered(1, "Test Timeout");
0000e8  a19e              ADR      r1,|L6.868|
0000ea  2001              MOVS     r0,#1
0000ec  f7fffffe          BL       Display_Centered
;;;2977               STATE_EnterState(STATE_STANDBY);
0000f0  e8bd407c          POP      {r2-r6,lr}
0000f4  2001              MOVS     r0,#1
0000f6  f7ffbffe          B.W      STATE_EnterState
                  |L6.250|
0000fa  20a0              MOVS     r0,#0xa0              ;2816
0000fc  f7fffffe          BL       STATE_SwitchStep
000100  4c9c              LDR      r4,|L6.884|
000102  2340              MOVS     r3,#0x40              ;2819
000104  2203              MOVS     r2,#3                 ;2819
000106  2110              MOVS     r1,#0x10              ;2819
000108  4620              MOV      r0,r4                 ;2819
00010a  f7fffffe          BL       gpio_init
00010e  e001              B        |L6.276|
                  |L6.272|
000110  e03c              B        |L6.396|
                  |L6.274|
000112  e01f              B        |L6.340|
                  |L6.276|
000114  2140              MOVS     r1,#0x40              ;2819
000116  4620              MOV      r0,r4                 ;2819
000118  f7fffffe          BL       gpio_bit_set
00011c  2100              MOVS     r1,#0                 ;2822
00011e  2001              MOVS     r0,#1                 ;2822
000120  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000124  f7fffffe          BL       Clear_All_Lines
000128  a186              ADR      r1,|L6.836|
00012a  2000              MOVS     r0,#0                 ;2824
00012c  f7fffffe          BL       Display_Centered
000130  a191              ADR      r1,|L6.888|
000132  2001              MOVS     r0,#1                 ;2825
000134  f7fffffe          BL       Display_Centered
000138  a192              ADR      r1,|L6.900|
00013a  2002              MOVS     r0,#2                 ;2826
00013c  f7fffffe          BL       Display_Centered
000140  2001              MOVS     r0,#1                 ;2829
000142  9000              STR      r0,[sp,#0]            ;2829
000144  9001              STR      r0,[sp,#4]            ;2829
000146  23a7              MOVS     r3,#0xa7              ;2829
000148  4a91              LDR      r2,|L6.912|
00014a  f44f617a          MOV      r1,#0xfa0             ;2829
00014e  2008              MOVS     r0,#8                 ;2829
000150  f7fffffe          BL       TIMER_AddTask
                  |L6.340|
;;;2978               break;
;;;2979   
;;;2980           default:
;;;2981               break;
;;;2982       }
;;;2983   }
000154  bd7c              POP      {r2-r6,pc}
000156  e7ff              B        |L6.344|
                  |L6.344|
000158  f7fffffe          BL       Clear_All_Lines
00015c  a179              ADR      r1,|L6.836|
00015e  2000              MOVS     r0,#0                 ;2859
000160  f7fffffe          BL       Display_Centered
000164  a17c              ADR      r1,|L6.856|
000166  2001              MOVS     r0,#1                 ;2860
000168  f7fffffe          BL       Display_Centered
00016c  a189              ADR      r1,|L6.916|
00016e  2002              MOVS     r0,#2                 ;2861
000170  f7fffffe          BL       Display_Centered
000174  2100              MOVS     r1,#0                 ;2862
000176  200b              MOVS     r0,#0xb               ;2862
000178  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00017c  2008              MOVS     r0,#8                 ;2863
00017e  f7fffffe          BL       TIMER_KillTask
000182  e8bd407c          POP      {r2-r6,lr}            ;2864
000186  2001              MOVS     r0,#1                 ;2864
000188  f7ffbffe          B.W      STATE_EnterState
                  |L6.396|
00018c  20a0              MOVS     r0,#0xa0              ;2870
00018e  f7fffffe          BL       STATE_SwitchStep
000192  2008              MOVS     r0,#8                 ;2871
000194  f7fffffe          BL       TIMER_ResetTimer
000198  f8b40042          LDRH     r0,[r4,#0x42]         ;2874  ; dut_info
00019c  f2a010f5          SUB      r0,r0,#0x1f5          ;2874
0001a0  42a8              CMP      r0,r5                 ;2874
0001a2  d21e              BCS      |L6.482|
0001a4  f64030b8          MOV      r0,#0xbb8             ;2877
0001a8  f7fffffe          BL       DAC1_output
0001ac  4630              MOV      r0,r6                 ;2878
0001ae  f7fffffe          BL       Delayms
0001b2  e002              B        |L6.442|
                  |L6.436|
0001b4  e02f              B        |L6.534|
                  |L6.438|
0001b6  e06f              B        |L6.664|
                  |L6.440|
0001b8  e0a5              B        |L6.774|
                  |L6.442|
0001ba  f7fffffe          BL       Clear_All_Lines
0001be  a161              ADR      r1,|L6.836|
0001c0  2000              MOVS     r0,#0                 ;2880
0001c2  f7fffffe          BL       Display_Centered
0001c6  a176              ADR      r1,|L6.928|
0001c8  2001              MOVS     r0,#1                 ;2881
0001ca  f7fffffe          BL       Display_Centered
0001ce  a178              ADR      r1,|L6.944|
0001d0  2002              MOVS     r0,#2                 ;2882
0001d2  f7fffffe          BL       Display_Centered
0001d6  e8bd407c          POP      {r2-r6,lr}            ;2885
0001da  2102              MOVS     r1,#2                 ;2885
0001dc  20eb              MOVS     r0,#0xeb              ;2885
0001de  f7ffbffe          B.W      CAN_PROTOCOL_TEST_SendCmdParamAck
                  |L6.482|
0001e2  f7fffffe          BL       Clear_All_Lines
0001e6  a157              ADR      r1,|L6.836|
0001e8  2000              MOVS     r0,#0                 ;2890
0001ea  f7fffffe          BL       Display_Centered
0001ee  a172              ADR      r1,|L6.952|
0001f0  2001              MOVS     r0,#1                 ;2891
0001f2  f7fffffe          BL       Display_Centered
0001f6  a167              ADR      r1,|L6.916|
0001f8  2002              MOVS     r0,#2                 ;2892
0001fa  f7fffffe          BL       Display_Centered
0001fe  2100              MOVS     r1,#0                 ;2893
000200  200b              MOVS     r0,#0xb               ;2893
000202  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000206  2008              MOVS     r0,#8                 ;2894
000208  f7fffffe          BL       TIMER_KillTask
00020c  e8bd407c          POP      {r2-r6,lr}            ;2895
000210  2001              MOVS     r0,#1                 ;2895
000212  f7ffbffe          B.W      STATE_EnterState
                  |L6.534|
000216  20a0              MOVS     r0,#0xa0              ;2901
000218  f7fffffe          BL       STATE_SwitchStep
00021c  2008              MOVS     r0,#8                 ;2902
00021e  f7fffffe          BL       TIMER_ResetTimer
000222  f8b40042          LDRH     r0,[r4,#0x42]         ;2905  ; dut_info
000226  f6a010c5          SUB      r0,r0,#0x9c5          ;2905
00022a  42a8              CMP      r0,r5                 ;2905
00022c  d21a              BCS      |L6.612|
00022e  f2413088          MOV      r0,#0x1388            ;2908
000232  f7fffffe          BL       DAC1_output
000236  4630              MOV      r0,r6                 ;2909
000238  f7fffffe          BL       Delayms
00023c  f7fffffe          BL       Clear_All_Lines
000240  a140              ADR      r1,|L6.836|
000242  2000              MOVS     r0,#0                 ;2911
000244  f7fffffe          BL       Display_Centered
000248  a155              ADR      r1,|L6.928|
00024a  2001              MOVS     r0,#1                 ;2912
00024c  f7fffffe          BL       Display_Centered
000250  a15b              ADR      r1,|L6.960|
000252  2002              MOVS     r0,#2                 ;2913
000254  f7fffffe          BL       Display_Centered
000258  e8bd407c          POP      {r2-r6,lr}            ;2916
00025c  2102              MOVS     r1,#2                 ;2916
00025e  20eb              MOVS     r0,#0xeb              ;2916
000260  f7ffbffe          B.W      CAN_PROTOCOL_TEST_SendCmdParamAck
                  |L6.612|
000264  f7fffffe          BL       Clear_All_Lines
000268  a136              ADR      r1,|L6.836|
00026a  2000              MOVS     r0,#0                 ;2921
00026c  f7fffffe          BL       Display_Centered
000270  a155              ADR      r1,|L6.968|
000272  2001              MOVS     r0,#1                 ;2922
000274  f7fffffe          BL       Display_Centered
000278  a146              ADR      r1,|L6.916|
00027a  2002              MOVS     r0,#2                 ;2923
00027c  f7fffffe          BL       Display_Centered
000280  2100              MOVS     r1,#0                 ;2924
000282  200b              MOVS     r0,#0xb               ;2924
000284  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000288  2008              MOVS     r0,#8                 ;2925
00028a  f7fffffe          BL       TIMER_KillTask
00028e  e8bd407c          POP      {r2-r6,lr}            ;2926
000292  2001              MOVS     r0,#1                 ;2926
000294  f7ffbffe          B.W      STATE_EnterState
                  |L6.664|
000298  2008              MOVS     r0,#8                 ;2932
00029a  f7fffffe          BL       TIMER_ResetTimer
00029e  f8b40042          LDRH     r0,[r4,#0x42]         ;2935  ; dut_info
0002a2  f5a05088          SUB      r0,r0,#0x1100         ;2935
0002a6  3895              SUBS     r0,r0,#0x95           ;2935
0002a8  42a8              CMP      r0,r5                 ;2935
0002aa  d212              BCS      |L6.722|
0002ac  f7fffffe          BL       Clear_All_Lines
0002b0  a124              ADR      r1,|L6.836|
0002b2  2000              MOVS     r0,#0                 ;2939
0002b4  f7fffffe          BL       Display_Centered
0002b8  a139              ADR      r1,|L6.928|
0002ba  2001              MOVS     r0,#1                 ;2940
0002bc  f7fffffe          BL       Display_Centered
0002c0  a143              ADR      r1,|L6.976|
0002c2  2002              MOVS     r0,#2                 ;2941
0002c4  f7fffffe          BL       Display_Centered
0002c8  e8bd407c          POP      {r2-r6,lr}            ;2942
0002cc  20a6              MOVS     r0,#0xa6              ;2942
0002ce  f7ffbffe          B.W      STATE_SwitchStep
                  |L6.722|
0002d2  f7fffffe          BL       Clear_All_Lines
0002d6  a11b              ADR      r1,|L6.836|
0002d8  2000              MOVS     r0,#0                 ;2947
0002da  f7fffffe          BL       Display_Centered
0002de  a13e              ADR      r1,|L6.984|
0002e0  2001              MOVS     r0,#1                 ;2948
0002e2  f7fffffe          BL       Display_Centered
0002e6  a12b              ADR      r1,|L6.916|
0002e8  2002              MOVS     r0,#2                 ;2949
0002ea  f7fffffe          BL       Display_Centered
0002ee  2100              MOVS     r1,#0                 ;2950
0002f0  200b              MOVS     r0,#0xb               ;2950
0002f2  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0002f6  2008              MOVS     r0,#8                 ;2951
0002f8  f7fffffe          BL       TIMER_KillTask
0002fc  e8bd407c          POP      {r2-r6,lr}            ;2952
000300  2001              MOVS     r0,#1                 ;2952
000302  f7ffbffe          B.W      STATE_EnterState
                  |L6.774|
000306  2008              MOVS     r0,#8                 ;2958
000308  f7fffffe          BL       TIMER_KillTask
00030c  f7fffffe          BL       AVO_PIN_Reset
000310  f7fffffe          BL       Clear_All_Lines
000314  a10b              ADR      r1,|L6.836|
000316  2000              MOVS     r0,#0                 ;2961
000318  f7fffffe          BL       Display_Centered
00031c  a130              ADR      r1,|L6.992|
00031e  2001              MOVS     r0,#1                 ;2962
000320  f7fffffe          BL       Display_Centered
000324  2001              MOVS     r0,#1                 ;2963
000326  f7fffffe          BL       STATE_EnterState
00032a  2000              MOVS     r0,#0                 ;2964
00032c  f7fffffe          BL       DAC0_output
000330  e8bd407c          POP      {r2-r6,lr}            ;2965
000334  2101              MOVS     r1,#1                 ;2965
000336  200b              MOVS     r0,#0xb               ;2965
000338  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
;;;2984   
                          ENDP

                  |L6.828|
                          DCD      ||.data||+0x6
                  |L6.832|
                          DCD      dut_info
                  |L6.836|
000344  4252414b          DCB      "BRAKE",0
000348  4500    
00034a  00                DCB      0
00034b  00                DCB      0
                  |L6.844|
00034c  54657374          DCB      "Testing",0
000350  696e6700
                  |L6.852|
                          DCD      measure
                  |L6.856|
000358  56434300          DCB      "VCC",0
                  |L6.860|
00035c  4e6f726d          DCB      "Normal",0
000360  616c00  
000363  00                DCB      0
                  |L6.868|
000364  54657374          DCB      "Test Timeout",0
000368  2054696d
00036c  656f7574
000370  00      
000371  00                DCB      0
000372  00                DCB      0
000373  00                DCB      0
                  |L6.884|
                          DCD      0x40011000
                  |L6.888|
000378  41564f20          DCB      "AVO METER",0
00037c  4d455445
000380  5200    
000382  00                DCB      0
000383  00                DCB      0
                  |L6.900|
000384  4d656173          DCB      "Measurement",0
000388  7572656d
00038c  656e7400
                  |L6.912|
                          DCD      STATE_SwitchStep
                  |L6.916|
000394  41626e6f          DCB      "Abnormal",0
000398  726d616c
00039c  00      
00039d  00                DCB      0
00039e  00                DCB      0
00039f  00                DCB      0
                  |L6.928|
0003a0  41646a75          DCB      "Adjusting DAC",0
0003a4  7374696e
0003a8  67204441
0003ac  4300    
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L6.944|
0003b0  46697273          DCB      "First",0
0003b4  7400    
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L6.952|
0003b8  53494731          DCB      "SIG1",0
0003bc  00      
0003bd  00                DCB      0
0003be  00                DCB      0
0003bf  00                DCB      0
                  |L6.960|
0003c0  5365636f          DCB      "Second",0
0003c4  6e6400  
0003c7  00                DCB      0
                  |L6.968|
0003c8  53494732          DCB      "SIG2",0
0003cc  00      
0003cd  00                DCB      0
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L6.976|
0003d0  54686972          DCB      "Third",0
0003d4  6400    
0003d6  00                DCB      0
0003d7  00                DCB      0
                  |L6.984|
0003d8  53494733          DCB      "SIG3",0
0003dc  00      
0003dd  00                DCB      0
0003de  00                DCB      0
0003df  00                DCB      0
                  |L6.992|
0003e0  54657374          DCB      "Test Pass",0
0003e4  20506173
0003e8  7300    
0003ea  00                DCB      0
0003eb  00                DCB      0

                          AREA ||i.STEP_Process_BrakeUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_BrakeUartTest PROC
;;;1302   // 刹把测试
;;;1303   void STEP_Process_BrakeUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;1304   {
;;;1305       switch (stateCB.step)
000002  48cf              LDR      r0,|L7.832|
;;;1306       {
;;;1307           case STEP_NULL: // 空步骤
;;;1308               break;
;;;1309   
;;;1310           case STEP_BRAKE_UART_TEST_ENTRY: // 入口步骤
;;;1311               STATE_SwitchStep(STEP_BRAKE_UART_TEST_VCC);
;;;1312               UART_DRIVE_InitSelect(dut_info.uart_baudRate);
000004  4ccf              LDR      r4,|L7.836|
;;;1313               DUT_PROTOCOL_Init();
;;;1314               Clear_All_Lines();
;;;1315               Display_Centered(0, "BRAKE");
;;;1316               Display_Centered(1, "Testing");
;;;1317   
;;;1318               // 测试引脚复位
;;;1319               AVO_PIN_Reset();
;;;1320               break;
;;;1321   
;;;1322           case STEP_BRAKE_UART_TEST_WAIT_RESPONSE: // 等待仪表或万用表回应
;;;1323               break;
;;;1324   
;;;1325           case STEP_BRAKE_UART_TEST_VCC: // 通知万用表测VCC
;;;1326               STATE_SwitchStep(STEP_BRAKE_UART_TEST_WAIT_RESPONSE);
;;;1327   
;;;1328               // 打开VCC测试引脚
;;;1329               BRAKE_VCC_TEST_EN_ON();
;;;1330   
;;;1331               // 通知万用表测电压
;;;1332               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1333               Clear_All_Lines();
;;;1334               Display_Centered(0, "BRAKE");
;;;1335               Display_Centered(1, "AVO METER");
;;;1336               Display_Centered(2, "Measurement");
;;;1337   
;;;1338               // 添加超时
;;;1339               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;1340                             4000,
;;;1341                             STATE_SwitchStep,
;;;1342                             STEP_BRAKE_UART_TEST_COMMUNICATION_TIME_OUT,
;;;1343                             1,
;;;1344                             ACTION_MODE_ADD_TO_QUEUE);
;;;1345               break;
;;;1346   
;;;1347           // 比对VCC
;;;1348           case STEP_BRAKE_UART_TEST_CHECK_VOLTAGE_VALUE:
;;;1349               STATE_SwitchStep(STEP_BRAKE_UART_TEST_WAIT_RESPONSE);
;;;1350               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1351   
;;;1352               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;1353               {
;;;1354                   // 调整DAC输出,单位mv
;;;1355                   DAC1_output(FIRST_DAC);
;;;1356                   Delayms(300);
000006  f44f7696          MOV      r6,#0x12c
00000a  8840              LDRH     r0,[r0,#2]            ;1305  ; stateCB
;;;1357                   Clear_All_Lines();
;;;1358                   Display_Centered(0, "BRAKE");
;;;1359                   Display_Centered(1, "VCC");
;;;1360                   Display_Centered(2, "Normal");
;;;1361   
;;;1362                   // 获取刹把AD值
;;;1363                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_GET_THROTTLE_BRAKE_AD, 2);
;;;1364               }
;;;1365               // VCC不正常，则上报
;;;1366               else
;;;1367               {
;;;1368                   Clear_All_Lines();
;;;1369                   Display_Centered(0, "BRAKE");
;;;1370                   Display_Centered(1, "VCC");
;;;1371                   Display_Centered(2, "Abnormal");
;;;1372                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1373                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1374                   STATE_EnterState(STATE_STANDBY);
;;;1375               }
;;;1376               break;
;;;1377   
;;;1378           // 在这进行判断数值是否正常，第一次
;;;1379           case STEP_BRAKE_UART_TEST_CHECK_DAC1_VALUE:
;;;1380               STATE_SwitchStep(STEP_BRAKE_UART_TEST_WAIT_RESPONSE);
;;;1381               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1382   
;;;1383               // 处理DAC1数值检查逻辑
;;;1384               if ((dut_info.brakeAd > FIRST_DAC - ERROR_DAC) && (dut_info.brakeAd < FIRST_DAC + ERROR_DAC))
00000c  f24035e7          MOV      r5,#0x3e7
000010  2848              CMP      r0,#0x48              ;1305
000012  d07d              BEQ      |L7.272|
000014  dc50              BGT      |L7.184|
000016  2845              CMP      r0,#0x45              ;1305
000018  d07b              BEQ      |L7.274|
00001a  dc19              BGT      |L7.80|
00001c  2800              CMP      r0,#0                 ;1305
00001e  d078              BEQ      |L7.274|
000020  2844              CMP      r0,#0x44              ;1305
000022  d176              BNE      |L7.274|
000024  2046              MOVS     r0,#0x46              ;1311
000026  f7fffffe          BL       STATE_SwitchStep
00002a  6a20              LDR      r0,[r4,#0x20]         ;1312  ; dut_info
00002c  f7fffffe          BL       UART_DRIVE_InitSelect
000030  f7fffffe          BL       DUT_PROTOCOL_Init
000034  f7fffffe          BL       Clear_All_Lines
000038  a1c3              ADR      r1,|L7.840|
00003a  2000              MOVS     r0,#0                 ;1315
00003c  f7fffffe          BL       Display_Centered
000040  a1c3              ADR      r1,|L7.848|
000042  2001              MOVS     r0,#1                 ;1316
000044  f7fffffe          BL       Display_Centered
000048  e8bd407c          POP      {r2-r6,lr}            ;1319
00004c  f7ffbffe          B.W      AVO_PIN_Reset
                  |L7.80|
000050  2846              CMP      r0,#0x46              ;1305
000052  d054              BEQ      |L7.254|
000054  4dc0              LDR      r5,|L7.856|
000056  2847              CMP      r0,#0x47              ;1305
000058  d17e              BNE      |L7.344|
00005a  2045              MOVS     r0,#0x45              ;1349
00005c  f7fffffe          BL       STATE_SwitchStep
000060  2008              MOVS     r0,#8                 ;1350
000062  f7fffffe          BL       TIMER_ResetTimer
000066  6ba0              LDR      r0,[r4,#0x38]         ;1352  ; dut_info
000068  f7fffffe          BL       __aeabi_ui2f
00006c  6829              LDR      r1,[r5,#0]            ;1352  ; measure
00006e  f7fffffe          BL       __aeabi_cfcmple
000072  d273              BCS      |L7.348|
000074  6b60              LDR      r0,[r4,#0x34]         ;1352  ; dut_info
000076  f7fffffe          BL       __aeabi_ui2f
00007a  6829              LDR      r1,[r5,#0]            ;1352  ; measure
00007c  f7fffffe          BL       __aeabi_cfrcmple
000080  d26c              BCS      |L7.348|
000082  f44f707a          MOV      r0,#0x3e8             ;1355
000086  f7fffffe          BL       DAC1_output
00008a  4630              MOV      r0,r6                 ;1356
00008c  f7fffffe          BL       Delayms
000090  f7fffffe          BL       Clear_All_Lines
000094  a1ac              ADR      r1,|L7.840|
000096  2000              MOVS     r0,#0                 ;1358
000098  f7fffffe          BL       Display_Centered
00009c  a1af              ADR      r1,|L7.860|
00009e  2001              MOVS     r0,#1                 ;1359
0000a0  f7fffffe          BL       Display_Centered
0000a4  a1ae              ADR      r1,|L7.864|
0000a6  2002              MOVS     r0,#2                 ;1360
0000a8  f7fffffe          BL       Display_Centered
0000ac  e8bd407c          POP      {r2-r6,lr}            ;1363
0000b0  2102              MOVS     r1,#2                 ;1363
0000b2  20eb              MOVS     r0,#0xeb              ;1363
0000b4  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L7.184|
0000b8  2849              CMP      r0,#0x49              ;1305
0000ba  d07d              BEQ      |L7.440|
0000bc  284a              CMP      r0,#0x4a              ;1305
0000be  d07c              BEQ      |L7.442|
0000c0  284b              CMP      r0,#0x4b              ;1305
0000c2  d07b              BEQ      |L7.444|
0000c4  284c              CMP      r0,#0x4c              ;1305
0000c6  d147              BNE      |L7.344|
;;;1385               {
;;;1386                   // 调整DAC输出,单位mv
;;;1387                   DAC1_output(SECOND_DAC);
;;;1388                   Delayms(300);
;;;1389                   Clear_All_Lines();
;;;1390                   Display_Centered(0, "BRAKE");
;;;1391                   Display_Centered(1, "Adjusting DAC");
;;;1392                   Display_Centered(2, "First");
;;;1393   
;;;1394                   // 获取刹把AD值
;;;1395                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_GET_THROTTLE_BRAKE_AD, 2);
;;;1396               }
;;;1397               else
;;;1398               {
;;;1399                   Clear_All_Lines();
;;;1400                   Display_Centered(0, "BRAKE");
;;;1401                   Display_Centered(1, "SIG1");
;;;1402                   Display_Centered(2, "Abnormal");
;;;1403                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1404                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1405                   STATE_EnterState(STATE_STANDBY);
;;;1406               }
;;;1407               break;
;;;1408   
;;;1409           // 在这进行判断数值是否正常，第二次
;;;1410           case STEP_BRAKE_UART_TEST_CHECK_DAC3_VALUE:
;;;1411               STATE_SwitchStep(STEP_BRAKE_UART_TEST_WAIT_RESPONSE);
;;;1412               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1413   
;;;1414               // 处理DAC5数值检查逻辑
;;;1415               if ((dut_info.brakeAd > SECOND_DAC - ERROR_DAC) && (dut_info.brakeAd < SECOND_DAC + ERROR_DAC))
;;;1416               {
;;;1417                   // 调整DAC输出,单位mv
;;;1418                   DAC1_output(THIRD_DAC);
;;;1419                   Delayms(300);
;;;1420                   Clear_All_Lines();
;;;1421                   Display_Centered(0, "BRAKE");
;;;1422                   Display_Centered(1, "Adjusting DAC");
;;;1423                   Display_Centered(2, "Second");
;;;1424   
;;;1425                   // 获取刹把AD值
;;;1426                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_GET_THROTTLE_BRAKE_AD, 2);
;;;1427               }
;;;1428               else
;;;1429               {
;;;1430                   Clear_All_Lines();
;;;1431                   Display_Centered(0, "BRAKE");
;;;1432                   Display_Centered(1, "SIG2");
;;;1433                   Display_Centered(2, "Abnormal");
;;;1434                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1435                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1436                   STATE_EnterState(STATE_STANDBY);
;;;1437               }
;;;1438               break;
;;;1439   
;;;1440           // 在这进行判断数值是否正常，第三次
;;;1441           case STEP_BRAKE_UART_TEST_CHECK_DAC5_VALUE:
;;;1442               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1443   
;;;1444               // 处理DAC5数值检查逻辑
;;;1445               if ((dut_info.brakeAd > THIRD_DAC - ERROR_DAC) && (dut_info.brakeAd < THIRD_DAC + ERROR_DAC))
;;;1446               {
;;;1447                   // 3次都正常则测试通过
;;;1448                   Clear_All_Lines();
;;;1449                   Display_Centered(0, "BRAKE");
;;;1450                   Display_Centered(1, "Adjusting DAC");
;;;1451                   Display_Centered(2, "Third");
;;;1452                   STATE_SwitchStep(STEP_BRAKE_UART_TEST_COMPLETE);
;;;1453               }
;;;1454               else
;;;1455               {
;;;1456                   Clear_All_Lines();
;;;1457                   Display_Centered(0, "BRAKE");
;;;1458                   Display_Centered(1, "SIG3");
;;;1459                   Display_Centered(2, "Abnormal");
;;;1460                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1461                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1462                   STATE_EnterState(STATE_STANDBY);
;;;1463               }
;;;1464               break;
;;;1465   
;;;1466           // 刹把测试完成步骤，关闭DAC输出调整为0，然后上报结果
;;;1467           case STEP_BRAKE_UART_TEST_COMPLETE:
;;;1468               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1469               AVO_PIN_Reset();
;;;1470               Clear_All_Lines();
;;;1471               Display_Centered(0, "BRAKE");
;;;1472               Display_Centered(1, "Test Pass");
;;;1473               STATE_EnterState(STATE_STANDBY);
;;;1474               DAC0_output(0);
;;;1475               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;1476               break;
;;;1477   
;;;1478           // 通信超时
;;;1479           case STEP_BRAKE_UART_TEST_COMMUNICATION_TIME_OUT:
;;;1480               DAC0_output(0);
0000c8  2000              MOVS     r0,#0
0000ca  f7fffffe          BL       DAC0_output
;;;1481               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
0000ce  2100              MOVS     r1,#0
0000d0  200b              MOVS     r0,#0xb
0000d2  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;1482               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0000d6  2008              MOVS     r0,#8
0000d8  f7fffffe          BL       TIMER_KillTask
;;;1483               AVO_PIN_Reset();
0000dc  f7fffffe          BL       AVO_PIN_Reset
;;;1484               Clear_All_Lines();
0000e0  f7fffffe          BL       Clear_All_Lines
;;;1485               Display_Centered(0, "BRAKE");
0000e4  a198              ADR      r1,|L7.840|
0000e6  2000              MOVS     r0,#0
0000e8  f7fffffe          BL       Display_Centered
;;;1486               Display_Centered(1, "Test Timeout");
0000ec  a19e              ADR      r1,|L7.872|
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       Display_Centered
;;;1487               STATE_EnterState(STATE_STANDBY);
0000f4  e8bd407c          POP      {r2-r6,lr}
0000f8  2001              MOVS     r0,#1
0000fa  f7ffbffe          B.W      STATE_EnterState
                  |L7.254|
0000fe  2045              MOVS     r0,#0x45              ;1326
000100  f7fffffe          BL       STATE_SwitchStep
000104  4c9c              LDR      r4,|L7.888|
000106  2340              MOVS     r3,#0x40              ;1329
000108  2203              MOVS     r2,#3                 ;1329
00010a  2110              MOVS     r1,#0x10              ;1329
00010c  4620              MOV      r0,r4                 ;1329
00010e  e001              B        |L7.276|
                  |L7.272|
000110  e03e              B        |L7.400|
                  |L7.274|
000112  e021              B        |L7.344|
                  |L7.276|
000114  f7fffffe          BL       gpio_init
000118  2140              MOVS     r1,#0x40              ;1329
00011a  4620              MOV      r0,r4                 ;1329
00011c  f7fffffe          BL       gpio_bit_set
000120  2100              MOVS     r1,#0                 ;1332
000122  2001              MOVS     r0,#1                 ;1332
000124  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000128  f7fffffe          BL       Clear_All_Lines
00012c  a186              ADR      r1,|L7.840|
00012e  2000              MOVS     r0,#0                 ;1334
000130  f7fffffe          BL       Display_Centered
000134  a191              ADR      r1,|L7.892|
000136  2001              MOVS     r0,#1                 ;1335
000138  f7fffffe          BL       Display_Centered
00013c  a192              ADR      r1,|L7.904|
00013e  2002              MOVS     r0,#2                 ;1336
000140  f7fffffe          BL       Display_Centered
000144  2001              MOVS     r0,#1                 ;1339
000146  9000              STR      r0,[sp,#0]            ;1339
000148  9001              STR      r0,[sp,#4]            ;1339
00014a  234c              MOVS     r3,#0x4c              ;1339
00014c  4a91              LDR      r2,|L7.916|
00014e  f44f617a          MOV      r1,#0xfa0             ;1339
000152  2008              MOVS     r0,#8                 ;1339
000154  f7fffffe          BL       TIMER_AddTask
                  |L7.344|
;;;1488               break;
;;;1489   
;;;1490           default:
;;;1491               break;
;;;1492       }
;;;1493   }
000158  bd7c              POP      {r2-r6,pc}
00015a  e7ff              B        |L7.348|
                  |L7.348|
00015c  f7fffffe          BL       Clear_All_Lines
000160  a179              ADR      r1,|L7.840|
000162  2000              MOVS     r0,#0                 ;1369
000164  f7fffffe          BL       Display_Centered
000168  a17c              ADR      r1,|L7.860|
00016a  2001              MOVS     r0,#1                 ;1370
00016c  f7fffffe          BL       Display_Centered
000170  a189              ADR      r1,|L7.920|
000172  2002              MOVS     r0,#2                 ;1371
000174  f7fffffe          BL       Display_Centered
000178  2100              MOVS     r1,#0                 ;1372
00017a  200b              MOVS     r0,#0xb               ;1372
00017c  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000180  2008              MOVS     r0,#8                 ;1373
000182  f7fffffe          BL       TIMER_KillTask
000186  e8bd407c          POP      {r2-r6,lr}            ;1374
00018a  2001              MOVS     r0,#1                 ;1374
00018c  f7ffbffe          B.W      STATE_EnterState
                  |L7.400|
000190  2045              MOVS     r0,#0x45              ;1380
000192  f7fffffe          BL       STATE_SwitchStep
000196  2008              MOVS     r0,#8                 ;1381
000198  f7fffffe          BL       TIMER_ResetTimer
00019c  f8b40042          LDRH     r0,[r4,#0x42]         ;1384  ; dut_info
0001a0  f2a010f5          SUB      r0,r0,#0x1f5          ;1384
0001a4  42a8              CMP      r0,r5                 ;1384
0001a6  d21e              BCS      |L7.486|
0001a8  f64030b8          MOV      r0,#0xbb8             ;1387
0001ac  f7fffffe          BL       DAC1_output
0001b0  4630              MOV      r0,r6                 ;1388
0001b2  f7fffffe          BL       Delayms
0001b6  e002              B        |L7.446|
                  |L7.440|
0001b8  e02f              B        |L7.538|
                  |L7.442|
0001ba  e06f              B        |L7.668|
                  |L7.444|
0001bc  e0a5              B        |L7.778|
                  |L7.446|
0001be  f7fffffe          BL       Clear_All_Lines
0001c2  a161              ADR      r1,|L7.840|
0001c4  2000              MOVS     r0,#0                 ;1390
0001c6  f7fffffe          BL       Display_Centered
0001ca  a176              ADR      r1,|L7.932|
0001cc  2001              MOVS     r0,#1                 ;1391
0001ce  f7fffffe          BL       Display_Centered
0001d2  a178              ADR      r1,|L7.948|
0001d4  2002              MOVS     r0,#2                 ;1392
0001d6  f7fffffe          BL       Display_Centered
0001da  e8bd407c          POP      {r2-r6,lr}            ;1395
0001de  2102              MOVS     r1,#2                 ;1395
0001e0  20eb              MOVS     r0,#0xeb              ;1395
0001e2  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L7.486|
0001e6  f7fffffe          BL       Clear_All_Lines
0001ea  a157              ADR      r1,|L7.840|
0001ec  2000              MOVS     r0,#0                 ;1400
0001ee  f7fffffe          BL       Display_Centered
0001f2  a172              ADR      r1,|L7.956|
0001f4  2001              MOVS     r0,#1                 ;1401
0001f6  f7fffffe          BL       Display_Centered
0001fa  a167              ADR      r1,|L7.920|
0001fc  2002              MOVS     r0,#2                 ;1402
0001fe  f7fffffe          BL       Display_Centered
000202  2100              MOVS     r1,#0                 ;1403
000204  200b              MOVS     r0,#0xb               ;1403
000206  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00020a  2008              MOVS     r0,#8                 ;1404
00020c  f7fffffe          BL       TIMER_KillTask
000210  e8bd407c          POP      {r2-r6,lr}            ;1405
000214  2001              MOVS     r0,#1                 ;1405
000216  f7ffbffe          B.W      STATE_EnterState
                  |L7.538|
00021a  2045              MOVS     r0,#0x45              ;1411
00021c  f7fffffe          BL       STATE_SwitchStep
000220  2008              MOVS     r0,#8                 ;1412
000222  f7fffffe          BL       TIMER_ResetTimer
000226  f8b40042          LDRH     r0,[r4,#0x42]         ;1415  ; dut_info
00022a  f6a010c5          SUB      r0,r0,#0x9c5          ;1415
00022e  42a8              CMP      r0,r5                 ;1415
000230  d21a              BCS      |L7.616|
000232  f2413088          MOV      r0,#0x1388            ;1418
000236  f7fffffe          BL       DAC1_output
00023a  4630              MOV      r0,r6                 ;1419
00023c  f7fffffe          BL       Delayms
000240  f7fffffe          BL       Clear_All_Lines
000244  a140              ADR      r1,|L7.840|
000246  2000              MOVS     r0,#0                 ;1421
000248  f7fffffe          BL       Display_Centered
00024c  a155              ADR      r1,|L7.932|
00024e  2001              MOVS     r0,#1                 ;1422
000250  f7fffffe          BL       Display_Centered
000254  a15b              ADR      r1,|L7.964|
000256  2002              MOVS     r0,#2                 ;1423
000258  f7fffffe          BL       Display_Centered
00025c  e8bd407c          POP      {r2-r6,lr}            ;1426
000260  2102              MOVS     r1,#2                 ;1426
000262  20eb              MOVS     r0,#0xeb              ;1426
000264  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L7.616|
000268  f7fffffe          BL       Clear_All_Lines
00026c  a136              ADR      r1,|L7.840|
00026e  2000              MOVS     r0,#0                 ;1431
000270  f7fffffe          BL       Display_Centered
000274  a155              ADR      r1,|L7.972|
000276  2001              MOVS     r0,#1                 ;1432
000278  f7fffffe          BL       Display_Centered
00027c  a146              ADR      r1,|L7.920|
00027e  2002              MOVS     r0,#2                 ;1433
000280  f7fffffe          BL       Display_Centered
000284  2100              MOVS     r1,#0                 ;1434
000286  200b              MOVS     r0,#0xb               ;1434
000288  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00028c  2008              MOVS     r0,#8                 ;1435
00028e  f7fffffe          BL       TIMER_KillTask
000292  e8bd407c          POP      {r2-r6,lr}            ;1436
000296  2001              MOVS     r0,#1                 ;1436
000298  f7ffbffe          B.W      STATE_EnterState
                  |L7.668|
00029c  2008              MOVS     r0,#8                 ;1442
00029e  f7fffffe          BL       TIMER_ResetTimer
0002a2  f8b40042          LDRH     r0,[r4,#0x42]         ;1445  ; dut_info
0002a6  f5a05088          SUB      r0,r0,#0x1100         ;1445
0002aa  3895              SUBS     r0,r0,#0x95           ;1445
0002ac  42a8              CMP      r0,r5                 ;1445
0002ae  d212              BCS      |L7.726|
0002b0  f7fffffe          BL       Clear_All_Lines
0002b4  a124              ADR      r1,|L7.840|
0002b6  2000              MOVS     r0,#0                 ;1449
0002b8  f7fffffe          BL       Display_Centered
0002bc  a139              ADR      r1,|L7.932|
0002be  2001              MOVS     r0,#1                 ;1450
0002c0  f7fffffe          BL       Display_Centered
0002c4  a143              ADR      r1,|L7.980|
0002c6  2002              MOVS     r0,#2                 ;1451
0002c8  f7fffffe          BL       Display_Centered
0002cc  e8bd407c          POP      {r2-r6,lr}            ;1452
0002d0  204b              MOVS     r0,#0x4b              ;1452
0002d2  f7ffbffe          B.W      STATE_SwitchStep
                  |L7.726|
0002d6  f7fffffe          BL       Clear_All_Lines
0002da  a11b              ADR      r1,|L7.840|
0002dc  2000              MOVS     r0,#0                 ;1457
0002de  f7fffffe          BL       Display_Centered
0002e2  a13e              ADR      r1,|L7.988|
0002e4  2001              MOVS     r0,#1                 ;1458
0002e6  f7fffffe          BL       Display_Centered
0002ea  a12b              ADR      r1,|L7.920|
0002ec  2002              MOVS     r0,#2                 ;1459
0002ee  f7fffffe          BL       Display_Centered
0002f2  2100              MOVS     r1,#0                 ;1460
0002f4  200b              MOVS     r0,#0xb               ;1460
0002f6  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0002fa  2008              MOVS     r0,#8                 ;1461
0002fc  f7fffffe          BL       TIMER_KillTask
000300  e8bd407c          POP      {r2-r6,lr}            ;1462
000304  2001              MOVS     r0,#1                 ;1462
000306  f7ffbffe          B.W      STATE_EnterState
                  |L7.778|
00030a  2008              MOVS     r0,#8                 ;1468
00030c  f7fffffe          BL       TIMER_KillTask
000310  f7fffffe          BL       AVO_PIN_Reset
000314  f7fffffe          BL       Clear_All_Lines
000318  a10b              ADR      r1,|L7.840|
00031a  2000              MOVS     r0,#0                 ;1471
00031c  f7fffffe          BL       Display_Centered
000320  a130              ADR      r1,|L7.996|
000322  2001              MOVS     r0,#1                 ;1472
000324  f7fffffe          BL       Display_Centered
000328  2001              MOVS     r0,#1                 ;1473
00032a  f7fffffe          BL       STATE_EnterState
00032e  2000              MOVS     r0,#0                 ;1474
000330  f7fffffe          BL       DAC0_output
000334  e8bd407c          POP      {r2-r6,lr}            ;1475
000338  2101              MOVS     r1,#1                 ;1475
00033a  200b              MOVS     r0,#0xb               ;1475
00033c  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
;;;1494   
                          ENDP

                  |L7.832|
                          DCD      ||.data||+0x6
                  |L7.836|
                          DCD      dut_info
                  |L7.840|
000348  4252414b          DCB      "BRAKE",0
00034c  4500    
00034e  00                DCB      0
00034f  00                DCB      0
                  |L7.848|
000350  54657374          DCB      "Testing",0
000354  696e6700
                  |L7.856|
                          DCD      measure
                  |L7.860|
00035c  56434300          DCB      "VCC",0
                  |L7.864|
000360  4e6f726d          DCB      "Normal",0
000364  616c00  
000367  00                DCB      0
                  |L7.872|
000368  54657374          DCB      "Test Timeout",0
00036c  2054696d
000370  656f7574
000374  00      
000375  00                DCB      0
000376  00                DCB      0
000377  00                DCB      0
                  |L7.888|
                          DCD      0x40011000
                  |L7.892|
00037c  41564f20          DCB      "AVO METER",0
000380  4d455445
000384  5200    
000386  00                DCB      0
000387  00                DCB      0
                  |L7.904|
000388  4d656173          DCB      "Measurement",0
00038c  7572656d
000390  656e7400
                  |L7.916|
                          DCD      STATE_SwitchStep
                  |L7.920|
000398  41626e6f          DCB      "Abnormal",0
00039c  726d616c
0003a0  00      
0003a1  00                DCB      0
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L7.932|
0003a4  41646a75          DCB      "Adjusting DAC",0
0003a8  7374696e
0003ac  67204441
0003b0  4300    
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L7.948|
0003b4  46697273          DCB      "First",0
0003b8  7400    
0003ba  00                DCB      0
0003bb  00                DCB      0
                  |L7.956|
0003bc  53494731          DCB      "SIG1",0
0003c0  00      
0003c1  00                DCB      0
0003c2  00                DCB      0
0003c3  00                DCB      0
                  |L7.964|
0003c4  5365636f          DCB      "Second",0
0003c8  6e6400  
0003cb  00                DCB      0
                  |L7.972|
0003cc  53494732          DCB      "SIG2",0
0003d0  00      
0003d1  00                DCB      0
0003d2  00                DCB      0
0003d3  00                DCB      0
                  |L7.980|
0003d4  54686972          DCB      "Third",0
0003d8  6400    
0003da  00                DCB      0
0003db  00                DCB      0
                  |L7.988|
0003dc  53494733          DCB      "SIG3",0
0003e0  00      
0003e1  00                DCB      0
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L7.996|
0003e4  54657374          DCB      "Test Pass",0
0003e8  20506173
0003ec  7300    
0003ee  00                DCB      0
0003ef  00                DCB      0

                          AREA ||i.STEP_Process_CalibrationCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_CalibrationCanTest PROC
;;;3266   // 电压校准
;;;3267   void STEP_Process_CalibrationCanTest(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;3268   {
;;;3269       switch (stateCB.step)
000002  4842              LDR      r0,|L8.268|
;;;3270       {
;;;3271           case STEP_NULL: // 空步骤
;;;3272               break;
;;;3273   
;;;3274           case STEP_CALIBRATION_CAN_TEST_ENTRY: // 入口步骤
;;;3275               STATE_SwitchStep(STEP_CALIBRATION_CAN_TEST_ENTRY);
;;;3276   
;;;3277               break;
;;;3278   
;;;3279           case STEP_CALIBRATION_CAN_TEST_WAIT_RESPONSE: // 等待仪表/电源板回应
;;;3280               break;
;;;3281   
;;;3282           case STEP_CALIBRATION_CAN_TEST_NOTIFY_POWER_BOARD: // 通知电源板调整仪表供电电压
;;;3283               STATE_SwitchStep(STEP_CALIBRATION_CAN_TEST_WAIT_RESPONSE);
;;;3284               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SUPPLY_VOLTAGE, calibration.data[0]);            // 通知电源板调整DUT供电电压
000004  4c42              LDR      r4,|L8.272|
000006  8840              LDRH     r0,[r0,#2]            ;3269  ; stateCB
000008  28bd              CMP      r0,#0xbd              ;3269
00000a  d037              BEQ      |L8.124|
00000c  dc1a              BGT      |L8.68|
00000e  28b8              CMP      r0,#0xb8              ;3269
000010  d033              BEQ      |L8.122|
000012  dc07              BGT      |L8.36|
000014  2800              CMP      r0,#0                 ;3269
000016  d030              BEQ      |L8.122|
000018  28b7              CMP      r0,#0xb7              ;3269
00001a  d12e              BNE      |L8.122|
00001c  e8bd401c          POP      {r2-r4,lr}            ;3275
000020  f7ffbffe          B.W      STATE_SwitchStep
                  |L8.36|
000024  28ba              CMP      r0,#0xba              ;3269
000026  d017              BEQ      |L8.88|
000028  28bc              CMP      r0,#0xbc              ;3269
00002a  d126              BNE      |L8.122|
;;;3285   
;;;3286               // 添加超时
;;;3287               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;3288                             3000,
;;;3289                             STATE_SwitchStep,
;;;3290                             STEP_CALIBRATION_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;3291                             1,
;;;3292                             ACTION_MODE_ADD_TO_QUEUE);
;;;3293   
;;;3294               break;
;;;3295   
;;;3296           // 一级校准
;;;3297           case STEP_CALIBRATION_CAN_TEST_NOTIFY_VOLTAGE_CALIBRATION: // 调整完成通知仪表进行电压校准
;;;3298               STATE_SwitchStep(STEP_CALIBRATION_CAN_TEST_WAIT_RESPONSE);
00002c  20b8              MOVS     r0,#0xb8
00002e  f7fffffe          BL       STATE_SwitchStep
;;;3299               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
000032  2008              MOVS     r0,#8
000034  f7fffffe          BL       TIMER_ResetTimer
;;;3300               DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_VOLTAGE_CALIBRATION, calibration.data[0]);
000038  7861              LDRB     r1,[r4,#1]  ; calibration
00003a  e8bd401c          POP      {r2-r4,lr}
00003e  2091              MOVS     r0,#0x91
000040  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L8.68|
000044  38be              SUBS     r0,r0,#0xbe           ;3269
000046  2809              CMP      r0,#9                 ;3269
000048  d217              BCS      |L8.122|
00004a  e8dff000          TBB      [pc,r0]               ;3269
00004e  232f              DCB      0x23,0x2f
000050  3b161616          DCB      0x3b,0x16,0x16,0x16
000054  16475300          DCB      0x16,0x47,0x53,0x00
                  |L8.88|
000058  20b8              MOVS     r0,#0xb8              ;3283
00005a  f7fffffe          BL       STATE_SwitchStep
00005e  7861              LDRB     r1,[r4,#1]            ;3284  ; calibration
000060  2004              MOVS     r0,#4                 ;3284
000062  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
000066  2001              MOVS     r0,#1                 ;3287
000068  9000              STR      r0,[sp,#0]            ;3287
00006a  9001              STR      r0,[sp,#4]            ;3287
00006c  23c6              MOVS     r3,#0xc6              ;3287
00006e  4a29              LDR      r2,|L8.276|
000070  f64031b8          MOV      r1,#0xbb8             ;3287
000074  2008              MOVS     r0,#8                 ;3287
000076  f7fffffe          BL       TIMER_AddTask
                  |L8.122|
;;;3301               break;
;;;3302   
;;;3303           case STEP_CALIBRATION_CAN_TEST_TWO_NOTIFY_POWER_BOARD: // 通知电源板调整仪表供电电压
;;;3304               STATE_SwitchStep(STEP_CALIBRATION_CAN_TEST_WAIT_RESPONSE);
;;;3305               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;3306               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SUPPLY_VOLTAGE, calibration.data[1]);            // 通知电源板调整DUT供电电压
;;;3307   
;;;3308               break;
;;;3309   
;;;3310           // 二级校准
;;;3311           case STEP_CALIBRATION_CAN_TEST_TWO_NOTIFY_VOLTAGE_CALIBRATION: // 调整完成通知仪表进行电压校准
;;;3312               STATE_SwitchStep(STEP_CALIBRATION_CAN_TEST_WAIT_RESPONSE);
;;;3313               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;3314               DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_VOLTAGE_CALIBRATION, calibration.data[1]);
;;;3315               break;
;;;3316   
;;;3317           case STEP_CALIBRATION_CAN_TEST_THREE_NOTIFY_POWER_BOARD: // 通知电源板调整仪表供电电压
;;;3318               STATE_SwitchStep(STEP_CALIBRATION_CAN_TEST_WAIT_RESPONSE);
;;;3319               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;3320               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SUPPLY_VOLTAGE, calibration.data[2]);            // 通知电源板调整DUT供电电压
;;;3321   
;;;3322               break;
;;;3323   
;;;3324           // 三级校准
;;;3325           case STEP_CALIBRATION_CAN_TEST_THREE_NOTIFY_VOLTAGE_CALIBRATION: // 调整完成通知仪表进行电压校准
;;;3326               STATE_SwitchStep(STEP_CALIBRATION_CAN_TEST_WAIT_RESPONSE);
;;;3327               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;3328               DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_VOLTAGE_CALIBRATION, calibration.data[2]);
;;;3329               break;
;;;3330   
;;;3331           // 校准完成
;;;3332           case STEP_CALIBRATION_CAN_TEST_COMPLETE: // 测试完成，然后上报结果
;;;3333               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_VOLTAGE_CALIBRATION, TRUE);
;;;3334               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;3335               STATE_EnterState(STATE_STANDBY);
;;;3336               break;
;;;3337   
;;;3338           // 通信超时
;;;3339           case STEP_CALIBRATION_CAN_TEST_COMMUNICATION_TIME_OUT:
;;;3340               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_VOLTAGE_CALIBRATION, FALSE);
;;;3341               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;3342               STATE_EnterState(STATE_STANDBY);
;;;3343               break;
;;;3344   
;;;3345           default:
;;;3346               break;
;;;3347       }
;;;3348   }
00007a  bd1c              POP      {r2-r4,pc}
                  |L8.124|
00007c  20b8              MOVS     r0,#0xb8              ;3304
00007e  f7fffffe          BL       STATE_SwitchStep
000082  2008              MOVS     r0,#8                 ;3305
000084  f7fffffe          BL       TIMER_ResetTimer
000088  78a1              LDRB     r1,[r4,#2]            ;3306  ; calibration
00008a  e8bd401c          POP      {r2-r4,lr}            ;3306
00008e  2004              MOVS     r0,#4                 ;3306
000090  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
000094  20b8              MOVS     r0,#0xb8              ;3312
000096  f7fffffe          BL       STATE_SwitchStep
00009a  2008              MOVS     r0,#8                 ;3313
00009c  f7fffffe          BL       TIMER_ResetTimer
0000a0  78a1              LDRB     r1,[r4,#2]            ;3314  ; calibration
0000a2  e8bd401c          POP      {r2-r4,lr}            ;3314
0000a6  2091              MOVS     r0,#0x91              ;3314
0000a8  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
0000ac  20b8              MOVS     r0,#0xb8              ;3318
0000ae  f7fffffe          BL       STATE_SwitchStep
0000b2  2008              MOVS     r0,#8                 ;3319
0000b4  f7fffffe          BL       TIMER_ResetTimer
0000b8  78e1              LDRB     r1,[r4,#3]            ;3320  ; calibration
0000ba  e8bd401c          POP      {r2-r4,lr}            ;3320
0000be  2004              MOVS     r0,#4                 ;3320
0000c0  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
0000c4  20b8              MOVS     r0,#0xb8              ;3326
0000c6  f7fffffe          BL       STATE_SwitchStep
0000ca  2008              MOVS     r0,#8                 ;3327
0000cc  f7fffffe          BL       TIMER_ResetTimer
0000d0  78e1              LDRB     r1,[r4,#3]            ;3328  ; calibration
0000d2  e8bd401c          POP      {r2-r4,lr}            ;3328
0000d6  2091              MOVS     r0,#0x91              ;3328
0000d8  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
0000dc  2101              MOVS     r1,#1                 ;3333
0000de  2015              MOVS     r0,#0x15              ;3333
0000e0  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0000e4  2008              MOVS     r0,#8                 ;3334
0000e6  f7fffffe          BL       TIMER_KillTask
0000ea  e8bd401c          POP      {r2-r4,lr}            ;3335
0000ee  2001              MOVS     r0,#1                 ;3335
0000f0  f7ffbffe          B.W      STATE_EnterState
0000f4  2100              MOVS     r1,#0                 ;3340
0000f6  2015              MOVS     r0,#0x15              ;3340
0000f8  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0000fc  2008              MOVS     r0,#8                 ;3341
0000fe  f7fffffe          BL       TIMER_KillTask
000102  e8bd401c          POP      {r2-r4,lr}            ;3342
000106  2001              MOVS     r0,#1                 ;3342
000108  f7ffbffe          B.W      STATE_EnterState
;;;3349   /****************************************升级********************************************/
                          ENDP

                  |L8.268|
                          DCD      ||.data||+0x6
                  |L8.272|
                          DCD      calibration
                  |L8.276|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_CalibrationUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_CalibrationUartTest PROC
;;;1782   // 电压校准
;;;1783   void STEP_Process_CalibrationUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;1784   {
;;;1785       switch (stateCB.step)
000002  4874              LDR      r0,|L9.468|
000004  2500              MOVS     r5,#0
;;;1786       {
;;;1787           case STEP_NULL: // 空步骤
;;;1788               break;
;;;1789   
;;;1790           case STEP_CALIBRATION_UART_TEST_ENTRY: // 入口步骤
;;;1791               STATE_SwitchStep(STEP_CALIBRATION_UART_TEST_NOTIFY_POWER_BOARD);
;;;1792               cali_cnt = 0;
000006  4e74              LDR      r6,|L9.472|
000008  8840              LDRH     r0,[r0,#2]            ;1785  ; stateCB
;;;1793               Clear_All_Lines();
;;;1794               Display_Centered(0, "CALIBRATION");
;;;1795               Display_Centered(1, "Testing");
;;;1796               break;
;;;1797   
;;;1798           case STEP_CALIBRATION_UART_TEST_WAIT_RESPONSE: // 等待仪表/电源板回应
;;;1799               break;
;;;1800   
;;;1801           case STEP_CALIBRATION_UART_TEST_NOTIFY_POWER_BOARD: // 通知电源板调整仪表供电电压
;;;1802               STATE_SwitchStep(STEP_CALIBRATION_UART_TEST_WAIT_RESPONSE);
;;;1803               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SUPPLY_VOLTAGE, calibration.data[0]);            // 通知电源板调整DUT供电电压
00000a  4c74              LDR      r4,|L9.476|
00000c  2863              CMP      r0,#0x63              ;1785
00000e  d065              BEQ      |L9.220|
000010  dc26              BGT      |L9.96|
000012  285f              CMP      r0,#0x5f              ;1785
000014  d02c              BEQ      |L9.112|
000016  dc13              BGT      |L9.64|
000018  2800              CMP      r0,#0                 ;1785
00001a  d048              BEQ      |L9.174|
00001c  285c              CMP      r0,#0x5c              ;1785
00001e  d146              BNE      |L9.174|
000020  205f              MOVS     r0,#0x5f              ;1791
000022  f7fffffe          BL       STATE_SwitchStep
000026  7035              STRB     r5,[r6,#0]            ;1792
000028  f7fffffe          BL       Clear_All_Lines
00002c  a16c              ADR      r1,|L9.480|
00002e  2000              MOVS     r0,#0                 ;1794
000030  f7fffffe          BL       Display_Centered
000034  e8bd407c          POP      {r2-r6,lr}            ;1795
000038  a16c              ADR      r1,|L9.492|
00003a  2001              MOVS     r0,#1                 ;1795
00003c  f7ffbffe          B.W      Display_Centered
                  |L9.64|
000040  2861              CMP      r0,#0x61              ;1785
000042  d035              BEQ      |L9.176|
000044  2862              CMP      r0,#0x62              ;1785
000046  d132              BNE      |L9.174|
;;;1804               Clear_All_Lines();
;;;1805               Display_Centered(0, "CALIBRATION");
;;;1806               Display_Centered(0, "Voltage");
;;;1807               Display_Centered(1, "Adjusting");
;;;1808   
;;;1809               // 添加超时
;;;1810               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;1811                             5000,
;;;1812                             STATE_SwitchStep,
;;;1813                             STEP_CALIBRATION_UART_TEST_COMMUNICATION_TIME_OUT,
;;;1814                             1,
;;;1815                             ACTION_MODE_ADD_TO_QUEUE);
;;;1816               break;
;;;1817   
;;;1818           // 一级校准
;;;1819           case STEP_CALIBRATION_UART_TEST_NOTIFY_VOLTAGE_CALIBRATION: // 调整完成通知仪表进行电压校准
;;;1820               STATE_SwitchStep(STEP_CALIBRATION_UART_TEST_WAIT_RESPONSE);
;;;1821               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1822               Clear_All_Lines();
;;;1823               Display_Centered(0, "CALIBRATION");
;;;1824               Display_Centered(1, "Once");
;;;1825               DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_VOLTAGE_CALIBRATION, calibration.data[0]);
;;;1826               break;
;;;1827   
;;;1828           case STEP_CALIBRATION_UART_TEST_TWO_NOTIFY_POWER_BOARD: // 通知电源板调整仪表供电电压
;;;1829               STATE_SwitchStep(STEP_CALIBRATION_UART_TEST_WAIT_RESPONSE);
000048  205d              MOVS     r0,#0x5d
00004a  f7fffffe          BL       STATE_SwitchStep
;;;1830               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
00004e  2008              MOVS     r0,#8
000050  f7fffffe          BL       TIMER_ResetTimer
;;;1831               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SUPPLY_VOLTAGE, calibration.data[1]);            // 通知电源板调整DUT供电电压
000054  78a1              LDRB     r1,[r4,#2]  ; calibration
000056  e8bd407c          POP      {r2-r6,lr}
00005a  2004              MOVS     r0,#4
00005c  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
                  |L9.96|
000060  3864              SUBS     r0,r0,#0x64           ;1785
000062  2805              CMP      r0,#5                 ;1785
000064  d223              BCS      |L9.174|
000066  e8dff000          TBB      [pc,r0]               ;1785
00006a  4f5b              DCB      0x4f,0x5b
00006c  71879e00          DCB      0x71,0x87,0x9e,0x00
                  |L9.112|
000070  205d              MOVS     r0,#0x5d              ;1802
000072  f7fffffe          BL       STATE_SwitchStep
000076  7861              LDRB     r1,[r4,#1]            ;1803  ; calibration
000078  2004              MOVS     r0,#4                 ;1803
00007a  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
00007e  f7fffffe          BL       Clear_All_Lines
000082  a157              ADR      r1,|L9.480|
000084  2000              MOVS     r0,#0                 ;1805
000086  f7fffffe          BL       Display_Centered
00008a  a15a              ADR      r1,|L9.500|
00008c  2000              MOVS     r0,#0                 ;1806
00008e  f7fffffe          BL       Display_Centered
000092  a15a              ADR      r1,|L9.508|
000094  2001              MOVS     r0,#1                 ;1807
000096  f7fffffe          BL       Display_Centered
00009a  2001              MOVS     r0,#1                 ;1810
00009c  9000              STR      r0,[sp,#0]            ;1810
00009e  9001              STR      r0,[sp,#4]            ;1810
0000a0  2368              MOVS     r3,#0x68              ;1810
0000a2  4a59              LDR      r2,|L9.520|
0000a4  f2413188          MOV      r1,#0x1388            ;1810
0000a8  2008              MOVS     r0,#8                 ;1810
0000aa  f7fffffe          BL       TIMER_AddTask
                  |L9.174|
;;;1832               break;
;;;1833   
;;;1834           // 二级校准
;;;1835           case STEP_CALIBRATION_UART_TEST_TWO_NOTIFY_VOLTAGE_CALIBRATION: // 调整完成通知仪表进行电压校准
;;;1836               STATE_SwitchStep(STEP_CALIBRATION_UART_TEST_WAIT_RESPONSE);
;;;1837               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1838               Clear_All_Lines();
;;;1839               Display_Centered(0, "CALIBRATION");
;;;1840               Display_Centered(1, "Seconnd");
;;;1841               DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_VOLTAGE_CALIBRATION, calibration.data[1]);
;;;1842               break;
;;;1843   
;;;1844           case STEP_CALIBRATION_UART_TEST_THREE_NOTIFY_POWER_BOARD: // 通知电源板调整仪表供电电压
;;;1845               STATE_SwitchStep(STEP_CALIBRATION_UART_TEST_WAIT_RESPONSE);
;;;1846               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1847               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SUPPLY_VOLTAGE, calibration.data[2]);            // 通知电源板调整DUT供电电压
;;;1848               break;
;;;1849   
;;;1850           // 三级校准
;;;1851           case STEP_CALIBRATION_UART_TEST_THREE_NOTIFY_VOLTAGE_CALIBRATION: // 调整完成通知仪表进行电压校准
;;;1852               STATE_SwitchStep(STEP_CALIBRATION_UART_TEST_WAIT_RESPONSE);
;;;1853               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1854               Clear_All_Lines();
;;;1855               Display_Centered(0, "CALIBRATION");
;;;1856               Display_Centered(1, "Third");
;;;1857               DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_VOLTAGE_CALIBRATION, calibration.data[2]);
;;;1858               break;
;;;1859   
;;;1860           // 还原仪表供电电压为24V
;;;1861           case STEP_CALIBRATION_UART_TEST_RESTORE_VOLTAGE_CALIBRATION:
;;;1862               STATE_SwitchStep(STEP_CALIBRATION_UART_TEST_WAIT_RESPONSE);
;;;1863               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1864               Clear_All_Lines();
;;;1865               Display_Centered(0, "CALIBRATION");
;;;1866               Display_Centered(1, "Restore Voltage");
;;;1867               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SUPPLY_VOLTAGE, 0x18);
;;;1868               break;
;;;1869   
;;;1870           // 校准完成
;;;1871           case STEP_CALIBRATION_UART_TEST_COMPLETE: // 测试完成，然后上报结果
;;;1872               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_VOLTAGE_CALIBRATION, TRUE);
;;;1873               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1874               cali_cnt = 0;
;;;1875               Clear_All_Lines();
;;;1876               Display_Centered(0, "CALIBRATION");
;;;1877               Display_Centered(1, "Test Pass");
;;;1878               STATE_EnterState(STATE_STANDBY);
;;;1879               break;
;;;1880   
;;;1881           // 通信超时
;;;1882           case STEP_CALIBRATION_UART_TEST_COMMUNICATION_TIME_OUT:
;;;1883               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_VOLTAGE_CALIBRATION, FALSE);
;;;1884               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1885               cali_cnt = 0;
;;;1886               Clear_All_Lines();
;;;1887               Display_Centered(0, "CALIBRATION");
;;;1888               Display_Centered(1, "Test Timeout");
;;;1889               STATE_EnterState(STATE_STANDBY);
;;;1890               break;
;;;1891   
;;;1892           default:
;;;1893               break;
;;;1894       }
;;;1895   }
0000ae  bd7c              POP      {r2-r6,pc}
                  |L9.176|
0000b0  205d              MOVS     r0,#0x5d              ;1820
0000b2  f7fffffe          BL       STATE_SwitchStep
0000b6  2008              MOVS     r0,#8                 ;1821
0000b8  f7fffffe          BL       TIMER_ResetTimer
0000bc  f7fffffe          BL       Clear_All_Lines
0000c0  a147              ADR      r1,|L9.480|
0000c2  2000              MOVS     r0,#0                 ;1823
0000c4  f7fffffe          BL       Display_Centered
0000c8  a150              ADR      r1,|L9.524|
0000ca  2001              MOVS     r0,#1                 ;1824
0000cc  f7fffffe          BL       Display_Centered
0000d0  7861              LDRB     r1,[r4,#1]            ;1825  ; calibration
0000d2  e8bd407c          POP      {r2-r6,lr}            ;1825
0000d6  2091              MOVS     r0,#0x91              ;1825
0000d8  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L9.220|
0000dc  205d              MOVS     r0,#0x5d              ;1836
0000de  f7fffffe          BL       STATE_SwitchStep
0000e2  2008              MOVS     r0,#8                 ;1837
0000e4  f7fffffe          BL       TIMER_ResetTimer
0000e8  f7fffffe          BL       Clear_All_Lines
0000ec  a13c              ADR      r1,|L9.480|
0000ee  2000              MOVS     r0,#0                 ;1839
0000f0  f7fffffe          BL       Display_Centered
0000f4  a147              ADR      r1,|L9.532|
0000f6  2001              MOVS     r0,#1                 ;1840
0000f8  f7fffffe          BL       Display_Centered
0000fc  78a1              LDRB     r1,[r4,#2]            ;1841  ; calibration
0000fe  e8bd407c          POP      {r2-r6,lr}            ;1841
000102  2091              MOVS     r0,#0x91              ;1841
000104  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
000108  205d              MOVS     r0,#0x5d              ;1845
00010a  f7fffffe          BL       STATE_SwitchStep
00010e  2008              MOVS     r0,#8                 ;1846
000110  f7fffffe          BL       TIMER_ResetTimer
000114  78e1              LDRB     r1,[r4,#3]            ;1847  ; calibration
000116  e8bd407c          POP      {r2-r6,lr}            ;1847
00011a  2004              MOVS     r0,#4                 ;1847
00011c  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
000120  205d              MOVS     r0,#0x5d              ;1852
000122  f7fffffe          BL       STATE_SwitchStep
000126  2008              MOVS     r0,#8                 ;1853
000128  f7fffffe          BL       TIMER_ResetTimer
00012c  f7fffffe          BL       Clear_All_Lines
000130  a12b              ADR      r1,|L9.480|
000132  2000              MOVS     r0,#0                 ;1855
000134  f7fffffe          BL       Display_Centered
000138  a138              ADR      r1,|L9.540|
00013a  2001              MOVS     r0,#1                 ;1856
00013c  f7fffffe          BL       Display_Centered
000140  78e1              LDRB     r1,[r4,#3]            ;1857  ; calibration
000142  e8bd407c          POP      {r2-r6,lr}            ;1857
000146  2091              MOVS     r0,#0x91              ;1857
000148  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
00014c  205d              MOVS     r0,#0x5d              ;1862
00014e  f7fffffe          BL       STATE_SwitchStep
000152  2008              MOVS     r0,#8                 ;1863
000154  f7fffffe          BL       TIMER_ResetTimer
000158  f7fffffe          BL       Clear_All_Lines
00015c  a120              ADR      r1,|L9.480|
00015e  2000              MOVS     r0,#0                 ;1865
000160  f7fffffe          BL       Display_Centered
000164  a12f              ADR      r1,|L9.548|
000166  2001              MOVS     r0,#1                 ;1866
000168  f7fffffe          BL       Display_Centered
00016c  e8bd407c          POP      {r2-r6,lr}            ;1867
000170  2118              MOVS     r1,#0x18              ;1867
000172  2004              MOVS     r0,#4                 ;1867
000174  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
000178  2101              MOVS     r1,#1                 ;1872
00017a  2015              MOVS     r0,#0x15              ;1872
00017c  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000180  2008              MOVS     r0,#8                 ;1873
000182  f7fffffe          BL       TIMER_KillTask
000186  7035              STRB     r5,[r6,#0]            ;1874
000188  f7fffffe          BL       Clear_All_Lines
00018c  a114              ADR      r1,|L9.480|
00018e  2000              MOVS     r0,#0                 ;1876
000190  f7fffffe          BL       Display_Centered
000194  a127              ADR      r1,|L9.564|
000196  2001              MOVS     r0,#1                 ;1877
000198  f7fffffe          BL       Display_Centered
00019c  e8bd407c          POP      {r2-r6,lr}            ;1878
0001a0  2001              MOVS     r0,#1                 ;1878
0001a2  f7ffbffe          B.W      STATE_EnterState
0001a6  2100              MOVS     r1,#0                 ;1883
0001a8  2015              MOVS     r0,#0x15              ;1883
0001aa  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001ae  2008              MOVS     r0,#8                 ;1884
0001b0  f7fffffe          BL       TIMER_KillTask
0001b4  7035              STRB     r5,[r6,#0]            ;1885
0001b6  f7fffffe          BL       Clear_All_Lines
0001ba  a109              ADR      r1,|L9.480|
0001bc  2000              MOVS     r0,#0                 ;1887
0001be  f7fffffe          BL       Display_Centered
0001c2  a11f              ADR      r1,|L9.576|
0001c4  2001              MOVS     r0,#1                 ;1888
0001c6  f7fffffe          BL       Display_Centered
0001ca  e8bd407c          POP      {r2-r6,lr}            ;1889
0001ce  2001              MOVS     r0,#1                 ;1889
0001d0  f7ffbffe          B.W      STATE_EnterState
;;;1896   
                          ENDP

                  |L9.468|
                          DCD      ||.data||+0x6
                  |L9.472|
                          DCD      cali_cnt
                  |L9.476|
                          DCD      calibration
                  |L9.480|
0001e0  43414c49          DCB      "CALIBRATION",0
0001e4  42524154
0001e8  494f4e00
                  |L9.492|
0001ec  54657374          DCB      "Testing",0
0001f0  696e6700
                  |L9.500|
0001f4  566f6c74          DCB      "Voltage",0
0001f8  61676500
                  |L9.508|
0001fc  41646a75          DCB      "Adjusting",0
000200  7374696e
000204  6700    
000206  00                DCB      0
000207  00                DCB      0
                  |L9.520|
                          DCD      STATE_SwitchStep
                  |L9.524|
00020c  4f6e6365          DCB      "Once",0
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L9.532|
000214  5365636f          DCB      "Seconnd",0
000218  6e6e6400
                  |L9.540|
00021c  54686972          DCB      "Third",0
000220  6400    
000222  00                DCB      0
000223  00                DCB      0
                  |L9.548|
000224  52657374          DCB      "Restore Voltage",0
000228  6f726520
00022c  566f6c74
000230  61676500
                  |L9.564|
000234  54657374          DCB      "Test Pass",0
000238  20506173
00023c  7300    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L9.576|
000240  54657374          DCB      "Test Timeout",0
000244  2054696d
000248  656f7574
00024c  00      
00024d  00                DCB      0
00024e  00                DCB      0
00024f  00                DCB      0

                          AREA ||i.STEP_Process_CmCanUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_CmCanUpgrade PROC
;;;3747   // 通用CAN升级,APP类型为hex
;;;3748   void STEP_Process_CmCanUpgrade(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;3749   {
000004  b091              SUB      sp,sp,#0x44
;;;3750       uint8 configs[60] = {0};
000006  213c              MOVS     r1,#0x3c
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       __aeabi_memclr4
;;;3751       uint8 i;
;;;3752   
;;;3753       switch (stateCB.step)
00000e  48fe              LDR      r0,|L10.1032|
;;;3754       {
;;;3755           // 空步骤
;;;3756           case STEP_NULL:
;;;3757               break;
;;;3758   
;;;3759           // 通用can升级入口，dut上电和can初始化
;;;3760           case STEP_CM_CAN_UPGRADE_ENTRY:
;;;3761               TIMER_KillTask(TIMER_ID_ONLINE_DETECT);
;;;3762               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3763               dut_info.can = CAN_FF_STANDARD;
;;;3764               IAP_CTRL_CAN_Init(CAN_BAUD_RATE_125K);
;;;3765               resetFlag = TRUE;
000010  f8df93f4          LDR      r9,|L10.1032|
000014  2600              MOVS     r6,#0                 ;3753
000016  8840              LDRH     r0,[r0,#2]            ;3753  ; stateCB
000018  2401              MOVS     r4,#1
;;;3766               switch_cnt = 0;
00001a  f8dfa3f0          LDR      r10,|L10.1036|
;;;3767   
;;;3768               // vlk供电
;;;3769               VLK_PW_EN_OFF();
00001e  4ffc              LDR      r7,|L10.1040|
000020  4dfc              LDR      r5,|L10.1044|
000022  f1a90906          SUB      r9,r9,#6              ;3765
;;;3770   
;;;3771               // 关闭仪表供电电源
;;;3772               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, FALSE);
;;;3773               dut_info.reconnectionRepeatOne = FALSE;
;;;3774               break;
;;;3775   
;;;3776           // 等待电源板/dut应答
;;;3777           case STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK:
;;;3778               break;
;;;3779   
;;;3780           // 仪表重启
;;;3781           case STEP_CM_CAN_UPGRADE_RESTART:
;;;3782               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3783   
;;;3784               // vlk供电
;;;3785               VLK_PW_EN_ON();
;;;3786   
;;;3787               // 打开仪表供电电源
;;;3788               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, TRUE);
;;;3789               break;
;;;3790   
;;;3791           // 收到dut的eco请求,延时100ms后发送eco允许
;;;3792           case STEP_CM_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST:
;;;3793               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3794               TIMER_AddTask(TIMER_ID_DELAY_ENTER_UP_MODE,
;;;3795                             50,
;;;3796                             STATE_SwitchStep,
;;;3797                             STEP_CM_CAN_UPGRADE_UP_ALLOW,
;;;3798                             1,
;;;3799                             ACTION_MODE_ADD_TO_QUEUE);
;;;3800               break;
;;;3801   
;;;3802           // 发送eco允许
;;;3803           case STEP_CM_CAN_UPGRADE_UP_ALLOW:
;;;3804               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3805               IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK); // 0x02,工程模式允许
;;;3806               break;
;;;3807   
;;;3808           // 发送app擦除指令
;;;3809           case STEP_CM_CAN_UPGRADE_SEND_APP_EAR:
;;;3810               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3811               addTimeOutTimer(5000);                                            // 擦除app超时时间：5s
;;;3812               IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_IAP_ERASE_FLASH); // 0x24,擦除app
;;;3813               break;
;;;3814   
;;;3815           // app擦除结果处理
;;;3816           case STEP_CM_CAN_UPGRADE_APP_EAR_RESUALT:
;;;3817               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3818   
;;;3819               // 发送第一帧数据
;;;3820               dut_info.currentAppSize = 0;
;;;3821               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;3822               IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_HEX, IAP_CTRL_CAN_CMD_DOWN_IAP_WRITE_FLASH, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 116);
;;;3823               dut_info.currentAppSize++;
;;;3824   
;;;3825               // 添加断电重发定时器
;;;3826               TIMER_AddTask(TIMER_ID_RECONNECTION,
000026  f04f38ff          MOV      r8,#0xffffffff
00002a  f44f7bfa          MOV      r11,#0x1f4
00002e  28e4              CMP      r0,#0xe4              ;3753
000030  d07e              BEQ      |L10.304|
000032  dc5e              BGT      |L10.242|
000034  28db              CMP      r0,#0xdb              ;3753
000036  d07c              BEQ      |L10.306|
000038  dc37              BGT      |L10.170|
00003a  28d8              CMP      r0,#0xd8              ;3753
00003c  d022              BEQ      |L10.132|
00003e  dc24              BGT      |L10.138|
000040  2800              CMP      r0,#0                 ;3753
000042  d01f              BEQ      |L10.132|
000044  28d7              CMP      r0,#0xd7              ;3753
000046  d11d              BNE      |L10.132|
000048  2011              MOVS     r0,#0x11              ;3761
00004a  f7fffffe          BL       TIMER_KillTask
00004e  20d8              MOVS     r0,#0xd8              ;3762
000050  f7fffffe          BL       STATE_SwitchStep
000054  766e              STRB     r6,[r5,#0x19]         ;3763
000056  207d              MOVS     r0,#0x7d              ;3764
000058  f7fffffe          BL       IAP_CTRL_CAN_Init
00005c  f8894000          STRB     r4,[r9,#0]            ;3765
000060  f88a6000          STRB     r6,[r10,#0]           ;3766
000064  2380              MOVS     r3,#0x80              ;3769
000066  2203              MOVS     r2,#3                 ;3769
000068  2110              MOVS     r1,#0x10              ;3769
00006a  4638              MOV      r0,r7                 ;3769
00006c  f7fffffe          BL       gpio_init
000070  2180              MOVS     r1,#0x80              ;3769
000072  4638              MOV      r0,r7                 ;3769
000074  f7fffffe          BL       gpio_bit_reset
000078  2100              MOVS     r1,#0                 ;3772
00007a  2005              MOVS     r0,#5                 ;3772
00007c  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
000080  f8856072          STRB     r6,[r5,#0x72]         ;3773
                  |L10.132|
;;;3827                             500,
;;;3828                             STATE_SwitchStep,
;;;3829                             STEP_CM_CAN_UPGRADE_RECONNECTION,
;;;3830                             TIMER_LOOP_FOREVER,
;;;3831                             ACTION_MODE_ADD_TO_QUEUE);
;;;3832               break;
;;;3833   
;;;3834           // 发送app升级包
;;;3835           case STEP_CM_CAN_UPGRADE_SEND_APP_WRITE:
;;;3836               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3837   
;;;3838               if (dut_info.reconnectionRepeatOne)
;;;3839               {
;;;3840                   dut_info.reconnectionRepeatOne = FALSE;
;;;3841                   dut_info.currentAppSize--;
;;;3842                   TIMER_AddTask(TIMER_ID_RECONNECTION,
;;;3843                                 500,
;;;3844                                 STATE_SwitchStep,
;;;3845                                 STEP_CM_CAN_UPGRADE_RECONNECTION,
;;;3846                                 TIMER_LOOP_FOREVER,
;;;3847                                 ACTION_MODE_ADD_TO_QUEUE);
;;;3848                   TIMER_KillTask(TIMER_ID_RECONNECTION_TIME_OUT);
;;;3849               }
;;;3850   
;;;3851               // 喂狗
;;;3852               TIMER_ResetTimer(TIMER_ID_RECONNECTION);
;;;3853               IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_HEX, IAP_CTRL_CAN_CMD_DOWN_IAP_WRITE_FLASH, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 116);
;;;3854               dut_info.currentAppSize++;
;;;3855               break;
;;;3856   
;;;3857           // app升级成功
;;;3858           case STEP_CM_CAN_UPGRADE_APP_UP_SUCCESS:
;;;3859               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3860               IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_UPDATA_FINISH); // 0x2A:升级成功
;;;3861               dut_info.appUpFlag = FALSE;
;;;3862               dut_info.appUpSuccesss = TRUE;
;;;3863               dut_info.reconnectionFlag = FALSE;
;;;3864               dut_info.dutPowerOnAllow = FALSE;
;;;3865               TIMER_KillTask(TIMER_ID_RECONNECTION);
;;;3866               break;
;;;3867   
;;;3868           // app升级成功重启
;;;3869           case STEP_CM_CAN_UPGRADE_APP_UP_SUCCESS_RESET:
;;;3870               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3871   
;;;3872               // 关闭仪表供电电源
;;;3873               switch_cnt = 0;
;;;3874               appResetFlag = TRUE;
;;;3875   
;;;3876               // vlk供电
;;;3877               VLK_PW_EN_OFF();
;;;3878               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, FALSE);
;;;3879               break;
;;;3880   
;;;3881           // 升级成功彩屏显示黄色
;;;3882           case STEP_CM_CAN_UPGRADE_APP_UP_SUCCESS_YELLOW:
;;;3883               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3884               dut_info.can = CAN_EXTENDED;
;;;3885               IAP_CTRL_CAN_Init(CAN_BAUD_RATE_500K);
;;;3886               CAN_PROTOCOL1_Init(); // 通用配置初始化
;;;3887   
;;;3888               TIMER_AddTask(TIMER_ID_CHANGE_LCD_COLOR,
;;;3889                             500,
;;;3890                             CAN_PROTOCOL1_SendCmdChangeColor,
;;;3891                             0,
;;;3892                             -1,
;;;3893                             ACTION_MODE_ADD_TO_QUEUE);
;;;3894               break;
;;;3895   
;;;3896           // 设置config入口
;;;3897           case STEP_CAN_SET_CONFIG_ENTRY:
;;;3898               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3899               dut_info.dutPowerOnAllow = TRUE; // 允许开机
;;;3900               IAP_CTRL_CAN_Init(CAN_BAUD_RATE_500K);
;;;3901               CAN_PROTOCOL1_Init();  // 通用配置初始化
;;;3902               addTimeOutTimer(5000); // 设置config时间：5s
;;;3903               configResetFlag = TRUE;
;;;3904               switch_cnt = 0;
;;;3905   
;;;3906               // 关闭vlk供电
;;;3907               VLK_PW_EN_OFF();
;;;3908   
;;;3909               // 关闭仪表供电电源
;;;3910               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, FALSE);
;;;3911               break;
;;;3912   
;;;3913           // 仪表开机
;;;3914           case STEP_CAN_CONFIG_RESET:
;;;3915               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3916   
;;;3917               // vlk供电
;;;3918               VLK_PW_EN_ON();
;;;3919   
;;;3920               // 开启仪表供电电源
;;;3921               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, TRUE);
;;;3922               break;
;;;3923   
;;;3924           // 发送config内容
;;;3925           case STEP_CAN_SEND_SET_CONFIG:
;;;3926               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3927   
;;;3928               /*发送dut配置信息*/
;;;3929               // 大于旧协议固定数据数
;;;3930               if ((configs[0] - 84 > 54) || (configs[0] - 84 < 54))
;;;3931               {
;;;3932                   CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);                     // 添加命令头
;;;3933                   CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);              // 添加设备地址
;;;3934                   CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_NEW_WRITE_CONTROL_PARAM);  // 0x50 添加命令字
;;;3935                   CAN_PROTOCOL1_TxAddData(configs[0]);                                 // 添加数据长度
;;;3936                   for (i = 1; i < configs[0] + 1; i++)                                 // config只有54个字节
;;;3937                   {
;;;3938                       CAN_PROTOCOL1_TxAddData(configs[i]);
;;;3939                   }
;;;3940                   // 添加检验和与结束符，并添加至发送
;;;3941                   CAN_PROTOCOL1_TxAddFrame();
;;;3942               }
;;;3943   
;;;3944               // 参数内容为54个字节
;;;3945               if ((configs[0] - 84) == 54)
;;;3946               {
;;;3947                   // 新协议
;;;3948                   CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);                        // 添加命令头
;;;3949                   CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);                 // 添加设备地址
;;;3950                   CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_NEW_WRITE_CONTROL_PARAM);     // 0x50 添加命令字
;;;3951                   CAN_PROTOCOL1_TxAddData(configs[0]);                                    // 添加数据长度
;;;3952                   for (i = 1; i < configs[0] + 1; i++)                                    // config只有54个字节
;;;3953                   {
;;;3954                       CAN_PROTOCOL1_TxAddData(configs[i]);
;;;3955                   }
;;;3956                   // 添加检验和与结束符，并添加至发送
;;;3957                   CAN_PROTOCOL1_TxAddFrame();
;;;3958   
;;;3959                   // 旧协议
;;;3960                   CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);                 // 添加命令头
;;;3961                   CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);          // 添加设备地址
;;;3962                   CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_WRITE_CONTROL_PARAM);  // 0xc0 添加命令字
;;;3963                   CAN_PROTOCOL1_TxAddData(54);                                     // 添加数据长度
;;;3964                   for (i = 0; i < 54; i++)                                         // config只有54个字节
;;;3965                   {
;;;3966                       CAN_PROTOCOL1_TxAddData(resultArray[i]);
;;;3967                   }
;;;3968                   // 添加检验和与结束符，并添加至发送
;;;3969                   CAN_PROTOCOL1_TxAddFrame();
;;;3970               }
;;;3971               break;
;;;3972   
;;;3973           // 读取配置参数
;;;3974           case STEP_CAN_READ_CONFIG:
;;;3975               TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG);                             // 停止设置config定时器
;;;3976               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3977               CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);                     // 添加命令头
;;;3978               CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);              // 添加设备地址
;;;3979               CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_READ_CONTROL_PARAM);       // 0xc2添加命令字
;;;3980               CAN_PROTOCOL1_TxAddData(0);                                          // 添加数据长度
;;;3981   
;;;3982               // 添加检验和与结束符，并添加至发送
;;;3983               CAN_PROTOCOL1_TxAddFrame();
;;;3984               break;
;;;3985   
;;;3986           // config设置成功
;;;3987           case STEP_CAN_SET_CONFIG_SUCCESS:
;;;3988               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;3989               TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止设置config定时器
;;;3990               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);    // 停止超时定时器
;;;3991               IAP_CTRL_CAN_Init(CAN_BAUD_RATE_125K);   // 设置波特率
;;;3992               dut_info.configUpFlag = FALSE; // 标志位置false
;;;3993               dut_info.configUpSuccesss = TRUE;
;;;3994               dut_info.dutPowerOnAllow = FALSE;
;;;3995               break;
;;;3996   
;;;3997           // 升级项升级成功
;;;3998           case STEP_CM_CAN_UPGRADE_ITEM_FINISH:
;;;3999               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;4000   
;;;4001               // 选择升级
;;;4002               if (dut_info.configUpFlag)
;;;4003               {
;;;4004                   STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;4005               }
;;;4006               else
;;;4007               {
;;;4008                   // 没有升级项断电
;;;4009                   STATE_EnterState(STATE_STANDBY);
;;;4010               }
;;;4011               break;
;;;4012   
;;;4013           // 握手超时
;;;4014           case STEP_CM_CAN_UPGRADE_COMMUNICATION_TIME_OUT:
;;;4015               if (dut_info.appUpFlag)
;;;4016               {
;;;4017                   dut_info.appUpFaile = TRUE;
;;;4018               }
;;;4019               else if (dut_info.configUpFlag)
;;;4020               {
;;;4021                   dut_info.configUpFaile = TRUE; // config升级失败
;;;4022               }
;;;4023   
;;;4024               STATE_EnterState(STATE_STANDBY);
;;;4025               break;
;;;4026   
;;;4027           // dut断电重新连接
;;;4028           case STEP_CM_CAN_UPGRADE_RECONNECTION:
;;;4029               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;4030               dut_info.reconnectionRepeatOne = TRUE;
;;;4031               dut_info.reconnectionFlag = TRUE;
;;;4032   
;;;4033               // 每100ms发送一次eco允许
;;;4034               TIMER_AddTask(TIMER_ID_RECONNECTION,
;;;4035                             100,
;;;4036                             STATE_SwitchStep,
;;;4037                             STEP_CM_CAN_UPGRADE_UP_ALLOW,
;;;4038                             TIMER_LOOP_FOREVER,
;;;4039                             ACTION_MODE_ADD_TO_QUEUE);
;;;4040   
;;;4041               // 3s后停止发送eco允许，上报升级失败
;;;4042               TIMER_AddTask(TIMER_ID_RECONNECTION_TIME_OUT,
;;;4043                             3000,
;;;4044                             STATE_SwitchStep,
;;;4045                             STEP_CM_CAN_UPGRADE_RECONNECTION_TIME_OUT,
;;;4046                             1,
;;;4047                             ACTION_MODE_ADD_TO_QUEUE);
;;;4048               break;
;;;4049   
;;;4050           // 重新连接超时
;;;4051           case STEP_CM_CAN_UPGRADE_RECONNECTION_TIME_OUT:
;;;4052               STATE_SwitchStep(STEP_NULL);
;;;4053               TIMER_KillTask(TIMER_ID_RECONNECTION);
;;;4054               TIMER_KillTask(TIMER_ID_TIME_OUT_DETECTION);
;;;4055               dut_info.reconnectionFlag = FALSE;
;;;4056   
;;;4057               if (dut_info.appUpFlag)
;;;4058               {
;;;4059                   dut_info.appUpFaile = TRUE;
;;;4060               }
;;;4061   
;;;4062               STATE_EnterState(STATE_STANDBY);
;;;4063               break;
;;;4064   
;;;4065           default:
;;;4066               break;
;;;4067       }
;;;4068   }
000084  b011              ADD      sp,sp,#0x44
000086  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.138|
00008a  28d9              CMP      r0,#0xd9              ;3753
00008c  d061              BEQ      |L10.338|
00008e  28da              CMP      r0,#0xda              ;3753
000090  d1f8              BNE      |L10.132|
000092  20d8              MOVS     r0,#0xd8              ;3793
000094  f7fffffe          BL       STATE_SwitchStep
000098  9400              STR      r4,[sp,#0]            ;3794
00009a  23db              MOVS     r3,#0xdb              ;3794
00009c  4ade              LDR      r2,|L10.1048|
00009e  2132              MOVS     r1,#0x32              ;3794
0000a0  2007              MOVS     r0,#7                 ;3794
0000a2  9401              STR      r4,[sp,#4]            ;3794
0000a4  f7fffffe          BL       TIMER_AddTask
0000a8  e7ec              B        |L10.132|
                  |L10.170|
0000aa  28e0              CMP      r0,#0xe0              ;3753
0000ac  d075              BEQ      |L10.410|
0000ae  28e1              CMP      r0,#0xe1              ;3753
0000b0  d074              BEQ      |L10.412|
0000b2  28e2              CMP      r0,#0xe2              ;3753
0000b4  d066              BEQ      |L10.388|
0000b6  28e3              CMP      r0,#0xe3              ;3753
0000b8  d1e4              BNE      |L10.132|
0000ba  20d8              MOVS     r0,#0xd8              ;3817
0000bc  f7fffffe          BL       STATE_SwitchStep
0000c0  65ae              STR      r6,[r5,#0x58]         ;3820  ; dut_info
0000c2  2008              MOVS     r0,#8                 ;3821
0000c4  f7fffffe          BL       TIMER_KillTask
0000c8  6dab              LDR      r3,[r5,#0x58]         ;3822  ; dut_info
0000ca  2074              MOVS     r0,#0x74              ;3822
0000cc  4343              MULS     r3,r0,r3              ;3822
0000ce  f44f22c0          MOV      r2,#0x60000           ;3822
0000d2  2126              MOVS     r1,#0x26              ;3822
0000d4  2004              MOVS     r0,#4                 ;3822
0000d6  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
0000da  6da8              LDR      r0,[r5,#0x58]         ;3823  ; dut_info
0000dc  1c40              ADDS     r0,r0,#1              ;3823
0000de  65a8              STR      r0,[r5,#0x58]         ;3823  ; dut_info
0000e0  e9cd8400          STRD     r8,r4,[sp,#0]         ;3826
0000e4  23e8              MOVS     r3,#0xe8              ;3826
0000e6  4acc              LDR      r2,|L10.1048|
0000e8  4659              MOV      r1,r11                ;3826
0000ea  2009              MOVS     r0,#9                 ;3826
0000ec  f7fffffe          BL       TIMER_AddTask
0000f0  e7c8              B        |L10.132|
                  |L10.242|
0000f2  f240120d          MOV      r2,#0x10d             ;3753
0000f6  f2a0110d          SUB      r1,r0,#0x10d          ;3753
0000fa  4290              CMP      r0,r2                 ;3753
0000fc  d075              BEQ      |L10.490|
0000fe  dc08              BGT      |L10.274|
000100  f1a000e5          SUB      r0,r0,#0xe5           ;3753
000104  2805              CMP      r0,#5                 ;3753
000106  d2bd              BCS      |L10.132|
000108  e8dff000          TBB      [pc,r0]               ;3753
00010c  73f9f8f7          DCB      0x73,0xf9,0xf8,0xf7
000110  f600              DCB      0xf6,0x00
                  |L10.274|
000112  2901              CMP      r1,#1                 ;3753
000114  d06a              BEQ      |L10.492|
000116  2902              CMP      r1,#2                 ;3753
000118  d069              BEQ      |L10.494|
00011a  2903              CMP      r1,#3                 ;3753
00011c  d068              BEQ      |L10.496|
00011e  2904              CMP      r1,#4                 ;3753
000120  d1b0              BNE      |L10.132|
000122  2002              MOVS     r0,#2                 ;3975
000124  f7fffffe          BL       TIMER_KillTask
000128  20d8              MOVS     r0,#0xd8              ;3976
00012a  f7fffffe          BL       STATE_SwitchStep
00012e  e001              B        |L10.308|
                  |L10.304|
000130  e035              B        |L10.414|
                  |L10.306|
000132  e020              B        |L10.374|
                  |L10.308|
000134  203a              MOVS     r0,#0x3a              ;3977
000136  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
00013a  201a              MOVS     r0,#0x1a              ;3978
00013c  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000140  20c2              MOVS     r0,#0xc2              ;3979
000142  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000146  2000              MOVS     r0,#0                 ;3980
000148  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
00014c  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
000150  e798              B        |L10.132|
                  |L10.338|
000152  20d8              MOVS     r0,#0xd8              ;3782
000154  f7fffffe          BL       STATE_SwitchStep
000158  2380              MOVS     r3,#0x80              ;3785
00015a  2203              MOVS     r2,#3                 ;3785
00015c  2110              MOVS     r1,#0x10              ;3785
00015e  4638              MOV      r0,r7                 ;3785
000160  f7fffffe          BL       gpio_init
000164  2180              MOVS     r1,#0x80              ;3785
000166  4638              MOV      r0,r7                 ;3785
000168  f7fffffe          BL       gpio_bit_set
00016c  2101              MOVS     r1,#1                 ;3788
00016e  2005              MOVS     r0,#5                 ;3788
000170  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
000174  e786              B        |L10.132|
                  |L10.374|
000176  20d8              MOVS     r0,#0xd8              ;3804
000178  f7fffffe          BL       STATE_SwitchStep
00017c  2002              MOVS     r0,#2                 ;3805
00017e  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
000182  e77f              B        |L10.132|
                  |L10.388|
000184  20d8              MOVS     r0,#0xd8              ;3810
000186  f7fffffe          BL       STATE_SwitchStep
00018a  f2413088          MOV      r0,#0x1388            ;3811
00018e  f7fffffe          BL       addTimeOutTimer
000192  2024              MOVS     r0,#0x24              ;3812
000194  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
000198  e774              B        |L10.132|
                  |L10.410|
00019a  e03a              B        |L10.530|
                  |L10.412|
00019c  e04f              B        |L10.574|
                  |L10.414|
00019e  20d8              MOVS     r0,#0xd8              ;3836
0001a0  f7fffffe          BL       STATE_SwitchStep
0001a4  f8950072          LDRB     r0,[r5,#0x72]         ;3838  ; dut_info
0001a8  b178              CBZ      r0,|L10.458|
0001aa  f8856072          STRB     r6,[r5,#0x72]         ;3840
0001ae  6da8              LDR      r0,[r5,#0x58]         ;3841  ; dut_info
0001b0  1e40              SUBS     r0,r0,#1              ;3841
0001b2  65a8              STR      r0,[r5,#0x58]         ;3841  ; dut_info
0001b4  e9cd8400          STRD     r8,r4,[sp,#0]         ;3842
0001b8  23e8              MOVS     r3,#0xe8              ;3842
0001ba  4a97              LDR      r2,|L10.1048|
0001bc  4659              MOV      r1,r11                ;3842
0001be  2009              MOVS     r0,#9                 ;3842
0001c0  f7fffffe          BL       TIMER_AddTask
0001c4  200a              MOVS     r0,#0xa               ;3848
0001c6  f7fffffe          BL       TIMER_KillTask
                  |L10.458|
0001ca  2009              MOVS     r0,#9                 ;3852
0001cc  f7fffffe          BL       TIMER_ResetTimer
0001d0  6dab              LDR      r3,[r5,#0x58]         ;3853  ; dut_info
0001d2  2074              MOVS     r0,#0x74              ;3853
0001d4  4343              MULS     r3,r0,r3              ;3853
0001d6  f44f22c0          MOV      r2,#0x60000           ;3853
0001da  2126              MOVS     r1,#0x26              ;3853
0001dc  2004              MOVS     r0,#4                 ;3853
0001de  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
0001e2  6da8              LDR      r0,[r5,#0x58]         ;3854  ; dut_info
0001e4  1c40              ADDS     r0,r0,#1              ;3854
0001e6  65a8              STR      r0,[r5,#0x58]         ;3854  ; dut_info
0001e8  e74c              B        |L10.132|
                  |L10.490|
0001ea  e03a              B        |L10.610|
                  |L10.492|
0001ec  e05a              B        |L10.676|
                  |L10.494|
0001ee  e06c              B        |L10.714|
                  |L10.496|
0001f0  e0c9              B        |L10.902|
0001f2  20d8              MOVS     r0,#0xd8              ;3859
0001f4  f7fffffe          BL       STATE_SwitchStep
0001f8  202a              MOVS     r0,#0x2a              ;3860
0001fa  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
0001fe  3552              ADDS     r5,r5,#0x52           ;3861
000200  f8056c2d          STRB     r6,[r5,#-0x2d]        ;3861
000204  756c              STRB     r4,[r5,#0x15]         ;3862
000206  77ee              STRB     r6,[r5,#0x1f]         ;3863
000208  74ae              STRB     r6,[r5,#0x12]         ;3864
00020a  2009              MOVS     r0,#9                 ;3865
00020c  f7fffffe          BL       TIMER_KillTask
000210  e738              B        |L10.132|
                  |L10.530|
000212  20d8              MOVS     r0,#0xd8              ;3870
000214  f7fffffe          BL       STATE_SwitchStep
000218  f88a6000          STRB     r6,[r10,#0]           ;3873
00021c  f8894002          STRB     r4,[r9,#2]            ;3874
000220  2380              MOVS     r3,#0x80              ;3877
000222  2203              MOVS     r2,#3                 ;3877
000224  2110              MOVS     r1,#0x10              ;3877
000226  4638              MOV      r0,r7                 ;3877
000228  f7fffffe          BL       gpio_init
00022c  2180              MOVS     r1,#0x80              ;3877
00022e  4638              MOV      r0,r7                 ;3877
000230  f7fffffe          BL       gpio_bit_reset
000234  2100              MOVS     r1,#0                 ;3878
000236  2005              MOVS     r0,#5                 ;3878
000238  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
                  |L10.572|
00023c  e722              B        |L10.132|
                  |L10.574|
00023e  20d8              MOVS     r0,#0xd8              ;3883
000240  f7fffffe          BL       STATE_SwitchStep
000244  766c              STRB     r4,[r5,#0x19]         ;3884
000246  4658              MOV      r0,r11                ;3885
000248  f7fffffe          BL       IAP_CTRL_CAN_Init
00024c  f7fffffe          BL       CAN_PROTOCOL1_Init
000250  e9cd8400          STRD     r8,r4,[sp,#0]         ;3888
000254  2300              MOVS     r3,#0                 ;3888
000256  4a71              LDR      r2,|L10.1052|
000258  4659              MOV      r1,r11                ;3888
00025a  2018              MOVS     r0,#0x18              ;3888
00025c  f7fffffe          BL       TIMER_AddTask
000260  e710              B        |L10.132|
                  |L10.610|
000262  20d8              MOVS     r0,#0xd8              ;3898
000264  f7fffffe          BL       STATE_SwitchStep
000268  f8854064          STRB     r4,[r5,#0x64]         ;3899
00026c  4658              MOV      r0,r11                ;3900
00026e  f7fffffe          BL       IAP_CTRL_CAN_Init
000272  f7fffffe          BL       CAN_PROTOCOL1_Init
000276  f2413088          MOV      r0,#0x1388            ;3902
00027a  f7fffffe          BL       addTimeOutTimer
00027e  f8894001          STRB     r4,[r9,#1]            ;3903
000282  f88a6000          STRB     r6,[r10,#0]           ;3904
000286  2380              MOVS     r3,#0x80              ;3907
000288  2203              MOVS     r2,#3                 ;3907
00028a  2110              MOVS     r1,#0x10              ;3907
00028c  4638              MOV      r0,r7                 ;3907
00028e  f7fffffe          BL       gpio_init
000292  2180              MOVS     r1,#0x80              ;3907
000294  4638              MOV      r0,r7                 ;3907
000296  f7fffffe          BL       gpio_bit_reset
00029a  2100              MOVS     r1,#0                 ;3910
00029c  2005              MOVS     r0,#5                 ;3910
00029e  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
0002a2  e6ef              B        |L10.132|
                  |L10.676|
0002a4  f44f708a          MOV      r0,#0x114             ;3915
0002a8  f7fffffe          BL       STATE_SwitchStep
0002ac  2380              MOVS     r3,#0x80              ;3918
0002ae  2203              MOVS     r2,#3                 ;3918
0002b0  2110              MOVS     r1,#0x10              ;3918
0002b2  4638              MOV      r0,r7                 ;3918
0002b4  f7fffffe          BL       gpio_init
0002b8  2180              MOVS     r1,#0x80              ;3918
0002ba  4638              MOV      r0,r7                 ;3918
0002bc  f7fffffe          BL       gpio_bit_set
0002c0  2101              MOVS     r1,#1                 ;3921
0002c2  2005              MOVS     r0,#5                 ;3921
0002c4  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
0002c8  e6dc              B        |L10.132|
                  |L10.714|
0002ca  20d8              MOVS     r0,#0xd8              ;3926
0002cc  f7fffffe          BL       STATE_SwitchStep
0002d0  f89d0008          LDRB     r0,[sp,#8]            ;3930
0002d4  ad02              ADD      r5,sp,#8              ;3750
0002d6  288a              CMP      r0,#0x8a              ;3930
0002d8  d01e              BEQ      |L10.792|
0002da  203a              MOVS     r0,#0x3a              ;3932
0002dc  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
0002e0  201a              MOVS     r0,#0x1a              ;3933
0002e2  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
0002e6  2050              MOVS     r0,#0x50              ;3934
0002e8  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
0002ec  f89d0008          LDRB     r0,[sp,#8]            ;3935
0002f0  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
0002f4  2401              MOVS     r4,#1                 ;3936
0002f6  e008              B        |L10.778|
0002f8  e09c              B        |L10.1076|
0002fa  e073              B        |L10.996|
0002fc  e063              B        |L10.966|
0002fe  e054              B        |L10.938|
                  |L10.768|
000300  5d28              LDRB     r0,[r5,r4]            ;3938
000302  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000306  1c64              ADDS     r4,r4,#1              ;3936
000308  b2e4              UXTB     r4,r4                 ;3936
                  |L10.778|
00030a  f89d0008          LDRB     r0,[sp,#8]            ;3936
00030e  1c40              ADDS     r0,r0,#1              ;3936
000310  42a0              CMP      r0,r4                 ;3936
000312  d8f5              BHI      |L10.768|
000314  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
                  |L10.792|
000318  f89d0008          LDRB     r0,[sp,#8]            ;3945
00031c  288a              CMP      r0,#0x8a              ;3945
00031e  d18d              BNE      |L10.572|
000320  203a              MOVS     r0,#0x3a              ;3948
000322  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000326  201a              MOVS     r0,#0x1a              ;3949
000328  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
00032c  2050              MOVS     r0,#0x50              ;3950
00032e  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000332  f89d0008          LDRB     r0,[sp,#8]            ;3951
000336  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
00033a  2401              MOVS     r4,#1                 ;3952
00033c  e004              B        |L10.840|
                  |L10.830|
00033e  5d28              LDRB     r0,[r5,r4]            ;3954
000340  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000344  1c64              ADDS     r4,r4,#1              ;3952
000346  b2e4              UXTB     r4,r4                 ;3952
                  |L10.840|
000348  f89d0008          LDRB     r0,[sp,#8]            ;3952
00034c  1c40              ADDS     r0,r0,#1              ;3952
00034e  42a0              CMP      r0,r4                 ;3952
000350  d8f5              BHI      |L10.830|
000352  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
000356  203a              MOVS     r0,#0x3a              ;3960
000358  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
00035c  201a              MOVS     r0,#0x1a              ;3961
00035e  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000362  20c0              MOVS     r0,#0xc0              ;3962
000364  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000368  2036              MOVS     r0,#0x36              ;3963
00036a  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
00036e  2400              MOVS     r4,#0                 ;3964
000370  4d2b              LDR      r5,|L10.1056|
                  |L10.882|
000372  5d28              LDRB     r0,[r5,r4]            ;3966
000374  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000378  1c64              ADDS     r4,r4,#1              ;3964
00037a  b2e4              UXTB     r4,r4                 ;3964
00037c  2c36              CMP      r4,#0x36              ;3964
00037e  d3f8              BCC      |L10.882|
000380  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
000384  e67e              B        |L10.132|
                  |L10.902|
000386  20d8              MOVS     r0,#0xd8              ;3988
000388  f7fffffe          BL       STATE_SwitchStep
00038c  2002              MOVS     r0,#2                 ;3989
00038e  f7fffffe          BL       TIMER_KillTask
000392  2008              MOVS     r0,#8                 ;3990
000394  f7fffffe          BL       TIMER_KillTask
000398  207d              MOVS     r0,#0x7d              ;3991
00039a  f7fffffe          BL       IAP_CTRL_CAN_Init
00039e  3546              ADDS     r5,r5,#0x46           ;3992
0003a0  f8056c20          STRB     r6,[r5,#-0x20]        ;3992
0003a4  77ec              STRB     r4,[r5,#0x1f]         ;3993
0003a6  77ae              STRB     r6,[r5,#0x1e]         ;3994
0003a8  e66c              B        |L10.132|
                  |L10.938|
0003aa  20d8              MOVS     r0,#0xd8              ;3999
0003ac  f7fffffe          BL       STATE_SwitchStep
0003b0  f8950026          LDRB     r0,[r5,#0x26]         ;4002  ; dut_info
0003b4  b118              CBZ      r0,|L10.958|
0003b6  4610              MOV      r0,r2                 ;4004
0003b8  f7fffffe          BL       STATE_SwitchStep
0003bc  e662              B        |L10.132|
                  |L10.958|
0003be  2001              MOVS     r0,#1                 ;4009
0003c0  f7fffffe          BL       STATE_EnterState
0003c4  e65e              B        |L10.132|
                  |L10.966|
0003c6  f8950025          LDRB     r0,[r5,#0x25]         ;4015  ; dut_info
0003ca  b110              CBZ      r0,|L10.978|
0003cc  f8854061          STRB     r4,[r5,#0x61]         ;4017
0003d0  e004              B        |L10.988|
                  |L10.978|
0003d2  f8950026          LDRB     r0,[r5,#0x26]         ;4019  ; dut_info
0003d6  b108              CBZ      r0,|L10.988|
0003d8  f8854063          STRB     r4,[r5,#0x63]         ;4021
                  |L10.988|
0003dc  2001              MOVS     r0,#1                 ;4024
0003de  f7fffffe          BL       STATE_EnterState
0003e2  e64f              B        |L10.132|
                  |L10.996|
0003e4  20d8              MOVS     r0,#0xd8              ;4029
0003e6  f7fffffe          BL       STATE_SwitchStep
0003ea  3571              ADDS     r5,r5,#0x71           ;4030
0003ec  706c              STRB     r4,[r5,#1]            ;4030
0003ee  702c              STRB     r4,[r5,#0]            ;4031
0003f0  e9cd8400          STRD     r8,r4,[sp,#0]         ;4034
0003f4  23db              MOVS     r3,#0xdb              ;4034
0003f6  4a08              LDR      r2,|L10.1048|
0003f8  2164              MOVS     r1,#0x64              ;4034
0003fa  2009              MOVS     r0,#9                 ;4034
0003fc  f7fffffe          BL       TIMER_AddTask
000400  9400              STR      r4,[sp,#0]            ;4042
000402  23e9              MOVS     r3,#0xe9              ;4042
000404  e00e              B        |L10.1060|
000406  0000              DCW      0x0000
                  |L10.1032|
                          DCD      ||.data||+0x6
                  |L10.1036|
                          DCD      switch_cnt
                  |L10.1040|
                          DCD      0x40010c00
                  |L10.1044|
                          DCD      dut_info
                  |L10.1048|
                          DCD      STATE_SwitchStep
                  |L10.1052|
                          DCD      CAN_PROTOCOL1_SendCmdChangeColor
                  |L10.1056|
                          DCD      resultArray
                  |L10.1060|
000424  4a0d              LDR      r2,|L10.1116|
000426  f64031b8          MOV      r1,#0xbb8             ;4042
00042a  200a              MOVS     r0,#0xa               ;4042
00042c  9401              STR      r4,[sp,#4]            ;4042
00042e  f7fffffe          BL       TIMER_AddTask
000432  e627              B        |L10.132|
                  |L10.1076|
000434  2000              MOVS     r0,#0                 ;4052
000436  f7fffffe          BL       STATE_SwitchStep
00043a  2009              MOVS     r0,#9                 ;4053
00043c  f7fffffe          BL       TIMER_KillTask
000440  2004              MOVS     r0,#4                 ;4054
000442  f7fffffe          BL       TIMER_KillTask
000446  f8856071          STRB     r6,[r5,#0x71]         ;4055
00044a  f8950025          LDRB     r0,[r5,#0x25]         ;4057  ; dut_info
00044e  b108              CBZ      r0,|L10.1108|
000450  f8854061          STRB     r4,[r5,#0x61]         ;4059
                  |L10.1108|
000454  2001              MOVS     r0,#1                 ;4062
000456  f7fffffe          BL       STATE_EnterState
00045a  e613              B        |L10.132|
;;;4069   
                          ENDP

                  |L10.1116|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_CmUartUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_CmUartUpgrade PROC
;;;3363   // 通用彩屏升级步骤
;;;3364   void STEP_Process_CmUartUpgrade()
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3365   {
;;;3366       uint8 i = 0;
;;;3367   
;;;3368       switch (stateCB.step)
000004  48cc              LDR      r0,|L11.824|
000006  2600              MOVS     r6,#0
;;;3369       {
;;;3370           case STEP_NULL: // 空步骤
;;;3371               break;
;;;3372   
;;;3373           // 升级入口
;;;3374           case STEP_CM_UART_UPGRADE_ENTRY:
;;;3375               TIMER_KillTask(TIMER_ID_ONLINE_DETECT);
;;;3376               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);                            // 停止设置config定时器
;;;3377               UART_DRIVE_InitSelect(UART_DRIVE_BAUD_RATE); // 设置波特率
;;;3378               UART_PROTOCOL_Init();                        // 55升级协议
;;;3379               UART_PROTOCOL4_Init();                       // KM5S
;;;3380               resetFlag = TRUE;
000008  2701              MOVS     r7,#1
00000a  8841              LDRH     r1,[r0,#2]            ;3368  ; stateCB
;;;3381               switch_cnt = 0;
00000c  f8df932c          LDR      r9,|L11.828|
;;;3382   
;;;3383               // vlk供电
;;;3384               VLK_PW_EN_OFF();
000010  4ccb              LDR      r4,|L11.832|
;;;3385   
;;;3386               // 关闭仪表供电电源
;;;3387               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, FALSE);
;;;3388               break;
;;;3389   
;;;3390           // 等待电源板/dut应答
;;;3391           case STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK:
;;;3392               // 只做等待，不做操作
;;;3393               break;
;;;3394   
;;;3395           // 仪表重启
;;;3396           case STEP_CM_UART_BC_UPGRADE_RESTART:
;;;3397               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);                            // 停止设置config定时器
;;;3398   
;;;3399               // vlk供电
;;;3400               VLK_PW_EN_ON();
;;;3401   
;;;3402               // 打开仪表供电电源
;;;3403               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, TRUE);
;;;3404               break;
;;;3405   
;;;3406           // 允许dut进入工程模式
;;;3407           case STEP_CM_UART_BC_UPGRADE_UP_ALLOW:
;;;3408               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3409               UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_PROJECT_ALLOW, TRUE);
;;;3410               break;
;;;3411   
;;;3412           // 发送app擦除指令
;;;3413           case STEP_CM_UART_BC_UPGRADE_SEND_APP_EAR:
;;;3414               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3415               UART_PROTOCOL_SendCmdParamAck(UART_CMD_DUT_APP_ERASE_FLASH, TRUE); // 0x24:擦除app命令
;;;3416               break;
;;;3417   
;;;3418           // 发送app数据
;;;3419           case STEP_CM_UART_BC_UPGRADE_SEND_APP_PACKET:
;;;3420               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3421               uartProtocol_SendOnePacket_Hex(SPI_FLASH_DUT_APP_ADDEESS);
;;;3422               dut_info.currentAppSize++;
000012  4dcc              LDR      r5,|L11.836|
000014  f44f7a8a          MOV      r10,#0x114            ;3376
000018  f1a00806          SUB      r8,r0,#6              ;3380
00001c  f5b17f8d          CMP      r1,#0x11a             ;3368
000020  d07e              BEQ      |L11.288|
000022  dc40              BGT      |L11.166|
000024  f2401215          MOV      r2,#0x115             ;3368
000028  f2a11015          SUB      r0,r1,#0x115          ;3368
00002c  4291              CMP      r1,r2                 ;3368
00002e  d078              BEQ      |L11.290|
000030  dc27              BGT      |L11.130|
000032  2900              CMP      r1,#0                 ;3368
000034  d035              BEQ      |L11.162|
000036  f5a17180          SUB      r1,r1,#0x100          ;3368
00003a  3913              SUBS     r1,r1,#0x13           ;3368
00003c  d131              BNE      |L11.162|
00003e  2011              MOVS     r0,#0x11              ;3375
000040  f7fffffe          BL       TIMER_KillTask
000044  4650              MOV      r0,r10                ;3376
000046  f7fffffe          BL       STATE_SwitchStep
00004a  f44f30e1          MOV      r0,#0x1c200           ;3377
00004e  f7fffffe          BL       UART_DRIVE_InitSelect
000052  f7fffffe          BL       UART_PROTOCOL_Init
000056  f7fffffe          BL       UART_PROTOCOL4_Init
00005a  f8887000          STRB     r7,[r8,#0]            ;3380
00005e  f8896000          STRB     r6,[r9,#0]            ;3381
000062  2380              MOVS     r3,#0x80              ;3384
000064  2203              MOVS     r2,#3                 ;3384
000066  2110              MOVS     r1,#0x10              ;3384
000068  4620              MOV      r0,r4                 ;3384
00006a  f7fffffe          BL       gpio_init
00006e  2180              MOVS     r1,#0x80              ;3384
000070  4620              MOV      r0,r4                 ;3384
000072  f7fffffe          BL       gpio_bit_reset
000076  e8bd47f0          POP      {r4-r10,lr}           ;3387
00007a  2100              MOVS     r1,#0                 ;3387
00007c  2005              MOVS     r0,#5                 ;3387
00007e  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
                  |L11.130|
000082  2801              CMP      r0,#1                 ;3368
000084  d050              BEQ      |L11.296|
000086  2802              CMP      r0,#2                 ;3368
000088  d06a              BEQ      |L11.352|
00008a  2804              CMP      r0,#4                 ;3368
00008c  d109              BNE      |L11.162|
00008e  4650              MOV      r0,r10                ;3420
000090  f7fffffe          BL       STATE_SwitchStep
000094  f44f20c0          MOV      r0,#0x60000           ;3421
000098  f7fffffe          BL       uartProtocol_SendOnePacket_Hex
00009c  6da8              LDR      r0,[r5,#0x58]  ; dut_info
00009e  1c40              ADDS     r0,r0,#1
0000a0  65a8              STR      r0,[r5,#0x58]  ; dut_info
                  |L11.162|
;;;3423               break;
;;;3424   
;;;3425           // app升级完成
;;;3426           case STEP_CM_UART_BC_UPGRADE_APP_UP_SUCCESS:
;;;3427               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3428               UART_PROTOCOL_SendCmdParamAck(UART_CMD_DUT_UPDATA_FINISH, TRUE); // 0x2A:升级成功
;;;3429               dut_info.appUpFlag = FALSE;
;;;3430               dut_info.appUpSuccesss = TRUE;
;;;3431   
;;;3432               // 关闭vlk供电
;;;3433               VLK_PW_EN_OFF();
;;;3434   
;;;3435               // 关闭仪表供电电源
;;;3436               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, FALSE);
;;;3437               break;
;;;3438   
;;;3439           // 设置config入口
;;;3440           case STEP_UART_SET_CONFIG_ENTRY:
;;;3441               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3442               dut_info.dutPowerOnAllow = TRUE; // 允许开机
;;;3443               UART_DRIVE_InitSelect(9600);     // UART协议层初始化
;;;3444               UART_PROTOCOL_Init();            // 55升级协议
;;;3445               UART_PROTOCOL4_Init();           // KM5S
;;;3446               configResetFlag = TRUE;
;;;3447               switch_cnt = 0;
;;;3448   
;;;3449               // 关闭vlk供电
;;;3450               VLK_PW_EN_OFF();
;;;3451   
;;;3452               // 关闭仪表供电电源
;;;3453               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, FALSE);
;;;3454               break;
;;;3455   
;;;3456           // 仪表开机
;;;3457           case STEP_UART_CONFIG_RESET:
;;;3458               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3459   
;;;3460               // vlk供电
;;;3461               VLK_PW_EN_ON();
;;;3462   
;;;3463               // 开启仪表供电电源
;;;3464               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, TRUE);
;;;3465               break;
;;;3466   
;;;3467           // 协议切换
;;;3468           case STEP_UART_PROTOCOL_SWITCCH:
;;;3469               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3470   
;;;3471               // 将仪表锂电2号切换为KM5S协议
;;;3472               UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_HEAD);               // 添加命令头
;;;3473               UART_PROTOCOL4_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);         // 添加设备地址
;;;3474               UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_PROTOCOL_SWITCCH);   // 0xc0 添加命令字
;;;3475               UART_PROTOCOL4_TxAddData(3);                                     // 添加数据长度
;;;3476               UART_PROTOCOL4_TxAddData(1);
;;;3477               UART_PROTOCOL4_TxAddData(1);
;;;3478               UART_PROTOCOL4_TxAddData(1);
;;;3479   
;;;3480               // 添加检验和与结束符，并添加至发送
;;;3481               UART_PROTOCOL4_TxAddFrame();
;;;3482               break;
;;;3483   
;;;3484           // 发送config内容
;;;3485           case STEP_UART_SEND_SET_CONFIG:
;;;3486               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3487   
;;;3488               /*发送dut配置信息*/
;;;3489               // 大于旧协议固定数据数
;;;3490               if ((configs[0] - 84 > 54) || (configs[0] - 84 < 54))
;;;3491               {
;;;3492                   UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_HEAD);                    // 添加命令头
;;;3493                   UART_PROTOCOL4_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);              // 添加设备地址
;;;3494                   UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_NEW_WRITE_CONTROL_PARAM); // 0x50 添加命令字
;;;3495                   UART_PROTOCOL4_TxAddData(configs[0]);                                 // 添加数据长度
;;;3496                   for (i = 1; i < configs[0] + 1; i++)                                  // config只有54个字节
;;;3497                   {
;;;3498                       UART_PROTOCOL4_TxAddData(configs[i]);
;;;3499                   }
;;;3500                   // 添加检验和与结束符，并添加至发送
;;;3501                   UART_PROTOCOL4_TxAddFrame();
;;;3502               }
;;;3503   
;;;3504               // 参数内容为54个字节
;;;3505               if ((configs[0] - 84) == 54)
;;;3506               {
;;;3507                   // 新协议
;;;3508                   UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_HEAD);                       // 添加命令头
;;;3509                   UART_PROTOCOL4_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);                 // 添加设备地址
;;;3510                   UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_NEW_WRITE_CONTROL_PARAM);    // 0x50 添加命令字
;;;3511                   UART_PROTOCOL4_TxAddData(configs[0]);                                    // 添加数据长度
;;;3512                   for (i = 1; i < configs[0] + 1; i++)                                     // config只有54个字节
;;;3513                   {
;;;3514                       UART_PROTOCOL4_TxAddData(configs[i]);
;;;3515                   }
;;;3516                   // 添加检验和与结束符，并添加至发送
;;;3517                   UART_PROTOCOL4_TxAddFrame();
;;;3518   
;;;3519                   // 旧协议
;;;3520                   UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_HEAD);                // 添加命令头
;;;3521                   UART_PROTOCOL4_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);          // 添加设备地址
;;;3522                   UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_WRITE_CONTROL_PARAM); // 0xc0 添加命令字
;;;3523                   UART_PROTOCOL4_TxAddData(54);                                     // 添加数据长度
;;;3524                   for (i = 0; i < 54; i++)                                          // config只有54个字节
;;;3525                   {
;;;3526                       UART_PROTOCOL4_TxAddData(resultArray[i]);
;;;3527                   }
;;;3528                   // 添加检验和与结束符，并添加至发送
;;;3529                   UART_PROTOCOL4_TxAddFrame();
;;;3530               }
;;;3531               break;
;;;3532   
;;;3533           // 读取配置参数
;;;3534           case STEP_UART_READ_CONFIG:
;;;3535               TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG);                              // 停止设置config定时器
;;;3536               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3537               UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_HEAD);                    // 添加命令头
;;;3538               UART_PROTOCOL4_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);              // 添加设备地址
;;;3539               UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_READ_CONTROL_PARAM);      // 0xc2添加命令字
;;;3540               UART_PROTOCOL4_TxAddData(0);                                          // 添加数据长度
;;;3541   
;;;3542               // 添加检验和与结束符，并添加至发送
;;;3543               UART_PROTOCOL4_TxAddFrame();
;;;3544               break;
;;;3545   
;;;3546           // config设置成功
;;;3547           case STEP_UART_SET_CONFIG_SUCCESS:
;;;3548               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3549   
;;;3550               // 关闭vlk供电
;;;3551               VLK_PW_EN_OFF();
;;;3552   
;;;3553               dut_info.configUpFlag = FALSE; // 标志位置false
;;;3554               dut_info.configUpSuccesss = TRUE;
;;;3555               dut_info.dutPowerOnAllow = FALSE; // 允许开机
;;;3556               break;
;;;3557   
;;;3558           // 升级项完成
;;;3559           case STEP_CM_UART_BC_UPGRADE_ITEM_FINISH:
;;;3560               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;3561   
;;;3562               if (dut_info.configUpFlag)
;;;3563               {
;;;3564                   STATE_SwitchStep(STEP_UART_SET_CONFIG_ENTRY);
;;;3565               }
;;;3566               else
;;;3567               {
;;;3568                   // 没有升级项
;;;3569                   STATE_EnterState(STATE_STANDBY);
;;;3570   
;;;3571                   // 关闭vlk供电
;;;3572                   VLK_PW_EN_OFF();
;;;3573               }
;;;3574               break;
;;;3575   
;;;3576           default:
;;;3577               break;
;;;3578       }
;;;3579   }
0000a2  e8bd87f0          POP      {r4-r10,pc}
                  |L11.166|
0000a6  f240124f          MOV      r2,#0x14f             ;3368
0000aa  f2a1104f          SUB      r0,r1,#0x14f          ;3368
0000ae  4291              CMP      r1,r2                 ;3368
0000b0  d07e              BEQ      |L11.432|
0000b2  dc1a              BGT      |L11.234|
0000b4  f5a17180          SUB      r1,r1,#0x100          ;3368
0000b8  391f              SUBS     r1,r1,#0x1f           ;3368
0000ba  d07a              BEQ      |L11.434|
0000bc  292e              CMP      r1,#0x2e              ;3368
0000be  d073              BEQ      |L11.424|
0000c0  292f              CMP      r1,#0x2f              ;3368
0000c2  d1ee              BNE      |L11.162|
0000c4  4650              MOV      r0,r10                ;3458
0000c6  f7fffffe          BL       STATE_SwitchStep
0000ca  2380              MOVS     r3,#0x80              ;3461
0000cc  2203              MOVS     r2,#3                 ;3461
0000ce  2110              MOVS     r1,#0x10              ;3461
0000d0  4620              MOV      r0,r4                 ;3461
0000d2  f7fffffe          BL       gpio_init
0000d6  2180              MOVS     r1,#0x80              ;3461
0000d8  4620              MOV      r0,r4                 ;3461
0000da  f7fffffe          BL       gpio_bit_set
0000de  e8bd47f0          POP      {r4-r10,lr}           ;3464
0000e2  2101              MOVS     r1,#1                 ;3464
0000e4  2005              MOVS     r0,#5                 ;3464
0000e6  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
                  |L11.234|
0000ea  2801              CMP      r0,#1                 ;3368
0000ec  d07d              BEQ      |L11.490|
0000ee  2802              CMP      r0,#2                 ;3368
0000f0  d07c              BEQ      |L11.492|
0000f2  2803              CMP      r0,#3                 ;3368
0000f4  d1d5              BNE      |L11.162|
0000f6  2002              MOVS     r0,#2                 ;3535
0000f8  f7fffffe          BL       TIMER_KillTask
0000fc  4650              MOV      r0,r10                ;3536
0000fe  f7fffffe          BL       STATE_SwitchStep
000102  203a              MOVS     r0,#0x3a              ;3537
000104  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000108  201a              MOVS     r0,#0x1a              ;3538
00010a  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00010e  20c2              MOVS     r0,#0xc2              ;3539
000110  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000114  2000              MOVS     r0,#0                 ;3540
000116  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00011a  e8bd47f0          POP      {r4-r10,lr}           ;3543
00011e  e001              B        |L11.292|
                  |L11.288|
000120  e027              B        |L11.370|
                  |L11.290|
000122  e014              B        |L11.334|
                  |L11.292|
000124  f7ffbffe          B.W      UART_PROTOCOL4_TxAddFrame
                  |L11.296|
000128  4650              MOV      r0,r10                ;3397
00012a  f7fffffe          BL       STATE_SwitchStep
00012e  2380              MOVS     r3,#0x80              ;3400
000130  2203              MOVS     r2,#3                 ;3400
000132  2110              MOVS     r1,#0x10              ;3400
000134  4620              MOV      r0,r4                 ;3400
000136  f7fffffe          BL       gpio_init
00013a  2180              MOVS     r1,#0x80              ;3400
00013c  4620              MOV      r0,r4                 ;3400
00013e  f7fffffe          BL       gpio_bit_set
000142  e8bd47f0          POP      {r4-r10,lr}           ;3403
000146  2101              MOVS     r1,#1                 ;3403
000148  2005              MOVS     r0,#5                 ;3403
00014a  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
                  |L11.334|
00014e  4650              MOV      r0,r10                ;3408
000150  f7fffffe          BL       STATE_SwitchStep
000154  e8bd47f0          POP      {r4-r10,lr}           ;3409
000158  2101              MOVS     r1,#1                 ;3409
00015a  2002              MOVS     r0,#2                 ;3409
00015c  f7ffbffe          B.W      UART_PROTOCOL_SendCmdParamAck
                  |L11.352|
000160  4650              MOV      r0,r10                ;3414
000162  f7fffffe          BL       STATE_SwitchStep
000166  e8bd47f0          POP      {r4-r10,lr}           ;3415
00016a  2101              MOVS     r1,#1                 ;3415
00016c  2024              MOVS     r0,#0x24              ;3415
00016e  f7ffbffe          B.W      UART_PROTOCOL_SendCmdParamAck
                  |L11.370|
000172  4650              MOV      r0,r10                ;3427
000174  f7fffffe          BL       STATE_SwitchStep
000178  2101              MOVS     r1,#1                 ;3428
00017a  202a              MOVS     r0,#0x2a              ;3428
00017c  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
000180  f8856025          STRB     r6,[r5,#0x25]         ;3429
000184  f8857067          STRB     r7,[r5,#0x67]         ;3430
000188  2380              MOVS     r3,#0x80              ;3433
00018a  2203              MOVS     r2,#3                 ;3433
00018c  2110              MOVS     r1,#0x10              ;3433
00018e  4620              MOV      r0,r4                 ;3433
000190  f7fffffe          BL       gpio_init
000194  2180              MOVS     r1,#0x80              ;3433
000196  4620              MOV      r0,r4                 ;3433
000198  f7fffffe          BL       gpio_bit_reset
00019c  e8bd47f0          POP      {r4-r10,lr}           ;3436
0001a0  2100              MOVS     r1,#0                 ;3436
0001a2  2005              MOVS     r0,#5                 ;3436
0001a4  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
                  |L11.424|
0001a8  4650              MOV      r0,r10                ;3441
0001aa  f7fffffe          BL       STATE_SwitchStep
0001ae  e001              B        |L11.436|
                  |L11.432|
0001b0  e021              B        |L11.502|
                  |L11.434|
0001b2  e0a5              B        |L11.768|
                  |L11.436|
0001b4  f8857064          STRB     r7,[r5,#0x64]         ;3442
0001b8  f44f5016          MOV      r0,#0x2580            ;3443
0001bc  f7fffffe          BL       UART_DRIVE_InitSelect
0001c0  f7fffffe          BL       UART_PROTOCOL_Init
0001c4  f7fffffe          BL       UART_PROTOCOL4_Init
0001c8  f8887001          STRB     r7,[r8,#1]            ;3446
0001cc  f8896000          STRB     r6,[r9,#0]            ;3447
0001d0  2380              MOVS     r3,#0x80              ;3450
0001d2  2203              MOVS     r2,#3                 ;3450
0001d4  2110              MOVS     r1,#0x10              ;3450
0001d6  4620              MOV      r0,r4                 ;3450
0001d8  f7fffffe          BL       gpio_init
0001dc  2180              MOVS     r1,#0x80              ;3450
0001de  4620              MOV      r0,r4                 ;3450
0001e0  f7fffffe          BL       gpio_bit_reset
0001e4  2100              MOVS     r1,#0                 ;3453
0001e6  2005              MOVS     r0,#5                 ;3453
0001e8  e001              B        |L11.494|
                  |L11.490|
0001ea  e020              B        |L11.558|
                  |L11.492|
0001ec  e075              B        |L11.730|
                  |L11.494|
0001ee  e8bd47f0          POP      {r4-r10,lr}           ;3453
0001f2  f7ffbffe          B.W      POWER_PROTOCOL_SendCmdParamAck
                  |L11.502|
0001f6  4650              MOV      r0,r10                ;3469
0001f8  f7fffffe          BL       STATE_SwitchStep
0001fc  203a              MOVS     r0,#0x3a              ;3472
0001fe  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000202  201a              MOVS     r0,#0x1a              ;3473
000204  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000208  20ab              MOVS     r0,#0xab              ;3474
00020a  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00020e  2003              MOVS     r0,#3                 ;3475
000210  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000214  2001              MOVS     r0,#1                 ;3476
000216  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00021a  2001              MOVS     r0,#1                 ;3477
00021c  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000220  2001              MOVS     r0,#1                 ;3478
000222  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000226  e8bd47f0          POP      {r4-r10,lr}           ;3481
00022a  f7ffbffe          B.W      UART_PROTOCOL4_TxAddFrame
                  |L11.558|
00022e  4650              MOV      r0,r10                ;3486
000230  f7fffffe          BL       STATE_SwitchStep
000234  4d44              LDR      r5,|L11.840|
000236  7828              LDRB     r0,[r5,#0]            ;3490  ; configs
000238  288a              CMP      r0,#0x8a              ;3490
00023a  d018              BEQ      |L11.622|
00023c  203a              MOVS     r0,#0x3a              ;3492
00023e  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000242  201a              MOVS     r0,#0x1a              ;3493
000244  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000248  2050              MOVS     r0,#0x50              ;3494
00024a  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00024e  7828              LDRB     r0,[r5,#0]            ;3495  ; configs
000250  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000254  2401              MOVS     r4,#1                 ;3496
000256  e004              B        |L11.610|
                  |L11.600|
000258  5d28              LDRB     r0,[r5,r4]            ;3498
00025a  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00025e  1c64              ADDS     r4,r4,#1              ;3496
000260  b2e4              UXTB     r4,r4                 ;3496
                  |L11.610|
000262  7828              LDRB     r0,[r5,#0]            ;3496  ; configs
000264  1c40              ADDS     r0,r0,#1              ;3496
000266  42a0              CMP      r0,r4                 ;3496
000268  d8f6              BHI      |L11.600|
00026a  f7fffffe          BL       UART_PROTOCOL4_TxAddFrame
                  |L11.622|
00026e  7828              LDRB     r0,[r5,#0]            ;3505  ; configs
000270  288a              CMP      r0,#0x8a              ;3505
000272  f47faf16          BNE      |L11.162|
000276  203a              MOVS     r0,#0x3a              ;3508
000278  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00027c  201a              MOVS     r0,#0x1a              ;3509
00027e  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000282  2050              MOVS     r0,#0x50              ;3510
000284  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000288  7828              LDRB     r0,[r5,#0]            ;3511  ; configs
00028a  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00028e  2401              MOVS     r4,#1                 ;3512
000290  e004              B        |L11.668|
                  |L11.658|
000292  5d28              LDRB     r0,[r5,r4]            ;3514
000294  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000298  1c64              ADDS     r4,r4,#1              ;3512
00029a  b2e4              UXTB     r4,r4                 ;3512
                  |L11.668|
00029c  7828              LDRB     r0,[r5,#0]            ;3512  ; configs
00029e  1c40              ADDS     r0,r0,#1              ;3512
0002a0  42a0              CMP      r0,r4                 ;3512
0002a2  d8f6              BHI      |L11.658|
0002a4  f7fffffe          BL       UART_PROTOCOL4_TxAddFrame
0002a8  203a              MOVS     r0,#0x3a              ;3520
0002aa  f7fffffe          BL       UART_PROTOCOL4_TxAddData
0002ae  201a              MOVS     r0,#0x1a              ;3521
0002b0  f7fffffe          BL       UART_PROTOCOL4_TxAddData
0002b4  20c0              MOVS     r0,#0xc0              ;3522
0002b6  f7fffffe          BL       UART_PROTOCOL4_TxAddData
0002ba  2036              MOVS     r0,#0x36              ;3523
0002bc  f7fffffe          BL       UART_PROTOCOL4_TxAddData
0002c0  2400              MOVS     r4,#0                 ;3524
0002c2  4d22              LDR      r5,|L11.844|
                  |L11.708|
0002c4  5d28              LDRB     r0,[r5,r4]            ;3526
0002c6  f7fffffe          BL       UART_PROTOCOL4_TxAddData
0002ca  1c64              ADDS     r4,r4,#1              ;3524
0002cc  b2e4              UXTB     r4,r4                 ;3524
0002ce  2c36              CMP      r4,#0x36              ;3524
0002d0  d3f8              BCC      |L11.708|
0002d2  e8bd47f0          POP      {r4-r10,lr}           ;3529
0002d6  f7ffbffe          B.W      UART_PROTOCOL4_TxAddFrame
                  |L11.730|
0002da  4650              MOV      r0,r10                ;3548
0002dc  f7fffffe          BL       STATE_SwitchStep
0002e0  2380              MOVS     r3,#0x80              ;3551
0002e2  2203              MOVS     r2,#3                 ;3551
0002e4  2110              MOVS     r1,#0x10              ;3551
0002e6  4620              MOV      r0,r4                 ;3551
0002e8  f7fffffe          BL       gpio_init
0002ec  2180              MOVS     r1,#0x80              ;3551
0002ee  4620              MOV      r0,r4                 ;3551
0002f0  f7fffffe          BL       gpio_bit_reset
0002f4  3546              ADDS     r5,r5,#0x46           ;3553
0002f6  f8056c20          STRB     r6,[r5,#-0x20]        ;3553
0002fa  77ef              STRB     r7,[r5,#0x1f]         ;3554
0002fc  77ae              STRB     r6,[r5,#0x1e]         ;3555
0002fe  e6d0              B        |L11.162|
                  |L11.768|
000300  4650              MOV      r0,r10                ;3560
000302  f7fffffe          BL       STATE_SwitchStep
000306  f8950026          LDRB     r0,[r5,#0x26]         ;3562  ; dut_info
00030a  b128              CBZ      r0,|L11.792|
00030c  e8bd47f0          POP      {r4-r10,lr}           ;3564
000310  f240104d          MOV      r0,#0x14d             ;3564
000314  f7ffbffe          B.W      STATE_SwitchStep
                  |L11.792|
000318  2001              MOVS     r0,#1                 ;3569
00031a  f7fffffe          BL       STATE_EnterState
00031e  2380              MOVS     r3,#0x80              ;3572
000320  2203              MOVS     r2,#3                 ;3572
000322  2110              MOVS     r1,#0x10              ;3572
000324  4620              MOV      r0,r4                 ;3572
000326  f7fffffe          BL       gpio_init
00032a  4620              MOV      r0,r4                 ;3572
00032c  e8bd47f0          POP      {r4-r10,lr}           ;3572
000330  2180              MOVS     r1,#0x80              ;3572
000332  f7ffbffe          B.W      gpio_bit_reset
;;;3580   
                          ENDP

000336  0000              DCW      0x0000
                  |L11.824|
                          DCD      ||.data||+0x6
                  |L11.828|
                          DCD      switch_cnt
                  |L11.832|
                          DCD      0x40010c00
                  |L11.836|
                          DCD      dut_info
                  |L11.840|
                          DCD      configs
                  |L11.844|
                          DCD      resultArray

                          AREA ||i.STEP_Process_DerailleurCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_DerailleurCanTest PROC
;;;2985   // 电子变速测试
;;;2986   void STEP_Process_DerailleurCanTest(void)   
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;2987   {
;;;2988       switch (stateCB.step)
000004  48da              LDR      r0,|L12.880|
;;;2989       {
;;;2990           case STEP_NULL: // 空步骤
;;;2991               break;
;;;2992   
;;;2993           case STEP_DERAILLEUR_CAN_TEST_ENTRY: // 入口步骤
;;;2994               STATE_SwitchStep(STEP_DERAILLEUR_CAN_TEST_VCC);
;;;2995               CAN_PROTOCOL_TEST_Init(dut_info.can_baudRate); 
;;;2996               Clear_All_Lines();
;;;2997               Display_Centered(0, "DERAILLEUR");
;;;2998               Display_Centered(1, "Testing");
;;;2999   
;;;3000               // 测试引脚复位
;;;3001               AVO_PIN_Reset();
;;;3002               break;
;;;3003   
;;;3004           case STEP_DERAILLEUR_CAN_TEST_WAIT_RESPONSE: // 等待仪表或万用表回应
;;;3005               break;
;;;3006   
;;;3007           case STEP_DERAILLEUR_CAN_TEST_VCC: // 通知万用表测VCC
;;;3008               STATE_SwitchStep(STEP_DERAILLEUR_CAN_TEST_WAIT_RESPONSE);
;;;3009   
;;;3010               // 打开VCC测试引脚
;;;3011               DERAILLEUR_VCC_TEST_EN_ON();
;;;3012   
;;;3013               // 通知万用表测电压
;;;3014               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;3015               Clear_All_Lines();
;;;3016               Display_Centered(0, "DERAILLEUR");
;;;3017               Display_Centered(1, "AVO METER");
;;;3018               Display_Centered(2, "Measurement");
;;;3019   
;;;3020               // 添加超时
;;;3021               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;3022                             4000,
;;;3023                             STATE_SwitchStep,
;;;3024                             STEP_DERAILLEUR_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;3025                             1,
;;;3026                             ACTION_MODE_ADD_TO_QUEUE);
;;;3027               break;
;;;3028   
;;;3029           // 比对VCC
;;;3030           case STEP_DERAILLEUR_CAN_TEST_CHECK_VOLTAGE_VALUE:
;;;3031               STATE_SwitchStep(STEP_DERAILLEUR_CAN_TEST_WAIT_RESPONSE);
;;;3032               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;3033   
;;;3034               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;3035               {
;;;3036                   // 调整DAC输出,单位mv
;;;3037                   PWM_OUT1_PWM(FIRST_DAC);
000006  4ddb              LDR      r5,|L12.884|
000008  4cdb              LDR      r4,|L12.888|
00000a  8841              LDRH     r1,[r0,#2]            ;2988  ; stateCB
;;;3038                   Delayms(300);
00000c  f44f7796          MOV      r7,#0x12c
;;;3039                   Clear_All_Lines();
;;;3040                   Display_Centered(0, "DERAILLEUR");
;;;3041                   Display_Centered(1, "VCC");
;;;3042                   Display_Centered(2, "Normal");
;;;3043   
;;;3044                   // 获取电子变速AD值
;;;3045                   DUT_PROTOCOL_SendCmdParamAck(CAN_PROTOCOL_TEST_CMD_GET_THROTTLE_BRAKE_AD, 3);
;;;3046               }
;;;3047               // VCC不正常，则上报
;;;3048               else
;;;3049               {
;;;3050                   Clear_All_Lines();
;;;3051                   Display_Centered(0, "DERAILLEUR");
;;;3052                   Display_Centered(1, "VCC");
;;;3053                   Display_Centered(2, "Abnormal");
;;;3054                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;3055                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;3056                   STATE_EnterState(STATE_STANDBY);
;;;3057               }
;;;3058               break;
;;;3059   
;;;3060           // 在这进行判断数值是否正常，第一次
;;;3061           case STEP_DERAILLEUR_CAN_TEST_CHECK_DAC1_VALUE:
;;;3062               STATE_SwitchStep(STEP_DERAILLEUR_CAN_TEST_WAIT_RESPONSE);
;;;3063               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;3064   
;;;3065               // 处理DAC1数值检查逻辑
;;;3066               if ((dut_info.derailleurAd > FIRST_DAC - ERROR_DAC) && (dut_info.derailleurAd < FIRST_DAC + ERROR_DAC))
000010  f24036e7          MOV      r6,#0x3e7
000014  29ac              CMP      r1,#0xac              ;2988
000016  d07c              BEQ      |L12.274|
000018  dc53              BGT      |L12.194|
00001a  29a9              CMP      r1,#0xa9              ;2988
00001c  d07a              BEQ      |L12.276|
00001e  dc17              BGT      |L12.80|
000020  2900              CMP      r1,#0                 ;2988
000022  d077              BEQ      |L12.276|
000024  29a8              CMP      r1,#0xa8              ;2988
000026  d175              BNE      |L12.276|
000028  20aa              MOVS     r0,#0xaa              ;2994
00002a  f7fffffe          BL       STATE_SwitchStep
00002e  8ba0              LDRH     r0,[r4,#0x1c]         ;2995  ; dut_info
000030  f7fffffe          BL       CAN_PROTOCOL_TEST_Init
000034  f7fffffe          BL       Clear_All_Lines
000038  a1d0              ADR      r1,|L12.892|
00003a  2000              MOVS     r0,#0                 ;2997
00003c  f7fffffe          BL       Display_Centered
000040  a1d1              ADR      r1,|L12.904|
000042  2001              MOVS     r0,#1                 ;2998
000044  f7fffffe          BL       Display_Centered
000048  e8bd41fc          POP      {r2-r8,lr}            ;3001
00004c  f7ffbffe          B.W      AVO_PIN_Reset
                  |L12.80|
000050  29aa              CMP      r1,#0xaa              ;2988
000052  d062              BEQ      |L12.282|
000054  4ece              LDR      r6,|L12.912|
000056  29ab              CMP      r1,#0xab              ;2988
000058  d15c              BNE      |L12.276|
00005a  20a9              MOVS     r0,#0xa9              ;3031
00005c  f7fffffe          BL       STATE_SwitchStep
000060  2008              MOVS     r0,#8                 ;3032
000062  f7fffffe          BL       TIMER_ResetTimer
000066  6ba0              LDR      r0,[r4,#0x38]         ;3034  ; dut_info
000068  f7fffffe          BL       __aeabi_ui2f
00006c  6831              LDR      r1,[r6,#0]            ;3034  ; measure
00006e  f7fffffe          BL       __aeabi_cfcmple
000072  d27d              BCS      |L12.368|
000074  6b60              LDR      r0,[r4,#0x34]         ;3034  ; dut_info
000076  f7fffffe          BL       __aeabi_ui2f
00007a  6831              LDR      r1,[r6,#0]            ;3034  ; measure
00007c  f7fffffe          BL       __aeabi_cfrcmple
000080  d279              BCS      |L12.374|
000082  220f              MOVS     r2,#0xf               ;3037
000084  2100              MOVS     r1,#0                 ;3037
000086  4628              MOV      r0,r5                 ;3037
000088  f7fffffe          BL       timer_channel_output_pulse_value_config
00008c  2101              MOVS     r1,#1                 ;3037
00008e  4628              MOV      r0,r5                 ;3037
000090  f7fffffe          BL       timer_primary_output_config
000094  4638              MOV      r0,r7                 ;3038
000096  f7fffffe          BL       Delayms
00009a  f7fffffe          BL       Clear_All_Lines
00009e  a1b7              ADR      r1,|L12.892|
0000a0  2000              MOVS     r0,#0                 ;3040
0000a2  f7fffffe          BL       Display_Centered
0000a6  a1bb              ADR      r1,|L12.916|
0000a8  2001              MOVS     r0,#1                 ;3041
0000aa  f7fffffe          BL       Display_Centered
0000ae  a1ba              ADR      r1,|L12.920|
0000b0  2002              MOVS     r0,#2                 ;3042
0000b2  f7fffffe          BL       Display_Centered
0000b6  e8bd41fc          POP      {r2-r8,lr}            ;3045
0000ba  2103              MOVS     r1,#3                 ;3045
0000bc  20eb              MOVS     r0,#0xeb              ;3045
0000be  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L12.194|
0000c2  29ad              CMP      r1,#0xad              ;2988
0000c4  d07e              BEQ      |L12.452|
0000c6  29ae              CMP      r1,#0xae              ;2988
0000c8  d07d              BEQ      |L12.454|
0000ca  29af              CMP      r1,#0xaf              ;2988
0000cc  d07c              BEQ      |L12.456|
0000ce  29b0              CMP      r1,#0xb0              ;2988
0000d0  d14d              BNE      |L12.366|
;;;3067               {
;;;3068                   // 调整DAC输出,单位mv
;;;3069                   PWM_OUT1_PWM(SECOND_DAC);
;;;3070                   Delayms(300);
;;;3071                   Clear_All_Lines();
;;;3072                   Display_Centered(0, "DERAILLEUR");
;;;3073                   Display_Centered(1, "Adjusting DAC");
;;;3074                   Display_Centered(2, "First");
;;;3075   
;;;3076                   // 获取电子变速AD值
;;;3077                   DUT_PROTOCOL_SendCmdParamAck(CAN_PROTOCOL_TEST_CMD_GET_THROTTLE_BRAKE_AD, 3);
;;;3078               }
;;;3079               else
;;;3080               {
;;;3081                   Clear_All_Lines();
;;;3082                   Display_Centered(0, "DERAILLEUR");
;;;3083                   Display_Centered(1, "SIG1");
;;;3084                   Display_Centered(2, "Abnormal");
;;;3085                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;3086                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;3087                   STATE_EnterState(STATE_STANDBY);
;;;3088               }
;;;3089               break;
;;;3090   
;;;3091           // 在这进行判断数值是否正常，第二次
;;;3092           case STEP_DERAILLEUR_CAN_TEST_CHECK_DAC3_VALUE:
;;;3093               STATE_SwitchStep(STEP_DERAILLEUR_CAN_TEST_WAIT_RESPONSE);
;;;3094               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;3095   
;;;3096               // 处理DAC5数值检查逻辑
;;;3097               if ((dut_info.derailleurAd > SECOND_DAC - ERROR_DAC) && (dut_info.derailleurAd < SECOND_DAC + ERROR_DAC))
;;;3098               {
;;;3099                   // 调整DAC输出,单位mv
;;;3100                   PWM_OUT1_PWM(THIRD_DAC);
;;;3101                   Delayms(300);
;;;3102                   Clear_All_Lines();
;;;3103                   Display_Centered(0, "DERAILLEUR");
;;;3104                   Display_Centered(1, "Adjusting DAC");
;;;3105                   Display_Centered(2, "Second");
;;;3106   
;;;3107                   // 获取电子变速AD值
;;;3108                   DUT_PROTOCOL_SendCmdParamAck(CAN_PROTOCOL_TEST_CMD_GET_THROTTLE_BRAKE_AD, 3);
;;;3109               }
;;;3110               else
;;;3111               {
;;;3112                   Clear_All_Lines();
;;;3113                   Display_Centered(0, "DERAILLEUR");
;;;3114                   Display_Centered(1, "SIG2");
;;;3115                   Display_Centered(2, "Abnormal");
;;;3116                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;3117                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;3118                   STATE_EnterState(STATE_STANDBY);
;;;3119               }
;;;3120               break;
;;;3121   
;;;3122           // 在这进行判断数值是否正常，第三次
;;;3123           case STEP_DERAILLEUR_CAN_TEST_CHECK_DAC5_VALUE:
;;;3124               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;3125   
;;;3126               // 处理DAC5数值检查逻辑
;;;3127               if ((dut_info.derailleurAd > THIRD_DAC - ERROR_DAC) && (dut_info.derailleurAd < THIRD_DAC + ERROR_DAC))
;;;3128               {
;;;3129                   // 3次都正常则测试通过
;;;3130                   Clear_All_Lines();
;;;3131                   Display_Centered(0, "DERAILLEUR");
;;;3132                   Display_Centered(1, "Adjusting DAC");
;;;3133                   Display_Centered(2, "Third");
;;;3134                   STATE_SwitchStep(STEP_DERAILLEUR_CAN_TEST_COMPLETE);
;;;3135               }
;;;3136               else
;;;3137               {
;;;3138                   Clear_All_Lines();
;;;3139                   Display_Centered(0, "DERAILLEUR");
;;;3140                   Display_Centered(1, "SIG3");
;;;3141                   Display_Centered(2, "Abnormal");
;;;3142                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;3143                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;3144                   STATE_EnterState(STATE_STANDBY);
;;;3145               }
;;;3146               break;
;;;3147   
;;;3148           // 电子变速测试完成步骤，关闭DAC输出调整为0，然后上报结果
;;;3149           case STEP_DERAILLEUR_CAN_TEST_COMPLETE:
;;;3150               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;3151               AVO_PIN_Reset();
;;;3152               Clear_All_Lines();
;;;3153               Display_Centered(0, "DERAILLEUR");
;;;3154               Display_Centered(1, "Test Pass");
;;;3155               STATE_EnterState(STATE_STANDBY);
;;;3156               DAC0_output(0);
;;;3157               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;3158               break;
;;;3159   
;;;3160           // 通信超时
;;;3161           case STEP_DERAILLEUR_CAN_TEST_COMMUNICATION_TIME_OUT:
;;;3162               PWM_OUT1_PWM(0);
0000d2  2200              MOVS     r2,#0
0000d4  4611              MOV      r1,r2
0000d6  4628              MOV      r0,r5
0000d8  f7fffffe          BL       timer_channel_output_pulse_value_config
0000dc  2101              MOVS     r1,#1
0000de  4628              MOV      r0,r5
0000e0  f7fffffe          BL       timer_primary_output_config
;;;3163               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
0000e4  2100              MOVS     r1,#0
0000e6  200b              MOVS     r0,#0xb
0000e8  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;3164               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0000ec  2008              MOVS     r0,#8
0000ee  f7fffffe          BL       TIMER_KillTask
;;;3165               AVO_PIN_Reset();
0000f2  f7fffffe          BL       AVO_PIN_Reset
;;;3166               Clear_All_Lines();
0000f6  f7fffffe          BL       Clear_All_Lines
;;;3167               Display_Centered(0, "DERAILLEUR");
0000fa  a1a0              ADR      r1,|L12.892|
0000fc  2000              MOVS     r0,#0
0000fe  f7fffffe          BL       Display_Centered
;;;3168               Display_Centered(1, "Test Timeout");
000102  a1a7              ADR      r1,|L12.928|
000104  2001              MOVS     r0,#1
000106  f7fffffe          BL       Display_Centered
;;;3169               STATE_EnterState(STATE_STANDBY);
00010a  e8bd41fc          POP      {r2-r8,lr}
00010e  2001              MOVS     r0,#1
000110  e001              B        |L12.278|
                  |L12.274|
000112  e04a              B        |L12.426|
                  |L12.276|
000114  e02b              B        |L12.366|
                  |L12.278|
000116  f7ffbffe          B.W      STATE_EnterState
                  |L12.282|
00011a  20a9              MOVS     r0,#0xa9              ;3008
00011c  f7fffffe          BL       STATE_SwitchStep
000120  4ca3              LDR      r4,|L12.944|
000122  2308              MOVS     r3,#8                 ;3011
000124  2203              MOVS     r2,#3                 ;3011
000126  2110              MOVS     r1,#0x10              ;3011
000128  4620              MOV      r0,r4                 ;3011
00012a  f7fffffe          BL       gpio_init
00012e  2108              MOVS     r1,#8                 ;3011
000130  4620              MOV      r0,r4                 ;3011
000132  f7fffffe          BL       gpio_bit_set
000136  2100              MOVS     r1,#0                 ;3014
000138  2001              MOVS     r0,#1                 ;3014
00013a  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00013e  f7fffffe          BL       Clear_All_Lines
000142  a18e              ADR      r1,|L12.892|
000144  2000              MOVS     r0,#0                 ;3016
000146  f7fffffe          BL       Display_Centered
00014a  a19a              ADR      r1,|L12.948|
00014c  2001              MOVS     r0,#1                 ;3017
00014e  f7fffffe          BL       Display_Centered
000152  a19b              ADR      r1,|L12.960|
000154  2002              MOVS     r0,#2                 ;3018
000156  f7fffffe          BL       Display_Centered
00015a  2001              MOVS     r0,#1                 ;3021
00015c  9000              STR      r0,[sp,#0]            ;3021
00015e  9001              STR      r0,[sp,#4]            ;3021
000160  23b0              MOVS     r3,#0xb0              ;3021
000162  4a9a              LDR      r2,|L12.972|
000164  f44f617a          MOV      r1,#0xfa0             ;3021
000168  2008              MOVS     r0,#8                 ;3021
00016a  f7fffffe          BL       TIMER_AddTask
                  |L12.366|
;;;3170               break;
;;;3171   
;;;3172           default:
;;;3173               break;
;;;3174       }
;;;3175   }
00016e  e000              B        |L12.370|
                  |L12.368|
000170  e001              B        |L12.374|
                  |L12.370|
000172  e8bd81fc          POP      {r2-r8,pc}
                  |L12.374|
000176  f7fffffe          BL       Clear_All_Lines
00017a  a180              ADR      r1,|L12.892|
00017c  2000              MOVS     r0,#0                 ;3051
00017e  f7fffffe          BL       Display_Centered
000182  a184              ADR      r1,|L12.916|
000184  2001              MOVS     r0,#1                 ;3052
000186  f7fffffe          BL       Display_Centered
00018a  a191              ADR      r1,|L12.976|
00018c  2002              MOVS     r0,#2                 ;3053
00018e  f7fffffe          BL       Display_Centered
000192  2100              MOVS     r1,#0                 ;3054
000194  200b              MOVS     r0,#0xb               ;3054
000196  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00019a  2008              MOVS     r0,#8                 ;3055
00019c  f7fffffe          BL       TIMER_KillTask
0001a0  e8bd41fc          POP      {r2-r8,lr}            ;3056
0001a4  2001              MOVS     r0,#1                 ;3056
0001a6  f7ffbffe          B.W      STATE_EnterState
                  |L12.426|
0001aa  20a9              MOVS     r0,#0xa9              ;3062
0001ac  f7fffffe          BL       STATE_SwitchStep
0001b0  2008              MOVS     r0,#8                 ;3063
0001b2  f7fffffe          BL       TIMER_ResetTimer
0001b6  f8b40044          LDRH     r0,[r4,#0x44]         ;3066  ; dut_info
0001ba  f2a010f5          SUB      r0,r0,#0x1f5          ;3066
0001be  42b0              CMP      r0,r6                 ;3066
0001c0  d223              BCS      |L12.522|
0001c2  e002              B        |L12.458|
                  |L12.452|
0001c4  e03b              B        |L12.574|
                  |L12.454|
0001c6  e080              B        |L12.714|
                  |L12.456|
0001c8  e0b6              B        |L12.824|
                  |L12.458|
0001ca  222d              MOVS     r2,#0x2d              ;3069
0001cc  2100              MOVS     r1,#0                 ;3069
0001ce  4628              MOV      r0,r5                 ;3069
0001d0  f7fffffe          BL       timer_channel_output_pulse_value_config
0001d4  2101              MOVS     r1,#1                 ;3069
0001d6  4628              MOV      r0,r5                 ;3069
0001d8  f7fffffe          BL       timer_primary_output_config
0001dc  4638              MOV      r0,r7                 ;3070
0001de  f7fffffe          BL       Delayms
0001e2  f7fffffe          BL       Clear_All_Lines
0001e6  a165              ADR      r1,|L12.892|
0001e8  2000              MOVS     r0,#0                 ;3072
0001ea  f7fffffe          BL       Display_Centered
0001ee  a17b              ADR      r1,|L12.988|
0001f0  2001              MOVS     r0,#1                 ;3073
0001f2  f7fffffe          BL       Display_Centered
0001f6  a17d              ADR      r1,|L12.1004|
0001f8  2002              MOVS     r0,#2                 ;3074
0001fa  f7fffffe          BL       Display_Centered
0001fe  e8bd41fc          POP      {r2-r8,lr}            ;3077
000202  2103              MOVS     r1,#3                 ;3077
000204  20eb              MOVS     r0,#0xeb              ;3077
000206  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L12.522|
00020a  f7fffffe          BL       Clear_All_Lines
00020e  a15b              ADR      r1,|L12.892|
000210  2000              MOVS     r0,#0                 ;3082
000212  f7fffffe          BL       Display_Centered
000216  a177              ADR      r1,|L12.1012|
000218  2001              MOVS     r0,#1                 ;3083
00021a  f7fffffe          BL       Display_Centered
00021e  a16c              ADR      r1,|L12.976|
000220  2002              MOVS     r0,#2                 ;3084
000222  f7fffffe          BL       Display_Centered
000226  2100              MOVS     r1,#0                 ;3085
000228  200b              MOVS     r0,#0xb               ;3085
00022a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00022e  2008              MOVS     r0,#8                 ;3086
000230  f7fffffe          BL       TIMER_KillTask
000234  e8bd41fc          POP      {r2-r8,lr}            ;3087
000238  2001              MOVS     r0,#1                 ;3087
00023a  f7ffbffe          B.W      STATE_EnterState
                  |L12.574|
00023e  20a9              MOVS     r0,#0xa9              ;3093
000240  f7fffffe          BL       STATE_SwitchStep
000244  2008              MOVS     r0,#8                 ;3094
000246  f7fffffe          BL       TIMER_ResetTimer
00024a  f8b40044          LDRH     r0,[r4,#0x44]         ;3097  ; dut_info
00024e  f6a010c5          SUB      r0,r0,#0x9c5          ;3097
000252  42b0              CMP      r0,r6                 ;3097
000254  d21f              BCS      |L12.662|
000256  224b              MOVS     r2,#0x4b              ;3100
000258  2100              MOVS     r1,#0                 ;3100
00025a  4628              MOV      r0,r5                 ;3100
00025c  f7fffffe          BL       timer_channel_output_pulse_value_config
000260  2101              MOVS     r1,#1                 ;3100
000262  4628              MOV      r0,r5                 ;3100
000264  f7fffffe          BL       timer_primary_output_config
000268  4638              MOV      r0,r7                 ;3101
00026a  f7fffffe          BL       Delayms
00026e  f7fffffe          BL       Clear_All_Lines
000272  a142              ADR      r1,|L12.892|
000274  2000              MOVS     r0,#0                 ;3103
000276  f7fffffe          BL       Display_Centered
00027a  a158              ADR      r1,|L12.988|
00027c  2001              MOVS     r0,#1                 ;3104
00027e  f7fffffe          BL       Display_Centered
000282  a15e              ADR      r1,|L12.1020|
000284  2002              MOVS     r0,#2                 ;3105
000286  f7fffffe          BL       Display_Centered
00028a  e8bd41fc          POP      {r2-r8,lr}            ;3108
00028e  2103              MOVS     r1,#3                 ;3108
000290  20eb              MOVS     r0,#0xeb              ;3108
000292  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L12.662|
000296  f7fffffe          BL       Clear_All_Lines
00029a  a138              ADR      r1,|L12.892|
00029c  2000              MOVS     r0,#0                 ;3113
00029e  f7fffffe          BL       Display_Centered
0002a2  a158              ADR      r1,|L12.1028|
0002a4  2001              MOVS     r0,#1                 ;3114
0002a6  f7fffffe          BL       Display_Centered
0002aa  a149              ADR      r1,|L12.976|
0002ac  2002              MOVS     r0,#2                 ;3115
0002ae  f7fffffe          BL       Display_Centered
0002b2  2100              MOVS     r1,#0                 ;3116
0002b4  200b              MOVS     r0,#0xb               ;3116
0002b6  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0002ba  2008              MOVS     r0,#8                 ;3117
0002bc  f7fffffe          BL       TIMER_KillTask
0002c0  e8bd41fc          POP      {r2-r8,lr}            ;3118
0002c4  2001              MOVS     r0,#1                 ;3118
0002c6  f7ffbffe          B.W      STATE_EnterState
                  |L12.714|
0002ca  2008              MOVS     r0,#8                 ;3124
0002cc  f7fffffe          BL       TIMER_ResetTimer
0002d0  f8b40044          LDRH     r0,[r4,#0x44]         ;3127  ; dut_info
0002d4  f5a05088          SUB      r0,r0,#0x1100         ;3127
0002d8  3895              SUBS     r0,r0,#0x95           ;3127
0002da  42b0              CMP      r0,r6                 ;3127
0002dc  d212              BCS      |L12.772|
0002de  f7fffffe          BL       Clear_All_Lines
0002e2  a126              ADR      r1,|L12.892|
0002e4  2000              MOVS     r0,#0                 ;3131
0002e6  f7fffffe          BL       Display_Centered
0002ea  a13c              ADR      r1,|L12.988|
0002ec  2001              MOVS     r0,#1                 ;3132
0002ee  f7fffffe          BL       Display_Centered
0002f2  a146              ADR      r1,|L12.1036|
0002f4  2002              MOVS     r0,#2                 ;3133
0002f6  f7fffffe          BL       Display_Centered
0002fa  e8bd41fc          POP      {r2-r8,lr}            ;3134
0002fe  20af              MOVS     r0,#0xaf              ;3134
000300  f7ffbffe          B.W      STATE_SwitchStep
                  |L12.772|
000304  f7fffffe          BL       Clear_All_Lines
000308  a11c              ADR      r1,|L12.892|
00030a  2000              MOVS     r0,#0                 ;3139
00030c  f7fffffe          BL       Display_Centered
000310  a140              ADR      r1,|L12.1044|
000312  2001              MOVS     r0,#1                 ;3140
000314  f7fffffe          BL       Display_Centered
000318  a12d              ADR      r1,|L12.976|
00031a  2002              MOVS     r0,#2                 ;3141
00031c  f7fffffe          BL       Display_Centered
000320  2100              MOVS     r1,#0                 ;3142
000322  200b              MOVS     r0,#0xb               ;3142
000324  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000328  2008              MOVS     r0,#8                 ;3143
00032a  f7fffffe          BL       TIMER_KillTask
00032e  e8bd41fc          POP      {r2-r8,lr}            ;3144
000332  2001              MOVS     r0,#1                 ;3144
000334  f7ffbffe          B.W      STATE_EnterState
                  |L12.824|
000338  2008              MOVS     r0,#8                 ;3150
00033a  f7fffffe          BL       TIMER_KillTask
00033e  f7fffffe          BL       AVO_PIN_Reset
000342  f7fffffe          BL       Clear_All_Lines
000346  a10d              ADR      r1,|L12.892|
000348  2000              MOVS     r0,#0                 ;3153
00034a  f7fffffe          BL       Display_Centered
00034e  a133              ADR      r1,|L12.1052|
000350  2001              MOVS     r0,#1                 ;3154
000352  f7fffffe          BL       Display_Centered
000356  2001              MOVS     r0,#1                 ;3155
000358  f7fffffe          BL       STATE_EnterState
00035c  2000              MOVS     r0,#0                 ;3156
00035e  f7fffffe          BL       DAC0_output
000362  e8bd41fc          POP      {r2-r8,lr}            ;3157
000366  2101              MOVS     r1,#1                 ;3157
000368  200b              MOVS     r0,#0xb               ;3157
00036a  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
;;;3176   
                          ENDP

00036e  0000              DCW      0x0000
                  |L12.880|
                          DCD      ||.data||+0x6
                  |L12.884|
                          DCD      0x40000c00
                  |L12.888|
                          DCD      dut_info
                  |L12.892|
00037c  44455241          DCB      "DERAILLEUR",0
000380  494c4c45
000384  555200  
000387  00                DCB      0
                  |L12.904|
000388  54657374          DCB      "Testing",0
00038c  696e6700
                  |L12.912|
                          DCD      measure
                  |L12.916|
000394  56434300          DCB      "VCC",0
                  |L12.920|
000398  4e6f726d          DCB      "Normal",0
00039c  616c00  
00039f  00                DCB      0
                  |L12.928|
0003a0  54657374          DCB      "Test Timeout",0
0003a4  2054696d
0003a8  656f7574
0003ac  00      
0003ad  00                DCB      0
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L12.944|
                          DCD      0x40011000
                  |L12.948|
0003b4  41564f20          DCB      "AVO METER",0
0003b8  4d455445
0003bc  5200    
0003be  00                DCB      0
0003bf  00                DCB      0
                  |L12.960|
0003c0  4d656173          DCB      "Measurement",0
0003c4  7572656d
0003c8  656e7400
                  |L12.972|
                          DCD      STATE_SwitchStep
                  |L12.976|
0003d0  41626e6f          DCB      "Abnormal",0
0003d4  726d616c
0003d8  00      
0003d9  00                DCB      0
0003da  00                DCB      0
0003db  00                DCB      0
                  |L12.988|
0003dc  41646a75          DCB      "Adjusting DAC",0
0003e0  7374696e
0003e4  67204441
0003e8  4300    
0003ea  00                DCB      0
0003eb  00                DCB      0
                  |L12.1004|
0003ec  46697273          DCB      "First",0
0003f0  7400    
0003f2  00                DCB      0
0003f3  00                DCB      0
                  |L12.1012|
0003f4  53494731          DCB      "SIG1",0
0003f8  00      
0003f9  00                DCB      0
0003fa  00                DCB      0
0003fb  00                DCB      0
                  |L12.1020|
0003fc  5365636f          DCB      "Second",0
000400  6e6400  
000403  00                DCB      0
                  |L12.1028|
000404  53494732          DCB      "SIG2",0
000408  00      
000409  00                DCB      0
00040a  00                DCB      0
00040b  00                DCB      0
                  |L12.1036|
00040c  54686972          DCB      "Third",0
000410  6400    
000412  00                DCB      0
000413  00                DCB      0
                  |L12.1044|
000414  53494733          DCB      "SIG3",0
000418  00      
000419  00                DCB      0
00041a  00                DCB      0
00041b  00                DCB      0
                  |L12.1052|
00041c  54657374          DCB      "Test Pass",0
000420  20506173
000424  7300    
000426  00                DCB      0
000427  00                DCB      0

                          AREA ||i.STEP_Process_DerailleurUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_DerailleurUartTest PROC
;;;1495   // 电子变速测试
;;;1496   void STEP_Process_DerailleurUartTest(void)   
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1497   {
;;;1498       switch (stateCB.step)
000004  48db              LDR      r0,|L13.884|
;;;1499       {
;;;1500           case STEP_NULL: // 空步骤
;;;1501               break;
;;;1502   
;;;1503           case STEP_DERAILLEUR_UART_TEST_ENTRY: // 入口步骤
;;;1504               STATE_SwitchStep(STEP_DERAILLEUR_UART_TEST_VCC);
;;;1505               UART_DRIVE_InitSelect(dut_info.uart_baudRate);
;;;1506               DUT_PROTOCOL_Init();
;;;1507               Clear_All_Lines();
;;;1508               Display_Centered(0, "DERAILLEUR");
;;;1509               Display_Centered(1, "Testing");
;;;1510   
;;;1511               // 测试引脚复位
;;;1512               AVO_PIN_Reset();
;;;1513               break;
;;;1514   
;;;1515           case STEP_DERAILLEUR_UART_TEST_WAIT_RESPONSE: // 等待仪表或万用表回应
;;;1516               break;
;;;1517   
;;;1518           case STEP_DERAILLEUR_UART_TEST_VCC: // 通知万用表测VCC
;;;1519               STATE_SwitchStep(STEP_DERAILLEUR_UART_TEST_WAIT_RESPONSE);
;;;1520   
;;;1521               // 打开VCC测试引脚
;;;1522               DERAILLEUR_VCC_TEST_EN_ON();
;;;1523   
;;;1524               // 通知万用表测电压
;;;1525               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1526               Clear_All_Lines();
;;;1527               Display_Centered(0, "DERAILLEUR");
;;;1528               Display_Centered(1, "AVO METER");
;;;1529               Display_Centered(2, "Measurement");
;;;1530   
;;;1531               // 添加超时
;;;1532               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;1533                             4000,
;;;1534                             STATE_SwitchStep,
;;;1535                             STEP_DERAILLEUR_UART_TEST_COMMUNICATION_TIME_OUT,
;;;1536                             1,
;;;1537                             ACTION_MODE_ADD_TO_QUEUE);
;;;1538               break;
;;;1539   
;;;1540           // 比对VCC
;;;1541           case STEP_DERAILLEUR_UART_TEST_CHECK_VOLTAGE_VALUE:
;;;1542               STATE_SwitchStep(STEP_DERAILLEUR_UART_TEST_WAIT_RESPONSE);
;;;1543               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1544   
;;;1545               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;1546               {
;;;1547                   // 调整DAC输出,单位mv
;;;1548                   PWM_OUT1_PWM(FIRST_DAC);
000006  4ddc              LDR      r5,|L13.888|
000008  4cdc              LDR      r4,|L13.892|
00000a  8841              LDRH     r1,[r0,#2]            ;1498  ; stateCB
;;;1549                   Delayms(300);
00000c  f44f7796          MOV      r7,#0x12c
;;;1550                   Clear_All_Lines();
;;;1551                   Display_Centered(0, "DERAILLEUR");
;;;1552                   Display_Centered(1, "VCC");
;;;1553                   Display_Centered(2, "Normal");
;;;1554   
;;;1555                   // 获取刹把AD值
;;;1556                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_GET_THROTTLE_BRAKE_AD, 3);
;;;1557               }
;;;1558               // VCC不正常，则上报
;;;1559               else
;;;1560               {
;;;1561                   Clear_All_Lines();
;;;1562                   Display_Centered(0, "DERAILLEUR");
;;;1563                   Display_Centered(1, "VCC");
;;;1564                   Display_Centered(2, "Abnormal");
;;;1565                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1566                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1567                   STATE_EnterState(STATE_STANDBY);
;;;1568               }
;;;1569               break;
;;;1570   
;;;1571           // 在这进行判断数值是否正常，第一次
;;;1572           case STEP_DERAILLEUR_UART_TEST_CHECK_DAC1_VALUE:
;;;1573               STATE_SwitchStep(STEP_DERAILLEUR_UART_TEST_WAIT_RESPONSE);
;;;1574               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1575   
;;;1576               // 处理DAC1数值检查逻辑
;;;1577               if ((dut_info.derailleurAd > FIRST_DAC - ERROR_DAC) && (dut_info.derailleurAd < FIRST_DAC + ERROR_DAC))
000010  f24036e7          MOV      r6,#0x3e7
000014  2951              CMP      r1,#0x51              ;1498
000016  d07c              BEQ      |L13.274|
000018  dc55              BGT      |L13.198|
00001a  294e              CMP      r1,#0x4e              ;1498
00001c  d07a              BEQ      |L13.276|
00001e  dc19              BGT      |L13.84|
000020  2900              CMP      r1,#0                 ;1498
000022  d077              BEQ      |L13.276|
000024  294d              CMP      r1,#0x4d              ;1498
000026  d175              BNE      |L13.276|
000028  204f              MOVS     r0,#0x4f              ;1504
00002a  f7fffffe          BL       STATE_SwitchStep
00002e  6a20              LDR      r0,[r4,#0x20]         ;1505  ; dut_info
000030  f7fffffe          BL       UART_DRIVE_InitSelect
000034  f7fffffe          BL       DUT_PROTOCOL_Init
000038  f7fffffe          BL       Clear_All_Lines
00003c  a1d0              ADR      r1,|L13.896|
00003e  2000              MOVS     r0,#0                 ;1508
000040  f7fffffe          BL       Display_Centered
000044  a1d1              ADR      r1,|L13.908|
000046  2001              MOVS     r0,#1                 ;1509
000048  f7fffffe          BL       Display_Centered
00004c  e8bd41fc          POP      {r2-r8,lr}            ;1512
000050  f7ffbffe          B.W      AVO_PIN_Reset
                  |L13.84|
000054  294f              CMP      r1,#0x4f              ;1498
000056  d062              BEQ      |L13.286|
000058  4ece              LDR      r6,|L13.916|
00005a  2950              CMP      r1,#0x50              ;1498
00005c  d15a              BNE      |L13.276|
00005e  204e              MOVS     r0,#0x4e              ;1542
000060  f7fffffe          BL       STATE_SwitchStep
000064  2008              MOVS     r0,#8                 ;1543
000066  f7fffffe          BL       TIMER_ResetTimer
00006a  6ba0              LDR      r0,[r4,#0x38]         ;1545  ; dut_info
00006c  f7fffffe          BL       __aeabi_ui2f
000070  6831              LDR      r1,[r6,#0]            ;1545  ; measure
000072  f7fffffe          BL       __aeabi_cfcmple
000076  d27d              BCS      |L13.372|
000078  6b60              LDR      r0,[r4,#0x34]         ;1545  ; dut_info
00007a  f7fffffe          BL       __aeabi_ui2f
00007e  6831              LDR      r1,[r6,#0]            ;1545  ; measure
000080  f7fffffe          BL       __aeabi_cfrcmple
000084  d279              BCS      |L13.378|
000086  220f              MOVS     r2,#0xf               ;1548
000088  2100              MOVS     r1,#0                 ;1548
00008a  4628              MOV      r0,r5                 ;1548
00008c  f7fffffe          BL       timer_channel_output_pulse_value_config
000090  2101              MOVS     r1,#1                 ;1548
000092  4628              MOV      r0,r5                 ;1548
000094  f7fffffe          BL       timer_primary_output_config
000098  4638              MOV      r0,r7                 ;1549
00009a  f7fffffe          BL       Delayms
00009e  f7fffffe          BL       Clear_All_Lines
0000a2  a1b7              ADR      r1,|L13.896|
0000a4  2000              MOVS     r0,#0                 ;1551
0000a6  f7fffffe          BL       Display_Centered
0000aa  a1bb              ADR      r1,|L13.920|
0000ac  2001              MOVS     r0,#1                 ;1552
0000ae  f7fffffe          BL       Display_Centered
0000b2  a1ba              ADR      r1,|L13.924|
0000b4  2002              MOVS     r0,#2                 ;1553
0000b6  f7fffffe          BL       Display_Centered
0000ba  e8bd41fc          POP      {r2-r8,lr}            ;1556
0000be  2103              MOVS     r1,#3                 ;1556
0000c0  20eb              MOVS     r0,#0xeb              ;1556
0000c2  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L13.198|
0000c6  2952              CMP      r1,#0x52              ;1498
0000c8  d07e              BEQ      |L13.456|
0000ca  2953              CMP      r1,#0x53              ;1498
0000cc  d07d              BEQ      |L13.458|
0000ce  2954              CMP      r1,#0x54              ;1498
0000d0  d07c              BEQ      |L13.460|
0000d2  2955              CMP      r1,#0x55              ;1498
0000d4  d14d              BNE      |L13.370|
;;;1578               {
;;;1579                   // 调整DAC输出,单位mv
;;;1580                   PWM_OUT1_PWM(SECOND_DAC);
;;;1581                   Delayms(300);
;;;1582                   Clear_All_Lines();
;;;1583                   Display_Centered(0, "DERAILLEUR");
;;;1584                   Display_Centered(1, "Adjusting DAC");
;;;1585                   Display_Centered(2, "First");
;;;1586   
;;;1587                   // 获取刹把AD值
;;;1588                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_GET_THROTTLE_BRAKE_AD, 3);
;;;1589               }
;;;1590               else
;;;1591               {
;;;1592                   Clear_All_Lines();
;;;1593                   Display_Centered(0, "DERAILLEUR");
;;;1594                   Display_Centered(1, "SIG1");
;;;1595                   Display_Centered(2, "Abnormal");
;;;1596                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1597                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1598                   STATE_EnterState(STATE_STANDBY);
;;;1599               }
;;;1600               break;
;;;1601   
;;;1602           // 在这进行判断数值是否正常，第二次
;;;1603           case STEP_DERAILLEUR_UART_TEST_CHECK_DAC3_VALUE:
;;;1604               STATE_SwitchStep(STEP_DERAILLEUR_UART_TEST_WAIT_RESPONSE);
;;;1605               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1606   
;;;1607               // 处理DAC5数值检查逻辑
;;;1608               if ((dut_info.derailleurAd > SECOND_DAC - ERROR_DAC) && (dut_info.derailleurAd < SECOND_DAC + ERROR_DAC))
;;;1609               {
;;;1610                   // 调整DAC输出,单位mv
;;;1611                   PWM_OUT1_PWM(THIRD_DAC);
;;;1612                   Delayms(300);
;;;1613                   Clear_All_Lines();
;;;1614                   Display_Centered(0, "DERAILLEUR");
;;;1615                   Display_Centered(1, "Adjusting DAC");
;;;1616                   Display_Centered(2, "Second");
;;;1617   
;;;1618                   // 获取刹把AD值
;;;1619                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_GET_THROTTLE_BRAKE_AD, 3);
;;;1620               }
;;;1621               else
;;;1622               {
;;;1623                   Clear_All_Lines();
;;;1624                   Display_Centered(0, "DERAILLEUR");
;;;1625                   Display_Centered(1, "SIG2");
;;;1626                   Display_Centered(2, "Abnormal");
;;;1627                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1628                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1629                   STATE_EnterState(STATE_STANDBY);
;;;1630               }
;;;1631               break;
;;;1632   
;;;1633           // 在这进行判断数值是否正常，第三次
;;;1634           case STEP_DERAILLEUR_UART_TEST_CHECK_DAC5_VALUE:
;;;1635               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1636   
;;;1637               // 处理DAC5数值检查逻辑
;;;1638               if ((dut_info.derailleurAd > THIRD_DAC - ERROR_DAC) && (dut_info.derailleurAd < THIRD_DAC + ERROR_DAC))
;;;1639               {
;;;1640                   // 3次都正常则测试通过
;;;1641                   Clear_All_Lines();
;;;1642                   Display_Centered(0, "DERAILLEUR");
;;;1643                   Display_Centered(1, "Adjusting DAC");
;;;1644                   Display_Centered(2, "Third");
;;;1645                   STATE_SwitchStep(STEP_DERAILLEUR_UART_TEST_COMPLETE);
;;;1646               }
;;;1647               else
;;;1648               {
;;;1649                   Clear_All_Lines();
;;;1650                   Display_Centered(0, "DERAILLEUR");
;;;1651                   Display_Centered(1, "SIG3");
;;;1652                   Display_Centered(2, "Abnormal");
;;;1653                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1654                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1655                   STATE_EnterState(STATE_STANDBY);
;;;1656               }
;;;1657               break;
;;;1658   
;;;1659           // 刹把测试完成步骤，关闭DAC输出调整为0，然后上报结果
;;;1660           case STEP_DERAILLEUR_UART_TEST_COMPLETE:
;;;1661               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1662               AVO_PIN_Reset();
;;;1663               Clear_All_Lines();
;;;1664               Display_Centered(0, "DERAILLEUR");
;;;1665               Display_Centered(1, "Test Pass");
;;;1666               STATE_EnterState(STATE_STANDBY);
;;;1667               DAC0_output(0);
;;;1668               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;1669               break;
;;;1670   
;;;1671           // 通信超时
;;;1672           case STEP_DERAILLEUR_UART_TEST_COMMUNICATION_TIME_OUT:
;;;1673               PWM_OUT1_PWM(0);
0000d6  2200              MOVS     r2,#0
0000d8  4611              MOV      r1,r2
0000da  4628              MOV      r0,r5
0000dc  f7fffffe          BL       timer_channel_output_pulse_value_config
0000e0  2101              MOVS     r1,#1
0000e2  4628              MOV      r0,r5
0000e4  f7fffffe          BL       timer_primary_output_config
;;;1674               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
0000e8  2100              MOVS     r1,#0
0000ea  200b              MOVS     r0,#0xb
0000ec  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;1675               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0000f0  2008              MOVS     r0,#8
0000f2  f7fffffe          BL       TIMER_KillTask
;;;1676               AVO_PIN_Reset();
0000f6  f7fffffe          BL       AVO_PIN_Reset
;;;1677               Clear_All_Lines();
0000fa  f7fffffe          BL       Clear_All_Lines
;;;1678               Display_Centered(0, "DERAILLEUR");
0000fe  a1a0              ADR      r1,|L13.896|
000100  2000              MOVS     r0,#0
000102  f7fffffe          BL       Display_Centered
;;;1679               Display_Centered(1, "Test Timeout");
000106  a1a7              ADR      r1,|L13.932|
000108  2001              MOVS     r0,#1
00010a  f7fffffe          BL       Display_Centered
;;;1680               STATE_EnterState(STATE_STANDBY);
00010e  2001              MOVS     r0,#1
000110  e001              B        |L13.278|
                  |L13.274|
000112  e04c              B        |L13.430|
                  |L13.276|
000114  e02d              B        |L13.370|
                  |L13.278|
000116  e8bd41fc          POP      {r2-r8,lr}
00011a  f7ffbffe          B.W      STATE_EnterState
                  |L13.286|
00011e  204e              MOVS     r0,#0x4e              ;1519
000120  f7fffffe          BL       STATE_SwitchStep
000124  4ca3              LDR      r4,|L13.948|
000126  2308              MOVS     r3,#8                 ;1522
000128  2203              MOVS     r2,#3                 ;1522
00012a  2110              MOVS     r1,#0x10              ;1522
00012c  4620              MOV      r0,r4                 ;1522
00012e  f7fffffe          BL       gpio_init
000132  2108              MOVS     r1,#8                 ;1522
000134  4620              MOV      r0,r4                 ;1522
000136  f7fffffe          BL       gpio_bit_set
00013a  2100              MOVS     r1,#0                 ;1525
00013c  2001              MOVS     r0,#1                 ;1525
00013e  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000142  f7fffffe          BL       Clear_All_Lines
000146  a18e              ADR      r1,|L13.896|
000148  2000              MOVS     r0,#0                 ;1527
00014a  f7fffffe          BL       Display_Centered
00014e  a19a              ADR      r1,|L13.952|
000150  2001              MOVS     r0,#1                 ;1528
000152  f7fffffe          BL       Display_Centered
000156  a19b              ADR      r1,|L13.964|
000158  2002              MOVS     r0,#2                 ;1529
00015a  f7fffffe          BL       Display_Centered
00015e  2001              MOVS     r0,#1                 ;1532
000160  9000              STR      r0,[sp,#0]            ;1532
000162  9001              STR      r0,[sp,#4]            ;1532
000164  2355              MOVS     r3,#0x55              ;1532
000166  4a9a              LDR      r2,|L13.976|
000168  f44f617a          MOV      r1,#0xfa0             ;1532
00016c  2008              MOVS     r0,#8                 ;1532
00016e  f7fffffe          BL       TIMER_AddTask
                  |L13.370|
;;;1681               break;
;;;1682   
;;;1683           default:
;;;1684               break;
;;;1685       }
;;;1686   }
000172  e000              B        |L13.374|
                  |L13.372|
000174  e001              B        |L13.378|
                  |L13.374|
000176  e8bd81fc          POP      {r2-r8,pc}
                  |L13.378|
00017a  f7fffffe          BL       Clear_All_Lines
00017e  a180              ADR      r1,|L13.896|
000180  2000              MOVS     r0,#0                 ;1562
000182  f7fffffe          BL       Display_Centered
000186  a184              ADR      r1,|L13.920|
000188  2001              MOVS     r0,#1                 ;1563
00018a  f7fffffe          BL       Display_Centered
00018e  a191              ADR      r1,|L13.980|
000190  2002              MOVS     r0,#2                 ;1564
000192  f7fffffe          BL       Display_Centered
000196  2100              MOVS     r1,#0                 ;1565
000198  200b              MOVS     r0,#0xb               ;1565
00019a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00019e  2008              MOVS     r0,#8                 ;1566
0001a0  f7fffffe          BL       TIMER_KillTask
0001a4  e8bd41fc          POP      {r2-r8,lr}            ;1567
0001a8  2001              MOVS     r0,#1                 ;1567
0001aa  f7ffbffe          B.W      STATE_EnterState
                  |L13.430|
0001ae  204e              MOVS     r0,#0x4e              ;1573
0001b0  f7fffffe          BL       STATE_SwitchStep
0001b4  2008              MOVS     r0,#8                 ;1574
0001b6  f7fffffe          BL       TIMER_ResetTimer
0001ba  f8b40044          LDRH     r0,[r4,#0x44]         ;1577  ; dut_info
0001be  f2a010f5          SUB      r0,r0,#0x1f5          ;1577
0001c2  42b0              CMP      r0,r6                 ;1577
0001c4  d223              BCS      |L13.526|
0001c6  e002              B        |L13.462|
                  |L13.456|
0001c8  e03b              B        |L13.578|
                  |L13.458|
0001ca  e080              B        |L13.718|
                  |L13.460|
0001cc  e0b6              B        |L13.828|
                  |L13.462|
0001ce  222d              MOVS     r2,#0x2d              ;1580
0001d0  2100              MOVS     r1,#0                 ;1580
0001d2  4628              MOV      r0,r5                 ;1580
0001d4  f7fffffe          BL       timer_channel_output_pulse_value_config
0001d8  2101              MOVS     r1,#1                 ;1580
0001da  4628              MOV      r0,r5                 ;1580
0001dc  f7fffffe          BL       timer_primary_output_config
0001e0  4638              MOV      r0,r7                 ;1581
0001e2  f7fffffe          BL       Delayms
0001e6  f7fffffe          BL       Clear_All_Lines
0001ea  a165              ADR      r1,|L13.896|
0001ec  2000              MOVS     r0,#0                 ;1583
0001ee  f7fffffe          BL       Display_Centered
0001f2  a17b              ADR      r1,|L13.992|
0001f4  2001              MOVS     r0,#1                 ;1584
0001f6  f7fffffe          BL       Display_Centered
0001fa  a17d              ADR      r1,|L13.1008|
0001fc  2002              MOVS     r0,#2                 ;1585
0001fe  f7fffffe          BL       Display_Centered
000202  e8bd41fc          POP      {r2-r8,lr}            ;1588
000206  2103              MOVS     r1,#3                 ;1588
000208  20eb              MOVS     r0,#0xeb              ;1588
00020a  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L13.526|
00020e  f7fffffe          BL       Clear_All_Lines
000212  a15b              ADR      r1,|L13.896|
000214  2000              MOVS     r0,#0                 ;1593
000216  f7fffffe          BL       Display_Centered
00021a  a177              ADR      r1,|L13.1016|
00021c  2001              MOVS     r0,#1                 ;1594
00021e  f7fffffe          BL       Display_Centered
000222  a16c              ADR      r1,|L13.980|
000224  2002              MOVS     r0,#2                 ;1595
000226  f7fffffe          BL       Display_Centered
00022a  2100              MOVS     r1,#0                 ;1596
00022c  200b              MOVS     r0,#0xb               ;1596
00022e  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000232  2008              MOVS     r0,#8                 ;1597
000234  f7fffffe          BL       TIMER_KillTask
000238  e8bd41fc          POP      {r2-r8,lr}            ;1598
00023c  2001              MOVS     r0,#1                 ;1598
00023e  f7ffbffe          B.W      STATE_EnterState
                  |L13.578|
000242  204e              MOVS     r0,#0x4e              ;1604
000244  f7fffffe          BL       STATE_SwitchStep
000248  2008              MOVS     r0,#8                 ;1605
00024a  f7fffffe          BL       TIMER_ResetTimer
00024e  f8b40044          LDRH     r0,[r4,#0x44]         ;1608  ; dut_info
000252  f6a010c5          SUB      r0,r0,#0x9c5          ;1608
000256  42b0              CMP      r0,r6                 ;1608
000258  d21f              BCS      |L13.666|
00025a  224b              MOVS     r2,#0x4b              ;1611
00025c  2100              MOVS     r1,#0                 ;1611
00025e  4628              MOV      r0,r5                 ;1611
000260  f7fffffe          BL       timer_channel_output_pulse_value_config
000264  2101              MOVS     r1,#1                 ;1611
000266  4628              MOV      r0,r5                 ;1611
000268  f7fffffe          BL       timer_primary_output_config
00026c  4638              MOV      r0,r7                 ;1612
00026e  f7fffffe          BL       Delayms
000272  f7fffffe          BL       Clear_All_Lines
000276  a142              ADR      r1,|L13.896|
000278  2000              MOVS     r0,#0                 ;1614
00027a  f7fffffe          BL       Display_Centered
00027e  a158              ADR      r1,|L13.992|
000280  2001              MOVS     r0,#1                 ;1615
000282  f7fffffe          BL       Display_Centered
000286  a15e              ADR      r1,|L13.1024|
000288  2002              MOVS     r0,#2                 ;1616
00028a  f7fffffe          BL       Display_Centered
00028e  e8bd41fc          POP      {r2-r8,lr}            ;1619
000292  2103              MOVS     r1,#3                 ;1619
000294  20eb              MOVS     r0,#0xeb              ;1619
000296  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L13.666|
00029a  f7fffffe          BL       Clear_All_Lines
00029e  a138              ADR      r1,|L13.896|
0002a0  2000              MOVS     r0,#0                 ;1624
0002a2  f7fffffe          BL       Display_Centered
0002a6  a158              ADR      r1,|L13.1032|
0002a8  2001              MOVS     r0,#1                 ;1625
0002aa  f7fffffe          BL       Display_Centered
0002ae  a149              ADR      r1,|L13.980|
0002b0  2002              MOVS     r0,#2                 ;1626
0002b2  f7fffffe          BL       Display_Centered
0002b6  2100              MOVS     r1,#0                 ;1627
0002b8  200b              MOVS     r0,#0xb               ;1627
0002ba  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0002be  2008              MOVS     r0,#8                 ;1628
0002c0  f7fffffe          BL       TIMER_KillTask
0002c4  e8bd41fc          POP      {r2-r8,lr}            ;1629
0002c8  2001              MOVS     r0,#1                 ;1629
0002ca  f7ffbffe          B.W      STATE_EnterState
                  |L13.718|
0002ce  2008              MOVS     r0,#8                 ;1635
0002d0  f7fffffe          BL       TIMER_ResetTimer
0002d4  f8b40044          LDRH     r0,[r4,#0x44]         ;1638  ; dut_info
0002d8  f5a05088          SUB      r0,r0,#0x1100         ;1638
0002dc  3895              SUBS     r0,r0,#0x95           ;1638
0002de  42b0              CMP      r0,r6                 ;1638
0002e0  d212              BCS      |L13.776|
0002e2  f7fffffe          BL       Clear_All_Lines
0002e6  a126              ADR      r1,|L13.896|
0002e8  2000              MOVS     r0,#0                 ;1642
0002ea  f7fffffe          BL       Display_Centered
0002ee  a13c              ADR      r1,|L13.992|
0002f0  2001              MOVS     r0,#1                 ;1643
0002f2  f7fffffe          BL       Display_Centered
0002f6  a146              ADR      r1,|L13.1040|
0002f8  2002              MOVS     r0,#2                 ;1644
0002fa  f7fffffe          BL       Display_Centered
0002fe  e8bd41fc          POP      {r2-r8,lr}            ;1645
000302  2054              MOVS     r0,#0x54              ;1645
000304  f7ffbffe          B.W      STATE_SwitchStep
                  |L13.776|
000308  f7fffffe          BL       Clear_All_Lines
00030c  a11c              ADR      r1,|L13.896|
00030e  2000              MOVS     r0,#0                 ;1650
000310  f7fffffe          BL       Display_Centered
000314  a140              ADR      r1,|L13.1048|
000316  2001              MOVS     r0,#1                 ;1651
000318  f7fffffe          BL       Display_Centered
00031c  a12d              ADR      r1,|L13.980|
00031e  2002              MOVS     r0,#2                 ;1652
000320  f7fffffe          BL       Display_Centered
000324  2100              MOVS     r1,#0                 ;1653
000326  200b              MOVS     r0,#0xb               ;1653
000328  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00032c  2008              MOVS     r0,#8                 ;1654
00032e  f7fffffe          BL       TIMER_KillTask
000332  e8bd41fc          POP      {r2-r8,lr}            ;1655
000336  2001              MOVS     r0,#1                 ;1655
000338  f7ffbffe          B.W      STATE_EnterState
                  |L13.828|
00033c  2008              MOVS     r0,#8                 ;1661
00033e  f7fffffe          BL       TIMER_KillTask
000342  f7fffffe          BL       AVO_PIN_Reset
000346  f7fffffe          BL       Clear_All_Lines
00034a  a10d              ADR      r1,|L13.896|
00034c  2000              MOVS     r0,#0                 ;1664
00034e  f7fffffe          BL       Display_Centered
000352  a133              ADR      r1,|L13.1056|
000354  2001              MOVS     r0,#1                 ;1665
000356  f7fffffe          BL       Display_Centered
00035a  2001              MOVS     r0,#1                 ;1666
00035c  f7fffffe          BL       STATE_EnterState
000360  2000              MOVS     r0,#0                 ;1667
000362  f7fffffe          BL       DAC0_output
000366  e8bd41fc          POP      {r2-r8,lr}            ;1668
00036a  2101              MOVS     r1,#1                 ;1668
00036c  200b              MOVS     r0,#0xb               ;1668
00036e  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
;;;1687   
                          ENDP

000372  0000              DCW      0x0000
                  |L13.884|
                          DCD      ||.data||+0x6
                  |L13.888|
                          DCD      0x40000c00
                  |L13.892|
                          DCD      dut_info
                  |L13.896|
000380  44455241          DCB      "DERAILLEUR",0
000384  494c4c45
000388  555200  
00038b  00                DCB      0
                  |L13.908|
00038c  54657374          DCB      "Testing",0
000390  696e6700
                  |L13.916|
                          DCD      measure
                  |L13.920|
000398  56434300          DCB      "VCC",0
                  |L13.924|
00039c  4e6f726d          DCB      "Normal",0
0003a0  616c00  
0003a3  00                DCB      0
                  |L13.932|
0003a4  54657374          DCB      "Test Timeout",0
0003a8  2054696d
0003ac  656f7574
0003b0  00      
0003b1  00                DCB      0
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L13.948|
                          DCD      0x40011000
                  |L13.952|
0003b8  41564f20          DCB      "AVO METER",0
0003bc  4d455445
0003c0  5200    
0003c2  00                DCB      0
0003c3  00                DCB      0
                  |L13.964|
0003c4  4d656173          DCB      "Measurement",0
0003c8  7572656d
0003cc  656e7400
                  |L13.976|
                          DCD      STATE_SwitchStep
                  |L13.980|
0003d4  41626e6f          DCB      "Abnormal",0
0003d8  726d616c
0003dc  00      
0003dd  00                DCB      0
0003de  00                DCB      0
0003df  00                DCB      0
                  |L13.992|
0003e0  41646a75          DCB      "Adjusting DAC",0
0003e4  7374696e
0003e8  67204441
0003ec  4300    
0003ee  00                DCB      0
0003ef  00                DCB      0
                  |L13.1008|
0003f0  46697273          DCB      "First",0
0003f4  7400    
0003f6  00                DCB      0
0003f7  00                DCB      0
                  |L13.1016|
0003f8  53494731          DCB      "SIG1",0
0003fc  00      
0003fd  00                DCB      0
0003fe  00                DCB      0
0003ff  00                DCB      0
                  |L13.1024|
000400  5365636f          DCB      "Second",0
000404  6e6400  
000407  00                DCB      0
                  |L13.1032|
000408  53494732          DCB      "SIG2",0
00040c  00      
00040d  00                DCB      0
00040e  00                DCB      0
00040f  00                DCB      0
                  |L13.1040|
000410  54686972          DCB      "Third",0
000414  6400    
000416  00                DCB      0
000417  00                DCB      0
                  |L13.1048|
000418  53494733          DCB      "SIG3",0
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L13.1056|
000420  54657374          DCB      "Test Pass",0
000424  20506173
000428  7300    
00042a  00                DCB      0
00042b  00                DCB      0

                          AREA ||i.STEP_Process_HbeamCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_HbeamCanTest PROC
;;;2181   // 远光灯测试
;;;2182   void STEP_Process_HbeamCanTest(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;2183   {
;;;2184       switch (stateCB.step)
000004  48a6              LDR      r0,|L14.672|
;;;2185       {
;;;2186       case STEP_NULL: // 空步骤
;;;2187           break;
;;;2188   
;;;2189       case STEP_HBEAM_CAN_TEST_ENTRY: // 入口步骤
;;;2190           STATE_SwitchStep(STEP_HBEAM_CAN_TEST_NOTIFY_DUT);
;;;2191           IAP_CTRL_CAN_Init(dut_info.can_baudRate);
;;;2192           CAN_PROTOCOL1_Init();
;;;2193           light_cnt = 0;
;;;2194           headlight_cnt = 0;
;;;2195           Clear_All_Lines();
;;;2196           Display_Centered(0, "HBEAM");
;;;2197           Display_Centered(1, "Testing");
;;;2198   
;;;2199           // 测试引脚复位
;;;2200           AVO_PIN_Reset();
;;;2201           break;
;;;2202   
;;;2203       case STEP_HBEAM_CAN_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;2204           break;
;;;2205   
;;;2206       case STEP_HBEAM_CAN_TEST_NOTIFY_DUT: // 通知DUT打开远光灯步骤
;;;2207           STATE_SwitchStep(STEP_HBEAM_CAN_TEST_WAIT_RESPONSE);
;;;2208           DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 3, 1);
;;;2209   
;;;2210           // 添加超时
;;;2211           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;2212                         4000,
;;;2213                         STATE_SwitchStep,
;;;2214                         STEP_HBEAM_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;2215                         1,
;;;2216                         ACTION_MODE_ADD_TO_QUEUE);
;;;2217           break;
;;;2218   
;;;2219       case STEP_HBEAM_CAN_TEST_OPEN:      // 仪表打开远光灯成功
;;;2220           STATE_SwitchStep(STEP_HBEAM_CAN_TEST_WAIT_RESPONSE);
;;;2221           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2222   
;;;2223           // 打开VCC测试引脚
;;;2224           LED_HBEAM_TEST_EN_ON();
000006  4fa7              LDR      r7,|L14.676|
000008  4ca7              LDR      r4,|L14.680|
00000a  8840              LDRH     r0,[r0,#2]            ;2184  ; stateCB
00000c  f44f5680          MOV      r6,#0x1000
000010  287f              CMP      r0,#0x7f              ;2184
000012  d058              BEQ      |L14.198|
000014  dc1b              BGT      |L14.78|
000016  2800              CMP      r0,#0                 ;2184
000018  d017              BEQ      |L14.74|
00001a  287c              CMP      r0,#0x7c              ;2184
00001c  d038              BEQ      |L14.144|
00001e  287d              CMP      r0,#0x7d              ;2184
000020  d013              BEQ      |L14.74|
000022  287e              CMP      r0,#0x7e              ;2184
000024  d111              BNE      |L14.74|
000026  207d              MOVS     r0,#0x7d              ;2207
000028  f7fffffe          BL       STATE_SwitchStep
00002c  2201              MOVS     r2,#1                 ;2208
00002e  2103              MOVS     r1,#3                 ;2208
000030  20ec              MOVS     r0,#0xec              ;2208
000032  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000036  2001              MOVS     r0,#1                 ;2211
000038  9000              STR      r0,[sp,#0]            ;2211
00003a  9001              STR      r0,[sp,#4]            ;2211
00003c  2383              MOVS     r3,#0x83              ;2211
00003e  4a9b              LDR      r2,|L14.684|
000040  f44f617a          MOV      r1,#0xfa0             ;2211
000044  2008              MOVS     r0,#8                 ;2211
000046  f7fffffe          BL       TIMER_AddTask
                  |L14.74|
;;;2225   
;;;2226           // 通知万用表测VCC
;;;2227           AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;2228           Clear_All_Lines();
;;;2229           Display_Centered(0, "HBEAM");
;;;2230           Display_Centered(1, "AVO METER");
;;;2231           Display_Centered(2, "Measurement");
;;;2232           break;
;;;2233   
;;;2234       case STEP_HBEAM_CAN_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;2235           STATE_SwitchStep(STEP_HBEAM_CAN_TEST_WAIT_RESPONSE);
;;;2236           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2237   
;;;2238           // 比对万用表返回的数值
;;;2239           if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;2240           {
;;;2241               Clear_All_Lines();
;;;2242               Display_Centered(0, "HBEAM");
;;;2243               Display_Centered(1, "VCC");
;;;2244               Display_Centered(2, "Test Pass");
;;;2245   
;;;2246               // 打开GND测试引脚
;;;2247               LED_HBEAM_TEST_EN_ON();
;;;2248               LED_HBEAM_EN_ON();
;;;2249   
;;;2250               // 通知万用表测VCC
;;;2251               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;2252               Clear_All_Lines();
;;;2253               Display_Centered(0, "HBEAM");
;;;2254               Display_Centered(1, "AVO METER");
;;;2255               Display_Centered(2, "Measurement");
;;;2256           }
;;;2257           // 比对失败
;;;2258           else
;;;2259           {
;;;2260   #if DEBUG_ENABLE
;;;2261               Clear_All_Lines();
;;;2262               Display_Centered(0, "VCC Abnormal");
;;;2263               Display_YX_Format(1, 0, "%f", measure.result);
;;;2264               Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;2265               Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;2266   #endif
;;;2267               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2268               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2269           }
;;;2270           break;
;;;2271   
;;;2272       case STEP_HBEAM_CAN_TEST_CHECK_GND_VALUE: // 比对GND
;;;2273           STATE_SwitchStep(STEP_HBEAM_CAN_TEST_WAIT_RESPONSE);
;;;2274           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2275   
;;;2276           // 小于3V则GND导通测试通过
;;;2277           if (LIGHT_GND_VOLTAGE_VALUE > measure.result)
;;;2278           {
;;;2279               // 关闭远光灯
;;;2280               DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 3, 0);
;;;2281               Clear_All_Lines();
;;;2282               Display_Centered(0, "HBEAM");
;;;2283               Display_Centered(1, "GND");
;;;2284               Display_Centered(2, "Test Pass");
;;;2285           }
;;;2286           else
;;;2287           {
;;;2288   #if DEBUG_ENABLE
;;;2289               Clear_All_Lines();
;;;2290               Display_Centered(0, "HBEAM");
;;;2291               Display_Centered(1, "GND Abnormal");
;;;2292               Display_YX_Format(2, 0, "%f", measure.result);
;;;2293   #endif
;;;2294               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2295               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2296           }
;;;2297           break;
;;;2298   
;;;2299       case STEP_HBEAM_CAN_TEST_COMPLETE: // 测试完成
;;;2300           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2301           Clear_All_Lines();
;;;2302           Display_Centered(0, "HBEAM");
;;;2303           Display_Centered(1, "Test Pass");
;;;2304   
;;;2305           // 上报测试成功
;;;2306           STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;2307           AVO_PIN_Reset();
;;;2308           STATE_EnterState(STATE_STANDBY);
;;;2309           break;
;;;2310   
;;;2311       // 超时处理
;;;2312       case STEP_HBEAM_CAN_TEST_COMMUNICATION_TIME_OUT:
;;;2313           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2314           STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2315           AVO_PIN_Reset();
;;;2316           Clear_All_Lines();
;;;2317           Display_Centered(0, "HBEAM");
;;;2318           Display_Centered(1, "Test Timeout");
;;;2319           STATE_EnterState(STATE_STANDBY);
;;;2320           break;
;;;2321   
;;;2322       default:
;;;2323           break;
;;;2324       }
;;;2325   }
00004a  e8bd81fc          POP      {r2-r8,pc}
                  |L14.78|
00004e  4d98              LDR      r5,|L14.688|
000050  2880              CMP      r0,#0x80              ;2184
000052  d05c              BEQ      |L14.270|
000054  2881              CMP      r0,#0x81              ;2184
000056  d07d              BEQ      |L14.340|
000058  2882              CMP      r0,#0x82              ;2184
00005a  d07c              BEQ      |L14.342|
00005c  2883              CMP      r0,#0x83              ;2184
00005e  d1f4              BNE      |L14.74|
000060  2008              MOVS     r0,#8                 ;2313
000062  f7fffffe          BL       TIMER_KillTask
000066  2100              MOVS     r1,#0                 ;2314
000068  200b              MOVS     r0,#0xb               ;2314
00006a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00006e  f7fffffe          BL       AVO_PIN_Reset
000072  f7fffffe          BL       Clear_All_Lines
000076  a18f              ADR      r1,|L14.692|
000078  2000              MOVS     r0,#0                 ;2317
00007a  f7fffffe          BL       Display_Centered
00007e  a18f              ADR      r1,|L14.700|
000080  2001              MOVS     r0,#1                 ;2318
000082  f7fffffe          BL       Display_Centered
000086  e8bd41fc          POP      {r2-r8,lr}            ;2319
00008a  2001              MOVS     r0,#1                 ;2319
00008c  f7ffbffe          B.W      STATE_EnterState
                  |L14.144|
000090  207e              MOVS     r0,#0x7e              ;2190
000092  f7fffffe          BL       STATE_SwitchStep
000096  8ba0              LDRH     r0,[r4,#0x1c]         ;2191  ; dut_info
000098  f7fffffe          BL       IAP_CTRL_CAN_Init
00009c  f7fffffe          BL       CAN_PROTOCOL1_Init
0000a0  498a              LDR      r1,|L14.716|
0000a2  2000              MOVS     r0,#0                 ;2193
0000a4  7008              STRB     r0,[r1,#0]            ;2193
0000a6  498a              LDR      r1,|L14.720|
0000a8  7008              STRB     r0,[r1,#0]            ;2194
0000aa  f7fffffe          BL       Clear_All_Lines
0000ae  a181              ADR      r1,|L14.692|
0000b0  2000              MOVS     r0,#0                 ;2196
0000b2  f7fffffe          BL       Display_Centered
0000b6  a187              ADR      r1,|L14.724|
0000b8  2001              MOVS     r0,#1                 ;2197
0000ba  f7fffffe          BL       Display_Centered
0000be  e8bd41fc          POP      {r2-r8,lr}            ;2200
0000c2  f7ffbffe          B.W      AVO_PIN_Reset
                  |L14.198|
0000c6  207d              MOVS     r0,#0x7d              ;2220
0000c8  f7fffffe          BL       STATE_SwitchStep
0000cc  2008              MOVS     r0,#8                 ;2221
0000ce  f7fffffe          BL       TIMER_ResetTimer
0000d2  4633              MOV      r3,r6                 ;2224
0000d4  2203              MOVS     r2,#3                 ;2224
0000d6  2110              MOVS     r1,#0x10              ;2224
0000d8  4638              MOV      r0,r7                 ;2224
0000da  f7fffffe          BL       gpio_init
0000de  4631              MOV      r1,r6                 ;2224
0000e0  4638              MOV      r0,r7                 ;2224
0000e2  f7fffffe          BL       gpio_bit_set
0000e6  2100              MOVS     r1,#0                 ;2227
0000e8  2001              MOVS     r0,#1                 ;2227
0000ea  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000ee  f7fffffe          BL       Clear_All_Lines
0000f2  a170              ADR      r1,|L14.692|
0000f4  2000              MOVS     r0,#0                 ;2229
0000f6  f7fffffe          BL       Display_Centered
0000fa  a178              ADR      r1,|L14.732|
0000fc  2001              MOVS     r0,#1                 ;2230
0000fe  f7fffffe          BL       Display_Centered
000102  e8bd41fc          POP      {r2-r8,lr}            ;2231
000106  a178              ADR      r1,|L14.744|
000108  2002              MOVS     r0,#2                 ;2231
00010a  f7ffbffe          B.W      Display_Centered
                  |L14.270|
00010e  207d              MOVS     r0,#0x7d              ;2235
000110  f7fffffe          BL       STATE_SwitchStep
000114  2008              MOVS     r0,#8                 ;2236
000116  f7fffffe          BL       TIMER_ResetTimer
00011a  6ba0              LDR      r0,[r4,#0x38]         ;2239  ; dut_info
00011c  f7fffffe          BL       __aeabi_ui2f
000120  6829              LDR      r1,[r5,#0]            ;2239  ; measure
000122  f7fffffe          BL       __aeabi_cfcmple
000126  d242              BCS      |L14.430|
000128  6b60              LDR      r0,[r4,#0x34]         ;2239  ; dut_info
00012a  f7fffffe          BL       __aeabi_ui2f
00012e  6829              LDR      r1,[r5,#0]            ;2239  ; measure
000130  f7fffffe          BL       __aeabi_cfrcmple
000134  d23b              BCS      |L14.430|
000136  f7fffffe          BL       Clear_All_Lines
00013a  a15e              ADR      r1,|L14.692|
00013c  2000              MOVS     r0,#0                 ;2242
00013e  f7fffffe          BL       Display_Centered
000142  a16c              ADR      r1,|L14.756|
000144  2001              MOVS     r0,#1                 ;2243
000146  f7fffffe          BL       Display_Centered
00014a  a16b              ADR      r1,|L14.760|
00014c  2002              MOVS     r0,#2                 ;2244
00014e  f7fffffe          BL       Display_Centered
000152  e001              B        |L14.344|
                  |L14.340|
000154  e050              B        |L14.504|
                  |L14.342|
000156  e08b              B        |L14.624|
                  |L14.344|
000158  4633              MOV      r3,r6                 ;2247
00015a  2203              MOVS     r2,#3                 ;2247
00015c  2110              MOVS     r1,#0x10              ;2247
00015e  4638              MOV      r0,r7                 ;2247
000160  f7fffffe          BL       gpio_init
000164  4631              MOV      r1,r6                 ;2247
000166  4638              MOV      r0,r7                 ;2247
000168  f7fffffe          BL       gpio_bit_set
00016c  4d65              LDR      r5,|L14.772|
00016e  f44f5400          MOV      r4,#0x2000            ;2248
000172  4623              MOV      r3,r4                 ;2248
000174  2203              MOVS     r2,#3                 ;2248
000176  2110              MOVS     r1,#0x10              ;2248
000178  4628              MOV      r0,r5                 ;2248
00017a  f7fffffe          BL       gpio_init
00017e  4621              MOV      r1,r4                 ;2248
000180  4628              MOV      r0,r5                 ;2248
000182  f7fffffe          BL       gpio_bit_set
000186  2100              MOVS     r1,#0                 ;2251
000188  2001              MOVS     r0,#1                 ;2251
00018a  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00018e  f7fffffe          BL       Clear_All_Lines
000192  a148              ADR      r1,|L14.692|
000194  2000              MOVS     r0,#0                 ;2253
000196  f7fffffe          BL       Display_Centered
00019a  a150              ADR      r1,|L14.732|
00019c  2001              MOVS     r0,#1                 ;2254
00019e  f7fffffe          BL       Display_Centered
0001a2  e8bd41fc          POP      {r2-r8,lr}            ;2255
0001a6  a150              ADR      r1,|L14.744|
0001a8  2002              MOVS     r0,#2                 ;2255
0001aa  f7ffbffe          B.W      Display_Centered
                  |L14.430|
0001ae  f7fffffe          BL       Clear_All_Lines
0001b2  a155              ADR      r1,|L14.776|
0001b4  2000              MOVS     r0,#0                 ;2262
0001b6  f7fffffe          BL       Display_Centered
0001ba  6828              LDR      r0,[r5,#0]            ;2263  ; measure
0001bc  f7fffffe          BL       __aeabi_f2d
0001c0  e9cd0100          STRD     r0,r1,[sp,#0]         ;2263
0001c4  a254              ADR      r2,|L14.792|
0001c6  2100              MOVS     r1,#0                 ;2263
0001c8  2001              MOVS     r0,#1                 ;2263
0001ca  f7fffffe          BL       Display_YX_Format
0001ce  a253              ADR      r2,|L14.796|
0001d0  2100              MOVS     r1,#0                 ;2264
0001d2  2002              MOVS     r0,#2                 ;2264
0001d4  6ba3              LDR      r3,[r4,#0x38]         ;2264  ; dut_info
0001d6  f7fffffe          BL       Display_YX_Format
0001da  a250              ADR      r2,|L14.796|
0001dc  2100              MOVS     r1,#0                 ;2265
0001de  2003              MOVS     r0,#3                 ;2265
0001e0  6b63              LDR      r3,[r4,#0x34]         ;2265  ; dut_info
0001e2  f7fffffe          BL       Display_YX_Format
0001e6  2100              MOVS     r1,#0                 ;2267
0001e8  200b              MOVS     r0,#0xb               ;2267
0001ea  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001ee  e8bd41fc          POP      {r2-r8,lr}            ;2268
0001f2  2008              MOVS     r0,#8                 ;2268
0001f4  f7ffbffe          B.W      TIMER_KillTask
                  |L14.504|
0001f8  207d              MOVS     r0,#0x7d              ;2273
0001fa  f7fffffe          BL       STATE_SwitchStep
0001fe  2008              MOVS     r0,#8                 ;2274
000200  f7fffffe          BL       TIMER_ResetTimer
000204  4946              LDR      r1,|L14.800|
000206  6828              LDR      r0,[r5,#0]            ;2277  ; measure
000208  4288              CMP      r0,r1                 ;2277
00020a  da14              BGE      |L14.566|
00020c  2200              MOVS     r2,#0                 ;2280
00020e  2103              MOVS     r1,#3                 ;2280
000210  20ec              MOVS     r0,#0xec              ;2280
000212  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000216  f7fffffe          BL       Clear_All_Lines
00021a  a126              ADR      r1,|L14.692|
00021c  2000              MOVS     r0,#0                 ;2282
00021e  f7fffffe          BL       Display_Centered
000222  a140              ADR      r1,|L14.804|
000224  2001              MOVS     r0,#1                 ;2283
000226  f7fffffe          BL       Display_Centered
00022a  e8bd41fc          POP      {r2-r8,lr}            ;2284
00022e  a132              ADR      r1,|L14.760|
000230  2002              MOVS     r0,#2                 ;2284
000232  f7ffbffe          B.W      Display_Centered
                  |L14.566|
000236  f7fffffe          BL       Clear_All_Lines
00023a  a11e              ADR      r1,|L14.692|
00023c  2000              MOVS     r0,#0                 ;2290
00023e  f7fffffe          BL       Display_Centered
000242  a139              ADR      r1,|L14.808|
000244  2001              MOVS     r0,#1                 ;2291
000246  f7fffffe          BL       Display_Centered
00024a  6828              LDR      r0,[r5,#0]            ;2292  ; measure
00024c  f7fffffe          BL       __aeabi_f2d
000250  e9cd0100          STRD     r0,r1,[sp,#0]         ;2292
000254  a230              ADR      r2,|L14.792|
000256  2100              MOVS     r1,#0                 ;2292
000258  2002              MOVS     r0,#2                 ;2292
00025a  f7fffffe          BL       Display_YX_Format
00025e  2100              MOVS     r1,#0                 ;2294
000260  200b              MOVS     r0,#0xb               ;2294
000262  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000266  e8bd41fc          POP      {r2-r8,lr}            ;2295
00026a  2008              MOVS     r0,#8                 ;2295
00026c  f7ffbffe          B.W      TIMER_KillTask
                  |L14.624|
000270  2008              MOVS     r0,#8                 ;2300
000272  f7fffffe          BL       TIMER_KillTask
000276  f7fffffe          BL       Clear_All_Lines
00027a  a10e              ADR      r1,|L14.692|
00027c  2000              MOVS     r0,#0                 ;2302
00027e  f7fffffe          BL       Display_Centered
000282  a11d              ADR      r1,|L14.760|
000284  2001              MOVS     r0,#1                 ;2303
000286  f7fffffe          BL       Display_Centered
00028a  2101              MOVS     r1,#1                 ;2306
00028c  200b              MOVS     r0,#0xb               ;2306
00028e  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000292  f7fffffe          BL       AVO_PIN_Reset
000296  e8bd41fc          POP      {r2-r8,lr}            ;2308
00029a  2001              MOVS     r0,#1                 ;2308
00029c  f7ffbffe          B.W      STATE_EnterState
;;;2326   
                          ENDP

                  |L14.672|
                          DCD      ||.data||+0x6
                  |L14.676|
                          DCD      0x40011400
                  |L14.680|
                          DCD      dut_info
                  |L14.684|
                          DCD      STATE_SwitchStep
                  |L14.688|
                          DCD      measure
                  |L14.692|
0002b4  48424541          DCB      "HBEAM",0
0002b8  4d00    
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L14.700|
0002bc  54657374          DCB      "Test Timeout",0
0002c0  2054696d
0002c4  656f7574
0002c8  00      
0002c9  00                DCB      0
0002ca  00                DCB      0
0002cb  00                DCB      0
                  |L14.716|
                          DCD      light_cnt
                  |L14.720|
                          DCD      headlight_cnt
                  |L14.724|
0002d4  54657374          DCB      "Testing",0
0002d8  696e6700
                  |L14.732|
0002dc  41564f20          DCB      "AVO METER",0
0002e0  4d455445
0002e4  5200    
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L14.744|
0002e8  4d656173          DCB      "Measurement",0
0002ec  7572656d
0002f0  656e7400
                  |L14.756|
0002f4  56434300          DCB      "VCC",0
                  |L14.760|
0002f8  54657374          DCB      "Test Pass",0
0002fc  20506173
000300  7300    
000302  00                DCB      0
000303  00                DCB      0
                  |L14.772|
                          DCD      0x40010c00
                  |L14.776|
000308  56434320          DCB      "VCC Abnormal",0
00030c  41626e6f
000310  726d616c
000314  00      
000315  00                DCB      0
000316  00                DCB      0
000317  00                DCB      0
                  |L14.792|
000318  256600            DCB      "%f",0
00031b  00                DCB      0
                  |L14.796|
00031c  256400            DCB      "%d",0
00031f  00                DCB      0
                  |L14.800|
                          DCD      0x453b8000
                  |L14.804|
000324  474e4400          DCB      "GND",0
                  |L14.808|
000328  474e4420          DCB      "GND Abnormal",0
00032c  41626e6f
000330  726d616c
000334  00      
000335  00                DCB      0
000336  00                DCB      0
000337  00                DCB      0

                          AREA ||i.STEP_Process_HbeamUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_HbeamUartTest PROC
;;;674    // 远光灯测试
;;;675    void STEP_Process_HbeamUartTest(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;676    {
;;;677        switch (stateCB.step)
000004  48a6              LDR      r0,|L15.672|
;;;678        {
;;;679            case STEP_NULL: // 空步骤
;;;680                break;
;;;681    
;;;682            case STEP_HBEAM_UART_TEST_ENTRY: // 入口步骤
;;;683                STATE_SwitchStep(STEP_HBEAM_UART_TEST_NOTIFY_DUT);
;;;684                UART_DRIVE_InitSelect(dut_info.uart_baudRate);
;;;685                DUT_PROTOCOL_Init();
;;;686                light_cnt = 0;
;;;687                headlight_cnt = 0;
;;;688                Clear_All_Lines();
;;;689                Display_Centered(0, "HBEAM");
;;;690                Display_Centered(1, "Testing");
;;;691    
;;;692                // 测试引脚复位
;;;693                AVO_PIN_Reset();
;;;694                break;
;;;695    
;;;696            case STEP_HBEAM_UART_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;697                break;
;;;698    
;;;699            case STEP_HBEAM_UART_TEST_NOTIFY_DUT: // 通知DUT打开远光灯步骤
;;;700                STATE_SwitchStep(STEP_HBEAM_UART_TEST_WAIT_RESPONSE);
;;;701                DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 3, 1);
;;;702    
;;;703                // 添加超时
;;;704                TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;705                              4000,
;;;706                              STATE_SwitchStep,
;;;707                              STEP_HBEAM_UART_TEST_COMMUNICATION_TIME_OUT,
;;;708                              1,
;;;709                              ACTION_MODE_ADD_TO_QUEUE);
;;;710                break;
;;;711    
;;;712            case STEP_HBEAM_UART_TEST_OPEN:      // 仪表打开远光灯成功
;;;713                STATE_SwitchStep(STEP_HBEAM_UART_TEST_WAIT_RESPONSE);
;;;714                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;715    
;;;716                // 打开VCC测试引脚
;;;717                LED_HBEAM_TEST_EN_ON();
000006  4fa7              LDR      r7,|L15.676|
000008  4ca7              LDR      r4,|L15.680|
00000a  8840              LDRH     r0,[r0,#2]            ;677  ; stateCB
00000c  f44f5680          MOV      r6,#0x1000
000010  2823              CMP      r0,#0x23              ;677
000012  d058              BEQ      |L15.198|
000014  dc1b              BGT      |L15.78|
000016  2800              CMP      r0,#0                 ;677
000018  d017              BEQ      |L15.74|
00001a  2820              CMP      r0,#0x20              ;677
00001c  d038              BEQ      |L15.144|
00001e  2821              CMP      r0,#0x21              ;677
000020  d013              BEQ      |L15.74|
000022  2822              CMP      r0,#0x22              ;677
000024  d111              BNE      |L15.74|
000026  2021              MOVS     r0,#0x21              ;700
000028  f7fffffe          BL       STATE_SwitchStep
00002c  2201              MOVS     r2,#1                 ;701
00002e  2103              MOVS     r1,#3                 ;701
000030  20ec              MOVS     r0,#0xec              ;701
000032  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000036  2001              MOVS     r0,#1                 ;704
000038  9000              STR      r0,[sp,#0]            ;704
00003a  9001              STR      r0,[sp,#4]            ;704
00003c  2327              MOVS     r3,#0x27              ;704
00003e  4a9b              LDR      r2,|L15.684|
000040  f44f617a          MOV      r1,#0xfa0             ;704
000044  2008              MOVS     r0,#8                 ;704
000046  f7fffffe          BL       TIMER_AddTask
                  |L15.74|
;;;718    
;;;719                // 通知万用表测VCC
;;;720                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;721                Clear_All_Lines();
;;;722                Display_Centered(0, "HBEAM");
;;;723                Display_Centered(1, "AVO METER");
;;;724                Display_Centered(2, "Measurement");
;;;725                break;
;;;726    
;;;727            case STEP_HBEAM_UART_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;728                STATE_SwitchStep(STEP_HBEAM_UART_TEST_WAIT_RESPONSE);
;;;729                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;730    
;;;731                // 比对万用表返回的数值
;;;732                if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;733                {
;;;734                    Clear_All_Lines();
;;;735                    Display_Centered(0, "HBEAM");
;;;736                    Display_Centered(1, "VCC");
;;;737                    Display_Centered(2, "Test Pass");
;;;738    
;;;739                    // 打开GND测试引脚
;;;740                    LED_HBEAM_TEST_EN_ON();
;;;741                    LED_HBEAM_EN_ON();
;;;742    
;;;743                    // 通知万用表测VCC
;;;744                    AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;745                    Clear_All_Lines();
;;;746                    Display_Centered(0, "HBEAM");
;;;747                    Display_Centered(1, "AVO METER");
;;;748                    Display_Centered(2, "Measurement");
;;;749                }
;;;750                // 比对失败
;;;751                else
;;;752                {
;;;753        #if DEBUG_ENABLE
;;;754                    Clear_All_Lines();
;;;755                    Display_Centered(0, "VCC Abnormal");
;;;756                    Display_YX_Format(1, 0, "%f", measure.result);
;;;757                    Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;758                    Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;759        #endif
;;;760                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;761                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;762                }
;;;763                break;
;;;764    
;;;765            case STEP_HBEAM_UART_TEST_CHECK_GND_VALUE: // 比对GND
;;;766                STATE_SwitchStep(STEP_HBEAM_UART_TEST_WAIT_RESPONSE);
;;;767                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;768    
;;;769                // 小于3V则GND导通测试通过
;;;770                if (LIGHT_GND_VOLTAGE_VALUE > measure.result)
;;;771                {
;;;772                    // 关闭远光灯
;;;773                    DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 3, 0);
;;;774                    Clear_All_Lines();
;;;775                    Display_Centered(0, "HBEAM");
;;;776                    Display_Centered(1, "GND");
;;;777                    Display_Centered(2, "Test Pass");
;;;778                }
;;;779                else
;;;780                {
;;;781        #if DEBUG_ENABLE
;;;782                    Clear_All_Lines();
;;;783                    Display_Centered(0, "HBEAM");
;;;784                    Display_Centered(1, "GND Abnormal");
;;;785                    Display_YX_Format(2, 0, "%f", measure.result);
;;;786        #endif
;;;787                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;788                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;789                }
;;;790                break;
;;;791    
;;;792            case STEP_HBEAM_UART_TEST_COMPLETE: // 测试完成
;;;793                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;794                Clear_All_Lines();
;;;795                Display_Centered(0, "HBEAM");
;;;796                Display_Centered(1, "Test Pass");
;;;797    
;;;798                // 上报测试成功
;;;799                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;800                AVO_PIN_Reset();
;;;801                STATE_EnterState(STATE_STANDBY);
;;;802                break;
;;;803    
;;;804            // 超时处理
;;;805            case STEP_HBEAM_UART_TEST_COMMUNICATION_TIME_OUT:
;;;806                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;807                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;808                AVO_PIN_Reset();
;;;809                Clear_All_Lines();
;;;810                Display_Centered(0, "HBEAM");
;;;811                Display_Centered(1, "Test Timeout");
;;;812                STATE_EnterState(STATE_STANDBY);
;;;813                break;
;;;814    
;;;815            default:
;;;816                break;
;;;817        }
;;;818    }
00004a  e8bd81fc          POP      {r2-r8,pc}
                  |L15.78|
00004e  4d98              LDR      r5,|L15.688|
000050  2824              CMP      r0,#0x24              ;677
000052  d05c              BEQ      |L15.270|
000054  2825              CMP      r0,#0x25              ;677
000056  d07d              BEQ      |L15.340|
000058  2826              CMP      r0,#0x26              ;677
00005a  d07c              BEQ      |L15.342|
00005c  2827              CMP      r0,#0x27              ;677
00005e  d1f4              BNE      |L15.74|
000060  2008              MOVS     r0,#8                 ;806
000062  f7fffffe          BL       TIMER_KillTask
000066  2100              MOVS     r1,#0                 ;807
000068  200b              MOVS     r0,#0xb               ;807
00006a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00006e  f7fffffe          BL       AVO_PIN_Reset
000072  f7fffffe          BL       Clear_All_Lines
000076  a18f              ADR      r1,|L15.692|
000078  2000              MOVS     r0,#0                 ;810
00007a  f7fffffe          BL       Display_Centered
00007e  a18f              ADR      r1,|L15.700|
000080  2001              MOVS     r0,#1                 ;811
000082  f7fffffe          BL       Display_Centered
000086  e8bd41fc          POP      {r2-r8,lr}            ;812
00008a  2001              MOVS     r0,#1                 ;812
00008c  f7ffbffe          B.W      STATE_EnterState
                  |L15.144|
000090  2022              MOVS     r0,#0x22              ;683
000092  f7fffffe          BL       STATE_SwitchStep
000096  6a20              LDR      r0,[r4,#0x20]         ;684  ; dut_info
000098  f7fffffe          BL       UART_DRIVE_InitSelect
00009c  f7fffffe          BL       DUT_PROTOCOL_Init
0000a0  498a              LDR      r1,|L15.716|
0000a2  2000              MOVS     r0,#0                 ;686
0000a4  7008              STRB     r0,[r1,#0]            ;686
0000a6  498a              LDR      r1,|L15.720|
0000a8  7008              STRB     r0,[r1,#0]            ;687
0000aa  f7fffffe          BL       Clear_All_Lines
0000ae  a181              ADR      r1,|L15.692|
0000b0  2000              MOVS     r0,#0                 ;689
0000b2  f7fffffe          BL       Display_Centered
0000b6  a187              ADR      r1,|L15.724|
0000b8  2001              MOVS     r0,#1                 ;690
0000ba  f7fffffe          BL       Display_Centered
0000be  e8bd41fc          POP      {r2-r8,lr}            ;693
0000c2  f7ffbffe          B.W      AVO_PIN_Reset
                  |L15.198|
0000c6  2021              MOVS     r0,#0x21              ;713
0000c8  f7fffffe          BL       STATE_SwitchStep
0000cc  2008              MOVS     r0,#8                 ;714
0000ce  f7fffffe          BL       TIMER_ResetTimer
0000d2  4633              MOV      r3,r6                 ;717
0000d4  2203              MOVS     r2,#3                 ;717
0000d6  2110              MOVS     r1,#0x10              ;717
0000d8  4638              MOV      r0,r7                 ;717
0000da  f7fffffe          BL       gpio_init
0000de  4631              MOV      r1,r6                 ;717
0000e0  4638              MOV      r0,r7                 ;717
0000e2  f7fffffe          BL       gpio_bit_set
0000e6  2100              MOVS     r1,#0                 ;720
0000e8  2001              MOVS     r0,#1                 ;720
0000ea  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000ee  f7fffffe          BL       Clear_All_Lines
0000f2  a170              ADR      r1,|L15.692|
0000f4  2000              MOVS     r0,#0                 ;722
0000f6  f7fffffe          BL       Display_Centered
0000fa  a178              ADR      r1,|L15.732|
0000fc  2001              MOVS     r0,#1                 ;723
0000fe  f7fffffe          BL       Display_Centered
000102  e8bd41fc          POP      {r2-r8,lr}            ;724
000106  a178              ADR      r1,|L15.744|
000108  2002              MOVS     r0,#2                 ;724
00010a  f7ffbffe          B.W      Display_Centered
                  |L15.270|
00010e  2021              MOVS     r0,#0x21              ;728
000110  f7fffffe          BL       STATE_SwitchStep
000114  2008              MOVS     r0,#8                 ;729
000116  f7fffffe          BL       TIMER_ResetTimer
00011a  6ba0              LDR      r0,[r4,#0x38]         ;732  ; dut_info
00011c  f7fffffe          BL       __aeabi_ui2f
000120  6829              LDR      r1,[r5,#0]            ;732  ; measure
000122  f7fffffe          BL       __aeabi_cfcmple
000126  d242              BCS      |L15.430|
000128  6b60              LDR      r0,[r4,#0x34]         ;732  ; dut_info
00012a  f7fffffe          BL       __aeabi_ui2f
00012e  6829              LDR      r1,[r5,#0]            ;732  ; measure
000130  f7fffffe          BL       __aeabi_cfrcmple
000134  d23b              BCS      |L15.430|
000136  f7fffffe          BL       Clear_All_Lines
00013a  a15e              ADR      r1,|L15.692|
00013c  2000              MOVS     r0,#0                 ;735
00013e  f7fffffe          BL       Display_Centered
000142  a16c              ADR      r1,|L15.756|
000144  2001              MOVS     r0,#1                 ;736
000146  f7fffffe          BL       Display_Centered
00014a  a16b              ADR      r1,|L15.760|
00014c  2002              MOVS     r0,#2                 ;737
00014e  f7fffffe          BL       Display_Centered
000152  e001              B        |L15.344|
                  |L15.340|
000154  e050              B        |L15.504|
                  |L15.342|
000156  e08b              B        |L15.624|
                  |L15.344|
000158  4633              MOV      r3,r6                 ;740
00015a  2203              MOVS     r2,#3                 ;740
00015c  2110              MOVS     r1,#0x10              ;740
00015e  4638              MOV      r0,r7                 ;740
000160  f7fffffe          BL       gpio_init
000164  4631              MOV      r1,r6                 ;740
000166  4638              MOV      r0,r7                 ;740
000168  f7fffffe          BL       gpio_bit_set
00016c  4d65              LDR      r5,|L15.772|
00016e  f44f5400          MOV      r4,#0x2000            ;741
000172  4623              MOV      r3,r4                 ;741
000174  2203              MOVS     r2,#3                 ;741
000176  2110              MOVS     r1,#0x10              ;741
000178  4628              MOV      r0,r5                 ;741
00017a  f7fffffe          BL       gpio_init
00017e  4621              MOV      r1,r4                 ;741
000180  4628              MOV      r0,r5                 ;741
000182  f7fffffe          BL       gpio_bit_set
000186  2100              MOVS     r1,#0                 ;744
000188  2001              MOVS     r0,#1                 ;744
00018a  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00018e  f7fffffe          BL       Clear_All_Lines
000192  a148              ADR      r1,|L15.692|
000194  2000              MOVS     r0,#0                 ;746
000196  f7fffffe          BL       Display_Centered
00019a  a150              ADR      r1,|L15.732|
00019c  2001              MOVS     r0,#1                 ;747
00019e  f7fffffe          BL       Display_Centered
0001a2  e8bd41fc          POP      {r2-r8,lr}            ;748
0001a6  a150              ADR      r1,|L15.744|
0001a8  2002              MOVS     r0,#2                 ;748
0001aa  f7ffbffe          B.W      Display_Centered
                  |L15.430|
0001ae  f7fffffe          BL       Clear_All_Lines
0001b2  a155              ADR      r1,|L15.776|
0001b4  2000              MOVS     r0,#0                 ;755
0001b6  f7fffffe          BL       Display_Centered
0001ba  6828              LDR      r0,[r5,#0]            ;756  ; measure
0001bc  f7fffffe          BL       __aeabi_f2d
0001c0  e9cd0100          STRD     r0,r1,[sp,#0]         ;756
0001c4  a254              ADR      r2,|L15.792|
0001c6  2100              MOVS     r1,#0                 ;756
0001c8  2001              MOVS     r0,#1                 ;756
0001ca  f7fffffe          BL       Display_YX_Format
0001ce  a253              ADR      r2,|L15.796|
0001d0  2100              MOVS     r1,#0                 ;757
0001d2  2002              MOVS     r0,#2                 ;757
0001d4  6ba3              LDR      r3,[r4,#0x38]         ;757  ; dut_info
0001d6  f7fffffe          BL       Display_YX_Format
0001da  a250              ADR      r2,|L15.796|
0001dc  2100              MOVS     r1,#0                 ;758
0001de  2003              MOVS     r0,#3                 ;758
0001e0  6b63              LDR      r3,[r4,#0x34]         ;758  ; dut_info
0001e2  f7fffffe          BL       Display_YX_Format
0001e6  2100              MOVS     r1,#0                 ;760
0001e8  200b              MOVS     r0,#0xb               ;760
0001ea  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001ee  e8bd41fc          POP      {r2-r8,lr}            ;761
0001f2  2008              MOVS     r0,#8                 ;761
0001f4  f7ffbffe          B.W      TIMER_KillTask
                  |L15.504|
0001f8  2021              MOVS     r0,#0x21              ;766
0001fa  f7fffffe          BL       STATE_SwitchStep
0001fe  2008              MOVS     r0,#8                 ;767
000200  f7fffffe          BL       TIMER_ResetTimer
000204  4946              LDR      r1,|L15.800|
000206  6828              LDR      r0,[r5,#0]            ;770  ; measure
000208  4288              CMP      r0,r1                 ;770
00020a  da14              BGE      |L15.566|
00020c  2200              MOVS     r2,#0                 ;773
00020e  2103              MOVS     r1,#3                 ;773
000210  20ec              MOVS     r0,#0xec              ;773
000212  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000216  f7fffffe          BL       Clear_All_Lines
00021a  a126              ADR      r1,|L15.692|
00021c  2000              MOVS     r0,#0                 ;775
00021e  f7fffffe          BL       Display_Centered
000222  a140              ADR      r1,|L15.804|
000224  2001              MOVS     r0,#1                 ;776
000226  f7fffffe          BL       Display_Centered
00022a  e8bd41fc          POP      {r2-r8,lr}            ;777
00022e  a132              ADR      r1,|L15.760|
000230  2002              MOVS     r0,#2                 ;777
000232  f7ffbffe          B.W      Display_Centered
                  |L15.566|
000236  f7fffffe          BL       Clear_All_Lines
00023a  a11e              ADR      r1,|L15.692|
00023c  2000              MOVS     r0,#0                 ;783
00023e  f7fffffe          BL       Display_Centered
000242  a139              ADR      r1,|L15.808|
000244  2001              MOVS     r0,#1                 ;784
000246  f7fffffe          BL       Display_Centered
00024a  6828              LDR      r0,[r5,#0]            ;785  ; measure
00024c  f7fffffe          BL       __aeabi_f2d
000250  e9cd0100          STRD     r0,r1,[sp,#0]         ;785
000254  a230              ADR      r2,|L15.792|
000256  2100              MOVS     r1,#0                 ;785
000258  2002              MOVS     r0,#2                 ;785
00025a  f7fffffe          BL       Display_YX_Format
00025e  2100              MOVS     r1,#0                 ;787
000260  200b              MOVS     r0,#0xb               ;787
000262  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000266  e8bd41fc          POP      {r2-r8,lr}            ;788
00026a  2008              MOVS     r0,#8                 ;788
00026c  f7ffbffe          B.W      TIMER_KillTask
                  |L15.624|
000270  2008              MOVS     r0,#8                 ;793
000272  f7fffffe          BL       TIMER_KillTask
000276  f7fffffe          BL       Clear_All_Lines
00027a  a10e              ADR      r1,|L15.692|
00027c  2000              MOVS     r0,#0                 ;795
00027e  f7fffffe          BL       Display_Centered
000282  a11d              ADR      r1,|L15.760|
000284  2001              MOVS     r0,#1                 ;796
000286  f7fffffe          BL       Display_Centered
00028a  2101              MOVS     r1,#1                 ;799
00028c  200b              MOVS     r0,#0xb               ;799
00028e  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000292  f7fffffe          BL       AVO_PIN_Reset
000296  e8bd41fc          POP      {r2-r8,lr}            ;801
00029a  2001              MOVS     r0,#1                 ;801
00029c  f7ffbffe          B.W      STATE_EnterState
;;;819    
                          ENDP

                  |L15.672|
                          DCD      ||.data||+0x6
                  |L15.676|
                          DCD      0x40011400
                  |L15.680|
                          DCD      dut_info
                  |L15.684|
                          DCD      STATE_SwitchStep
                  |L15.688|
                          DCD      measure
                  |L15.692|
0002b4  48424541          DCB      "HBEAM",0
0002b8  4d00    
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L15.700|
0002bc  54657374          DCB      "Test Timeout",0
0002c0  2054696d
0002c4  656f7574
0002c8  00      
0002c9  00                DCB      0
0002ca  00                DCB      0
0002cb  00                DCB      0
                  |L15.716|
                          DCD      light_cnt
                  |L15.720|
                          DCD      headlight_cnt
                  |L15.724|
0002d4  54657374          DCB      "Testing",0
0002d8  696e6700
                  |L15.732|
0002dc  41564f20          DCB      "AVO METER",0
0002e0  4d455445
0002e4  5200    
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L15.744|
0002e8  4d656173          DCB      "Measurement",0
0002ec  7572656d
0002f0  656e7400
                  |L15.756|
0002f4  56434300          DCB      "VCC",0
                  |L15.760|
0002f8  54657374          DCB      "Test Pass",0
0002fc  20506173
000300  7300    
000302  00                DCB      0
000303  00                DCB      0
                  |L15.772|
                          DCD      0x40010c00
                  |L15.776|
000308  56434320          DCB      "VCC Abnormal",0
00030c  41626e6f
000310  726d616c
000314  00      
000315  00                DCB      0
000316  00                DCB      0
000317  00                DCB      0
                  |L15.792|
000318  256600            DCB      "%f",0
00031b  00                DCB      0
                  |L15.796|
00031c  256400            DCB      "%d",0
00031f  00                DCB      0
                  |L15.800|
                          DCD      0x453b8000
                  |L15.804|
000324  474e4400          DCB      "GND",0
                  |L15.808|
000328  474e4420          DCB      "GND Abnormal",0
00032c  41626e6f
000330  726d616c
000334  00      
000335  00                DCB      0
000336  00                DCB      0
000337  00                DCB      0

                          AREA ||i.STEP_Process_HeadLightCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_HeadLightCanTest PROC
;;;1899   // 大灯测试
;;;1900   void STEP_Process_HeadLightCanTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;1901   {
;;;1902       switch (stateCB.step)
000002  4883              LDR      r0,|L16.528|
;;;1903       {
;;;1904           case STEP_NULL: // 空步骤
;;;1905               break;
;;;1906   
;;;1907           // 入口步骤
;;;1908           case STEP_HEADLIGHT_CAN_TEST_ENTRY:
;;;1909               STATE_SwitchStep(STEP_HEADLIGHT_CAN_TEST_NOTIFY_DUT);
;;;1910               CAN_PROTOCOL_TEST_Init(dut_info.can_baudRate); 
000004  4d83              LDR      r5,|L16.532|
;;;1911               //        CAN_PROTOCOL1_Init();
;;;1912               //        can_light_cnt = 0;
;;;1913   
;;;1914               // 测试引脚复位
;;;1915               AVO_PIN_Reset();
;;;1916               break;
;;;1917   
;;;1918           case STEP_HEADLIGHT_CAN_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;1919               break;
;;;1920   
;;;1921           case STEP_HEADLIGHT_CAN_TEST_NOTIFY_DUT:   // 通知DUT打开大灯步骤
;;;1922               STATE_SwitchStep(STEP_HEADLIGHT_CAN_TEST_WAIT_RESPONSE);
;;;1923               //        CAN_PROTOCOL1_SendCmdWithResult(CAN_PROTOCOL1_CMD_HEADLIGHT_CONTROL, 1);
;;;1924               // 添加超时
;;;1925               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;1926                             4000,
;;;1927                             STATE_SwitchStep,
;;;1928                             STEP_HEADLIGHT_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;1929                             1,
;;;1930                             ACTION_MODE_ADD_TO_QUEUE);
;;;1931               break;
;;;1932   
;;;1933           case STEP_HEADLIGHT_CAN_TEST_OPEN:      // 收到仪表打开大灯信号
;;;1934               STATE_SwitchStep(STEP_HEADLIGHT_CAN_TEST_WAIT_RESPONSE);
;;;1935               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1936   
;;;1937               // 打开GND测试引脚
;;;1938               //        LED_GND_TEST_EN_ON();
;;;1939   
;;;1940               // 通知万用表测GND阻抗值
;;;1941               AVO_PROTOCOL_Send_Type_Chl(MEASURE_OHM, 0);
;;;1942               break;
;;;1943   
;;;1944           case STEP_HEADLIGHT_CAN_TEST_CHECK_GND_VALUE: // 检查接地值步骤
;;;1945               STATE_SwitchStep(STEP_HEADLIGHT_CAN_TEST_WAIT_RESPONSE);
;;;1946               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1947   
;;;1948               // GND导通测试通过，则测VCC
;;;1949               if (measure.result == 0)
000006  4e84              LDR      r6,|L16.536|
000008  8840              LDRH     r0,[r0,#2]            ;1902  ; stateCB
;;;1950               {
;;;1951                   // 打开VCC测试引脚
;;;1952                   LED_VCC_TEST_EN_ON();
;;;1953                   AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1954               }
;;;1955               else
;;;1956               {
;;;1957       #if DEBUG_ENABLE
;;;1958                   Clear_All_Lines();
;;;1959                   Display_Centered(0, "Headlights GND abnormal");
;;;1960                   Display_YX_Format(1, 0, "%f", measure.result);
;;;1961                   Delayms(1000);
00000a  f44f747a          MOV      r4,#0x3e8
00000e  286f              CMP      r0,#0x6f              ;1902
000010  d041              BEQ      |L16.150|
000012  dc20              BGT      |L16.86|
000014  286c              CMP      r0,#0x6c              ;1902
000016  d03d              BEQ      |L16.148|
000018  dc0d              BGT      |L16.54|
00001a  2800              CMP      r0,#0                 ;1902
00001c  d03a              BEQ      |L16.148|
00001e  286b              CMP      r0,#0x6b              ;1902
000020  d138              BNE      |L16.148|
000022  206d              MOVS     r0,#0x6d              ;1909
000024  f7fffffe          BL       STATE_SwitchStep
000028  8ba8              LDRH     r0,[r5,#0x1c]         ;1910  ; dut_info
00002a  f7fffffe          BL       CAN_PROTOCOL_TEST_Init
00002e  e8bd407c          POP      {r2-r6,lr}            ;1915
000032  f7ffbffe          B.W      AVO_PIN_Reset
                  |L16.54|
000036  286d              CMP      r0,#0x6d              ;1902
000038  d01f              BEQ      |L16.122|
00003a  286e              CMP      r0,#0x6e              ;1902
00003c  d12a              BNE      |L16.148|
00003e  206c              MOVS     r0,#0x6c              ;1934
000040  f7fffffe          BL       STATE_SwitchStep
000044  2008              MOVS     r0,#8                 ;1935
000046  f7fffffe          BL       TIMER_ResetTimer
00004a  e8bd407c          POP      {r2-r6,lr}            ;1941
00004e  2100              MOVS     r1,#0                 ;1941
000050  2003              MOVS     r0,#3                 ;1941
000052  f7ffbffe          B.W      AVO_PROTOCOL_Send_Type_Chl
                  |L16.86|
000056  2870              CMP      r0,#0x70              ;1902
000058  d053              BEQ      |L16.258|
00005a  2871              CMP      r0,#0x71              ;1902
00005c  d07e              BEQ      |L16.348|
00005e  2872              CMP      r0,#0x72              ;1902
000060  d07d              BEQ      |L16.350|
000062  2873              CMP      r0,#0x73              ;1902
000064  d116              BNE      |L16.148|
;;;1962       #endif
;;;1963                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1964               }
;;;1965               break;
;;;1966   
;;;1967           case STEP_HEADLIGHT_CAN_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;1968               STATE_SwitchStep(STEP_HEADLIGHT_CAN_TEST_WAIT_RESPONSE);
;;;1969               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1970   
;;;1971               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;1972               {
;;;1973                   //            CURRENT1_TEST_EN_ON();
;;;1974                   //            LED_VCC_CURRENT_TEST_EN_ON();
;;;1975                   //            AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCMA, 0);
;;;1976               }
;;;1977               else
;;;1978               {
;;;1979       #if DEBUG_ENABLE
;;;1980                   Clear_All_Lines();
;;;1981                   Display_Centered(0, "Headlights VCC abnormal");
;;;1982                   Display_YX_Format(1, 0, "%f", measure.result);
;;;1983                   Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;1984                   Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;1985                   Delayms(1000);
;;;1986       #endif
;;;1987                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1988               }
;;;1989               break;
;;;1990   
;;;1991           case STEP_HEADLIGHT_CAN_TEST_CHECK_CURRENT_VALUE: // 检查电流值步骤
;;;1992               STATE_SwitchStep(STEP_HEADLIGHT_CAN_TEST_WAIT_RESPONSE);
;;;1993               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1994   
;;;1995               // 大灯测试,最后测电流
;;;1996               if ((measure.result > dut_info.currentMin) && (measure.result < dut_info.currentMax))
;;;1997               {
;;;1998                   // 测试通过关闭大灯
;;;1999                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_HEADLIGHT_CONTROL, 0);
;;;2000               }
;;;2001               else
;;;2002               {
;;;2003       #if DEBUG_ENABLE
;;;2004                   Clear_All_Lines();
;;;2005                   Display_Centered(0, "Headlights VCC abnormal");
;;;2006                   Display_YX_Format(1, 0, "%f", measure.result);
;;;2007                   Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;2008                   Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;2009                   Delayms(1000);
;;;2010       #endif
;;;2011                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2012               }
;;;2013               break;
;;;2014   
;;;2015           case STEP_HEADLIGHT_CAN_TEST_COMPLETE: // 测试完成步骤
;;;2016               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2017   
;;;2018               // 关闭大灯并且上报测试成功
;;;2019               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;2020               AVO_PIN_Reset();
;;;2021               break;
;;;2022   
;;;2023           // 超时处理
;;;2024           case STEP_HEADLIGHT_CAN_TEST_COMMUNICATION_TIME_OUT:
;;;2025               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
000066  2008              MOVS     r0,#8
000068  f7fffffe          BL       TIMER_KillTask
;;;2026               AVO_PIN_Reset();
00006c  f7fffffe          BL       AVO_PIN_Reset
;;;2027               STATE_EnterState(STATE_STANDBY);
000070  e8bd407c          POP      {r2-r6,lr}
000074  2001              MOVS     r0,#1
000076  f7ffbffe          B.W      STATE_EnterState
                  |L16.122|
00007a  206c              MOVS     r0,#0x6c              ;1922
00007c  f7fffffe          BL       STATE_SwitchStep
000080  2001              MOVS     r0,#1                 ;1925
000082  9000              STR      r0,[sp,#0]            ;1925
000084  9001              STR      r0,[sp,#4]            ;1925
000086  2373              MOVS     r3,#0x73              ;1925
000088  4a64              LDR      r2,|L16.540|
00008a  f44f617a          MOV      r1,#0xfa0             ;1925
00008e  2008              MOVS     r0,#8                 ;1925
000090  f7fffffe          BL       TIMER_AddTask
                  |L16.148|
;;;2028               break;
;;;2029   
;;;2030           default:
;;;2031               break;
;;;2032       }
;;;2033   }
000094  bd7c              POP      {r2-r6,pc}
                  |L16.150|
000096  206c              MOVS     r0,#0x6c              ;1945
000098  f7fffffe          BL       STATE_SwitchStep
00009c  2008              MOVS     r0,#8                 ;1946
00009e  f7fffffe          BL       TIMER_ResetTimer
0000a2  6830              LDR      r0,[r6,#0]            ;1949  ; measure
0000a4  f0104fff          TST      r0,#0x7f800000        ;1949
0000a8  d018              BEQ      |L16.220|
0000aa  f7fffffe          BL       Clear_All_Lines
0000ae  a15c              ADR      r1,|L16.544|
0000b0  2000              MOVS     r0,#0                 ;1959
0000b2  f7fffffe          BL       Display_Centered
0000b6  6830              LDR      r0,[r6,#0]            ;1960  ; measure
0000b8  f7fffffe          BL       __aeabi_f2d
0000bc  e9cd0100          STRD     r0,r1,[sp,#0]         ;1960
0000c0  a25d              ADR      r2,|L16.568|
0000c2  2100              MOVS     r1,#0                 ;1960
0000c4  2001              MOVS     r0,#1                 ;1960
0000c6  f7fffffe          BL       Display_YX_Format
0000ca  4620              MOV      r0,r4                 ;1961
0000cc  f7fffffe          BL       Delayms
0000d0  e8bd407c          POP      {r2-r6,lr}            ;1963
0000d4  2100              MOVS     r1,#0                 ;1963
0000d6  200b              MOVS     r0,#0xb               ;1963
0000d8  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L16.220|
0000dc  4d57              LDR      r5,|L16.572|
0000de  f44f6400          MOV      r4,#0x800             ;1952
0000e2  4623              MOV      r3,r4                 ;1952
0000e4  2203              MOVS     r2,#3                 ;1952
0000e6  2110              MOVS     r1,#0x10              ;1952
0000e8  4628              MOV      r0,r5                 ;1952
0000ea  f7fffffe          BL       gpio_init
0000ee  4621              MOV      r1,r4                 ;1952
0000f0  4628              MOV      r0,r5                 ;1952
0000f2  f7fffffe          BL       gpio_bit_set
0000f6  e8bd407c          POP      {r2-r6,lr}            ;1953
0000fa  2100              MOVS     r1,#0                 ;1953
0000fc  2001              MOVS     r0,#1                 ;1953
0000fe  f7ffbffe          B.W      AVO_PROTOCOL_Send_Type_Chl
                  |L16.258|
000102  206c              MOVS     r0,#0x6c              ;1968
000104  f7fffffe          BL       STATE_SwitchStep
000108  2008              MOVS     r0,#8                 ;1969
00010a  f7fffffe          BL       TIMER_ResetTimer
00010e  6ba8              LDR      r0,[r5,#0x38]         ;1971  ; dut_info
000110  f7fffffe          BL       __aeabi_ui2f
000114  6831              LDR      r1,[r6,#0]            ;1971  ; measure
000116  f7fffffe          BL       __aeabi_cfcmple
00011a  d206              BCS      |L16.298|
00011c  6b68              LDR      r0,[r5,#0x34]         ;1971  ; dut_info
00011e  f7fffffe          BL       __aeabi_ui2f
000122  6831              LDR      r1,[r6,#0]            ;1971  ; measure
000124  f7fffffe          BL       __aeabi_cfrcmple
000128  d3b4              BCC      |L16.148|
                  |L16.298|
00012a  f7fffffe          BL       Clear_All_Lines
00012e  a144              ADR      r1,|L16.576|
000130  2000              MOVS     r0,#0                 ;1981
000132  f7fffffe          BL       Display_Centered
000136  6830              LDR      r0,[r6,#0]            ;1982  ; measure
000138  f7fffffe          BL       __aeabi_f2d
00013c  e9cd0100          STRD     r0,r1,[sp,#0]         ;1982
000140  a23d              ADR      r2,|L16.568|
000142  2100              MOVS     r1,#0                 ;1982
000144  2001              MOVS     r0,#1                 ;1982
000146  f7fffffe          BL       Display_YX_Format
00014a  a243              ADR      r2,|L16.600|
00014c  2100              MOVS     r1,#0                 ;1983
00014e  2002              MOVS     r0,#2                 ;1983
000150  6bab              LDR      r3,[r5,#0x38]         ;1983  ; dut_info
000152  f7fffffe          BL       Display_YX_Format
000156  a240              ADR      r2,|L16.600|
000158  2100              MOVS     r1,#0                 ;1984
00015a  e001              B        |L16.352|
                  |L16.348|
00015c  e00d              B        |L16.378|
                  |L16.350|
00015e  e04b              B        |L16.504|
                  |L16.352|
000160  2003              MOVS     r0,#3                 ;1984
000162  6b6b              LDR      r3,[r5,#0x34]         ;1984  ; dut_info
000164  f7fffffe          BL       Display_YX_Format
000168  4620              MOV      r0,r4                 ;1985
00016a  f7fffffe          BL       Delayms
00016e  e8bd407c          POP      {r2-r6,lr}            ;1987
000172  2100              MOVS     r1,#0                 ;1987
000174  200b              MOVS     r0,#0xb               ;1987
000176  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L16.378|
00017a  206c              MOVS     r0,#0x6c              ;1992
00017c  f7fffffe          BL       STATE_SwitchStep
000180  2008              MOVS     r0,#8                 ;1993
000182  f7fffffe          BL       TIMER_ResetTimer
000186  8fe8              LDRH     r0,[r5,#0x3e]         ;1996  ; dut_info
000188  f7fffffe          BL       __aeabi_ui2f
00018c  6831              LDR      r1,[r6,#0]            ;1996  ; measure
00018e  f7fffffe          BL       __aeabi_cfcmple
000192  d20c              BCS      |L16.430|
000194  8fa8              LDRH     r0,[r5,#0x3c]         ;1996  ; dut_info
000196  f7fffffe          BL       __aeabi_ui2f
00019a  6831              LDR      r1,[r6,#0]            ;1996  ; measure
00019c  f7fffffe          BL       __aeabi_cfrcmple
0001a0  d205              BCS      |L16.430|
0001a2  e8bd407c          POP      {r2-r6,lr}            ;1999
0001a6  2100              MOVS     r1,#0                 ;1999
0001a8  20ea              MOVS     r0,#0xea              ;1999
0001aa  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L16.430|
0001ae  f7fffffe          BL       Clear_All_Lines
0001b2  a123              ADR      r1,|L16.576|
0001b4  2000              MOVS     r0,#0                 ;2005
0001b6  f7fffffe          BL       Display_Centered
0001ba  6830              LDR      r0,[r6,#0]            ;2006  ; measure
0001bc  f7fffffe          BL       __aeabi_f2d
0001c0  e9cd0100          STRD     r0,r1,[sp,#0]         ;2006
0001c4  a21c              ADR      r2,|L16.568|
0001c6  2100              MOVS     r1,#0                 ;2006
0001c8  2001              MOVS     r0,#1                 ;2006
0001ca  f7fffffe          BL       Display_YX_Format
0001ce  a222              ADR      r2,|L16.600|
0001d0  2100              MOVS     r1,#0                 ;2007
0001d2  2002              MOVS     r0,#2                 ;2007
0001d4  6bab              LDR      r3,[r5,#0x38]         ;2007  ; dut_info
0001d6  f7fffffe          BL       Display_YX_Format
0001da  a21f              ADR      r2,|L16.600|
0001dc  2100              MOVS     r1,#0                 ;2008
0001de  2003              MOVS     r0,#3                 ;2008
0001e0  6b6b              LDR      r3,[r5,#0x34]         ;2008  ; dut_info
0001e2  f7fffffe          BL       Display_YX_Format
0001e6  4620              MOV      r0,r4                 ;2009
0001e8  f7fffffe          BL       Delayms
0001ec  e8bd407c          POP      {r2-r6,lr}            ;2011
0001f0  2100              MOVS     r1,#0                 ;2011
0001f2  200b              MOVS     r0,#0xb               ;2011
0001f4  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L16.504|
0001f8  2008              MOVS     r0,#8                 ;2016
0001fa  f7fffffe          BL       TIMER_KillTask
0001fe  2101              MOVS     r1,#1                 ;2019
000200  200b              MOVS     r0,#0xb               ;2019
000202  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000206  e8bd407c          POP      {r2-r6,lr}            ;2020
00020a  f7ffbffe          B.W      AVO_PIN_Reset
;;;2034   
                          ENDP

00020e  0000              DCW      0x0000
                  |L16.528|
                          DCD      ||.data||+0x6
                  |L16.532|
                          DCD      dut_info
                  |L16.536|
                          DCD      measure
                  |L16.540|
                          DCD      STATE_SwitchStep
                  |L16.544|
000220  48656164          DCB      "Headlights GND abnormal",0
000224  6c696768
000228  74732047
00022c  4e442061
000230  626e6f72
000234  6d616c00
                  |L16.568|
000238  256600            DCB      "%f",0
00023b  00                DCB      0
                  |L16.572|
                          DCD      0x40011400
                  |L16.576|
000240  48656164          DCB      "Headlights VCC abnormal",0
000244  6c696768
000248  74732056
00024c  43432061
000250  626e6f72
000254  6d616c00
                  |L16.600|
000258  256400            DCB      "%d",0
00025b  00                DCB      0

                          AREA ||i.STEP_Process_HeadLightUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_HeadLightUartTest PROC
;;;378    // 大灯测试
;;;379    void STEP_Process_HeadLightUartTest(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;380    {
;;;381        switch (stateCB.step)
000004  48ab              LDR      r0,|L17.692|
;;;382        {
;;;383            case STEP_NULL: // 空步骤
;;;384                break;
;;;385    
;;;386            case STEP_HEADLIGHT_UART_TEST_ENTRY: // 入口步骤
;;;387                STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_NOTIFY_DUT);
;;;388                UART_DRIVE_InitSelect(dut_info.uart_baudRate);
;;;389                DUT_PROTOCOL_Init();
;;;390                light_cnt = 0;
;;;391                headlight_cnt = 0;
;;;392                Clear_All_Lines();
;;;393                Display_Centered(0, "HEADLIGHT");
;;;394                Display_Centered(1, "Testing");
;;;395    
;;;396                // 测试引脚复位
;;;397                AVO_PIN_Reset();
;;;398                break;
;;;399    
;;;400            case STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;401                break;
;;;402    
;;;403            case STEP_HEADLIGHT_UART_TEST_NOTIFY_DUT: // 通知DUT打开大灯步骤
;;;404                STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE);
;;;405                DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_HEADLIGHT_CONTROL, 1);
;;;406    
;;;407                // 添加超时
;;;408                TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;409                              4000,
;;;410                              STATE_SwitchStep,
;;;411                              STEP_HEADLIGHT_UART_TEST_COMMUNICATION_TIME_OUT,
;;;412                              1,
;;;413                              ACTION_MODE_ADD_TO_QUEUE);
;;;414                break;
;;;415    
;;;416            case STEP_HEADLIGHT_UART_TEST_OPEN:      // 仪表打开大灯成功
;;;417                STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE);
;;;418                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;419    
;;;420                // 打开VCC测试引脚
;;;421                LED_VCC_TEST_EN_ON();
000006  4fac              LDR      r7,|L17.696|
000008  4cac              LDR      r4,|L17.700|
00000a  8840              LDRH     r0,[r0,#2]            ;381  ; stateCB
00000c  f44f6600          MOV      r6,#0x800
000010  2813              CMP      r0,#0x13              ;381
000012  d057              BEQ      |L17.196|
000014  dc1a              BGT      |L17.76|
000016  2800              CMP      r0,#0                 ;381
000018  d016              BEQ      |L17.72|
00001a  2810              CMP      r0,#0x10              ;381
00001c  d037              BEQ      |L17.142|
00001e  2811              CMP      r0,#0x11              ;381
000020  d012              BEQ      |L17.72|
000022  2812              CMP      r0,#0x12              ;381
000024  d110              BNE      |L17.72|
000026  2011              MOVS     r0,#0x11              ;404
000028  f7fffffe          BL       STATE_SwitchStep
00002c  2101              MOVS     r1,#1                 ;405
00002e  20ea              MOVS     r0,#0xea              ;405
000030  f7fffffe          BL       DUT_PROTOCOL_SendCmdParamAck
000034  2001              MOVS     r0,#1                 ;408
000036  9000              STR      r0,[sp,#0]            ;408
000038  9001              STR      r0,[sp,#4]            ;408
00003a  2317              MOVS     r3,#0x17              ;408
00003c  4aa0              LDR      r2,|L17.704|
00003e  f44f617a          MOV      r1,#0xfa0             ;408
000042  2008              MOVS     r0,#8                 ;408
000044  f7fffffe          BL       TIMER_AddTask
                  |L17.72|
;;;422    
;;;423                // 通知万用表测VCC
;;;424                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;425                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;426                Clear_All_Lines();
;;;427                Display_Centered(0, "HEADLIGHT");
;;;428                Display_Centered(1, "AVO METER");
;;;429                Display_Centered(2, "Measurement");
;;;430                break;
;;;431    
;;;432            case STEP_HEADLIGHT_UART_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;433                STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE);
;;;434                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;435    
;;;436                // 比对万用表返回的数值
;;;437                if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;438                {
;;;439                    Clear_All_Lines();
;;;440                    Display_Centered(0, "HEADLIGHT");
;;;441                    Display_Centered(1, "VCC");
;;;442                    Display_Centered(2, "Test Pass");
;;;443    
;;;444                    // 打开GND测试引脚
;;;445                    LED_VCC_TEST_EN_ON();
;;;446                    LED_VCC_EN_ON();
;;;447    
;;;448                    // 通知万用表测VCC
;;;449                    AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;450                    AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;451                    Clear_All_Lines();
;;;452                    Display_Centered(0, "HEADLIGHT");
;;;453                    Display_Centered(1, "AVO METER");
;;;454                    Display_Centered(2, "Measurement");
;;;455                }
;;;456                // 比对失败
;;;457                else
;;;458                {
;;;459        #if DEBUG_ENABLE
;;;460                    Clear_All_Lines();
;;;461                    Display_Centered(0, "VCC Abnormal");
;;;462                    Display_YX_Format(1, 0, "%f", measure.result);
;;;463                    Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;464                    Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;465        #endif
;;;466                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;467                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;468                }
;;;469                break;
;;;470    
;;;471            case STEP_HEADLIGHT_UART_TEST_CHECK_GND_VALUE: // 比对GND
;;;472                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;473    
;;;474                // 小于3V则GND导通测试通过
;;;475                if (LIGHT_GND_VOLTAGE_VALUE > measure.result)
;;;476                {
;;;477                    // 关闭大灯
;;;478                    DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_HEADLIGHT_CONTROL, 0);
;;;479                    Clear_All_Lines();
;;;480                    Display_Centered(0, "HEADLIGHT");
;;;481                    Display_Centered(1, "GND");
;;;482                    Display_Centered(2, "Test Pass");
;;;483                    STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE);       
;;;484                }
;;;485                else
;;;486                {
;;;487        #if DEBUG_ENABLE
;;;488                    Clear_All_Lines();
;;;489                    Display_Centered(0, "HEADLIGHT");
;;;490                    Display_Centered(1, "GND Abnormal");
;;;491                    Display_YX_Format(2, 0, "%f", measure.result);
;;;492        #endif
;;;493                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;494                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;495                    STATE_SwitchStep(STATE_STANDBY);
;;;496    
;;;497                }
;;;498                break;
;;;499    
;;;500            case STEP_HEADLIGHT_UART_TEST_COMPLETE: // 测试完成
;;;501                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;502                Clear_All_Lines();
;;;503                Display_Centered(0, "HEADLIGHT");
;;;504                Display_Centered(1, "Test Pass");
;;;505    
;;;506                // 上报测试成功
;;;507                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;508                AVO_PIN_Reset();
;;;509                STATE_EnterState(STATE_STANDBY);
;;;510                break;
;;;511    
;;;512            // 超时处理
;;;513            case STEP_HEADLIGHT_UART_TEST_COMMUNICATION_TIME_OUT:
;;;514                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;515                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;516                AVO_PIN_Reset();
;;;517                Clear_All_Lines();
;;;518                Display_Centered(0, "HEADLIGHT");
;;;519                Display_Centered(1, "Test Timeout");
;;;520                STATE_EnterState(STATE_STANDBY);
;;;521                break;
;;;522    
;;;523            default:
;;;524                break;
;;;525        }
;;;526    }
000048  e8bd81fc          POP      {r2-r8,pc}
                  |L17.76|
00004c  4d9d              LDR      r5,|L17.708|
00004e  2814              CMP      r0,#0x14              ;381
000050  d060              BEQ      |L17.276|
000052  2815              CMP      r0,#0x15              ;381
000054  d07e              BEQ      |L17.340|
000056  2816              CMP      r0,#0x16              ;381
000058  d07d              BEQ      |L17.342|
00005a  2817              CMP      r0,#0x17              ;381
00005c  d1f4              BNE      |L17.72|
00005e  2008              MOVS     r0,#8                 ;514
000060  f7fffffe          BL       TIMER_KillTask
000064  2100              MOVS     r1,#0                 ;515
000066  200b              MOVS     r0,#0xb               ;515
000068  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00006c  f7fffffe          BL       AVO_PIN_Reset
000070  f7fffffe          BL       Clear_All_Lines
000074  a194              ADR      r1,|L17.712|
000076  2000              MOVS     r0,#0                 ;518
000078  f7fffffe          BL       Display_Centered
00007c  a195              ADR      r1,|L17.724|
00007e  2001              MOVS     r0,#1                 ;519
000080  f7fffffe          BL       Display_Centered
000084  e8bd41fc          POP      {r2-r8,lr}            ;520
000088  2001              MOVS     r0,#1                 ;520
00008a  f7ffbffe          B.W      STATE_EnterState
                  |L17.142|
00008e  2012              MOVS     r0,#0x12              ;387
000090  f7fffffe          BL       STATE_SwitchStep
000094  6a20              LDR      r0,[r4,#0x20]         ;388  ; dut_info
000096  f7fffffe          BL       UART_DRIVE_InitSelect
00009a  f7fffffe          BL       DUT_PROTOCOL_Init
00009e  4991              LDR      r1,|L17.740|
0000a0  2000              MOVS     r0,#0                 ;390
0000a2  7008              STRB     r0,[r1,#0]            ;390
0000a4  4990              LDR      r1,|L17.744|
0000a6  7008              STRB     r0,[r1,#0]            ;391
0000a8  f7fffffe          BL       Clear_All_Lines
0000ac  a186              ADR      r1,|L17.712|
0000ae  2000              MOVS     r0,#0                 ;393
0000b0  f7fffffe          BL       Display_Centered
0000b4  a18d              ADR      r1,|L17.748|
0000b6  2001              MOVS     r0,#1                 ;394
0000b8  f7fffffe          BL       Display_Centered
0000bc  e8bd41fc          POP      {r2-r8,lr}            ;397
0000c0  f7ffbffe          B.W      AVO_PIN_Reset
                  |L17.196|
0000c4  2011              MOVS     r0,#0x11              ;417
0000c6  f7fffffe          BL       STATE_SwitchStep
0000ca  2008              MOVS     r0,#8                 ;418
0000cc  f7fffffe          BL       TIMER_ResetTimer
0000d0  4633              MOV      r3,r6                 ;421
0000d2  2203              MOVS     r2,#3                 ;421
0000d4  2110              MOVS     r1,#0x10              ;421
0000d6  4638              MOV      r0,r7                 ;421
0000d8  f7fffffe          BL       gpio_init
0000dc  4631              MOV      r1,r6                 ;421
0000de  4638              MOV      r0,r7                 ;421
0000e0  f7fffffe          BL       gpio_bit_set
0000e4  2100              MOVS     r1,#0                 ;424
0000e6  2001              MOVS     r0,#1                 ;424
0000e8  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000ec  2100              MOVS     r1,#0                 ;425
0000ee  2001              MOVS     r0,#1                 ;425
0000f0  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000f4  f7fffffe          BL       Clear_All_Lines
0000f8  a173              ADR      r1,|L17.712|
0000fa  2000              MOVS     r0,#0                 ;427
0000fc  f7fffffe          BL       Display_Centered
000100  a17c              ADR      r1,|L17.756|
000102  2001              MOVS     r0,#1                 ;428
000104  f7fffffe          BL       Display_Centered
000108  e8bd41fc          POP      {r2-r8,lr}            ;429
00010c  a17c              ADR      r1,|L17.768|
00010e  2002              MOVS     r0,#2                 ;429
000110  f7ffbffe          B.W      Display_Centered
                  |L17.276|
000114  2011              MOVS     r0,#0x11              ;433
000116  f7fffffe          BL       STATE_SwitchStep
00011a  2008              MOVS     r0,#8                 ;434
00011c  f7fffffe          BL       TIMER_ResetTimer
000120  6ba0              LDR      r0,[r4,#0x38]         ;437  ; dut_info
000122  f7fffffe          BL       __aeabi_ui2f
000126  6829              LDR      r1,[r5,#0]            ;437  ; measure
000128  f7fffffe          BL       __aeabi_cfcmple
00012c  d246              BCS      |L17.444|
00012e  6b60              LDR      r0,[r4,#0x34]         ;437  ; dut_info
000130  f7fffffe          BL       __aeabi_ui2f
000134  6829              LDR      r1,[r5,#0]            ;437  ; measure
000136  f7fffffe          BL       __aeabi_cfrcmple
00013a  d23f              BCS      |L17.444|
00013c  f7fffffe          BL       Clear_All_Lines
000140  a161              ADR      r1,|L17.712|
000142  2000              MOVS     r0,#0                 ;440
000144  f7fffffe          BL       Display_Centered
000148  a170              ADR      r1,|L17.780|
00014a  2001              MOVS     r0,#1                 ;441
00014c  f7fffffe          BL       Display_Centered
000150  a16f              ADR      r1,|L17.784|
000152  e001              B        |L17.344|
                  |L17.340|
000154  e057              B        |L17.518|
                  |L17.342|
000156  e094              B        |L17.642|
                  |L17.344|
000158  2002              MOVS     r0,#2                 ;442
00015a  f7fffffe          BL       Display_Centered
00015e  4633              MOV      r3,r6                 ;445
000160  2203              MOVS     r2,#3                 ;445
000162  2110              MOVS     r1,#0x10              ;445
000164  4638              MOV      r0,r7                 ;445
000166  f7fffffe          BL       gpio_init
00016a  4631              MOV      r1,r6                 ;445
00016c  4638              MOV      r0,r7                 ;445
00016e  f7fffffe          BL       gpio_bit_set
000172  4d6a              LDR      r5,|L17.796|
000174  f44f5480          MOV      r4,#0x1000            ;446
000178  4623              MOV      r3,r4                 ;446
00017a  2203              MOVS     r2,#3                 ;446
00017c  2110              MOVS     r1,#0x10              ;446
00017e  4628              MOV      r0,r5                 ;446
000180  f7fffffe          BL       gpio_init
000184  4621              MOV      r1,r4                 ;446
000186  4628              MOV      r0,r5                 ;446
000188  f7fffffe          BL       gpio_bit_set
00018c  2100              MOVS     r1,#0                 ;449
00018e  2001              MOVS     r0,#1                 ;449
000190  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000194  2100              MOVS     r1,#0                 ;450
000196  2001              MOVS     r0,#1                 ;450
000198  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00019c  f7fffffe          BL       Clear_All_Lines
0001a0  a149              ADR      r1,|L17.712|
0001a2  2000              MOVS     r0,#0                 ;452
0001a4  f7fffffe          BL       Display_Centered
0001a8  a152              ADR      r1,|L17.756|
0001aa  2001              MOVS     r0,#1                 ;453
0001ac  f7fffffe          BL       Display_Centered
0001b0  e8bd41fc          POP      {r2-r8,lr}            ;454
0001b4  a152              ADR      r1,|L17.768|
0001b6  2002              MOVS     r0,#2                 ;454
0001b8  f7ffbffe          B.W      Display_Centered
                  |L17.444|
0001bc  f7fffffe          BL       Clear_All_Lines
0001c0  a157              ADR      r1,|L17.800|
0001c2  2000              MOVS     r0,#0                 ;461
0001c4  f7fffffe          BL       Display_Centered
0001c8  6828              LDR      r0,[r5,#0]            ;462  ; measure
0001ca  f7fffffe          BL       __aeabi_f2d
0001ce  e9cd0100          STRD     r0,r1,[sp,#0]         ;462
0001d2  a257              ADR      r2,|L17.816|
0001d4  2100              MOVS     r1,#0                 ;462
0001d6  2001              MOVS     r0,#1                 ;462
0001d8  f7fffffe          BL       Display_YX_Format
0001dc  a255              ADR      r2,|L17.820|
0001de  2100              MOVS     r1,#0                 ;463
0001e0  2002              MOVS     r0,#2                 ;463
0001e2  6ba3              LDR      r3,[r4,#0x38]         ;463  ; dut_info
0001e4  f7fffffe          BL       Display_YX_Format
0001e8  a252              ADR      r2,|L17.820|
0001ea  2100              MOVS     r1,#0                 ;464
0001ec  2003              MOVS     r0,#3                 ;464
0001ee  6b63              LDR      r3,[r4,#0x34]         ;464  ; dut_info
0001f0  f7fffffe          BL       Display_YX_Format
0001f4  2100              MOVS     r1,#0                 ;466
0001f6  200b              MOVS     r0,#0xb               ;466
0001f8  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001fc  e8bd41fc          POP      {r2-r8,lr}            ;467
000200  2008              MOVS     r0,#8                 ;467
000202  f7ffbffe          B.W      TIMER_KillTask
                  |L17.518|
000206  2008              MOVS     r0,#8                 ;472
000208  f7fffffe          BL       TIMER_ResetTimer
00020c  494a              LDR      r1,|L17.824|
00020e  6828              LDR      r0,[r5,#0]            ;475  ; measure
000210  4288              CMP      r0,r1                 ;475
000212  da16              BGE      |L17.578|
000214  2100              MOVS     r1,#0                 ;478
000216  20ea              MOVS     r0,#0xea              ;478
000218  f7fffffe          BL       DUT_PROTOCOL_SendCmdParamAck
00021c  f7fffffe          BL       Clear_All_Lines
000220  a129              ADR      r1,|L17.712|
000222  2000              MOVS     r0,#0                 ;480
000224  f7fffffe          BL       Display_Centered
000228  a144              ADR      r1,|L17.828|
00022a  2001              MOVS     r0,#1                 ;481
00022c  f7fffffe          BL       Display_Centered
000230  a137              ADR      r1,|L17.784|
000232  2002              MOVS     r0,#2                 ;482
000234  f7fffffe          BL       Display_Centered
000238  e8bd41fc          POP      {r2-r8,lr}            ;483
00023c  2011              MOVS     r0,#0x11              ;483
00023e  f7ffbffe          B.W      STATE_SwitchStep
                  |L17.578|
000242  f7fffffe          BL       Clear_All_Lines
000246  a120              ADR      r1,|L17.712|
000248  2000              MOVS     r0,#0                 ;489
00024a  f7fffffe          BL       Display_Centered
00024e  a13c              ADR      r1,|L17.832|
000250  2001              MOVS     r0,#1                 ;490
000252  f7fffffe          BL       Display_Centered
000256  6828              LDR      r0,[r5,#0]            ;491  ; measure
000258  f7fffffe          BL       __aeabi_f2d
00025c  e9cd0100          STRD     r0,r1,[sp,#0]         ;491
000260  a233              ADR      r2,|L17.816|
000262  2100              MOVS     r1,#0                 ;491
000264  2002              MOVS     r0,#2                 ;491
000266  f7fffffe          BL       Display_YX_Format
00026a  2100              MOVS     r1,#0                 ;493
00026c  200b              MOVS     r0,#0xb               ;493
00026e  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000272  2008              MOVS     r0,#8                 ;494
000274  f7fffffe          BL       TIMER_KillTask
000278  e8bd41fc          POP      {r2-r8,lr}            ;495
00027c  2001              MOVS     r0,#1                 ;495
00027e  f7ffbffe          B.W      STATE_SwitchStep
                  |L17.642|
000282  2008              MOVS     r0,#8                 ;501
000284  f7fffffe          BL       TIMER_KillTask
000288  f7fffffe          BL       Clear_All_Lines
00028c  a10e              ADR      r1,|L17.712|
00028e  2000              MOVS     r0,#0                 ;503
000290  f7fffffe          BL       Display_Centered
000294  a11e              ADR      r1,|L17.784|
000296  2001              MOVS     r0,#1                 ;504
000298  f7fffffe          BL       Display_Centered
00029c  2101              MOVS     r1,#1                 ;507
00029e  200b              MOVS     r0,#0xb               ;507
0002a0  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0002a4  f7fffffe          BL       AVO_PIN_Reset
0002a8  e8bd41fc          POP      {r2-r8,lr}            ;509
0002ac  2001              MOVS     r0,#1                 ;509
0002ae  f7ffbffe          B.W      STATE_EnterState
;;;527    
                          ENDP

0002b2  0000              DCW      0x0000
                  |L17.692|
                          DCD      ||.data||+0x6
                  |L17.696|
                          DCD      0x40011400
                  |L17.700|
                          DCD      dut_info
                  |L17.704|
                          DCD      STATE_SwitchStep
                  |L17.708|
                          DCD      measure
                  |L17.712|
0002c8  48454144          DCB      "HEADLIGHT",0
0002cc  4c494748
0002d0  5400    
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L17.724|
0002d4  54657374          DCB      "Test Timeout",0
0002d8  2054696d
0002dc  656f7574
0002e0  00      
0002e1  00                DCB      0
0002e2  00                DCB      0
0002e3  00                DCB      0
                  |L17.740|
                          DCD      light_cnt
                  |L17.744|
                          DCD      headlight_cnt
                  |L17.748|
0002ec  54657374          DCB      "Testing",0
0002f0  696e6700
                  |L17.756|
0002f4  41564f20          DCB      "AVO METER",0
0002f8  4d455445
0002fc  5200    
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L17.768|
000300  4d656173          DCB      "Measurement",0
000304  7572656d
000308  656e7400
                  |L17.780|
00030c  56434300          DCB      "VCC",0
                  |L17.784|
000310  54657374          DCB      "Test Pass",0
000314  20506173
000318  7300    
00031a  00                DCB      0
00031b  00                DCB      0
                  |L17.796|
                          DCD      0x40010c00
                  |L17.800|
000320  56434320          DCB      "VCC Abnormal",0
000324  41626e6f
000328  726d616c
00032c  00      
00032d  00                DCB      0
00032e  00                DCB      0
00032f  00                DCB      0
                  |L17.816|
000330  256600            DCB      "%f",0
000333  00                DCB      0
                  |L17.820|
000334  256400            DCB      "%d",0
000337  00                DCB      0
                  |L17.824|
                          DCD      0x453b8000
                  |L17.828|
00033c  474e4400          DCB      "GND",0
                  |L17.832|
000340  474e4420          DCB      "GND Abnormal",0
000344  41626e6f
000348  726d616c
00034c  00      
00034d  00                DCB      0
00034e  00                DCB      0
00034f  00                DCB      0

                          AREA ||i.STEP_Process_LbeamCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_LbeamCanTest PROC
;;;2035   // 近光灯测试
;;;2036   void STEP_Process_LbeamCanTest(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;2037   {
;;;2038       switch (stateCB.step)
000004  48a5              LDR      r0,|L18.668|
;;;2039       {
;;;2040       case STEP_NULL: // 空步骤
;;;2041           break;
;;;2042   
;;;2043       case STEP_LBEAM_CAN_TEST_ENTRY: // 入口步骤
;;;2044           STATE_SwitchStep(STEP_LBEAM_CAN_TEST_NOTIFY_DUT);
;;;2045           CAN_PROTOCOL_TEST_Init(dut_info.can_baudRate); 
;;;2046           //        CAN_PROTOCOL1_Init();
;;;2047           light_cnt = 0;
;;;2048           headlight_cnt = 0;
;;;2049           Clear_All_Lines();
;;;2050           Display_Centered(0, "LBEAM");
;;;2051           Display_Centered(1, "Testing");
;;;2052   
;;;2053           // 测试引脚复位
;;;2054           AVO_PIN_Reset();
;;;2055           break;
;;;2056   
;;;2057       case STEP_LBEAM_CAN_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;2058           break;
;;;2059   
;;;2060       case STEP_LBEAM_CAN_TEST_NOTIFY_DUT: // 通知DUT打开近光灯步骤
;;;2061           STATE_SwitchStep(STEP_LBEAM_CAN_TEST_WAIT_RESPONSE);
;;;2062           DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 2, 1);
;;;2063   
;;;2064           // 添加超时
;;;2065           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;2066                         4000,
;;;2067                         STATE_SwitchStep,
;;;2068                         STEP_LBEAM_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;2069                         1,
;;;2070                         ACTION_MODE_ADD_TO_QUEUE);
;;;2071           break;
;;;2072   
;;;2073       case STEP_LBEAM_CAN_TEST_OPEN:      // 仪表打开近光灯成功
;;;2074           STATE_SwitchStep(STEP_LBEAM_CAN_TEST_WAIT_RESPONSE);
;;;2075           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2076   
;;;2077           // 打开VCC测试引脚
;;;2078           LED_LBEAM_TEST_EN_ON();
000006  4fa6              LDR      r7,|L18.672|
000008  4ca6              LDR      r4,|L18.676|
00000a  8840              LDRH     r0,[r0,#2]            ;2038  ; stateCB
00000c  f44f5600          MOV      r6,#0x2000
000010  2877              CMP      r0,#0x77              ;2038
000012  d056              BEQ      |L18.194|
000014  dc1b              BGT      |L18.78|
000016  2800              CMP      r0,#0                 ;2038
000018  d017              BEQ      |L18.74|
00001a  2874              CMP      r0,#0x74              ;2038
00001c  d038              BEQ      |L18.144|
00001e  2875              CMP      r0,#0x75              ;2038
000020  d013              BEQ      |L18.74|
000022  2876              CMP      r0,#0x76              ;2038
000024  d111              BNE      |L18.74|
000026  2075              MOVS     r0,#0x75              ;2061
000028  f7fffffe          BL       STATE_SwitchStep
00002c  2201              MOVS     r2,#1                 ;2062
00002e  2102              MOVS     r1,#2                 ;2062
000030  20ec              MOVS     r0,#0xec              ;2062
000032  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000036  2001              MOVS     r0,#1                 ;2065
000038  9000              STR      r0,[sp,#0]            ;2065
00003a  9001              STR      r0,[sp,#4]            ;2065
00003c  237b              MOVS     r3,#0x7b              ;2065
00003e  4a9a              LDR      r2,|L18.680|
000040  f44f617a          MOV      r1,#0xfa0             ;2065
000044  2008              MOVS     r0,#8                 ;2065
000046  f7fffffe          BL       TIMER_AddTask
                  |L18.74|
;;;2079   
;;;2080           // 通知万用表测VCC
;;;2081           AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;2082           Clear_All_Lines();
;;;2083           Display_Centered(0, "LBEAM");
;;;2084           Display_Centered(1, "AVO METER");
;;;2085           Display_Centered(2, "Measurement");
;;;2086           break;
;;;2087   
;;;2088       case STEP_LBEAM_CAN_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;2089           STATE_SwitchStep(STEP_LBEAM_CAN_TEST_WAIT_RESPONSE);
;;;2090           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2091   
;;;2092           // 比对万用表返回的数值
;;;2093           if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;2094           {
;;;2095               Clear_All_Lines();
;;;2096               Display_Centered(0, "LBEAM");
;;;2097               Display_Centered(1, "VCC");
;;;2098               Display_Centered(2, "Test Pass");
;;;2099   
;;;2100               // 打开GND测试引脚
;;;2101               LED_LBEAM_TEST_EN_ON();
;;;2102               LED_LBEAM_EN_ON();
;;;2103   
;;;2104               // 通知万用表测VCC
;;;2105               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;2106               Clear_All_Lines();
;;;2107               Display_Centered(0, "LBEAM");
;;;2108               Display_Centered(1, "AVO METER");
;;;2109               Display_Centered(2, "Measurement");
;;;2110           }
;;;2111           // 比对失败
;;;2112           else
;;;2113           {
;;;2114   #if DEBUG_ENABLE
;;;2115               Clear_All_Lines();
;;;2116               Display_Centered(0, "VCC Abnormal");
;;;2117               Display_YX_Format(1, 0, "%f", measure.result);
;;;2118               Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;2119               Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;2120   #endif
;;;2121               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2122               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2123           }
;;;2124           break;
;;;2125   
;;;2126       case STEP_LBEAM_CAN_TEST_CHECK_GND_VALUE: // 比对GND
;;;2127           STATE_SwitchStep(STEP_LBEAM_CAN_TEST_WAIT_RESPONSE);
;;;2128           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2129   
;;;2130           // 小于3V则GND导通测试通过
;;;2131           if (LIGHT_GND_VOLTAGE_VALUE > measure.result)
;;;2132           {
;;;2133               // 关闭近光灯
;;;2134               DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 2, 0);
;;;2135               Clear_All_Lines();
;;;2136               Display_Centered(0, "LBEAM");
;;;2137               Display_Centered(1, "GND");
;;;2138               Display_Centered(2, "Test Pass");
;;;2139           }
;;;2140           else
;;;2141           {
;;;2142   #if DEBUG_ENABLE
;;;2143               Clear_All_Lines();
;;;2144               Display_Centered(0, "LBEAM");
;;;2145               Display_Centered(1, "GND Abnormal");
;;;2146               Display_YX_Format(2, 0, "%f", measure.result);
;;;2147   #endif
;;;2148               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2149               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2150           }
;;;2151           break;
;;;2152   
;;;2153       case STEP_LBEAM_CAN_TEST_COMPLETE: // 测试完成
;;;2154           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2155           Clear_All_Lines();
;;;2156           Display_Centered(0, "LBEAM");
;;;2157           Display_Centered(1, "Test Pass");
;;;2158   
;;;2159           // 上报测试成功
;;;2160           STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;2161           AVO_PIN_Reset();
;;;2162           STATE_EnterState(STATE_STANDBY);
;;;2163           break;
;;;2164   
;;;2165       // 超时处理
;;;2166       case STEP_LBEAM_CAN_TEST_COMMUNICATION_TIME_OUT:
;;;2167           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2168           STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2169           AVO_PIN_Reset();
;;;2170           Clear_All_Lines();
;;;2171           Display_Centered(0, "LBEAM");
;;;2172           Display_Centered(1, "Test Timeout");
;;;2173           STATE_EnterState(STATE_STANDBY);
;;;2174           break;
;;;2175   
;;;2176       default:
;;;2177           break;
;;;2178       }
;;;2179   }
00004a  e8bd81fc          POP      {r2-r8,pc}
                  |L18.78|
00004e  4d97              LDR      r5,|L18.684|
000050  2878              CMP      r0,#0x78              ;2038
000052  d05a              BEQ      |L18.266|
000054  2879              CMP      r0,#0x79              ;2038
000056  d07d              BEQ      |L18.340|
000058  287a              CMP      r0,#0x7a              ;2038
00005a  d07c              BEQ      |L18.342|
00005c  287b              CMP      r0,#0x7b              ;2038
00005e  d1f4              BNE      |L18.74|
000060  2008              MOVS     r0,#8                 ;2167
000062  f7fffffe          BL       TIMER_KillTask
000066  2100              MOVS     r1,#0                 ;2168
000068  200b              MOVS     r0,#0xb               ;2168
00006a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00006e  f7fffffe          BL       AVO_PIN_Reset
000072  f7fffffe          BL       Clear_All_Lines
000076  a18e              ADR      r1,|L18.688|
000078  2000              MOVS     r0,#0                 ;2171
00007a  f7fffffe          BL       Display_Centered
00007e  a18e              ADR      r1,|L18.696|
000080  2001              MOVS     r0,#1                 ;2172
000082  f7fffffe          BL       Display_Centered
000086  e8bd41fc          POP      {r2-r8,lr}            ;2173
00008a  2001              MOVS     r0,#1                 ;2173
00008c  f7ffbffe          B.W      STATE_EnterState
                  |L18.144|
000090  2076              MOVS     r0,#0x76              ;2044
000092  f7fffffe          BL       STATE_SwitchStep
000096  8ba0              LDRH     r0,[r4,#0x1c]         ;2045  ; dut_info
000098  f7fffffe          BL       CAN_PROTOCOL_TEST_Init
00009c  498a              LDR      r1,|L18.712|
00009e  2000              MOVS     r0,#0                 ;2047
0000a0  7008              STRB     r0,[r1,#0]            ;2047
0000a2  498a              LDR      r1,|L18.716|
0000a4  7008              STRB     r0,[r1,#0]            ;2048
0000a6  f7fffffe          BL       Clear_All_Lines
0000aa  a181              ADR      r1,|L18.688|
0000ac  2000              MOVS     r0,#0                 ;2050
0000ae  f7fffffe          BL       Display_Centered
0000b2  a187              ADR      r1,|L18.720|
0000b4  2001              MOVS     r0,#1                 ;2051
0000b6  f7fffffe          BL       Display_Centered
0000ba  e8bd41fc          POP      {r2-r8,lr}            ;2054
0000be  f7ffbffe          B.W      AVO_PIN_Reset
                  |L18.194|
0000c2  2075              MOVS     r0,#0x75              ;2074
0000c4  f7fffffe          BL       STATE_SwitchStep
0000c8  2008              MOVS     r0,#8                 ;2075
0000ca  f7fffffe          BL       TIMER_ResetTimer
0000ce  4633              MOV      r3,r6                 ;2078
0000d0  2203              MOVS     r2,#3                 ;2078
0000d2  2110              MOVS     r1,#0x10              ;2078
0000d4  4638              MOV      r0,r7                 ;2078
0000d6  f7fffffe          BL       gpio_init
0000da  4631              MOV      r1,r6                 ;2078
0000dc  4638              MOV      r0,r7                 ;2078
0000de  f7fffffe          BL       gpio_bit_set
0000e2  2100              MOVS     r1,#0                 ;2081
0000e4  2001              MOVS     r0,#1                 ;2081
0000e6  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000ea  f7fffffe          BL       Clear_All_Lines
0000ee  a170              ADR      r1,|L18.688|
0000f0  2000              MOVS     r0,#0                 ;2083
0000f2  f7fffffe          BL       Display_Centered
0000f6  a178              ADR      r1,|L18.728|
0000f8  2001              MOVS     r0,#1                 ;2084
0000fa  f7fffffe          BL       Display_Centered
0000fe  e8bd41fc          POP      {r2-r8,lr}            ;2085
000102  a178              ADR      r1,|L18.740|
000104  2002              MOVS     r0,#2                 ;2085
000106  f7ffbffe          B.W      Display_Centered
                  |L18.266|
00010a  2075              MOVS     r0,#0x75              ;2089
00010c  f7fffffe          BL       STATE_SwitchStep
000110  2008              MOVS     r0,#8                 ;2090
000112  f7fffffe          BL       TIMER_ResetTimer
000116  6ba0              LDR      r0,[r4,#0x38]         ;2093  ; dut_info
000118  f7fffffe          BL       __aeabi_ui2f
00011c  6829              LDR      r1,[r5,#0]            ;2093  ; measure
00011e  f7fffffe          BL       __aeabi_cfcmple
000122  d242              BCS      |L18.426|
000124  6b60              LDR      r0,[r4,#0x34]         ;2093  ; dut_info
000126  f7fffffe          BL       __aeabi_ui2f
00012a  6829              LDR      r1,[r5,#0]            ;2093  ; measure
00012c  f7fffffe          BL       __aeabi_cfrcmple
000130  d23b              BCS      |L18.426|
000132  f7fffffe          BL       Clear_All_Lines
000136  a15e              ADR      r1,|L18.688|
000138  2000              MOVS     r0,#0                 ;2096
00013a  f7fffffe          BL       Display_Centered
00013e  a16c              ADR      r1,|L18.752|
000140  2001              MOVS     r0,#1                 ;2097
000142  f7fffffe          BL       Display_Centered
000146  a16b              ADR      r1,|L18.756|
000148  2002              MOVS     r0,#2                 ;2098
00014a  f7fffffe          BL       Display_Centered
00014e  4633              MOV      r3,r6                 ;2101
000150  2203              MOVS     r2,#3                 ;2101
000152  e001              B        |L18.344|
                  |L18.340|
000154  e04e              B        |L18.500|
                  |L18.342|
000156  e089              B        |L18.620|
                  |L18.344|
000158  2110              MOVS     r1,#0x10              ;2101
00015a  4638              MOV      r0,r7                 ;2101
00015c  f7fffffe          BL       gpio_init
000160  4631              MOV      r1,r6                 ;2101
000162  4638              MOV      r0,r7                 ;2101
000164  f7fffffe          BL       gpio_bit_set
000168  4d65              LDR      r5,|L18.768|
00016a  f44f4480          MOV      r4,#0x4000            ;2102
00016e  4623              MOV      r3,r4                 ;2102
000170  2203              MOVS     r2,#3                 ;2102
000172  2110              MOVS     r1,#0x10              ;2102
000174  4628              MOV      r0,r5                 ;2102
000176  f7fffffe          BL       gpio_init
00017a  4621              MOV      r1,r4                 ;2102
00017c  4628              MOV      r0,r5                 ;2102
00017e  f7fffffe          BL       gpio_bit_set
000182  2100              MOVS     r1,#0                 ;2105
000184  2001              MOVS     r0,#1                 ;2105
000186  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00018a  f7fffffe          BL       Clear_All_Lines
00018e  a148              ADR      r1,|L18.688|
000190  2000              MOVS     r0,#0                 ;2107
000192  f7fffffe          BL       Display_Centered
000196  a150              ADR      r1,|L18.728|
000198  2001              MOVS     r0,#1                 ;2108
00019a  f7fffffe          BL       Display_Centered
00019e  e8bd41fc          POP      {r2-r8,lr}            ;2109
0001a2  a150              ADR      r1,|L18.740|
0001a4  2002              MOVS     r0,#2                 ;2109
0001a6  f7ffbffe          B.W      Display_Centered
                  |L18.426|
0001aa  f7fffffe          BL       Clear_All_Lines
0001ae  a155              ADR      r1,|L18.772|
0001b0  2000              MOVS     r0,#0                 ;2116
0001b2  f7fffffe          BL       Display_Centered
0001b6  6828              LDR      r0,[r5,#0]            ;2117  ; measure
0001b8  f7fffffe          BL       __aeabi_f2d
0001bc  e9cd0100          STRD     r0,r1,[sp,#0]         ;2117
0001c0  a254              ADR      r2,|L18.788|
0001c2  2100              MOVS     r1,#0                 ;2117
0001c4  2001              MOVS     r0,#1                 ;2117
0001c6  f7fffffe          BL       Display_YX_Format
0001ca  a253              ADR      r2,|L18.792|
0001cc  2100              MOVS     r1,#0                 ;2118
0001ce  2002              MOVS     r0,#2                 ;2118
0001d0  6ba3              LDR      r3,[r4,#0x38]         ;2118  ; dut_info
0001d2  f7fffffe          BL       Display_YX_Format
0001d6  a250              ADR      r2,|L18.792|
0001d8  2100              MOVS     r1,#0                 ;2119
0001da  2003              MOVS     r0,#3                 ;2119
0001dc  6b63              LDR      r3,[r4,#0x34]         ;2119  ; dut_info
0001de  f7fffffe          BL       Display_YX_Format
0001e2  2100              MOVS     r1,#0                 ;2121
0001e4  200b              MOVS     r0,#0xb               ;2121
0001e6  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001ea  e8bd41fc          POP      {r2-r8,lr}            ;2122
0001ee  2008              MOVS     r0,#8                 ;2122
0001f0  f7ffbffe          B.W      TIMER_KillTask
                  |L18.500|
0001f4  2075              MOVS     r0,#0x75              ;2127
0001f6  f7fffffe          BL       STATE_SwitchStep
0001fa  2008              MOVS     r0,#8                 ;2128
0001fc  f7fffffe          BL       TIMER_ResetTimer
000200  4946              LDR      r1,|L18.796|
000202  6828              LDR      r0,[r5,#0]            ;2131  ; measure
000204  4288              CMP      r0,r1                 ;2131
000206  da14              BGE      |L18.562|
000208  2200              MOVS     r2,#0                 ;2134
00020a  2102              MOVS     r1,#2                 ;2134
00020c  20ec              MOVS     r0,#0xec              ;2134
00020e  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000212  f7fffffe          BL       Clear_All_Lines
000216  a126              ADR      r1,|L18.688|
000218  2000              MOVS     r0,#0                 ;2136
00021a  f7fffffe          BL       Display_Centered
00021e  a140              ADR      r1,|L18.800|
000220  2001              MOVS     r0,#1                 ;2137
000222  f7fffffe          BL       Display_Centered
000226  e8bd41fc          POP      {r2-r8,lr}            ;2138
00022a  a132              ADR      r1,|L18.756|
00022c  2002              MOVS     r0,#2                 ;2138
00022e  f7ffbffe          B.W      Display_Centered
                  |L18.562|
000232  f7fffffe          BL       Clear_All_Lines
000236  a11e              ADR      r1,|L18.688|
000238  2000              MOVS     r0,#0                 ;2144
00023a  f7fffffe          BL       Display_Centered
00023e  a139              ADR      r1,|L18.804|
000240  2001              MOVS     r0,#1                 ;2145
000242  f7fffffe          BL       Display_Centered
000246  6828              LDR      r0,[r5,#0]            ;2146  ; measure
000248  f7fffffe          BL       __aeabi_f2d
00024c  e9cd0100          STRD     r0,r1,[sp,#0]         ;2146
000250  a230              ADR      r2,|L18.788|
000252  2100              MOVS     r1,#0                 ;2146
000254  2002              MOVS     r0,#2                 ;2146
000256  f7fffffe          BL       Display_YX_Format
00025a  2100              MOVS     r1,#0                 ;2148
00025c  200b              MOVS     r0,#0xb               ;2148
00025e  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000262  e8bd41fc          POP      {r2-r8,lr}            ;2149
000266  2008              MOVS     r0,#8                 ;2149
000268  f7ffbffe          B.W      TIMER_KillTask
                  |L18.620|
00026c  2008              MOVS     r0,#8                 ;2154
00026e  f7fffffe          BL       TIMER_KillTask
000272  f7fffffe          BL       Clear_All_Lines
000276  a10e              ADR      r1,|L18.688|
000278  2000              MOVS     r0,#0                 ;2156
00027a  f7fffffe          BL       Display_Centered
00027e  a11d              ADR      r1,|L18.756|
000280  2001              MOVS     r0,#1                 ;2157
000282  f7fffffe          BL       Display_Centered
000286  2101              MOVS     r1,#1                 ;2160
000288  200b              MOVS     r0,#0xb               ;2160
00028a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00028e  f7fffffe          BL       AVO_PIN_Reset
000292  e8bd41fc          POP      {r2-r8,lr}            ;2162
000296  2001              MOVS     r0,#1                 ;2162
000298  f7ffbffe          B.W      STATE_EnterState
;;;2180   
                          ENDP

                  |L18.668|
                          DCD      ||.data||+0x6
                  |L18.672|
                          DCD      0x40011400
                  |L18.676|
                          DCD      dut_info
                  |L18.680|
                          DCD      STATE_SwitchStep
                  |L18.684|
                          DCD      measure
                  |L18.688|
0002b0  4c424541          DCB      "LBEAM",0
0002b4  4d00    
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L18.696|
0002b8  54657374          DCB      "Test Timeout",0
0002bc  2054696d
0002c0  656f7574
0002c4  00      
0002c5  00                DCB      0
0002c6  00                DCB      0
0002c7  00                DCB      0
                  |L18.712|
                          DCD      light_cnt
                  |L18.716|
                          DCD      headlight_cnt
                  |L18.720|
0002d0  54657374          DCB      "Testing",0
0002d4  696e6700
                  |L18.728|
0002d8  41564f20          DCB      "AVO METER",0
0002dc  4d455445
0002e0  5200    
0002e2  00                DCB      0
0002e3  00                DCB      0
                  |L18.740|
0002e4  4d656173          DCB      "Measurement",0
0002e8  7572656d
0002ec  656e7400
                  |L18.752|
0002f0  56434300          DCB      "VCC",0
                  |L18.756|
0002f4  54657374          DCB      "Test Pass",0
0002f8  20506173
0002fc  7300    
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L18.768|
                          DCD      0x40010c00
                  |L18.772|
000304  56434320          DCB      "VCC Abnormal",0
000308  41626e6f
00030c  726d616c
000310  00      
000311  00                DCB      0
000312  00                DCB      0
000313  00                DCB      0
                  |L18.788|
000314  256600            DCB      "%f",0
000317  00                DCB      0
                  |L18.792|
000318  256400            DCB      "%d",0
00031b  00                DCB      0
                  |L18.796|
                          DCD      0x453b8000
                  |L18.800|
000320  474e4400          DCB      "GND",0
                  |L18.804|
000324  474e4420          DCB      "GND Abnormal",0
000328  41626e6f
00032c  726d616c
000330  00      
000331  00                DCB      0
000332  00                DCB      0
000333  00                DCB      0

                          AREA ||i.STEP_Process_LbeamUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_LbeamUartTest PROC
;;;528    // 近光灯测试
;;;529    void STEP_Process_LbeamUartTest(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;530    {
;;;531        switch (stateCB.step)
000004  48a6              LDR      r0,|L19.672|
;;;532        {
;;;533            case STEP_NULL: // 空步骤
;;;534                break;
;;;535    
;;;536            case STEP_LBEAM_UART_TEST_ENTRY: // 入口步骤
;;;537                STATE_SwitchStep(STEP_LBEAM_UART_TEST_NOTIFY_DUT);
;;;538                UART_DRIVE_InitSelect(dut_info.uart_baudRate);
;;;539                DUT_PROTOCOL_Init();
;;;540                light_cnt = 0;
;;;541                headlight_cnt = 0;
;;;542                Clear_All_Lines();
;;;543                Display_Centered(0, "LBEAM");
;;;544                Display_Centered(1, "Testing");
;;;545    
;;;546                // 测试引脚复位
;;;547                AVO_PIN_Reset();
;;;548                break;
;;;549    
;;;550            case STEP_LBEAM_UART_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;551                break;
;;;552    
;;;553            case STEP_LBEAM_UART_TEST_NOTIFY_DUT: // 通知DUT打开近光灯步骤
;;;554                STATE_SwitchStep(STEP_LBEAM_UART_TEST_WAIT_RESPONSE);
;;;555                DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 2, 1);
;;;556    
;;;557                // 添加超时
;;;558                TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;559                              4000,
;;;560                              STATE_SwitchStep,
;;;561                              STEP_LBEAM_UART_TEST_COMMUNICATION_TIME_OUT,
;;;562                              1,
;;;563                              ACTION_MODE_ADD_TO_QUEUE);
;;;564                break;
;;;565    
;;;566            case STEP_LBEAM_UART_TEST_OPEN:      // 仪表打开近光灯成功
;;;567                STATE_SwitchStep(STEP_LBEAM_UART_TEST_WAIT_RESPONSE);
;;;568                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;569    
;;;570                // 打开VCC测试引脚
;;;571                LED_LBEAM_TEST_EN_ON();
000006  4fa7              LDR      r7,|L19.676|
000008  4ca7              LDR      r4,|L19.680|
00000a  8840              LDRH     r0,[r0,#2]            ;531  ; stateCB
00000c  f44f5600          MOV      r6,#0x2000
000010  281b              CMP      r0,#0x1b              ;531
000012  d058              BEQ      |L19.198|
000014  dc1b              BGT      |L19.78|
000016  2800              CMP      r0,#0                 ;531
000018  d017              BEQ      |L19.74|
00001a  2818              CMP      r0,#0x18              ;531
00001c  d038              BEQ      |L19.144|
00001e  2819              CMP      r0,#0x19              ;531
000020  d013              BEQ      |L19.74|
000022  281a              CMP      r0,#0x1a              ;531
000024  d111              BNE      |L19.74|
000026  2019              MOVS     r0,#0x19              ;554
000028  f7fffffe          BL       STATE_SwitchStep
00002c  2201              MOVS     r2,#1                 ;555
00002e  2102              MOVS     r1,#2                 ;555
000030  20ec              MOVS     r0,#0xec              ;555
000032  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000036  2001              MOVS     r0,#1                 ;558
000038  9000              STR      r0,[sp,#0]            ;558
00003a  9001              STR      r0,[sp,#4]            ;558
00003c  231f              MOVS     r3,#0x1f              ;558
00003e  4a9b              LDR      r2,|L19.684|
000040  f44f617a          MOV      r1,#0xfa0             ;558
000044  2008              MOVS     r0,#8                 ;558
000046  f7fffffe          BL       TIMER_AddTask
                  |L19.74|
;;;572    
;;;573                // 通知万用表测VCC
;;;574                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;575                Clear_All_Lines();
;;;576                Display_Centered(0, "LBEAM");
;;;577                Display_Centered(1, "AVO METER");
;;;578                Display_Centered(2, "Measurement");
;;;579                break;
;;;580    
;;;581            case STEP_LBEAM_UART_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;582                STATE_SwitchStep(STEP_LBEAM_UART_TEST_WAIT_RESPONSE);
;;;583                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;584    
;;;585                // 比对万用表返回的数值
;;;586                if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;587                {
;;;588                    Clear_All_Lines();
;;;589                    Display_Centered(0, "LBEAM");
;;;590                    Display_Centered(1, "VCC");
;;;591                    Display_Centered(2, "Test Pass");
;;;592    
;;;593                    // 打开GND测试引脚
;;;594                    LED_LBEAM_TEST_EN_ON();
;;;595                    LED_LBEAM_EN_ON();
;;;596    
;;;597                    // 通知万用表测VCC
;;;598                    AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;599                    Clear_All_Lines();
;;;600                    Display_Centered(0, "LBEAM");
;;;601                    Display_Centered(1, "AVO METER");
;;;602                    Display_Centered(2, "Measurement");
;;;603                }
;;;604                // 比对失败
;;;605                else
;;;606                {
;;;607        #if DEBUG_ENABLE
;;;608                    Clear_All_Lines();
;;;609                    Display_Centered(0, "VCC Abnormal");
;;;610                    Display_YX_Format(1, 0, "%f", measure.result);
;;;611                    Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;612                    Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;613        #endif
;;;614                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;615                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;616                }
;;;617                break;
;;;618    
;;;619            case STEP_LBEAM_UART_TEST_CHECK_GND_VALUE: // 比对GND
;;;620                STATE_SwitchStep(STEP_LBEAM_UART_TEST_WAIT_RESPONSE);
;;;621                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;622    
;;;623                // 小于3V则GND导通测试通过
;;;624                if (LIGHT_GND_VOLTAGE_VALUE > measure.result)
;;;625                {
;;;626                    // 关闭近光灯
;;;627                    DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 2, 0);
;;;628                    Clear_All_Lines();
;;;629                    Display_Centered(0, "LBEAM");
;;;630                    Display_Centered(1, "GND");
;;;631                    Display_Centered(2, "Test Pass");
;;;632                }
;;;633                else
;;;634                {
;;;635        #if DEBUG_ENABLE
;;;636                    Clear_All_Lines();
;;;637                    Display_Centered(0, "LBEAM");
;;;638                    Display_Centered(1, "GND Abnormal");
;;;639                    Display_YX_Format(2, 0, "%f", measure.result);
;;;640        #endif
;;;641                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;642                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;643                }
;;;644                break;
;;;645    
;;;646            case STEP_LBEAM_UART_TEST_COMPLETE: // 测试完成
;;;647                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;648                Clear_All_Lines();
;;;649                Display_Centered(0, "LBEAM");
;;;650                Display_Centered(1, "Test Pass");
;;;651    
;;;652                // 上报测试成功
;;;653                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;654                AVO_PIN_Reset();
;;;655                STATE_EnterState(STATE_STANDBY);
;;;656                break;
;;;657    
;;;658            // 超时处理
;;;659            case STEP_LBEAM_UART_TEST_COMMUNICATION_TIME_OUT:
;;;660                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;661                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;662                AVO_PIN_Reset();
;;;663                Clear_All_Lines();
;;;664                Display_Centered(0, "LBEAM");
;;;665                Display_Centered(1, "Test Timeout");
;;;666                STATE_EnterState(STATE_STANDBY);
;;;667                break;
;;;668    
;;;669            default:
;;;670                break;
;;;671        }
;;;672    }
00004a  e8bd81fc          POP      {r2-r8,pc}
                  |L19.78|
00004e  4d98              LDR      r5,|L19.688|
000050  281c              CMP      r0,#0x1c              ;531
000052  d05c              BEQ      |L19.270|
000054  281d              CMP      r0,#0x1d              ;531
000056  d07d              BEQ      |L19.340|
000058  281e              CMP      r0,#0x1e              ;531
00005a  d07c              BEQ      |L19.342|
00005c  281f              CMP      r0,#0x1f              ;531
00005e  d1f4              BNE      |L19.74|
000060  2008              MOVS     r0,#8                 ;660
000062  f7fffffe          BL       TIMER_KillTask
000066  2100              MOVS     r1,#0                 ;661
000068  200b              MOVS     r0,#0xb               ;661
00006a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00006e  f7fffffe          BL       AVO_PIN_Reset
000072  f7fffffe          BL       Clear_All_Lines
000076  a18f              ADR      r1,|L19.692|
000078  2000              MOVS     r0,#0                 ;664
00007a  f7fffffe          BL       Display_Centered
00007e  a18f              ADR      r1,|L19.700|
000080  2001              MOVS     r0,#1                 ;665
000082  f7fffffe          BL       Display_Centered
000086  e8bd41fc          POP      {r2-r8,lr}            ;666
00008a  2001              MOVS     r0,#1                 ;666
00008c  f7ffbffe          B.W      STATE_EnterState
                  |L19.144|
000090  201a              MOVS     r0,#0x1a              ;537
000092  f7fffffe          BL       STATE_SwitchStep
000096  6a20              LDR      r0,[r4,#0x20]         ;538  ; dut_info
000098  f7fffffe          BL       UART_DRIVE_InitSelect
00009c  f7fffffe          BL       DUT_PROTOCOL_Init
0000a0  498a              LDR      r1,|L19.716|
0000a2  2000              MOVS     r0,#0                 ;540
0000a4  7008              STRB     r0,[r1,#0]            ;540
0000a6  498a              LDR      r1,|L19.720|
0000a8  7008              STRB     r0,[r1,#0]            ;541
0000aa  f7fffffe          BL       Clear_All_Lines
0000ae  a181              ADR      r1,|L19.692|
0000b0  2000              MOVS     r0,#0                 ;543
0000b2  f7fffffe          BL       Display_Centered
0000b6  a187              ADR      r1,|L19.724|
0000b8  2001              MOVS     r0,#1                 ;544
0000ba  f7fffffe          BL       Display_Centered
0000be  e8bd41fc          POP      {r2-r8,lr}            ;547
0000c2  f7ffbffe          B.W      AVO_PIN_Reset
                  |L19.198|
0000c6  2019              MOVS     r0,#0x19              ;567
0000c8  f7fffffe          BL       STATE_SwitchStep
0000cc  2008              MOVS     r0,#8                 ;568
0000ce  f7fffffe          BL       TIMER_ResetTimer
0000d2  4633              MOV      r3,r6                 ;571
0000d4  2203              MOVS     r2,#3                 ;571
0000d6  2110              MOVS     r1,#0x10              ;571
0000d8  4638              MOV      r0,r7                 ;571
0000da  f7fffffe          BL       gpio_init
0000de  4631              MOV      r1,r6                 ;571
0000e0  4638              MOV      r0,r7                 ;571
0000e2  f7fffffe          BL       gpio_bit_set
0000e6  2100              MOVS     r1,#0                 ;574
0000e8  2001              MOVS     r0,#1                 ;574
0000ea  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000ee  f7fffffe          BL       Clear_All_Lines
0000f2  a170              ADR      r1,|L19.692|
0000f4  2000              MOVS     r0,#0                 ;576
0000f6  f7fffffe          BL       Display_Centered
0000fa  a178              ADR      r1,|L19.732|
0000fc  2001              MOVS     r0,#1                 ;577
0000fe  f7fffffe          BL       Display_Centered
000102  e8bd41fc          POP      {r2-r8,lr}            ;578
000106  a178              ADR      r1,|L19.744|
000108  2002              MOVS     r0,#2                 ;578
00010a  f7ffbffe          B.W      Display_Centered
                  |L19.270|
00010e  2019              MOVS     r0,#0x19              ;582
000110  f7fffffe          BL       STATE_SwitchStep
000114  2008              MOVS     r0,#8                 ;583
000116  f7fffffe          BL       TIMER_ResetTimer
00011a  6ba0              LDR      r0,[r4,#0x38]         ;586  ; dut_info
00011c  f7fffffe          BL       __aeabi_ui2f
000120  6829              LDR      r1,[r5,#0]            ;586  ; measure
000122  f7fffffe          BL       __aeabi_cfcmple
000126  d242              BCS      |L19.430|
000128  6b60              LDR      r0,[r4,#0x34]         ;586  ; dut_info
00012a  f7fffffe          BL       __aeabi_ui2f
00012e  6829              LDR      r1,[r5,#0]            ;586  ; measure
000130  f7fffffe          BL       __aeabi_cfrcmple
000134  d23b              BCS      |L19.430|
000136  f7fffffe          BL       Clear_All_Lines
00013a  a15e              ADR      r1,|L19.692|
00013c  2000              MOVS     r0,#0                 ;589
00013e  f7fffffe          BL       Display_Centered
000142  a16c              ADR      r1,|L19.756|
000144  2001              MOVS     r0,#1                 ;590
000146  f7fffffe          BL       Display_Centered
00014a  a16b              ADR      r1,|L19.760|
00014c  2002              MOVS     r0,#2                 ;591
00014e  f7fffffe          BL       Display_Centered
000152  e001              B        |L19.344|
                  |L19.340|
000154  e050              B        |L19.504|
                  |L19.342|
000156  e08b              B        |L19.624|
                  |L19.344|
000158  4633              MOV      r3,r6                 ;594
00015a  2203              MOVS     r2,#3                 ;594
00015c  2110              MOVS     r1,#0x10              ;594
00015e  4638              MOV      r0,r7                 ;594
000160  f7fffffe          BL       gpio_init
000164  4631              MOV      r1,r6                 ;594
000166  4638              MOV      r0,r7                 ;594
000168  f7fffffe          BL       gpio_bit_set
00016c  4d65              LDR      r5,|L19.772|
00016e  f44f4480          MOV      r4,#0x4000            ;595
000172  4623              MOV      r3,r4                 ;595
000174  2203              MOVS     r2,#3                 ;595
000176  2110              MOVS     r1,#0x10              ;595
000178  4628              MOV      r0,r5                 ;595
00017a  f7fffffe          BL       gpio_init
00017e  4621              MOV      r1,r4                 ;595
000180  4628              MOV      r0,r5                 ;595
000182  f7fffffe          BL       gpio_bit_set
000186  2100              MOVS     r1,#0                 ;598
000188  2001              MOVS     r0,#1                 ;598
00018a  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00018e  f7fffffe          BL       Clear_All_Lines
000192  a148              ADR      r1,|L19.692|
000194  2000              MOVS     r0,#0                 ;600
000196  f7fffffe          BL       Display_Centered
00019a  a150              ADR      r1,|L19.732|
00019c  2001              MOVS     r0,#1                 ;601
00019e  f7fffffe          BL       Display_Centered
0001a2  e8bd41fc          POP      {r2-r8,lr}            ;602
0001a6  a150              ADR      r1,|L19.744|
0001a8  2002              MOVS     r0,#2                 ;602
0001aa  f7ffbffe          B.W      Display_Centered
                  |L19.430|
0001ae  f7fffffe          BL       Clear_All_Lines
0001b2  a155              ADR      r1,|L19.776|
0001b4  2000              MOVS     r0,#0                 ;609
0001b6  f7fffffe          BL       Display_Centered
0001ba  6828              LDR      r0,[r5,#0]            ;610  ; measure
0001bc  f7fffffe          BL       __aeabi_f2d
0001c0  e9cd0100          STRD     r0,r1,[sp,#0]         ;610
0001c4  a254              ADR      r2,|L19.792|
0001c6  2100              MOVS     r1,#0                 ;610
0001c8  2001              MOVS     r0,#1                 ;610
0001ca  f7fffffe          BL       Display_YX_Format
0001ce  a253              ADR      r2,|L19.796|
0001d0  2100              MOVS     r1,#0                 ;611
0001d2  2002              MOVS     r0,#2                 ;611
0001d4  6ba3              LDR      r3,[r4,#0x38]         ;611  ; dut_info
0001d6  f7fffffe          BL       Display_YX_Format
0001da  a250              ADR      r2,|L19.796|
0001dc  2100              MOVS     r1,#0                 ;612
0001de  2003              MOVS     r0,#3                 ;612
0001e0  6b63              LDR      r3,[r4,#0x34]         ;612  ; dut_info
0001e2  f7fffffe          BL       Display_YX_Format
0001e6  2100              MOVS     r1,#0                 ;614
0001e8  200b              MOVS     r0,#0xb               ;614
0001ea  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001ee  e8bd41fc          POP      {r2-r8,lr}            ;615
0001f2  2008              MOVS     r0,#8                 ;615
0001f4  f7ffbffe          B.W      TIMER_KillTask
                  |L19.504|
0001f8  2019              MOVS     r0,#0x19              ;620
0001fa  f7fffffe          BL       STATE_SwitchStep
0001fe  2008              MOVS     r0,#8                 ;621
000200  f7fffffe          BL       TIMER_ResetTimer
000204  4946              LDR      r1,|L19.800|
000206  6828              LDR      r0,[r5,#0]            ;624  ; measure
000208  4288              CMP      r0,r1                 ;624
00020a  da14              BGE      |L19.566|
00020c  2200              MOVS     r2,#0                 ;627
00020e  2102              MOVS     r1,#2                 ;627
000210  20ec              MOVS     r0,#0xec              ;627
000212  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000216  f7fffffe          BL       Clear_All_Lines
00021a  a126              ADR      r1,|L19.692|
00021c  2000              MOVS     r0,#0                 ;629
00021e  f7fffffe          BL       Display_Centered
000222  a140              ADR      r1,|L19.804|
000224  2001              MOVS     r0,#1                 ;630
000226  f7fffffe          BL       Display_Centered
00022a  e8bd41fc          POP      {r2-r8,lr}            ;631
00022e  a132              ADR      r1,|L19.760|
000230  2002              MOVS     r0,#2                 ;631
000232  f7ffbffe          B.W      Display_Centered
                  |L19.566|
000236  f7fffffe          BL       Clear_All_Lines
00023a  a11e              ADR      r1,|L19.692|
00023c  2000              MOVS     r0,#0                 ;637
00023e  f7fffffe          BL       Display_Centered
000242  a139              ADR      r1,|L19.808|
000244  2001              MOVS     r0,#1                 ;638
000246  f7fffffe          BL       Display_Centered
00024a  6828              LDR      r0,[r5,#0]            ;639  ; measure
00024c  f7fffffe          BL       __aeabi_f2d
000250  e9cd0100          STRD     r0,r1,[sp,#0]         ;639
000254  a230              ADR      r2,|L19.792|
000256  2100              MOVS     r1,#0                 ;639
000258  2002              MOVS     r0,#2                 ;639
00025a  f7fffffe          BL       Display_YX_Format
00025e  2100              MOVS     r1,#0                 ;641
000260  200b              MOVS     r0,#0xb               ;641
000262  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000266  e8bd41fc          POP      {r2-r8,lr}            ;642
00026a  2008              MOVS     r0,#8                 ;642
00026c  f7ffbffe          B.W      TIMER_KillTask
                  |L19.624|
000270  2008              MOVS     r0,#8                 ;647
000272  f7fffffe          BL       TIMER_KillTask
000276  f7fffffe          BL       Clear_All_Lines
00027a  a10e              ADR      r1,|L19.692|
00027c  2000              MOVS     r0,#0                 ;649
00027e  f7fffffe          BL       Display_Centered
000282  a11d              ADR      r1,|L19.760|
000284  2001              MOVS     r0,#1                 ;650
000286  f7fffffe          BL       Display_Centered
00028a  2101              MOVS     r1,#1                 ;653
00028c  200b              MOVS     r0,#0xb               ;653
00028e  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000292  f7fffffe          BL       AVO_PIN_Reset
000296  e8bd41fc          POP      {r2-r8,lr}            ;655
00029a  2001              MOVS     r0,#1                 ;655
00029c  f7ffbffe          B.W      STATE_EnterState
;;;673    
                          ENDP

                  |L19.672|
                          DCD      ||.data||+0x6
                  |L19.676|
                          DCD      0x40011400
                  |L19.680|
                          DCD      dut_info
                  |L19.684|
                          DCD      STATE_SwitchStep
                  |L19.688|
                          DCD      measure
                  |L19.692|
0002b4  4c424541          DCB      "LBEAM",0
0002b8  4d00    
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L19.700|
0002bc  54657374          DCB      "Test Timeout",0
0002c0  2054696d
0002c4  656f7574
0002c8  00      
0002c9  00                DCB      0
0002ca  00                DCB      0
0002cb  00                DCB      0
                  |L19.716|
                          DCD      light_cnt
                  |L19.720|
                          DCD      headlight_cnt
                  |L19.724|
0002d4  54657374          DCB      "Testing",0
0002d8  696e6700
                  |L19.732|
0002dc  41564f20          DCB      "AVO METER",0
0002e0  4d455445
0002e4  5200    
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L19.744|
0002e8  4d656173          DCB      "Measurement",0
0002ec  7572656d
0002f0  656e7400
                  |L19.756|
0002f4  56434300          DCB      "VCC",0
                  |L19.760|
0002f8  54657374          DCB      "Test Pass",0
0002fc  20506173
000300  7300    
000302  00                DCB      0
000303  00                DCB      0
                  |L19.772|
                          DCD      0x40010c00
                  |L19.776|
000308  56434320          DCB      "VCC Abnormal",0
00030c  41626e6f
000310  726d616c
000314  00      
000315  00                DCB      0
000316  00                DCB      0
000317  00                DCB      0
                  |L19.792|
000318  256600            DCB      "%f",0
00031b  00                DCB      0
                  |L19.796|
00031c  256400            DCB      "%d",0
00031f  00                DCB      0
                  |L19.800|
                          DCD      0x453b8000
                  |L19.804|
000324  474e4400          DCB      "GND",0
                  |L19.808|
000328  474e4420          DCB      "GND Abnormal",0
00032c  41626e6f
000330  726d616c
000334  00      
000335  00                DCB      0
000336  00                DCB      0
000337  00                DCB      0

                          AREA ||i.STEP_Process_Left_TurnSignalCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_Left_TurnSignalCanTest PROC
;;;2327   // 左转向灯测试
;;;2328   void STEP_Process_Left_TurnSignalCanTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;2329   {
;;;2330       switch (stateCB.step)
000002  487b              LDR      r0,|L20.496|
;;;2331       {
;;;2332       case STEP_NULL: // 空步骤
;;;2333           break;
;;;2334   
;;;2335       case STEP_LEFT_TURN_SIGNAL_CAN_TEST_ENTRY: // 入口步骤
;;;2336           STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_CAN_TEST_NOTIFY_DUT);
;;;2337           IAP_CTRL_CAN_Init(dut_info.can_baudRate);
000004  4c7b              LDR      r4,|L20.500|
;;;2338           CAN_PROTOCOL1_Init();
;;;2339           //        can_left_light_cnt = 0;
;;;2340   
;;;2341           // 测试引脚复位
;;;2342           AVO_PIN_Reset();
;;;2343           break;
;;;2344   
;;;2345       case STEP_LEFT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;2346           break;
;;;2347   
;;;2348       case STEP_LEFT_TURN_SIGNAL_CAN_TEST_NOTIFY_DUT:    // 通知DUT打开左转向灯
;;;2349           STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2350           //        CAN_PROTOCOL1_SendCmdWith_TwoResult(CAN_PROTOCOL1_CMD_TURN_SIGNAL_CONTROL, 0, 1);
;;;2351   
;;;2352           // 添加超时
;;;2353           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;2354                         4000,
;;;2355                         STATE_SwitchStep,
;;;2356                         STEP_HEADLIGHT_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;2357                         1,
;;;2358                         ACTION_MODE_ADD_TO_QUEUE);
;;;2359           break;
;;;2360   
;;;2361       case STEP_LEFT_TURN_SIGNAL_CAN_TEST_OPEN:           // 打开左转向灯成功
;;;2362           STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2363           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2364   
;;;2365           // 打开GND测试引脚
;;;2366           //        TURN_GND_TEST_EN_ON();
;;;2367   
;;;2368           //        // 通知万用表测GND阻抗值
;;;2369           //        AVO_PROTOCOL_Send_Type_Chl(MEASURE_OHM, 0);
;;;2370           break;
;;;2371   
;;;2372       case STEP_LEFT_TURN_SIGNAL_CAN_TEST_CHECK_GND_VALUE: // 检查GND
;;;2373           STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2374           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2375   
;;;2376           // GND导通测试通过，则测VCC
;;;2377           if (measure.result == 0)
000006  4d7c              LDR      r5,|L20.504|
000008  8840              LDRH     r0,[r0,#2]            ;2330  ; stateCB
00000a  2888              CMP      r0,#0x88              ;2330
00000c  d045              BEQ      |L20.154|
00000e  dc1e              BGT      |L20.78|
000010  2885              CMP      r0,#0x85              ;2330
000012  d041              BEQ      |L20.152|
000014  dc0f              BGT      |L20.54|
000016  2800              CMP      r0,#0                 ;2330
000018  d03e              BEQ      |L20.152|
00001a  2884              CMP      r0,#0x84              ;2330
00001c  d13c              BNE      |L20.152|
00001e  2086              MOVS     r0,#0x86              ;2336
000020  f7fffffe          BL       STATE_SwitchStep
000024  8ba0              LDRH     r0,[r4,#0x1c]         ;2337  ; dut_info
000026  f7fffffe          BL       IAP_CTRL_CAN_Init
00002a  f7fffffe          BL       CAN_PROTOCOL1_Init
00002e  e8bd407c          POP      {r2-r6,lr}            ;2342
000032  f7ffbffe          B.W      AVO_PIN_Reset
                  |L20.54|
000036  2886              CMP      r0,#0x86              ;2330
000038  d021              BEQ      |L20.126|
00003a  2887              CMP      r0,#0x87              ;2330
00003c  d12c              BNE      |L20.152|
00003e  2085              MOVS     r0,#0x85              ;2362
000040  f7fffffe          BL       STATE_SwitchStep
000044  e8bd407c          POP      {r2-r6,lr}            ;2363
000048  2008              MOVS     r0,#8                 ;2363
00004a  f7ffbffe          B.W      TIMER_ResetTimer
                  |L20.78|
00004e  2889              CMP      r0,#0x89              ;2330
000050  d054              BEQ      |L20.252|
000052  288a              CMP      r0,#0x8a              ;2330
000054  d07e              BEQ      |L20.340|
000056  288b              CMP      r0,#0x8b              ;2330
000058  d07d              BEQ      |L20.342|
00005a  288c              CMP      r0,#0x8c              ;2330
00005c  d11c              BNE      |L20.152|
;;;2378           {
;;;2379               // 打开VCC测试引脚
;;;2380               LEFT_VCC_TEST_EN_ON();
;;;2381               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;2382           }
;;;2383           else
;;;2384           {
;;;2385   #if DEBUG_ENABLE
;;;2386               Clear_All_Lines();
;;;2387               Display_Centered(0, "Left TurnSignal GND abnormal");
;;;2388               Display_YX_Format(1, 0, "%f", measure.result);
;;;2389   #endif
;;;2390               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2391           }
;;;2392           break;
;;;2393   
;;;2394       case STEP_LEFT_TURN_SIGNAL_CAN_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;2395           STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2396           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2397   
;;;2398           if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;2399           {
;;;2400   //            CURRENT2_TEST_EN_ON();
;;;2401   //            LEFT_VCC_CURRENT_TEST_EN_ON();
;;;2402   //            AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCMA, 0);
;;;2403           }
;;;2404           else
;;;2405           {
;;;2406   #if DEBUG_ENABLE
;;;2407               Clear_All_Lines();
;;;2408               Display_Centered(0, "Left TurnSignal VCC abnormal");
;;;2409               Display_YX_Format(1, 0, "%f", measure.result);
;;;2410               Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;2411               Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;2412   #endif
;;;2413               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2414           }
;;;2415           break;
;;;2416   
;;;2417       case STEP_LEFT_TURN_SIGNAL_CAN_TEST_CHECK_CURRENT_VALUE: // 检查电流值步骤
;;;2418           STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2419           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2420   
;;;2421           // 左转向灯测试,最后测电流
;;;2422           if ((measure.result > dut_info.currentMin) && (measure.result < dut_info.currentMax))
;;;2423           {
;;;2424               // 测试通过关闭左转向灯
;;;2425               //            CAN_PROTOCOL1_SendCmdWith_TwoResult(CAN_PROTOCOL1_CMD_TURN_SIGNAL_CONTROL, 0, 0);
;;;2426           }
;;;2427           else
;;;2428           {
;;;2429   #if DEBUG_ENABLE
;;;2430               Clear_All_Lines();
;;;2431               Display_Centered(0, "Left TurnSignal CURRENT abnormal");
;;;2432               Display_YX_Format(1, 0, "%f", measure.result);
;;;2433               Display_YX_Format(2, 0, "%d", dut_info.currentMin);
;;;2434               Display_YX_Format(3, 0, "%d", dut_info.currentMax);
;;;2435   #endif
;;;2436               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2437           }
;;;2438           break;
;;;2439   
;;;2440       case STEP_LEFT_TURN_SIGNAL_CAN_TEST_COMPLETE: // 测试完成步骤
;;;2441           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2442   
;;;2443           // 关闭左转向灯并且上报测试成功
;;;2444           STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;2445           AVO_PIN_Reset();
;;;2446           break;
;;;2447   
;;;2448       // 超时处理
;;;2449       case STEP_LEFT_TURN_SIGNAL_CAN_TEST_COMMUNICATION_TIME_OUT:
;;;2450   #if DEBUG_ENABLE
;;;2451           Clear_All_Lines();
00005e  f7fffffe          BL       Clear_All_Lines
;;;2452           Display_Centered(0, "Left TurnSignal Timeout");
000062  a166              ADR      r1,|L20.508|
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       Display_Centered
;;;2453   #endif
;;;2454           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00006a  2008              MOVS     r0,#8
00006c  f7fffffe          BL       TIMER_KillTask
;;;2455           AVO_PIN_Reset();
000070  f7fffffe          BL       AVO_PIN_Reset
;;;2456           STATE_EnterState(STATE_STANDBY);
000074  e8bd407c          POP      {r2-r6,lr}
000078  2001              MOVS     r0,#1
00007a  f7ffbffe          B.W      STATE_EnterState
                  |L20.126|
00007e  2085              MOVS     r0,#0x85              ;2349
000080  f7fffffe          BL       STATE_SwitchStep
000084  2001              MOVS     r0,#1                 ;2353
000086  9000              STR      r0,[sp,#0]            ;2353
000088  9001              STR      r0,[sp,#4]            ;2353
00008a  2373              MOVS     r3,#0x73              ;2353
00008c  4a61              LDR      r2,|L20.532|
00008e  f44f617a          MOV      r1,#0xfa0             ;2353
000092  2008              MOVS     r0,#8                 ;2353
000094  f7fffffe          BL       TIMER_AddTask
                  |L20.152|
;;;2457           break;
;;;2458   
;;;2459       default:
;;;2460           break;
;;;2461       }
;;;2462   }
000098  bd7c              POP      {r2-r6,pc}
                  |L20.154|
00009a  2085              MOVS     r0,#0x85              ;2373
00009c  f7fffffe          BL       STATE_SwitchStep
0000a0  2008              MOVS     r0,#8                 ;2374
0000a2  f7fffffe          BL       TIMER_ResetTimer
0000a6  6828              LDR      r0,[r5,#0]            ;2377  ; measure
0000a8  f0104fff          TST      r0,#0x7f800000        ;2377
0000ac  d015              BEQ      |L20.218|
0000ae  f7fffffe          BL       Clear_All_Lines
0000b2  a159              ADR      r1,|L20.536|
0000b4  2000              MOVS     r0,#0                 ;2387
0000b6  f7fffffe          BL       Display_Centered
0000ba  6828              LDR      r0,[r5,#0]            ;2388  ; measure
0000bc  f7fffffe          BL       __aeabi_f2d
0000c0  e9cd0100          STRD     r0,r1,[sp,#0]         ;2388
0000c4  a25c              ADR      r2,|L20.568|
0000c6  2100              MOVS     r1,#0                 ;2388
0000c8  2001              MOVS     r0,#1                 ;2388
0000ca  f7fffffe          BL       Display_YX_Format
0000ce  e8bd407c          POP      {r2-r6,lr}            ;2390
0000d2  2100              MOVS     r1,#0                 ;2390
0000d4  200b              MOVS     r0,#0xb               ;2390
0000d6  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L20.218|
0000da  4c58              LDR      r4,|L20.572|
0000dc  2308              MOVS     r3,#8                 ;2380
0000de  2203              MOVS     r2,#3                 ;2380
0000e0  2110              MOVS     r1,#0x10              ;2380
0000e2  4620              MOV      r0,r4                 ;2380
0000e4  f7fffffe          BL       gpio_init
0000e8  2108              MOVS     r1,#8                 ;2380
0000ea  4620              MOV      r0,r4                 ;2380
0000ec  f7fffffe          BL       gpio_bit_set
0000f0  e8bd407c          POP      {r2-r6,lr}            ;2381
0000f4  2100              MOVS     r1,#0                 ;2381
0000f6  2001              MOVS     r0,#1                 ;2381
0000f8  f7ffbffe          B.W      AVO_PROTOCOL_Send_Type_Chl
                  |L20.252|
0000fc  2085              MOVS     r0,#0x85              ;2395
0000fe  f7fffffe          BL       STATE_SwitchStep
000102  2008              MOVS     r0,#8                 ;2396
000104  f7fffffe          BL       TIMER_ResetTimer
000108  6ba0              LDR      r0,[r4,#0x38]         ;2398  ; dut_info
00010a  f7fffffe          BL       __aeabi_ui2f
00010e  6829              LDR      r1,[r5,#0]            ;2398  ; measure
000110  f7fffffe          BL       __aeabi_cfcmple
000114  d206              BCS      |L20.292|
000116  6b60              LDR      r0,[r4,#0x34]         ;2398  ; dut_info
000118  f7fffffe          BL       __aeabi_ui2f
00011c  6829              LDR      r1,[r5,#0]            ;2398  ; measure
00011e  f7fffffe          BL       __aeabi_cfrcmple
000122  d3b9              BCC      |L20.152|
                  |L20.292|
000124  f7fffffe          BL       Clear_All_Lines
000128  a145              ADR      r1,|L20.576|
00012a  2000              MOVS     r0,#0                 ;2408
00012c  f7fffffe          BL       Display_Centered
000130  6828              LDR      r0,[r5,#0]            ;2409  ; measure
000132  f7fffffe          BL       __aeabi_f2d
000136  e9cd0100          STRD     r0,r1,[sp,#0]         ;2409
00013a  a23f              ADR      r2,|L20.568|
00013c  2100              MOVS     r1,#0                 ;2409
00013e  2001              MOVS     r0,#1                 ;2409
000140  f7fffffe          BL       Display_YX_Format
000144  a246              ADR      r2,|L20.608|
000146  2100              MOVS     r1,#0                 ;2410
000148  2002              MOVS     r0,#2                 ;2410
00014a  6ba3              LDR      r3,[r4,#0x38]         ;2410  ; dut_info
00014c  f7fffffe          BL       Display_YX_Format
000150  a243              ADR      r2,|L20.608|
000152  e001              B        |L20.344|
                  |L20.340|
000154  e00b              B        |L20.366|
                  |L20.342|
000156  e040              B        |L20.474|
                  |L20.344|
000158  2100              MOVS     r1,#0                 ;2411
00015a  2003              MOVS     r0,#3                 ;2411
00015c  6b63              LDR      r3,[r4,#0x34]         ;2411  ; dut_info
00015e  f7fffffe          BL       Display_YX_Format
000162  e8bd407c          POP      {r2-r6,lr}            ;2413
000166  2100              MOVS     r1,#0                 ;2413
000168  200b              MOVS     r0,#0xb               ;2413
00016a  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L20.366|
00016e  2085              MOVS     r0,#0x85              ;2418
000170  f7fffffe          BL       STATE_SwitchStep
000174  2008              MOVS     r0,#8                 ;2419
000176  f7fffffe          BL       TIMER_ResetTimer
00017a  8fe0              LDRH     r0,[r4,#0x3e]         ;2422  ; dut_info
00017c  f7fffffe          BL       __aeabi_ui2f
000180  6829              LDR      r1,[r5,#0]            ;2422  ; measure
000182  f7fffffe          BL       __aeabi_cfcmple
000186  d206              BCS      |L20.406|
000188  8fa0              LDRH     r0,[r4,#0x3c]         ;2422  ; dut_info
00018a  f7fffffe          BL       __aeabi_ui2f
00018e  6829              LDR      r1,[r5,#0]            ;2422  ; measure
000190  f7fffffe          BL       __aeabi_cfrcmple
000194  d380              BCC      |L20.152|
                  |L20.406|
000196  f7fffffe          BL       Clear_All_Lines
00019a  a132              ADR      r1,|L20.612|
00019c  2000              MOVS     r0,#0                 ;2431
00019e  f7fffffe          BL       Display_Centered
0001a2  6828              LDR      r0,[r5,#0]            ;2432  ; measure
0001a4  f7fffffe          BL       __aeabi_f2d
0001a8  e9cd0100          STRD     r0,r1,[sp,#0]         ;2432
0001ac  a222              ADR      r2,|L20.568|
0001ae  2100              MOVS     r1,#0                 ;2432
0001b0  2001              MOVS     r0,#1                 ;2432
0001b2  f7fffffe          BL       Display_YX_Format
0001b6  8fe3              LDRH     r3,[r4,#0x3e]         ;2433  ; dut_info
0001b8  a229              ADR      r2,|L20.608|
0001ba  2100              MOVS     r1,#0                 ;2433
0001bc  2002              MOVS     r0,#2                 ;2433
0001be  f7fffffe          BL       Display_YX_Format
0001c2  8fa3              LDRH     r3,[r4,#0x3c]         ;2434  ; dut_info
0001c4  a226              ADR      r2,|L20.608|
0001c6  2100              MOVS     r1,#0                 ;2434
0001c8  2003              MOVS     r0,#3                 ;2434
0001ca  f7fffffe          BL       Display_YX_Format
0001ce  e8bd407c          POP      {r2-r6,lr}            ;2436
0001d2  2100              MOVS     r1,#0                 ;2436
0001d4  200b              MOVS     r0,#0xb               ;2436
0001d6  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L20.474|
0001da  2008              MOVS     r0,#8                 ;2441
0001dc  f7fffffe          BL       TIMER_KillTask
0001e0  2101              MOVS     r1,#1                 ;2444
0001e2  200b              MOVS     r0,#0xb               ;2444
0001e4  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001e8  e8bd407c          POP      {r2-r6,lr}            ;2445
0001ec  f7ffbffe          B.W      AVO_PIN_Reset
;;;2463   
                          ENDP

                  |L20.496|
                          DCD      ||.data||+0x6
                  |L20.500|
                          DCD      dut_info
                  |L20.504|
                          DCD      measure
                  |L20.508|
0001fc  4c656674          DCB      "Left TurnSignal Timeout",0
000200  20547572
000204  6e536967
000208  6e616c20
00020c  54696d65
000210  6f757400
                  |L20.532|
                          DCD      STATE_SwitchStep
                  |L20.536|
000218  4c656674          DCB      "Left TurnSignal GND abnormal",0
00021c  20547572
000220  6e536967
000224  6e616c20
000228  474e4420
00022c  61626e6f
000230  726d616c
000234  00      
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0
                  |L20.568|
000238  256600            DCB      "%f",0
00023b  00                DCB      0
                  |L20.572|
                          DCD      0x40011400
                  |L20.576|
000240  4c656674          DCB      "Left TurnSignal VCC abnormal",0
000244  20547572
000248  6e536967
00024c  6e616c20
000250  56434320
000254  61626e6f
000258  726d616c
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L20.608|
000260  256400            DCB      "%d",0
000263  00                DCB      0
                  |L20.612|
000264  4c656674          DCB      "Left TurnSignal CURRENT abnormal",0
000268  20547572
00026c  6e536967
000270  6e616c20
000274  43555252
000278  454e5420
00027c  61626e6f
000280  726d616c
000284  00      
000285  00                DCB      0
000286  00                DCB      0
000287  00                DCB      0

                          AREA ||i.STEP_Process_Left_TurnSignalUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_Left_TurnSignalUartTest PROC
;;;820    // 左转向灯测试
;;;821    void STEP_Process_Left_TurnSignalUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;822    {
;;;823        switch (stateCB.step)
000002  48a5              LDR      r0,|L21.664|
;;;824        {
;;;825            case STEP_NULL: // 空步骤
;;;826                break;
;;;827    
;;;828            case STEP_LEFT_TURN_SIGNAL_UART_TEST_ENTRY: // 入口步骤
;;;829                STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_NOTIFY_DUT);
;;;830                UART_DRIVE_InitSelect(dut_info.uart_baudRate);
;;;831                DUT_PROTOCOL_Init();
;;;832                light_cnt = 0;
;;;833                headlight_cnt = 0;
;;;834                Clear_All_Lines();
;;;835                Display_Centered(0, "LEFT TURN SIGNAL");
;;;836                Display_Centered(1, "Testing");
;;;837    
;;;838                // 测试引脚复位
;;;839                AVO_PIN_Reset();
;;;840                break;
;;;841    
;;;842            case STEP_LEFT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;843                break;
;;;844    
;;;845            case STEP_LEFT_TURN_SIGNAL_UART_TEST_NOTIFY_DUT: // 通知DUT打开远光灯步骤
;;;846                STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;847                DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 0, 1);
;;;848    
;;;849                // 添加超时
;;;850                TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;851                              4000,
;;;852                              STATE_SwitchStep,
;;;853                              STEP_LEFT_TURN_SIGNAL_UART_TEST_COMMUNICATION_TIME_OUT,
;;;854                              1,
;;;855                              ACTION_MODE_ADD_TO_QUEUE);
;;;856                break;
;;;857    
;;;858            case STEP_LEFT_TURN_SIGNAL_UART_TEST_OPEN:      // 仪表打开远光灯成功
;;;859                STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;860                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;861    
;;;862                // 打开VCC测试引脚
;;;863                LEFT_VCC_TEST_EN_ON();
000004  4ea5              LDR      r6,|L21.668|
000006  4ca6              LDR      r4,|L21.672|
000008  8840              LDRH     r0,[r0,#2]            ;823  ; stateCB
00000a  282b              CMP      r0,#0x2b              ;823
00000c  d057              BEQ      |L21.190|
00000e  dc1a              BGT      |L21.70|
000010  2800              CMP      r0,#0                 ;823
000012  d017              BEQ      |L21.68|
000014  2828              CMP      r0,#0x28              ;823
000016  d037              BEQ      |L21.136|
000018  2829              CMP      r0,#0x29              ;823
00001a  d013              BEQ      |L21.68|
00001c  282a              CMP      r0,#0x2a              ;823
00001e  d111              BNE      |L21.68|
000020  2029              MOVS     r0,#0x29              ;846
000022  f7fffffe          BL       STATE_SwitchStep
000026  2201              MOVS     r2,#1                 ;847
000028  2100              MOVS     r1,#0                 ;847
00002a  20ec              MOVS     r0,#0xec              ;847
00002c  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000030  2001              MOVS     r0,#1                 ;850
000032  9000              STR      r0,[sp,#0]            ;850
000034  9001              STR      r0,[sp,#4]            ;850
000036  2330              MOVS     r3,#0x30              ;850
000038  4a9a              LDR      r2,|L21.676|
00003a  f44f617a          MOV      r1,#0xfa0             ;850
00003e  2008              MOVS     r0,#8                 ;850
000040  f7fffffe          BL       TIMER_AddTask
                  |L21.68|
;;;864    
;;;865                // 通知万用表测VCC
;;;866                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;867                Clear_All_Lines();
;;;868                Display_Centered(0, "LEFT TURN SIGNAL");
;;;869                Display_Centered(1, "AVO METER");
;;;870                Display_Centered(2, "Measurement");
;;;871                break;
;;;872    
;;;873            case STEP_LEFT_TURN_SIGNAL_UART_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;874                STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;875                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;876    
;;;877                // 比对万用表返回的数值
;;;878                if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;879                {
;;;880                    Clear_All_Lines();
;;;881                    Display_Centered(0, "LEFT TURN SIGNAL");
;;;882                    Display_Centered(1, "VCC");
;;;883                    Display_Centered(2, "Test Pass");
;;;884    
;;;885                    // 打开GND测试引脚
;;;886                    LEFT_VCC_TEST_EN_ON();
;;;887                    LEFT_VCC_EN_ON();
;;;888    
;;;889                    // 通知万用表测VCC
;;;890                    AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;891                    Clear_All_Lines();
;;;892                    Display_Centered(0, "LEFT TURN SIGNAL");
;;;893                    Display_Centered(1, "AVO METER");
;;;894                    Display_Centered(2, "Measurement");
;;;895                }
;;;896                // 比对失败
;;;897                else
;;;898                {
;;;899        #if DEBUG_ENABLE
;;;900                    Clear_All_Lines();
;;;901                    Display_Centered(0, "VCC Abnormal");
;;;902                    Display_YX_Format(1, 0, "%f", measure.result);
;;;903                    Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;904                    Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;905        #endif
;;;906                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;907                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;908                }
;;;909                break;
;;;910    
;;;911            case STEP_LEFT_TURN_SIGNAL_UART_TEST_CHECK_GND_VALUE: // 比对GND
;;;912                STATE_SwitchStep(STEP_HBEAM_UART_TEST_WAIT_RESPONSE);
;;;913                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;914    
;;;915                // 小于3V则GND导通测试通过
;;;916                if (LIGHT_GND_VOLTAGE_VALUE > measure.result)
;;;917                {
;;;918                    // 关闭远光灯
;;;919                    DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 0, 0);
;;;920                    Clear_All_Lines();
;;;921                    Display_Centered(0, "LEFT TURN SIGNAL");
;;;922                    Display_Centered(1, "GND");
;;;923                    Display_Centered(2, "Test Pass");
;;;924                }
;;;925                else
;;;926                {
;;;927        #if DEBUG_ENABLE
;;;928                    Clear_All_Lines();
;;;929                    Display_Centered(0, "LEFT TURN SIGNAL");
;;;930                    Display_Centered(1, "GND Abnormal");
;;;931                    Display_YX_Format(2, 0, "%f", measure.result);
;;;932        #endif
;;;933                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;934                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;935                }
;;;936                break;
;;;937    
;;;938            case STEP_LEFT_TURN_SIGNAL_UART_TEST_COMPLETE: // 测试完成
;;;939                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;940                Clear_All_Lines();
;;;941                Display_Centered(0, "LEFT TURN SIGNAL");
;;;942                Display_Centered(1, "Test Pass");
;;;943    
;;;944                // 上报测试成功
;;;945                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;946                AVO_PIN_Reset();
;;;947                STATE_EnterState(STATE_STANDBY);
;;;948                break;
;;;949    
;;;950            // 超时处理
;;;951            case STEP_LEFT_TURN_SIGNAL_UART_TEST_COMMUNICATION_TIME_OUT:
;;;952                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;953                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;954                AVO_PIN_Reset();
;;;955                Clear_All_Lines();
;;;956                Display_Centered(0, "LEFT TURN SIGNAL");
;;;957                Display_Centered(1, "Test Timeout");
;;;958                STATE_EnterState(STATE_STANDBY);
;;;959                break;
;;;960    
;;;961            default:
;;;962                break;
;;;963        }
;;;964    }
000044  bd7c              POP      {r2-r6,pc}
                  |L21.70|
000046  4d98              LDR      r5,|L21.680|
000048  282c              CMP      r0,#0x2c              ;823
00004a  d05c              BEQ      |L21.262|
00004c  282d              CMP      r0,#0x2d              ;823
00004e  d079              BEQ      |L21.324|
000050  282f              CMP      r0,#0x2f              ;823
000052  d078              BEQ      |L21.326|
000054  2830              CMP      r0,#0x30              ;823
000056  d1f5              BNE      |L21.68|
000058  2008              MOVS     r0,#8                 ;952
00005a  f7fffffe          BL       TIMER_KillTask
00005e  2100              MOVS     r1,#0                 ;953
000060  200b              MOVS     r0,#0xb               ;953
000062  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000066  f7fffffe          BL       AVO_PIN_Reset
00006a  f7fffffe          BL       Clear_All_Lines
00006e  a18f              ADR      r1,|L21.684|
000070  2000              MOVS     r0,#0                 ;956
000072  f7fffffe          BL       Display_Centered
000076  a192              ADR      r1,|L21.704|
000078  2001              MOVS     r0,#1                 ;957
00007a  f7fffffe          BL       Display_Centered
00007e  e8bd407c          POP      {r2-r6,lr}            ;958
000082  2001              MOVS     r0,#1                 ;958
000084  f7ffbffe          B.W      STATE_EnterState
                  |L21.136|
000088  202a              MOVS     r0,#0x2a              ;829
00008a  f7fffffe          BL       STATE_SwitchStep
00008e  6a20              LDR      r0,[r4,#0x20]         ;830  ; dut_info
000090  f7fffffe          BL       UART_DRIVE_InitSelect
000094  f7fffffe          BL       DUT_PROTOCOL_Init
000098  498d              LDR      r1,|L21.720|
00009a  2000              MOVS     r0,#0                 ;832
00009c  7008              STRB     r0,[r1,#0]            ;832
00009e  498d              LDR      r1,|L21.724|
0000a0  7008              STRB     r0,[r1,#0]            ;833
0000a2  f7fffffe          BL       Clear_All_Lines
0000a6  a181              ADR      r1,|L21.684|
0000a8  2000              MOVS     r0,#0                 ;835
0000aa  f7fffffe          BL       Display_Centered
0000ae  a18a              ADR      r1,|L21.728|
0000b0  2001              MOVS     r0,#1                 ;836
0000b2  f7fffffe          BL       Display_Centered
0000b6  e8bd407c          POP      {r2-r6,lr}            ;839
0000ba  f7ffbffe          B.W      AVO_PIN_Reset
                  |L21.190|
0000be  2029              MOVS     r0,#0x29              ;859
0000c0  f7fffffe          BL       STATE_SwitchStep
0000c4  2008              MOVS     r0,#8                 ;860
0000c6  f7fffffe          BL       TIMER_ResetTimer
0000ca  2308              MOVS     r3,#8                 ;863
0000cc  2203              MOVS     r2,#3                 ;863
0000ce  2110              MOVS     r1,#0x10              ;863
0000d0  4630              MOV      r0,r6                 ;863
0000d2  f7fffffe          BL       gpio_init
0000d6  2108              MOVS     r1,#8                 ;863
0000d8  4630              MOV      r0,r6                 ;863
0000da  f7fffffe          BL       gpio_bit_set
0000de  2100              MOVS     r1,#0                 ;866
0000e0  2001              MOVS     r0,#1                 ;866
0000e2  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000e6  f7fffffe          BL       Clear_All_Lines
0000ea  a170              ADR      r1,|L21.684|
0000ec  2000              MOVS     r0,#0                 ;868
0000ee  f7fffffe          BL       Display_Centered
0000f2  a17b              ADR      r1,|L21.736|
0000f4  2001              MOVS     r0,#1                 ;869
0000f6  f7fffffe          BL       Display_Centered
0000fa  e8bd407c          POP      {r2-r6,lr}            ;870
0000fe  a17b              ADR      r1,|L21.748|
000100  2002              MOVS     r0,#2                 ;870
000102  f7ffbffe          B.W      Display_Centered
                  |L21.262|
000106  2029              MOVS     r0,#0x29              ;874
000108  f7fffffe          BL       STATE_SwitchStep
00010c  2008              MOVS     r0,#8                 ;875
00010e  f7fffffe          BL       TIMER_ResetTimer
000112  6ba0              LDR      r0,[r4,#0x38]         ;878  ; dut_info
000114  f7fffffe          BL       __aeabi_ui2f
000118  6829              LDR      r1,[r5,#0]            ;878  ; measure
00011a  f7fffffe          BL       __aeabi_cfcmple
00011e  d242              BCS      |L21.422|
000120  6b60              LDR      r0,[r4,#0x34]         ;878  ; dut_info
000122  f7fffffe          BL       __aeabi_ui2f
000126  6829              LDR      r1,[r5,#0]            ;878  ; measure
000128  f7fffffe          BL       __aeabi_cfrcmple
00012c  d23b              BCS      |L21.422|
00012e  f7fffffe          BL       Clear_All_Lines
000132  a15e              ADR      r1,|L21.684|
000134  2000              MOVS     r0,#0                 ;881
000136  f7fffffe          BL       Display_Centered
00013a  a16f              ADR      r1,|L21.760|
00013c  2001              MOVS     r0,#1                 ;882
00013e  f7fffffe          BL       Display_Centered
000142  e001              B        |L21.328|
                  |L21.324|
000144  e054              B        |L21.496|
                  |L21.326|
000146  e08f              B        |L21.616|
                  |L21.328|
000148  a16c              ADR      r1,|L21.764|
00014a  2002              MOVS     r0,#2                 ;883
00014c  f7fffffe          BL       Display_Centered
000150  2308              MOVS     r3,#8                 ;886
000152  2203              MOVS     r2,#3                 ;886
000154  2110              MOVS     r1,#0x10              ;886
000156  4630              MOV      r0,r6                 ;886
000158  f7fffffe          BL       gpio_init
00015c  2108              MOVS     r1,#8                 ;886
00015e  4630              MOV      r0,r6                 ;886
000160  f7fffffe          BL       gpio_bit_set
000164  4d68              LDR      r5,|L21.776|
000166  f44f4400          MOV      r4,#0x8000            ;887
00016a  4623              MOV      r3,r4                 ;887
00016c  2203              MOVS     r2,#3                 ;887
00016e  2110              MOVS     r1,#0x10              ;887
000170  4628              MOV      r0,r5                 ;887
000172  f7fffffe          BL       gpio_init
000176  4621              MOV      r1,r4                 ;887
000178  4628              MOV      r0,r5                 ;887
00017a  f7fffffe          BL       gpio_bit_set
00017e  2100              MOVS     r1,#0                 ;890
000180  2001              MOVS     r0,#1                 ;890
000182  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000186  f7fffffe          BL       Clear_All_Lines
00018a  a148              ADR      r1,|L21.684|
00018c  2000              MOVS     r0,#0                 ;892
00018e  f7fffffe          BL       Display_Centered
000192  a153              ADR      r1,|L21.736|
000194  2001              MOVS     r0,#1                 ;893
000196  f7fffffe          BL       Display_Centered
00019a  e8bd407c          POP      {r2-r6,lr}            ;894
00019e  a153              ADR      r1,|L21.748|
0001a0  2002              MOVS     r0,#2                 ;894
0001a2  f7ffbffe          B.W      Display_Centered
                  |L21.422|
0001a6  f7fffffe          BL       Clear_All_Lines
0001aa  a158              ADR      r1,|L21.780|
0001ac  2000              MOVS     r0,#0                 ;901
0001ae  f7fffffe          BL       Display_Centered
0001b2  6828              LDR      r0,[r5,#0]            ;902  ; measure
0001b4  f7fffffe          BL       __aeabi_f2d
0001b8  e9cd0100          STRD     r0,r1,[sp,#0]         ;902
0001bc  a257              ADR      r2,|L21.796|
0001be  2100              MOVS     r1,#0                 ;902
0001c0  2001              MOVS     r0,#1                 ;902
0001c2  f7fffffe          BL       Display_YX_Format
0001c6  a256              ADR      r2,|L21.800|
0001c8  2100              MOVS     r1,#0                 ;903
0001ca  2002              MOVS     r0,#2                 ;903
0001cc  6ba3              LDR      r3,[r4,#0x38]         ;903  ; dut_info
0001ce  f7fffffe          BL       Display_YX_Format
0001d2  a253              ADR      r2,|L21.800|
0001d4  2100              MOVS     r1,#0                 ;904
0001d6  2003              MOVS     r0,#3                 ;904
0001d8  6b63              LDR      r3,[r4,#0x34]         ;904  ; dut_info
0001da  f7fffffe          BL       Display_YX_Format
0001de  2100              MOVS     r1,#0                 ;906
0001e0  200b              MOVS     r0,#0xb               ;906
0001e2  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001e6  e8bd407c          POP      {r2-r6,lr}            ;907
0001ea  2008              MOVS     r0,#8                 ;907
0001ec  f7ffbffe          B.W      TIMER_KillTask
                  |L21.496|
0001f0  2021              MOVS     r0,#0x21              ;912
0001f2  f7fffffe          BL       STATE_SwitchStep
0001f6  2008              MOVS     r0,#8                 ;913
0001f8  f7fffffe          BL       TIMER_ResetTimer
0001fc  4949              LDR      r1,|L21.804|
0001fe  6828              LDR      r0,[r5,#0]            ;916  ; measure
000200  4288              CMP      r0,r1                 ;916
000202  da14              BGE      |L21.558|
000204  2200              MOVS     r2,#0                 ;919
000206  4611              MOV      r1,r2                 ;919
000208  20ec              MOVS     r0,#0xec              ;919
00020a  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
00020e  f7fffffe          BL       Clear_All_Lines
000212  a126              ADR      r1,|L21.684|
000214  2000              MOVS     r0,#0                 ;921
000216  f7fffffe          BL       Display_Centered
00021a  a143              ADR      r1,|L21.808|
00021c  2001              MOVS     r0,#1                 ;922
00021e  f7fffffe          BL       Display_Centered
000222  e8bd407c          POP      {r2-r6,lr}            ;923
000226  a135              ADR      r1,|L21.764|
000228  2002              MOVS     r0,#2                 ;923
00022a  f7ffbffe          B.W      Display_Centered
                  |L21.558|
00022e  f7fffffe          BL       Clear_All_Lines
000232  a11e              ADR      r1,|L21.684|
000234  2000              MOVS     r0,#0                 ;929
000236  f7fffffe          BL       Display_Centered
00023a  a13c              ADR      r1,|L21.812|
00023c  2001              MOVS     r0,#1                 ;930
00023e  f7fffffe          BL       Display_Centered
000242  6828              LDR      r0,[r5,#0]            ;931  ; measure
000244  f7fffffe          BL       __aeabi_f2d
000248  e9cd0100          STRD     r0,r1,[sp,#0]         ;931
00024c  a233              ADR      r2,|L21.796|
00024e  2100              MOVS     r1,#0                 ;931
000250  2002              MOVS     r0,#2                 ;931
000252  f7fffffe          BL       Display_YX_Format
000256  2100              MOVS     r1,#0                 ;933
000258  200b              MOVS     r0,#0xb               ;933
00025a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00025e  e8bd407c          POP      {r2-r6,lr}            ;934
000262  2008              MOVS     r0,#8                 ;934
000264  f7ffbffe          B.W      TIMER_KillTask
                  |L21.616|
000268  2008              MOVS     r0,#8                 ;939
00026a  f7fffffe          BL       TIMER_KillTask
00026e  f7fffffe          BL       Clear_All_Lines
000272  a10e              ADR      r1,|L21.684|
000274  2000              MOVS     r0,#0                 ;941
000276  f7fffffe          BL       Display_Centered
00027a  a120              ADR      r1,|L21.764|
00027c  2001              MOVS     r0,#1                 ;942
00027e  f7fffffe          BL       Display_Centered
000282  2101              MOVS     r1,#1                 ;945
000284  200b              MOVS     r0,#0xb               ;945
000286  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00028a  f7fffffe          BL       AVO_PIN_Reset
00028e  e8bd407c          POP      {r2-r6,lr}            ;947
000292  2001              MOVS     r0,#1                 ;947
000294  f7ffbffe          B.W      STATE_EnterState
;;;965    
                          ENDP

                  |L21.664|
                          DCD      ||.data||+0x6
                  |L21.668|
                          DCD      0x40011400
                  |L21.672|
                          DCD      dut_info
                  |L21.676|
                          DCD      STATE_SwitchStep
                  |L21.680|
                          DCD      measure
                  |L21.684|
0002ac  4c454654          DCB      "LEFT TURN SIGNAL",0
0002b0  20545552
0002b4  4e205349
0002b8  474e414c
0002bc  00      
0002bd  00                DCB      0
0002be  00                DCB      0
0002bf  00                DCB      0
                  |L21.704|
0002c0  54657374          DCB      "Test Timeout",0
0002c4  2054696d
0002c8  656f7574
0002cc  00      
0002cd  00                DCB      0
0002ce  00                DCB      0
0002cf  00                DCB      0
                  |L21.720|
                          DCD      light_cnt
                  |L21.724|
                          DCD      headlight_cnt
                  |L21.728|
0002d8  54657374          DCB      "Testing",0
0002dc  696e6700
                  |L21.736|
0002e0  41564f20          DCB      "AVO METER",0
0002e4  4d455445
0002e8  5200    
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L21.748|
0002ec  4d656173          DCB      "Measurement",0
0002f0  7572656d
0002f4  656e7400
                  |L21.760|
0002f8  56434300          DCB      "VCC",0
                  |L21.764|
0002fc  54657374          DCB      "Test Pass",0
000300  20506173
000304  7300    
000306  00                DCB      0
000307  00                DCB      0
                  |L21.776|
                          DCD      0x40010c00
                  |L21.780|
00030c  56434320          DCB      "VCC Abnormal",0
000310  41626e6f
000314  726d616c
000318  00      
000319  00                DCB      0
00031a  00                DCB      0
00031b  00                DCB      0
                  |L21.796|
00031c  256600            DCB      "%f",0
00031f  00                DCB      0
                  |L21.800|
000320  256400            DCB      "%d",0
000323  00                DCB      0
                  |L21.804|
                          DCD      0x453b8000
                  |L21.808|
000328  474e4400          DCB      "GND",0
                  |L21.812|
00032c  474e4420          DCB      "GND Abnormal",0
000330  41626e6f
000334  726d616c
000338  00      
000339  00                DCB      0
00033a  00                DCB      0
00033b  00                DCB      0

                          AREA ||i.STEP_Process_Right_TurnSignalCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_Right_TurnSignalCanTest PROC
;;;2464   // 右转向灯测试
;;;2465   void STEP_Process_Right_TurnSignalCanTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;2466   {
;;;2467       switch (stateCB.step)
000002  4883              LDR      r0,|L22.528|
;;;2468       {
;;;2469       case STEP_NULL: // 空步骤
;;;2470           break;
;;;2471   
;;;2472       case STEP_RIGHT_TURN_SIGNAL_CAN_TEST_ENTRY: // 入口步骤
;;;2473           STATE_SwitchStep(STEP_HEADLIGHT_CAN_TEST_NOTIFY_DUT);
;;;2474           IAP_CTRL_CAN_Init(dut_info.can_baudRate);
000004  4c83              LDR      r4,|L22.532|
;;;2475           CAN_PROTOCOL1_Init();
;;;2476           //        can_right_light_cnt = 0;
;;;2477           Display_Centered(0, "Testing");
;;;2478   
;;;2479           // 测试引脚复位
;;;2480           AVO_PIN_Reset();
;;;2481           break;
;;;2482   
;;;2483       case STEP_RIGHT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;2484           break;
;;;2485   
;;;2486       case STEP_RIGHT_TURN_SIGNAL_CAN_TEST_NOTIFY_DUT:    // 通知DUT打开右转向灯
;;;2487           STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2488           //        CAN_PROTOCOL1_SendCmdWith_TwoResult(CAN_PROTOCOL1_CMD_TURN_SIGNAL_CONTROL, 1, 1);
;;;2489   
;;;2490           // 添加超时
;;;2491           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;2492                         4000,
;;;2493                         STATE_SwitchStep,
;;;2494                         STEP_HEADLIGHT_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;2495                         1,
;;;2496                         ACTION_MODE_ADD_TO_QUEUE);
;;;2497           break;
;;;2498   
;;;2499       case STEP_RIGHT_TURN_SIGNAL_CAN_TEST_OPEN:         // 右转向灯打开成功
;;;2500           STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2501           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2502   
;;;2503           //        // 打开GND测试引脚
;;;2504           //        TURN_GND_TEST_EN_ON();
;;;2505   
;;;2506           //        // 通知万用表测GND阻抗值
;;;2507           //        AVO_PROTOCOL_Send_Type_Chl(MEASURE_OHM, 0);
;;;2508           break;
;;;2509   
;;;2510       case STEP_RIGHT_TURN_SIGNAL_CAN_TEST_CHECK_GND_VALUE: // 检查接地值步骤
;;;2511           STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2512           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2513   
;;;2514           // GND导通测试通过，则测VCC
;;;2515           if (measure.result == 0)
000006  4d84              LDR      r5,|L22.536|
000008  8840              LDRH     r0,[r0,#2]            ;2467  ; stateCB
00000a  2891              CMP      r0,#0x91              ;2467
00000c  d04e              BEQ      |L22.172|
00000e  dc22              BGT      |L22.86|
000010  288e              CMP      r0,#0x8e              ;2467
000012  d04a              BEQ      |L22.170|
000014  dc13              BGT      |L22.62|
000016  2800              CMP      r0,#0                 ;2467
000018  d047              BEQ      |L22.170|
00001a  288d              CMP      r0,#0x8d              ;2467
00001c  d145              BNE      |L22.170|
00001e  206d              MOVS     r0,#0x6d              ;2473
000020  f7fffffe          BL       STATE_SwitchStep
000024  8ba0              LDRH     r0,[r4,#0x1c]         ;2474  ; dut_info
000026  f7fffffe          BL       IAP_CTRL_CAN_Init
00002a  f7fffffe          BL       CAN_PROTOCOL1_Init
00002e  a17b              ADR      r1,|L22.540|
000030  2000              MOVS     r0,#0                 ;2477
000032  f7fffffe          BL       Display_Centered
000036  e8bd407c          POP      {r2-r6,lr}            ;2480
00003a  f7ffbffe          B.W      AVO_PIN_Reset
                  |L22.62|
00003e  288f              CMP      r0,#0x8f              ;2467
000040  d026              BEQ      |L22.144|
000042  2890              CMP      r0,#0x90              ;2467
000044  d131              BNE      |L22.170|
000046  208e              MOVS     r0,#0x8e              ;2500
000048  f7fffffe          BL       STATE_SwitchStep
00004c  e8bd407c          POP      {r2-r6,lr}            ;2501
000050  2008              MOVS     r0,#8                 ;2501
000052  f7ffbffe          B.W      TIMER_ResetTimer
                  |L22.86|
000056  2892              CMP      r0,#0x92              ;2467
000058  d059              BEQ      |L22.270|
;;;2516           {
;;;2517               // 打开VCC测试引脚
;;;2518               RIGHT_VCC_TEST_EN_ON();
;;;2519               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;2520           }
;;;2521           else
;;;2522           {
;;;2523   #if DEBUG_ENABLE
;;;2524               Clear_All_Lines();
;;;2525               Display_Centered(0, "Right TurnSignal GND abnormal");
;;;2526               Display_YX_Format(1, 0, "%f", measure.result);
;;;2527   #endif
;;;2528               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2529           }
;;;2530           break;
;;;2531   
;;;2532       case STEP_RIGHT_TURN_SIGNAL_CAN_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;2533           STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2534           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2535           if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;2536           {
;;;2537               //            CURRENT2_TEST_EN_ON();
;;;2538               //            RIGHT_VCC_CURRENT_TEST_EN_ON();
;;;2539               //            AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCMA, 0);
;;;2540           }
;;;2541           else
;;;2542           {
;;;2543   #if DEBUG_ENABLE
;;;2544               Clear_All_Lines();
;;;2545               Display_Centered(0, "Right TurnSignal VCC abnormal");
;;;2546               Display_YX_Format(1, 0, "%f", measure.result);
;;;2547               Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;2548               Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;2549   #endif
;;;2550               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2551           }
;;;2552           break;
;;;2553   
;;;2554       case STEP_RIGHT_TURN_SIGNAL_CAN_TEST_CHECK_CURRENT_VALUE: // 检查电流值步骤
;;;2555           STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_CAN_TEST_WAIT_RESPONSE);
;;;2556           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2557   
;;;2558           // 右转向灯测试,最后测电流
;;;2559           if ((measure.result > dut_info.currentMin) && (measure.result < dut_info.currentMax))
;;;2560           {
;;;2561               // 测试通过关闭右转向灯
;;;2562               //            CAN_PROTOCOL1_SendCmdWith_TwoResult(CAN_PROTOCOL1_CMD_TURN_SIGNAL_CONTROL, 1, 0);
;;;2563           }
;;;2564           else
;;;2565           {
;;;2566   #if DEBUG_ENABLE
;;;2567               Clear_All_Lines();
;;;2568               Display_Centered(0, "Right TurnSignal CURRENT abnormal");
;;;2569               Display_YX_Format(1, 0, "%f", measure.result);
;;;2570               Display_YX_Format(2, 0, "%d", dut_info.currentMin);
;;;2571               Display_YX_Format(3, 0, "%d", dut_info.currentMax);
;;;2572               Delayms(1000);
00005a  f44f767a          MOV      r6,#0x3e8
00005e  2893              CMP      r0,#0x93              ;2467
000060  d07e              BEQ      |L22.352|
000062  2894              CMP      r0,#0x94              ;2467
000064  d07d              BEQ      |L22.354|
000066  2895              CMP      r0,#0x95              ;2467
000068  d11f              BNE      |L22.170|
;;;2573   #endif
;;;2574               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2575           }
;;;2576           break;
;;;2577   
;;;2578       case STEP_RIGHT_TURN_SIGNAL_CAN_TEST_COMPLETE: // 测试完成步骤
;;;2579           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2580   
;;;2581           // 关闭右转向灯成功并且上报测试成功
;;;2582           STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;2583           AVO_PIN_Reset();
;;;2584           STATE_EnterState(STATE_STANDBY);
;;;2585           break;
;;;2586   
;;;2587       // 超时处理
;;;2588       case STEP_RIGHT_TURN_SIGNAL_CAN_TEST_COMMUNICATION_TIME_OUT:
;;;2589   #if DEBUG_ENABLE
;;;2590           Clear_All_Lines();
00006a  f7fffffe          BL       Clear_All_Lines
;;;2591           Display_Centered(0, "Right TurnSignal Timeout");
00006e  a16d              ADR      r1,|L22.548|
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       Display_Centered
;;;2592           Delayms(1000);
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       Delayms
;;;2593   #endif
;;;2594           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00007c  2008              MOVS     r0,#8
00007e  f7fffffe          BL       TIMER_KillTask
;;;2595           AVO_PIN_Reset();
000082  f7fffffe          BL       AVO_PIN_Reset
;;;2596           STATE_EnterState(STATE_STANDBY);
000086  e8bd407c          POP      {r2-r6,lr}
00008a  2001              MOVS     r0,#1
00008c  f7ffbffe          B.W      STATE_EnterState
                  |L22.144|
000090  208e              MOVS     r0,#0x8e              ;2487
000092  f7fffffe          BL       STATE_SwitchStep
000096  2001              MOVS     r0,#1                 ;2491
000098  9000              STR      r0,[sp,#0]            ;2491
00009a  9001              STR      r0,[sp,#4]            ;2491
00009c  2373              MOVS     r3,#0x73              ;2491
00009e  4a68              LDR      r2,|L22.576|
0000a0  f44f617a          MOV      r1,#0xfa0             ;2491
0000a4  2008              MOVS     r0,#8                 ;2491
0000a6  f7fffffe          BL       TIMER_AddTask
                  |L22.170|
;;;2597           break;
;;;2598   
;;;2599       default:
;;;2600           break;
;;;2601       }
;;;2602   }
0000aa  bd7c              POP      {r2-r6,pc}
                  |L22.172|
0000ac  208e              MOVS     r0,#0x8e              ;2511
0000ae  f7fffffe          BL       STATE_SwitchStep
0000b2  2008              MOVS     r0,#8                 ;2512
0000b4  f7fffffe          BL       TIMER_ResetTimer
0000b8  6828              LDR      r0,[r5,#0]            ;2515  ; measure
0000ba  f0104fff          TST      r0,#0x7f800000        ;2515
0000be  d015              BEQ      |L22.236|
0000c0  f7fffffe          BL       Clear_All_Lines
0000c4  a15f              ADR      r1,|L22.580|
0000c6  2000              MOVS     r0,#0                 ;2525
0000c8  f7fffffe          BL       Display_Centered
0000cc  6828              LDR      r0,[r5,#0]            ;2526  ; measure
0000ce  f7fffffe          BL       __aeabi_f2d
0000d2  e9cd0100          STRD     r0,r1,[sp,#0]         ;2526
0000d6  a263              ADR      r2,|L22.612|
0000d8  2100              MOVS     r1,#0                 ;2526
0000da  2001              MOVS     r0,#1                 ;2526
0000dc  f7fffffe          BL       Display_YX_Format
0000e0  e8bd407c          POP      {r2-r6,lr}            ;2528
0000e4  2100              MOVS     r1,#0                 ;2528
0000e6  200b              MOVS     r0,#0xb               ;2528
0000e8  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L22.236|
0000ec  4c5e              LDR      r4,|L22.616|
0000ee  2310              MOVS     r3,#0x10              ;2518
0000f0  2203              MOVS     r2,#3                 ;2518
0000f2  4619              MOV      r1,r3                 ;2518
0000f4  4620              MOV      r0,r4                 ;2518
0000f6  f7fffffe          BL       gpio_init
0000fa  2110              MOVS     r1,#0x10              ;2518
0000fc  4620              MOV      r0,r4                 ;2518
0000fe  f7fffffe          BL       gpio_bit_set
000102  e8bd407c          POP      {r2-r6,lr}            ;2519
000106  2100              MOVS     r1,#0                 ;2519
000108  2001              MOVS     r0,#1                 ;2519
00010a  f7ffbffe          B.W      AVO_PROTOCOL_Send_Type_Chl
                  |L22.270|
00010e  208e              MOVS     r0,#0x8e              ;2533
000110  f7fffffe          BL       STATE_SwitchStep
000114  2008              MOVS     r0,#8                 ;2534
000116  f7fffffe          BL       TIMER_ResetTimer
00011a  6ba0              LDR      r0,[r4,#0x38]         ;2535  ; dut_info
00011c  f7fffffe          BL       __aeabi_ui2f
000120  6829              LDR      r1,[r5,#0]            ;2535  ; measure
000122  f7fffffe          BL       __aeabi_cfcmple
000126  d206              BCS      |L22.310|
000128  6b60              LDR      r0,[r4,#0x34]         ;2535  ; dut_info
00012a  f7fffffe          BL       __aeabi_ui2f
00012e  6829              LDR      r1,[r5,#0]            ;2535  ; measure
000130  f7fffffe          BL       __aeabi_cfrcmple
000134  d3b9              BCC      |L22.170|
                  |L22.310|
000136  f7fffffe          BL       Clear_All_Lines
00013a  a14c              ADR      r1,|L22.620|
00013c  2000              MOVS     r0,#0                 ;2545
00013e  f7fffffe          BL       Display_Centered
000142  6828              LDR      r0,[r5,#0]            ;2546  ; measure
000144  f7fffffe          BL       __aeabi_f2d
000148  e9cd0100          STRD     r0,r1,[sp,#0]         ;2546
00014c  a245              ADR      r2,|L22.612|
00014e  2100              MOVS     r1,#0                 ;2546
000150  2001              MOVS     r0,#1                 ;2546
000152  f7fffffe          BL       Display_YX_Format
000156  2100              MOVS     r1,#0                 ;2547
000158  a24c              ADR      r2,|L22.652|
00015a  2002              MOVS     r0,#2                 ;2547
00015c  6ba3              LDR      r3,[r4,#0x38]         ;2547  ; dut_info
00015e  e001              B        |L22.356|
                  |L22.352|
000160  e00e              B        |L22.384|
                  |L22.354|
000162  e046              B        |L22.498|
                  |L22.356|
000164  f7fffffe          BL       Display_YX_Format
000168  a248              ADR      r2,|L22.652|
00016a  2100              MOVS     r1,#0                 ;2548
00016c  2003              MOVS     r0,#3                 ;2548
00016e  6b63              LDR      r3,[r4,#0x34]         ;2548  ; dut_info
000170  f7fffffe          BL       Display_YX_Format
000174  e8bd407c          POP      {r2-r6,lr}            ;2550
000178  2100              MOVS     r1,#0                 ;2550
00017a  200b              MOVS     r0,#0xb               ;2550
00017c  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L22.384|
000180  208e              MOVS     r0,#0x8e              ;2555
000182  f7fffffe          BL       STATE_SwitchStep
000186  2008              MOVS     r0,#8                 ;2556
000188  f7fffffe          BL       TIMER_ResetTimer
00018c  8fe0              LDRH     r0,[r4,#0x3e]         ;2559  ; dut_info
00018e  f7fffffe          BL       __aeabi_ui2f
000192  6829              LDR      r1,[r5,#0]            ;2559  ; measure
000194  f7fffffe          BL       __aeabi_cfcmple
000198  d206              BCS      |L22.424|
00019a  8fa0              LDRH     r0,[r4,#0x3c]         ;2559  ; dut_info
00019c  f7fffffe          BL       __aeabi_ui2f
0001a0  6829              LDR      r1,[r5,#0]            ;2559  ; measure
0001a2  f7fffffe          BL       __aeabi_cfrcmple
0001a6  d380              BCC      |L22.170|
                  |L22.424|
0001a8  f7fffffe          BL       Clear_All_Lines
0001ac  a138              ADR      r1,|L22.656|
0001ae  2000              MOVS     r0,#0                 ;2568
0001b0  f7fffffe          BL       Display_Centered
0001b4  6828              LDR      r0,[r5,#0]            ;2569  ; measure
0001b6  f7fffffe          BL       __aeabi_f2d
0001ba  e9cd0100          STRD     r0,r1,[sp,#0]         ;2569
0001be  a229              ADR      r2,|L22.612|
0001c0  2100              MOVS     r1,#0                 ;2569
0001c2  2001              MOVS     r0,#1                 ;2569
0001c4  f7fffffe          BL       Display_YX_Format
0001c8  8fe3              LDRH     r3,[r4,#0x3e]         ;2570  ; dut_info
0001ca  a230              ADR      r2,|L22.652|
0001cc  2100              MOVS     r1,#0                 ;2570
0001ce  2002              MOVS     r0,#2                 ;2570
0001d0  f7fffffe          BL       Display_YX_Format
0001d4  8fa3              LDRH     r3,[r4,#0x3c]         ;2571  ; dut_info
0001d6  a22d              ADR      r2,|L22.652|
0001d8  2100              MOVS     r1,#0                 ;2571
0001da  2003              MOVS     r0,#3                 ;2571
0001dc  f7fffffe          BL       Display_YX_Format
0001e0  4630              MOV      r0,r6                 ;2572
0001e2  f7fffffe          BL       Delayms
0001e6  e8bd407c          POP      {r2-r6,lr}            ;2574
0001ea  2100              MOVS     r1,#0                 ;2574
0001ec  200b              MOVS     r0,#0xb               ;2574
0001ee  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L22.498|
0001f2  2008              MOVS     r0,#8                 ;2579
0001f4  f7fffffe          BL       TIMER_KillTask
0001f8  2101              MOVS     r1,#1                 ;2582
0001fa  200b              MOVS     r0,#0xb               ;2582
0001fc  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000200  f7fffffe          BL       AVO_PIN_Reset
000204  e8bd407c          POP      {r2-r6,lr}            ;2584
000208  2001              MOVS     r0,#1                 ;2584
00020a  f7ffbffe          B.W      STATE_EnterState
;;;2603   
                          ENDP

00020e  0000              DCW      0x0000
                  |L22.528|
                          DCD      ||.data||+0x6
                  |L22.532|
                          DCD      dut_info
                  |L22.536|
                          DCD      measure
                  |L22.540|
00021c  54657374          DCB      "Testing",0
000220  696e6700
                  |L22.548|
000224  52696768          DCB      "Right TurnSignal Timeout",0
000228  74205475
00022c  726e5369
000230  676e616c
000234  2054696d
000238  656f7574
00023c  00      
00023d  00                DCB      0
00023e  00                DCB      0
00023f  00                DCB      0
                  |L22.576|
                          DCD      STATE_SwitchStep
                  |L22.580|
000244  52696768          DCB      "Right TurnSignal GND abnormal",0
000248  74205475
00024c  726e5369
000250  676e616c
000254  20474e44
000258  2061626e
00025c  6f726d61
000260  6c00    
000262  00                DCB      0
000263  00                DCB      0
                  |L22.612|
000264  256600            DCB      "%f",0
000267  00                DCB      0
                  |L22.616|
                          DCD      0x40011400
                  |L22.620|
00026c  52696768          DCB      "Right TurnSignal VCC abnormal",0
000270  74205475
000274  726e5369
000278  676e616c
00027c  20564343
000280  2061626e
000284  6f726d61
000288  6c00    
00028a  00                DCB      0
00028b  00                DCB      0
                  |L22.652|
00028c  256400            DCB      "%d",0
00028f  00                DCB      0
                  |L22.656|
000290  52696768          DCB      "Right TurnSignal CURRENT abnormal",0
000294  74205475
000298  726e5369
00029c  676e616c
0002a0  20435552
0002a4  52454e54
0002a8  2061626e
0002ac  6f726d61
0002b0  6c00    
0002b2  00                DCB      0
0002b3  00                DCB      0

                          AREA ||i.STEP_Process_Right_TurnSignalUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_Right_TurnSignalUartTest PROC
;;;966    // 右转向灯测试
;;;967    void STEP_Process_Right_TurnSignalUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;968    {
;;;969        switch (stateCB.step)
000002  48a5              LDR      r0,|L23.664|
;;;970        {
;;;971            case STEP_NULL: // 空步骤
;;;972                break;
;;;973    
;;;974            case STEP_RIGHT_TURN_SIGNAL_UART_TEST_ENTRY: // 入口步骤
;;;975                STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_NOTIFY_DUT);
;;;976                UART_DRIVE_InitSelect(dut_info.uart_baudRate);
;;;977                DUT_PROTOCOL_Init();
;;;978                light_cnt = 0;
;;;979                headlight_cnt = 0;
;;;980                Clear_All_Lines();
;;;981                Display_Centered(0, "RIGHT TURN SIGNAL");
;;;982                Display_Centered(1, "Testing");
;;;983    
;;;984                // 测试引脚复位
;;;985                AVO_PIN_Reset();
;;;986                break;
;;;987    
;;;988            case STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;989                break;
;;;990    
;;;991            case STEP_RIGHT_TURN_SIGNAL_UART_TEST_NOTIFY_DUT: // 通知DUT打开远光灯步骤
;;;992                STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;993                DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 1, 1);
;;;994    
;;;995                // 添加超时
;;;996                TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;997                              4000,
;;;998                              STATE_SwitchStep,
;;;999                              STEP_RIGHT_TURN_SIGNAL_UART_TEST_COMMUNICATION_TIME_OUT,
;;;1000                             1,
;;;1001                             ACTION_MODE_ADD_TO_QUEUE);
;;;1002               break;
;;;1003   
;;;1004           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_OPEN:      // 仪表打开远光灯成功
;;;1005               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;1006               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1007   
;;;1008               // 打开VCC测试引脚
;;;1009               LEFT_VCC_TEST_EN_ON();
000004  4ea5              LDR      r6,|L23.668|
000006  4ca6              LDR      r4,|L23.672|
000008  8840              LDRH     r0,[r0,#2]            ;969  ; stateCB
00000a  2834              CMP      r0,#0x34              ;969
00000c  d057              BEQ      |L23.190|
00000e  dc1a              BGT      |L23.70|
000010  2800              CMP      r0,#0                 ;969
000012  d017              BEQ      |L23.68|
000014  2831              CMP      r0,#0x31              ;969
000016  d037              BEQ      |L23.136|
000018  2832              CMP      r0,#0x32              ;969
00001a  d013              BEQ      |L23.68|
00001c  2833              CMP      r0,#0x33              ;969
00001e  d111              BNE      |L23.68|
000020  2032              MOVS     r0,#0x32              ;992
000022  f7fffffe          BL       STATE_SwitchStep
000026  2201              MOVS     r2,#1                 ;993
000028  4611              MOV      r1,r2                 ;993
00002a  20ec              MOVS     r0,#0xec              ;993
00002c  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
000030  2001              MOVS     r0,#1                 ;996
000032  9000              STR      r0,[sp,#0]            ;996
000034  9001              STR      r0,[sp,#4]            ;996
000036  233a              MOVS     r3,#0x3a              ;996
000038  4a9a              LDR      r2,|L23.676|
00003a  f44f617a          MOV      r1,#0xfa0             ;996
00003e  2008              MOVS     r0,#8                 ;996
000040  f7fffffe          BL       TIMER_AddTask
                  |L23.68|
;;;1010   
;;;1011               // 通知万用表测VCC
;;;1012               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1013               Clear_All_Lines();
;;;1014               Display_Centered(0, "RIGHT TURN SIGNAL");
;;;1015               Display_Centered(1, "AVO METER");
;;;1016               Display_Centered(2, "Measurement");
;;;1017               break;
;;;1018   
;;;1019           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;1020               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;1021               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1022   
;;;1023               // 比对万用表返回的数值
;;;1024               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;1025               {
;;;1026                   Clear_All_Lines();
;;;1027                   Display_Centered(0, "RIGHT TURN SIGNAL");
;;;1028                   Display_Centered(1, "VCC");
;;;1029                   Display_Centered(2, "Test Pass");
;;;1030   
;;;1031                   // 打开GND测试引脚
;;;1032                   RIGHT_VCC_TEST_EN_ON();
;;;1033                   RIGHT_VCC_EN_ON();
;;;1034   
;;;1035                   // 通知万用表测VCC
;;;1036                   AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1037                   Clear_All_Lines();
;;;1038                   Display_Centered(0, "LEFT TURN SIGNAL");
;;;1039                   Display_Centered(1, "AVO METER");
;;;1040                   Display_Centered(2, "Measurement");
;;;1041               }
;;;1042               // 比对失败
;;;1043               else
;;;1044               {
;;;1045       #if DEBUG_ENABLE
;;;1046                   Clear_All_Lines();
;;;1047                   Display_Centered(0, "VCC Abnormal");
;;;1048                   Display_YX_Format(1, 0, "%f", measure.result);
;;;1049                   Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;1050                   Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;1051       #endif
;;;1052                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1053                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1054               }
;;;1055               break;
;;;1056   
;;;1057           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_CHECK_GND_VALUE: // 比对GND
;;;1058               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;1059               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1060   
;;;1061               // 小于3V则GND导通测试通过
;;;1062               if (LIGHT_GND_VOLTAGE_VALUE > measure.result)
;;;1063               {
;;;1064                   // 关闭远光灯
;;;1065                   DUT_PROTOCOL_SendCmdTwoParamAck(DUT_PROTOCOL_CMD_TURN_SIGNAL_CONTROL, 1, 0);
;;;1066                   Clear_All_Lines();
;;;1067                   Display_Centered(0, "RIGHT TURN SIGNAL");
;;;1068                   Display_Centered(1, "GND");
;;;1069                   Display_Centered(2, "Test Pass");
;;;1070               }
;;;1071               else
;;;1072               {
;;;1073       #if DEBUG_ENABLE
;;;1074                   Clear_All_Lines();
;;;1075                   Display_Centered(0, "RIGHT TURN SIGNAL");
;;;1076                   Display_Centered(1, "GND Abnormal");
;;;1077                   Display_YX_Format(2, 0, "%f", measure.result);
;;;1078       #endif
;;;1079                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1080                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1081               }
;;;1082               break;
;;;1083   
;;;1084           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_COMPLETE: // 测试完成
;;;1085               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1086               Clear_All_Lines();
;;;1087               Display_Centered(0, "RIGHT TURN SIGNAL");
;;;1088               Display_Centered(1, "Test Pass");
;;;1089   
;;;1090               // 上报测试成功
;;;1091               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;1092               AVO_PIN_Reset();
;;;1093               STATE_EnterState(STATE_STANDBY);
;;;1094               break;
;;;1095   
;;;1096           // 超时处理
;;;1097           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_COMMUNICATION_TIME_OUT:
;;;1098               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1099               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1100               AVO_PIN_Reset();
;;;1101               Clear_All_Lines();
;;;1102               Display_Centered(0, "RIGHT TURN SIGNAL");
;;;1103               Display_Centered(1, "Test Timeout");
;;;1104               STATE_EnterState(STATE_STANDBY);
;;;1105               break;
;;;1106   
;;;1107           default:
;;;1108               break;
;;;1109       }
;;;1110   }
000044  bd7c              POP      {r2-r6,pc}
                  |L23.70|
000046  4d98              LDR      r5,|L23.680|
000048  2835              CMP      r0,#0x35              ;969
00004a  d05c              BEQ      |L23.262|
00004c  2836              CMP      r0,#0x36              ;969
00004e  d079              BEQ      |L23.324|
000050  2839              CMP      r0,#0x39              ;969
000052  d078              BEQ      |L23.326|
000054  283a              CMP      r0,#0x3a              ;969
000056  d1f5              BNE      |L23.68|
000058  2008              MOVS     r0,#8                 ;1098
00005a  f7fffffe          BL       TIMER_KillTask
00005e  2100              MOVS     r1,#0                 ;1099
000060  200b              MOVS     r0,#0xb               ;1099
000062  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000066  f7fffffe          BL       AVO_PIN_Reset
00006a  f7fffffe          BL       Clear_All_Lines
00006e  a18f              ADR      r1,|L23.684|
000070  2000              MOVS     r0,#0                 ;1102
000072  f7fffffe          BL       Display_Centered
000076  a192              ADR      r1,|L23.704|
000078  2001              MOVS     r0,#1                 ;1103
00007a  f7fffffe          BL       Display_Centered
00007e  e8bd407c          POP      {r2-r6,lr}            ;1104
000082  2001              MOVS     r0,#1                 ;1104
000084  f7ffbffe          B.W      STATE_EnterState
                  |L23.136|
000088  2033              MOVS     r0,#0x33              ;975
00008a  f7fffffe          BL       STATE_SwitchStep
00008e  6a20              LDR      r0,[r4,#0x20]         ;976  ; dut_info
000090  f7fffffe          BL       UART_DRIVE_InitSelect
000094  f7fffffe          BL       DUT_PROTOCOL_Init
000098  498d              LDR      r1,|L23.720|
00009a  2000              MOVS     r0,#0                 ;978
00009c  7008              STRB     r0,[r1,#0]            ;978
00009e  498d              LDR      r1,|L23.724|
0000a0  7008              STRB     r0,[r1,#0]            ;979
0000a2  f7fffffe          BL       Clear_All_Lines
0000a6  a181              ADR      r1,|L23.684|
0000a8  2000              MOVS     r0,#0                 ;981
0000aa  f7fffffe          BL       Display_Centered
0000ae  a18a              ADR      r1,|L23.728|
0000b0  2001              MOVS     r0,#1                 ;982
0000b2  f7fffffe          BL       Display_Centered
0000b6  e8bd407c          POP      {r2-r6,lr}            ;985
0000ba  f7ffbffe          B.W      AVO_PIN_Reset
                  |L23.190|
0000be  2032              MOVS     r0,#0x32              ;1005
0000c0  f7fffffe          BL       STATE_SwitchStep
0000c4  2008              MOVS     r0,#8                 ;1006
0000c6  f7fffffe          BL       TIMER_ResetTimer
0000ca  2308              MOVS     r3,#8                 ;1009
0000cc  2203              MOVS     r2,#3                 ;1009
0000ce  2110              MOVS     r1,#0x10              ;1009
0000d0  4630              MOV      r0,r6                 ;1009
0000d2  f7fffffe          BL       gpio_init
0000d6  2108              MOVS     r1,#8                 ;1009
0000d8  4630              MOV      r0,r6                 ;1009
0000da  f7fffffe          BL       gpio_bit_set
0000de  2100              MOVS     r1,#0                 ;1012
0000e0  2001              MOVS     r0,#1                 ;1012
0000e2  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000e6  f7fffffe          BL       Clear_All_Lines
0000ea  a170              ADR      r1,|L23.684|
0000ec  2000              MOVS     r0,#0                 ;1014
0000ee  f7fffffe          BL       Display_Centered
0000f2  a17b              ADR      r1,|L23.736|
0000f4  2001              MOVS     r0,#1                 ;1015
0000f6  f7fffffe          BL       Display_Centered
0000fa  e8bd407c          POP      {r2-r6,lr}            ;1016
0000fe  a17b              ADR      r1,|L23.748|
000100  2002              MOVS     r0,#2                 ;1016
000102  f7ffbffe          B.W      Display_Centered
                  |L23.262|
000106  2032              MOVS     r0,#0x32              ;1020
000108  f7fffffe          BL       STATE_SwitchStep
00010c  2008              MOVS     r0,#8                 ;1021
00010e  f7fffffe          BL       TIMER_ResetTimer
000112  6ba0              LDR      r0,[r4,#0x38]         ;1024  ; dut_info
000114  f7fffffe          BL       __aeabi_ui2f
000118  6829              LDR      r1,[r5,#0]            ;1024  ; measure
00011a  f7fffffe          BL       __aeabi_cfcmple
00011e  d241              BCS      |L23.420|
000120  6b60              LDR      r0,[r4,#0x34]         ;1024  ; dut_info
000122  f7fffffe          BL       __aeabi_ui2f
000126  6829              LDR      r1,[r5,#0]            ;1024  ; measure
000128  f7fffffe          BL       __aeabi_cfrcmple
00012c  d23a              BCS      |L23.420|
00012e  f7fffffe          BL       Clear_All_Lines
000132  a15e              ADR      r1,|L23.684|
000134  2000              MOVS     r0,#0                 ;1027
000136  f7fffffe          BL       Display_Centered
00013a  a16f              ADR      r1,|L23.760|
00013c  2001              MOVS     r0,#1                 ;1028
00013e  f7fffffe          BL       Display_Centered
000142  e001              B        |L23.328|
                  |L23.324|
000144  e053              B        |L23.494|
                  |L23.326|
000146  e08e              B        |L23.614|
                  |L23.328|
000148  a16c              ADR      r1,|L23.764|
00014a  2002              MOVS     r0,#2                 ;1029
00014c  f7fffffe          BL       Display_Centered
000150  2310              MOVS     r3,#0x10              ;1032
000152  2203              MOVS     r2,#3                 ;1032
000154  4619              MOV      r1,r3                 ;1032
000156  4630              MOV      r0,r6                 ;1032
000158  f7fffffe          BL       gpio_init
00015c  2110              MOVS     r1,#0x10              ;1032
00015e  4630              MOV      r0,r6                 ;1032
000160  f7fffffe          BL       gpio_bit_set
000164  f44f7480          MOV      r4,#0x100             ;1033
000168  4623              MOV      r3,r4                 ;1033
00016a  2203              MOVS     r2,#3                 ;1033
00016c  2110              MOVS     r1,#0x10              ;1033
00016e  4630              MOV      r0,r6                 ;1033
000170  f7fffffe          BL       gpio_init
000174  4621              MOV      r1,r4                 ;1033
000176  4630              MOV      r0,r6                 ;1033
000178  f7fffffe          BL       gpio_bit_set
00017c  2100              MOVS     r1,#0                 ;1036
00017e  2001              MOVS     r0,#1                 ;1036
000180  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000184  f7fffffe          BL       Clear_All_Lines
000188  a15f              ADR      r1,|L23.776|
00018a  2000              MOVS     r0,#0                 ;1038
00018c  f7fffffe          BL       Display_Centered
000190  a153              ADR      r1,|L23.736|
000192  2001              MOVS     r0,#1                 ;1039
000194  f7fffffe          BL       Display_Centered
000198  e8bd407c          POP      {r2-r6,lr}            ;1040
00019c  a153              ADR      r1,|L23.748|
00019e  2002              MOVS     r0,#2                 ;1040
0001a0  f7ffbffe          B.W      Display_Centered
                  |L23.420|
0001a4  f7fffffe          BL       Clear_All_Lines
0001a8  a15c              ADR      r1,|L23.796|
0001aa  2000              MOVS     r0,#0                 ;1047
0001ac  f7fffffe          BL       Display_Centered
0001b0  6828              LDR      r0,[r5,#0]            ;1048  ; measure
0001b2  f7fffffe          BL       __aeabi_f2d
0001b6  e9cd0100          STRD     r0,r1,[sp,#0]         ;1048
0001ba  a25c              ADR      r2,|L23.812|
0001bc  2100              MOVS     r1,#0                 ;1048
0001be  2001              MOVS     r0,#1                 ;1048
0001c0  f7fffffe          BL       Display_YX_Format
0001c4  a25a              ADR      r2,|L23.816|
0001c6  2100              MOVS     r1,#0                 ;1049
0001c8  2002              MOVS     r0,#2                 ;1049
0001ca  6ba3              LDR      r3,[r4,#0x38]         ;1049  ; dut_info
0001cc  f7fffffe          BL       Display_YX_Format
0001d0  a257              ADR      r2,|L23.816|
0001d2  2100              MOVS     r1,#0                 ;1050
0001d4  2003              MOVS     r0,#3                 ;1050
0001d6  6b63              LDR      r3,[r4,#0x34]         ;1050  ; dut_info
0001d8  f7fffffe          BL       Display_YX_Format
0001dc  2100              MOVS     r1,#0                 ;1052
0001de  200b              MOVS     r0,#0xb               ;1052
0001e0  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001e4  e8bd407c          POP      {r2-r6,lr}            ;1053
0001e8  2008              MOVS     r0,#8                 ;1053
0001ea  f7ffbffe          B.W      TIMER_KillTask
                  |L23.494|
0001ee  2032              MOVS     r0,#0x32              ;1058
0001f0  f7fffffe          BL       STATE_SwitchStep
0001f4  2008              MOVS     r0,#8                 ;1059
0001f6  f7fffffe          BL       TIMER_ResetTimer
0001fa  494e              LDR      r1,|L23.820|
0001fc  6828              LDR      r0,[r5,#0]            ;1062  ; measure
0001fe  4288              CMP      r0,r1                 ;1062
000200  da14              BGE      |L23.556|
000202  2200              MOVS     r2,#0                 ;1065
000204  2101              MOVS     r1,#1                 ;1065
000206  20ec              MOVS     r0,#0xec              ;1065
000208  f7fffffe          BL       DUT_PROTOCOL_SendCmdTwoParamAck
00020c  f7fffffe          BL       Clear_All_Lines
000210  a126              ADR      r1,|L23.684|
000212  2000              MOVS     r0,#0                 ;1067
000214  f7fffffe          BL       Display_Centered
000218  a147              ADR      r1,|L23.824|
00021a  2001              MOVS     r0,#1                 ;1068
00021c  f7fffffe          BL       Display_Centered
000220  e8bd407c          POP      {r2-r6,lr}            ;1069
000224  a135              ADR      r1,|L23.764|
000226  2002              MOVS     r0,#2                 ;1069
000228  f7ffbffe          B.W      Display_Centered
                  |L23.556|
00022c  f7fffffe          BL       Clear_All_Lines
000230  a11e              ADR      r1,|L23.684|
000232  2000              MOVS     r0,#0                 ;1075
000234  f7fffffe          BL       Display_Centered
000238  a140              ADR      r1,|L23.828|
00023a  2001              MOVS     r0,#1                 ;1076
00023c  f7fffffe          BL       Display_Centered
000240  6828              LDR      r0,[r5,#0]            ;1077  ; measure
000242  f7fffffe          BL       __aeabi_f2d
000246  e9cd0100          STRD     r0,r1,[sp,#0]         ;1077
00024a  a238              ADR      r2,|L23.812|
00024c  2100              MOVS     r1,#0                 ;1077
00024e  2002              MOVS     r0,#2                 ;1077
000250  f7fffffe          BL       Display_YX_Format
000254  2100              MOVS     r1,#0                 ;1079
000256  200b              MOVS     r0,#0xb               ;1079
000258  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00025c  e8bd407c          POP      {r2-r6,lr}            ;1080
000260  2008              MOVS     r0,#8                 ;1080
000262  f7ffbffe          B.W      TIMER_KillTask
                  |L23.614|
000266  2008              MOVS     r0,#8                 ;1085
000268  f7fffffe          BL       TIMER_KillTask
00026c  f7fffffe          BL       Clear_All_Lines
000270  a10e              ADR      r1,|L23.684|
000272  2000              MOVS     r0,#0                 ;1087
000274  f7fffffe          BL       Display_Centered
000278  a120              ADR      r1,|L23.764|
00027a  2001              MOVS     r0,#1                 ;1088
00027c  f7fffffe          BL       Display_Centered
000280  2101              MOVS     r1,#1                 ;1091
000282  200b              MOVS     r0,#0xb               ;1091
000284  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000288  f7fffffe          BL       AVO_PIN_Reset
00028c  e8bd407c          POP      {r2-r6,lr}            ;1093
000290  2001              MOVS     r0,#1                 ;1093
000292  f7ffbffe          B.W      STATE_EnterState
;;;1111   
                          ENDP

000296  0000              DCW      0x0000
                  |L23.664|
                          DCD      ||.data||+0x6
                  |L23.668|
                          DCD      0x40011400
                  |L23.672|
                          DCD      dut_info
                  |L23.676|
                          DCD      STATE_SwitchStep
                  |L23.680|
                          DCD      measure
                  |L23.684|
0002ac  52494748          DCB      "RIGHT TURN SIGNAL",0
0002b0  54205455
0002b4  524e2053
0002b8  49474e41
0002bc  4c00    
0002be  00                DCB      0
0002bf  00                DCB      0
                  |L23.704|
0002c0  54657374          DCB      "Test Timeout",0
0002c4  2054696d
0002c8  656f7574
0002cc  00      
0002cd  00                DCB      0
0002ce  00                DCB      0
0002cf  00                DCB      0
                  |L23.720|
                          DCD      light_cnt
                  |L23.724|
                          DCD      headlight_cnt
                  |L23.728|
0002d8  54657374          DCB      "Testing",0
0002dc  696e6700
                  |L23.736|
0002e0  41564f20          DCB      "AVO METER",0
0002e4  4d455445
0002e8  5200    
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L23.748|
0002ec  4d656173          DCB      "Measurement",0
0002f0  7572656d
0002f4  656e7400
                  |L23.760|
0002f8  56434300          DCB      "VCC",0
                  |L23.764|
0002fc  54657374          DCB      "Test Pass",0
000300  20506173
000304  7300    
000306  00                DCB      0
000307  00                DCB      0
                  |L23.776|
000308  4c454654          DCB      "LEFT TURN SIGNAL",0
00030c  20545552
000310  4e205349
000314  474e414c
000318  00      
000319  00                DCB      0
00031a  00                DCB      0
00031b  00                DCB      0
                  |L23.796|
00031c  56434320          DCB      "VCC Abnormal",0
000320  41626e6f
000324  726d616c
000328  00      
000329  00                DCB      0
00032a  00                DCB      0
00032b  00                DCB      0
                  |L23.812|
00032c  256600            DCB      "%f",0
00032f  00                DCB      0
                  |L23.816|
000330  256400            DCB      "%d",0
000333  00                DCB      0
                  |L23.820|
                          DCD      0x453b8000
                  |L23.824|
000338  474e4400          DCB      "GND",0
                  |L23.828|
00033c  474e4420          DCB      "GND Abnormal",0
000340  41626e6f
000344  726d616c
000348  00      
000349  00                DCB      0
00034a  00                DCB      0
00034b  00                DCB      0

                          AREA ||i.STEP_Process_SegUartUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_SegUartUpgrade PROC
;;;3581   // 数码管、段码屏的串口升级步骤
;;;3582   void STEP_Process_SegUartUpgrade()
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;3583   {
000004  b09b              SUB      sp,sp,#0x6c
;;;3584       uint8 configs[100] = {0};
000006  2164              MOVS     r1,#0x64
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       __aeabi_memclr4
;;;3585       uint8 i;
;;;3586   
;;;3587       switch (stateCB.step)
00000e  4894              LDR      r0,|L24.608|
;;;3588       {
;;;3589           case STEP_NULL: // 空步骤
;;;3590               break;
;;;3591   
;;;3592           // 入口步骤
;;;3593           case STEP_SEG_UART_UPGRADE_ENTRY:
;;;3594               TIMER_KillTask(TIMER_ID_ONLINE_DETECT);
;;;3595               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3596               UART_DRIVE_InitSelect(UART_DRIVE_BAUD_RATE); // UART协议层初始化
;;;3597               UART_PROTOCOL_Init();                        // 55升级协议
;;;3598               UART_PROTOCOL4_Init();                       // KM5S
;;;3599               resetFlag = TRUE;
000010  f8df824c          LDR      r8,|L24.608|
000014  f2401133          MOV      r1,#0x133             ;3587
000018  8842              LDRH     r2,[r0,#2]            ;3587  ; stateCB
00001a  2600              MOVS     r6,#0                 ;3587
00001c  2401              MOVS     r4,#1
;;;3600               switch_cnt = 0;
00001e  f8df9244          LDR      r9,|L24.612|
;;;3601   
;;;3602               // vlk供电
;;;3603               VLK_PW_EN_OFF();
000022  4f91              LDR      r7,|L24.616|
;;;3604   
;;;3605               // 关闭仪表供电电源
;;;3606               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, FALSE);
;;;3607               break;
;;;3608   
;;;3609           // 等待
;;;3610           case STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK:
;;;3611               break;
;;;3612   
;;;3613           // 仪表重启
;;;3614           case STEP_CM_UART_SEG_UPGRADE_RESTART:
;;;3615   
;;;3616               // vlk供电
;;;3617               VLK_PW_EN_ON();
;;;3618   
;;;3619               // 打开仪表供电电源
;;;3620               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, TRUE);
;;;3621               break;
;;;3622   
;;;3623           // 收到eco请求，发送允许进入工程模式
;;;3624           case STEP_CM_UART_SEG_UPGRADE_UP_ALLOW:
;;;3625               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3626               UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_PROJECT_ALLOW, TRUE); // 进入工程模式
;;;3627               break;
;;;3628   
;;;3629           // dut准备就绪，发送app擦除指令
;;;3630           case STEP_CM_UART_SEG_UPGRADE_SEND_APP_EAR:
;;;3631               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3632               UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_APP_EAR, TRUE); // 05:擦除app命令
;;;3633               break;
;;;3634   
;;;3635           // 发送第一包数据
;;;3636           case STEP_CM_UART_SEG_UPGRADE_SEND_FIRST_APP_PACKET:
;;;3637               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3638               dut_info.currentAppSize = 0; // 第一包数据
000024  4d91              LDR      r5,|L24.620|
000026  f2a21033          SUB      r0,r2,#0x133          ;3587
00002a  f2401a2d          MOV      r10,#0x12d            ;3595
00002e  f1a80806          SUB      r8,r8,#6              ;3599
;;;3639               uartProtocol_SendOnePacket(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize);
000032  f44f23c0          MOV      r3,#0x60000
000036  428a              CMP      r2,r1                 ;3587
000038  d075              BEQ      |L24.294|
00003a  dc40              BGT      |L24.190|
00003c  f5b27f97          CMP      r2,#0x12e             ;3587
000040  d073              BEQ      |L24.298|
000042  dc27              BGT      |L24.148|
000044  2a00              CMP      r2,#0                 ;3587
000046  d022              BEQ      |L24.142|
000048  f5b27f96          CMP      r2,#0x12c             ;3587
00004c  d11f              BNE      |L24.142|
00004e  2011              MOVS     r0,#0x11              ;3594
000050  f7fffffe          BL       TIMER_KillTask
000054  4650              MOV      r0,r10                ;3595
000056  f7fffffe          BL       STATE_SwitchStep
00005a  f44f30e1          MOV      r0,#0x1c200           ;3596
00005e  f7fffffe          BL       UART_DRIVE_InitSelect
000062  f7fffffe          BL       UART_PROTOCOL_Init
000066  f7fffffe          BL       UART_PROTOCOL4_Init
00006a  f8884000          STRB     r4,[r8,#0]            ;3599
00006e  f8896000          STRB     r6,[r9,#0]            ;3600
000072  2380              MOVS     r3,#0x80              ;3603
000074  2203              MOVS     r2,#3                 ;3603
000076  2110              MOVS     r1,#0x10              ;3603
000078  4638              MOV      r0,r7                 ;3603
00007a  f7fffffe          BL       gpio_init
00007e  2180              MOVS     r1,#0x80              ;3603
000080  4638              MOV      r0,r7                 ;3603
000082  f7fffffe          BL       gpio_bit_reset
000086  2100              MOVS     r1,#0                 ;3606
000088  2005              MOVS     r0,#5                 ;3606
00008a  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
                  |L24.142|
;;;3640               dut_info.currentAppSize++; // 准备下一包数据
;;;3641               break;
;;;3642   
;;;3643           // 发送app数据包
;;;3644           case STEP_CM_UART_SEG_UPGRADE_SEND_APP_PACKET:
;;;3645               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3646               uartProtocol_SendOnePacket(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize * 128);
;;;3647               dut_info.currentAppSize++; // 准备下一包数据
;;;3648               break;
;;;3649   
;;;3650           // app升级成功
;;;3651           case STEP_CM_UART_SEG_UPGRADE_APP_UP_SUCCESS:
;;;3652               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3653               UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_APP_UP_OVER, TRUE); // 发送成功
;;;3654               dut_info.appUpSuccesss = TRUE;
;;;3655               dut_info.appUpFlag = FALSE;
;;;3656               break;
;;;3657   
;;;3658           // app升级成功重启
;;;3659           case STEP_CM_UART_SEG_UPGRADE_APP_UP_SUCCESS_RESET:
;;;3660   
;;;3661               // 关闭仪表供电电源
;;;3662               switch_cnt = 0;
;;;3663               appResetFlag = TRUE;
;;;3664   
;;;3665               // vlk供电
;;;3666               VLK_PW_EN_OFF();
;;;3667               POWER_PROTOCOL_SendCmdParamAck(POWER_PROTOCOL_CMD_ADJUST_DUT_POWER_SWITCH, FALSE);
;;;3668               break;
;;;3669   
;;;3670           // 升级config入口
;;;3671           case STEP_UART_SET_CONFIG_ENTRY:
;;;3672               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3673               UART_DRIVE_InitSelect(9600); // UART协议层初始化
;;;3674               UART_PROTOCOL_Init();        // 55升级协议
;;;3675               UART_PROTOCOL4_Init();       // KM5S
;;;3676               TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
;;;3677                             500,
;;;3678                             STATE_SwitchStep,
;;;3679                             STEP_UART_SEND_SET_CONFIG,
;;;3680                             TIMER_LOOP_FOREVER,
;;;3681                             ACTION_MODE_ADD_TO_QUEUE);
;;;3682   
;;;3683               break;
;;;3684   
;;;3685           // 发送config升级包
;;;3686           case STEP_UART_SEND_SET_CONFIG:
;;;3687               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3688               /*发送协议切换命令*/
;;;3689               UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_HEAD);       // 发送协议切换命令
;;;3690               UART_PROTOCOL4_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR); // 添加设备地址
;;;3691               UART_PROTOCOL4_TxAddData(0xAB);                          // 0xAB：协议切换
;;;3692               UART_PROTOCOL4_TxAddData(0);                             // 添加数据长度
;;;3693               UART_PROTOCOL4_TxAddData(01);
;;;3694               UART_PROTOCOL4_TxAddFrame(); // 添加检验和与结束符，并添加至发送
;;;3695   
;;;3696               /*发送dut配置信息*/
;;;3697               SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60);  // 实际只有54个字节
;;;3698               UART_PROTOCOL4_TxAddData(UART_PROTOCOL4_CMD_HEAD);               // 添加命令头
;;;3699               UART_PROTOCOL4_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);         // 添加设备地址
;;;3700               UART_PROTOCOL4_TxAddData(UART_PROTOCOL_CMD_WRITE_CONTROL_PARAM); // 0xc0 添加命令字
;;;3701               UART_PROTOCOL4_TxAddData(54);                                    // 添加数据长度
;;;3702               // UART_PROTOCOL4_TxAddData(1);//背光亮度1，看现象
;;;3703               for (i = 0; i < 54; i++)
;;;3704               {
;;;3705                   UART_PROTOCOL4_TxAddData(configs[i]); // 写入结果
;;;3706               }
;;;3707               UART_PROTOCOL4_TxAddFrame(); // 添加检验和与结束符，并添加至发送
;;;3708               break;
;;;3709   
;;;3710           // 升级config完成
;;;3711           case STEP_UART_SET_CONFIG_SUCCESS:
;;;3712               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3713               TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止定时器
;;;3714               UART_DRIVE_InitSelect(115200);           // 设置波特率
;;;3715               dut_info.configUpFlag = FALSE;           // 标志位置false
;;;3716               dut_info.configUpSuccesss = TRUE;
;;;3717               dut_info.dutPowerOnAllow = FALSE;
;;;3718               break;
;;;3719   
;;;3720           // 升级项升级完成，检查是否还有需要升级的项
;;;3721           case STEP_CM_UART_SEG_UPGRADE_ITEM_FINISH:
;;;3722               STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
;;;3723               if (dut_info.configUpFlag)
;;;3724               {
;;;3725                   UART_PROTOCOL_SendCmdParamAck(UART_ECO_CMD_ECO_JUMP_APP, TRUE); // 是仪表跳入app
;;;3726   
;;;3727                   // 500ms后（等待仪表开机）开始升级config
;;;3728                   TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
;;;3729                                 500,
;;;3730                                 STATE_SwitchStep,
;;;3731                                 STEP_UART_SET_CONFIG_ENTRY,
;;;3732                                 1,
;;;3733                                 ACTION_MODE_ADD_TO_QUEUE);
;;;3734               }
;;;3735               else
;;;3736               {
;;;3737                   // 没有升级项断电
;;;3738                   STATE_EnterState(STATE_STANDBY);
;;;3739               }
;;;3740               break;
;;;3741               
;;;3742           default:
;;;3743               break;
;;;3744       }
;;;3745   }
00008e  b01b              ADD      sp,sp,#0x6c
000090  e8bd8ff0          POP      {r4-r11,pc}
                  |L24.148|
000094  f5b27f98          CMP      r2,#0x130             ;3587
000098  d056              BEQ      |L24.328|
00009a  f5a27280          SUB      r2,r2,#0x100          ;3587
00009e  3a31              SUBS     r2,r2,#0x31           ;3587
0000a0  d05a              BEQ      |L24.344|
0000a2  2a01              CMP      r2,#1                 ;3587
0000a4  d1f3              BNE      |L24.142|
0000a6  4650              MOV      r0,r10                ;3637
0000a8  f7fffffe          BL       STATE_SwitchStep
0000ac  4631              MOV      r1,r6                 ;3638
0000ae  65ae              STR      r6,[r5,#0x58]         ;3638  ; dut_info
0000b0  4618              MOV      r0,r3                 ;3639
0000b2  f7fffffe          BL       uartProtocol_SendOnePacket
0000b6  6da8              LDR      r0,[r5,#0x58]         ;3640  ; dut_info
0000b8  1c40              ADDS     r0,r0,#1              ;3640
0000ba  65a8              STR      r0,[r5,#0x58]         ;3640  ; dut_info
0000bc  e7e7              B        |L24.142|
                  |L24.190|
0000be  f44f7bfa          MOV      r11,#0x1f4            ;3676
0000c2  281a              CMP      r0,#0x1a              ;3587
0000c4  d07d              BEQ      |L24.450|
0000c6  dc1a              BGT      |L24.254|
0000c8  2801              CMP      r0,#1                 ;3587
0000ca  d059              BEQ      |L24.384|
0000cc  2802              CMP      r0,#2                 ;3587
0000ce  d063              BEQ      |L24.408|
0000d0  2803              CMP      r0,#3                 ;3587
0000d2  d1dc              BNE      |L24.142|
0000d4  4650              MOV      r0,r10                ;3722
0000d6  f7fffffe          BL       STATE_SwitchStep
0000da  f8950026          LDRB     r0,[r5,#0x26]         ;3723  ; dut_info
0000de  2800              CMP      r0,#0                 ;3723
0000e0  d06e              BEQ      |L24.448|
0000e2  2101              MOVS     r1,#1                 ;3725
0000e4  2004              MOVS     r0,#4                 ;3725
0000e6  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
0000ea  9400              STR      r4,[sp,#0]            ;3728
0000ec  f240134d          MOV      r3,#0x14d             ;3728
0000f0  4a5f              LDR      r2,|L24.624|
0000f2  4659              MOV      r1,r11                ;3728
0000f4  2002              MOVS     r0,#2                 ;3728
0000f6  9401              STR      r4,[sp,#4]            ;3728
0000f8  f7fffffe          BL       TIMER_AddTask
0000fc  e7c7              B        |L24.142|
                  |L24.254|
0000fe  281d              CMP      r0,#0x1d              ;3587
000100  d077              BEQ      |L24.498|
000102  281e              CMP      r0,#0x1e              ;3587
000104  d1c3              BNE      |L24.142|
000106  4650              MOV      r0,r10                ;3712
000108  f7fffffe          BL       STATE_SwitchStep
00010c  2002              MOVS     r0,#2                 ;3713
00010e  f7fffffe          BL       TIMER_KillTask
000112  f44f30e1          MOV      r0,#0x1c200           ;3714
000116  f7fffffe          BL       UART_DRIVE_InitSelect
00011a  3546              ADDS     r5,r5,#0x46           ;3715
00011c  f8056c20          STRB     r6,[r5,#-0x20]        ;3715
000120  77ec              STRB     r4,[r5,#0x1f]         ;3716
000122  77ae              STRB     r6,[r5,#0x1e]         ;3717
000124  e7b3              B        |L24.142|
                  |L24.294|
000126  e01f              B        |L24.360|
000128  e7ff              B        |L24.298|
                  |L24.298|
00012a  2380              MOVS     r3,#0x80              ;3617
00012c  2203              MOVS     r2,#3                 ;3617
00012e  2110              MOVS     r1,#0x10              ;3617
000130  4638              MOV      r0,r7                 ;3617
000132  f7fffffe          BL       gpio_init
000136  2180              MOVS     r1,#0x80              ;3617
000138  4638              MOV      r0,r7                 ;3617
00013a  f7fffffe          BL       gpio_bit_set
00013e  2101              MOVS     r1,#1                 ;3620
000140  2005              MOVS     r0,#5                 ;3620
000142  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
000146  e7a2              B        |L24.142|
                  |L24.328|
000148  4650              MOV      r0,r10                ;3625
00014a  f7fffffe          BL       STATE_SwitchStep
00014e  2101              MOVS     r1,#1                 ;3626
000150  2002              MOVS     r0,#2                 ;3626
000152  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
000156  e79a              B        |L24.142|
                  |L24.344|
000158  4650              MOV      r0,r10                ;3631
00015a  f7fffffe          BL       STATE_SwitchStep
00015e  2101              MOVS     r1,#1                 ;3632
000160  2005              MOVS     r0,#5                 ;3632
000162  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
000166  e792              B        |L24.142|
                  |L24.360|
000168  4650              MOV      r0,r10                ;3645
00016a  f7fffffe          BL       STATE_SwitchStep
00016e  6da8              LDR      r0,[r5,#0x58]         ;3646  ; dut_info
000170  01c1              LSLS     r1,r0,#7              ;3646
000172  4618              MOV      r0,r3                 ;3646
000174  f7fffffe          BL       uartProtocol_SendOnePacket
000178  6da8              LDR      r0,[r5,#0x58]         ;3647  ; dut_info
00017a  1c40              ADDS     r0,r0,#1              ;3647
00017c  65a8              STR      r0,[r5,#0x58]         ;3647  ; dut_info
00017e  e786              B        |L24.142|
                  |L24.384|
000180  4650              MOV      r0,r10                ;3652
000182  f7fffffe          BL       STATE_SwitchStep
000186  2101              MOVS     r1,#1                 ;3653
000188  2007              MOVS     r0,#7                 ;3653
00018a  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
00018e  f8854067          STRB     r4,[r5,#0x67]         ;3654
000192  f8856025          STRB     r6,[r5,#0x25]         ;3655
000196  e77a              B        |L24.142|
                  |L24.408|
000198  f8896000          STRB     r6,[r9,#0]            ;3662
00019c  f8884002          STRB     r4,[r8,#2]            ;3663
0001a0  2380              MOVS     r3,#0x80              ;3666
0001a2  2203              MOVS     r2,#3                 ;3666
0001a4  2110              MOVS     r1,#0x10              ;3666
0001a6  4638              MOV      r0,r7                 ;3666
0001a8  f7fffffe          BL       gpio_init
0001ac  2180              MOVS     r1,#0x80              ;3666
0001ae  4638              MOV      r0,r7                 ;3666
0001b0  f7fffffe          BL       gpio_bit_reset
0001b4  2100              MOVS     r1,#0                 ;3667
0001b6  2005              MOVS     r0,#5                 ;3667
0001b8  f7fffffe          BL       POWER_PROTOCOL_SendCmdParamAck
0001bc  e767              B        |L24.142|
0001be  e000              B        |L24.450|
                  |L24.448|
0001c0  e049              B        |L24.598|
                  |L24.450|
0001c2  4650              MOV      r0,r10                ;3672
0001c4  f7fffffe          BL       STATE_SwitchStep
0001c8  f44f5016          MOV      r0,#0x2580            ;3673
0001cc  f7fffffe          BL       UART_DRIVE_InitSelect
0001d0  f7fffffe          BL       UART_PROTOCOL_Init
0001d4  f7fffffe          BL       UART_PROTOCOL4_Init
0001d8  f04f30ff          MOV      r0,#0xffffffff        ;3676
0001dc  e9cd0400          STRD     r0,r4,[sp,#0]         ;3676
0001e0  f44f73a8          MOV      r3,#0x150             ;3676
0001e4  4a22              LDR      r2,|L24.624|
0001e6  4659              MOV      r1,r11                ;3676
0001e8  2002              MOVS     r0,#2                 ;3676
0001ea  f7fffffe          BL       TIMER_AddTask
0001ee  e74e              B        |L24.142|
0001f0  e7ff              B        |L24.498|
                  |L24.498|
0001f2  4650              MOV      r0,r10                ;3687
0001f4  f7fffffe          BL       STATE_SwitchStep
0001f8  203a              MOVS     r0,#0x3a              ;3689
0001fa  f7fffffe          BL       UART_PROTOCOL4_TxAddData
0001fe  201a              MOVS     r0,#0x1a              ;3690
000200  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000204  20ab              MOVS     r0,#0xab              ;3691
000206  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00020a  2000              MOVS     r0,#0                 ;3692
00020c  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000210  2001              MOVS     r0,#1                 ;3693
000212  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000216  f7fffffe          BL       UART_PROTOCOL4_TxAddFrame
00021a  223c              MOVS     r2,#0x3c              ;3697
00021c  f44f11b0          MOV      r1,#0x160000          ;3697
000220  a802              ADD      r0,sp,#8              ;3697
000222  f7fffffe          BL       SPI_FLASH_ReadArray
000226  203a              MOVS     r0,#0x3a              ;3698
000228  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00022c  201a              MOVS     r0,#0x1a              ;3699
00022e  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000232  20c0              MOVS     r0,#0xc0              ;3700
000234  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000238  2036              MOVS     r0,#0x36              ;3701
00023a  f7fffffe          BL       UART_PROTOCOL4_TxAddData
00023e  2400              MOVS     r4,#0                 ;3703
000240  ad02              ADD      r5,sp,#8              ;3584
                  |L24.578|
000242  5d28              LDRB     r0,[r5,r4]            ;3705
000244  f7fffffe          BL       UART_PROTOCOL4_TxAddData
000248  1c64              ADDS     r4,r4,#1              ;3703
00024a  b2e4              UXTB     r4,r4                 ;3703
00024c  2c36              CMP      r4,#0x36              ;3703
00024e  d3f8              BCC      |L24.578|
000250  f7fffffe          BL       UART_PROTOCOL4_TxAddFrame
000254  e71b              B        |L24.142|
                  |L24.598|
000256  2001              MOVS     r0,#1                 ;3738
000258  f7fffffe          BL       STATE_EnterState
00025c  e717              B        |L24.142|
;;;3746   
                          ENDP

00025e  0000              DCW      0x0000
                  |L24.608|
                          DCD      ||.data||+0x6
                  |L24.612|
                          DCD      switch_cnt
                  |L24.616|
                          DCD      0x40010c00
                  |L24.620|
                          DCD      dut_info
                  |L24.624|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_ThrottleCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_ThrottleCanTest PROC
;;;2604   // 油门测试
;;;2605   void STEP_Process_ThrottleCanTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;2606   {
;;;2607       switch (stateCB.step)
000002  48c2              LDR      r0,|L25.780|
;;;2608       {
;;;2609           case STEP_NULL: // 空步骤
;;;2610               break;
;;;2611   
;;;2612           case STEP_THROTTLE_CAN_TEST_ENTRY: // 入口步骤
;;;2613               STATE_SwitchStep(STEP_THROTTLE_CAN_TEST_VCC);
;;;2614               CAN_PROTOCOL_TEST_Init(dut_info.can_baudRate); 
000004  4cc2              LDR      r4,|L25.784|
;;;2615   
;;;2616               Clear_All_Lines();
;;;2617               Display_Centered(0, "THROTTLE");
;;;2618               Display_Centered(1, "Testing");
;;;2619   
;;;2620               // 测试引脚复位
;;;2621               AVO_PIN_Reset();
;;;2622               break;
;;;2623   
;;;2624           case STEP_THROTTLE_CAN_TEST_WAIT_RESPONSE: // 等待仪表或万用表回应
;;;2625               break;
;;;2626   
;;;2627           case STEP_THROTTLE_CAN_TEST_VCC: // 通知万用表测VCC
;;;2628               STATE_SwitchStep(STEP_THROTTLE_CAN_TEST_WAIT_RESPONSE);
;;;2629   
;;;2630               // 打开VCC测试引脚
;;;2631               THROTTLE_VCC_TEST_EN(TRUE);
;;;2632   
;;;2633               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;2634               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;2635               Clear_All_Lines();
;;;2636               Display_Centered(0, "THROTTLE");
;;;2637               Display_Centered(1, "AVO METER");
;;;2638               Display_Centered(2, "Measurement");
;;;2639   
;;;2640               // 添加超时
;;;2641               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;2642                             4000,
;;;2643                             STATE_SwitchStep,
;;;2644                             STEP_THROTTLE_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;2645                             1,
;;;2646                             ACTION_MODE_ADD_TO_QUEUE);
;;;2647               break;
;;;2648   
;;;2649           // 比对VCC
;;;2650           case STEP_THROTTLE_CAN_TEST_CHECK_VOLTAGE_VALUE:
;;;2651               STATE_SwitchStep(STEP_THROTTLE_CAN_TEST_WAIT_RESPONSE);
;;;2652               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2653   
;;;2654               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;2655               {
;;;2656                   // 调整DAC输出,单位mv
;;;2657                   DAC0_output(FIRST_DAC);
;;;2658                   Delayms(300);
000006  f44f7696          MOV      r6,#0x12c
00000a  8840              LDRH     r0,[r0,#2]            ;2607  ; stateCB
;;;2659                   Clear_All_Lines();
;;;2660                   Display_Centered(0, "THROTTLE");
;;;2661                   Display_Centered(1, "VCC");
;;;2662                   Display_Centered(2, "Normal");
;;;2663   
;;;2664                   // 获取油门AD值
;;;2665                   CAN_PROTOCOL_TEST_SendCmdParamAck(CAN_PROTOCOL_TEST_CMD_GET_THROTTLE_BRAKE_AD, 1);
;;;2666               }
;;;2667               // VCC不正常，则上报
;;;2668               else
;;;2669               {
;;;2670                   Clear_All_Lines();
;;;2671                   Display_Centered(0, "THROTTLE");
;;;2672                   Display_Centered(1, "VCC");
;;;2673                   Display_Centered(2, "Abnormal");
;;;2674                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2675                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2676                   STATE_EnterState(STATE_STANDBY);
;;;2677               }
;;;2678               break;
;;;2679   
;;;2680           // 在这进行判断数值是否正常，第一次
;;;2681           case STEP_THROTTLE_CAN_TEST_CHECK_DAC1_VALUE:
;;;2682               STATE_SwitchStep(STEP_THROTTLE_CAN_TEST_WAIT_RESPONSE);
;;;2683               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2684   
;;;2685               // 处理DAC1数值检查逻辑
;;;2686               if ((dut_info.throttleAd > FIRST_DAC - ERROR_DAC) && (dut_info.throttleAd < FIRST_DAC + ERROR_DAC))
00000c  f24035e7          MOV      r5,#0x3e7
000010  289a              CMP      r0,#0x9a              ;2607
000012  d07c              BEQ      |L25.270|
000014  dc4e              BGT      |L25.180|
000016  2897              CMP      r0,#0x97              ;2607
000018  d07a              BEQ      |L25.272|
00001a  dc17              BGT      |L25.76|
00001c  2800              CMP      r0,#0                 ;2607
00001e  d077              BEQ      |L25.272|
000020  2896              CMP      r0,#0x96              ;2607
000022  d175              BNE      |L25.272|
000024  2098              MOVS     r0,#0x98              ;2613
000026  f7fffffe          BL       STATE_SwitchStep
00002a  8ba0              LDRH     r0,[r4,#0x1c]         ;2614  ; dut_info
00002c  f7fffffe          BL       CAN_PROTOCOL_TEST_Init
000030  f7fffffe          BL       Clear_All_Lines
000034  a1b7              ADR      r1,|L25.788|
000036  2000              MOVS     r0,#0                 ;2617
000038  f7fffffe          BL       Display_Centered
00003c  a1b8              ADR      r1,|L25.800|
00003e  2001              MOVS     r0,#1                 ;2618
000040  f7fffffe          BL       Display_Centered
000044  e8bd407c          POP      {r2-r6,lr}            ;2621
000048  f7ffbffe          B.W      AVO_PIN_Reset
                  |L25.76|
00004c  2898              CMP      r0,#0x98              ;2607
00004e  d051              BEQ      |L25.244|
000050  4db5              LDR      r5,|L25.808|
000052  2899              CMP      r0,#0x99              ;2607
000054  d177              BNE      |L25.326|
000056  2097              MOVS     r0,#0x97              ;2651
000058  f7fffffe          BL       STATE_SwitchStep
00005c  2008              MOVS     r0,#8                 ;2652
00005e  f7fffffe          BL       TIMER_ResetTimer
000062  6ba0              LDR      r0,[r4,#0x38]         ;2654  ; dut_info
000064  f7fffffe          BL       __aeabi_ui2f
000068  6829              LDR      r1,[r5,#0]            ;2654  ; measure
00006a  f7fffffe          BL       __aeabi_cfcmple
00006e  d26b              BCS      |L25.328|
000070  6b60              LDR      r0,[r4,#0x34]         ;2654  ; dut_info
000072  f7fffffe          BL       __aeabi_ui2f
000076  6829              LDR      r1,[r5,#0]            ;2654  ; measure
000078  f7fffffe          BL       __aeabi_cfrcmple
00007c  d264              BCS      |L25.328|
00007e  f44f707a          MOV      r0,#0x3e8             ;2657
000082  f7fffffe          BL       DAC0_output
000086  4630              MOV      r0,r6                 ;2658
000088  f7fffffe          BL       Delayms
00008c  f7fffffe          BL       Clear_All_Lines
000090  a1a0              ADR      r1,|L25.788|
000092  2000              MOVS     r0,#0                 ;2660
000094  f7fffffe          BL       Display_Centered
000098  a1a4              ADR      r1,|L25.812|
00009a  2001              MOVS     r0,#1                 ;2661
00009c  f7fffffe          BL       Display_Centered
0000a0  a1a3              ADR      r1,|L25.816|
0000a2  2002              MOVS     r0,#2                 ;2662
0000a4  f7fffffe          BL       Display_Centered
0000a8  e8bd407c          POP      {r2-r6,lr}            ;2665
0000ac  2101              MOVS     r1,#1                 ;2665
0000ae  20eb              MOVS     r0,#0xeb              ;2665
0000b0  f7ffbffe          B.W      CAN_PROTOCOL_TEST_SendCmdParamAck
                  |L25.180|
0000b4  289b              CMP      r0,#0x9b              ;2607
0000b6  d07b              BEQ      |L25.432|
0000b8  289c              CMP      r0,#0x9c              ;2607
0000ba  d07a              BEQ      |L25.434|
0000bc  289d              CMP      r0,#0x9d              ;2607
0000be  d079              BEQ      |L25.436|
0000c0  289e              CMP      r0,#0x9e              ;2607
0000c2  d140              BNE      |L25.326|
;;;2687               {
;;;2688                   // 调整DAC输出,单位mv
;;;2689                   DAC0_output(SECOND_DAC);
;;;2690                   Delayms(300);
;;;2691                   Clear_All_Lines();
;;;2692                   Display_Centered(0, "THROTTLE");
;;;2693                   Display_Centered(1, "Adjusting DAC");
;;;2694                   Display_Centered(2, "First");
;;;2695   
;;;2696                   // 获取油门AD值
;;;2697                   CAN_PROTOCOL_TEST_SendCmdParamAck(CAN_PROTOCOL_TEST_CMD_GET_THROTTLE_BRAKE_AD, 1);
;;;2698               }
;;;2699               else
;;;2700               {
;;;2701                   Clear_All_Lines();
;;;2702                   Display_Centered(0, "THROTTLE");
;;;2703                   Display_Centered(1, "SIG");
;;;2704                   Display_Centered(2, "Abnormal");
;;;2705                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2706                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2707                   STATE_EnterState(STATE_STANDBY);
;;;2708               }
;;;2709               break;
;;;2710   
;;;2711           // 在这进行判断数值是否正常，第二次
;;;2712           case STEP_THROTTLE_CAN_TEST_CHECK_DAC3_VALUE:
;;;2713               STATE_SwitchStep(STEP_THROTTLE_CAN_TEST_WAIT_RESPONSE);
;;;2714               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2715   
;;;2716               // 处理DAC5数值检查逻辑
;;;2717               if ((dut_info.throttleAd > SECOND_DAC - ERROR_DAC) && (dut_info.throttleAd < SECOND_DAC + ERROR_DAC))
;;;2718               {
;;;2719                   // 调整DAC输出,单位mv
;;;2720                   DAC0_output(THIRD_DAC);
;;;2721                   Delayms(300);
;;;2722                   Clear_All_Lines();
;;;2723                   Display_Centered(0, "THROTTLE");
;;;2724                   Display_Centered(1, "Adjusting DAC");
;;;2725                   Display_Centered(2, "Second");
;;;2726   
;;;2727                   // 获取油门AD值
;;;2728                   CAN_PROTOCOL_TEST_SendCmdParamAck(CAN_PROTOCOL_TEST_CMD_GET_THROTTLE_BRAKE_AD, 1);
;;;2729               }
;;;2730               else
;;;2731               {
;;;2732                   Clear_All_Lines();
;;;2733                   Display_Centered(0, "THROTTLE");
;;;2734                   Display_Centered(1, "SIG");
;;;2735                   Display_Centered(2, "Abnormal");
;;;2736                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2737                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2738                   STATE_EnterState(STATE_STANDBY);
;;;2739               }
;;;2740               break;
;;;2741   
;;;2742           // 在这进行判断数值是否正常，第三次
;;;2743           case STEP_THROTTLE_CAN_TEST_CHECK_DAC5_VALUE:
;;;2744               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;2745   
;;;2746               // 处理DAC5数值检查逻辑
;;;2747               if ((dut_info.throttleAd > THIRD_DAC - ERROR_DAC) && (dut_info.throttleAd < THIRD_DAC + ERROR_DAC))
;;;2748               {
;;;2749                   // 3次都正常则测试通过
;;;2750                   Clear_All_Lines();
;;;2751                   Display_Centered(0, "THROTTLE");
;;;2752                   Display_Centered(1, "Adjusting DAC");
;;;2753                   Display_Centered(2, "Third");
;;;2754                   STATE_SwitchStep(STEP_THROTTLE_CAN_TEST_COMPLETE);
;;;2755               }
;;;2756               else
;;;2757               {
;;;2758                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;2759                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2760                   STATE_EnterState(STATE_STANDBY);
;;;2761               }
;;;2762               break;
;;;2763   
;;;2764           // 油门测试完成步骤，关闭DAC输出调整为0，然后上报结果
;;;2765           case STEP_THROTTLE_CAN_TEST_COMPLETE:
;;;2766               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;2767               AVO_PIN_Reset();
;;;2768               Clear_All_Lines();
;;;2769               Display_Centered(0, "THROTTLE");
;;;2770               Display_Centered(1, "Test Pass");
;;;2771               STATE_EnterState(STATE_STANDBY);
;;;2772   //            DAC0_output(0);
;;;2773               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;2774               break;
;;;2775   
;;;2776           // 通信超时，给出油门测试函数，并且case上面的步骤
;;;2777           case STEP_THROTTLE_CAN_TEST_COMMUNICATION_TIME_OUT:
;;;2778   //            DAC0_output(0);
;;;2779               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
0000c4  2100              MOVS     r1,#0
0000c6  200b              MOVS     r0,#0xb
0000c8  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;2780               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0000cc  2008              MOVS     r0,#8
0000ce  f7fffffe          BL       TIMER_KillTask
;;;2781               AVO_PIN_Reset();
0000d2  f7fffffe          BL       AVO_PIN_Reset
;;;2782               Clear_All_Lines();
0000d6  f7fffffe          BL       Clear_All_Lines
;;;2783               Display_Centered(0, "THROTTLE");
0000da  a18e              ADR      r1,|L25.788|
0000dc  2000              MOVS     r0,#0
0000de  f7fffffe          BL       Display_Centered
;;;2784               Display_Centered(1, "Test Timeout");
0000e2  a195              ADR      r1,|L25.824|
0000e4  2001              MOVS     r0,#1
0000e6  f7fffffe          BL       Display_Centered
;;;2785               STATE_EnterState(STATE_STANDBY);
0000ea  e8bd407c          POP      {r2-r6,lr}
0000ee  2001              MOVS     r0,#1
0000f0  f7ffbffe          B.W      STATE_EnterState
                  |L25.244|
0000f4  2097              MOVS     r0,#0x97              ;2628
0000f6  f7fffffe          BL       STATE_SwitchStep
0000fa  2001              MOVS     r0,#1                 ;2631
0000fc  f7fffffe          BL       THROTTLE_VCC_TEST_EN
000100  2100              MOVS     r1,#0                 ;2633
000102  2001              MOVS     r0,#1                 ;2633
000104  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000108  2100              MOVS     r1,#0                 ;2634
00010a  2001              MOVS     r0,#1                 ;2634
00010c  e001              B        |L25.274|
                  |L25.270|
00010e  e035              B        |L25.380|
                  |L25.272|
000110  e019              B        |L25.326|
                  |L25.274|
000112  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000116  f7fffffe          BL       Clear_All_Lines
00011a  a17e              ADR      r1,|L25.788|
00011c  2000              MOVS     r0,#0                 ;2636
00011e  f7fffffe          BL       Display_Centered
000122  a189              ADR      r1,|L25.840|
000124  2001              MOVS     r0,#1                 ;2637
000126  f7fffffe          BL       Display_Centered
00012a  a18a              ADR      r1,|L25.852|
00012c  2002              MOVS     r0,#2                 ;2638
00012e  f7fffffe          BL       Display_Centered
000132  2001              MOVS     r0,#1                 ;2641
000134  9000              STR      r0,[sp,#0]            ;2641
000136  9001              STR      r0,[sp,#4]            ;2641
000138  239e              MOVS     r3,#0x9e              ;2641
00013a  4a89              LDR      r2,|L25.864|
00013c  f44f617a          MOV      r1,#0xfa0             ;2641
000140  2008              MOVS     r0,#8                 ;2641
000142  f7fffffe          BL       TIMER_AddTask
                  |L25.326|
;;;2786               break;
;;;2787   
;;;2788           default:
;;;2789               break;
;;;2790       }
;;;2791   }
000146  bd7c              POP      {r2-r6,pc}
                  |L25.328|
000148  f7fffffe          BL       Clear_All_Lines
00014c  a171              ADR      r1,|L25.788|
00014e  2000              MOVS     r0,#0                 ;2671
000150  f7fffffe          BL       Display_Centered
000154  a175              ADR      r1,|L25.812|
000156  2001              MOVS     r0,#1                 ;2672
000158  f7fffffe          BL       Display_Centered
00015c  a181              ADR      r1,|L25.868|
00015e  2002              MOVS     r0,#2                 ;2673
000160  f7fffffe          BL       Display_Centered
000164  2100              MOVS     r1,#0                 ;2674
000166  200b              MOVS     r0,#0xb               ;2674
000168  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00016c  2008              MOVS     r0,#8                 ;2675
00016e  f7fffffe          BL       TIMER_KillTask
000172  e8bd407c          POP      {r2-r6,lr}            ;2676
000176  2001              MOVS     r0,#1                 ;2676
000178  f7ffbffe          B.W      STATE_EnterState
                  |L25.380|
00017c  2097              MOVS     r0,#0x97              ;2682
00017e  f7fffffe          BL       STATE_SwitchStep
000182  2008              MOVS     r0,#8                 ;2683
000184  f7fffffe          BL       TIMER_ResetTimer
000188  f8b40040          LDRH     r0,[r4,#0x40]         ;2686  ; dut_info
00018c  f2a010f5          SUB      r0,r0,#0x1f5          ;2686
000190  42a8              CMP      r0,r5                 ;2686
000192  d21e              BCS      |L25.466|
000194  f64030b8          MOV      r0,#0xbb8             ;2689
000198  f7fffffe          BL       DAC0_output
00019c  4630              MOV      r0,r6                 ;2690
00019e  f7fffffe          BL       Delayms
0001a2  f7fffffe          BL       Clear_All_Lines
0001a6  a15b              ADR      r1,|L25.788|
0001a8  2000              MOVS     r0,#0                 ;2692
0001aa  f7fffffe          BL       Display_Centered
0001ae  e002              B        |L25.438|
                  |L25.432|
0001b0  e029              B        |L25.518|
                  |L25.434|
0001b2  e069              B        |L25.648|
                  |L25.436|
0001b4  e091              B        |L25.730|
                  |L25.438|
0001b6  a16e              ADR      r1,|L25.880|
0001b8  2001              MOVS     r0,#1                 ;2693
0001ba  f7fffffe          BL       Display_Centered
0001be  a170              ADR      r1,|L25.896|
0001c0  2002              MOVS     r0,#2                 ;2694
0001c2  f7fffffe          BL       Display_Centered
0001c6  e8bd407c          POP      {r2-r6,lr}            ;2697
0001ca  2101              MOVS     r1,#1                 ;2697
0001cc  20eb              MOVS     r0,#0xeb              ;2697
0001ce  f7ffbffe          B.W      CAN_PROTOCOL_TEST_SendCmdParamAck
                  |L25.466|
0001d2  f7fffffe          BL       Clear_All_Lines
0001d6  a14f              ADR      r1,|L25.788|
0001d8  2000              MOVS     r0,#0                 ;2702
0001da  f7fffffe          BL       Display_Centered
0001de  a16a              ADR      r1,|L25.904|
0001e0  2001              MOVS     r0,#1                 ;2703
0001e2  f7fffffe          BL       Display_Centered
0001e6  a15f              ADR      r1,|L25.868|
0001e8  2002              MOVS     r0,#2                 ;2704
0001ea  f7fffffe          BL       Display_Centered
0001ee  2100              MOVS     r1,#0                 ;2705
0001f0  200b              MOVS     r0,#0xb               ;2705
0001f2  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001f6  2008              MOVS     r0,#8                 ;2706
0001f8  f7fffffe          BL       TIMER_KillTask
0001fc  e8bd407c          POP      {r2-r6,lr}            ;2707
000200  2001              MOVS     r0,#1                 ;2707
000202  f7ffbffe          B.W      STATE_EnterState
                  |L25.518|
000206  2097              MOVS     r0,#0x97              ;2713
000208  f7fffffe          BL       STATE_SwitchStep
00020c  2008              MOVS     r0,#8                 ;2714
00020e  f7fffffe          BL       TIMER_ResetTimer
000212  f8b40040          LDRH     r0,[r4,#0x40]         ;2717  ; dut_info
000216  f6a010c5          SUB      r0,r0,#0x9c5          ;2717
00021a  42a8              CMP      r0,r5                 ;2717
00021c  d21a              BCS      |L25.596|
00021e  f2413088          MOV      r0,#0x1388            ;2720
000222  f7fffffe          BL       DAC0_output
000226  4630              MOV      r0,r6                 ;2721
000228  f7fffffe          BL       Delayms
00022c  f7fffffe          BL       Clear_All_Lines
000230  a138              ADR      r1,|L25.788|
000232  2000              MOVS     r0,#0                 ;2723
000234  f7fffffe          BL       Display_Centered
000238  a14d              ADR      r1,|L25.880|
00023a  2001              MOVS     r0,#1                 ;2724
00023c  f7fffffe          BL       Display_Centered
000240  a152              ADR      r1,|L25.908|
000242  2002              MOVS     r0,#2                 ;2725
000244  f7fffffe          BL       Display_Centered
000248  e8bd407c          POP      {r2-r6,lr}            ;2728
00024c  2101              MOVS     r1,#1                 ;2728
00024e  20eb              MOVS     r0,#0xeb              ;2728
000250  f7ffbffe          B.W      CAN_PROTOCOL_TEST_SendCmdParamAck
                  |L25.596|
000254  f7fffffe          BL       Clear_All_Lines
000258  a12e              ADR      r1,|L25.788|
00025a  2000              MOVS     r0,#0                 ;2733
00025c  f7fffffe          BL       Display_Centered
000260  a149              ADR      r1,|L25.904|
000262  2001              MOVS     r0,#1                 ;2734
000264  f7fffffe          BL       Display_Centered
000268  a13e              ADR      r1,|L25.868|
00026a  2002              MOVS     r0,#2                 ;2735
00026c  f7fffffe          BL       Display_Centered
000270  2100              MOVS     r1,#0                 ;2736
000272  200b              MOVS     r0,#0xb               ;2736
000274  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000278  2008              MOVS     r0,#8                 ;2737
00027a  f7fffffe          BL       TIMER_KillTask
00027e  e8bd407c          POP      {r2-r6,lr}            ;2738
000282  2001              MOVS     r0,#1                 ;2738
000284  f7ffbffe          B.W      STATE_EnterState
                  |L25.648|
000288  2008              MOVS     r0,#8                 ;2744
00028a  f7fffffe          BL       TIMER_ResetTimer
00028e  f8b40040          LDRH     r0,[r4,#0x40]         ;2747  ; dut_info
000292  f5a05088          SUB      r0,r0,#0x1100         ;2747
000296  3895              SUBS     r0,r0,#0x95           ;2747
000298  42a8              CMP      r0,r5                 ;2747
00029a  d212              BCS      |L25.706|
00029c  f7fffffe          BL       Clear_All_Lines
0002a0  a11c              ADR      r1,|L25.788|
0002a2  2000              MOVS     r0,#0                 ;2751
0002a4  f7fffffe          BL       Display_Centered
0002a8  a131              ADR      r1,|L25.880|
0002aa  2001              MOVS     r0,#1                 ;2752
0002ac  f7fffffe          BL       Display_Centered
0002b0  a138              ADR      r1,|L25.916|
0002b2  2002              MOVS     r0,#2                 ;2753
0002b4  f7fffffe          BL       Display_Centered
0002b8  e8bd407c          POP      {r2-r6,lr}            ;2754
0002bc  209d              MOVS     r0,#0x9d              ;2754
0002be  f7ffbffe          B.W      STATE_SwitchStep
                  |L25.706|
0002c2  2100              MOVS     r1,#0                 ;2758
0002c4  200b              MOVS     r0,#0xb               ;2758
0002c6  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0002ca  2008              MOVS     r0,#8                 ;2759
0002cc  f7fffffe          BL       TIMER_KillTask
0002d0  e8bd407c          POP      {r2-r6,lr}            ;2760
0002d4  2001              MOVS     r0,#1                 ;2760
0002d6  f7ffbffe          B.W      STATE_EnterState
                  |L25.730|
0002da  2008              MOVS     r0,#8                 ;2766
0002dc  f7fffffe          BL       TIMER_KillTask
0002e0  f7fffffe          BL       AVO_PIN_Reset
0002e4  f7fffffe          BL       Clear_All_Lines
0002e8  a10a              ADR      r1,|L25.788|
0002ea  2000              MOVS     r0,#0                 ;2769
0002ec  f7fffffe          BL       Display_Centered
0002f0  a12a              ADR      r1,|L25.924|
0002f2  2001              MOVS     r0,#1                 ;2770
0002f4  f7fffffe          BL       Display_Centered
0002f8  2001              MOVS     r0,#1                 ;2771
0002fa  f7fffffe          BL       STATE_EnterState
0002fe  e8bd407c          POP      {r2-r6,lr}            ;2773
000302  2101              MOVS     r1,#1                 ;2773
000304  200b              MOVS     r0,#0xb               ;2773
000306  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
;;;2792   
                          ENDP

00030a  0000              DCW      0x0000
                  |L25.780|
                          DCD      ||.data||+0x6
                  |L25.784|
                          DCD      dut_info
                  |L25.788|
000314  5448524f          DCB      "THROTTLE",0
000318  54544c45
00031c  00      
00031d  00                DCB      0
00031e  00                DCB      0
00031f  00                DCB      0
                  |L25.800|
000320  54657374          DCB      "Testing",0
000324  696e6700
                  |L25.808|
                          DCD      measure
                  |L25.812|
00032c  56434300          DCB      "VCC",0
                  |L25.816|
000330  4e6f726d          DCB      "Normal",0
000334  616c00  
000337  00                DCB      0
                  |L25.824|
000338  54657374          DCB      "Test Timeout",0
00033c  2054696d
000340  656f7574
000344  00      
000345  00                DCB      0
000346  00                DCB      0
000347  00                DCB      0
                  |L25.840|
000348  41564f20          DCB      "AVO METER",0
00034c  4d455445
000350  5200    
000352  00                DCB      0
000353  00                DCB      0
                  |L25.852|
000354  4d656173          DCB      "Measurement",0
000358  7572656d
00035c  656e7400
                  |L25.864|
                          DCD      STATE_SwitchStep
                  |L25.868|
000364  41626e6f          DCB      "Abnormal",0
000368  726d616c
00036c  00      
00036d  00                DCB      0
00036e  00                DCB      0
00036f  00                DCB      0
                  |L25.880|
000370  41646a75          DCB      "Adjusting DAC",0
000374  7374696e
000378  67204441
00037c  4300    
00037e  00                DCB      0
00037f  00                DCB      0
                  |L25.896|
000380  46697273          DCB      "First",0
000384  7400    
000386  00                DCB      0
000387  00                DCB      0
                  |L25.904|
000388  53494700          DCB      "SIG",0
                  |L25.908|
00038c  5365636f          DCB      "Second",0
000390  6e6400  
000393  00                DCB      0
                  |L25.916|
000394  54686972          DCB      "Third",0
000398  6400    
00039a  00                DCB      0
00039b  00                DCB      0
                  |L25.924|
00039c  54657374          DCB      "Test Pass",0
0003a0  20506173
0003a4  7300    
0003a6  00                DCB      0
0003a7  00                DCB      0

                          AREA ||i.STEP_Process_ThrottleUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_ThrottleUartTest PROC
;;;1112   // 油门测试
;;;1113   void STEP_Process_ThrottleUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;1114   {
;;;1115       switch (stateCB.step)
000002  48c6              LDR      r0,|L26.796|
;;;1116       {
;;;1117           case STEP_NULL: // 空步骤
;;;1118               break;
;;;1119   
;;;1120           case STEP_THROTTLE_UART_TEST_ENTRY: // 入口步骤
;;;1121               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_VCC);
;;;1122               UART_DRIVE_InitSelect(dut_info.uart_baudRate);
000004  4cc6              LDR      r4,|L26.800|
;;;1123               DUT_PROTOCOL_Init();
;;;1124   
;;;1125               Clear_All_Lines();
;;;1126               Display_Centered(0, "THROTTLE");
;;;1127               Display_Centered(1, "Testing");
;;;1128   
;;;1129               // 测试引脚复位
;;;1130               AVO_PIN_Reset();
;;;1131               break;
;;;1132   
;;;1133           case STEP_THROTTLE_UART_TEST_WAIT_RESPONSE: // 等待仪表或万用表回应
;;;1134               break;
;;;1135   
;;;1136           case STEP_THROTTLE_UART_TEST_VCC: // 通知万用表测VCC
;;;1137               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_WAIT_RESPONSE);
;;;1138   
;;;1139               // 打开VCC测试引脚
;;;1140               THROTTLE_VCC_TEST_EN(TRUE);
;;;1141   
;;;1142               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1143               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1144               Clear_All_Lines();
;;;1145               Display_Centered(0, "THROTTLE");
;;;1146               Display_Centered(1, "AVO METER");
;;;1147               Display_Centered(2, "Measurement");
;;;1148   
;;;1149               // 添加超时
;;;1150               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;1151                             4000,
;;;1152                             STATE_SwitchStep,
;;;1153                             STEP_THROTTLE_UART_TEST_COMMUNICATION_TIME_OUT,
;;;1154                             1,
;;;1155                             ACTION_MODE_ADD_TO_QUEUE);
;;;1156               break;
;;;1157   
;;;1158           // 比对VCC
;;;1159           case STEP_THROTTLE_UART_TEST_CHECK_VOLTAGE_VALUE:
;;;1160               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_WAIT_RESPONSE);
;;;1161               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1162   
;;;1163               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;1164               {
;;;1165                   // 调整DAC输出,单位mv
;;;1166                   DAC0_output(FIRST_DAC);
;;;1167                   Delayms(300);
000006  f44f7696          MOV      r6,#0x12c
00000a  8840              LDRH     r0,[r0,#2]            ;1115  ; stateCB
;;;1168                   Clear_All_Lines();
;;;1169                   Display_Centered(0, "THROTTLE");
;;;1170                   Display_Centered(1, "VCC");
;;;1171                   Display_Centered(2, "Normal");
;;;1172   
;;;1173                   // 获取油门AD值
;;;1174                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_GET_THROTTLE_BRAKE_AD, 1);
;;;1175               }
;;;1176               // VCC不正常，则上报
;;;1177               else
;;;1178               {
;;;1179                   Clear_All_Lines();
;;;1180                   Display_Centered(0, "THROTTLE");
;;;1181                   Display_Centered(1, "VCC");
;;;1182                   Display_Centered(2, "Abnormal");
;;;1183                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1184                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1185                   STATE_EnterState(STATE_STANDBY);
;;;1186               }
;;;1187               break;
;;;1188   
;;;1189           // 在这进行判断数值是否正常，第一次
;;;1190           case STEP_THROTTLE_UART_TEST_CHECK_DAC1_VALUE:
;;;1191               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_WAIT_RESPONSE);
;;;1192               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1193   
;;;1194               // 处理DAC1数值检查逻辑
;;;1195               if ((dut_info.throttleAd > FIRST_DAC - ERROR_DAC) && (dut_info.throttleAd < FIRST_DAC + ERROR_DAC))
00000c  f24035e7          MOV      r5,#0x3e7
000010  283f              CMP      r0,#0x3f              ;1115
000012  d07d              BEQ      |L26.272|
000014  dc50              BGT      |L26.184|
000016  283c              CMP      r0,#0x3c              ;1115
000018  d07b              BEQ      |L26.274|
00001a  dc19              BGT      |L26.80|
00001c  2800              CMP      r0,#0                 ;1115
00001e  d078              BEQ      |L26.274|
000020  283b              CMP      r0,#0x3b              ;1115
000022  d176              BNE      |L26.274|
000024  203d              MOVS     r0,#0x3d              ;1121
000026  f7fffffe          BL       STATE_SwitchStep
00002a  6a20              LDR      r0,[r4,#0x20]         ;1122  ; dut_info
00002c  f7fffffe          BL       UART_DRIVE_InitSelect
000030  f7fffffe          BL       DUT_PROTOCOL_Init
000034  f7fffffe          BL       Clear_All_Lines
000038  a1ba              ADR      r1,|L26.804|
00003a  2000              MOVS     r0,#0                 ;1126
00003c  f7fffffe          BL       Display_Centered
000040  a1bb              ADR      r1,|L26.816|
000042  2001              MOVS     r0,#1                 ;1127
000044  f7fffffe          BL       Display_Centered
000048  e8bd407c          POP      {r2-r6,lr}            ;1130
00004c  f7ffbffe          B.W      AVO_PIN_Reset
                  |L26.80|
000050  283d              CMP      r0,#0x3d              ;1115
000052  d054              BEQ      |L26.254|
000054  4db8              LDR      r5,|L26.824|
000056  283e              CMP      r0,#0x3e              ;1115
000058  d17a              BNE      |L26.336|
00005a  203c              MOVS     r0,#0x3c              ;1160
00005c  f7fffffe          BL       STATE_SwitchStep
000060  2008              MOVS     r0,#8                 ;1161
000062  f7fffffe          BL       TIMER_ResetTimer
000066  6ba0              LDR      r0,[r4,#0x38]         ;1163  ; dut_info
000068  f7fffffe          BL       __aeabi_ui2f
00006c  6829              LDR      r1,[r5,#0]            ;1163  ; measure
00006e  f7fffffe          BL       __aeabi_cfcmple
000072  d26f              BCS      |L26.340|
000074  6b60              LDR      r0,[r4,#0x34]         ;1163  ; dut_info
000076  f7fffffe          BL       __aeabi_ui2f
00007a  6829              LDR      r1,[r5,#0]            ;1163  ; measure
00007c  f7fffffe          BL       __aeabi_cfrcmple
000080  d268              BCS      |L26.340|
000082  f44f707a          MOV      r0,#0x3e8             ;1166
000086  f7fffffe          BL       DAC0_output
00008a  4630              MOV      r0,r6                 ;1167
00008c  f7fffffe          BL       Delayms
000090  f7fffffe          BL       Clear_All_Lines
000094  a1a3              ADR      r1,|L26.804|
000096  2000              MOVS     r0,#0                 ;1169
000098  f7fffffe          BL       Display_Centered
00009c  a1a7              ADR      r1,|L26.828|
00009e  2001              MOVS     r0,#1                 ;1170
0000a0  f7fffffe          BL       Display_Centered
0000a4  a1a6              ADR      r1,|L26.832|
0000a6  2002              MOVS     r0,#2                 ;1171
0000a8  f7fffffe          BL       Display_Centered
0000ac  e8bd407c          POP      {r2-r6,lr}            ;1174
0000b0  2101              MOVS     r1,#1                 ;1174
0000b2  20eb              MOVS     r0,#0xeb              ;1174
0000b4  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L26.184|
0000b8  2840              CMP      r0,#0x40              ;1115
0000ba  d07d              BEQ      |L26.440|
0000bc  2841              CMP      r0,#0x41              ;1115
0000be  d07c              BEQ      |L26.442|
0000c0  2842              CMP      r0,#0x42              ;1115
0000c2  d07b              BEQ      |L26.444|
0000c4  2843              CMP      r0,#0x43              ;1115
0000c6  d143              BNE      |L26.336|
;;;1196               {
;;;1197                   // 调整DAC输出,单位mv
;;;1198                   DAC0_output(SECOND_DAC);
;;;1199                   Delayms(300);
;;;1200                   Clear_All_Lines();
;;;1201                   Display_Centered(0, "THROTTLE");
;;;1202                   Display_Centered(1, "Adjusting DAC");
;;;1203                   Display_Centered(2, "First");
;;;1204   
;;;1205                   // 获取油门AD值
;;;1206                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_GET_THROTTLE_BRAKE_AD, 1);
;;;1207               }
;;;1208               else
;;;1209               {
;;;1210                   Clear_All_Lines();
;;;1211                   Display_Centered(0, "THROTTLE");
;;;1212                   Display_Centered(1, "SIG");
;;;1213                   Display_Centered(2, "Abnormal");
;;;1214                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1215                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1216                   STATE_EnterState(STATE_STANDBY);
;;;1217               }
;;;1218               break;
;;;1219   
;;;1220           // 在这进行判断数值是否正常，第二次
;;;1221           case STEP_THROTTLE_UART_TEST_CHECK_DAC3_VALUE:
;;;1222               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_WAIT_RESPONSE);
;;;1223               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1224   
;;;1225               // 处理DAC5数值检查逻辑
;;;1226               if ((dut_info.throttleAd > SECOND_DAC - ERROR_DAC) && (dut_info.throttleAd < SECOND_DAC + ERROR_DAC))
;;;1227               {
;;;1228                   // 调整DAC输出,单位mv
;;;1229                   DAC0_output(THIRD_DAC);
;;;1230                   Delayms(300);
;;;1231                   Clear_All_Lines();
;;;1232                   Display_Centered(0, "THROTTLE");
;;;1233                   Display_Centered(1, "Adjusting DAC");
;;;1234                   Display_Centered(2, "Second");
;;;1235   
;;;1236                   // 获取油门AD值
;;;1237                   DUT_PROTOCOL_SendCmdParamAck(DUT_PROTOCOL_CMD_GET_THROTTLE_BRAKE_AD, 1);
;;;1238               }
;;;1239               else
;;;1240               {
;;;1241                   Clear_All_Lines();
;;;1242                   Display_Centered(0, "THROTTLE");
;;;1243                   Display_Centered(1, "SIG");
;;;1244                   Display_Centered(2, "Abnormal");
;;;1245                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1246                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1247                   STATE_EnterState(STATE_STANDBY);
;;;1248               }
;;;1249               break;
;;;1250   
;;;1251           // 在这进行判断数值是否正常，第三次
;;;1252           case STEP_THROTTLE_UART_TEST_CHECK_DAC5_VALUE:
;;;1253               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1254   
;;;1255               // 处理DAC5数值检查逻辑
;;;1256               if ((dut_info.throttleAd > THIRD_DAC - ERROR_DAC) && (dut_info.throttleAd < THIRD_DAC + ERROR_DAC))
;;;1257               {
;;;1258                   // 3次都正常则测试通过
;;;1259                   Clear_All_Lines();
;;;1260                   Display_Centered(0, "THROTTLE");
;;;1261                   Display_Centered(1, "Adjusting DAC");
;;;1262                   Display_Centered(2, "Third");
;;;1263                   STATE_SwitchStep(STEP_THROTTLE_UART_TEST_COMPLETE);
;;;1264               }
;;;1265               else
;;;1266               {
;;;1267                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1268                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1269                   STATE_EnterState(STATE_STANDBY);
;;;1270               }
;;;1271               break;
;;;1272   
;;;1273           // 油门测试完成步骤，关闭DAC输出调整为0，然后上报结果
;;;1274           case STEP_THROTTLE_UART_TEST_COMPLETE:
;;;1275               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1276               AVO_PIN_Reset();
;;;1277               Clear_All_Lines();
;;;1278               Display_Centered(0, "THROTTLE");
;;;1279               Display_Centered(1, "Test Pass");
;;;1280               STATE_EnterState(STATE_STANDBY);
;;;1281               DAC0_output(0);
;;;1282               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;1283               break;
;;;1284   
;;;1285           // 通信超时
;;;1286           case STEP_THROTTLE_UART_TEST_COMMUNICATION_TIME_OUT:
;;;1287               DAC0_output(0);
0000c8  2000              MOVS     r0,#0
0000ca  f7fffffe          BL       DAC0_output
;;;1288               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
0000ce  2100              MOVS     r1,#0
0000d0  200b              MOVS     r0,#0xb
0000d2  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;1289               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0000d6  2008              MOVS     r0,#8
0000d8  f7fffffe          BL       TIMER_KillTask
;;;1290               AVO_PIN_Reset();
0000dc  f7fffffe          BL       AVO_PIN_Reset
;;;1291               Clear_All_Lines();
0000e0  f7fffffe          BL       Clear_All_Lines
;;;1292               Display_Centered(0, "THROTTLE");
0000e4  a18f              ADR      r1,|L26.804|
0000e6  2000              MOVS     r0,#0
0000e8  f7fffffe          BL       Display_Centered
;;;1293               Display_Centered(1, "Test Timeout");
0000ec  a196              ADR      r1,|L26.840|
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       Display_Centered
;;;1294               STATE_EnterState(STATE_STANDBY);
0000f4  e8bd407c          POP      {r2-r6,lr}
0000f8  2001              MOVS     r0,#1
0000fa  f7ffbffe          B.W      STATE_EnterState
                  |L26.254|
0000fe  203c              MOVS     r0,#0x3c              ;1137
000100  f7fffffe          BL       STATE_SwitchStep
000104  2001              MOVS     r0,#1                 ;1140
000106  f7fffffe          BL       THROTTLE_VCC_TEST_EN
00010a  2100              MOVS     r1,#0                 ;1142
00010c  2001              MOVS     r0,#1                 ;1142
00010e  e001              B        |L26.276|
                  |L26.272|
000110  e03a              B        |L26.392|
                  |L26.274|
000112  e01d              B        |L26.336|
                  |L26.276|
000114  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000118  2100              MOVS     r1,#0                 ;1143
00011a  2001              MOVS     r0,#1                 ;1143
00011c  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000120  f7fffffe          BL       Clear_All_Lines
000124  a17f              ADR      r1,|L26.804|
000126  2000              MOVS     r0,#0                 ;1145
000128  f7fffffe          BL       Display_Centered
00012c  a18a              ADR      r1,|L26.856|
00012e  2001              MOVS     r0,#1                 ;1146
000130  f7fffffe          BL       Display_Centered
000134  a18b              ADR      r1,|L26.868|
000136  2002              MOVS     r0,#2                 ;1147
000138  f7fffffe          BL       Display_Centered
00013c  2001              MOVS     r0,#1                 ;1150
00013e  9000              STR      r0,[sp,#0]            ;1150
000140  9001              STR      r0,[sp,#4]            ;1150
000142  2343              MOVS     r3,#0x43              ;1150
000144  4a8a              LDR      r2,|L26.880|
000146  f44f617a          MOV      r1,#0xfa0             ;1150
00014a  2008              MOVS     r0,#8                 ;1150
00014c  f7fffffe          BL       TIMER_AddTask
                  |L26.336|
;;;1295               break;
;;;1296   
;;;1297           default:
;;;1298               break;
;;;1299       }
;;;1300   }
000150  bd7c              POP      {r2-r6,pc}
000152  e7ff              B        |L26.340|
                  |L26.340|
000154  f7fffffe          BL       Clear_All_Lines
000158  a172              ADR      r1,|L26.804|
00015a  2000              MOVS     r0,#0                 ;1180
00015c  f7fffffe          BL       Display_Centered
000160  a176              ADR      r1,|L26.828|
000162  2001              MOVS     r0,#1                 ;1181
000164  f7fffffe          BL       Display_Centered
000168  a182              ADR      r1,|L26.884|
00016a  2002              MOVS     r0,#2                 ;1182
00016c  f7fffffe          BL       Display_Centered
000170  2100              MOVS     r1,#0                 ;1183
000172  200b              MOVS     r0,#0xb               ;1183
000174  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000178  2008              MOVS     r0,#8                 ;1184
00017a  f7fffffe          BL       TIMER_KillTask
00017e  e8bd407c          POP      {r2-r6,lr}            ;1185
000182  2001              MOVS     r0,#1                 ;1185
000184  f7ffbffe          B.W      STATE_EnterState
                  |L26.392|
000188  203c              MOVS     r0,#0x3c              ;1191
00018a  f7fffffe          BL       STATE_SwitchStep
00018e  2008              MOVS     r0,#8                 ;1192
000190  f7fffffe          BL       TIMER_ResetTimer
000194  f8b40040          LDRH     r0,[r4,#0x40]         ;1195  ; dut_info
000198  f2a010f5          SUB      r0,r0,#0x1f5          ;1195
00019c  42a8              CMP      r0,r5                 ;1195
00019e  d21e              BCS      |L26.478|
0001a0  f64030b8          MOV      r0,#0xbb8             ;1198
0001a4  f7fffffe          BL       DAC0_output
0001a8  4630              MOV      r0,r6                 ;1199
0001aa  f7fffffe          BL       Delayms
0001ae  f7fffffe          BL       Clear_All_Lines
0001b2  a15c              ADR      r1,|L26.804|
0001b4  2000              MOVS     r0,#0                 ;1201
0001b6  e002              B        |L26.446|
                  |L26.440|
0001b8  e02b              B        |L26.530|
                  |L26.442|
0001ba  e06b              B        |L26.660|
                  |L26.444|
0001bc  e093              B        |L26.742|
                  |L26.446|
0001be  f7fffffe          BL       Display_Centered
0001c2  a16f              ADR      r1,|L26.896|
0001c4  2001              MOVS     r0,#1                 ;1202
0001c6  f7fffffe          BL       Display_Centered
0001ca  a171              ADR      r1,|L26.912|
0001cc  2002              MOVS     r0,#2                 ;1203
0001ce  f7fffffe          BL       Display_Centered
0001d2  e8bd407c          POP      {r2-r6,lr}            ;1206
0001d6  2101              MOVS     r1,#1                 ;1206
0001d8  20eb              MOVS     r0,#0xeb              ;1206
0001da  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L26.478|
0001de  f7fffffe          BL       Clear_All_Lines
0001e2  a150              ADR      r1,|L26.804|
0001e4  2000              MOVS     r0,#0                 ;1211
0001e6  f7fffffe          BL       Display_Centered
0001ea  a16b              ADR      r1,|L26.920|
0001ec  2001              MOVS     r0,#1                 ;1212
0001ee  f7fffffe          BL       Display_Centered
0001f2  a160              ADR      r1,|L26.884|
0001f4  2002              MOVS     r0,#2                 ;1213
0001f6  f7fffffe          BL       Display_Centered
0001fa  2100              MOVS     r1,#0                 ;1214
0001fc  200b              MOVS     r0,#0xb               ;1214
0001fe  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000202  2008              MOVS     r0,#8                 ;1215
000204  f7fffffe          BL       TIMER_KillTask
000208  e8bd407c          POP      {r2-r6,lr}            ;1216
00020c  2001              MOVS     r0,#1                 ;1216
00020e  f7ffbffe          B.W      STATE_EnterState
                  |L26.530|
000212  203c              MOVS     r0,#0x3c              ;1222
000214  f7fffffe          BL       STATE_SwitchStep
000218  2008              MOVS     r0,#8                 ;1223
00021a  f7fffffe          BL       TIMER_ResetTimer
00021e  f8b40040          LDRH     r0,[r4,#0x40]         ;1226  ; dut_info
000222  f6a010c5          SUB      r0,r0,#0x9c5          ;1226
000226  42a8              CMP      r0,r5                 ;1226
000228  d21a              BCS      |L26.608|
00022a  f2413088          MOV      r0,#0x1388            ;1229
00022e  f7fffffe          BL       DAC0_output
000232  4630              MOV      r0,r6                 ;1230
000234  f7fffffe          BL       Delayms
000238  f7fffffe          BL       Clear_All_Lines
00023c  a139              ADR      r1,|L26.804|
00023e  2000              MOVS     r0,#0                 ;1232
000240  f7fffffe          BL       Display_Centered
000244  a14e              ADR      r1,|L26.896|
000246  2001              MOVS     r0,#1                 ;1233
000248  f7fffffe          BL       Display_Centered
00024c  a153              ADR      r1,|L26.924|
00024e  2002              MOVS     r0,#2                 ;1234
000250  f7fffffe          BL       Display_Centered
000254  e8bd407c          POP      {r2-r6,lr}            ;1237
000258  2101              MOVS     r1,#1                 ;1237
00025a  20eb              MOVS     r0,#0xeb              ;1237
00025c  f7ffbffe          B.W      DUT_PROTOCOL_SendCmdParamAck
                  |L26.608|
000260  f7fffffe          BL       Clear_All_Lines
000264  a12f              ADR      r1,|L26.804|
000266  2000              MOVS     r0,#0                 ;1242
000268  f7fffffe          BL       Display_Centered
00026c  a14a              ADR      r1,|L26.920|
00026e  2001              MOVS     r0,#1                 ;1243
000270  f7fffffe          BL       Display_Centered
000274  a13f              ADR      r1,|L26.884|
000276  2002              MOVS     r0,#2                 ;1244
000278  f7fffffe          BL       Display_Centered
00027c  2100              MOVS     r1,#0                 ;1245
00027e  200b              MOVS     r0,#0xb               ;1245
000280  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000284  2008              MOVS     r0,#8                 ;1246
000286  f7fffffe          BL       TIMER_KillTask
00028a  e8bd407c          POP      {r2-r6,lr}            ;1247
00028e  2001              MOVS     r0,#1                 ;1247
000290  f7ffbffe          B.W      STATE_EnterState
                  |L26.660|
000294  2008              MOVS     r0,#8                 ;1253
000296  f7fffffe          BL       TIMER_ResetTimer
00029a  f8b40040          LDRH     r0,[r4,#0x40]         ;1256  ; dut_info
00029e  f5a05088          SUB      r0,r0,#0x1100         ;1256
0002a2  3895              SUBS     r0,r0,#0x95           ;1256
0002a4  42a8              CMP      r0,r5                 ;1256
0002a6  d212              BCS      |L26.718|
0002a8  f7fffffe          BL       Clear_All_Lines
0002ac  a11d              ADR      r1,|L26.804|
0002ae  2000              MOVS     r0,#0                 ;1260
0002b0  f7fffffe          BL       Display_Centered
0002b4  a132              ADR      r1,|L26.896|
0002b6  2001              MOVS     r0,#1                 ;1261
0002b8  f7fffffe          BL       Display_Centered
0002bc  a139              ADR      r1,|L26.932|
0002be  2002              MOVS     r0,#2                 ;1262
0002c0  f7fffffe          BL       Display_Centered
0002c4  e8bd407c          POP      {r2-r6,lr}            ;1263
0002c8  2042              MOVS     r0,#0x42              ;1263
0002ca  f7ffbffe          B.W      STATE_SwitchStep
                  |L26.718|
0002ce  2100              MOVS     r1,#0                 ;1267
0002d0  200b              MOVS     r0,#0xb               ;1267
0002d2  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0002d6  2008              MOVS     r0,#8                 ;1268
0002d8  f7fffffe          BL       TIMER_KillTask
0002dc  e8bd407c          POP      {r2-r6,lr}            ;1269
0002e0  2001              MOVS     r0,#1                 ;1269
0002e2  f7ffbffe          B.W      STATE_EnterState
                  |L26.742|
0002e6  2008              MOVS     r0,#8                 ;1275
0002e8  f7fffffe          BL       TIMER_KillTask
0002ec  f7fffffe          BL       AVO_PIN_Reset
0002f0  f7fffffe          BL       Clear_All_Lines
0002f4  a10b              ADR      r1,|L26.804|
0002f6  2000              MOVS     r0,#0                 ;1278
0002f8  f7fffffe          BL       Display_Centered
0002fc  a12b              ADR      r1,|L26.940|
0002fe  2001              MOVS     r0,#1                 ;1279
000300  f7fffffe          BL       Display_Centered
000304  2001              MOVS     r0,#1                 ;1280
000306  f7fffffe          BL       STATE_EnterState
00030a  2000              MOVS     r0,#0                 ;1281
00030c  f7fffffe          BL       DAC0_output
000310  e8bd407c          POP      {r2-r6,lr}            ;1282
000314  2101              MOVS     r1,#1                 ;1282
000316  200b              MOVS     r0,#0xb               ;1282
000318  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
;;;1301   
                          ENDP

                  |L26.796|
                          DCD      ||.data||+0x6
                  |L26.800|
                          DCD      dut_info
                  |L26.804|
000324  5448524f          DCB      "THROTTLE",0
000328  54544c45
00032c  00      
00032d  00                DCB      0
00032e  00                DCB      0
00032f  00                DCB      0
                  |L26.816|
000330  54657374          DCB      "Testing",0
000334  696e6700
                  |L26.824|
                          DCD      measure
                  |L26.828|
00033c  56434300          DCB      "VCC",0
                  |L26.832|
000340  4e6f726d          DCB      "Normal",0
000344  616c00  
000347  00                DCB      0
                  |L26.840|
000348  54657374          DCB      "Test Timeout",0
00034c  2054696d
000350  656f7574
000354  00      
000355  00                DCB      0
000356  00                DCB      0
000357  00                DCB      0
                  |L26.856|
000358  41564f20          DCB      "AVO METER",0
00035c  4d455445
000360  5200    
000362  00                DCB      0
000363  00                DCB      0
                  |L26.868|
000364  4d656173          DCB      "Measurement",0
000368  7572656d
00036c  656e7400
                  |L26.880|
                          DCD      STATE_SwitchStep
                  |L26.884|
000374  41626e6f          DCB      "Abnormal",0
000378  726d616c
00037c  00      
00037d  00                DCB      0
00037e  00                DCB      0
00037f  00                DCB      0
                  |L26.896|
000380  41646a75          DCB      "Adjusting DAC",0
000384  7374696e
000388  67204441
00038c  4300    
00038e  00                DCB      0
00038f  00                DCB      0
                  |L26.912|
000390  46697273          DCB      "First",0
000394  7400    
000396  00                DCB      0
000397  00                DCB      0
                  |L26.920|
000398  53494700          DCB      "SIG",0
                  |L26.924|
00039c  5365636f          DCB      "Second",0
0003a0  6e6400  
0003a3  00                DCB      0
                  |L26.932|
0003a4  54686972          DCB      "Third",0
0003a8  6400    
0003aa  00                DCB      0
0003ab  00                DCB      0
                  |L26.940|
0003ac  54657374          DCB      "Test Pass",0
0003b0  20506173
0003b4  7300    
0003b6  00                DCB      0
0003b7  00                DCB      0

                          AREA ||i.STEP_Process_VlkCanTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_VlkCanTest PROC
;;;3177   // VLK测试
;;;3178   void STEP_Process_VlkCanTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;3179   {
;;;3180       switch (stateCB.step)
000002  4848              LDR      r0,|L27.292|
;;;3181       {
;;;3182           case STEP_NULL: // 空步骤
;;;3183               break;
;;;3184   
;;;3185           // 入口步骤
;;;3186           case STEP_VLK_CAN_TEST_ENTRY:
;;;3187               STATE_SwitchStep(STEP_VLK_CAN_TEST_VLK);
;;;3188               CAN_PROTOCOL_TEST_Init(dut_info.can_baudRate);
000004  4c48              LDR      r4,|L27.296|
000006  8840              LDRH     r0,[r0,#2]            ;3180  ; stateCB
000008  28b3              CMP      r0,#0xb3              ;3180
00000a  d029              BEQ      |L27.96|
00000c  dc13              BGT      |L27.54|
00000e  2800              CMP      r0,#0                 ;3180
000010  d04c              BEQ      |L27.172|
000012  28b1              CMP      r0,#0xb1              ;3180
000014  d14a              BNE      |L27.172|
000016  20b3              MOVS     r0,#0xb3              ;3187
000018  f7fffffe          BL       STATE_SwitchStep
00001c  8ba0              LDRH     r0,[r4,#0x1c]  ; dut_info
00001e  f7fffffe          BL       CAN_PROTOCOL_TEST_Init
;;;3189   
;;;3190               // LCD显示
;;;3191               Vertical_Scrolling_Display(vlkMsgBuff, 4, 0);
000022  4840              LDR      r0,|L27.292|
000024  2200              MOVS     r2,#0
000026  2104              MOVS     r1,#4
000028  1d00              ADDS     r0,r0,#4
00002a  f7fffffe          BL       Vertical_Scrolling_Display
;;;3192   
;;;3193               // 测试引脚复位
;;;3194               AVO_PIN_Reset();
00002e  e8bd407c          POP      {r2-r6,lr}
000032  f7ffbffe          B.W      AVO_PIN_Reset
                  |L27.54|
;;;3195               break;
;;;3196   
;;;3197           // 等待仪表或万用表回应
;;;3198           case STEP_VLK_CAN_TEST_WAIT_RESPONSE:
;;;3199               break;
;;;3200   
;;;3201           // 通知万用表测VLK
;;;3202           case STEP_VLK_CAN_TEST_VLK:
;;;3203               STATE_SwitchStep(STEP_VLK_CAN_TEST_WAIT_RESPONSE);
;;;3204   
;;;3205               // 使能VLK测试引脚
;;;3206               DUT_VLK_TEST_EN_ON();
;;;3207   
;;;3208               // 通知万用表测VLK
;;;3209   //            AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;3210               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;3211               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;3212   
;;;3213               // LCD显示
;;;3214               Vertical_Scrolling_Display(vlkMsgBuff, 4, 1);
;;;3215   
;;;3216               // 添加超时
;;;3217               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;3218                             4000,
;;;3219                             STATE_SwitchStep,
;;;3220                             STEP_VLK_CAN_TEST_COMMUNICATION_TIME_OUT,
;;;3221                             1,
;;;3222                             ACTION_MODE_ADD_TO_QUEUE);
;;;3223               break;
;;;3224   
;;;3225           // 比对VLK值
;;;3226           case STEP_VLK_CAN_TEST_CHECK_VOLTAGE_VALUE:
;;;3227               STATE_SwitchStep(STEP_VLK_CAN_TEST_WAIT_RESPONSE);
;;;3228               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;3229   
;;;3230               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
000036  4d3d              LDR      r5,|L27.300|
000038  28b4              CMP      r0,#0xb4              ;3180
00003a  d038              BEQ      |L27.174|
00003c  28b5              CMP      r0,#0xb5              ;3180
00003e  d05c              BEQ      |L27.250|
000040  28b6              CMP      r0,#0xb6              ;3180
000042  d133              BNE      |L27.172|
;;;3231               {
;;;3232                   STATE_SwitchStep(STEP_VLK_CAN_TEST_COMPLETE);
;;;3233               }
;;;3234               // VCC不正常，则上报
;;;3235               else
;;;3236               {
;;;3237                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;3238   
;;;3239                   // LCD显示
;;;3240                   Vertical_Scrolling_Display(vlkMsgBuff, 4, 2);
;;;3241               }
;;;3242               break;
;;;3243   
;;;3244           case STEP_VLK_CAN_TEST_COMPLETE: // 测试完成，然后上报结果
;;;3245               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;3246   
;;;3247               // LCD显示
;;;3248               Vertical_Scrolling_Display(vlkMsgBuff, 4, 3);
;;;3249               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;3250               AVO_PIN_Reset();
;;;3251               STATE_EnterState(STATE_STANDBY);
;;;3252               break;
;;;3253   
;;;3254           case STEP_VLK_CAN_TEST_COMMUNICATION_TIME_OUT: // 通信超时
;;;3255               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
000044  2100              MOVS     r1,#0
000046  200b              MOVS     r0,#0xb
000048  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;3256               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00004c  2008              MOVS     r0,#8
00004e  f7fffffe          BL       TIMER_KillTask
;;;3257               AVO_PIN_Reset();
000052  f7fffffe          BL       AVO_PIN_Reset
;;;3258               STATE_EnterState(STATE_STANDBY);
000056  e8bd407c          POP      {r2-r6,lr}
00005a  2001              MOVS     r0,#1
00005c  f7ffbffe          B.W      STATE_EnterState
                  |L27.96|
000060  20b2              MOVS     r0,#0xb2              ;3203
000062  f7fffffe          BL       STATE_SwitchStep
000066  4c32              LDR      r4,|L27.304|
000068  2320              MOVS     r3,#0x20              ;3206
00006a  2203              MOVS     r2,#3                 ;3206
00006c  2110              MOVS     r1,#0x10              ;3206
00006e  4620              MOV      r0,r4                 ;3206
000070  f7fffffe          BL       gpio_init
000074  2120              MOVS     r1,#0x20              ;3206
000076  4620              MOV      r0,r4                 ;3206
000078  f7fffffe          BL       gpio_bit_set
00007c  2100              MOVS     r1,#0                 ;3210
00007e  2001              MOVS     r0,#1                 ;3210
000080  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000084  2100              MOVS     r1,#0                 ;3211
000086  2001              MOVS     r0,#1                 ;3211
000088  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00008c  4825              LDR      r0,|L27.292|
00008e  2201              MOVS     r2,#1                 ;3214
000090  2104              MOVS     r1,#4                 ;3214
000092  1d00              ADDS     r0,r0,#4              ;3214
000094  f7fffffe          BL       Vertical_Scrolling_Display
000098  2001              MOVS     r0,#1                 ;3217
00009a  9000              STR      r0,[sp,#0]            ;3217
00009c  9001              STR      r0,[sp,#4]            ;3217
00009e  23b6              MOVS     r3,#0xb6              ;3217
0000a0  4a24              LDR      r2,|L27.308|
0000a2  f44f617a          MOV      r1,#0xfa0             ;3217
0000a6  2008              MOVS     r0,#8                 ;3217
0000a8  f7fffffe          BL       TIMER_AddTask
                  |L27.172|
;;;3259               break;
;;;3260   
;;;3261           default:
;;;3262               break;
;;;3263       }
;;;3264   }
0000ac  bd7c              POP      {r2-r6,pc}
                  |L27.174|
0000ae  20b2              MOVS     r0,#0xb2              ;3227
0000b0  f7fffffe          BL       STATE_SwitchStep
0000b4  2008              MOVS     r0,#8                 ;3228
0000b6  f7fffffe          BL       TIMER_ResetTimer
0000ba  6ba0              LDR      r0,[r4,#0x38]         ;3230  ; dut_info
0000bc  f7fffffe          BL       __aeabi_ui2f
0000c0  6829              LDR      r1,[r5,#0]            ;3230  ; measure
0000c2  f7fffffe          BL       __aeabi_cfcmple
0000c6  d20b              BCS      |L27.224|
0000c8  6b60              LDR      r0,[r4,#0x34]         ;3230  ; dut_info
0000ca  f7fffffe          BL       __aeabi_ui2f
0000ce  6829              LDR      r1,[r5,#0]            ;3230  ; measure
0000d0  f7fffffe          BL       __aeabi_cfrcmple
0000d4  d204              BCS      |L27.224|
0000d6  e8bd407c          POP      {r2-r6,lr}            ;3232
0000da  20b5              MOVS     r0,#0xb5              ;3232
0000dc  f7ffbffe          B.W      STATE_SwitchStep
                  |L27.224|
0000e0  2100              MOVS     r1,#0                 ;3237
0000e2  200b              MOVS     r0,#0xb               ;3237
0000e4  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0000e8  b002              ADD      sp,sp,#8              ;3240
0000ea  480e              LDR      r0,|L27.292|
0000ec  e8bd4070          POP      {r4-r6,lr}            ;3240
0000f0  2202              MOVS     r2,#2                 ;3240
0000f2  2104              MOVS     r1,#4                 ;3240
0000f4  1d00              ADDS     r0,r0,#4              ;3240
0000f6  f7ffbffe          B.W      Vertical_Scrolling_Display
                  |L27.250|
0000fa  2101              MOVS     r1,#1                 ;3245
0000fc  200b              MOVS     r0,#0xb               ;3245
0000fe  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000102  4808              LDR      r0,|L27.292|
000104  2203              MOVS     r2,#3                 ;3248
000106  2104              MOVS     r1,#4                 ;3248
000108  1d00              ADDS     r0,r0,#4              ;3248
00010a  f7fffffe          BL       Vertical_Scrolling_Display
00010e  2008              MOVS     r0,#8                 ;3249
000110  f7fffffe          BL       TIMER_KillTask
000114  f7fffffe          BL       AVO_PIN_Reset
000118  e8bd407c          POP      {r2-r6,lr}            ;3251
00011c  2001              MOVS     r0,#1                 ;3251
00011e  f7ffbffe          B.W      STATE_EnterState
;;;3265   
                          ENDP

000122  0000              DCW      0x0000
                  |L27.292|
                          DCD      ||.data||+0x6
                  |L27.296|
                          DCD      dut_info
                  |L27.300|
                          DCD      measure
                  |L27.304|
                          DCD      0x40011400
                  |L27.308|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_VlkUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_VlkUartTest PROC
;;;1688   // VLK测试
;;;1689   void STEP_Process_VlkUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;1690   {
;;;1691       switch (stateCB.step)
000002  484f              LDR      r0,|L28.320|
;;;1692       {
;;;1693           case STEP_NULL: // 空步骤
;;;1694               break;
;;;1695   
;;;1696           case STEP_VLK_UART_TEST_ENTRY: // 入口步骤
;;;1697               STATE_SwitchStep(STEP_VLK_UART_TEST_VLK);
;;;1698               UART_DRIVE_InitSelect(dut_info.uart_baudRate);
000004  4c4f              LDR      r4,|L28.324|
000006  8840              LDRH     r0,[r0,#2]            ;1691  ; stateCB
000008  2858              CMP      r0,#0x58              ;1691
00000a  d031              BEQ      |L28.112|
00000c  dc15              BGT      |L28.58|
00000e  2800              CMP      r0,#0                 ;1691
000010  d058              BEQ      |L28.196|
000012  2856              CMP      r0,#0x56              ;1691
000014  d156              BNE      |L28.196|
000016  2058              MOVS     r0,#0x58              ;1697
000018  f7fffffe          BL       STATE_SwitchStep
00001c  6a20              LDR      r0,[r4,#0x20]  ; dut_info
00001e  f7fffffe          BL       UART_DRIVE_InitSelect
;;;1699               DUT_PROTOCOL_Init();
000022  f7fffffe          BL       DUT_PROTOCOL_Init
;;;1700   
;;;1701               // LCD显示
;;;1702               Vertical_Scrolling_Display(vlkMsgBuff, 4, 0);
000026  4846              LDR      r0,|L28.320|
000028  2200              MOVS     r2,#0
00002a  2104              MOVS     r1,#4
00002c  1d00              ADDS     r0,r0,#4
00002e  f7fffffe          BL       Vertical_Scrolling_Display
;;;1703   
;;;1704               // 测试引脚复位
;;;1705               AVO_PIN_Reset();
000032  e8bd407c          POP      {r2-r6,lr}
000036  f7ffbffe          B.W      AVO_PIN_Reset
                  |L28.58|
;;;1706               break;
;;;1707   
;;;1708           // 等待万用表回应
;;;1709           case STEP_VLK_UART_TEST_WAIT_RESPONSE:
;;;1710               break;
;;;1711   
;;;1712           // 通知万用表测VLK
;;;1713           case STEP_VLK_UART_TEST_VLK:
;;;1714               STATE_SwitchStep(STEP_VLK_UART_TEST_WAIT_RESPONSE);
;;;1715   
;;;1716               // 使能VLK测试引脚
;;;1717               DUT_VLK_TEST_EN_ON();
;;;1718   
;;;1719               // 通知万用表测VLK
;;;1720               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1721               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1722               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;1723   
;;;1724               // LCD显示
;;;1725               Vertical_Scrolling_Display(vlkMsgBuff, 4, 1);
;;;1726   
;;;1727               // 添加超时
;;;1728               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;1729                             3000,
;;;1730                             STATE_SwitchStep,
;;;1731                             STEP_VLK_UART_TEST_COMMUNICATION_TIME_OUT,
;;;1732                             1,
;;;1733                             ACTION_MODE_ADD_TO_QUEUE);
;;;1734               break;
;;;1735   
;;;1736           // 比对VLK值
;;;1737           case STEP_VLK_UART_TEST_CHECK_VOLTAGE_VALUE:
;;;1738   
;;;1739               STATE_SwitchStep(STEP_VLK_UART_TEST_WAIT_RESPONSE);
;;;1740               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;1741   
;;;1742               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
00003a  4d43              LDR      r5,|L28.328|
00003c  2859              CMP      r0,#0x59              ;1691
00003e  d042              BEQ      |L28.198|
000040  285a              CMP      r0,#0x5a              ;1691
000042  d068              BEQ      |L28.278|
000044  285b              CMP      r0,#0x5b              ;1691
000046  d13d              BNE      |L28.196|
;;;1743               {
;;;1744                   STATE_SwitchStep(STEP_VLK_UART_TEST_COMPLETE);
;;;1745               }
;;;1746               // VCC不正常，则上报
;;;1747               else
;;;1748               {
;;;1749                   // LCD显示
;;;1750                   Vertical_Scrolling_Display(vlkMsgBuff, 4, 2);
;;;1751                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;1752                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1753               }
;;;1754               break;
;;;1755   
;;;1756           // 测试完成，然后上报结果
;;;1757           case STEP_VLK_UART_TEST_COMPLETE:
;;;1758               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;1759               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1760               AVO_PIN_Reset();
;;;1761               STATE_EnterState(STATE_STANDBY);
;;;1762   
;;;1763               // LCD显示
;;;1764               Vertical_Scrolling_Display(vlkMsgBuff, 4, 3);
;;;1765               break;
;;;1766   
;;;1767           case STEP_VLK_UART_TEST_COMMUNICATION_TIME_OUT: // 通信超时
;;;1768               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
000048  2100              MOVS     r1,#0
00004a  200b              MOVS     r0,#0xb
00004c  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;1769               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
000050  2008              MOVS     r0,#8
000052  f7fffffe          BL       TIMER_KillTask
;;;1770               AVO_PIN_Reset();
000056  f7fffffe          BL       AVO_PIN_Reset
;;;1771   
;;;1772               // LCD显示
;;;1773               Vertical_Scrolling_Display(excepMsgBuff, 4, 2);
00005a  4839              LDR      r0,|L28.320|
00005c  2202              MOVS     r2,#2
00005e  2104              MOVS     r1,#4
000060  3054              ADDS     r0,r0,#0x54
000062  f7fffffe          BL       Vertical_Scrolling_Display
;;;1774               STATE_EnterState(STATE_STANDBY);
000066  e8bd407c          POP      {r2-r6,lr}
00006a  2001              MOVS     r0,#1
00006c  f7ffbffe          B.W      STATE_EnterState
                  |L28.112|
000070  2057              MOVS     r0,#0x57              ;1714
000072  f7fffffe          BL       STATE_SwitchStep
000076  4c35              LDR      r4,|L28.332|
000078  2320              MOVS     r3,#0x20              ;1717
00007a  2203              MOVS     r2,#3                 ;1717
00007c  2110              MOVS     r1,#0x10              ;1717
00007e  4620              MOV      r0,r4                 ;1717
000080  f7fffffe          BL       gpio_init
000084  2120              MOVS     r1,#0x20              ;1717
000086  4620              MOV      r0,r4                 ;1717
000088  f7fffffe          BL       gpio_bit_set
00008c  2100              MOVS     r1,#0                 ;1720
00008e  2001              MOVS     r0,#1                 ;1720
000090  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000094  2100              MOVS     r1,#0                 ;1721
000096  2001              MOVS     r0,#1                 ;1721
000098  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00009c  2100              MOVS     r1,#0                 ;1722
00009e  2001              MOVS     r0,#1                 ;1722
0000a0  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000a4  4826              LDR      r0,|L28.320|
0000a6  2201              MOVS     r2,#1                 ;1725
0000a8  2104              MOVS     r1,#4                 ;1725
0000aa  1d00              ADDS     r0,r0,#4              ;1725
0000ac  f7fffffe          BL       Vertical_Scrolling_Display
0000b0  2001              MOVS     r0,#1                 ;1728
0000b2  9000              STR      r0,[sp,#0]            ;1728
0000b4  9001              STR      r0,[sp,#4]            ;1728
0000b6  235b              MOVS     r3,#0x5b              ;1728
0000b8  4a25              LDR      r2,|L28.336|
0000ba  f64031b8          MOV      r1,#0xbb8             ;1728
0000be  2008              MOVS     r0,#8                 ;1728
0000c0  f7fffffe          BL       TIMER_AddTask
                  |L28.196|
;;;1775               break;
;;;1776   
;;;1777           default:
;;;1778               break;
;;;1779       }
;;;1780   }
0000c4  bd7c              POP      {r2-r6,pc}
                  |L28.198|
0000c6  2057              MOVS     r0,#0x57              ;1739
0000c8  f7fffffe          BL       STATE_SwitchStep
0000cc  2008              MOVS     r0,#8                 ;1740
0000ce  f7fffffe          BL       TIMER_ResetTimer
0000d2  6ba0              LDR      r0,[r4,#0x38]         ;1742  ; dut_info
0000d4  f7fffffe          BL       __aeabi_ui2f
0000d8  6829              LDR      r1,[r5,#0]            ;1742  ; measure
0000da  f7fffffe          BL       __aeabi_cfcmple
0000de  d20b              BCS      |L28.248|
0000e0  6b60              LDR      r0,[r4,#0x34]         ;1742  ; dut_info
0000e2  f7fffffe          BL       __aeabi_ui2f
0000e6  6829              LDR      r1,[r5,#0]            ;1742  ; measure
0000e8  f7fffffe          BL       __aeabi_cfrcmple
0000ec  d204              BCS      |L28.248|
0000ee  e8bd407c          POP      {r2-r6,lr}            ;1744
0000f2  205a              MOVS     r0,#0x5a              ;1744
0000f4  f7ffbffe          B.W      STATE_SwitchStep
                  |L28.248|
0000f8  4811              LDR      r0,|L28.320|
0000fa  2202              MOVS     r2,#2                 ;1750
0000fc  2104              MOVS     r1,#4                 ;1750
0000fe  1d00              ADDS     r0,r0,#4              ;1750
000100  f7fffffe          BL       Vertical_Scrolling_Display
000104  2100              MOVS     r1,#0                 ;1751
000106  200b              MOVS     r0,#0xb               ;1751
000108  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00010c  e8bd407c          POP      {r2-r6,lr}            ;1752
000110  2008              MOVS     r0,#8                 ;1752
000112  f7ffbffe          B.W      TIMER_KillTask
                  |L28.278|
000116  2101              MOVS     r1,#1                 ;1758
000118  200b              MOVS     r0,#0xb               ;1758
00011a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00011e  2008              MOVS     r0,#8                 ;1759
000120  f7fffffe          BL       TIMER_KillTask
000124  f7fffffe          BL       AVO_PIN_Reset
000128  2001              MOVS     r0,#1                 ;1761
00012a  f7fffffe          BL       STATE_EnterState
00012e  b002              ADD      sp,sp,#8              ;1764
000130  4803              LDR      r0,|L28.320|
000132  e8bd4070          POP      {r4-r6,lr}            ;1764
000136  2203              MOVS     r2,#3                 ;1764
000138  2104              MOVS     r1,#4                 ;1764
00013a  1d00              ADDS     r0,r0,#4              ;1764
00013c  f7ffbffe          B.W      Vertical_Scrolling_Display
;;;1781   
                          ENDP

                  |L28.320|
                          DCD      ||.data||+0x6
                  |L28.324|
                          DCD      dut_info
                  |L28.328|
                          DCD      measure
                  |L28.332|
                          DCD      0x40011400
                  |L28.336|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_XM_BrakeUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_XM_BrakeUartTest PROC
;;;4414   // 刹把测试
;;;4415   void STEP_Process_XM_BrakeUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;4416   {
;;;4417       switch (stateCB.step)
000002  48ca              LDR      r0,|L29.812|
;;;4418       {
;;;4419           case STEP_NULL: // 空步骤
;;;4420               break;
;;;4421   
;;;4422           case STEP_BRAKE_UART_TEST_ENTRY: // 入口步骤
;;;4423               STATE_SwitchStep(STEP_BRAKE_UART_TEST_VCC);
;;;4424               UART_DRIVE_InitSelect(dut_info.uart_baudRate);
000004  4cca              LDR      r4,|L29.816|
000006  8840              LDRH     r0,[r0,#2]            ;4417  ; stateCB
000008  2848              CMP      r0,#0x48              ;4417
00000a  d07d              BEQ      |L29.264|
00000c  dc51              BGT      |L29.178|
00000e  2845              CMP      r0,#0x45              ;4417
000010  d07b              BEQ      |L29.266|
000012  dc1b              BGT      |L29.76|
000014  2800              CMP      r0,#0                 ;4417
000016  d078              BEQ      |L29.266|
000018  2844              CMP      r0,#0x44              ;4417
00001a  d176              BNE      |L29.266|
00001c  2046              MOVS     r0,#0x46              ;4423
00001e  f7fffffe          BL       STATE_SwitchStep
000022  6a20              LDR      r0,[r4,#0x20]  ; dut_info
000024  f7fffffe          BL       UART_DRIVE_InitSelect
;;;4425               DUT_PROTOCOL_Init();
000028  f7fffffe          BL       DUT_PROTOCOL_Init
;;;4426               UART_PROTOCOL_XM_Init();
00002c  f7fffffe          BL       UART_PROTOCOL_XM_Init
;;;4427               Clear_All_Lines();
000030  f7fffffe          BL       Clear_All_Lines
;;;4428               Display_Centered(0, "BRAKE");
000034  a1bf              ADR      r1,|L29.820|
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       Display_Centered
;;;4429               Display_Centered(1, "Testing");
00003c  a1bf              ADR      r1,|L29.828|
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       Display_Centered
;;;4430   
;;;4431               // 测试引脚复位
;;;4432               AVO_PIN_Reset();
000044  e8bd407c          POP      {r2-r6,lr}
000048  f7ffbffe          B.W      AVO_PIN_Reset
                  |L29.76|
00004c  2846              CMP      r0,#0x46              ;4417
00004e  d053              BEQ      |L29.248|
;;;4433               break;
;;;4434   
;;;4435           case STEP_BRAKE_UART_TEST_WAIT_RESPONSE: // 等待仪表或万用表回应
;;;4436               break;
;;;4437   
;;;4438           case STEP_BRAKE_UART_TEST_VCC: // 通知万用表测VCC
;;;4439               STATE_SwitchStep(STEP_BRAKE_UART_TEST_WAIT_RESPONSE);
;;;4440   
;;;4441               // 打开VCC测试引脚
;;;4442               BRAKE_VCC_TEST_EN_ON();
;;;4443   
;;;4444               // 通知万用表测电压
;;;4445               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4446               Clear_All_Lines();
;;;4447               Display_Centered(0, "BRAKE");
;;;4448               Display_Centered(1, "AVO METER");
;;;4449               Display_Centered(2, "Measurement");
;;;4450   
;;;4451               // 添加超时
;;;4452               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;4453                             4000,
;;;4454                             STATE_SwitchStep,
;;;4455                             STEP_BRAKE_UART_TEST_COMMUNICATION_TIME_OUT,
;;;4456                             1,
;;;4457                             ACTION_MODE_ADD_TO_QUEUE);
;;;4458               break;
;;;4459   
;;;4460           // 比对VCC
;;;4461           case STEP_BRAKE_UART_TEST_CHECK_VOLTAGE_VALUE:
;;;4462               STATE_SwitchStep(STEP_BRAKE_UART_TEST_WAIT_RESPONSE);
;;;4463               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4464   
;;;4465               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
000050  4dbc              LDR      r5,|L29.836|
000052  2847              CMP      r0,#0x47              ;4417
000054  d17d              BNE      |L29.338|
000056  2045              MOVS     r0,#0x45              ;4462
000058  f7fffffe          BL       STATE_SwitchStep
00005c  2008              MOVS     r0,#8                 ;4463
00005e  f7fffffe          BL       TIMER_ResetTimer
000062  6ba0              LDR      r0,[r4,#0x38]  ; dut_info
000064  f7fffffe          BL       __aeabi_ui2f
000068  6829              LDR      r1,[r5,#0]  ; measure
00006a  f7fffffe          BL       __aeabi_cfcmple
00006e  d272              BCS      |L29.342|
000070  6b60              LDR      r0,[r4,#0x34]  ; dut_info
000072  f7fffffe          BL       __aeabi_ui2f
000076  6829              LDR      r1,[r5,#0]  ; measure
000078  f7fffffe          BL       __aeabi_cfrcmple
00007c  d26b              BCS      |L29.342|
;;;4466               {
;;;4467                   // 调整DAC输出,单位mv
;;;4468                   DAC1_output(1200);
00007e  f44f6096          MOV      r0,#0x4b0
000082  f7fffffe          BL       DAC1_output
;;;4469                   Delayms(50);
000086  2032              MOVS     r0,#0x32
000088  f7fffffe          BL       Delayms
;;;4470                   Clear_All_Lines();
00008c  f7fffffe          BL       Clear_All_Lines
;;;4471                   Display_Centered(0, "BRAKE");
000090  a1a8              ADR      r1,|L29.820|
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       Display_Centered
;;;4472                   Display_Centered(1, "VCC");
000098  a1ab              ADR      r1,|L29.840|
00009a  2001              MOVS     r0,#1
00009c  f7fffffe          BL       Display_Centered
;;;4473                   Display_Centered(2, "Normal");
0000a0  a1aa              ADR      r1,|L29.844|
0000a2  2002              MOVS     r0,#2
0000a4  f7fffffe          BL       Display_Centered
;;;4474   
;;;4475                   // 获取油门AD值
;;;4476                   UART_PROTOCOL_XM_SendCmdAck(UART_PROTOCOL_XM_CMD_TEST_Throttle_Break);
0000a8  e8bd407c          POP      {r2-r6,lr}
0000ac  2087              MOVS     r0,#0x87
0000ae  f7ffbffe          B.W      UART_PROTOCOL_XM_SendCmdAck
                  |L29.178|
0000b2  2849              CMP      r0,#0x49              ;4417
0000b4  d07e              BEQ      |L29.436|
0000b6  284a              CMP      r0,#0x4a              ;4417
0000b8  d07d              BEQ      |L29.438|
0000ba  284b              CMP      r0,#0x4b              ;4417
0000bc  d07c              BEQ      |L29.440|
0000be  284c              CMP      r0,#0x4c              ;4417
0000c0  d147              BNE      |L29.338|
;;;4477               }
;;;4478               // VCC不正常，则上报
;;;4479               else
;;;4480               {
;;;4481                   Clear_All_Lines();
;;;4482                   Display_Centered(0, "BRAKE");
;;;4483                   Display_Centered(1, "VCC");
;;;4484                   Display_Centered(2, "Abnormal");
;;;4485                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4486                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4487                   STATE_EnterState(STATE_STANDBY);
;;;4488               }
;;;4489               break;
;;;4490   
;;;4491           // 在这进行判断数值是否正常，第一次
;;;4492           case STEP_BRAKE_UART_TEST_CHECK_DAC1_VALUE:
;;;4493               STATE_SwitchStep(STEP_BRAKE_UART_TEST_WAIT_RESPONSE);
;;;4494               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4495   
;;;4496               // 处理DAC1数值检查逻辑
;;;4497               if (0 == dut_info.brakeAd)
;;;4498               {
;;;4499                   // 调整DAC输出,单位mv
;;;4500                   DAC1_output(2100);
;;;4501                   Delayms(50);
;;;4502                   Clear_All_Lines();
;;;4503                   Display_Centered(0, "BRAKE");
;;;4504                   Display_Centered(1, "Adjusting DAC");
;;;4505                   Display_Centered(2, "First");
;;;4506   
;;;4507                   // 获取油门AD值
;;;4508                   UART_PROTOCOL_XM_SendCmdAck(UART_PROTOCOL_XM_CMD_TEST_Throttle_Break);
;;;4509               }
;;;4510               else
;;;4511               {
;;;4512                   Clear_All_Lines();
;;;4513                   Display_Centered(0, "BRAKE");
;;;4514                   Display_Centered(1, "SIG1");
;;;4515                   Display_Centered(2, "Abnormal");
;;;4516                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4517                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4518                   STATE_EnterState(STATE_STANDBY);
;;;4519               }
;;;4520               break;
;;;4521   
;;;4522           // 在这进行判断数值是否正常，第二次
;;;4523           case STEP_BRAKE_UART_TEST_CHECK_DAC3_VALUE:
;;;4524               STATE_SwitchStep(STEP_BRAKE_UART_TEST_WAIT_RESPONSE);
;;;4525               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4526   
;;;4527               // 处理DAC5数值检查逻辑
;;;4528               if ((2 == dut_info.brakeAd)||(3 == dut_info.brakeAd))
;;;4529               {
;;;4530                   // 调整DAC输出,单位mv
;;;4531                   DAC1_output(4200);
;;;4532                   Delayms(50);
;;;4533                   Clear_All_Lines();
;;;4534                   Display_Centered(0, "BRAKE");
;;;4535                   Display_Centered(1, "Adjusting DAC");
;;;4536                   Display_Centered(2, "Second");
;;;4537   
;;;4538                   // 获取油门AD值
;;;4539                   UART_PROTOCOL_XM_SendCmdAck(UART_PROTOCOL_XM_CMD_TEST_Throttle_Break);
;;;4540               }
;;;4541               else
;;;4542               {
;;;4543                   Clear_All_Lines();
;;;4544                   Display_Centered(0, "BRAKE");
;;;4545                   Display_Centered(1, "SIG2");
;;;4546                   Display_Centered(2, "Abnormal");
;;;4547                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4548                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4549                   STATE_EnterState(STATE_STANDBY);
;;;4550               }
;;;4551               break;
;;;4552   
;;;4553           // 在这进行判断数值是否正常，第三次
;;;4554           case STEP_BRAKE_UART_TEST_CHECK_DAC5_VALUE:
;;;4555               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4556   
;;;4557               // 处理DAC5数值检查逻辑
;;;4558               if (6 == dut_info.brakeAd)
;;;4559               {
;;;4560                   // 3次都正常则测试通过
;;;4561                   Clear_All_Lines();
;;;4562                   Display_Centered(0, "BRAKE");
;;;4563                   Display_Centered(1, "Adjusting DAC");
;;;4564                   Display_Centered(2, "Third");
;;;4565                   STATE_SwitchStep(STEP_BRAKE_UART_TEST_COMPLETE);
;;;4566               }
;;;4567               else
;;;4568               {
;;;4569                   Clear_All_Lines();
;;;4570                   Display_Centered(0, "BRAKE");
;;;4571                   Display_Centered(1, "SIG3");
;;;4572                   Display_Centered(2, "Abnormal");
;;;4573                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4574                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4575                   STATE_EnterState(STATE_STANDBY);
;;;4576               }
;;;4577               break;
;;;4578   
;;;4579           // 油门测试完成步骤，关闭DAC输出调整为0，然后上报结果
;;;4580           case STEP_BRAKE_UART_TEST_COMPLETE:
;;;4581               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4582               AVO_PIN_Reset();
;;;4583               Clear_All_Lines();
;;;4584               Display_Centered(0, "BRAKE");
;;;4585               Display_Centered(1, "Test Pass");
;;;4586               STATE_EnterState(STATE_STANDBY);
;;;4587               DAC1_output(0);
;;;4588               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;4589               break;
;;;4590   
;;;4591           // 通信超时，给出油门测试函数，并且case上面的步骤
;;;4592           case STEP_BRAKE_UART_TEST_COMMUNICATION_TIME_OUT:
;;;4593               DAC1_output(0);
0000c2  2000              MOVS     r0,#0
0000c4  f7fffffe          BL       DAC1_output
;;;4594               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
0000c8  2100              MOVS     r1,#0
0000ca  200b              MOVS     r0,#0xb
0000cc  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;4595               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0000d0  2008              MOVS     r0,#8
0000d2  f7fffffe          BL       TIMER_KillTask
;;;4596               AVO_PIN_Reset();
0000d6  f7fffffe          BL       AVO_PIN_Reset
;;;4597               Clear_All_Lines();
0000da  f7fffffe          BL       Clear_All_Lines
;;;4598               Display_Centered(0, "BRAKE");
0000de  a195              ADR      r1,|L29.820|
0000e0  2000              MOVS     r0,#0
0000e2  f7fffffe          BL       Display_Centered
;;;4599               Display_Centered(1, "Test Timeout");
0000e6  a19b              ADR      r1,|L29.852|
0000e8  2001              MOVS     r0,#1
0000ea  f7fffffe          BL       Display_Centered
;;;4600               STATE_EnterState(STATE_STANDBY);
0000ee  e8bd407c          POP      {r2-r6,lr}
0000f2  2001              MOVS     r0,#1
0000f4  f7ffbffe          B.W      STATE_EnterState
                  |L29.248|
0000f8  2045              MOVS     r0,#0x45              ;4439
0000fa  f7fffffe          BL       STATE_SwitchStep
0000fe  2340              MOVS     r3,#0x40              ;4442
000100  2203              MOVS     r2,#3                 ;4442
000102  2110              MOVS     r1,#0x10              ;4442
000104  4c97              LDR      r4,|L29.868|
000106  e001              B        |L29.268|
                  |L29.264|
000108  e03f              B        |L29.394|
                  |L29.266|
00010a  e022              B        |L29.338|
                  |L29.268|
00010c  4620              MOV      r0,r4                 ;4442
00010e  f7fffffe          BL       gpio_init
000112  2140              MOVS     r1,#0x40              ;4442
000114  4620              MOV      r0,r4                 ;4442
000116  f7fffffe          BL       gpio_bit_set
00011a  2100              MOVS     r1,#0                 ;4445
00011c  2001              MOVS     r0,#1                 ;4445
00011e  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000122  f7fffffe          BL       Clear_All_Lines
000126  a183              ADR      r1,|L29.820|
000128  2000              MOVS     r0,#0                 ;4447
00012a  f7fffffe          BL       Display_Centered
00012e  a18e              ADR      r1,|L29.872|
000130  2001              MOVS     r0,#1                 ;4448
000132  f7fffffe          BL       Display_Centered
000136  a18f              ADR      r1,|L29.884|
000138  2002              MOVS     r0,#2                 ;4449
00013a  f7fffffe          BL       Display_Centered
00013e  2001              MOVS     r0,#1                 ;4452
000140  9000              STR      r0,[sp,#0]            ;4452
000142  9001              STR      r0,[sp,#4]            ;4452
000144  234c              MOVS     r3,#0x4c              ;4452
000146  4a8e              LDR      r2,|L29.896|
000148  f44f617a          MOV      r1,#0xfa0             ;4452
00014c  2008              MOVS     r0,#8                 ;4452
00014e  f7fffffe          BL       TIMER_AddTask
                  |L29.338|
;;;4601               break;
;;;4602   
;;;4603           default:
;;;4604               break;
;;;4605       }
;;;4606   }
000152  bd7c              POP      {r2-r6,pc}
000154  e7ff              B        |L29.342|
                  |L29.342|
000156  f7fffffe          BL       Clear_All_Lines
00015a  a176              ADR      r1,|L29.820|
00015c  2000              MOVS     r0,#0                 ;4482
00015e  f7fffffe          BL       Display_Centered
000162  a179              ADR      r1,|L29.840|
000164  2001              MOVS     r0,#1                 ;4483
000166  f7fffffe          BL       Display_Centered
00016a  a186              ADR      r1,|L29.900|
00016c  2002              MOVS     r0,#2                 ;4484
00016e  f7fffffe          BL       Display_Centered
000172  2100              MOVS     r1,#0                 ;4485
000174  200b              MOVS     r0,#0xb               ;4485
000176  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00017a  2008              MOVS     r0,#8                 ;4486
00017c  f7fffffe          BL       TIMER_KillTask
000180  e8bd407c          POP      {r2-r6,lr}            ;4487
000184  2001              MOVS     r0,#1                 ;4487
000186  f7ffbffe          B.W      STATE_EnterState
                  |L29.394|
00018a  2045              MOVS     r0,#0x45              ;4493
00018c  f7fffffe          BL       STATE_SwitchStep
000190  2008              MOVS     r0,#8                 ;4494
000192  f7fffffe          BL       TIMER_ResetTimer
000196  f8b40042          LDRH     r0,[r4,#0x42]         ;4497  ; dut_info
00019a  b1e8              CBZ      r0,|L29.472|
00019c  f7fffffe          BL       Clear_All_Lines
0001a0  a164              ADR      r1,|L29.820|
0001a2  2000              MOVS     r0,#0                 ;4513
0001a4  f7fffffe          BL       Display_Centered
0001a8  a179              ADR      r1,|L29.912|
0001aa  2001              MOVS     r0,#1                 ;4514
0001ac  f7fffffe          BL       Display_Centered
0001b0  a174              ADR      r1,|L29.900|
0001b2  e002              B        |L29.442|
                  |L29.436|
0001b4  e02a              B        |L29.524|
                  |L29.438|
0001b6  e069              B        |L29.652|
                  |L29.440|
0001b8  e09c              B        |L29.756|
                  |L29.442|
0001ba  2002              MOVS     r0,#2                 ;4515
0001bc  f7fffffe          BL       Display_Centered
0001c0  2100              MOVS     r1,#0                 ;4516
0001c2  200b              MOVS     r0,#0xb               ;4516
0001c4  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001c8  2008              MOVS     r0,#8                 ;4517
0001ca  f7fffffe          BL       TIMER_KillTask
0001ce  e8bd407c          POP      {r2-r6,lr}            ;4518
0001d2  2001              MOVS     r0,#1                 ;4518
0001d4  f7ffbffe          B.W      STATE_EnterState
                  |L29.472|
0001d8  f6400034          MOV      r0,#0x834             ;4500
0001dc  f7fffffe          BL       DAC1_output
0001e0  2032              MOVS     r0,#0x32              ;4501
0001e2  f7fffffe          BL       Delayms
0001e6  f7fffffe          BL       Clear_All_Lines
0001ea  a152              ADR      r1,|L29.820|
0001ec  2000              MOVS     r0,#0                 ;4503
0001ee  f7fffffe          BL       Display_Centered
0001f2  a169              ADR      r1,|L29.920|
0001f4  2001              MOVS     r0,#1                 ;4504
0001f6  f7fffffe          BL       Display_Centered
0001fa  a16b              ADR      r1,|L29.936|
0001fc  2002              MOVS     r0,#2                 ;4505
0001fe  f7fffffe          BL       Display_Centered
000202  e8bd407c          POP      {r2-r6,lr}            ;4508
000206  2087              MOVS     r0,#0x87              ;4508
000208  f7ffbffe          B.W      UART_PROTOCOL_XM_SendCmdAck
                  |L29.524|
00020c  2045              MOVS     r0,#0x45              ;4524
00020e  f7fffffe          BL       STATE_SwitchStep
000212  2008              MOVS     r0,#8                 ;4525
000214  f7fffffe          BL       TIMER_ResetTimer
000218  f8b40042          LDRH     r0,[r4,#0x42]         ;4528  ; dut_info
00021c  2802              CMP      r0,#2                 ;4528
00021e  d01b              BEQ      |L29.600|
000220  2803              CMP      r0,#3                 ;4528
000222  d019              BEQ      |L29.600|
000224  f7fffffe          BL       Clear_All_Lines
000228  a142              ADR      r1,|L29.820|
00022a  2000              MOVS     r0,#0                 ;4544
00022c  f7fffffe          BL       Display_Centered
000230  a15f              ADR      r1,|L29.944|
000232  2001              MOVS     r0,#1                 ;4545
000234  f7fffffe          BL       Display_Centered
000238  a152              ADR      r1,|L29.900|
00023a  2002              MOVS     r0,#2                 ;4546
00023c  f7fffffe          BL       Display_Centered
000240  2100              MOVS     r1,#0                 ;4547
000242  200b              MOVS     r0,#0xb               ;4547
000244  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000248  2008              MOVS     r0,#8                 ;4548
00024a  f7fffffe          BL       TIMER_KillTask
00024e  e8bd407c          POP      {r2-r6,lr}            ;4549
000252  2001              MOVS     r0,#1                 ;4549
000254  f7ffbffe          B.W      STATE_EnterState
                  |L29.600|
000258  f2410068          MOV      r0,#0x1068            ;4531
00025c  f7fffffe          BL       DAC1_output
000260  2032              MOVS     r0,#0x32              ;4532
000262  f7fffffe          BL       Delayms
000266  f7fffffe          BL       Clear_All_Lines
00026a  a132              ADR      r1,|L29.820|
00026c  2000              MOVS     r0,#0                 ;4534
00026e  f7fffffe          BL       Display_Centered
000272  a149              ADR      r1,|L29.920|
000274  2001              MOVS     r0,#1                 ;4535
000276  f7fffffe          BL       Display_Centered
00027a  a14f              ADR      r1,|L29.952|
00027c  2002              MOVS     r0,#2                 ;4536
00027e  f7fffffe          BL       Display_Centered
000282  e8bd407c          POP      {r2-r6,lr}            ;4539
000286  2087              MOVS     r0,#0x87              ;4539
000288  f7ffbffe          B.W      UART_PROTOCOL_XM_SendCmdAck
                  |L29.652|
00028c  2008              MOVS     r0,#8                 ;4555
00028e  f7fffffe          BL       TIMER_ResetTimer
000292  f8b40042          LDRH     r0,[r4,#0x42]         ;4558  ; dut_info
000296  2806              CMP      r0,#6                 ;4558
000298  d019              BEQ      |L29.718|
00029a  f7fffffe          BL       Clear_All_Lines
00029e  a125              ADR      r1,|L29.820|
0002a0  2000              MOVS     r0,#0                 ;4570
0002a2  f7fffffe          BL       Display_Centered
0002a6  a146              ADR      r1,|L29.960|
0002a8  2001              MOVS     r0,#1                 ;4571
0002aa  f7fffffe          BL       Display_Centered
0002ae  a135              ADR      r1,|L29.900|
0002b0  2002              MOVS     r0,#2                 ;4572
0002b2  f7fffffe          BL       Display_Centered
0002b6  2100              MOVS     r1,#0                 ;4573
0002b8  200b              MOVS     r0,#0xb               ;4573
0002ba  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0002be  2008              MOVS     r0,#8                 ;4574
0002c0  f7fffffe          BL       TIMER_KillTask
0002c4  e8bd407c          POP      {r2-r6,lr}            ;4575
0002c8  2001              MOVS     r0,#1                 ;4575
0002ca  f7ffbffe          B.W      STATE_EnterState
                  |L29.718|
0002ce  f7fffffe          BL       Clear_All_Lines
0002d2  a118              ADR      r1,|L29.820|
0002d4  2000              MOVS     r0,#0                 ;4562
0002d6  f7fffffe          BL       Display_Centered
0002da  a12f              ADR      r1,|L29.920|
0002dc  2001              MOVS     r0,#1                 ;4563
0002de  f7fffffe          BL       Display_Centered
0002e2  a139              ADR      r1,|L29.968|
0002e4  2002              MOVS     r0,#2                 ;4564
0002e6  f7fffffe          BL       Display_Centered
0002ea  e8bd407c          POP      {r2-r6,lr}            ;4565
0002ee  204b              MOVS     r0,#0x4b              ;4565
0002f0  f7ffbffe          B.W      STATE_SwitchStep
                  |L29.756|
0002f4  2008              MOVS     r0,#8                 ;4581
0002f6  f7fffffe          BL       TIMER_KillTask
0002fa  f7fffffe          BL       AVO_PIN_Reset
0002fe  f7fffffe          BL       Clear_All_Lines
000302  a10c              ADR      r1,|L29.820|
000304  2000              MOVS     r0,#0                 ;4584
000306  f7fffffe          BL       Display_Centered
00030a  a131              ADR      r1,|L29.976|
00030c  2001              MOVS     r0,#1                 ;4585
00030e  f7fffffe          BL       Display_Centered
000312  2001              MOVS     r0,#1                 ;4586
000314  f7fffffe          BL       STATE_EnterState
000318  2000              MOVS     r0,#0                 ;4587
00031a  f7fffffe          BL       DAC1_output
00031e  e8bd407c          POP      {r2-r6,lr}            ;4588
000322  2101              MOVS     r1,#1                 ;4588
000324  200b              MOVS     r0,#0xb               ;4588
000326  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
;;;4607   
                          ENDP

00032a  0000              DCW      0x0000
                  |L29.812|
                          DCD      ||.data||+0x6
                  |L29.816|
                          DCD      dut_info
                  |L29.820|
000334  4252414b          DCB      "BRAKE",0
000338  4500    
00033a  00                DCB      0
00033b  00                DCB      0
                  |L29.828|
00033c  54657374          DCB      "Testing",0
000340  696e6700
                  |L29.836|
                          DCD      measure
                  |L29.840|
000348  56434300          DCB      "VCC",0
                  |L29.844|
00034c  4e6f726d          DCB      "Normal",0
000350  616c00  
000353  00                DCB      0
                  |L29.852|
000354  54657374          DCB      "Test Timeout",0
000358  2054696d
00035c  656f7574
000360  00      
000361  00                DCB      0
000362  00                DCB      0
000363  00                DCB      0
                  |L29.868|
                          DCD      0x40011000
                  |L29.872|
000368  41564f20          DCB      "AVO METER",0
00036c  4d455445
000370  5200    
000372  00                DCB      0
000373  00                DCB      0
                  |L29.884|
000374  4d656173          DCB      "Measurement",0
000378  7572656d
00037c  656e7400
                  |L29.896|
                          DCD      STATE_SwitchStep
                  |L29.900|
000384  41626e6f          DCB      "Abnormal",0
000388  726d616c
00038c  00      
00038d  00                DCB      0
00038e  00                DCB      0
00038f  00                DCB      0
                  |L29.912|
000390  53494731          DCB      "SIG1",0
000394  00      
000395  00                DCB      0
000396  00                DCB      0
000397  00                DCB      0
                  |L29.920|
000398  41646a75          DCB      "Adjusting DAC",0
00039c  7374696e
0003a0  67204441
0003a4  4300    
0003a6  00                DCB      0
0003a7  00                DCB      0
                  |L29.936|
0003a8  46697273          DCB      "First",0
0003ac  7400    
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L29.944|
0003b0  53494732          DCB      "SIG2",0
0003b4  00      
0003b5  00                DCB      0
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L29.952|
0003b8  5365636f          DCB      "Second",0
0003bc  6e6400  
0003bf  00                DCB      0
                  |L29.960|
0003c0  53494733          DCB      "SIG3",0
0003c4  00      
0003c5  00                DCB      0
0003c6  00                DCB      0
0003c7  00                DCB      0
                  |L29.968|
0003c8  54686972          DCB      "Third",0
0003cc  6400    
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L29.976|
0003d0  54657374          DCB      "Test Pass",0
0003d4  20506173
0003d8  7300    
0003da  00                DCB      0
0003db  00                DCB      0

                          AREA ||i.STEP_Process_XM_HeadLightUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_XM_HeadLightUartTest PROC
;;;4072   // 大灯测试
;;;4073   void STEP_Process_XM_HeadLightUartTest(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;4074   {
;;;4075       switch (stateCB.step)
000004  48ac              LDR      r0,|L30.696|
;;;4076       {
;;;4077           case STEP_NULL: // 空步骤
;;;4078               break;
;;;4079   
;;;4080           case STEP_HEADLIGHT_UART_TEST_ENTRY: // 入口步骤
;;;4081               STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_NOTIFY_DUT);
;;;4082               UART_DRIVE_InitSelect(dut_info.uart_baudRate);
;;;4083               DUT_PROTOCOL_Init();
;;;4084               UART_PROTOCOL_XM_Init();
;;;4085               light_cnt = 0;
;;;4086               headlight_cnt = 0;
;;;4087               Clear_All_Lines();
;;;4088               Display_Centered(0, "XM HEADLIGHT");
;;;4089               Display_Centered(1, "Testing");
;;;4090   
;;;4091               // 测试引脚复位
;;;4092               AVO_PIN_Reset();
;;;4093               break;
;;;4094   
;;;4095           case STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;4096               break;
;;;4097   
;;;4098           case STEP_HEADLIGHT_UART_TEST_NOTIFY_DUT: // 通知DUT打开大灯步骤
;;;4099               STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE);
;;;4100               UART_PROTOCOL_XM_SendCmdParamAck(UART_PROTOCOL_XM_CMD_TEST_LIGHT, 1);
;;;4101   
;;;4102               // 添加超时
;;;4103               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;4104                             4000,
;;;4105                             STATE_SwitchStep,
;;;4106                             STEP_HEADLIGHT_UART_TEST_COMMUNICATION_TIME_OUT,
;;;4107                             1,
;;;4108                             ACTION_MODE_ADD_TO_QUEUE);
;;;4109               break;
;;;4110   
;;;4111           case STEP_HEADLIGHT_UART_TEST_OPEN:      // 仪表打开大灯成功
;;;4112               STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE);
;;;4113               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4114   
;;;4115               // 打开VCC测试引脚
;;;4116               LED_VCC_TEST_EN_ON();
000006  4fad              LDR      r7,|L30.700|
000008  4cad              LDR      r4,|L30.704|
00000a  8840              LDRH     r0,[r0,#2]            ;4075  ; stateCB
00000c  f44f6600          MOV      r6,#0x800
000010  2813              CMP      r0,#0x13              ;4075
000012  d059              BEQ      |L30.200|
000014  dc1a              BGT      |L30.76|
000016  2800              CMP      r0,#0                 ;4075
000018  d016              BEQ      |L30.72|
00001a  2810              CMP      r0,#0x10              ;4075
00001c  d037              BEQ      |L30.142|
00001e  2811              CMP      r0,#0x11              ;4075
000020  d012              BEQ      |L30.72|
000022  2812              CMP      r0,#0x12              ;4075
000024  d110              BNE      |L30.72|
000026  2011              MOVS     r0,#0x11              ;4099
000028  f7fffffe          BL       STATE_SwitchStep
00002c  2101              MOVS     r1,#1                 ;4100
00002e  2086              MOVS     r0,#0x86              ;4100
000030  f7fffffe          BL       UART_PROTOCOL_XM_SendCmdParamAck
000034  2001              MOVS     r0,#1                 ;4103
000036  9000              STR      r0,[sp,#0]            ;4103
000038  9001              STR      r0,[sp,#4]            ;4103
00003a  2317              MOVS     r3,#0x17              ;4103
00003c  4aa1              LDR      r2,|L30.708|
00003e  f44f617a          MOV      r1,#0xfa0             ;4103
000042  2008              MOVS     r0,#8                 ;4103
000044  f7fffffe          BL       TIMER_AddTask
                  |L30.72|
;;;4117   
;;;4118               // 通知万用表测VCC
;;;4119               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4120               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4121               Clear_All_Lines();
;;;4122               Display_Centered(0, "XM HEADLIGHT");
;;;4123               Display_Centered(1, "AVO METER");
;;;4124               Display_Centered(2, "Measurement");
;;;4125               break;
;;;4126   
;;;4127           case STEP_HEADLIGHT_UART_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;4128               STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE);
;;;4129               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4130   
;;;4131               // 比对万用表返回的数值
;;;4132               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;4133               {
;;;4134                   Clear_All_Lines();
;;;4135                   Display_Centered(0, "XM HEADLIGHT");
;;;4136                   Display_Centered(1, "VCC");
;;;4137                   Display_Centered(2, "Test Pass");
;;;4138   
;;;4139                   // 打开GND测试引脚
;;;4140                   LED_VCC_TEST_EN_ON();
;;;4141                   LED_VCC_EN_ON();
;;;4142   
;;;4143                   // 通知万用表测VCC
;;;4144                   AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4145                   AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4146                   Clear_All_Lines();
;;;4147                   Display_Centered(0, "XM HEADLIGHT");
;;;4148                   Display_Centered(1, "AVO METER");
;;;4149                   Display_Centered(2, "Measurement");
;;;4150               }
;;;4151               // 比对失败
;;;4152               else
;;;4153               {
;;;4154       #if DEBUG_ENABLE
;;;4155                   Clear_All_Lines();
;;;4156                   Display_Centered(0, "XM VCC Abnormal");
;;;4157                   Display_YX_Format(1, 0, "%f", measure.result);
;;;4158                   Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;4159                   Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;4160       #endif
;;;4161                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4162                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4163               }
;;;4164               break;
;;;4165   
;;;4166           case STEP_HEADLIGHT_UART_TEST_CHECK_GND_VALUE: // 比对GND
;;;4167               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4168   
;;;4169               // 小于3V则GND导通测试通过
;;;4170               if (LIGHT_GND_VOLTAGE_VALUE > measure.result)
;;;4171               {
;;;4172                   // 关闭大灯
;;;4173                   UART_PROTOCOL_XM_SendCmdParamAck(UART_PROTOCOL_XM_CMD_TEST_LIGHT, 0);
;;;4174                   Clear_All_Lines();
;;;4175                   Display_Centered(0, "XM HEADLIGHT");
;;;4176                   Display_Centered(1, "GND");
;;;4177                   Display_Centered(2, "Test Pass");
;;;4178                   STATE_SwitchStep(STEP_HEADLIGHT_UART_TEST_WAIT_RESPONSE);       
;;;4179               }
;;;4180               else
;;;4181               {
;;;4182       #if DEBUG_ENABLE
;;;4183                   Clear_All_Lines();
;;;4184                   Display_Centered(0, "XM HEADLIGHT");
;;;4185                   Display_Centered(1, "GND Abnormal");
;;;4186                   Display_YX_Format(2, 0, "%f", measure.result);
;;;4187       #endif
;;;4188                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4189                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4190                   STATE_SwitchStep(STATE_STANDBY);
;;;4191   
;;;4192               }
;;;4193               break;
;;;4194   
;;;4195           case STEP_HEADLIGHT_UART_TEST_COMPLETE: // 测试完成
;;;4196               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4197               Clear_All_Lines();
;;;4198               Display_Centered(0, "XM HEADLIGHT");
;;;4199               Display_Centered(1, "Test Pass");
;;;4200   
;;;4201               // 上报测试成功
;;;4202               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;4203               AVO_PIN_Reset();
;;;4204               STATE_EnterState(STATE_STANDBY);
;;;4205               break;
;;;4206   
;;;4207           // 超时处理
;;;4208           case STEP_HEADLIGHT_UART_TEST_COMMUNICATION_TIME_OUT:
;;;4209               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4210               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4211               AVO_PIN_Reset();
;;;4212               Clear_All_Lines();
;;;4213               Display_Centered(0, "XM HEADLIGHT");
;;;4214               Display_Centered(1, "Test Timeout");
;;;4215               STATE_EnterState(STATE_STANDBY);
;;;4216               break;
;;;4217   
;;;4218           default:
;;;4219               break;
;;;4220       }
;;;4221   }
000048  e8bd81fc          POP      {r2-r8,pc}
                  |L30.76|
00004c  4d9e              LDR      r5,|L30.712|
00004e  2814              CMP      r0,#0x14              ;4075
000050  d062              BEQ      |L30.280|
000052  2815              CMP      r0,#0x15              ;4075
000054  d07d              BEQ      |L30.338|
000056  2816              CMP      r0,#0x16              ;4075
000058  d07c              BEQ      |L30.340|
00005a  2817              CMP      r0,#0x17              ;4075
00005c  d1f4              BNE      |L30.72|
00005e  2008              MOVS     r0,#8                 ;4209
000060  f7fffffe          BL       TIMER_KillTask
000064  2100              MOVS     r1,#0                 ;4210
000066  200b              MOVS     r0,#0xb               ;4210
000068  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00006c  f7fffffe          BL       AVO_PIN_Reset
000070  f7fffffe          BL       Clear_All_Lines
000074  a195              ADR      r1,|L30.716|
000076  2000              MOVS     r0,#0                 ;4213
000078  f7fffffe          BL       Display_Centered
00007c  a197              ADR      r1,|L30.732|
00007e  2001              MOVS     r0,#1                 ;4214
000080  f7fffffe          BL       Display_Centered
000084  e8bd41fc          POP      {r2-r8,lr}            ;4215
000088  2001              MOVS     r0,#1                 ;4215
00008a  f7ffbffe          B.W      STATE_EnterState
                  |L30.142|
00008e  2012              MOVS     r0,#0x12              ;4081
000090  f7fffffe          BL       STATE_SwitchStep
000094  6a20              LDR      r0,[r4,#0x20]         ;4082  ; dut_info
000096  f7fffffe          BL       UART_DRIVE_InitSelect
00009a  f7fffffe          BL       DUT_PROTOCOL_Init
00009e  f7fffffe          BL       UART_PROTOCOL_XM_Init
0000a2  4992              LDR      r1,|L30.748|
0000a4  2000              MOVS     r0,#0                 ;4085
0000a6  7008              STRB     r0,[r1,#0]            ;4085
0000a8  4991              LDR      r1,|L30.752|
0000aa  7008              STRB     r0,[r1,#0]            ;4086
0000ac  f7fffffe          BL       Clear_All_Lines
0000b0  a186              ADR      r1,|L30.716|
0000b2  2000              MOVS     r0,#0                 ;4088
0000b4  f7fffffe          BL       Display_Centered
0000b8  a18e              ADR      r1,|L30.756|
0000ba  2001              MOVS     r0,#1                 ;4089
0000bc  f7fffffe          BL       Display_Centered
0000c0  e8bd41fc          POP      {r2-r8,lr}            ;4092
0000c4  f7ffbffe          B.W      AVO_PIN_Reset
                  |L30.200|
0000c8  2011              MOVS     r0,#0x11              ;4112
0000ca  f7fffffe          BL       STATE_SwitchStep
0000ce  2008              MOVS     r0,#8                 ;4113
0000d0  f7fffffe          BL       TIMER_ResetTimer
0000d4  4633              MOV      r3,r6                 ;4116
0000d6  2203              MOVS     r2,#3                 ;4116
0000d8  2110              MOVS     r1,#0x10              ;4116
0000da  4638              MOV      r0,r7                 ;4116
0000dc  f7fffffe          BL       gpio_init
0000e0  4631              MOV      r1,r6                 ;4116
0000e2  4638              MOV      r0,r7                 ;4116
0000e4  f7fffffe          BL       gpio_bit_set
0000e8  2100              MOVS     r1,#0                 ;4119
0000ea  2001              MOVS     r0,#1                 ;4119
0000ec  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000f0  2100              MOVS     r1,#0                 ;4120
0000f2  2001              MOVS     r0,#1                 ;4120
0000f4  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000f8  f7fffffe          BL       Clear_All_Lines
0000fc  a173              ADR      r1,|L30.716|
0000fe  2000              MOVS     r0,#0                 ;4122
000100  f7fffffe          BL       Display_Centered
000104  a17d              ADR      r1,|L30.764|
000106  2001              MOVS     r0,#1                 ;4123
000108  f7fffffe          BL       Display_Centered
00010c  e8bd41fc          POP      {r2-r8,lr}            ;4124
000110  a17d              ADR      r1,|L30.776|
000112  2002              MOVS     r0,#2                 ;4124
000114  f7ffbffe          B.W      Display_Centered
                  |L30.280|
000118  2011              MOVS     r0,#0x11              ;4128
00011a  f7fffffe          BL       STATE_SwitchStep
00011e  2008              MOVS     r0,#8                 ;4129
000120  f7fffffe          BL       TIMER_ResetTimer
000124  6ba0              LDR      r0,[r4,#0x38]         ;4132  ; dut_info
000126  f7fffffe          BL       __aeabi_ui2f
00012a  6829              LDR      r1,[r5,#0]            ;4132  ; measure
00012c  f7fffffe          BL       __aeabi_cfcmple
000130  d246              BCS      |L30.448|
000132  6b60              LDR      r0,[r4,#0x34]         ;4132  ; dut_info
000134  f7fffffe          BL       __aeabi_ui2f
000138  6829              LDR      r1,[r5,#0]            ;4132  ; measure
00013a  f7fffffe          BL       __aeabi_cfrcmple
00013e  d23f              BCS      |L30.448|
000140  f7fffffe          BL       Clear_All_Lines
000144  a161              ADR      r1,|L30.716|
000146  2000              MOVS     r0,#0                 ;4135
000148  f7fffffe          BL       Display_Centered
00014c  a171              ADR      r1,|L30.788|
00014e  2001              MOVS     r0,#1                 ;4136
000150  e001              B        |L30.342|
                  |L30.338|
000152  e05a              B        |L30.522|
                  |L30.340|
000154  e097              B        |L30.646|
                  |L30.342|
000156  f7fffffe          BL       Display_Centered
00015a  a16f              ADR      r1,|L30.792|
00015c  2002              MOVS     r0,#2                 ;4137
00015e  f7fffffe          BL       Display_Centered
000162  4633              MOV      r3,r6                 ;4140
000164  2203              MOVS     r2,#3                 ;4140
000166  2110              MOVS     r1,#0x10              ;4140
000168  4638              MOV      r0,r7                 ;4140
00016a  f7fffffe          BL       gpio_init
00016e  4631              MOV      r1,r6                 ;4140
000170  4638              MOV      r0,r7                 ;4140
000172  f7fffffe          BL       gpio_bit_set
000176  4d6b              LDR      r5,|L30.804|
000178  f44f5480          MOV      r4,#0x1000            ;4141
00017c  4623              MOV      r3,r4                 ;4141
00017e  2203              MOVS     r2,#3                 ;4141
000180  2110              MOVS     r1,#0x10              ;4141
000182  4628              MOV      r0,r5                 ;4141
000184  f7fffffe          BL       gpio_init
000188  4621              MOV      r1,r4                 ;4141
00018a  4628              MOV      r0,r5                 ;4141
00018c  f7fffffe          BL       gpio_bit_set
000190  2100              MOVS     r1,#0                 ;4144
000192  2001              MOVS     r0,#1                 ;4144
000194  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000198  2100              MOVS     r1,#0                 ;4145
00019a  2001              MOVS     r0,#1                 ;4145
00019c  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0001a0  f7fffffe          BL       Clear_All_Lines
0001a4  a149              ADR      r1,|L30.716|
0001a6  2000              MOVS     r0,#0                 ;4147
0001a8  f7fffffe          BL       Display_Centered
0001ac  a153              ADR      r1,|L30.764|
0001ae  2001              MOVS     r0,#1                 ;4148
0001b0  f7fffffe          BL       Display_Centered
0001b4  e8bd41fc          POP      {r2-r8,lr}            ;4149
0001b8  a153              ADR      r1,|L30.776|
0001ba  2002              MOVS     r0,#2                 ;4149
0001bc  f7ffbffe          B.W      Display_Centered
                  |L30.448|
0001c0  f7fffffe          BL       Clear_All_Lines
0001c4  a158              ADR      r1,|L30.808|
0001c6  2000              MOVS     r0,#0                 ;4156
0001c8  f7fffffe          BL       Display_Centered
0001cc  6828              LDR      r0,[r5,#0]            ;4157  ; measure
0001ce  f7fffffe          BL       __aeabi_f2d
0001d2  e9cd0100          STRD     r0,r1,[sp,#0]         ;4157
0001d6  a258              ADR      r2,|L30.824|
0001d8  2100              MOVS     r1,#0                 ;4157
0001da  2001              MOVS     r0,#1                 ;4157
0001dc  f7fffffe          BL       Display_YX_Format
0001e0  a256              ADR      r2,|L30.828|
0001e2  2100              MOVS     r1,#0                 ;4158
0001e4  2002              MOVS     r0,#2                 ;4158
0001e6  6ba3              LDR      r3,[r4,#0x38]         ;4158  ; dut_info
0001e8  f7fffffe          BL       Display_YX_Format
0001ec  a253              ADR      r2,|L30.828|
0001ee  2100              MOVS     r1,#0                 ;4159
0001f0  2003              MOVS     r0,#3                 ;4159
0001f2  6b63              LDR      r3,[r4,#0x34]         ;4159  ; dut_info
0001f4  f7fffffe          BL       Display_YX_Format
0001f8  2100              MOVS     r1,#0                 ;4161
0001fa  200b              MOVS     r0,#0xb               ;4161
0001fc  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000200  e8bd41fc          POP      {r2-r8,lr}            ;4162
000204  2008              MOVS     r0,#8                 ;4162
000206  f7ffbffe          B.W      TIMER_KillTask
                  |L30.522|
00020a  2008              MOVS     r0,#8                 ;4167
00020c  f7fffffe          BL       TIMER_ResetTimer
000210  494b              LDR      r1,|L30.832|
000212  6828              LDR      r0,[r5,#0]            ;4170  ; measure
000214  4288              CMP      r0,r1                 ;4170
000216  da16              BGE      |L30.582|
000218  2100              MOVS     r1,#0                 ;4173
00021a  2086              MOVS     r0,#0x86              ;4173
00021c  f7fffffe          BL       UART_PROTOCOL_XM_SendCmdParamAck
000220  f7fffffe          BL       Clear_All_Lines
000224  a129              ADR      r1,|L30.716|
000226  2000              MOVS     r0,#0                 ;4175
000228  f7fffffe          BL       Display_Centered
00022c  a145              ADR      r1,|L30.836|
00022e  2001              MOVS     r0,#1                 ;4176
000230  f7fffffe          BL       Display_Centered
000234  a138              ADR      r1,|L30.792|
000236  2002              MOVS     r0,#2                 ;4177
000238  f7fffffe          BL       Display_Centered
00023c  e8bd41fc          POP      {r2-r8,lr}            ;4178
000240  2011              MOVS     r0,#0x11              ;4178
000242  f7ffbffe          B.W      STATE_SwitchStep
                  |L30.582|
000246  f7fffffe          BL       Clear_All_Lines
00024a  a120              ADR      r1,|L30.716|
00024c  2000              MOVS     r0,#0                 ;4184
00024e  f7fffffe          BL       Display_Centered
000252  a13d              ADR      r1,|L30.840|
000254  2001              MOVS     r0,#1                 ;4185
000256  f7fffffe          BL       Display_Centered
00025a  6828              LDR      r0,[r5,#0]            ;4186  ; measure
00025c  f7fffffe          BL       __aeabi_f2d
000260  e9cd0100          STRD     r0,r1,[sp,#0]         ;4186
000264  a234              ADR      r2,|L30.824|
000266  2100              MOVS     r1,#0                 ;4186
000268  2002              MOVS     r0,#2                 ;4186
00026a  f7fffffe          BL       Display_YX_Format
00026e  2100              MOVS     r1,#0                 ;4188
000270  200b              MOVS     r0,#0xb               ;4188
000272  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000276  2008              MOVS     r0,#8                 ;4189
000278  f7fffffe          BL       TIMER_KillTask
00027c  e8bd41fc          POP      {r2-r8,lr}            ;4190
000280  2001              MOVS     r0,#1                 ;4190
000282  f7ffbffe          B.W      STATE_SwitchStep
                  |L30.646|
000286  2008              MOVS     r0,#8                 ;4196
000288  f7fffffe          BL       TIMER_KillTask
00028c  f7fffffe          BL       Clear_All_Lines
000290  a10e              ADR      r1,|L30.716|
000292  2000              MOVS     r0,#0                 ;4198
000294  f7fffffe          BL       Display_Centered
000298  a11f              ADR      r1,|L30.792|
00029a  2001              MOVS     r0,#1                 ;4199
00029c  f7fffffe          BL       Display_Centered
0002a0  2101              MOVS     r1,#1                 ;4202
0002a2  200b              MOVS     r0,#0xb               ;4202
0002a4  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0002a8  f7fffffe          BL       AVO_PIN_Reset
0002ac  e8bd41fc          POP      {r2-r8,lr}            ;4204
0002b0  2001              MOVS     r0,#1                 ;4204
0002b2  f7ffbffe          B.W      STATE_EnterState
;;;4222   
                          ENDP

0002b6  0000              DCW      0x0000
                  |L30.696|
                          DCD      ||.data||+0x6
                  |L30.700|
                          DCD      0x40011400
                  |L30.704|
                          DCD      dut_info
                  |L30.708|
                          DCD      STATE_SwitchStep
                  |L30.712|
                          DCD      measure
                  |L30.716|
0002cc  584d2048          DCB      "XM HEADLIGHT",0
0002d0  4541444c
0002d4  49474854
0002d8  00      
0002d9  00                DCB      0
0002da  00                DCB      0
0002db  00                DCB      0
                  |L30.732|
0002dc  54657374          DCB      "Test Timeout",0
0002e0  2054696d
0002e4  656f7574
0002e8  00      
0002e9  00                DCB      0
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L30.748|
                          DCD      light_cnt
                  |L30.752|
                          DCD      headlight_cnt
                  |L30.756|
0002f4  54657374          DCB      "Testing",0
0002f8  696e6700
                  |L30.764|
0002fc  41564f20          DCB      "AVO METER",0
000300  4d455445
000304  5200    
000306  00                DCB      0
000307  00                DCB      0
                  |L30.776|
000308  4d656173          DCB      "Measurement",0
00030c  7572656d
000310  656e7400
                  |L30.788|
000314  56434300          DCB      "VCC",0
                  |L30.792|
000318  54657374          DCB      "Test Pass",0
00031c  20506173
000320  7300    
000322  00                DCB      0
000323  00                DCB      0
                  |L30.804|
                          DCD      0x40010c00
                  |L30.808|
000328  584d2056          DCB      "XM VCC Abnormal",0
00032c  43432041
000330  626e6f72
000334  6d616c00
                  |L30.824|
000338  256600            DCB      "%f",0
00033b  00                DCB      0
                  |L30.828|
00033c  256400            DCB      "%d",0
00033f  00                DCB      0
                  |L30.832|
                          DCD      0x453b8000
                  |L30.836|
000344  474e4400          DCB      "GND",0
                  |L30.840|
000348  474e4420          DCB      "GND Abnormal",0
00034c  41626e6f
000350  726d616c
000354  00      
000355  00                DCB      0
000356  00                DCB      0
000357  00                DCB      0

                          AREA ||i.STEP_Process_XM_Left_TurnSignalUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_XM_Left_TurnSignalUartTest PROC
;;;4614   // 左转向灯测试
;;;4615   void STEP_Process_XM_Left_TurnSignalUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;4616   {
;;;4617       switch (stateCB.step)
000002  48aa              LDR      r0,|L31.684|
;;;4618       {
;;;4619           case STEP_NULL: // 空步骤
;;;4620               break;
;;;4621   
;;;4622           case STEP_LEFT_TURN_SIGNAL_UART_TEST_ENTRY: // 入口步骤
;;;4623               STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_NOTIFY_DUT);
;;;4624               UART_DRIVE_InitSelect(dut_info.uart_baudRate);
;;;4625               DUT_PROTOCOL_Init();
;;;4626               UART_PROTOCOL_XM_Init();
;;;4627               light_cnt = 0;
;;;4628               headlight_cnt = 0;           
;;;4629               Clear_All_Lines();
;;;4630               Display_Centered(0, "XM LEFT SIGNAL");
;;;4631               Display_Centered(1, "Testing");
;;;4632   
;;;4633               // 测试引脚复位
;;;4634               AVO_PIN_Reset();
;;;4635               break;
;;;4636   
;;;4637           case STEP_LEFT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;4638               break;
;;;4639   
;;;4640           case STEP_LEFT_TURN_SIGNAL_UART_TEST_NOTIFY_DUT:   // 通知DUT打开左转向灯
;;;4641               STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;4642               UART_PROTOCOL_XM_SendCmdParamAck(UART_PROTOCOL_XM_CMD_TEST_TURN_LIGHT,1);
;;;4643   
;;;4644               // 添加超时
;;;4645               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;4646                             4000,
;;;4647                             STATE_SwitchStep,
;;;4648                             STEP_LEFT_TURN_SIGNAL_UART_TEST_COMMUNICATION_TIME_OUT,
;;;4649                             1,
;;;4650                             ACTION_MODE_ADD_TO_QUEUE);
;;;4651               break;
;;;4652   
;;;4653           case STEP_LEFT_TURN_SIGNAL_UART_TEST_OPEN:      // 仪表打开左转向灯成功
;;;4654               STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;4655               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4656   
;;;4657               // 打开VCC测试引脚
;;;4658               LEFT_VCC_TEST_EN_ON();
000004  4eaa              LDR      r6,|L31.688|
000006  4dab              LDR      r5,|L31.692|
000008  8840              LDRH     r0,[r0,#2]            ;4617  ; stateCB
00000a  282b              CMP      r0,#0x2b              ;4617
00000c  d058              BEQ      |L31.192|
00000e  dc19              BGT      |L31.68|
000010  2800              CMP      r0,#0                 ;4617
000012  d016              BEQ      |L31.66|
000014  2828              CMP      r0,#0x28              ;4617
000016  d036              BEQ      |L31.134|
000018  2829              CMP      r0,#0x29              ;4617
00001a  d012              BEQ      |L31.66|
00001c  282a              CMP      r0,#0x2a              ;4617
00001e  d110              BNE      |L31.66|
000020  2029              MOVS     r0,#0x29              ;4641
000022  f7fffffe          BL       STATE_SwitchStep
000026  2101              MOVS     r1,#1                 ;4642
000028  2088              MOVS     r0,#0x88              ;4642
00002a  f7fffffe          BL       UART_PROTOCOL_XM_SendCmdParamAck
00002e  2001              MOVS     r0,#1                 ;4645
000030  9000              STR      r0,[sp,#0]            ;4645
000032  9001              STR      r0,[sp,#4]            ;4645
000034  2330              MOVS     r3,#0x30              ;4645
000036  4aa0              LDR      r2,|L31.696|
000038  f44f617a          MOV      r1,#0xfa0             ;4645
00003c  2008              MOVS     r0,#8                 ;4645
00003e  f7fffffe          BL       TIMER_AddTask
                  |L31.66|
;;;4659   
;;;4660               // 通知万用表测VCC
;;;4661               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4662               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4663               Clear_All_Lines();
;;;4664               Display_Centered(0, "XM LEFT SIGNAL");
;;;4665               Display_Centered(1, "AVO METER");
;;;4666               Display_Centered(2, "Measurement");
;;;4667               break;
;;;4668   
;;;4669           case STEP_LEFT_TURN_SIGNAL_UART_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;4670               STATE_SwitchStep(STEP_LEFT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;4671               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4672               
;;;4673               // 比对万用表返回的数值
;;;4674               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;4675               {
;;;4676                   Clear_All_Lines();
;;;4677                   Display_Centered(0, "XM LEFT SIGNAL");
;;;4678                   Display_Centered(1, "VCC");
;;;4679                   Display_Centered(2, "Test Pass");
;;;4680   
;;;4681                   // 打开GND测试引脚
;;;4682                   LEFT_VCC_TEST_EN_ON();
;;;4683                   LEFT_VCC_EN_ON();
;;;4684                   vccVlaue = measure.result;
;;;4685                   
;;;4686                   // 通知万用表测VCC
;;;4687                   AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4688   //                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4689   
;;;4690                   Clear_All_Lines();
;;;4691                   Display_Centered(0, "XM LEFT SIGNAL");
;;;4692                   Display_Centered(1, "AVO METER");
;;;4693                   Display_Centered(2, "Measurement");
;;;4694               }
;;;4695               // 比对失败
;;;4696               else
;;;4697               {
;;;4698       #if DEBUG_ENABLE
;;;4699                   Clear_All_Lines();
;;;4700                   Display_Centered(0, "VCC Abnormal");
;;;4701                   Display_YX_Format(1, 0, "%f", measure.result);
;;;4702                   Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;4703                   Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;4704       #endif
;;;4705                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4706                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4707               }
;;;4708               break;
;;;4709   
;;;4710           case STEP_LEFT_TURN_SIGNAL_UART_TEST_CHECK_GND_VALUE: // 比对GND
;;;4711               STATE_SwitchStep(STEP_HBEAM_UART_TEST_WAIT_RESPONSE);
;;;4712               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4713   
;;;4714   //            // 记录第一次GND电压值
;;;4715   //            gndVlaue1 = measure.result;
;;;4716   //            
;;;4717   //            // 打开GND测试引脚
;;;4718   //            LEFT_VCC_TEST_EN_ON();
;;;4719   //            LEFT_VCC_EN_ON();
;;;4720   //            
;;;4721   //            // 通知万用表测VCC
;;;4722   //            AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4723   //            AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);   
;;;4724               
;;;4725               // 小于3V则GND导通测试通过
;;;4726               if (3000 > measure.result)
;;;4727               {
;;;4728                   // 关闭左转向灯
;;;4729                   UART_PROTOCOL_XM_SendCmdParamAck(UART_PROTOCOL_XM_CMD_TEST_TURN_LIGHT,0);
;;;4730                   Clear_All_Lines();
;;;4731                   Display_Centered(0, "XM LEFT SIGNAL");
;;;4732                   Display_Centered(1, "GND");
;;;4733                   Display_Centered(2, "Test Pass");
;;;4734               }
;;;4735               else
;;;4736               {
;;;4737       #if DEBUG_ENABLE
;;;4738                   Clear_All_Lines();
;;;4739                   Display_Centered(0, "XM LEFT SIGNAL");
;;;4740                   Display_Centered(1, "GND Abnormal");
;;;4741                   Display_YX_Format(2, 0, "%f", measure.result);
;;;4742       #endif
;;;4743                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4744                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4745               }
;;;4746               break;
;;;4747   
;;;4748   //        case STEP_LEFT_TURN_SIGNAL_UART_TEST_CHECK_GND_VALUE2: // 比对GND
;;;4749   //            STATE_SwitchStep(STEP_HBEAM_UART_TEST_WAIT_RESPONSE);
;;;4750   //            TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4751   //            
;;;4752   //            // 记录第二次GND电压值
;;;4753   //            gndVlaue2 = measure.result; 
;;;4754   //            
;;;4755   //            result = abs(gndVlaue2 - gndVlaue1);
;;;4756   //            result = abs(gndVlaue2 - vccVlaue);
;;;4757   //            result = abs(gndVlaue1 - gndVlaue1);
;;;4758   //                     
;;;4759   //            if ((abs(gndVlaue2 - gndVlaue1) > 2000) ||  (abs(gndVlaue2 - vccVlaue) > 2000) ||  (abs(gndVlaue1 - vccVlaue) > 2000))
;;;4760   //            {
;;;4761   //                // 关闭左转向灯
;;;4762   //                UART_PROTOCOL_XM_SendCmdParamAck(UART_PROTOCOL_XM_CMD_TEST_TURN_LIGHT,0);
;;;4763   //                Clear_All_Lines();
;;;4764   //                Display_Centered(0, "XM LEFT SIGNAL");
;;;4765   //                Display_Centered(1, "GND");
;;;4766   //                Display_Centered(2, "Test Pass");
;;;4767   //            }
;;;4768   //            else
;;;4769   //            {
;;;4770   //    #if DEBUG_ENABLE
;;;4771   //                Clear_All_Lines();
;;;4772   //                Display_Centered(0, "XM LEFT SIGNAL");
;;;4773   //                Display_Centered(1, "GND Abnormal");
;;;4774   //                Display_YX_Format(2, 0, "%f", measure.result);
;;;4775   //    #endif
;;;4776   //                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4777   //                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4778   //            }
;;;4779   //            break;
;;;4780               
;;;4781           case STEP_LEFT_TURN_SIGNAL_UART_TEST_COMPLETE: // 测试完成
;;;4782               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4783               Clear_All_Lines();
;;;4784               Display_Centered(0, "XM LEFT SIGNAL");
;;;4785               Display_Centered(1, "Test Pass");
;;;4786   
;;;4787               // 上报测试成功
;;;4788               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;4789               AVO_PIN_Reset();
;;;4790               STATE_EnterState(STATE_STANDBY);
;;;4791               break;
;;;4792   
;;;4793           // 超时处理
;;;4794           case STEP_LEFT_TURN_SIGNAL_UART_TEST_COMMUNICATION_TIME_OUT:
;;;4795               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4796               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4797               AVO_PIN_Reset();
;;;4798               Clear_All_Lines();
;;;4799               Display_Centered(0, "XM LEFT SIGNAL");
;;;4800               Display_Centered(1, "Test Timeout");
;;;4801               STATE_EnterState(STATE_STANDBY);
;;;4802               break;
;;;4803   
;;;4804           default:
;;;4805               break;
;;;4806       }
;;;4807   }
000042  bd7c              POP      {r2-r6,pc}
                  |L31.68|
000044  4c9d              LDR      r4,|L31.700|
000046  282c              CMP      r0,#0x2c              ;4617
000048  d062              BEQ      |L31.272|
00004a  282d              CMP      r0,#0x2d              ;4617
00004c  d07d              BEQ      |L31.330|
00004e  282f              CMP      r0,#0x2f              ;4617
000050  d07c              BEQ      |L31.332|
000052  2830              CMP      r0,#0x30              ;4617
000054  d1f5              BNE      |L31.66|
000056  2008              MOVS     r0,#8                 ;4795
000058  f7fffffe          BL       TIMER_KillTask
00005c  2100              MOVS     r1,#0                 ;4796
00005e  200b              MOVS     r0,#0xb               ;4796
000060  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000064  f7fffffe          BL       AVO_PIN_Reset
000068  f7fffffe          BL       Clear_All_Lines
00006c  a194              ADR      r1,|L31.704|
00006e  2000              MOVS     r0,#0                 ;4799
000070  f7fffffe          BL       Display_Centered
000074  a196              ADR      r1,|L31.720|
000076  2001              MOVS     r0,#1                 ;4800
000078  f7fffffe          BL       Display_Centered
00007c  e8bd407c          POP      {r2-r6,lr}            ;4801
000080  2001              MOVS     r0,#1                 ;4801
000082  f7ffbffe          B.W      STATE_EnterState
                  |L31.134|
000086  202a              MOVS     r0,#0x2a              ;4623
000088  f7fffffe          BL       STATE_SwitchStep
00008c  6a28              LDR      r0,[r5,#0x20]         ;4624  ; dut_info
00008e  f7fffffe          BL       UART_DRIVE_InitSelect
000092  f7fffffe          BL       DUT_PROTOCOL_Init
000096  f7fffffe          BL       UART_PROTOCOL_XM_Init
00009a  4991              LDR      r1,|L31.736|
00009c  2000              MOVS     r0,#0                 ;4627
00009e  7008              STRB     r0,[r1,#0]            ;4627
0000a0  4990              LDR      r1,|L31.740|
0000a2  7008              STRB     r0,[r1,#0]            ;4628
0000a4  f7fffffe          BL       Clear_All_Lines
0000a8  a185              ADR      r1,|L31.704|
0000aa  2000              MOVS     r0,#0                 ;4630
0000ac  f7fffffe          BL       Display_Centered
0000b0  a18d              ADR      r1,|L31.744|
0000b2  2001              MOVS     r0,#1                 ;4631
0000b4  f7fffffe          BL       Display_Centered
0000b8  e8bd407c          POP      {r2-r6,lr}            ;4634
0000bc  f7ffbffe          B.W      AVO_PIN_Reset
                  |L31.192|
0000c0  2029              MOVS     r0,#0x29              ;4654
0000c2  f7fffffe          BL       STATE_SwitchStep
0000c6  2008              MOVS     r0,#8                 ;4655
0000c8  f7fffffe          BL       TIMER_ResetTimer
0000cc  2308              MOVS     r3,#8                 ;4658
0000ce  2203              MOVS     r2,#3                 ;4658
0000d0  2110              MOVS     r1,#0x10              ;4658
0000d2  4630              MOV      r0,r6                 ;4658
0000d4  f7fffffe          BL       gpio_init
0000d8  2108              MOVS     r1,#8                 ;4658
0000da  4630              MOV      r0,r6                 ;4658
0000dc  f7fffffe          BL       gpio_bit_set
0000e0  2100              MOVS     r1,#0                 ;4661
0000e2  2001              MOVS     r0,#1                 ;4661
0000e4  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000e8  2100              MOVS     r1,#0                 ;4662
0000ea  2001              MOVS     r0,#1                 ;4662
0000ec  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000f0  f7fffffe          BL       Clear_All_Lines
0000f4  a172              ADR      r1,|L31.704|
0000f6  2000              MOVS     r0,#0                 ;4664
0000f8  f7fffffe          BL       Display_Centered
0000fc  a17c              ADR      r1,|L31.752|
0000fe  2001              MOVS     r0,#1                 ;4665
000100  f7fffffe          BL       Display_Centered
000104  e8bd407c          POP      {r2-r6,lr}            ;4666
000108  a17c              ADR      r1,|L31.764|
00010a  2002              MOVS     r0,#2                 ;4666
00010c  f7ffbffe          B.W      Display_Centered
                  |L31.272|
000110  2029              MOVS     r0,#0x29              ;4670
000112  f7fffffe          BL       STATE_SwitchStep
000116  2008              MOVS     r0,#8                 ;4671
000118  f7fffffe          BL       TIMER_ResetTimer
00011c  6ba8              LDR      r0,[r5,#0x38]         ;4674  ; dut_info
00011e  f7fffffe          BL       __aeabi_ui2f
000122  6821              LDR      r1,[r4,#0]            ;4674  ; measure
000124  f7fffffe          BL       __aeabi_cfcmple
000128  d248              BCS      |L31.444|
00012a  6b68              LDR      r0,[r5,#0x34]         ;4674  ; dut_info
00012c  f7fffffe          BL       __aeabi_ui2f
000130  6821              LDR      r1,[r4,#0]            ;4674  ; measure
000132  f7fffffe          BL       __aeabi_cfrcmple
000136  d241              BCS      |L31.444|
000138  f7fffffe          BL       Clear_All_Lines
00013c  a160              ADR      r1,|L31.704|
00013e  2000              MOVS     r0,#0                 ;4677
000140  f7fffffe          BL       Display_Centered
000144  a170              ADR      r1,|L31.776|
000146  2001              MOVS     r0,#1                 ;4678
000148  e001              B        |L31.334|
                  |L31.330|
00014a  e05c              B        |L31.518|
                  |L31.332|
00014c  e096              B        |L31.636|
                  |L31.334|
00014e  f7fffffe          BL       Display_Centered
000152  a16e              ADR      r1,|L31.780|
000154  2002              MOVS     r0,#2                 ;4679
000156  f7fffffe          BL       Display_Centered
00015a  2308              MOVS     r3,#8                 ;4682
00015c  2203              MOVS     r2,#3                 ;4682
00015e  2110              MOVS     r1,#0x10              ;4682
000160  4630              MOV      r0,r6                 ;4682
000162  f7fffffe          BL       gpio_init
000166  2108              MOVS     r1,#8                 ;4682
000168  4630              MOV      r0,r6                 ;4682
00016a  f7fffffe          BL       gpio_bit_set
00016e  4e6a              LDR      r6,|L31.792|
000170  f44f4500          MOV      r5,#0x8000            ;4683
000174  462b              MOV      r3,r5                 ;4683
000176  2203              MOVS     r2,#3                 ;4683
000178  2110              MOVS     r1,#0x10              ;4683
00017a  4630              MOV      r0,r6                 ;4683
00017c  f7fffffe          BL       gpio_init
000180  4629              MOV      r1,r5                 ;4683
000182  4630              MOV      r0,r6                 ;4683
000184  f7fffffe          BL       gpio_bit_set
000188  6820              LDR      r0,[r4,#0]            ;4684  ; measure
00018a  f7fffffe          BL       __aeabi_f2uiz
00018e  4947              LDR      r1,|L31.684|
000190  1f89              SUBS     r1,r1,#6              ;4684
000192  8088              STRH     r0,[r1,#4]            ;4684
000194  2100              MOVS     r1,#0                 ;4687
000196  2001              MOVS     r0,#1                 ;4687
000198  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00019c  f7fffffe          BL       Clear_All_Lines
0001a0  a147              ADR      r1,|L31.704|
0001a2  2000              MOVS     r0,#0                 ;4691
0001a4  f7fffffe          BL       Display_Centered
0001a8  a151              ADR      r1,|L31.752|
0001aa  2001              MOVS     r0,#1                 ;4692
0001ac  f7fffffe          BL       Display_Centered
0001b0  e8bd407c          POP      {r2-r6,lr}            ;4693
0001b4  a151              ADR      r1,|L31.764|
0001b6  2002              MOVS     r0,#2                 ;4693
0001b8  f7ffbffe          B.W      Display_Centered
                  |L31.444|
0001bc  f7fffffe          BL       Clear_All_Lines
0001c0  a156              ADR      r1,|L31.796|
0001c2  2000              MOVS     r0,#0                 ;4700
0001c4  f7fffffe          BL       Display_Centered
0001c8  6820              LDR      r0,[r4,#0]            ;4701  ; measure
0001ca  f7fffffe          BL       __aeabi_f2d
0001ce  e9cd0100          STRD     r0,r1,[sp,#0]         ;4701
0001d2  a256              ADR      r2,|L31.812|
0001d4  2100              MOVS     r1,#0                 ;4701
0001d6  2001              MOVS     r0,#1                 ;4701
0001d8  f7fffffe          BL       Display_YX_Format
0001dc  a254              ADR      r2,|L31.816|
0001de  2100              MOVS     r1,#0                 ;4702
0001e0  2002              MOVS     r0,#2                 ;4702
0001e2  6bab              LDR      r3,[r5,#0x38]         ;4702  ; dut_info
0001e4  f7fffffe          BL       Display_YX_Format
0001e8  a251              ADR      r2,|L31.816|
0001ea  2100              MOVS     r1,#0                 ;4703
0001ec  2003              MOVS     r0,#3                 ;4703
0001ee  6b6b              LDR      r3,[r5,#0x34]         ;4703  ; dut_info
0001f0  f7fffffe          BL       Display_YX_Format
0001f4  2100              MOVS     r1,#0                 ;4705
0001f6  200b              MOVS     r0,#0xb               ;4705
0001f8  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001fc  e8bd407c          POP      {r2-r6,lr}            ;4706
000200  2008              MOVS     r0,#8                 ;4706
000202  f7ffbffe          B.W      TIMER_KillTask
                  |L31.518|
000206  2021              MOVS     r0,#0x21              ;4711
000208  f7fffffe          BL       STATE_SwitchStep
00020c  2008              MOVS     r0,#8                 ;4712
00020e  f7fffffe          BL       TIMER_ResetTimer
000212  4948              LDR      r1,|L31.820|
000214  6820              LDR      r0,[r4,#0]            ;4726  ; measure
000216  4288              CMP      r0,r1                 ;4726
000218  da13              BGE      |L31.578|
00021a  2100              MOVS     r1,#0                 ;4729
00021c  2088              MOVS     r0,#0x88              ;4729
00021e  f7fffffe          BL       UART_PROTOCOL_XM_SendCmdParamAck
000222  f7fffffe          BL       Clear_All_Lines
000226  a126              ADR      r1,|L31.704|
000228  2000              MOVS     r0,#0                 ;4731
00022a  f7fffffe          BL       Display_Centered
00022e  a142              ADR      r1,|L31.824|
000230  2001              MOVS     r0,#1                 ;4732
000232  f7fffffe          BL       Display_Centered
000236  e8bd407c          POP      {r2-r6,lr}            ;4733
00023a  a134              ADR      r1,|L31.780|
00023c  2002              MOVS     r0,#2                 ;4733
00023e  f7ffbffe          B.W      Display_Centered
                  |L31.578|
000242  f7fffffe          BL       Clear_All_Lines
000246  a11e              ADR      r1,|L31.704|
000248  2000              MOVS     r0,#0                 ;4739
00024a  f7fffffe          BL       Display_Centered
00024e  a13b              ADR      r1,|L31.828|
000250  2001              MOVS     r0,#1                 ;4740
000252  f7fffffe          BL       Display_Centered
000256  6820              LDR      r0,[r4,#0]            ;4741  ; measure
000258  f7fffffe          BL       __aeabi_f2d
00025c  e9cd0100          STRD     r0,r1,[sp,#0]         ;4741
000260  a232              ADR      r2,|L31.812|
000262  2100              MOVS     r1,#0                 ;4741
000264  2002              MOVS     r0,#2                 ;4741
000266  f7fffffe          BL       Display_YX_Format
00026a  2100              MOVS     r1,#0                 ;4743
00026c  200b              MOVS     r0,#0xb               ;4743
00026e  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000272  e8bd407c          POP      {r2-r6,lr}            ;4744
000276  2008              MOVS     r0,#8                 ;4744
000278  f7ffbffe          B.W      TIMER_KillTask
                  |L31.636|
00027c  2008              MOVS     r0,#8                 ;4782
00027e  f7fffffe          BL       TIMER_KillTask
000282  f7fffffe          BL       Clear_All_Lines
000286  a10e              ADR      r1,|L31.704|
000288  2000              MOVS     r0,#0                 ;4784
00028a  f7fffffe          BL       Display_Centered
00028e  a11f              ADR      r1,|L31.780|
000290  2001              MOVS     r0,#1                 ;4785
000292  f7fffffe          BL       Display_Centered
000296  2101              MOVS     r1,#1                 ;4788
000298  200b              MOVS     r0,#0xb               ;4788
00029a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00029e  f7fffffe          BL       AVO_PIN_Reset
0002a2  e8bd407c          POP      {r2-r6,lr}            ;4790
0002a6  2001              MOVS     r0,#1                 ;4790
0002a8  f7ffbffe          B.W      STATE_EnterState
;;;4808   
                          ENDP

                  |L31.684|
                          DCD      ||.data||+0x6
                  |L31.688|
                          DCD      0x40011400
                  |L31.692|
                          DCD      dut_info
                  |L31.696|
                          DCD      STATE_SwitchStep
                  |L31.700|
                          DCD      measure
                  |L31.704|
0002c0  584d204c          DCB      "XM LEFT SIGNAL",0
0002c4  45465420
0002c8  5349474e
0002cc  414c00  
0002cf  00                DCB      0
                  |L31.720|
0002d0  54657374          DCB      "Test Timeout",0
0002d4  2054696d
0002d8  656f7574
0002dc  00      
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0
                  |L31.736|
                          DCD      light_cnt
                  |L31.740|
                          DCD      headlight_cnt
                  |L31.744|
0002e8  54657374          DCB      "Testing",0
0002ec  696e6700
                  |L31.752|
0002f0  41564f20          DCB      "AVO METER",0
0002f4  4d455445
0002f8  5200    
0002fa  00                DCB      0
0002fb  00                DCB      0
                  |L31.764|
0002fc  4d656173          DCB      "Measurement",0
000300  7572656d
000304  656e7400
                  |L31.776|
000308  56434300          DCB      "VCC",0
                  |L31.780|
00030c  54657374          DCB      "Test Pass",0
000310  20506173
000314  7300    
000316  00                DCB      0
000317  00                DCB      0
                  |L31.792|
                          DCD      0x40010c00
                  |L31.796|
00031c  56434320          DCB      "VCC Abnormal",0
000320  41626e6f
000324  726d616c
000328  00      
000329  00                DCB      0
00032a  00                DCB      0
00032b  00                DCB      0
                  |L31.812|
00032c  256600            DCB      "%f",0
00032f  00                DCB      0
                  |L31.816|
000330  256400            DCB      "%d",0
000333  00                DCB      0
                  |L31.820|
                          DCD      0x453b8000
                  |L31.824|
000338  474e4400          DCB      "GND",0
                  |L31.828|
00033c  474e4420          DCB      "GND Abnormal",0
000340  41626e6f
000344  726d616c
000348  00      
000349  00                DCB      0
00034a  00                DCB      0
00034b  00                DCB      0

                          AREA ||i.STEP_Process_XM_Right_TurnSignalUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_XM_Right_TurnSignalUartTest PROC
;;;4809   // 右转向灯测试
;;;4810   void STEP_Process_XM_Right_TurnSignalUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;4811   {
;;;4812       switch (stateCB.step)
000002  48aa              LDR      r0,|L32.684|
;;;4813       {
;;;4814           case STEP_NULL: // 空步骤
;;;4815               break;
;;;4816   
;;;4817           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_ENTRY: // 入口步骤
;;;4818               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_NOTIFY_DUT);
;;;4819               UART_DRIVE_InitSelect(dut_info.uart_baudRate);
;;;4820               DUT_PROTOCOL_Init();
;;;4821               UART_PROTOCOL_XM_Init();            
;;;4822               light_cnt = 0;
;;;4823               headlight_cnt = 0;
;;;4824               Clear_All_Lines();
;;;4825               Display_Centered(0, "XM RIGHT SIGNAL");
;;;4826               Display_Centered(1, "Testing");
;;;4827   
;;;4828               // 测试引脚复位
;;;4829               AVO_PIN_Reset();
;;;4830               break;
;;;4831   
;;;4832           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE: // 等待回应步骤
;;;4833               break;
;;;4834   
;;;4835           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_NOTIFY_DUT: // 通知DUT打开右转向灯
;;;4836               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;4837                UART_PROTOCOL_XM_SendCmdParamAck(UART_PROTOCOL_XM_CMD_TEST_TURN_LIGHT, 2);
;;;4838   
;;;4839               // 添加超时
;;;4840               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;4841                             6000,
;;;4842                             STATE_SwitchStep,
;;;4843                             STEP_RIGHT_TURN_SIGNAL_UART_TEST_COMMUNICATION_TIME_OUT,
;;;4844                             1,
;;;4845                             ACTION_MODE_ADD_TO_QUEUE);
;;;4846               break;
;;;4847   
;;;4848           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_OPEN:      // 仪表打开远光灯成功
;;;4849               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;4850               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4851   
;;;4852               // 打开VCC测试引脚
;;;4853               RIGHT_VCC_TEST_EN_ON();
000004  4eaa              LDR      r6,|L32.688|
000006  4dab              LDR      r5,|L32.692|
000008  8840              LDRH     r0,[r0,#2]            ;4812  ; stateCB
00000a  2834              CMP      r0,#0x34              ;4812
00000c  d058              BEQ      |L32.192|
00000e  dc19              BGT      |L32.68|
000010  2800              CMP      r0,#0                 ;4812
000012  d016              BEQ      |L32.66|
000014  2831              CMP      r0,#0x31              ;4812
000016  d036              BEQ      |L32.134|
000018  2832              CMP      r0,#0x32              ;4812
00001a  d012              BEQ      |L32.66|
00001c  2833              CMP      r0,#0x33              ;4812
00001e  d110              BNE      |L32.66|
000020  2032              MOVS     r0,#0x32              ;4836
000022  f7fffffe          BL       STATE_SwitchStep
000026  2102              MOVS     r1,#2                 ;4837
000028  2088              MOVS     r0,#0x88              ;4837
00002a  f7fffffe          BL       UART_PROTOCOL_XM_SendCmdParamAck
00002e  2001              MOVS     r0,#1                 ;4840
000030  9000              STR      r0,[sp,#0]            ;4840
000032  9001              STR      r0,[sp,#4]            ;4840
000034  233a              MOVS     r3,#0x3a              ;4840
000036  4aa0              LDR      r2,|L32.696|
000038  f2417170          MOV      r1,#0x1770            ;4840
00003c  2008              MOVS     r0,#8                 ;4840
00003e  f7fffffe          BL       TIMER_AddTask
                  |L32.66|
;;;4854   
;;;4855               // 通知万用表测VCC
;;;4856               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4857               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4858   
;;;4859               Clear_All_Lines();
;;;4860               Display_Centered(0, "XM RIGHT SIGNAL");
;;;4861               Display_Centered(1, "AVO METER");
;;;4862               Display_Centered(2, "Measurement");
;;;4863               break;
;;;4864   
;;;4865           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_CHECK_VOLTAGE_VALUE: // 检查电压值步骤
;;;4866               STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;4867               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4868   
;;;4869               // 比对万用表返回的数值
;;;4870               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
;;;4871               {
;;;4872                   Clear_All_Lines();
;;;4873                   Display_Centered(0, "XM RIGHT SIGNAL");
;;;4874                   Display_Centered(1, "VCC");
;;;4875                   Display_Centered(2, "Test Pass");
;;;4876                   vccVlaue = measure.result;
;;;4877                   
;;;4878                   // 打开GND测试引脚
;;;4879                   RIGHT_VCC_TEST_EN_ON();
;;;4880                   RIGHT_VCC_EN_ON();
;;;4881                   
;;;4882                   // 通知万用表测VCC
;;;4883                   AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4884                   Clear_All_Lines();
;;;4885                   Display_Centered(0, "XM RIGHT SIGNAL");
;;;4886                   Display_Centered(1, "AVO METER");
;;;4887                   Display_Centered(2, "Measurement");
;;;4888               }
;;;4889               // 比对失败
;;;4890               else
;;;4891               {
;;;4892       #if DEBUG_ENABLE
;;;4893                   Clear_All_Lines();
;;;4894                   Display_Centered(0, "XM VCC Abnormal");
;;;4895                   Display_YX_Format(1, 0, "%f", measure.result);
;;;4896                   Display_YX_Format(2, 0, "%d", dut_info.voltageMin);
;;;4897                   Display_YX_Format(3, 0, "%d", dut_info.voltageMax);
;;;4898       #endif
;;;4899                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4900                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4901               }
;;;4902               break;
;;;4903   
;;;4904           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_CHECK_GND_VALUE: // 比对GND
;;;4905   //            STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;4906   //            TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4907   //                gndVlaue1 = measure.result;
;;;4908   
;;;4909   //                // 打开GND测试引脚
;;;4910   //                RIGHT_VCC_TEST_EN_ON();
;;;4911   //                RIGHT_VCC_EN_ON();
;;;4912   //                
;;;4913   //                // 通知万用表测VCC
;;;4914   //                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4915               // 小于3V则GND导通测试通过
;;;4916               STATE_SwitchStep(STEP_HBEAM_UART_TEST_WAIT_RESPONSE);
;;;4917               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4918               
;;;4919               if (3000 > measure.result)
;;;4920               {
;;;4921                   // 关闭左转向灯
;;;4922                   UART_PROTOCOL_XM_SendCmdParamAck(UART_PROTOCOL_XM_CMD_TEST_TURN_LIGHT,0);
;;;4923                   Clear_All_Lines();
;;;4924                   Display_Centered(0, "XM LEFT SIGNAL");
;;;4925                   Display_Centered(1, "GND");
;;;4926                   Display_Centered(2, "Test Pass");
;;;4927               }
;;;4928               else
;;;4929               {
;;;4930       #if DEBUG_ENABLE
;;;4931                   Clear_All_Lines();
;;;4932                   Display_Centered(0, "XM LEFT SIGNAL");
;;;4933                   Display_Centered(1, "GND Abnormal");
;;;4934                   Display_YX_Format(2, 0, "%f", measure.result);
;;;4935       #endif
;;;4936                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4937                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4938               }
;;;4939               break;
;;;4940   
;;;4941   //        case STEP_RIGHT_TURN_SIGNAL_UART_TEST_CHECK_GND_VALUE2: // 比对GND
;;;4942   //            STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;4943   //            TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4944   //                gndVlaue2 = measure.result;
;;;4945   
;;;4946   //                // 打开GND测试引脚
;;;4947   //                RIGHT_VCC_TEST_EN_ON();
;;;4948   //                RIGHT_VCC_EN_ON();
;;;4949   //                
;;;4950   //                // 通知万用表测VCC
;;;4951   //                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4952   //            break;
;;;4953   //            
;;;4954   //        case STEP_RIGHT_TURN_SIGNAL_UART_TEST_CHECK_GND_VALUE3: // 比对GND
;;;4955   //            STATE_SwitchStep(STEP_RIGHT_TURN_SIGNAL_UART_TEST_WAIT_RESPONSE);
;;;4956   //            TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4957   //            gndVlaue3 = measure.result;
;;;4958   
;;;4959   //            // 小于3V则GND导通测试通过                     
;;;4960   //            if ((abs(gndVlaue2 - gndVlaue1) > 2000) || (abs(gndVlaue2 - vccVlaue) > 2000) || (abs(gndVlaue1 - vccVlaue) > 2000)\
;;;4961   //            || (abs(gndVlaue3 - vccVlaue) > 2000) || (abs(gndVlaue3 - gndVlaue1) > 2000) || (abs(gndVlaue3 - gndVlaue2) > 2000))
;;;4962   //            {
;;;4963   //                // 关闭右转向灯
;;;4964   //                UART_PROTOCOL_XM_SendCmdParamAck(UART_PROTOCOL_XM_CMD_TEST_TURN_LIGHT, 0);
;;;4965   //                Clear_All_Lines();
;;;4966   //                Display_Centered(0, "XM RIGHT SIGNAL");
;;;4967   //                Display_Centered(1, "GND");
;;;4968   //                Display_Centered(2, "Test Pass");
;;;4969   //            }
;;;4970   //            else
;;;4971   //            {
;;;4972   //    #if DEBUG_ENABLE
;;;4973   //                Clear_All_Lines();
;;;4974   //                Display_Centered(0, "XM RIGHT SIGNAL");
;;;4975   //                Display_Centered(1, "GND Abnormal");
;;;4976   //                Display_YX_Format(2, 0, "%f", measure.result);
;;;4977   //    #endif
;;;4978   //                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4979   //                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4980   //            }
;;;4981   //            break;           
;;;4982               
;;;4983           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_COMPLETE: // 测试完成
;;;4984               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4985               Clear_All_Lines();
;;;4986               Display_Centered(0, "XM RIGHT SIGNAL");
;;;4987               Display_Centered(1, "Test Pass");
;;;4988   
;;;4989               // 上报测试成功
;;;4990               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;4991               AVO_PIN_Reset();
;;;4992               STATE_EnterState(STATE_STANDBY);
;;;4993               break;
;;;4994   
;;;4995           // 超时处理
;;;4996           case STEP_RIGHT_TURN_SIGNAL_UART_TEST_COMMUNICATION_TIME_OUT:
;;;4997               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4998               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4999               AVO_PIN_Reset();
;;;5000               Clear_All_Lines();
;;;5001               Display_Centered(0, "XM RIGHT SIGNAL");
;;;5002               Display_Centered(1, "Test Timeout");
;;;5003               STATE_EnterState(STATE_STANDBY);
;;;5004               break;
;;;5005   
;;;5006           default:
;;;5007               break;
;;;5008       }
;;;5009   }
000042  bd7c              POP      {r2-r6,pc}
                  |L32.68|
000044  4c9d              LDR      r4,|L32.700|
000046  2835              CMP      r0,#0x35              ;4812
000048  d062              BEQ      |L32.272|
00004a  2836              CMP      r0,#0x36              ;4812
00004c  d07d              BEQ      |L32.330|
00004e  2839              CMP      r0,#0x39              ;4812
000050  d07c              BEQ      |L32.332|
000052  283a              CMP      r0,#0x3a              ;4812
000054  d1f5              BNE      |L32.66|
000056  2008              MOVS     r0,#8                 ;4997
000058  f7fffffe          BL       TIMER_KillTask
00005c  2100              MOVS     r1,#0                 ;4998
00005e  200b              MOVS     r0,#0xb               ;4998
000060  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000064  f7fffffe          BL       AVO_PIN_Reset
000068  f7fffffe          BL       Clear_All_Lines
00006c  a194              ADR      r1,|L32.704|
00006e  2000              MOVS     r0,#0                 ;5001
000070  f7fffffe          BL       Display_Centered
000074  a196              ADR      r1,|L32.720|
000076  2001              MOVS     r0,#1                 ;5002
000078  f7fffffe          BL       Display_Centered
00007c  e8bd407c          POP      {r2-r6,lr}            ;5003
000080  2001              MOVS     r0,#1                 ;5003
000082  f7ffbffe          B.W      STATE_EnterState
                  |L32.134|
000086  2033              MOVS     r0,#0x33              ;4818
000088  f7fffffe          BL       STATE_SwitchStep
00008c  6a28              LDR      r0,[r5,#0x20]         ;4819  ; dut_info
00008e  f7fffffe          BL       UART_DRIVE_InitSelect
000092  f7fffffe          BL       DUT_PROTOCOL_Init
000096  f7fffffe          BL       UART_PROTOCOL_XM_Init
00009a  4991              LDR      r1,|L32.736|
00009c  2000              MOVS     r0,#0                 ;4822
00009e  7008              STRB     r0,[r1,#0]            ;4822
0000a0  4990              LDR      r1,|L32.740|
0000a2  7008              STRB     r0,[r1,#0]            ;4823
0000a4  f7fffffe          BL       Clear_All_Lines
0000a8  a185              ADR      r1,|L32.704|
0000aa  2000              MOVS     r0,#0                 ;4825
0000ac  f7fffffe          BL       Display_Centered
0000b0  a18d              ADR      r1,|L32.744|
0000b2  2001              MOVS     r0,#1                 ;4826
0000b4  f7fffffe          BL       Display_Centered
0000b8  e8bd407c          POP      {r2-r6,lr}            ;4829
0000bc  f7ffbffe          B.W      AVO_PIN_Reset
                  |L32.192|
0000c0  2032              MOVS     r0,#0x32              ;4849
0000c2  f7fffffe          BL       STATE_SwitchStep
0000c6  2008              MOVS     r0,#8                 ;4850
0000c8  f7fffffe          BL       TIMER_ResetTimer
0000cc  2310              MOVS     r3,#0x10              ;4853
0000ce  2203              MOVS     r2,#3                 ;4853
0000d0  4619              MOV      r1,r3                 ;4853
0000d2  4630              MOV      r0,r6                 ;4853
0000d4  f7fffffe          BL       gpio_init
0000d8  2110              MOVS     r1,#0x10              ;4853
0000da  4630              MOV      r0,r6                 ;4853
0000dc  f7fffffe          BL       gpio_bit_set
0000e0  2100              MOVS     r1,#0                 ;4856
0000e2  2001              MOVS     r0,#1                 ;4856
0000e4  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000e8  2100              MOVS     r1,#0                 ;4857
0000ea  2001              MOVS     r0,#1                 ;4857
0000ec  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
0000f0  f7fffffe          BL       Clear_All_Lines
0000f4  a172              ADR      r1,|L32.704|
0000f6  2000              MOVS     r0,#0                 ;4860
0000f8  f7fffffe          BL       Display_Centered
0000fc  a17c              ADR      r1,|L32.752|
0000fe  2001              MOVS     r0,#1                 ;4861
000100  f7fffffe          BL       Display_Centered
000104  e8bd407c          POP      {r2-r6,lr}            ;4862
000108  a17c              ADR      r1,|L32.764|
00010a  2002              MOVS     r0,#2                 ;4862
00010c  f7ffbffe          B.W      Display_Centered
                  |L32.272|
000110  2032              MOVS     r0,#0x32              ;4866
000112  f7fffffe          BL       STATE_SwitchStep
000116  2008              MOVS     r0,#8                 ;4867
000118  f7fffffe          BL       TIMER_ResetTimer
00011c  6ba8              LDR      r0,[r5,#0x38]         ;4870  ; dut_info
00011e  f7fffffe          BL       __aeabi_ui2f
000122  6821              LDR      r1,[r4,#0]            ;4870  ; measure
000124  f7fffffe          BL       __aeabi_cfcmple
000128  d247              BCS      |L32.442|
00012a  6b68              LDR      r0,[r5,#0x34]         ;4870  ; dut_info
00012c  f7fffffe          BL       __aeabi_ui2f
000130  6821              LDR      r1,[r4,#0]            ;4870  ; measure
000132  f7fffffe          BL       __aeabi_cfrcmple
000136  d240              BCS      |L32.442|
000138  f7fffffe          BL       Clear_All_Lines
00013c  a160              ADR      r1,|L32.704|
00013e  2000              MOVS     r0,#0                 ;4873
000140  f7fffffe          BL       Display_Centered
000144  a170              ADR      r1,|L32.776|
000146  2001              MOVS     r0,#1                 ;4874
000148  e001              B        |L32.334|
                  |L32.330|
00014a  e05b              B        |L32.516|
                  |L32.332|
00014c  e095              B        |L32.634|
                  |L32.334|
00014e  f7fffffe          BL       Display_Centered
000152  a16e              ADR      r1,|L32.780|
000154  2002              MOVS     r0,#2                 ;4875
000156  f7fffffe          BL       Display_Centered
00015a  6820              LDR      r0,[r4,#0]            ;4876  ; measure
00015c  f7fffffe          BL       __aeabi_f2uiz
000160  4952              LDR      r1,|L32.684|
000162  1f89              SUBS     r1,r1,#6              ;4876
000164  8088              STRH     r0,[r1,#4]            ;4876
000166  2310              MOVS     r3,#0x10              ;4879
000168  2203              MOVS     r2,#3                 ;4879
00016a  4619              MOV      r1,r3                 ;4879
00016c  4630              MOV      r0,r6                 ;4879
00016e  f7fffffe          BL       gpio_init
000172  2110              MOVS     r1,#0x10              ;4879
000174  4630              MOV      r0,r6                 ;4879
000176  f7fffffe          BL       gpio_bit_set
00017a  f44f7480          MOV      r4,#0x100             ;4880
00017e  4623              MOV      r3,r4                 ;4880
000180  2203              MOVS     r2,#3                 ;4880
000182  2110              MOVS     r1,#0x10              ;4880
000184  4630              MOV      r0,r6                 ;4880
000186  f7fffffe          BL       gpio_init
00018a  4621              MOV      r1,r4                 ;4880
00018c  4630              MOV      r0,r6                 ;4880
00018e  f7fffffe          BL       gpio_bit_set
000192  2100              MOVS     r1,#0                 ;4883
000194  2001              MOVS     r0,#1                 ;4883
000196  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00019a  f7fffffe          BL       Clear_All_Lines
00019e  a148              ADR      r1,|L32.704|
0001a0  2000              MOVS     r0,#0                 ;4885
0001a2  f7fffffe          BL       Display_Centered
0001a6  a152              ADR      r1,|L32.752|
0001a8  2001              MOVS     r0,#1                 ;4886
0001aa  f7fffffe          BL       Display_Centered
0001ae  e8bd407c          POP      {r2-r6,lr}            ;4887
0001b2  a152              ADR      r1,|L32.764|
0001b4  2002              MOVS     r0,#2                 ;4887
0001b6  f7ffbffe          B.W      Display_Centered
                  |L32.442|
0001ba  f7fffffe          BL       Clear_All_Lines
0001be  a156              ADR      r1,|L32.792|
0001c0  2000              MOVS     r0,#0                 ;4894
0001c2  f7fffffe          BL       Display_Centered
0001c6  6820              LDR      r0,[r4,#0]            ;4895  ; measure
0001c8  f7fffffe          BL       __aeabi_f2d
0001cc  e9cd0100          STRD     r0,r1,[sp,#0]         ;4895
0001d0  a255              ADR      r2,|L32.808|
0001d2  2100              MOVS     r1,#0                 ;4895
0001d4  2001              MOVS     r0,#1                 ;4895
0001d6  f7fffffe          BL       Display_YX_Format
0001da  a254              ADR      r2,|L32.812|
0001dc  2100              MOVS     r1,#0                 ;4896
0001de  2002              MOVS     r0,#2                 ;4896
0001e0  6bab              LDR      r3,[r5,#0x38]         ;4896  ; dut_info
0001e2  f7fffffe          BL       Display_YX_Format
0001e6  a251              ADR      r2,|L32.812|
0001e8  2100              MOVS     r1,#0                 ;4897
0001ea  2003              MOVS     r0,#3                 ;4897
0001ec  6b6b              LDR      r3,[r5,#0x34]         ;4897  ; dut_info
0001ee  f7fffffe          BL       Display_YX_Format
0001f2  2100              MOVS     r1,#0                 ;4899
0001f4  200b              MOVS     r0,#0xb               ;4899
0001f6  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001fa  e8bd407c          POP      {r2-r6,lr}            ;4900
0001fe  2008              MOVS     r0,#8                 ;4900
000200  f7ffbffe          B.W      TIMER_KillTask
                  |L32.516|
000204  2021              MOVS     r0,#0x21              ;4916
000206  f7fffffe          BL       STATE_SwitchStep
00020a  2008              MOVS     r0,#8                 ;4917
00020c  f7fffffe          BL       TIMER_ResetTimer
000210  4947              LDR      r1,|L32.816|
000212  6820              LDR      r0,[r4,#0]            ;4919  ; measure
000214  4288              CMP      r0,r1                 ;4919
000216  da13              BGE      |L32.576|
000218  2100              MOVS     r1,#0                 ;4922
00021a  2088              MOVS     r0,#0x88              ;4922
00021c  f7fffffe          BL       UART_PROTOCOL_XM_SendCmdParamAck
000220  f7fffffe          BL       Clear_All_Lines
000224  a143              ADR      r1,|L32.820|
000226  2000              MOVS     r0,#0                 ;4924
000228  f7fffffe          BL       Display_Centered
00022c  a145              ADR      r1,|L32.836|
00022e  2001              MOVS     r0,#1                 ;4925
000230  f7fffffe          BL       Display_Centered
000234  e8bd407c          POP      {r2-r6,lr}            ;4926
000238  a134              ADR      r1,|L32.780|
00023a  2002              MOVS     r0,#2                 ;4926
00023c  f7ffbffe          B.W      Display_Centered
                  |L32.576|
000240  f7fffffe          BL       Clear_All_Lines
000244  a13b              ADR      r1,|L32.820|
000246  2000              MOVS     r0,#0                 ;4932
000248  f7fffffe          BL       Display_Centered
00024c  a13e              ADR      r1,|L32.840|
00024e  2001              MOVS     r0,#1                 ;4933
000250  f7fffffe          BL       Display_Centered
000254  6820              LDR      r0,[r4,#0]            ;4934  ; measure
000256  f7fffffe          BL       __aeabi_f2d
00025a  e9cd0100          STRD     r0,r1,[sp,#0]         ;4934
00025e  a232              ADR      r2,|L32.808|
000260  2100              MOVS     r1,#0                 ;4934
000262  2002              MOVS     r0,#2                 ;4934
000264  f7fffffe          BL       Display_YX_Format
000268  2100              MOVS     r1,#0                 ;4936
00026a  200b              MOVS     r0,#0xb               ;4936
00026c  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000270  e8bd407c          POP      {r2-r6,lr}            ;4937
000274  2008              MOVS     r0,#8                 ;4937
000276  f7ffbffe          B.W      TIMER_KillTask
                  |L32.634|
00027a  2008              MOVS     r0,#8                 ;4984
00027c  f7fffffe          BL       TIMER_KillTask
000280  f7fffffe          BL       Clear_All_Lines
000284  a10e              ADR      r1,|L32.704|
000286  2000              MOVS     r0,#0                 ;4986
000288  f7fffffe          BL       Display_Centered
00028c  a11f              ADR      r1,|L32.780|
00028e  2001              MOVS     r0,#1                 ;4987
000290  f7fffffe          BL       Display_Centered
000294  2101              MOVS     r1,#1                 ;4990
000296  200b              MOVS     r0,#0xb               ;4990
000298  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00029c  f7fffffe          BL       AVO_PIN_Reset
0002a0  e8bd407c          POP      {r2-r6,lr}            ;4992
0002a4  2001              MOVS     r0,#1                 ;4992
0002a6  f7ffbffe          B.W      STATE_EnterState
;;;5010   
                          ENDP

0002aa  0000              DCW      0x0000
                  |L32.684|
                          DCD      ||.data||+0x6
                  |L32.688|
                          DCD      0x40011400
                  |L32.692|
                          DCD      dut_info
                  |L32.696|
                          DCD      STATE_SwitchStep
                  |L32.700|
                          DCD      measure
                  |L32.704|
0002c0  584d2052          DCB      "XM RIGHT SIGNAL",0
0002c4  49474854
0002c8  20534947
0002cc  4e414c00
                  |L32.720|
0002d0  54657374          DCB      "Test Timeout",0
0002d4  2054696d
0002d8  656f7574
0002dc  00      
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0
                  |L32.736|
                          DCD      light_cnt
                  |L32.740|
                          DCD      headlight_cnt
                  |L32.744|
0002e8  54657374          DCB      "Testing",0
0002ec  696e6700
                  |L32.752|
0002f0  41564f20          DCB      "AVO METER",0
0002f4  4d455445
0002f8  5200    
0002fa  00                DCB      0
0002fb  00                DCB      0
                  |L32.764|
0002fc  4d656173          DCB      "Measurement",0
000300  7572656d
000304  656e7400
                  |L32.776|
000308  56434300          DCB      "VCC",0
                  |L32.780|
00030c  54657374          DCB      "Test Pass",0
000310  20506173
000314  7300    
000316  00                DCB      0
000317  00                DCB      0
                  |L32.792|
000318  584d2056          DCB      "XM VCC Abnormal",0
00031c  43432041
000320  626e6f72
000324  6d616c00
                  |L32.808|
000328  256600            DCB      "%f",0
00032b  00                DCB      0
                  |L32.812|
00032c  256400            DCB      "%d",0
00032f  00                DCB      0
                  |L32.816|
                          DCD      0x453b8000
                  |L32.820|
000334  584d204c          DCB      "XM LEFT SIGNAL",0
000338  45465420
00033c  5349474e
000340  414c00  
000343  00                DCB      0
                  |L32.836|
000344  474e4400          DCB      "GND",0
                  |L32.840|
000348  474e4420          DCB      "GND Abnormal",0
00034c  41626e6f
000350  726d616c
000354  00      
000355  00                DCB      0
000356  00                DCB      0
000357  00                DCB      0

                          AREA ||i.STEP_Process_XM_ThrottleUartTest||, CODE, READONLY, ALIGN=2

                  STEP_Process_XM_ThrottleUartTest PROC
;;;4224   // 油门测试
;;;4225   void STEP_Process_XM_ThrottleUartTest(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;4226   {
;;;4227       switch (stateCB.step)
000002  48c0              LDR      r0,|L33.772|
;;;4228       {
;;;4229           case STEP_NULL: // 空步骤
;;;4230               break;
;;;4231   
;;;4232           case STEP_THROTTLE_UART_TEST_ENTRY: // 入口步骤
;;;4233               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_VCC);
;;;4234               UART_DRIVE_InitSelect(dut_info.uart_baudRate);
000004  4cc0              LDR      r4,|L33.776|
000006  8840              LDRH     r0,[r0,#2]            ;4227  ; stateCB
000008  283f              CMP      r0,#0x3f              ;4227
00000a  d07d              BEQ      |L33.264|
00000c  dc51              BGT      |L33.178|
00000e  283c              CMP      r0,#0x3c              ;4227
000010  d07b              BEQ      |L33.266|
000012  dc1b              BGT      |L33.76|
000014  2800              CMP      r0,#0                 ;4227
000016  d078              BEQ      |L33.266|
000018  283b              CMP      r0,#0x3b              ;4227
00001a  d176              BNE      |L33.266|
00001c  203d              MOVS     r0,#0x3d              ;4233
00001e  f7fffffe          BL       STATE_SwitchStep
000022  6a20              LDR      r0,[r4,#0x20]  ; dut_info
000024  f7fffffe          BL       UART_DRIVE_InitSelect
;;;4235               DUT_PROTOCOL_Init();
000028  f7fffffe          BL       DUT_PROTOCOL_Init
;;;4236               UART_PROTOCOL_XM_Init();
00002c  f7fffffe          BL       UART_PROTOCOL_XM_Init
;;;4237               Clear_All_Lines();
000030  f7fffffe          BL       Clear_All_Lines
;;;4238               Display_Centered(0, "THROTTLE");
000034  a1b5              ADR      r1,|L33.780|
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       Display_Centered
;;;4239               Display_Centered(1, "Testing");
00003c  a1b6              ADR      r1,|L33.792|
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       Display_Centered
;;;4240   
;;;4241               // 测试引脚复位
;;;4242               AVO_PIN_Reset();
000044  e8bd407c          POP      {r2-r6,lr}
000048  f7ffbffe          B.W      AVO_PIN_Reset
                  |L33.76|
00004c  283d              CMP      r0,#0x3d              ;4227
00004e  d053              BEQ      |L33.248|
;;;4243               break;
;;;4244   
;;;4245           case STEP_THROTTLE_UART_TEST_WAIT_RESPONSE: // 等待仪表或万用表回应
;;;4246               break;
;;;4247   
;;;4248           case STEP_THROTTLE_UART_TEST_VCC: // 通知万用表测VCC
;;;4249               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_WAIT_RESPONSE);
;;;4250   
;;;4251               // 打开VCC测试引脚
;;;4252               THROTTLE_VCC_TEST_EN(TRUE);
;;;4253   
;;;4254               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4255               AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
;;;4256               Clear_All_Lines();
;;;4257               Display_Centered(0, "THROTTLE");
;;;4258               Display_Centered(1, "AVO METER");
;;;4259               Display_Centered(2, "Measurement");
;;;4260   
;;;4261               // 添加超时
;;;4262               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
;;;4263                             4000,
;;;4264                             STATE_SwitchStep,
;;;4265                             STEP_THROTTLE_UART_TEST_COMMUNICATION_TIME_OUT,
;;;4266                             1,
;;;4267                             ACTION_MODE_ADD_TO_QUEUE);
;;;4268               break;
;;;4269   
;;;4270           // 比对VCC
;;;4271           case STEP_THROTTLE_UART_TEST_CHECK_VOLTAGE_VALUE:
;;;4272               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_WAIT_RESPONSE);
;;;4273               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4274   
;;;4275               if ((measure.result > dut_info.voltageMin) && (measure.result < dut_info.voltageMax))
000050  4db3              LDR      r5,|L33.800|
000052  283e              CMP      r0,#0x3e              ;4227
000054  d179              BNE      |L33.330|
000056  203c              MOVS     r0,#0x3c              ;4272
000058  f7fffffe          BL       STATE_SwitchStep
00005c  2008              MOVS     r0,#8                 ;4273
00005e  f7fffffe          BL       TIMER_ResetTimer
000062  6ba0              LDR      r0,[r4,#0x38]  ; dut_info
000064  f7fffffe          BL       __aeabi_ui2f
000068  6829              LDR      r1,[r5,#0]  ; measure
00006a  f7fffffe          BL       __aeabi_cfcmple
00006e  d26d              BCS      |L33.332|
000070  6b60              LDR      r0,[r4,#0x34]  ; dut_info
000072  f7fffffe          BL       __aeabi_ui2f
000076  6829              LDR      r1,[r5,#0]  ; measure
000078  f7fffffe          BL       __aeabi_cfrcmple
00007c  d266              BCS      |L33.332|
;;;4276               {
;;;4277                   // 调整DAC输出,单位mv
;;;4278                   DAC0_output(1200);
00007e  f44f6096          MOV      r0,#0x4b0
000082  f7fffffe          BL       DAC0_output
;;;4279                   Delayms(50);
000086  2032              MOVS     r0,#0x32
000088  f7fffffe          BL       Delayms
;;;4280                   Clear_All_Lines();
00008c  f7fffffe          BL       Clear_All_Lines
;;;4281                   Display_Centered(0, "THROTTLE");
000090  a19e              ADR      r1,|L33.780|
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       Display_Centered
;;;4282                   Display_Centered(1, "VCC");
000098  a1a2              ADR      r1,|L33.804|
00009a  2001              MOVS     r0,#1
00009c  f7fffffe          BL       Display_Centered
;;;4283                   Display_Centered(2, "Normal");
0000a0  a1a1              ADR      r1,|L33.808|
0000a2  2002              MOVS     r0,#2
0000a4  f7fffffe          BL       Display_Centered
;;;4284   
;;;4285                   // 获取油门AD值
;;;4286                   UART_PROTOCOL_XM_SendCmdAck(UART_PROTOCOL_XM_CMD_TEST_Throttle_Break);
0000a8  e8bd407c          POP      {r2-r6,lr}
0000ac  2087              MOVS     r0,#0x87
0000ae  f7ffbffe          B.W      UART_PROTOCOL_XM_SendCmdAck
                  |L33.178|
0000b2  2840              CMP      r0,#0x40              ;4227
0000b4  d07e              BEQ      |L33.436|
0000b6  2841              CMP      r0,#0x41              ;4227
0000b8  d07d              BEQ      |L33.438|
0000ba  2842              CMP      r0,#0x42              ;4227
0000bc  d07c              BEQ      |L33.440|
0000be  2843              CMP      r0,#0x43              ;4227
0000c0  d143              BNE      |L33.330|
;;;4287               }
;;;4288               // VCC不正常，则上报
;;;4289               else
;;;4290               {
;;;4291                   Clear_All_Lines();
;;;4292                   Display_Centered(0, "THROTTLE");
;;;4293                   Display_Centered(1, "VCC");
;;;4294                   Display_Centered(2, "Abnormal");
;;;4295                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4296                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4297                   STATE_EnterState(STATE_STANDBY);
;;;4298               }
;;;4299               break;
;;;4300   
;;;4301           // 在这进行判断数值是否正常，第一次
;;;4302           case STEP_THROTTLE_UART_TEST_CHECK_DAC1_VALUE:
;;;4303               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_WAIT_RESPONSE);
;;;4304               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4305   
;;;4306               // 处理DAC1数值检查逻辑
;;;4307               if (0 == dut_info.throttleAd )
;;;4308               {
;;;4309                   // 调整DAC输出,单位mv
;;;4310                   DAC0_output(2100);
;;;4311                   Delayms(50);
;;;4312                   Clear_All_Lines();
;;;4313                   Display_Centered(0, "THROTTLE");
;;;4314                   Display_Centered(1, "Adjusting DAC");
;;;4315                   Display_Centered(2, "First");
;;;4316   
;;;4317                   // 获取油门AD值
;;;4318                   UART_PROTOCOL_XM_SendCmdAck(UART_PROTOCOL_XM_CMD_TEST_Throttle_Break);
;;;4319               }
;;;4320               else
;;;4321               {
;;;4322                   Clear_All_Lines();
;;;4323                   Display_Centered(0, "THROTTLE");
;;;4324                   Display_Centered(1, "SIG");
;;;4325                   Display_Centered(2, "Abnormal");
;;;4326                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4327                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4328                   STATE_EnterState(STATE_STANDBY);
;;;4329               }
;;;4330               break;
;;;4331   
;;;4332           // 在这进行判断数值是否正常，第二次
;;;4333           case STEP_THROTTLE_UART_TEST_CHECK_DAC3_VALUE:
;;;4334               STATE_SwitchStep(STEP_THROTTLE_UART_TEST_WAIT_RESPONSE);
;;;4335               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4336   
;;;4337               // 处理DAC5数值检查逻辑
;;;4338               if ((2 == dut_info.throttleAd )||(3 == dut_info.throttleAd))
;;;4339               {
;;;4340                   // 调整DAC输出,单位mv
;;;4341                   DAC0_output(4200);
;;;4342                   Delayms(50);
;;;4343                   Clear_All_Lines();
;;;4344                   Display_Centered(0, "THROTTLE");
;;;4345                   Display_Centered(1, "Adjusting DAC");
;;;4346                   Display_Centered(2, "Second");
;;;4347   
;;;4348                   // 获取油门AD值
;;;4349                   UART_PROTOCOL_XM_SendCmdAck(UART_PROTOCOL_XM_CMD_TEST_Throttle_Break);
;;;4350               }
;;;4351               else
;;;4352               {
;;;4353                   Clear_All_Lines();
;;;4354                   Display_Centered(0, "THROTTLE");
;;;4355                   Display_Centered(1, "SIG");
;;;4356                   Display_Centered(2, "Abnormal");
;;;4357                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4358                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4359                   STATE_EnterState(STATE_STANDBY);
;;;4360               }
;;;4361               break;
;;;4362   
;;;4363           // 在这进行判断数值是否正常，第三次
;;;4364           case STEP_THROTTLE_UART_TEST_CHECK_DAC5_VALUE:
;;;4365               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;4366   
;;;4367               // 处理DAC5数值检查逻辑
;;;4368               if (6 == dut_info.throttleAd )
;;;4369               {
;;;4370                   // 3次都正常则测试通过
;;;4371                   Clear_All_Lines();
;;;4372                   Display_Centered(0, "THROTTLE");
;;;4373                   Display_Centered(1, "Adjusting DAC");
;;;4374                   Display_Centered(2, "Third");
;;;4375                   STATE_SwitchStep(STEP_THROTTLE_UART_TEST_COMPLETE);
;;;4376               }
;;;4377               else
;;;4378               {
;;;4379                   STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
;;;4380                   TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4381                   STATE_EnterState(STATE_STANDBY);
;;;4382               }
;;;4383               break;
;;;4384   
;;;4385           // 油门测试完成步骤，关闭DAC输出调整为0，然后上报结果
;;;4386           case STEP_THROTTLE_UART_TEST_COMPLETE:
;;;4387               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;4388               AVO_PIN_Reset();
;;;4389               Clear_All_Lines();
;;;4390               Display_Centered(0, "THROTTLE");
;;;4391               Display_Centered(1, "Test Pass");
;;;4392               STATE_EnterState(STATE_STANDBY);
;;;4393               DAC0_output(0);
;;;4394               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, TRUE);
;;;4395               break;
;;;4396   
;;;4397           // 通信超时，给出油门测试函数，并且case上面的步骤
;;;4398           case STEP_THROTTLE_UART_TEST_COMMUNICATION_TIME_OUT:
;;;4399               DAC0_output(0);
0000c2  2000              MOVS     r0,#0
0000c4  f7fffffe          BL       DAC0_output
;;;4400               STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_MULTIPLE_TEST, FALSE);
0000c8  2100              MOVS     r1,#0
0000ca  200b              MOVS     r0,#0xb
0000cc  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
;;;4401               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0000d0  2008              MOVS     r0,#8
0000d2  f7fffffe          BL       TIMER_KillTask
;;;4402               AVO_PIN_Reset();
0000d6  f7fffffe          BL       AVO_PIN_Reset
;;;4403               Clear_All_Lines();
0000da  f7fffffe          BL       Clear_All_Lines
;;;4404               Display_Centered(0, "THROTTLE");
0000de  a18b              ADR      r1,|L33.780|
0000e0  2000              MOVS     r0,#0
0000e2  f7fffffe          BL       Display_Centered
;;;4405               Display_Centered(1, "Test Timeout");
0000e6  a192              ADR      r1,|L33.816|
0000e8  2001              MOVS     r0,#1
0000ea  f7fffffe          BL       Display_Centered
;;;4406               STATE_EnterState(STATE_STANDBY);
0000ee  e8bd407c          POP      {r2-r6,lr}
0000f2  2001              MOVS     r0,#1
0000f4  f7ffbffe          B.W      STATE_EnterState
                  |L33.248|
0000f8  203c              MOVS     r0,#0x3c              ;4249
0000fa  f7fffffe          BL       STATE_SwitchStep
0000fe  2001              MOVS     r0,#1                 ;4252
000100  f7fffffe          BL       THROTTLE_VCC_TEST_EN
000104  2100              MOVS     r1,#0                 ;4254
000106  e001              B        |L33.268|
                  |L33.264|
000108  e03a              B        |L33.384|
                  |L33.266|
00010a  e01e              B        |L33.330|
                  |L33.268|
00010c  2001              MOVS     r0,#1                 ;4254
00010e  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
000112  2100              MOVS     r1,#0                 ;4255
000114  2001              MOVS     r0,#1                 ;4255
000116  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
00011a  f7fffffe          BL       Clear_All_Lines
00011e  a17b              ADR      r1,|L33.780|
000120  2000              MOVS     r0,#0                 ;4257
000122  f7fffffe          BL       Display_Centered
000126  a186              ADR      r1,|L33.832|
000128  2001              MOVS     r0,#1                 ;4258
00012a  f7fffffe          BL       Display_Centered
00012e  a187              ADR      r1,|L33.844|
000130  2002              MOVS     r0,#2                 ;4259
000132  f7fffffe          BL       Display_Centered
000136  2001              MOVS     r0,#1                 ;4262
000138  9000              STR      r0,[sp,#0]            ;4262
00013a  9001              STR      r0,[sp,#4]            ;4262
00013c  2343              MOVS     r3,#0x43              ;4262
00013e  4a86              LDR      r2,|L33.856|
000140  f44f617a          MOV      r1,#0xfa0             ;4262
000144  2008              MOVS     r0,#8                 ;4262
000146  f7fffffe          BL       TIMER_AddTask
                  |L33.330|
;;;4407               break;
;;;4408   
;;;4409           default:
;;;4410               break;
;;;4411       }
;;;4412   }
00014a  bd7c              POP      {r2-r6,pc}
                  |L33.332|
00014c  f7fffffe          BL       Clear_All_Lines
000150  a16e              ADR      r1,|L33.780|
000152  2000              MOVS     r0,#0                 ;4292
000154  f7fffffe          BL       Display_Centered
000158  a172              ADR      r1,|L33.804|
00015a  2001              MOVS     r0,#1                 ;4293
00015c  f7fffffe          BL       Display_Centered
000160  a17e              ADR      r1,|L33.860|
000162  2002              MOVS     r0,#2                 ;4294
000164  f7fffffe          BL       Display_Centered
000168  2100              MOVS     r1,#0                 ;4295
00016a  200b              MOVS     r0,#0xb               ;4295
00016c  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000170  2008              MOVS     r0,#8                 ;4296
000172  f7fffffe          BL       TIMER_KillTask
000176  e8bd407c          POP      {r2-r6,lr}            ;4297
00017a  2001              MOVS     r0,#1                 ;4297
00017c  f7ffbffe          B.W      STATE_EnterState
                  |L33.384|
000180  203c              MOVS     r0,#0x3c              ;4303
000182  f7fffffe          BL       STATE_SwitchStep
000186  2008              MOVS     r0,#8                 ;4304
000188  f7fffffe          BL       TIMER_ResetTimer
00018c  f8b40040          LDRH     r0,[r4,#0x40]         ;4307  ; dut_info
000190  b1e8              CBZ      r0,|L33.462|
000192  f7fffffe          BL       Clear_All_Lines
000196  a15d              ADR      r1,|L33.780|
000198  2000              MOVS     r0,#0                 ;4323
00019a  f7fffffe          BL       Display_Centered
00019e  a172              ADR      r1,|L33.872|
0001a0  2001              MOVS     r0,#1                 ;4324
0001a2  f7fffffe          BL       Display_Centered
0001a6  a16d              ADR      r1,|L33.860|
0001a8  2002              MOVS     r0,#2                 ;4325
0001aa  f7fffffe          BL       Display_Centered
0001ae  2100              MOVS     r1,#0                 ;4326
0001b0  200b              MOVS     r0,#0xb               ;4326
0001b2  e002              B        |L33.442|
                  |L33.436|
0001b4  e025              B        |L33.514|
                  |L33.438|
0001b6  e064              B        |L33.642|
                  |L33.440|
0001b8  e089              B        |L33.718|
                  |L33.442|
0001ba  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0001be  2008              MOVS     r0,#8                 ;4327
0001c0  f7fffffe          BL       TIMER_KillTask
0001c4  e8bd407c          POP      {r2-r6,lr}            ;4328
0001c8  2001              MOVS     r0,#1                 ;4328
0001ca  f7ffbffe          B.W      STATE_EnterState
                  |L33.462|
0001ce  f6400034          MOV      r0,#0x834             ;4310
0001d2  f7fffffe          BL       DAC0_output
0001d6  2032              MOVS     r0,#0x32              ;4311
0001d8  f7fffffe          BL       Delayms
0001dc  f7fffffe          BL       Clear_All_Lines
0001e0  a14a              ADR      r1,|L33.780|
0001e2  2000              MOVS     r0,#0                 ;4313
0001e4  f7fffffe          BL       Display_Centered
0001e8  a160              ADR      r1,|L33.876|
0001ea  2001              MOVS     r0,#1                 ;4314
0001ec  f7fffffe          BL       Display_Centered
0001f0  a162              ADR      r1,|L33.892|
0001f2  2002              MOVS     r0,#2                 ;4315
0001f4  f7fffffe          BL       Display_Centered
0001f8  e8bd407c          POP      {r2-r6,lr}            ;4318
0001fc  2087              MOVS     r0,#0x87              ;4318
0001fe  f7ffbffe          B.W      UART_PROTOCOL_XM_SendCmdAck
                  |L33.514|
000202  203c              MOVS     r0,#0x3c              ;4334
000204  f7fffffe          BL       STATE_SwitchStep
000208  2008              MOVS     r0,#8                 ;4335
00020a  f7fffffe          BL       TIMER_ResetTimer
00020e  f8b40040          LDRH     r0,[r4,#0x40]         ;4338  ; dut_info
000212  2802              CMP      r0,#2                 ;4338
000214  d01b              BEQ      |L33.590|
000216  2803              CMP      r0,#3                 ;4338
000218  d019              BEQ      |L33.590|
00021a  f7fffffe          BL       Clear_All_Lines
00021e  a13b              ADR      r1,|L33.780|
000220  2000              MOVS     r0,#0                 ;4354
000222  f7fffffe          BL       Display_Centered
000226  a150              ADR      r1,|L33.872|
000228  2001              MOVS     r0,#1                 ;4355
00022a  f7fffffe          BL       Display_Centered
00022e  a14b              ADR      r1,|L33.860|
000230  2002              MOVS     r0,#2                 ;4356
000232  f7fffffe          BL       Display_Centered
000236  2100              MOVS     r1,#0                 ;4357
000238  200b              MOVS     r0,#0xb               ;4357
00023a  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
00023e  2008              MOVS     r0,#8                 ;4358
000240  f7fffffe          BL       TIMER_KillTask
000244  e8bd407c          POP      {r2-r6,lr}            ;4359
000248  2001              MOVS     r0,#1                 ;4359
00024a  f7ffbffe          B.W      STATE_EnterState
                  |L33.590|
00024e  f2410068          MOV      r0,#0x1068            ;4341
000252  f7fffffe          BL       DAC0_output
000256  2032              MOVS     r0,#0x32              ;4342
000258  f7fffffe          BL       Delayms
00025c  f7fffffe          BL       Clear_All_Lines
000260  a12a              ADR      r1,|L33.780|
000262  2000              MOVS     r0,#0                 ;4344
000264  f7fffffe          BL       Display_Centered
000268  a140              ADR      r1,|L33.876|
00026a  2001              MOVS     r0,#1                 ;4345
00026c  f7fffffe          BL       Display_Centered
000270  a144              ADR      r1,|L33.900|
000272  2002              MOVS     r0,#2                 ;4346
000274  f7fffffe          BL       Display_Centered
000278  e8bd407c          POP      {r2-r6,lr}            ;4349
00027c  2087              MOVS     r0,#0x87              ;4349
00027e  f7ffbffe          B.W      UART_PROTOCOL_XM_SendCmdAck
                  |L33.642|
000282  2008              MOVS     r0,#8                 ;4365
000284  f7fffffe          BL       TIMER_ResetTimer
000288  f8b40040          LDRH     r0,[r4,#0x40]         ;4368  ; dut_info
00028c  2806              CMP      r0,#6                 ;4368
00028e  d00b              BEQ      |L33.680|
000290  2100              MOVS     r1,#0                 ;4379
000292  200b              MOVS     r0,#0xb               ;4379
000294  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000298  2008              MOVS     r0,#8                 ;4380
00029a  f7fffffe          BL       TIMER_KillTask
00029e  e8bd407c          POP      {r2-r6,lr}            ;4381
0002a2  2001              MOVS     r0,#1                 ;4381
0002a4  f7ffbffe          B.W      STATE_EnterState
                  |L33.680|
0002a8  f7fffffe          BL       Clear_All_Lines
0002ac  a117              ADR      r1,|L33.780|
0002ae  2000              MOVS     r0,#0                 ;4372
0002b0  f7fffffe          BL       Display_Centered
0002b4  a12d              ADR      r1,|L33.876|
0002b6  2001              MOVS     r0,#1                 ;4373
0002b8  f7fffffe          BL       Display_Centered
0002bc  a133              ADR      r1,|L33.908|
0002be  2002              MOVS     r0,#2                 ;4374
0002c0  f7fffffe          BL       Display_Centered
0002c4  e8bd407c          POP      {r2-r6,lr}            ;4375
0002c8  2042              MOVS     r0,#0x42              ;4375
0002ca  f7ffbffe          B.W      STATE_SwitchStep
                  |L33.718|
0002ce  2008              MOVS     r0,#8                 ;4387
0002d0  f7fffffe          BL       TIMER_KillTask
0002d4  f7fffffe          BL       AVO_PIN_Reset
0002d8  f7fffffe          BL       Clear_All_Lines
0002dc  a10b              ADR      r1,|L33.780|
0002de  2000              MOVS     r0,#0                 ;4390
0002e0  f7fffffe          BL       Display_Centered
0002e4  a12b              ADR      r1,|L33.916|
0002e6  2001              MOVS     r0,#1                 ;4391
0002e8  f7fffffe          BL       Display_Centered
0002ec  2001              MOVS     r0,#1                 ;4392
0002ee  f7fffffe          BL       STATE_EnterState
0002f2  2000              MOVS     r0,#0                 ;4393
0002f4  f7fffffe          BL       DAC0_output
0002f8  e8bd407c          POP      {r2-r6,lr}            ;4394
0002fc  2101              MOVS     r1,#1                 ;4394
0002fe  200b              MOVS     r0,#0xb               ;4394
000300  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
;;;4413   
                          ENDP

                  |L33.772|
                          DCD      ||.data||+0x6
                  |L33.776|
                          DCD      dut_info
                  |L33.780|
00030c  5448524f          DCB      "THROTTLE",0
000310  54544c45
000314  00      
000315  00                DCB      0
000316  00                DCB      0
000317  00                DCB      0
                  |L33.792|
000318  54657374          DCB      "Testing",0
00031c  696e6700
                  |L33.800|
                          DCD      measure
                  |L33.804|
000324  56434300          DCB      "VCC",0
                  |L33.808|
000328  4e6f726d          DCB      "Normal",0
00032c  616c00  
00032f  00                DCB      0
                  |L33.816|
000330  54657374          DCB      "Test Timeout",0
000334  2054696d
000338  656f7574
00033c  00      
00033d  00                DCB      0
00033e  00                DCB      0
00033f  00                DCB      0
                  |L33.832|
000340  41564f20          DCB      "AVO METER",0
000344  4d455445
000348  5200    
00034a  00                DCB      0
00034b  00                DCB      0
                  |L33.844|
00034c  4d656173          DCB      "Measurement",0
000350  7572656d
000354  656e7400
                  |L33.856|
                          DCD      STATE_SwitchStep
                  |L33.860|
00035c  41626e6f          DCB      "Abnormal",0
000360  726d616c
000364  00      
000365  00                DCB      0
000366  00                DCB      0
000367  00                DCB      0
                  |L33.872|
000368  53494700          DCB      "SIG",0
                  |L33.876|
00036c  41646a75          DCB      "Adjusting DAC",0
000370  7374696e
000374  67204441
000378  4300    
00037a  00                DCB      0
00037b  00                DCB      0
                  |L33.892|
00037c  46697273          DCB      "First",0
000380  7400    
000382  00                DCB      0
000383  00                DCB      0
                  |L33.900|
000384  5365636f          DCB      "Second",0
000388  6e6400  
00038b  00                DCB      0
                  |L33.908|
00038c  54686972          DCB      "Third",0
000390  6400    
000392  00                DCB      0
000393  00                DCB      0
                  |L33.916|
000394  54657374          DCB      "Test Pass",0
000398  20506173
00039c  7300    
00039e  00                DCB      0
00039f  00                DCB      0

                          AREA ||i.UART_Test||, CODE, READONLY, ALIGN=2

                  UART_Test PROC
;;;292    
;;;293    void  UART_Test(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;294    {
;;;295        switch (stateCB.step)
000002  484f              LDR      r0,|L34.320|
000004  8840              LDRH     r0,[r0,#2]  ; stateCB
000006  280d              CMP      r0,#0xd
000008  d054              BEQ      |L34.180|
00000a  dc3b              BGT      |L34.132|
00000c  2800              CMP      r0,#0
00000e  d038              BEQ      |L34.130|
000010  280b              CMP      r0,#0xb
000012  d136              BNE      |L34.130|
;;;296        {
;;;297            case STEP_NULL: // 空步骤
;;;298                break;
;;;299    
;;;300            case STEP_UART_TEST_ENTRY: // 入口步骤
;;;301                STATE_SwitchStep(STEP_UART_TEST_WAIT_RESPONSE);
000014  200c              MOVS     r0,#0xc
000016  f7fffffe          BL       STATE_SwitchStep
;;;302    
;;;303                Clear_All_Lines();
00001a  f7fffffe          BL       Clear_All_Lines
;;;304                Display_Centered(0, "UART");
00001e  a149              ADR      r1,|L34.324|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       Display_Centered
;;;305                Display_Centered(1, "Testing");
000026  a149              ADR      r1,|L34.332|
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       Display_Centered
;;;306    
;;;307                // 打开测试引脚
;;;308                DUT_TO_DTA_OFF_ON();
00002e  4d49              LDR      r5,|L34.340|
000030  f44f7480          MOV      r4,#0x100
000034  4623              MOV      r3,r4
000036  2203              MOVS     r2,#3
000038  2110              MOVS     r1,#0x10
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       gpio_init
000040  4621              MOV      r1,r4
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       gpio_bit_set
;;;309                UART_TEST_EN_ON();
000048  4c43              LDR      r4,|L34.344|
00004a  2301              MOVS     r3,#1
00004c  2203              MOVS     r2,#3
00004e  2110              MOVS     r1,#0x10
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       gpio_init
000056  2101              MOVS     r1,#1
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       gpio_bit_set
;;;310    
;;;311                // 通知万用表测电压
;;;312                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
00005e  2100              MOVS     r1,#0
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
;;;313                AVO_PROTOCOL_Send_Type_Chl(MEASURE_DCV, 0);
000066  2100              MOVS     r1,#0
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       AVO_PROTOCOL_Send_Type_Chl
;;;314    
;;;315                // 添加超时
;;;316                TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
00006e  2001              MOVS     r0,#1
000070  9000              STR      r0,[sp,#0]
000072  9001              STR      r0,[sp,#4]
000074  230f              MOVS     r3,#0xf
000076  4a39              LDR      r2,|L34.348|
000078  f64031b8          MOV      r1,#0xbb8
00007c  2008              MOVS     r0,#8
00007e  f7fffffe          BL       TIMER_AddTask
                  |L34.130|
;;;317                              3000,
;;;318                              STATE_SwitchStep,
;;;319                              STEP_UART_TEST_COMMUNICATION_TIME_OUT,
;;;320                              1,
;;;321                              ACTION_MODE_ADD_TO_QUEUE);
;;;322                break;
;;;323    
;;;324            case STEP_UART_TEST_WAIT_RESPONSE: // 等待万用表回应
;;;325                break;
;;;326    
;;;327            case STEP_UART_TEST_CHECK_VOLTAGE_VALUE:     // 比对VCC
;;;328                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);  // 喂狗
;;;329    
;;;330                if (measure.result > 2000)
;;;331                {
;;;332                    STATE_SwitchStep(STEP_UART_TEST_COMPLETE);
;;;333                }
;;;334                else
;;;335                {
;;;336        #if DEBUG_ENABLE
;;;337                    Clear_All_Lines();
;;;338                    Display_Centered(0, "UART");
;;;339                    Display_Centered(1, "Abnormal");
;;;340                    Display_YX_Format(2, 0, "%f", measure.result);
;;;341        #endif
;;;342                    TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;343                    STATE_EnterState(STATE_STANDBY);
;;;344                    STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_UART_TEST, FALSE);
;;;345                }
;;;346                break;
;;;347    
;;;348            case STEP_UART_TEST_COMPLETE: // UART测试完成步骤，关闭测试引脚，然后上报结果
;;;349                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;350        #if DEBUG_ENABLE
;;;351                Clear_All_Lines();
;;;352                Display_Centered(0, "UART");
;;;353                Display_Centered(1, "Test Pass");
;;;354        #endif
;;;355                AVO_PIN_Reset();
;;;356                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_UART_TEST, TRUE);
;;;357                STATE_EnterState(STATE_STANDBY);
;;;358                break;
;;;359    
;;;360            case STEP_UART_TEST_COMMUNICATION_TIME_OUT: // 通讯超时
;;;361                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;362        #if DEBUG_ENABLE
;;;363                Clear_All_Lines();
;;;364                Display_Centered(0, "UART Test Timeout");
;;;365        #endif
;;;366                AVO_PIN_Reset();
;;;367                STS_PROTOCOL_SendCmdParamAck(STS_PROTOCOL_CMD_UART_TEST, FALSE);
;;;368    
;;;369                STATE_EnterState(STATE_STANDBY);
;;;370                break;
;;;371    
;;;372            default:
;;;373                break;
;;;374        }
;;;375    }
000082  bd7c              POP      {r2-r6,pc}
                  |L34.132|
000084  280e              CMP      r0,#0xe               ;295
000086  d042              BEQ      |L34.270|
000088  280f              CMP      r0,#0xf               ;295
00008a  d1fa              BNE      |L34.130|
00008c  2008              MOVS     r0,#8                 ;361
00008e  f7fffffe          BL       TIMER_KillTask
000092  f7fffffe          BL       Clear_All_Lines
000096  a132              ADR      r1,|L34.352|
000098  2000              MOVS     r0,#0                 ;364
00009a  f7fffffe          BL       Display_Centered
00009e  f7fffffe          BL       AVO_PIN_Reset
0000a2  2100              MOVS     r1,#0                 ;367
0000a4  2019              MOVS     r0,#0x19              ;367
0000a6  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
0000aa  e8bd407c          POP      {r2-r6,lr}            ;369
0000ae  2001              MOVS     r0,#1                 ;369
0000b0  f7ffbffe          B.W      STATE_EnterState
                  |L34.180|
0000b4  2008              MOVS     r0,#8                 ;328
0000b6  f7fffffe          BL       TIMER_ResetTimer
0000ba  4c2e              LDR      r4,|L34.372|
0000bc  492e              LDR      r1,|L34.376|
0000be  6820              LDR      r0,[r4,#0]            ;330  ; measure
0000c0  4288              CMP      r0,r1                 ;330
0000c2  dd04              BLE      |L34.206|
0000c4  e8bd407c          POP      {r2-r6,lr}            ;332
0000c8  200e              MOVS     r0,#0xe               ;332
0000ca  f7ffbffe          B.W      STATE_SwitchStep
                  |L34.206|
0000ce  f7fffffe          BL       Clear_All_Lines
0000d2  a11c              ADR      r1,|L34.324|
0000d4  2000              MOVS     r0,#0                 ;338
0000d6  f7fffffe          BL       Display_Centered
0000da  a128              ADR      r1,|L34.380|
0000dc  2001              MOVS     r0,#1                 ;339
0000de  f7fffffe          BL       Display_Centered
0000e2  6820              LDR      r0,[r4,#0]            ;340  ; measure
0000e4  f7fffffe          BL       __aeabi_f2d
0000e8  e9cd0100          STRD     r0,r1,[sp,#0]         ;340
0000ec  a226              ADR      r2,|L34.392|
0000ee  2100              MOVS     r1,#0                 ;340
0000f0  2002              MOVS     r0,#2                 ;340
0000f2  f7fffffe          BL       Display_YX_Format
0000f6  2008              MOVS     r0,#8                 ;342
0000f8  f7fffffe          BL       TIMER_KillTask
0000fc  2001              MOVS     r0,#1                 ;343
0000fe  f7fffffe          BL       STATE_EnterState
000102  e8bd407c          POP      {r2-r6,lr}            ;344
000106  2100              MOVS     r1,#0                 ;344
000108  2019              MOVS     r0,#0x19              ;344
00010a  f7ffbffe          B.W      STS_PROTOCOL_SendCmdParamAck
                  |L34.270|
00010e  2008              MOVS     r0,#8                 ;349
000110  f7fffffe          BL       TIMER_KillTask
000114  f7fffffe          BL       Clear_All_Lines
000118  a10a              ADR      r1,|L34.324|
00011a  2000              MOVS     r0,#0                 ;352
00011c  f7fffffe          BL       Display_Centered
000120  a11a              ADR      r1,|L34.396|
000122  2001              MOVS     r0,#1                 ;353
000124  f7fffffe          BL       Display_Centered
000128  f7fffffe          BL       AVO_PIN_Reset
00012c  2101              MOVS     r1,#1                 ;356
00012e  2019              MOVS     r0,#0x19              ;356
000130  f7fffffe          BL       STS_PROTOCOL_SendCmdParamAck
000134  e8bd407c          POP      {r2-r6,lr}            ;357
000138  2001              MOVS     r0,#1                 ;357
00013a  f7ffbffe          B.W      STATE_EnterState
;;;376    
                          ENDP

00013e  0000              DCW      0x0000
                  |L34.320|
                          DCD      ||.data||+0x6
                  |L34.324|
000144  55415254          DCB      "UART",0
000148  00      
000149  00                DCB      0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L34.332|
00014c  54657374          DCB      "Testing",0
000150  696e6700
                  |L34.340|
                          DCD      0x40010800
                  |L34.344|
                          DCD      0x40011400
                  |L34.348|
                          DCD      STATE_SwitchStep
                  |L34.352|
000160  55415254          DCB      "UART Test Timeout",0
000164  20546573
000168  74205469
00016c  6d656f75
000170  7400    
000172  00                DCB      0
000173  00                DCB      0
                  |L34.372|
                          DCD      measure
                  |L34.376|
                          DCD      0x44fa0000
                  |L34.380|
00017c  41626e6f          DCB      "Abnormal",0
000180  726d616c
000184  00      
000185  00                DCB      0
000186  00                DCB      0
000187  00                DCB      0
                  |L34.392|
000188  256600            DCB      "%f",0
00018b  00                DCB      0
                  |L34.396|
00018c  54657374          DCB      "Test Pass",0
000190  20506173
000194  7300    
000196  00                DCB      0
000197  00                DCB      0

                          AREA ||i.addTimeOutTimer||, CODE, READONLY, ALIGN=2

                  addTimeOutTimer PROC
;;;3352   // 添加超时检测定时器
;;;3353   void addTimeOutTimer(uint32 time)
000000  b51c              PUSH     {r2-r4,lr}
;;;3354   {
;;;3355       TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000002  2201              MOVS     r2,#1
000004  9200              STR      r2,[sp,#0]
000006  9201              STR      r2,[sp,#4]
000008  4601              MOV      r1,r0
00000a  23e7              MOVS     r3,#0xe7
00000c  4a02              LDR      r2,|L35.24|
00000e  2008              MOVS     r0,#8
000010  f7fffffe          BL       TIMER_AddTask
;;;3356                     time,
;;;3357                     STATE_SwitchStep,
;;;3358                     STEP_CM_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;3359                     1,
;;;3360                     ACTION_MODE_ADD_TO_QUEUE);
;;;3361   }
000014  bd1c              POP      {r2-r4,pc}
;;;3362   
                          ENDP

000016  0000              DCW      0x0000
                  |L35.24|
                          DCD      STATE_SwitchStep

                          AREA ||.data||, DATA, ALIGN=1

                  resetFlag
000000  00                DCB      0x00
                  configResetFlag
000001  00                DCB      0x00
                  appResetFlag
000002  0000              DCB      0x00,0x00
                  vccVlaue
000004  0000              DCW      0x0000
                  stateCB
000006  0000              DCB      0x00,0x00
000008  0000              DCB      0x00,0x00
                  vlkMsgBuff
00000a  564c              DCB      0x56,0x4c
00000c  4b205465          DCB      0x4b,0x20,0x54,0x65
000010  7374696e          DCB      0x73,0x74,0x69,0x6e
000014  67000000          DCB      0x67,0x00,0x00,0x00
                          DCDU     0x00000000
00001c  00004156          DCB      0x00,0x00,0x41,0x56
000020  4f204d65          DCB      0x4f,0x20,0x4d,0x65
000024  61737572          DCB      0x61,0x73,0x75,0x72
000028  656d656e          DCB      0x65,0x6d,0x65,0x6e
00002c  74000000          DCB      0x74,0x00,0x00,0x00
000030  0000564c          DCB      0x00,0x00,0x56,0x4c
000034  4b204162          DCB      0x4b,0x20,0x41,0x62
000038  6e6f726d          DCB      0x6e,0x6f,0x72,0x6d
00003c  616c0000          DCB      0x61,0x6c,0x00,0x00
                          DCDU     0x00000000
000044  0000564c          DCB      0x00,0x00,0x56,0x4c
000048  4b205465          DCB      0x4b,0x20,0x54,0x65
00004c  73742050          DCB      0x73,0x74,0x20,0x50
000050  61737300          DCB      0x61,0x73,0x73,0x00
                          DCDU     0x00000000
000058  0000              DCB      0x00,0x00
                  excepMsgBuff
00005a  5465              DCB      0x54,0x65
00005c  73742054          DCB      0x73,0x74,0x20,0x54
000060  696d656f          DCB      0x69,0x6d,0x65,0x6f
000064  75740000          DCB      0x75,0x74,0x00,0x00
                          DCDU     0x00000000
00006c  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  gndMsgBuff
000000  474e4420          DCB      0x47,0x4e,0x44,0x20
000004  54657374          DCB      0x54,0x65,0x73,0x74
000008  696e6700          DCB      0x69,0x6e,0x67,0x00
                          %        8
000014  41564f20          DCB      0x41,0x56,0x4f,0x20
000018  4d656173          DCB      0x4d,0x65,0x61,0x73
00001c  7572656d          DCB      0x75,0x72,0x65,0x6d
000020  656e7400          DCB      0x65,0x6e,0x74,0x00
                          DCDU     0x00000000
000028  5448524f          DCB      0x54,0x48,0x52,0x4f
00002c  20416200          DCB      0x20,0x41,0x62,0x00
                          %        12
00003c  5448524f          DCB      0x54,0x48,0x52,0x4f
000040  20546573          DCB      0x20,0x54,0x65,0x73
000044  74205061          DCB      0x74,0x20,0x50,0x61
000048  73730000          DCB      0x73,0x73,0x00,0x00
                          DCDU     0x00000000

                          AREA ||area_number.40||, DATA, ALIGN=1

                          EXPORTAS ||area_number.40||, ||.data||
                  result
000000  0000              DCW      0x0000

                          AREA ||area_number.41||, DATA, ALIGN=1

                          EXPORTAS ||area_number.41||, ||.data||
                  gndVlaue1
000000  0000              DCW      0x0000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  gndVlaue2
000000  0000              DCW      0x0000

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  gndVlaue3
000000  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "User\\state.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_state_c_5822a13e____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___7_state_c_5822a13e____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_state_c_5822a13e____REVSH|
#line 128
|__asm___7_state_c_5822a13e____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
