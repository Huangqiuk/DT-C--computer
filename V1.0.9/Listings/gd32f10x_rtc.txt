; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_rtc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_rtc.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_rtc.crf Libraries\src\gd32f10x_rtc.c]
                          THUMB

                          AREA ||i.rtc_alarm_config||, CODE, READONLY, ALIGN=2

                  rtc_alarm_config PROC
;;;135    */
;;;136    void rtc_alarm_config(uint32_t alarm)
000000  b500              PUSH     {lr}
;;;137    {
000002  4602              MOV      r2,r0
;;;138        rtc_configuration_mode_enter();
000004  f7fffffe          BL       rtc_configuration_mode_enter
;;;139        /* set the alarm high bits */
;;;140        RTC_ALRMH = (alarm >> RTC_HIGH_BITS_OFFSET);
000008  4904              LDR      r1,|L1.28|
00000a  0c10              LSRS     r0,r2,#16
00000c  6008              STR      r0,[r1,#0]
;;;141        /* set the alarm low bits */
;;;142        RTC_ALRML = (alarm & RTC_LOW_BITS_MASK);
00000e  1d09              ADDS     r1,r1,#4
000010  b290              UXTH     r0,r2
000012  6008              STR      r0,[r1,#0]
;;;143        rtc_configuration_mode_exit();
000014  f85deb04          POP      {lr}
000018  f7ffbffe          B.W      rtc_configuration_mode_exit
;;;144    }
;;;145    
                          ENDP

                  |L1.28|
                          DCD      0x40002820

                          AREA ||i.rtc_configuration_mode_enter||, CODE, READONLY, ALIGN=2

                  rtc_configuration_mode_enter PROC
;;;53     */
;;;54     void rtc_configuration_mode_enter(void)
000000  4802              LDR      r0,|L2.12|
;;;55     {
;;;56         RTC_CTL |= RTC_CTL_CMF;
000002  6801              LDR      r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;57     }
00000a  4770              BX       lr
;;;58     
                          ENDP

                  |L2.12|
                          DCD      0x40002804

                          AREA ||i.rtc_configuration_mode_exit||, CODE, READONLY, ALIGN=2

                  rtc_configuration_mode_exit PROC
;;;64     */
;;;65     void rtc_configuration_mode_exit(void)
000000  4802              LDR      r0,|L3.12|
;;;66     {
;;;67         RTC_CTL &= ~RTC_CTL_CMF;
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;68     }
00000a  4770              BX       lr
;;;69     
                          ENDP

                  |L3.12|
                          DCD      0x40002804

                          AREA ||i.rtc_counter_get||, CODE, READONLY, ALIGN=2

                  rtc_counter_get PROC
;;;151    */
;;;152    uint32_t rtc_counter_get(void)
000000  4803              LDR      r0,|L4.16|
;;;153    {
;;;154        uint32_t temp = 0x0U;
;;;155        
;;;156        temp = RTC_CNTL;
000002  6800              LDR      r0,[r0,#0]
;;;157        temp |= (RTC_CNTH << RTC_HIGH_BITS_OFFSET);
000004  4902              LDR      r1,|L4.16|
000006  1f09              SUBS     r1,r1,#4
000008  6809              LDR      r1,[r1,#0]
00000a  ea404001          ORR      r0,r0,r1,LSL #16
;;;158        return temp;
;;;159    }
00000e  4770              BX       lr
;;;160    
                          ENDP

                  |L4.16|
                          DCD      0x4000281c

                          AREA ||i.rtc_counter_set||, CODE, READONLY, ALIGN=2

                  rtc_counter_set PROC
;;;75     */
;;;76     void rtc_counter_set(uint32_t cnt)
000000  b500              PUSH     {lr}
;;;77     {
000002  4602              MOV      r2,r0
;;;78         rtc_configuration_mode_enter();
000004  f7fffffe          BL       rtc_configuration_mode_enter
;;;79         /* set the RTC counter high bits */
;;;80         RTC_CNTH = (cnt >> RTC_HIGH_BITS_OFFSET);
000008  4904              LDR      r1,|L5.28|
00000a  0c10              LSRS     r0,r2,#16
00000c  6008              STR      r0,[r1,#0]
;;;81         /* set the RTC counter low bits */
;;;82         RTC_CNTL = (cnt & RTC_LOW_BITS_MASK);
00000e  1d09              ADDS     r1,r1,#4
000010  b290              UXTH     r0,r2
000012  6008              STR      r0,[r1,#0]
;;;83         rtc_configuration_mode_exit();
000014  f85deb04          POP      {lr}
000018  f7ffbffe          B.W      rtc_configuration_mode_exit
;;;84     }
;;;85     
                          ENDP

                  |L5.28|
                          DCD      0x40002818

                          AREA ||i.rtc_divider_get||, CODE, READONLY, ALIGN=2

                  rtc_divider_get PROC
;;;166    */
;;;167    uint32_t rtc_divider_get(void)
000000  4804              LDR      r0,|L6.20|
;;;168    {
;;;169        uint32_t temp = 0x00U;
;;;170        
;;;171        temp = ((RTC_DIVH & RTC_DIVH_DIV) << RTC_HIGH_BITS_OFFSET);
000002  6800              LDR      r0,[r0,#0]
000004  0700              LSLS     r0,r0,#28
000006  0b01              LSRS     r1,r0,#12
;;;172        temp |= RTC_DIVL;
000008  4802              LDR      r0,|L6.20|
00000a  1d00              ADDS     r0,r0,#4
00000c  6800              LDR      r0,[r0,#0]
00000e  4308              ORRS     r0,r0,r1
;;;173        return temp;
;;;174    }
000010  4770              BX       lr
;;;175    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40002810

                          AREA ||i.rtc_flag_clear||, CODE, READONLY, ALIGN=2

                  rtc_flag_clear PROC
;;;207    */
;;;208    void rtc_flag_clear(uint32_t flag)
000000  4902              LDR      r1,|L7.12|
;;;209    {
;;;210        /* clear RTC flag */
;;;211        RTC_CTL &= ~flag;
000002  680a              LDR      r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;212    }
000008  4770              BX       lr
;;;213    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0x40002804

                          AREA ||i.rtc_flag_get||, CODE, READONLY, ALIGN=2

                  rtc_flag_get PROC
;;;187    */
;;;188    FlagStatus rtc_flag_get(uint32_t flag)
000000  4903              LDR      r1,|L8.16|
;;;189    {
;;;190        if(RESET != (RTC_CTL & flag)){
000002  6809              LDR      r1,[r1,#0]
000004  4201              TST      r1,r0
000006  d001              BEQ      |L8.12|
;;;191            return SET;
000008  2001              MOVS     r0,#1
;;;192        }else{
;;;193            return RESET;
;;;194        }
;;;195    }
00000a  4770              BX       lr
                  |L8.12|
00000c  2000              MOVS     r0,#0                 ;193
00000e  4770              BX       lr
;;;196    
                          ENDP

                  |L8.16|
                          DCD      0x40002804

                          AREA ||i.rtc_interrupt_disable||, CODE, READONLY, ALIGN=2

                  rtc_interrupt_disable PROC
;;;273    */
;;;274    void rtc_interrupt_disable(uint32_t interrupt)
000000  4902              LDR      r1,|L9.12|
;;;275    {
;;;276        RTC_INTEN &= ~interrupt;
000002  680a              LDR      r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;277    }
000008  4770              BX       lr
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0x40002800

                          AREA ||i.rtc_interrupt_enable||, CODE, READONLY, ALIGN=2

                  rtc_interrupt_enable PROC
;;;258    */
;;;259    void rtc_interrupt_enable(uint32_t interrupt)
000000  4902              LDR      r1,|L10.12|
;;;260    {
;;;261        RTC_INTEN |= interrupt;
000002  680a              LDR      r2,[r1,#0]
000004  4302              ORRS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;262    }
000008  4770              BX       lr
;;;263    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x40002800

                          AREA ||i.rtc_interrupt_flag_clear||, CODE, READONLY, ALIGN=2

                  rtc_interrupt_flag_clear PROC
;;;242    */
;;;243    void rtc_interrupt_flag_clear(uint32_t flag)
000000  4902              LDR      r1,|L11.12|
;;;244    {
;;;245        /* clear RTC interrupt flag */
;;;246        RTC_CTL &= ~flag;
000002  680a              LDR      r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;247    }
000008  4770              BX       lr
;;;248    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      0x40002804

                          AREA ||i.rtc_interrupt_flag_get||, CODE, READONLY, ALIGN=2

                  rtc_interrupt_flag_get PROC
;;;223    */
;;;224    FlagStatus rtc_interrupt_flag_get(uint32_t flag)
000000  4903              LDR      r1,|L12.16|
;;;225    {
;;;226        if(RESET != (RTC_CTL & flag)){
000002  6809              LDR      r1,[r1,#0]
000004  4201              TST      r1,r0
000006  d001              BEQ      |L12.12|
;;;227            return SET;
000008  2001              MOVS     r0,#1
;;;228        }else{
;;;229            return RESET;
;;;230        }
;;;231    }
00000a  4770              BX       lr
                  |L12.12|
00000c  2000              MOVS     r0,#0                 ;229
00000e  4770              BX       lr
;;;232    
                          ENDP

                  |L12.16|
                          DCD      0x40002804

                          AREA ||i.rtc_lwoff_wait||, CODE, READONLY, ALIGN=2

                  rtc_lwoff_wait PROC
;;;107    */
;;;108    void rtc_lwoff_wait(void)
000000  4802              LDR      r0,|L13.12|
                  |L13.2|
;;;109    {
;;;110        /* loop until LWOFF flag is set */
;;;111        while(RESET == (RTC_CTL & RTC_CTL_LWOFF)){
000002  6801              LDR      r1,[r0,#0]
000004  0689              LSLS     r1,r1,#26
000006  d5fc              BPL      |L13.2|
;;;112        }
;;;113    }
000008  4770              BX       lr
;;;114    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x40002804

                          AREA ||i.rtc_prescaler_set||, CODE, READONLY, ALIGN=2

                  rtc_prescaler_set PROC
;;;91     */
;;;92     void rtc_prescaler_set(uint32_t psc)
000000  b500              PUSH     {lr}
;;;93     {
000002  4602              MOV      r2,r0
;;;94         rtc_configuration_mode_enter();
000004  f7fffffe          BL       rtc_configuration_mode_enter
;;;95         /* set the RTC prescaler high bits */
;;;96         RTC_PSCH = ((psc & RTC_HIGH_BITS_MASK) >> RTC_HIGH_BITS_OFFSET);
000008  4905              LDR      r1,|L14.32|
00000a  f3c24003          UBFX     r0,r2,#16,#4
00000e  6008              STR      r0,[r1,#0]
;;;97         /* set the RTC prescaler low bits */
;;;98         RTC_PSCL = (psc & RTC_LOW_BITS_MASK);
000010  1d09              ADDS     r1,r1,#4
000012  b290              UXTH     r0,r2
000014  6008              STR      r0,[r1,#0]
;;;99         rtc_configuration_mode_exit();
000016  f85deb04          POP      {lr}
00001a  f7ffbffe          B.W      rtc_configuration_mode_exit
;;;100    }
;;;101    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      0x40002808

                          AREA ||i.rtc_register_sync_wait||, CODE, READONLY, ALIGN=2

                  rtc_register_sync_wait PROC
;;;120    */
;;;121    void rtc_register_sync_wait(void)
000000  4804              LDR      r0,|L15.20|
;;;122    {
;;;123        /* clear RSYNF flag */
;;;124        RTC_CTL &= ~RTC_CTL_RSYNF;
000002  6801              LDR      r1,[r0,#0]
000004  f0210108          BIC      r1,r1,#8
000008  6001              STR      r1,[r0,#0]
                  |L15.10|
;;;125        /* loop until RSYNF flag is set */
;;;126        while(RESET == (RTC_CTL & RTC_CTL_RSYNF)){
00000a  6801              LDR      r1,[r0,#0]
00000c  0709              LSLS     r1,r1,#28
00000e  d5fc              BPL      |L15.10|
;;;127        }
;;;128    }
000010  4770              BX       lr
;;;129    
                          ENDP

000012  0000              DCW      0x0000
                  |L15.20|
                          DCD      0x40002804

;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_rtc_c_4edcc34f____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_rtc_c_4edcc34f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_rtc_c_4edcc34f____REVSH|
#line 128
|__asm___14_gd32f10x_rtc_c_4edcc34f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
