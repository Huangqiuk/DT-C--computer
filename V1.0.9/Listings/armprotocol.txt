; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\armprotocol.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\armprotocol.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\armprotocol.crf User\ArmProtocol.c]
                          THUMB

                          AREA ||i.ARM_PROTOCOL_CheckSUM||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_CheckSUM PROC
;;;434    // 对传入的命令帧进行校验，返回校验结果
;;;435    BOOL ARM_PROTOCOL_CheckSUM(ARM_PROTOCOL_RX_CMD_FRAME *pCmdFrame)
000000  b510              PUSH     {r4,lr}
;;;436    {
000002  4601              MOV      r1,r0
;;;437    	uint8 cc = 0;
000004  2200              MOVS     r2,#0
;;;438    	uint16 i = 0;
000006  2300              MOVS     r3,#0
;;;439    
;;;440    	if (NULL == pCmdFrame)
000008  b909              CBNZ     r1,|L1.14|
;;;441    	{
;;;442    		return FALSE;
00000a  2000              MOVS     r0,#0
                  |L1.12|
;;;443    	}
;;;444    
;;;445    	// 从命令头开始，到校验码之前的一个字节，依次进行异或运算
;;;446    	for (i = 0; i < pCmdFrame->length - 1; i++)
;;;447    	{
;;;448    		cc ^= pCmdFrame->buff[i];
;;;449    	}
;;;450    
;;;451    	cc = ~cc;
;;;452    
;;;453    	// 判断计算得到的校验码与命令帧中的校验码是否相同
;;;454    	if (pCmdFrame->buff[pCmdFrame->length - 1] != cc)
;;;455    	{
;;;456    		return FALSE;
;;;457    	}
;;;458    
;;;459    	return TRUE;
;;;460    }
00000c  bd10              POP      {r4,pc}
                  |L1.14|
00000e  2300              MOVS     r3,#0                 ;446
000010  e004              B        |L1.28|
                  |L1.18|
000012  1c88              ADDS     r0,r1,#2              ;448
000014  5cc0              LDRB     r0,[r0,r3]            ;448
000016  4042              EORS     r2,r2,r0              ;448
000018  1c58              ADDS     r0,r3,#1              ;446
00001a  b283              UXTH     r3,r0                 ;446
                  |L1.28|
00001c  f8b10098          LDRH     r0,[r1,#0x98]         ;446
000020  1e40              SUBS     r0,r0,#1              ;446
000022  4298              CMP      r0,r3                 ;446
000024  dcf5              BGT      |L1.18|
000026  43d0              MVNS     r0,r2                 ;451
000028  b2c2              UXTB     r2,r0                 ;451
00002a  f8b10098          LDRH     r0,[r1,#0x98]         ;454
00002e  1e40              SUBS     r0,r0,#1              ;454
000030  1c8c              ADDS     r4,r1,#2              ;454
000032  5c20              LDRB     r0,[r4,r0]            ;454
000034  4290              CMP      r0,r2                 ;454
000036  d001              BEQ      |L1.60|
000038  2000              MOVS     r0,#0                 ;456
00003a  e7e7              B        |L1.12|
                  |L1.60|
00003c  2001              MOVS     r0,#1                 ;459
00003e  e7e5              B        |L1.12|
;;;461    
                          ENDP


                          AREA ||i.ARM_PROTOCOL_CmdFrameProcess||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_CmdFrameProcess PROC
;;;689    // ARM命令帧缓冲区处理
;;;690    void ARM_PROTOCOL_CmdFrameProcess(ARM_PROTOCOL_CB *pCB)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;691    {
000004  b09b              SUB      sp,sp,#0x6c
000006  4605              MOV      r5,r0
;;;692    	ARM_PROTOCOL_CMD cmd = ARM_CMD_MAX;
000008  2035              MOVS     r0,#0x35
00000a  901a              STR      r0,[sp,#0x68]
;;;693    	ARM_PROTOCOL_RX_CMD_FRAME *pCmdFrame = NULL;
00000c  2400              MOVS     r4,#0
;;;694    
;;;695    	BOOL writeRes;
;;;696    
;;;697    	// 我的变量
;;;698    	uint8 versionBoot[3] = {0};
00000e  2000              MOVS     r0,#0
000010  9019              STR      r0,[sp,#0x64]
;;;699    	uint8 versionApp[3] = {0};
000012  9018              STR      r0,[sp,#0x60]
;;;700    
;;;701    	uint8 upItem = 0;
000014  9017              STR      r0,[sp,#0x5c]
;;;702    	uint8 clearItem = 0;
000016  4681              MOV      r9,r0
;;;703    	uint8 dutAll[50] = {0};
000018  2134              MOVS     r1,#0x34
00001a  a80a              ADD      r0,sp,#0x28
00001c  f7fffffe          BL       __aeabi_memclr4
;;;704    	uint8 dutName_i = 0;
000020  46a0              MOV      r8,r4
;;;705    	uint8 packetSize = 0;
000022  2000              MOVS     r0,#0
000024  9009              STR      r0,[sp,#0x24]
;;;706    	uint8 addr1 = 0;
000026  4682              MOV      r10,r0
;;;707    	uint8 addr2 = 0;
000028  4683              MOV      r11,r0
;;;708    	uint8 addr3 = 0;
00002a  9008              STR      r0,[sp,#0x20]
;;;709    	uint8 addr4 = 0;
00002c  9007              STR      r0,[sp,#0x1c]
;;;710    	uint32 writeAddr = 0;
00002e  2600              MOVS     r6,#0
;;;711    	static uint32 allPacketSize = 0;
;;;712    	static uint8 allPacket[4] = {0};
;;;713    	uint8 dataLen = 0;
000030  9006              STR      r0,[sp,#0x18]
;;;714    	uint8 endItem = 0;
000032  9005              STR      r0,[sp,#0x14]
;;;715    	uint8 ctrlState = 0;
000034  9004              STR      r0,[sp,#0x10]
;;;716    	uint8 dut_info_len = 0;
000036  9003              STR      r0,[sp,#0xc]
;;;717    	uint8 size[4] = {0};
000038  9002              STR      r0,[sp,#8]
;;;718    	static uint32 currPacketNum = 0xFFFF;
;;;719    
;;;720    	// 参数合法性检验
;;;721    	if (NULL == pCB)
00003a  b915              CBNZ     r5,|L2.66|
                  |L2.60|
;;;722    	{
;;;723    		return;
;;;724    	}
;;;725    
;;;726    	// 命令帧缓冲区为空，退出
;;;727    	if (pCB->rx.head == pCB->rx.end)
;;;728    	{
;;;729    		return;
;;;730    	}
;;;731    
;;;732    	// 获取当前要处理的命令帧指针
;;;733    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.head];
;;;734    
;;;735    	// 命令头非法，退出
;;;736    	if (ARM_PROTOCOL_CMD_HEAD != pCmdFrame->buff[ARM_PROTOCOL_CMD_HEAD_INDEX])
;;;737    	{
;;;738    		// 删除命令帧
;;;739    		pCB->rx.head++;
;;;740    		pCB->rx.head %= ARM_PROTOCOL_RX_QUEUE_SIZE;
;;;741    		return;
;;;742    	}
;;;743    
;;;744    	// 命令头合法，则提取命令
;;;745    	cmd = (ARM_PROTOCOL_CMD)pCmdFrame->buff[ARM_PROTOCOL_CMD_CMD_INDEX];
;;;746    
;;;747    	// 执行命令帧
;;;748    	switch (cmd)
;;;749    	{
;;;750    	// 获取烧录器工具信息
;;;751    	case UART_ARM_CMD_GET_TOOL_INFO:										 // 0x10,
;;;752    		SPI_FLASH_ReadArray(versionBoot, SPI_FLASH_BOOT_VERSION_ADDEESS, 3); // 获取BOOT版本
;;;753    		SPI_FLASH_ReadArray(versionApp, SPI_FLASH_APP_VERSION_ADDEESS, 3);	 // 获取APP版本
;;;754    		ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);						 // 添加命令头
;;;755    		ARM_PROTOCOL_TxAddData(UART_ARM_CMD_GET_TOOL_INFO);					 // 添加命令字
;;;756    		ARM_PROTOCOL_TxAddData(0x00);										 // 数据长度临时为0
;;;757    		ARM_PROTOCOL_TxAddData(versionBoot[0]);								 // 添加BOOT版本
;;;758    		ARM_PROTOCOL_TxAddData(versionBoot[1]);
;;;759    		ARM_PROTOCOL_TxAddData(versionBoot[2]);
;;;760    		ARM_PROTOCOL_TxAddData(versionApp[0]); // 添加APP版本
;;;761    		ARM_PROTOCOL_TxAddData(versionApp[1]);
;;;762    		ARM_PROTOCOL_TxAddData(versionApp[2]);
;;;763    		ARM_PROTOCOL_TxAddFrame(); // 设置数据长度和添加校验
;;;764    		break;
;;;765    
;;;766    	// 烧录器工具升级开始
;;;767    	case UART_ARM_CMD_TOOL_UP_BEGIN: // 0x11,
;;;768    		// 擦除片外flash，大概要1s钟
;;;769    		SPI_FLASH_EraseRoom(SPI_FLASH_TOOL_APP_ADDEESS, 256 * 1024); // 256k
;;;770    		// 返回信息给安卓机
;;;771    		allPacketSize = 0;
;;;772    		ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_UP_BEGIN, TRUE);
;;;773    		break;
;;;774    
;;;775    	// 烧录器工具数据写入
;;;776    	case UART_ARM_CMD_TOOL_WRITE_DATA: // 0x12,
;;;777    		// 向片外flash写入安卓机发送的数据
;;;778    		packetSize = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;779    		addr1 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;780    		addr2 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;781    		addr3 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX];
;;;782    		addr4 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX];
;;;783    		writeAddr = (addr1 << 24) | (addr2 << 16) | (addr3 << 8) | (addr4);
;;;784    
;;;785    		// 指向要写入的数据缓冲区的指针pBuffer，一个表示写入地址的无符号32位整数WriteAddr，以及一个表示要写入的字节数的无符号16位整数NumByteToWrite。
;;;786    		writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_TOOL_APP_ADDEESS + writeAddr, packetSize);
;;;787    
;;;788    		// 返回信息给安卓机
;;;789    		ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_WRITE_DATA, writeRes);
;;;790    		allPacketSize++;
;;;791    		break;
;;;792    
;;;793    	// 烧录器工具升级结束
;;;794    	case UART_ARM_CMD_TOOL_UP_END: // 0x13,
;;;795    		// 发送升级成功应答
;;;796    		// 设置升级标志位标志
;;;797    		allPacket[0] = allPacketSize >> 24;
;;;798    		allPacket[1] = allPacketSize >> 16;
;;;799    		allPacket[2] = allPacketSize >> 8;
;;;800    		allPacket[3] = allPacketSize;
;;;801    
;;;802    		SPI_FLASH_EraseSector(SPI_FLASH_TOOL_UPDATA_FLAG_ADDEESS); // 擦除标志位存储区
;;;803    		SPI_FLASH_EraseSector(SPI_FLASH_TOOL_APP_DATA_SIZE);	   // 擦除大小存储区
;;;804    
;;;805    		SPI_FLASH_WriteByte(SPI_FLASH_TOOL_UPDATA_FLAG_ADDEESS, 0xAA);
;;;806    		SPI_FLASH_WriteArray(allPacket, SPI_FLASH_TOOL_APP_DATA_SIZE, 4);
;;;807    
;;;808    		ARM_PROTOCOL_SendCmdAck(UART_ARM_CMD_TOOL_UP_END);
;;;809    
;;;810    		/*100ms后跳转回BOOT，读取标志位，然后替换替换工具APP区*/
;;;811    		TIMER_AddTask(TIMER_ID_TOOL_APP_TO_BOOT,
;;;812    					  100,
;;;813    					  IAP_JumpToAppFun,
;;;814    					  IAP_GD32_FLASH_BASE,
;;;815    					  1,
;;;816    					  ACTION_MODE_ADD_TO_QUEUE);
;;;817    		break;
;;;818    
;;;819    	// 升级DUT控制命令
;;;820    	case UART_ARM_CMD_TOOL_DUT_UP: // 0x14,
;;;821    		upItem = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;822    		ctrlState = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;823    
;;;824    		// 设置要升级的项
;;;825    		setUpItem(upItem, ctrlState);
;;;826    
;;;827    		// 设置进度上报信息
;;;828    		setDutProgressReportInfo();
;;;829    
;;;830    		// 根据升级信息，进入不同的状态机
;;;831    		enterState();
;;;832    
;;;833    		// 应答
;;;834    		ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_DUT_UP, TRUE);
;;;835    		break;
;;;836    
;;;837    	// DUT升级进度上报
;;;838    	case UART_ARM_CMD_TOOL_DUT_PROCESS: // 0x15,
;;;839    		break;
;;;840    
;;;841    	// 清空升级缓冲区
;;;842    	case UART_ARM_CMD_TOOL_CLEAR_BUFF: // 0x16,
;;;843    
;;;844    		clearItem = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;845    		if (0x01 == (clearItem & 0x01))
;;;846    		{
;;;847    			/*擦除片外的dut_boot区*/
;;;848    			dut_info.bootSize = 0;
;;;849    			SPI_FLASH_EraseRoom(SPI_FLASH_DUT_BOOT_ADDEESS, 128 * 1024); // 128k
;;;850    		}
;;;851    		if (0x02 == (clearItem & 0x02))
;;;852    		{
;;;853    			/*擦除片外的dut_app区*/
;;;854    			dut_info.appSize = 0;
;;;855    			SPI_FLASH_EraseRoom(SPI_FLASH_DUT_APP_ADDEESS, 1024 * 1024); // 1M
;;;856    		}
;;;857    		if (0x04 == (clearItem & 0x04))
;;;858    		{
;;;859    			/*擦除片外的dut_ui区*/
;;;860    			dut_info.uiSize = 0;
;;;861    			SPI_FLASH_EraseRoom(SPI_FLASH_DUT_UI_ADDEESS, 14 * 1024 * 1024); // 14M
;;;862    		}
;;;863    		if (0x08 == (clearItem & 0x08))
;;;864    		{
;;;865    			/*擦除片外的dut_config区*/
;;;866    			SPI_FLASH_EraseSector(SPI_FLASH_DUT_CONFIG_ADDEESS); // 4k
;;;867    		}
;;;868    		SPI_FLASH_EraseSector(SPI_FLASH_DUT_INFO); // 擦除dut机型信息
;;;869    		ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_CLEAR_BUFF, TRUE);
;;;870    
;;;871    		break;
;;;872    
;;;873    	// 烧录器写入DUT机型信息
;;;874    	case UART_ARM_CMD_TOOL_SET_DUT_INFO: // 0x17,
;;;875    		dut_info_len = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 6;
;;;876    
;;;877    		for (dutName_i = 0; dutName_i < dut_info_len; dutName_i++)
;;;878    		{
;;;879    			dutAll[dutName_i] = pCmdFrame->buff[dutName_i + 6 + 3];
;;;880    		}
;;;881    		dutAll[20] = dut_info_len;									// 长度
;;;882    		dutAll[21] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX]; // 电压
;;;883    		dutAll[22] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX]; // 通讯类型
;;;884    		dutAll[23] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX]; // bootType
;;;885    		dutAll[24] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX]; // appType
;;;886    		dutAll[25] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX]; // uiType
;;;887    		dutAll[26] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA6_INDEX]; // configType
;;;888    
;;;889    		/* 将机型信息写入到片外flash */
;;;890    		SPI_FLASH_EraseSector(SPI_FLASH_DUT_INFO);
;;;891    		writeRes = SPI_FLASH_WriteWithCheck(dutAll, SPI_FLASH_DUT_INFO, 30);
;;;892    
;;;893    		if (writeRes)
;;;894    		{
;;;895    			DutInfoUpdata(); // 更新dutinfo数据
;;;896    			if (dut_info.voltage)// 更新电压数据
;;;897    			{
;;;898    				DutVol_24();
;;;899    			}
;;;900    			else
;;;901    			{
;;;902    				DutVol_12();
;;;903    			}
;;;904    		}
;;;905    		/* 返回信息给安卓机 */
;;;906    		ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_SET_DUT_INFO, writeRes);
;;;907    		break;
;;;908    
;;;909    	// 获取烧录器记录的DUT机型信息
;;;910    	case UART_ARM_CMD_TOOL_GET_DUT_INFO: // 0x18
;;;911    		SPI_FLASH_ReadArray(dutAll, SPI_FLASH_DUT_INFO, 30);
;;;912    		if (0xFF == dutAll[20]) // 机型为空
;;;913    		{
;;;914    			dutAll[20] = 10;
;;;915    		}
;;;916    		ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);			 // 添加命令头
;;;917    		ARM_PROTOCOL_TxAddData(UART_ARM_CMD_TOOL_GET_DUT_INFO);	 // 添加命令字
;;;918    		ARM_PROTOCOL_TxAddData(0x00);							 // 数据长度临时为0
;;;919    		ARM_PROTOCOL_TxAddData(dutAll[21]);						 // 添加电压
;;;920    		ARM_PROTOCOL_TxAddData(dutAll[22]);						 // 添加通讯类型
;;;921    		ARM_PROTOCOL_TxAddData(dutAll[23]);						 // bootType
;;;922    		ARM_PROTOCOL_TxAddData(dutAll[24]);						 // appType
;;;923    		ARM_PROTOCOL_TxAddData(dutAll[25]);						 // uiType
;;;924    		ARM_PROTOCOL_TxAddData(dutAll[26]);						 // configType
;;;925    		for (dutName_i = 0; dutName_i < dutAll[20]; dutName_i++) // 添加机型信息
;;;926    		{
;;;927    			ARM_PROTOCOL_TxAddData(dutAll[dutName_i]);
;;;928    		}
;;;929    		ARM_PROTOCOL_TxAddFrame(); // 设置数据长度和添加校验
;;;930    		break;
;;;931    
;;;932    	// 0x19:设置工具序列号
;;;933    	case UART_ARM_CMD_SET_TOOL_RANK:
;;;934    		SPI_FLASH_EraseSector(SPI_FLASH_TOOL_RANK_ADDEESS); // 擦除序号存储区
;;;935    		dut_info.toolRank = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;936    		SPI_FLASH_WriteByte(SPI_FLASH_TOOL_RANK_ADDEESS, dut_info.toolRank); // 写入序号
;;;937    		ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_SET_TOOL_RANK, 0x01);		 // 设置数据长度和添加校验
;;;938    		break;
;;;939    
;;;940    	// 0x20:获取工具序列号
;;;941    	case UART_ARM_CMD_GET_TOOL_RANK:
;;;942    		dut_info.toolRank = SPI_FLASH_ReadByte(SPI_FLASH_TOOL_RANK_ADDEESS);
;;;943    		ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);		// 添加命令头
;;;944    		ARM_PROTOCOL_TxAddData(UART_ARM_CMD_GET_TOOL_RANK); // 添加命令字
;;;945    		ARM_PROTOCOL_TxAddData(0x00);						// 添加临时长度
;;;946    		ARM_PROTOCOL_TxAddData(dut_info.toolRank);
;;;947    		ARM_PROTOCOL_TxAddFrame();
;;;948    		break;
;;;949    
;;;950    	// 写入DUT参数（命令字=0x30
;;;951    	case UART_DUT_CMD_UP_CONFIG:
;;;952    		// 读取配置信息的flash区，然后写入DUT
;;;953    		dataLen = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX];
;;;954    		writeRes = SPI_FLASH_WriteWithCheck(&(pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX]), SPI_FLASH_DUT_CONFIG_ADDEESS, dataLen);
;;;955    		// 返回信息给安卓机
;;;956    		ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_CONFIG, writeRes);
;;;957    		break;
;;;958    
;;;959    	case UART_DUT_CMD_UP_UI: // UI数据写入（命令字=0x31）
;;;960    		// 读取UI的flash区，然后写入DUT
;;;961    		packetSize = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;962    		addr1 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;963    		addr2 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;964    		addr3 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX];
;;;965    		addr4 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX];
;;;966    		writeAddr = (addr1 << 24) | (addr2 << 16) | (addr3 << 8) | (addr4);
;;;967    		if (currPacketNum != writeAddr)
;;;968    		{
;;;969    			dut_info.uiSize++;
;;;970    			currPacketNum = writeAddr;
;;;971    		}
;;;972    		writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_DUT_UI_ADDEESS + writeAddr, packetSize);
;;;973    		// 返回信息给安卓机
;;;974    		ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_UI, writeRes);
;;;975    		break;
;;;976    
;;;977    	// BOOT数据写入（命令字=0x32）
;;;978    	case UART_DUT_CMD_UP_BOOT:
;;;979    		// 读取BOOT的flash区，然后写入DUT
;;;980    		packetSize = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;981    		addr1 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;982    		addr2 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;983    		addr3 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX];
;;;984    		addr4 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX];
;;;985    		writeAddr = (addr1 << 24) | (addr2 << 16) | (addr3 << 8) | (addr4);
;;;986    		if (currPacketNum != writeAddr)
;;;987    		{
;;;988    			dut_info.bootSize++;
;;;989    			currPacketNum = writeAddr;
;;;990    		}
;;;991    		writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_DUT_BOOT_ADDEESS + writeAddr, packetSize);
;;;992    		// 返回信息给安卓机
;;;993    		ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_BOOT, writeRes);
;;;994    		break;
;;;995    
;;;996    	// APP数据写入（命令字=0x33）
;;;997    	case UART_DUT_CMD_UP_APP:
;;;998    		packetSize = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;999    		addr1 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;1000   		addr2 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;1001   		addr3 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX];
;;;1002   		addr4 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX];
;;;1003   		writeAddr = (addr1 << 24) | (addr2 << 16) | (addr3 << 8) | (addr4);
;;;1004   		if (currPacketNum != writeAddr)
;;;1005   		{
;;;1006   			dut_info.appSize++;
;;;1007   			currPacketNum = writeAddr;
;;;1008   		}
;;;1009   		writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_DUT_APP_ADDEESS + writeAddr, packetSize);
;;;1010   		ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_APP, writeRes);
;;;1011   		break;
;;;1012   
;;;1013   	// 升级项结束（命令字=0x34）
;;;1014   	case UART_DUT_CMD_UP_END:
;;;1015   		endItem = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;1016   		switch (endItem)
;;;1017   		{
;;;1018   		case 0:
;;;1019   			SPI_FLASH_EraseSector(SPI_FLASH_DUT_BOOT_SIZE_ADDEESS);
;;;1020   			size[0] = dut_info.bootSize >> 24;
;;;1021   			size[1] = dut_info.bootSize >> 16;
;;;1022   			size[2] = dut_info.bootSize >> 8;
;;;1023   			size[3] = dut_info.bootSize;
;;;1024   			SPI_FLASH_WriteArray(size, SPI_FLASH_DUT_BOOT_SIZE_ADDEESS, 4);
;;;1025   			break;
;;;1026   		case 1:
;;;1027   			SPI_FLASH_EraseSector(SPI_FLASH_DUT_APP_SIZE_ADDEESS);
;;;1028   			size[0] = dut_info.appSize >> 24;
;;;1029   			size[1] = dut_info.appSize >> 16;
;;;1030   			size[2] = dut_info.appSize >> 8;
;;;1031   			size[3] = dut_info.appSize;
;;;1032   			SPI_FLASH_WriteArray(size, SPI_FLASH_DUT_APP_SIZE_ADDEESS, 4);
;;;1033   			break;
;;;1034   		case 2:
;;;1035   			SPI_FLASH_EraseSector(SPI_FLASH_DUT_UI_SIZE_ADDEESS);
;;;1036   			size[0] = dut_info.uiSize >> 24;
;;;1037   			size[1] = dut_info.uiSize >> 16;
;;;1038   			size[2] = dut_info.uiSize >> 8;
;;;1039   			size[3] = dut_info.uiSize;
;;;1040   			SPI_FLASH_WriteArray(size, SPI_FLASH_DUT_UI_SIZE_ADDEESS, 4);
;;;1041   			break;
;;;1042   		}
;;;1043   		currPacketNum = 0xFFFF;
;;;1044   		// 返回信息给安卓机
;;;1045   		ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_END, endItem);
;;;1046   		break;
;;;1047   
;;;1048   	default:
;;;1049   		break;
;;;1050   	}
;;;1051   
;;;1052   	// 删除命令帧
;;;1053   	pCB->rx.head++;
;;;1054   	pCB->rx.head %= ARM_PROTOCOL_RX_QUEUE_SIZE;
;;;1055   }
00003c  b01b              ADD      sp,sp,#0x6c
00003e  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.66|
000042  f8b51434          LDRH     r1,[r5,#0x434]        ;727
000046  f8b50436          LDRH     r0,[r5,#0x436]        ;727
00004a  4281              CMP      r1,r0                 ;727
00004c  d100              BNE      |L2.80|
00004e  e7f5              B        |L2.60|
                  |L2.80|
000050  f8b50434          LDRH     r0,[r5,#0x434]        ;733
000054  214d              MOVS     r1,#0x4d              ;733
000056  4348              MULS     r0,r1,r0              ;733
000058  f5057199          ADD      r1,r5,#0x132          ;733
00005c  eb010440          ADD      r4,r1,r0,LSL #1       ;733
000060  78a0              LDRB     r0,[r4,#2]            ;736
000062  2855              CMP      r0,#0x55              ;736
000064  d00e              BEQ      |L2.132|
000066  f8b50434          LDRH     r0,[r5,#0x434]        ;739
00006a  1c40              ADDS     r0,r0,#1              ;739
00006c  f8a50434          STRH     r0,[r5,#0x434]        ;739
000070  f8b50434          LDRH     r0,[r5,#0x434]        ;740
000074  2105              MOVS     r1,#5                 ;740
000076  fb90f2f1          SDIV     r2,r0,r1              ;740
00007a  fb010012          MLS      r0,r1,r2,r0           ;740
00007e  f8a50434          STRH     r0,[r5,#0x434]        ;740
000082  e7db              B        |L2.60|
                  |L2.132|
000084  78e0              LDRB     r0,[r4,#3]            ;745
000086  901a              STR      r0,[sp,#0x68]         ;745
000088  981a              LDR      r0,[sp,#0x68]         ;748
00008a  2818              CMP      r0,#0x18              ;748
00008c  d07e              BEQ      |L2.396|
00008e  dc09              BGT      |L2.164|
000090  f1a00010          SUB      r0,r0,#0x10           ;748
000094  2808              CMP      r0,#8                 ;748
000096  d27a              BCS      |L2.398|
000098  e8dff000          TBB      [pc,r0]               ;748
00009c  1544517f          DCB      0x15,0x44,0x51,0x7f
0000a0  acbdbef6          DCB      0xac,0xbd,0xbe,0xf6
                  |L2.164|
0000a4  2831              CMP      r0,#0x31              ;748
0000a6  d073              BEQ      |L2.400|
0000a8  dc06              BGT      |L2.184|
0000aa  2819              CMP      r0,#0x19              ;748
0000ac  d071              BEQ      |L2.402|
0000ae  281a              CMP      r0,#0x1a              ;748
0000b0  d070              BEQ      |L2.404|
0000b2  2830              CMP      r0,#0x30              ;748
                  |L2.180|
0000b4  d16b              BNE      |L2.398|
0000b6  e199              B        |L2.1004|
                  |L2.184|
0000b8  2832              CMP      r0,#0x32              ;748
0000ba  d06c              BEQ      |L2.406|
0000bc  2833              CMP      r0,#0x33              ;748
0000be  d06b              BEQ      |L2.408|
0000c0  2834              CMP      r0,#0x34              ;748
0000c2  d1f7              BNE      |L2.180|
0000c4  e23e              B        |L2.1348|
0000c6  2203              MOVS     r2,#3                 ;752
0000c8  f44f11b2          MOV      r1,#0x164000          ;752
0000cc  a819              ADD      r0,sp,#0x64           ;752
0000ce  f7fffffe          BL       SPI_FLASH_ReadArray
0000d2  2203              MOVS     r2,#3                 ;753
0000d4  49fa              LDR      r1,|L2.1216|
0000d6  a818              ADD      r0,sp,#0x60           ;753
0000d8  f7fffffe          BL       SPI_FLASH_ReadArray
0000dc  2055              MOVS     r0,#0x55              ;754
0000de  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0000e2  2010              MOVS     r0,#0x10              ;755
0000e4  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0000e8  2000              MOVS     r0,#0                 ;756
0000ea  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0000ee  f89d0064          LDRB     r0,[sp,#0x64]         ;757
0000f2  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0000f6  f89d0065          LDRB     r0,[sp,#0x65]         ;758
0000fa  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0000fe  f89d0066          LDRB     r0,[sp,#0x66]         ;759
000102  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000106  f89d0060          LDRB     r0,[sp,#0x60]         ;760
00010a  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00010e  f89d0061          LDRB     r0,[sp,#0x61]         ;761
000112  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000116  f89d0062          LDRB     r0,[sp,#0x62]         ;762
00011a  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00011e  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
000122  e27d              B        |L2.1568|
000124  f44f2180          MOV      r1,#0x40000           ;769
000128  2000              MOVS     r0,#0                 ;769
00012a  f7fffffe          BL       SPI_FLASH_EraseRoom
00012e  2000              MOVS     r0,#0                 ;771
000130  49e4              LDR      r1,|L2.1220|
000132  6008              STR      r0,[r1,#0]            ;771  ; allPacketSize
000134  2101              MOVS     r1,#1                 ;772
000136  2011              MOVS     r0,#0x11              ;772
000138  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
00013c  e270              B        |L2.1568|
00013e  7920              LDRB     r0,[r4,#4]            ;778
000140  1f00              SUBS     r0,r0,#4              ;778
000142  b2c0              UXTB     r0,r0                 ;778
000144  9009              STR      r0,[sp,#0x24]         ;778
000146  f894a005          LDRB     r10,[r4,#5]           ;779
00014a  f894b006          LDRB     r11,[r4,#6]           ;780
00014e  79e0              LDRB     r0,[r4,#7]            ;781
000150  9008              STR      r0,[sp,#0x20]         ;781
000152  7a20              LDRB     r0,[r4,#8]            ;782
000154  9007              STR      r0,[sp,#0x1c]         ;782
000156  ea4f600a          LSL      r0,r10,#24            ;783
00015a  ea40410b          ORR      r1,r0,r11,LSL #16     ;783
00015e  9808              LDR      r0,[sp,#0x20]         ;783
000160  ea412000          ORR      r0,r1,r0,LSL #8       ;783
000164  9907              LDR      r1,[sp,#0x1c]         ;783
000166  ea400601          ORR      r6,r0,r1              ;783
00016a  4631              MOV      r1,r6                 ;786
00016c  f1040009          ADD      r0,r4,#9              ;786
000170  9a09              LDR      r2,[sp,#0x24]         ;786
000172  f7fffffe          BL       SPI_FLASH_WriteWithCheck
000176  4607              MOV      r7,r0                 ;786
000178  4639              MOV      r1,r7                 ;789
00017a  2012              MOVS     r0,#0x12              ;789
00017c  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000180  48d0              LDR      r0,|L2.1220|
000182  6800              LDR      r0,[r0,#0]            ;790  ; allPacketSize
000184  1c40              ADDS     r0,r0,#1              ;790
000186  49cf              LDR      r1,|L2.1220|
000188  6008              STR      r0,[r1,#0]            ;790  ; allPacketSize
00018a  e249              B        |L2.1568|
                  |L2.396|
00018c  e0c5              B        |L2.794|
                  |L2.398|
00018e  e246              B        |L2.1566|
                  |L2.400|
000190  e13a              B        |L2.1032|
                  |L2.402|
000192  e102              B        |L2.922|
                  |L2.404|
000194  e113              B        |L2.958|
                  |L2.406|
000196  e165              B        |L2.1124|
                  |L2.408|
000198  e1a6              B        |L2.1256|
00019a  48ca              LDR      r0,|L2.1220|
00019c  6800              LDR      r0,[r0,#0]            ;797  ; allPacketSize
00019e  0e00              LSRS     r0,r0,#24             ;797
0001a0  49c9              LDR      r1,|L2.1224|
0001a2  7008              STRB     r0,[r1,#0]            ;797
0001a4  48c7              LDR      r0,|L2.1220|
0001a6  6800              LDR      r0,[r0,#0]            ;798  ; allPacketSize
0001a8  0c00              LSRS     r0,r0,#16             ;798
0001aa  7048              STRB     r0,[r1,#1]            ;798
0001ac  48c5              LDR      r0,|L2.1220|
0001ae  8800              LDRH     r0,[r0,#0]            ;799  ; allPacketSize
0001b0  0a00              LSRS     r0,r0,#8              ;799
0001b2  7088              STRB     r0,[r1,#2]            ;799
0001b4  48c3              LDR      r0,|L2.1220|
0001b6  7800              LDRB     r0,[r0,#0]            ;800  ; allPacketSize
0001b8  70c8              STRB     r0,[r1,#3]            ;800
0001ba  48c4              LDR      r0,|L2.1228|
0001bc  f7fffffe          BL       SPI_FLASH_EraseSector
0001c0  f44f10b1          MOV      r0,#0x162000          ;803
0001c4  f7fffffe          BL       SPI_FLASH_EraseSector
0001c8  21aa              MOVS     r1,#0xaa              ;805
0001ca  48c0              LDR      r0,|L2.1228|
0001cc  f7fffffe          BL       SPI_FLASH_WriteByte
0001d0  2204              MOVS     r2,#4                 ;806
0001d2  f44f11b1          MOV      r1,#0x162000          ;806
0001d6  48bc              LDR      r0,|L2.1224|
0001d8  f7fffffe          BL       SPI_FLASH_WriteArray
0001dc  2013              MOVS     r0,#0x13              ;808
0001de  f7fffffe          BL       ARM_PROTOCOL_SendCmdAck
0001e2  2001              MOVS     r0,#1                 ;811
0001e4  9000              STR      r0,[sp,#0]            ;811
0001e6  06c3              LSLS     r3,r0,#27             ;811
0001e8  4ab9              LDR      r2,|L2.1232|
0001ea  2164              MOVS     r1,#0x64              ;811
0001ec  9001              STR      r0,[sp,#4]            ;811
0001ee  f7fffffe          BL       TIMER_AddTask
0001f2  e215              B        |L2.1568|
0001f4  7960              LDRB     r0,[r4,#5]            ;821
0001f6  9017              STR      r0,[sp,#0x5c]         ;821
0001f8  79a0              LDRB     r0,[r4,#6]            ;822
0001fa  9004              STR      r0,[sp,#0x10]         ;822
0001fc  9904              LDR      r1,[sp,#0x10]         ;825
0001fe  9817              LDR      r0,[sp,#0x5c]         ;825
000200  f7fffffe          BL       setUpItem
000204  f7fffffe          BL       setDutProgressReportInfo
000208  f7fffffe          BL       enterState
00020c  2101              MOVS     r1,#1                 ;834
00020e  2014              MOVS     r0,#0x14              ;834
000210  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000214  e204              B        |L2.1568|
000216  e203              B        |L2.1568|
000218  f8949005          LDRB     r9,[r4,#5]            ;844
00021c  f0090001          AND      r0,r9,#1              ;845
000220  b138              CBZ      r0,|L2.562|
000222  2000              MOVS     r0,#0                 ;848
000224  49ab              LDR      r1,|L2.1236|
000226  61c8              STR      r0,[r1,#0x1c]         ;848  ; dut_info
000228  f44f3100          MOV      r1,#0x20000           ;849
00022c  0048              LSLS     r0,r1,#1              ;849
00022e  f7fffffe          BL       SPI_FLASH_EraseRoom
                  |L2.562|
000232  f0090002          AND      r0,r9,#2              ;851
000236  2802              CMP      r0,#2                 ;851
000238  d108              BNE      |L2.588|
00023a  2000              MOVS     r0,#0                 ;854
00023c  49a5              LDR      r1,|L2.1236|
00023e  6208              STR      r0,[r1,#0x20]         ;854  ; dut_info
000240  f44f1180          MOV      r1,#0x100000          ;855
000244  f44f20c0          MOV      r0,#0x60000           ;855
000248  f7fffffe          BL       SPI_FLASH_EraseRoom
                  |L2.588|
00024c  f0090004          AND      r0,r9,#4              ;857
000250  2804              CMP      r0,#4                 ;857
000252  d108              BNE      |L2.614|
000254  2000              MOVS     r0,#0                 ;860
000256  499f              LDR      r1,|L2.1236|
000258  6248              STR      r0,[r1,#0x24]         ;860  ; dut_info
00025a  f44f0160          MOV      r1,#0xe00000          ;861
00025e  f44f1000          MOV      r0,#0x200000          ;861
000262  f7fffffe          BL       SPI_FLASH_EraseRoom
                  |L2.614|
000266  f0090008          AND      r0,r9,#8              ;863
00026a  2808              CMP      r0,#8                 ;863
00026c  d103              BNE      |L2.630|
00026e  f44f10b0          MOV      r0,#0x160000          ;866
000272  f7fffffe          BL       SPI_FLASH_EraseSector
                  |L2.630|
000276  4898              LDR      r0,|L2.1240|
000278  f7fffffe          BL       SPI_FLASH_EraseSector
00027c  2101              MOVS     r1,#1                 ;869
00027e  2016              MOVS     r0,#0x16              ;869
000280  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000284  e1cc              B        |L2.1568|
000286  e7ff              B        |L2.648|
                  |L2.648|
000288  7920              LDRB     r0,[r4,#4]            ;875
00028a  1f80              SUBS     r0,r0,#6              ;875
00028c  b2c0              UXTB     r0,r0                 ;875
00028e  9003              STR      r0,[sp,#0xc]          ;875
000290  f04f0800          MOV      r8,#0                 ;877
000294  e00a              B        |L2.684|
                  |L2.662|
000296  1ca1              ADDS     r1,r4,#2              ;879
000298  f1080009          ADD      r0,r8,#9              ;879
00029c  5c08              LDRB     r0,[r1,r0]            ;879
00029e  a90a              ADD      r1,sp,#0x28           ;879
0002a0  f8010008          STRB     r0,[r1,r8]            ;879
0002a4  f1080001          ADD      r0,r8,#1              ;877
0002a8  f00008ff          AND      r8,r0,#0xff           ;877
                  |L2.684|
0002ac  9803              LDR      r0,[sp,#0xc]          ;877
0002ae  4580              CMP      r8,r0                 ;877
0002b0  dbf1              BLT      |L2.662|
0002b2  9803              LDR      r0,[sp,#0xc]          ;881
0002b4  f88d003c          STRB     r0,[sp,#0x3c]         ;881
0002b8  7960              LDRB     r0,[r4,#5]            ;882
0002ba  f88d003d          STRB     r0,[sp,#0x3d]         ;882
0002be  79a0              LDRB     r0,[r4,#6]            ;883
0002c0  f88d003e          STRB     r0,[sp,#0x3e]         ;883
0002c4  79e0              LDRB     r0,[r4,#7]            ;884
0002c6  f88d003f          STRB     r0,[sp,#0x3f]         ;884
0002ca  7a20              LDRB     r0,[r4,#8]            ;885
0002cc  f88d0040          STRB     r0,[sp,#0x40]         ;885
0002d0  7a60              LDRB     r0,[r4,#9]            ;886
0002d2  f88d0041          STRB     r0,[sp,#0x41]         ;886
0002d6  7aa0              LDRB     r0,[r4,#0xa]          ;887
0002d8  f88d0042          STRB     r0,[sp,#0x42]         ;887
0002dc  487e              LDR      r0,|L2.1240|
0002de  f7fffffe          BL       SPI_FLASH_EraseSector
0002e2  221e              MOVS     r2,#0x1e              ;891
0002e4  497c              LDR      r1,|L2.1240|
0002e6  a80a              ADD      r0,sp,#0x28           ;891
0002e8  f7fffffe          BL       SPI_FLASH_WriteWithCheck
0002ec  4607              MOV      r7,r0                 ;891
0002ee  b17f              CBZ      r7,|L2.784|
0002f0  f7fffffe          BL       DutInfoUpdata
0002f4  4877              LDR      r0,|L2.1236|
0002f6  7d00              LDRB     r0,[r0,#0x14]         ;896  ; dut_info
0002f8  b128              CBZ      r0,|L2.774|
0002fa  f44f5180          MOV      r1,#0x1000            ;898
0002fe  4877              LDR      r0,|L2.1244|
000300  f7fffffe          BL       gpio_bit_set
000304  e004              B        |L2.784|
                  |L2.774|
000306  f44f5180          MOV      r1,#0x1000            ;902
00030a  4874              LDR      r0,|L2.1244|
00030c  f7fffffe          BL       gpio_bit_reset
                  |L2.784|
000310  4639              MOV      r1,r7                 ;906
000312  2017              MOVS     r0,#0x17              ;906
000314  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000318  e182              B        |L2.1568|
                  |L2.794|
00031a  221e              MOVS     r2,#0x1e              ;911
00031c  496e              LDR      r1,|L2.1240|
00031e  a80a              ADD      r0,sp,#0x28           ;911
000320  f7fffffe          BL       SPI_FLASH_ReadArray
000324  f89d003c          LDRB     r0,[sp,#0x3c]         ;912
000328  28ff              CMP      r0,#0xff              ;912
00032a  d102              BNE      |L2.818|
00032c  200a              MOVS     r0,#0xa               ;914
00032e  f88d003c          STRB     r0,[sp,#0x3c]         ;914
                  |L2.818|
000332  2055              MOVS     r0,#0x55              ;916
000334  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000338  2018              MOVS     r0,#0x18              ;917
00033a  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00033e  2000              MOVS     r0,#0                 ;918
000340  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000344  f89d003d          LDRB     r0,[sp,#0x3d]         ;919
000348  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00034c  f89d003e          LDRB     r0,[sp,#0x3e]         ;920
000350  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000354  f89d003f          LDRB     r0,[sp,#0x3f]         ;921
000358  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00035c  f89d0040          LDRB     r0,[sp,#0x40]         ;922
000360  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000364  f89d0041          LDRB     r0,[sp,#0x41]         ;923
000368  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00036c  f89d0042          LDRB     r0,[sp,#0x42]         ;924
000370  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000374  f04f0800          MOV      r8,#0                 ;925
000378  e008              B        |L2.908|
                  |L2.890|
00037a  a90a              ADD      r1,sp,#0x28           ;927
00037c  f8110008          LDRB     r0,[r1,r8]            ;927
000380  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000384  f1080001          ADD      r0,r8,#1              ;925
000388  f00008ff          AND      r8,r0,#0xff           ;925
                  |L2.908|
00038c  f89d003c          LDRB     r0,[sp,#0x3c]         ;925
000390  4540              CMP      r0,r8                 ;925
000392  dcf2              BGT      |L2.890|
000394  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
000398  e142              B        |L2.1568|
                  |L2.922|
00039a  4851              LDR      r0,|L2.1248|
00039c  f7fffffe          BL       SPI_FLASH_EraseSector
0003a0  7960              LDRB     r0,[r4,#5]            ;935
0003a2  494c              LDR      r1,|L2.1236|
0003a4  f8810044          STRB     r0,[r1,#0x44]         ;935
0003a8  4608              MOV      r0,r1                 ;936
0003aa  f8901044          LDRB     r1,[r0,#0x44]         ;936  ; dut_info
0003ae  484c              LDR      r0,|L2.1248|
0003b0  f7fffffe          BL       SPI_FLASH_WriteByte
0003b4  2101              MOVS     r1,#1                 ;937
0003b6  2019              MOVS     r0,#0x19              ;937
0003b8  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
0003bc  e130              B        |L2.1568|
                  |L2.958|
0003be  4848              LDR      r0,|L2.1248|
0003c0  f7fffffe          BL       SPI_FLASH_ReadByte
0003c4  4943              LDR      r1,|L2.1236|
0003c6  f8810044          STRB     r0,[r1,#0x44]         ;942
0003ca  2055              MOVS     r0,#0x55              ;943
0003cc  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0003d0  201a              MOVS     r0,#0x1a              ;944
0003d2  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0003d6  2000              MOVS     r0,#0                 ;945
0003d8  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0003dc  493d              LDR      r1,|L2.1236|
0003de  f8910044          LDRB     r0,[r1,#0x44]         ;946  ; dut_info
0003e2  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0003e6  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
0003ea  e119              B        |L2.1568|
                  |L2.1004|
0003ec  7920              LDRB     r0,[r4,#4]            ;953
0003ee  9006              STR      r0,[sp,#0x18]         ;953
0003f0  f44f11b0          MOV      r1,#0x160000          ;954
0003f4  1d60              ADDS     r0,r4,#5              ;954
0003f6  9a06              LDR      r2,[sp,#0x18]         ;954
0003f8  f7fffffe          BL       SPI_FLASH_WriteWithCheck
0003fc  4607              MOV      r7,r0                 ;954
0003fe  4639              MOV      r1,r7                 ;956
000400  2030              MOVS     r0,#0x30              ;956
000402  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000406  e10b              B        |L2.1568|
                  |L2.1032|
000408  7920              LDRB     r0,[r4,#4]            ;961
00040a  1f00              SUBS     r0,r0,#4              ;961
00040c  b2c0              UXTB     r0,r0                 ;961
00040e  9009              STR      r0,[sp,#0x24]         ;961
000410  f894a005          LDRB     r10,[r4,#5]           ;962
000414  f894b006          LDRB     r11,[r4,#6]           ;963
000418  79e0              LDRB     r0,[r4,#7]            ;964
00041a  9008              STR      r0,[sp,#0x20]         ;964
00041c  7a20              LDRB     r0,[r4,#8]            ;965
00041e  9007              STR      r0,[sp,#0x1c]         ;965
000420  ea4f600a          LSL      r0,r10,#24            ;966
000424  ea40410b          ORR      r1,r0,r11,LSL #16     ;966
000428  9808              LDR      r0,[sp,#0x20]         ;966
00042a  ea412000          ORR      r0,r1,r0,LSL #8       ;966
00042e  9907              LDR      r1,[sp,#0x1c]         ;966
000430  ea400601          ORR      r6,r0,r1              ;966
000434  482b              LDR      r0,|L2.1252|
000436  6800              LDR      r0,[r0,#0]            ;967  ; currPacketNum
000438  42b0              CMP      r0,r6                 ;967
00043a  d006              BEQ      |L2.1098|
00043c  4825              LDR      r0,|L2.1236|
00043e  6a40              LDR      r0,[r0,#0x24]         ;969  ; dut_info
000440  1c40              ADDS     r0,r0,#1              ;969
000442  4924              LDR      r1,|L2.1236|
000444  6248              STR      r0,[r1,#0x24]         ;969  ; dut_info
000446  4827              LDR      r0,|L2.1252|
000448  6006              STR      r6,[r0,#0]            ;970  ; currPacketNum
                  |L2.1098|
00044a  f5061100          ADD      r1,r6,#0x200000       ;972
00044e  f1040009          ADD      r0,r4,#9              ;972
000452  9a09              LDR      r2,[sp,#0x24]         ;972
000454  f7fffffe          BL       SPI_FLASH_WriteWithCheck
000458  4607              MOV      r7,r0                 ;972
00045a  4639              MOV      r1,r7                 ;974
00045c  2031              MOVS     r0,#0x31              ;974
00045e  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000462  e0dd              B        |L2.1568|
                  |L2.1124|
000464  7920              LDRB     r0,[r4,#4]            ;980
000466  1f00              SUBS     r0,r0,#4              ;980
000468  b2c0              UXTB     r0,r0                 ;980
00046a  9009              STR      r0,[sp,#0x24]         ;980
00046c  f894a005          LDRB     r10,[r4,#5]           ;981
000470  f894b006          LDRB     r11,[r4,#6]           ;982
000474  79e0              LDRB     r0,[r4,#7]            ;983
000476  9008              STR      r0,[sp,#0x20]         ;983
000478  7a20              LDRB     r0,[r4,#8]            ;984
00047a  9007              STR      r0,[sp,#0x1c]         ;984
00047c  ea4f600a          LSL      r0,r10,#24            ;985
000480  ea40410b          ORR      r1,r0,r11,LSL #16     ;985
000484  9808              LDR      r0,[sp,#0x20]         ;985
000486  ea412000          ORR      r0,r1,r0,LSL #8       ;985
00048a  9907              LDR      r1,[sp,#0x1c]         ;985
00048c  ea400601          ORR      r6,r0,r1              ;985
000490  4814              LDR      r0,|L2.1252|
000492  6800              LDR      r0,[r0,#0]            ;986  ; currPacketNum
000494  42b0              CMP      r0,r6                 ;986
000496  d006              BEQ      |L2.1190|
000498  480e              LDR      r0,|L2.1236|
00049a  69c0              LDR      r0,[r0,#0x1c]         ;988  ; dut_info
00049c  1c40              ADDS     r0,r0,#1              ;988
00049e  490d              LDR      r1,|L2.1236|
0004a0  61c8              STR      r0,[r1,#0x1c]         ;988  ; dut_info
0004a2  4810              LDR      r0,|L2.1252|
0004a4  6006              STR      r6,[r0,#0]            ;989  ; currPacketNum
                  |L2.1190|
0004a6  f5062180          ADD      r1,r6,#0x40000        ;991
0004aa  f1040009          ADD      r0,r4,#9              ;991
0004ae  9a09              LDR      r2,[sp,#0x24]         ;991
0004b0  f7fffffe          BL       SPI_FLASH_WriteWithCheck
0004b4  4607              MOV      r7,r0                 ;991
0004b6  4639              MOV      r1,r7                 ;993
0004b8  2032              MOVS     r0,#0x32              ;993
0004ba  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
0004be  e0af              B        |L2.1568|
                  |L2.1216|
                          DCD      0x00165000
                  |L2.1220|
                          DCD      allPacketSize
                  |L2.1224|
                          DCD      allPacket
                  |L2.1228|
                          DCD      0x00161000
                  |L2.1232|
                          DCD      IAP_JumpToAppFun
                  |L2.1236|
                          DCD      dut_info
                  |L2.1240|
                          DCD      0x00163000
                  |L2.1244|
                          DCD      0x40011800
                  |L2.1248|
                          DCD      0x00169000
                  |L2.1252|
                          DCD      currPacketNum
                  |L2.1256|
0004e8  7920              LDRB     r0,[r4,#4]            ;998
0004ea  1f00              SUBS     r0,r0,#4              ;998
0004ec  b2c0              UXTB     r0,r0                 ;998
0004ee  9009              STR      r0,[sp,#0x24]         ;998
0004f0  f894a005          LDRB     r10,[r4,#5]           ;999
0004f4  f894b006          LDRB     r11,[r4,#6]           ;1000
0004f8  79e0              LDRB     r0,[r4,#7]            ;1001
0004fa  9008              STR      r0,[sp,#0x20]         ;1001
0004fc  7a20              LDRB     r0,[r4,#8]            ;1002
0004fe  9007              STR      r0,[sp,#0x1c]         ;1002
000500  ea4f600a          LSL      r0,r10,#24            ;1003
000504  ea40410b          ORR      r1,r0,r11,LSL #16     ;1003
000508  9808              LDR      r0,[sp,#0x20]         ;1003
00050a  ea412000          ORR      r0,r1,r0,LSL #8       ;1003
00050e  9907              LDR      r1,[sp,#0x1c]         ;1003
000510  ea400601          ORR      r6,r0,r1              ;1003
000514  484b              LDR      r0,|L2.1604|
000516  6800              LDR      r0,[r0,#0]            ;1004  ; currPacketNum
000518  42b0              CMP      r0,r6                 ;1004
00051a  d006              BEQ      |L2.1322|
00051c  484a              LDR      r0,|L2.1608|
00051e  6a00              LDR      r0,[r0,#0x20]         ;1006  ; dut_info
000520  1c40              ADDS     r0,r0,#1              ;1006
000522  4949              LDR      r1,|L2.1608|
000524  6208              STR      r0,[r1,#0x20]         ;1006  ; dut_info
000526  4847              LDR      r0,|L2.1604|
000528  6006              STR      r6,[r0,#0]            ;1007  ; currPacketNum
                  |L2.1322|
00052a  f50621c0          ADD      r1,r6,#0x60000        ;1009
00052e  f1040009          ADD      r0,r4,#9              ;1009
000532  9a09              LDR      r2,[sp,#0x24]         ;1009
000534  f7fffffe          BL       SPI_FLASH_WriteWithCheck
000538  4607              MOV      r7,r0                 ;1009
00053a  4639              MOV      r1,r7                 ;1010
00053c  2033              MOVS     r0,#0x33              ;1010
00053e  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000542  e06d              B        |L2.1568|
                  |L2.1348|
000544  7960              LDRB     r0,[r4,#5]            ;1015
000546  9005              STR      r0,[sp,#0x14]         ;1015
000548  9805              LDR      r0,[sp,#0x14]         ;1016
00054a  b120              CBZ      r0,|L2.1366|
00054c  2801              CMP      r0,#1                 ;1016
00054e  d020              BEQ      |L2.1426|
000550  2802              CMP      r0,#2                 ;1016
000552  d15a              BNE      |L2.1546|
000554  e03a              B        |L2.1484|
                  |L2.1366|
000556  f44f10b3          MOV      r0,#0x166000          ;1019
00055a  f7fffffe          BL       SPI_FLASH_EraseSector
00055e  483a              LDR      r0,|L2.1608|
000560  69c0              LDR      r0,[r0,#0x1c]         ;1020  ; dut_info
000562  0e00              LSRS     r0,r0,#24             ;1020
000564  f88d0008          STRB     r0,[sp,#8]            ;1020
000568  4837              LDR      r0,|L2.1608|
00056a  69c0              LDR      r0,[r0,#0x1c]         ;1021  ; dut_info
00056c  0c00              LSRS     r0,r0,#16             ;1021
00056e  f88d0009          STRB     r0,[sp,#9]            ;1021
000572  4835              LDR      r0,|L2.1608|
000574  8b80              LDRH     r0,[r0,#0x1c]         ;1022  ; dut_info
000576  0a00              LSRS     r0,r0,#8              ;1022
000578  f88d000a          STRB     r0,[sp,#0xa]          ;1022
00057c  4832              LDR      r0,|L2.1608|
00057e  7f00              LDRB     r0,[r0,#0x1c]         ;1023  ; dut_info
000580  f88d000b          STRB     r0,[sp,#0xb]          ;1023
000584  2204              MOVS     r2,#4                 ;1024
000586  f44f11b3          MOV      r1,#0x166000          ;1024
00058a  a802              ADD      r0,sp,#8              ;1024
00058c  f7fffffe          BL       SPI_FLASH_WriteArray
000590  e03b              B        |L2.1546|
                  |L2.1426|
000592  482e              LDR      r0,|L2.1612|
000594  f7fffffe          BL       SPI_FLASH_EraseSector
000598  482b              LDR      r0,|L2.1608|
00059a  6a00              LDR      r0,[r0,#0x20]         ;1028  ; dut_info
00059c  0e00              LSRS     r0,r0,#24             ;1028
00059e  f88d0008          STRB     r0,[sp,#8]            ;1028
0005a2  4829              LDR      r0,|L2.1608|
0005a4  6a00              LDR      r0,[r0,#0x20]         ;1029  ; dut_info
0005a6  0c00              LSRS     r0,r0,#16             ;1029
0005a8  f88d0009          STRB     r0,[sp,#9]            ;1029
0005ac  4826              LDR      r0,|L2.1608|
0005ae  8c00              LDRH     r0,[r0,#0x20]         ;1030  ; dut_info
0005b0  0a00              LSRS     r0,r0,#8              ;1030
0005b2  f88d000a          STRB     r0,[sp,#0xa]          ;1030
0005b6  4824              LDR      r0,|L2.1608|
0005b8  f8900020          LDRB     r0,[r0,#0x20]         ;1031  ; dut_info
0005bc  f88d000b          STRB     r0,[sp,#0xb]          ;1031
0005c0  2204              MOVS     r2,#4                 ;1032
0005c2  4922              LDR      r1,|L2.1612|
0005c4  a802              ADD      r0,sp,#8              ;1032
0005c6  f7fffffe          BL       SPI_FLASH_WriteArray
0005ca  e01e              B        |L2.1546|
                  |L2.1484|
0005cc  f44f10b4          MOV      r0,#0x168000          ;1035
0005d0  f7fffffe          BL       SPI_FLASH_EraseSector
0005d4  481c              LDR      r0,|L2.1608|
0005d6  6a40              LDR      r0,[r0,#0x24]         ;1036  ; dut_info
0005d8  0e00              LSRS     r0,r0,#24             ;1036
0005da  f88d0008          STRB     r0,[sp,#8]            ;1036
0005de  481a              LDR      r0,|L2.1608|
0005e0  6a40              LDR      r0,[r0,#0x24]         ;1037  ; dut_info
0005e2  0c00              LSRS     r0,r0,#16             ;1037
0005e4  f88d0009          STRB     r0,[sp,#9]            ;1037
0005e8  4817              LDR      r0,|L2.1608|
0005ea  8c80              LDRH     r0,[r0,#0x24]         ;1038  ; dut_info
0005ec  0a00              LSRS     r0,r0,#8              ;1038
0005ee  f88d000a          STRB     r0,[sp,#0xa]          ;1038
0005f2  4815              LDR      r0,|L2.1608|
0005f4  f8900024          LDRB     r0,[r0,#0x24]         ;1039  ; dut_info
0005f8  f88d000b          STRB     r0,[sp,#0xb]          ;1039
0005fc  2204              MOVS     r2,#4                 ;1040
0005fe  f44f11b4          MOV      r1,#0x168000          ;1040
000602  a802              ADD      r0,sp,#8              ;1040
000604  f7fffffe          BL       SPI_FLASH_WriteArray
000608  bf00              NOP                            ;1041
                  |L2.1546|
00060a  bf00              NOP                            ;1025
00060c  f64f70ff          MOV      r0,#0xffff            ;1043
000610  490c              LDR      r1,|L2.1604|
000612  6008              STR      r0,[r1,#0]            ;1043  ; currPacketNum
000614  2034              MOVS     r0,#0x34              ;1045
000616  9905              LDR      r1,[sp,#0x14]         ;1045
000618  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
00061c  e000              B        |L2.1568|
                  |L2.1566|
00061e  bf00              NOP                            ;1049
                  |L2.1568|
000620  bf00              NOP                            ;764
000622  f8b50434          LDRH     r0,[r5,#0x434]        ;1053
000626  1c40              ADDS     r0,r0,#1              ;1053
000628  f8a50434          STRH     r0,[r5,#0x434]        ;1053
00062c  f8b50434          LDRH     r0,[r5,#0x434]        ;1054
000630  2105              MOVS     r1,#5                 ;1054
000632  fb90f2f1          SDIV     r2,r0,r1              ;1054
000636  fb010012          MLS      r0,r1,r2,r0           ;1054
00063a  f8a50434          STRH     r0,[r5,#0x434]        ;1054
00063e  bf00              NOP      
000640  e4fc              B        |L2.60|
;;;1056   
                          ENDP

000642  0000              DCW      0x0000
                  |L2.1604|
                          DCD      currPacketNum
                  |L2.1608|
                          DCD      dut_info
                  |L2.1612|
                          DCD      0x00167000

                          AREA ||i.ARM_PROTOCOL_ConfirmTempCmdFrameBuff||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_ConfirmTempCmdFrameBuff PROC
;;;216    // 将临时缓冲区添加到命令帧缓冲区中，其本质操作是承认临时缓冲区数据有效
;;;217    BOOL ARM_PROTOCOL_ConfirmTempCmdFrameBuff(ARM_PROTOCOL_CB *pCB)
000000  b510              PUSH     {r4,lr}
;;;218    {
000002  4601              MOV      r1,r0
;;;219    	ARM_PROTOCOL_RX_CMD_FRAME *pCmdFrame = NULL;
000004  2200              MOVS     r2,#0
;;;220    
;;;221    	// 参数合法性检验
;;;222    	if (NULL == pCB)
000006  b909              CBNZ     r1,|L3.12|
;;;223    	{
;;;224    		return FALSE;
000008  2000              MOVS     r0,#0
                  |L3.10|
;;;225    	}
;;;226    
;;;227    	// 临时缓冲区为空，不予添加
;;;228    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
;;;229    	if (0 == pCmdFrame->length)
;;;230    	{
;;;231    		return FALSE;
;;;232    	}
;;;233    
;;;234    	// 添加
;;;235    	pCB->rx.end++;
;;;236    	pCB->rx.end %= ARM_PROTOCOL_RX_QUEUE_SIZE;
;;;237    	pCB->rx.cmdQueue[pCB->rx.end].length = 0; // 该行的作用是将新的添加位置有效数据个数清零，以便将这个位置当做临时帧缓冲区
;;;238    
;;;239    	return TRUE;
;;;240    }
00000a  bd10              POP      {r4,pc}
                  |L3.12|
00000c  f8b10436          LDRH     r0,[r1,#0x436]        ;228
000010  234d              MOVS     r3,#0x4d              ;228
000012  4358              MULS     r0,r3,r0              ;228
000014  f5017399          ADD      r3,r1,#0x132          ;228
000018  eb030240          ADD      r2,r3,r0,LSL #1       ;228
00001c  f8b20098          LDRH     r0,[r2,#0x98]         ;229
000020  b908              CBNZ     r0,|L3.38|
000022  2000              MOVS     r0,#0                 ;231
000024  e7f1              B        |L3.10|
                  |L3.38|
000026  f8b10436          LDRH     r0,[r1,#0x436]        ;235
00002a  1c40              ADDS     r0,r0,#1              ;235
00002c  f8a10436          STRH     r0,[r1,#0x436]        ;235
000030  f8b10436          LDRH     r0,[r1,#0x436]        ;236
000034  2305              MOVS     r3,#5                 ;236
000036  fb90f4f3          SDIV     r4,r0,r3              ;236
00003a  fb030014          MLS      r0,r3,r4,r0           ;236
00003e  f8a10436          STRH     r0,[r1,#0x436]        ;236
000042  2400              MOVS     r4,#0                 ;237
000044  f8b10436          LDRH     r0,[r1,#0x436]        ;237
000048  234d              MOVS     r3,#0x4d              ;237
00004a  4358              MULS     r0,r3,r0              ;237
00004c  f5017399          ADD      r3,r1,#0x132          ;237
000050  eb030040          ADD      r0,r3,r0,LSL #1       ;237
000054  f8a04098          STRH     r4,[r0,#0x98]         ;237
000058  2001              MOVS     r0,#1                 ;239
00005a  e7d6              B        |L3.10|
;;;241    
                          ENDP


                          AREA ||i.ARM_PROTOCOL_DataStructInit||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_DataStructInit PROC
;;;151    // 数据结构初始化
;;;152    void ARM_PROTOCOL_DataStructInit(ARM_PROTOCOL_CB *pCB)
000000  b510              PUSH     {r4,lr}
;;;153    {
;;;154    	uint16 i;
;;;155    
;;;156    	// 参数合法性检验
;;;157    	if (NULL == pCB)
000002  b900              CBNZ     r0,|L4.6|
                  |L4.4|
;;;158    	{
;;;159    		return;
;;;160    	}
;;;161    
;;;162    	pCB->tx.txBusy = FALSE;
;;;163    	pCB->tx.index = 0;
;;;164    	pCB->tx.head = 0;
;;;165    	pCB->tx.end = 0;
;;;166    	for (i = 0; i < ARM_PROTOCOL_TX_QUEUE_SIZE; i++)
;;;167    	{
;;;168    		pCB->tx.cmdQueue[i].length = 0;
;;;169    	}
;;;170    
;;;171    	pCB->rxFIFO.head = 0;
;;;172    	pCB->rxFIFO.end = 0;
;;;173    	pCB->rxFIFO.currentProcessIndex = 0;
;;;174    
;;;175    	pCB->rx.head = 0;
;;;176    	pCB->rx.end = 0;
;;;177    	for (i = 0; i < ARM_PROTOCOL_RX_QUEUE_SIZE; i++)
;;;178    	{
;;;179    		pCB->rx.cmdQueue[i].length = 0;
;;;180    	}
;;;181    
;;;182    	pCB->isTimeCheck = FALSE;
;;;183    }
000004  bd10              POP      {r4,pc}
                  |L4.6|
000006  2300              MOVS     r3,#0                 ;162
000008  f8803740          STRB     r3,[r0,#0x740]        ;162
00000c  f8a0373e          STRH     r3,[r0,#0x73e]        ;163
000010  f8a0373a          STRH     r3,[r0,#0x73a]        ;164
000014  f8a0373c          STRH     r3,[r0,#0x73c]        ;165
000018  2100              MOVS     r1,#0                 ;166
00001a  e00a              B        |L4.50|
                  |L4.28|
00001c  2400              MOVS     r4,#0                 ;168
00001e  224d              MOVS     r2,#0x4d              ;168
000020  434a              MULS     r2,r1,r2              ;168
000022  f5006387          ADD      r3,r0,#0x438          ;168
000026  eb030242          ADD      r2,r3,r2,LSL #1       ;168
00002a  f8a24098          STRH     r4,[r2,#0x98]         ;168
00002e  1c4a              ADDS     r2,r1,#1              ;166
000030  b291              UXTH     r1,r2                 ;166
                  |L4.50|
000032  2905              CMP      r1,#5                 ;166
000034  dbf2              BLT      |L4.28|
000036  2200              MOVS     r2,#0                 ;171
000038  f8a0212c          STRH     r2,[r0,#0x12c]        ;171
00003c  f8a0212e          STRH     r2,[r0,#0x12e]        ;172
000040  f8a02130          STRH     r2,[r0,#0x130]        ;173
000044  2300              MOVS     r3,#0                 ;175
000046  f8a03434          STRH     r3,[r0,#0x434]        ;175
00004a  f8a03436          STRH     r3,[r0,#0x436]        ;176
00004e  2100              MOVS     r1,#0                 ;177
000050  e00a              B        |L4.104|
                  |L4.82|
000052  2400              MOVS     r4,#0                 ;179
000054  224d              MOVS     r2,#0x4d              ;179
000056  434a              MULS     r2,r1,r2              ;179
000058  f5007399          ADD      r3,r0,#0x132          ;179
00005c  eb030242          ADD      r2,r3,r2,LSL #1       ;179
000060  f8a24098          STRH     r4,[r2,#0x98]         ;179
000064  1c4a              ADDS     r2,r1,#1              ;177
000066  b291              UXTH     r1,r2                 ;177
                  |L4.104|
000068  2905              CMP      r1,#5                 ;177
00006a  dbf2              BLT      |L4.82|
00006c  2200              MOVS     r2,#0                 ;182
00006e  f880274c          STRB     r2,[r0,#0x74c]        ;182
000072  bf00              NOP      
000074  e7c6              B        |L4.4|
;;;184    
                          ENDP


                          AREA ||i.ARM_PROTOCOL_Init||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_Init PROC
;;;57     // 协议初始化
;;;58     void ARM_PROTOCOL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60     	// 协议层数据结构初始化
;;;61     	ARM_PROTOCOL_DataStructInit(&armProtocolCB);
000002  4805              LDR      r0,|L5.24|
000004  f7fffffe          BL       ARM_PROTOCOL_DataStructInit
;;;62     
;;;63     	// 向驱动层注册数据接收接口
;;;64     	ARM_UART_RegisterDataSendService(ARM_PROTOCOL_MacProcess);
000008  4804              LDR      r0,|L5.28|
00000a  f7fffffe          BL       ARM_UART_RegisterDataSendService
;;;65     
;;;66     	// 向驱动层注册数据发送接口
;;;67     	ARM_PROTOCOL_RegisterDataSendService(ARM_UART_AddTxArray);
00000e  4804              LDR      r0,|L5.32|
000010  f7fffffe          BL       ARM_PROTOCOL_RegisterDataSendService
;;;68     }
000014  bd10              POP      {r4,pc}
;;;69     
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      armProtocolCB
                  |L5.28|
                          DCD      ARM_PROTOCOL_MacProcess
                  |L5.32|
                          DCD      ARM_UART_AddTxArray

                          AREA ||i.ARM_PROTOCOL_MacProcess||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_MacProcess PROC
;;;185    // UART报文接收处理函数(注意根据具体模块修改)
;;;186    void ARM_PROTOCOL_MacProcess(uint16 standarID, uint8 *pData, uint16 length)
000000  b5f0              PUSH     {r4-r7,lr}
;;;187    {
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
;;;188    	uint16 end = armProtocolCB.rxFIFO.end;
000006  4e13              LDR      r6,|L6.84|
000008  f8b6012e          LDRH     r0,[r6,#0x12e]  ; armProtocolCB
;;;189    	uint16 head = armProtocolCB.rxFIFO.head;
00000c  f8b6212c          LDRH     r2,[r6,#0x12c]  ; armProtocolCB
;;;190    	uint8 rxdata = 0x00;
000010  2300              MOVS     r3,#0
;;;191    
;;;192    	// 接收数据
;;;193    	rxdata = *pData;
000012  780b              LDRB     r3,[r1,#0]
;;;194    
;;;195    	// 一级缓冲区已满，不予接收
;;;196    	if ((end + 1) % ARM_PROTOCOL_RX_FIFO_SIZE == head)
000014  1c46              ADDS     r6,r0,#1
000016  f44f7796          MOV      r7,#0x12c
00001a  fb96fcf7          SDIV     r12,r6,r7
00001e  fb07661c          MLS      r6,r7,r12,r6
000022  4296              CMP      r6,r2
000024  d100              BNE      |L6.40|
                  |L6.38|
;;;197    	{
;;;198    		return;
;;;199    	}
;;;200    	// 一级缓冲区未满，接收
;;;201    	else
;;;202    	{
;;;203    		// 将接收到的数据放到临时缓冲区中
;;;204    		armProtocolCB.rxFIFO.buff[end] = rxdata;
;;;205    		armProtocolCB.rxFIFO.end++;
;;;206    		armProtocolCB.rxFIFO.end %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;207    	}
;;;208    }
000026  bdf0              POP      {r4-r7,pc}
                  |L6.40|
000028  4e0a              LDR      r6,|L6.84|
00002a  5433              STRB     r3,[r6,r0]            ;204
00002c  f8b6612e          LDRH     r6,[r6,#0x12e]        ;205  ; armProtocolCB
000030  1c76              ADDS     r6,r6,#1              ;205
000032  4f08              LDR      r7,|L6.84|
000034  f8a7612e          STRH     r6,[r7,#0x12e]        ;205
000038  463e              MOV      r6,r7                 ;206
00003a  f8b6612e          LDRH     r6,[r6,#0x12e]        ;206  ; armProtocolCB
00003e  f44f7796          MOV      r7,#0x12c             ;206
000042  fb96fcf7          SDIV     r12,r6,r7             ;206
000046  fb07661c          MLS      r6,r7,r12,r6          ;206
00004a  4f02              LDR      r7,|L6.84|
00004c  f8a7612e          STRH     r6,[r7,#0x12e]        ;206
000050  bf00              NOP      
000052  e7e8              B        |L6.38|
;;;209    
                          ENDP

                  |L6.84|
                          DCD      armProtocolCB

                          AREA ||i.ARM_PROTOCOL_Process||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_Process PROC
;;;70     // ARM协议层过程处理
;;;71     void ARM_PROTOCOL_Process(void)
000000  b510              PUSH     {r4,lr}
;;;72     {
;;;73     	// ARM接收FIFO缓冲区处理
;;;74     	ARM_PROTOCOL_RxFIFOProcess(&armProtocolCB);
000002  4804              LDR      r0,|L7.20|
000004  f7fffffe          BL       ARM_PROTOCOL_RxFIFOProcess
;;;75     
;;;76     	// ARM接收命令缓冲区处理
;;;77     	ARM_PROTOCOL_CmdFrameProcess(&armProtocolCB);
000008  4802              LDR      r0,|L7.20|
00000a  f7fffffe          BL       ARM_PROTOCOL_CmdFrameProcess
;;;78     
;;;79     	// ARM协议层发送处理过程
;;;80     	ARM_PROTOCOL_TxStateProcess();
00000e  f7fffffe          BL       ARM_PROTOCOL_TxStateProcess
;;;81     }
000012  bd10              POP      {r4,pc}
;;;82     
                          ENDP

                  |L7.20|
                          DCD      armProtocolCB

                          AREA ||i.ARM_PROTOCOL_RegisterDataSendService||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_RegisterDataSendService PROC
;;;210    // UART协议层向驱动层注册数据发送接口
;;;211    void ARM_PROTOCOL_RegisterDataSendService(BOOL (*service)(uint16 id, uint8 *pData, uint16 length))
000000  4901              LDR      r1,|L8.8|
;;;212    {
;;;213    	armProtocolCB.sendDataThrowService = service;
000002  f8c10744          STR      r0,[r1,#0x744]  ; armProtocolCB
;;;214    }
000006  4770              BX       lr
;;;215    
                          ENDP

                  |L8.8|
                          DCD      armProtocolCB

                          AREA ||i.ARM_PROTOCOL_RxFIFOProcess||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_RxFIFOProcess PROC
;;;275    // 一级接收缓冲区处理，从一级接收缓冲区中取出一个字节添加到命令帧缓冲区中
;;;276    void ARM_PROTOCOL_RxFIFOProcess(ARM_PROTOCOL_CB *pCB)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;277    {
000004  4604              MOV      r4,r0
;;;278    	uint16 end = pCB->rxFIFO.end;
000006  f8b4712e          LDRH     r7,[r4,#0x12e]
;;;279    	uint16 head = pCB->rxFIFO.head;
00000a  f8b4912c          LDRH     r9,[r4,#0x12c]
;;;280    	ARM_PROTOCOL_RX_CMD_FRAME *pCmdFrame = NULL;
00000e  2500              MOVS     r5,#0
;;;281    	uint16 length = 0;
000010  46a8              MOV      r8,r5
;;;282    	uint8 currentData = 0;
000012  2600              MOVS     r6,#0
;;;283    
;;;284    	// 参数合法性检验
;;;285    	if (NULL == pCB)
000014  b90c              CBNZ     r4,|L9.26|
                  |L9.22|
;;;286    	{
;;;287    		return;
;;;288    	}
;;;289    
;;;290    	// 一级缓冲区为空，退出
;;;291    	if (head == end)
;;;292    	{
;;;293    		return;
;;;294    	}
;;;295    
;;;296    	// 获取临时缓冲区指针
;;;297    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
;;;298    	// 取出当前要处理的字节
;;;299    	currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
;;;300    
;;;301    	// 临时缓冲区长度为0时，搜索首字节
;;;302    	if (0 == pCmdFrame->length)
;;;303    	{
;;;304    		// 命令头错误，删除当前字节并退出
;;;305    		if (ARM_PROTOCOL_CMD_HEAD != currentData)
;;;306    		{
;;;307    			pCB->rxFIFO.head++;
;;;308    			pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;309    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;310    
;;;311    			return;
;;;312    		}
;;;313    
;;;314    		// 命令头正确，但无临时缓冲区可用，退出
;;;315    		if ((pCB->rx.end + 1) % ARM_PROTOCOL_RX_QUEUE_SIZE == pCB->rx.head)
;;;316    		{
;;;317    			return;
;;;318    		}
;;;319    
;;;320    		// 添加UART通讯超时时间设置-2016.1.5增加
;;;321    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;322    		TIMER_AddTask(TIMER_ID_UART_RX_TIME_OUT_CONTROL,
;;;323    					  BLE_PROTOCOL_BUS_UNIDIRECTIONAL_TIME_OUT,
;;;324    					  BLE_PROTOCOL_CALLBACK_RxTimeOut,
;;;325    					  0,
;;;326    					  1,
;;;327    					  ACTION_MODE_ADD_TO_QUEUE);
;;;328    #endif
;;;329    
;;;330    		// 命令头正确，有临时缓冲区可用，则将其添加到命令帧临时缓冲区中
;;;331    		pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;332    		pCB->rxFIFO.currentProcessIndex++;
;;;333    		pCB->rxFIFO.currentProcessIndex %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;334    	}
;;;335    	// 非首字节，将数据添加到命令帧临时缓冲区中，但暂不删除当前数据
;;;336    	else
;;;337    	{
;;;338    		// 临时缓冲区溢出，说明当前正在接收的命令帧是错误的，正确的命令帧不会出现长度溢出的情况
;;;339    		if (pCmdFrame->length >= ARM_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX)
;;;340    		{
;;;341    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;342    			// 停止RX通讯超时检测
;;;343    			BLE_PROTOCOL_StopRxTimeOutCheck();
;;;344    #endif
;;;345    
;;;346    			// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;347    			pCmdFrame->length = 0; // 2016.1.5增加
;;;348    			// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;349    			pCB->rxFIFO.head++;
;;;350    			pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;351    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;352    
;;;353    			return;
;;;354    		}
;;;355    
;;;356    		// 一直取到末尾
;;;357    		while (end != pCB->rxFIFO.currentProcessIndex)
;;;358    		{
;;;359    			// 取出当前要处理的字节
;;;360    			currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
;;;361    			// 缓冲区未溢出，正常接收，将数据添加到临时缓冲区中
;;;362    			pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;363    			pCB->rxFIFO.currentProcessIndex++;
;;;364    			pCB->rxFIFO.currentProcessIndex %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;365    
;;;366    			// ■■接下来，需要检查命令帧是否完整，如果完整，则将命令帧临时缓冲区扶正 ■■
;;;367    
;;;368    			// 首先判断命令帧最小长度，一个完整的命令字至少包括4个字节: 命令帧最小长度，包含:命令头、命令字、数据长度、校验和，因此不足4个字节的必定不完整
;;;369    			if (pCmdFrame->length < ARM_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;370    			{
;;;371    				// 继续接收
;;;372    				continue;
;;;373    			}
;;;374    
;;;375    			// 命令帧长度数值越界，说明当前命令帧错误，停止接收
;;;376    			if (pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] > (ARM_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX - ARM_PROTOCOL_CMD_FRAME_LENGTH_MIN))
;;;377    			{
;;;378    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;379    				// 停止RX通讯超时检测
;;;380    				BLE_PROTOCOL_StopRxTimeOutCheck();
;;;381    #endif
;;;382    
;;;383    				// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;384    				pCmdFrame->length = 0;
;;;385    				// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;386    				pCB->rxFIFO.head++;
;;;387    				pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;388    				pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;389    
;;;390    				return;
;;;391    			}
;;;392    
;;;393    			// 命令帧长度校验
;;;394    			length = pCmdFrame->length;
;;;395    			if (length < pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] + ARM_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;396    			{
;;;397    				// 长度要求不一致，说明未接收完毕，退出继续
;;;398    				continue;
;;;399    			}
;;;400    
;;;401    			// 命令帧长度OK，则进行校验，失败时删除命令头
;;;402    			if (!ARM_PROTOCOL_CheckSUM(pCmdFrame))
;;;403    			{
;;;404    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;405    				// 停止RX通讯超时检测
;;;406    				BLE_PROTOCOL_StopRxTimeOutCheck();
;;;407    #endif
;;;408    
;;;409    				// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;410    				pCmdFrame->length = 0;
;;;411    				// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;412    				pCB->rxFIFO.head++;
;;;413    				pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;414    				pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;415    
;;;416    				return;
;;;417    			}
;;;418    
;;;419    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;420    			// 停止RX通讯超时检测
;;;421    			BLE_PROTOCOL_StopRxTimeOutCheck();
;;;422    #endif
;;;423    			// 执行到这里，即说明接收到了一个完整并且正确的命令帧，此时需将处理过的数据从一级缓冲区中删除，并将该命令帧扶正
;;;424    			pCB->rxFIFO.head += length;
;;;425    			pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;426    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;427    			ARM_PROTOCOL_ConfirmTempCmdFrameBuff(pCB);
;;;428    
;;;429    			return;
;;;430    		}
;;;431    	}
;;;432    }
000016  e8bd83f0          POP      {r4-r9,pc}
                  |L9.26|
00001a  45b9              CMP      r9,r7                 ;291
00001c  d100              BNE      |L9.32|
00001e  e7fa              B        |L9.22|
                  |L9.32|
000020  f8b40436          LDRH     r0,[r4,#0x436]        ;297
000024  214d              MOVS     r1,#0x4d              ;297
000026  4348              MULS     r0,r1,r0              ;297
000028  f5047199          ADD      r1,r4,#0x132          ;297
00002c  eb010540          ADD      r5,r1,r0,LSL #1       ;297
000030  f8b40130          LDRH     r0,[r4,#0x130]        ;299
000034  5c26              LDRB     r6,[r4,r0]            ;299
000036  f8b50098          LDRH     r0,[r5,#0x98]         ;302
00003a  bbb8              CBNZ     r0,|L9.172|
00003c  2e55              CMP      r6,#0x55              ;305
00003e  d010              BEQ      |L9.98|
000040  1f8c              SUBS     r4,r1,#6              ;307
000042  8820              LDRH     r0,[r4,#0]            ;307
000044  1c40              ADDS     r0,r0,#1              ;307
000046  8020              STRH     r0,[r4,#0]            ;307
000048  8820              LDRH     r0,[r4,#0]            ;308
00004a  f44f7196          MOV      r1,#0x12c             ;308
00004e  fb90f2f1          SDIV     r2,r0,r1              ;308
000052  fb010012          MLS      r0,r1,r2,r0           ;308
000056  8020              STRH     r0,[r4,#0]            ;308
000058  8820              LDRH     r0,[r4,#0]            ;309
00005a  80a0              STRH     r0,[r4,#4]            ;309
00005c  f5a47496          SUB      r4,r4,#0x12c          ;309
000060  e7d9              B        |L9.22|
                  |L9.98|
000062  f8b40436          LDRH     r0,[r4,#0x436]        ;315
000066  1c40              ADDS     r0,r0,#1              ;315
000068  2105              MOVS     r1,#5                 ;315
00006a  fb90f2f1          SDIV     r2,r0,r1              ;315
00006e  fb010112          MLS      r1,r1,r2,r0           ;315
000072  f8b40434          LDRH     r0,[r4,#0x434]        ;315
000076  4281              CMP      r1,r0                 ;315
000078  d100              BNE      |L9.124|
00007a  e7cc              B        |L9.22|
                  |L9.124|
00007c  f8351f98          LDRH     r1,[r5,#0x98]!        ;331
000080  8828              LDRH     r0,[r5,#0]            ;331
000082  1c40              ADDS     r0,r0,#1              ;331
000084  f8250998          STRH     r0,[r5],#-0x98        ;331
000088  1ca8              ADDS     r0,r5,#2              ;331
00008a  5446              STRB     r6,[r0,r1]            ;331
00008c  f8b40130          LDRH     r0,[r4,#0x130]        ;332
000090  1c40              ADDS     r0,r0,#1              ;332
000092  f8a40130          STRH     r0,[r4,#0x130]        ;332
000096  f8b40130          LDRH     r0,[r4,#0x130]        ;333
00009a  f44f7196          MOV      r1,#0x12c             ;333
00009e  fb90f2f1          SDIV     r2,r0,r1              ;333
0000a2  fb010012          MLS      r0,r1,r2,r0           ;333
0000a6  f8a40130          STRH     r0,[r4,#0x130]        ;333
0000aa  e08a              B        |L9.450|
                  |L9.172|
0000ac  e7ff              B        |L9.174|
                  |L9.174|
0000ae  f8b50098          LDRH     r0,[r5,#0x98]         ;339
0000b2  2896              CMP      r0,#0x96              ;339
0000b4  db14              BLT      |L9.224|
0000b6  2000              MOVS     r0,#0                 ;347
0000b8  f8a50098          STRH     r0,[r5,#0x98]         ;347
0000bc  f5047496          ADD      r4,r4,#0x12c          ;349
0000c0  8820              LDRH     r0,[r4,#0]            ;349
0000c2  1c40              ADDS     r0,r0,#1              ;349
0000c4  8020              STRH     r0,[r4,#0]            ;349
0000c6  8820              LDRH     r0,[r4,#0]            ;350
0000c8  f44f7196          MOV      r1,#0x12c             ;350
0000cc  fb90f2f1          SDIV     r2,r0,r1              ;350
0000d0  fb010012          MLS      r0,r1,r2,r0           ;350
0000d4  8020              STRH     r0,[r4,#0]            ;350
0000d6  8820              LDRH     r0,[r4,#0]            ;351
0000d8  80a0              STRH     r0,[r4,#4]            ;351
0000da  f5a47496          SUB      r4,r4,#0x12c          ;351
0000de  e79a              B        |L9.22|
                  |L9.224|
0000e0  e06b              B        |L9.442|
                  |L9.226|
0000e2  f8b40130          LDRH     r0,[r4,#0x130]        ;360
0000e6  5c26              LDRB     r6,[r4,r0]            ;360
0000e8  f8351f98          LDRH     r1,[r5,#0x98]!        ;362
0000ec  8828              LDRH     r0,[r5,#0]            ;362
0000ee  1c40              ADDS     r0,r0,#1              ;362
0000f0  f8250998          STRH     r0,[r5],#-0x98        ;362
0000f4  1ca8              ADDS     r0,r5,#2              ;362
0000f6  5446              STRB     r6,[r0,r1]            ;362
0000f8  f8b40130          LDRH     r0,[r4,#0x130]        ;363
0000fc  1c40              ADDS     r0,r0,#1              ;363
0000fe  f8a40130          STRH     r0,[r4,#0x130]        ;363
000102  f8b40130          LDRH     r0,[r4,#0x130]        ;364
000106  f44f7196          MOV      r1,#0x12c             ;364
00010a  fb90f2f1          SDIV     r2,r0,r1              ;364
00010e  fb010012          MLS      r0,r1,r2,r0           ;364
000112  f8a40130          STRH     r0,[r4,#0x130]        ;364
000116  f8b50098          LDRH     r0,[r5,#0x98]         ;369
00011a  2804              CMP      r0,#4                 ;369
00011c  da00              BGE      |L9.288|
00011e  e04c              B        |L9.442|
                  |L9.288|
000120  7928              LDRB     r0,[r5,#4]            ;376
000122  2892              CMP      r0,#0x92              ;376
000124  dd14              BLE      |L9.336|
000126  2000              MOVS     r0,#0                 ;384
000128  f8a50098          STRH     r0,[r5,#0x98]         ;384
00012c  f5047496          ADD      r4,r4,#0x12c          ;386
000130  8820              LDRH     r0,[r4,#0]            ;386
000132  1c40              ADDS     r0,r0,#1              ;386
000134  8020              STRH     r0,[r4,#0]            ;386
000136  8820              LDRH     r0,[r4,#0]            ;387
000138  f44f7196          MOV      r1,#0x12c             ;387
00013c  fb90f2f1          SDIV     r2,r0,r1              ;387
000140  fb010012          MLS      r0,r1,r2,r0           ;387
000144  8020              STRH     r0,[r4,#0]            ;387
000146  8820              LDRH     r0,[r4,#0]            ;388
000148  80a0              STRH     r0,[r4,#4]            ;388
00014a  f5a47496          SUB      r4,r4,#0x12c          ;388
00014e  e762              B        |L9.22|
                  |L9.336|
000150  f8b58098          LDRH     r8,[r5,#0x98]         ;394
000154  7928              LDRB     r0,[r5,#4]            ;395
000156  1d00              ADDS     r0,r0,#4              ;395
000158  4540              CMP      r0,r8                 ;395
00015a  dd00              BLE      |L9.350|
00015c  e02d              B        |L9.442|
                  |L9.350|
00015e  4628              MOV      r0,r5                 ;402
000160  f7fffffe          BL       ARM_PROTOCOL_CheckSUM
000164  b9a0              CBNZ     r0,|L9.400|
000166  2000              MOVS     r0,#0                 ;410
000168  f8a50098          STRH     r0,[r5,#0x98]         ;410
00016c  f5047496          ADD      r4,r4,#0x12c          ;412
000170  8820              LDRH     r0,[r4,#0]            ;412
000172  1c40              ADDS     r0,r0,#1              ;412
000174  8020              STRH     r0,[r4,#0]            ;412
000176  8820              LDRH     r0,[r4,#0]            ;413
000178  f44f7196          MOV      r1,#0x12c             ;413
00017c  fb90f2f1          SDIV     r2,r0,r1              ;413
000180  fb010012          MLS      r0,r1,r2,r0           ;413
000184  8020              STRH     r0,[r4,#0]            ;413
000186  8820              LDRH     r0,[r4,#0]            ;414
000188  80a0              STRH     r0,[r4,#4]            ;414
00018a  f5a47496          SUB      r4,r4,#0x12c          ;414
00018e  e742              B        |L9.22|
                  |L9.400|
000190  f5047496          ADD      r4,r4,#0x12c          ;424
000194  8820              LDRH     r0,[r4,#0]            ;424
000196  4440              ADD      r0,r0,r8              ;424
000198  8020              STRH     r0,[r4,#0]            ;424
00019a  8820              LDRH     r0,[r4,#0]            ;425
00019c  f44f7196          MOV      r1,#0x12c             ;425
0001a0  fb90f2f1          SDIV     r2,r0,r1              ;425
0001a4  fb010012          MLS      r0,r1,r2,r0           ;425
0001a8  8020              STRH     r0,[r4,#0]            ;425
0001aa  8820              LDRH     r0,[r4,#0]            ;426
0001ac  80a0              STRH     r0,[r4,#4]            ;426
0001ae  f5a47496          SUB      r4,r4,#0x12c          ;426
0001b2  4620              MOV      r0,r4                 ;427
0001b4  f7fffffe          BL       ARM_PROTOCOL_ConfirmTempCmdFrameBuff
0001b8  e72d              B        |L9.22|
                  |L9.442|
0001ba  f8b40130          LDRH     r0,[r4,#0x130]        ;357
0001be  42b8              CMP      r0,r7                 ;357
0001c0  d18f              BNE      |L9.226|
                  |L9.450|
0001c2  bf00              NOP      
0001c4  e727              B        |L9.22|
;;;433    
                          ENDP


                          AREA ||i.ARM_PROTOCOL_SendCmdAck||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_SendCmdAck PROC
;;;1093   // 发送命令回复
;;;1094   void ARM_PROTOCOL_SendCmdAck(uint8 ackCmd)
000000  b510              PUSH     {r4,lr}
;;;1095   {
000002  4604              MOV      r4,r0
;;;1096   	ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1097   	ARM_PROTOCOL_TxAddData(ackCmd);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1098   	ARM_PROTOCOL_TxAddData(0x00);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1099   	ARM_PROTOCOL_TxAddFrame();
000016  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
;;;1100   }
00001a  bd10              POP      {r4,pc}
;;;1101   
                          ENDP


                          AREA ||i.ARM_PROTOCOL_SendCmdParamAck||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_SendCmdParamAck PROC
;;;1102   // 发送命令回复，带一个参数
;;;1103   void ARM_PROTOCOL_SendCmdParamAck(uint8 ackCmd, uint8 ackParam)
000000  b530              PUSH     {r4,r5,lr}
;;;1104   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1105   
;;;1106   	ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);
000006  2055              MOVS     r0,#0x55
000008  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1107   	ARM_PROTOCOL_TxAddData(ackCmd);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1108   	ARM_PROTOCOL_TxAddData(0x01);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1109   
;;;1110   	ARM_PROTOCOL_TxAddData(ackParam);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1111   	ARM_PROTOCOL_TxAddFrame();
00001e  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
;;;1112   }
000022  bd30              POP      {r4,r5,pc}
;;;1113   
                          ENDP


                          AREA ||i.ARM_PROTOCOL_SendGetMacAddr||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_SendGetMacAddr PROC
;;;1114   // 发送获取MAC地址
;;;1115   void ARM_PROTOCOL_SendGetMacAddr(uint32 param)
000000  b53e              PUSH     {r1-r5,lr}
;;;1116   {
000002  4604              MOV      r4,r0
;;;1117   	uint8 bleMacStr[] = "TTM:MAC-?";
000004  a205              ADR      r2,|L12.28|
000006  ca07              LDM      r2,{r0-r2}
000008  e88d0007          STM      sp,{r0-r2}
;;;1118   
;;;1119   	// 使能BLE发送
;;;1120   	ARM_BRTS_TX_REQUEST();
;;;1121   
;;;1122   	// 将待发送命令添加到物理层缓冲区
;;;1123   	ARM_UART_AddTxArray(0xFFFF, bleMacStr, sizeof(bleMacStr));
00000c  220a              MOVS     r2,#0xa
00000e  4669              MOV      r1,sp
000010  f64f70ff          MOV      r0,#0xffff
000014  f7fffffe          BL       ARM_UART_AddTxArray
;;;1124   }
000018  bd3e              POP      {r1-r5,pc}
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
00001c  54544d3a          DCB      "TTM:MAC-?",0
000020  4d41432d
000024  3f00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.ARM_PROTOCOL_TxAddData||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_TxAddData PROC
;;;83     // 向发送命令帧队列中添加数据
;;;84     void ARM_PROTOCOL_TxAddData(uint8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;85     {
000002  4601              MOV      r1,r0
;;;86     	uint16 head = armProtocolCB.tx.head;
000004  4c12              LDR      r4,|L13.80|
000006  f8b4273a          LDRH     r2,[r4,#0x73a]
;;;87     	uint16 end = armProtocolCB.tx.end;
00000a  f8b4373c          LDRH     r3,[r4,#0x73c]
;;;88     	ARM_PROTOCOL_TX_CMD_FRAME *pCmdFrame = &armProtocolCB.tx.cmdQueue[armProtocolCB.tx.end];
00000e  f8b4473c          LDRH     r4,[r4,#0x73c]
000012  254d              MOVS     r5,#0x4d
000014  436c              MULS     r4,r5,r4
000016  4d0f              LDR      r5,|L13.84|
000018  eb050044          ADD      r0,r5,r4,LSL #1
;;;89     
;;;90     	// 发送缓冲区已满，不予接收
;;;91     	if ((end + 1) % ARM_PROTOCOL_TX_QUEUE_SIZE == head)
00001c  1c5c              ADDS     r4,r3,#1
00001e  2505              MOVS     r5,#5
000020  fb94f6f5          SDIV     r6,r4,r5
000024  fb054416          MLS      r4,r5,r6,r4
000028  4294              CMP      r4,r2
00002a  d100              BNE      |L13.46|
                  |L13.44|
;;;92     	{
;;;93     		return;
;;;94     	}
;;;95     
;;;96     	// 队尾命令帧已满，退出
;;;97     	if (pCmdFrame->length >= ARM_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX)
;;;98     	{
;;;99     		return;
;;;100    	}
;;;101    
;;;102    	// 数据添加到帧末尾，并更新帧长度
;;;103    	pCmdFrame->buff[pCmdFrame->length] = data;
;;;104    	pCmdFrame->length++;
;;;105    }
00002c  bd70              POP      {r4-r6,pc}
                  |L13.46|
00002e  f8b04098          LDRH     r4,[r0,#0x98]         ;97
000032  2c96              CMP      r4,#0x96              ;97
000034  db00              BLT      |L13.56|
000036  e7f9              B        |L13.44|
                  |L13.56|
000038  f8b05098          LDRH     r5,[r0,#0x98]         ;103
00003c  1c84              ADDS     r4,r0,#2              ;103
00003e  5561              STRB     r1,[r4,r5]            ;103
000040  f8b04098          LDRH     r4,[r0,#0x98]         ;104
000044  1c64              ADDS     r4,r4,#1              ;104
000046  f8a04098          STRH     r4,[r0,#0x98]         ;104
00004a  bf00              NOP      
00004c  e7ee              B        |L13.44|
;;;106    
                          ENDP

00004e  0000              DCW      0x0000
                  |L13.80|
                          DCD      armProtocolCB
                  |L13.84|
                          DCD      armProtocolCB+0x438

                          AREA ||i.ARM_PROTOCOL_TxAddFrame||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_TxAddFrame PROC
;;;107    // 确认添加命令帧，即承认之前填充的数据为命令帧，将其添加到发送队列中，由main进行调度发送，本函数内会自动校正命令长度，并添加校验码
;;;108    void ARM_PROTOCOL_TxAddFrame(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;109    {
;;;110    	uint16 cc = 0;
000002  2300              MOVS     r3,#0
;;;111    	uint16 i = 0;
000004  2200              MOVS     r2,#0
;;;112    	uint16 head = armProtocolCB.tx.head;
000006  4e25              LDR      r6,|L14.156|
000008  f8b6473a          LDRH     r4,[r6,#0x73a]
;;;113    	uint16 end = armProtocolCB.tx.end;
00000c  f8b6573c          LDRH     r5,[r6,#0x73c]
;;;114    	ARM_PROTOCOL_TX_CMD_FRAME *pCmdFrame = &armProtocolCB.tx.cmdQueue[armProtocolCB.tx.end];
000010  f8b6673c          LDRH     r6,[r6,#0x73c]
000014  274d              MOVS     r7,#0x4d
000016  437e              MULS     r6,r7,r6
000018  4f21              LDR      r7,|L14.160|
00001a  eb070046          ADD      r0,r7,r6,LSL #1
;;;115    	uint16 length = pCmdFrame->length;
00001e  f8b01098          LDRH     r1,[r0,#0x98]
;;;116    
;;;117    	// 发送缓冲区已满，不予接收
;;;118    	if ((end + 1) % ARM_PROTOCOL_TX_QUEUE_SIZE == head)
000022  1c6e              ADDS     r6,r5,#1
000024  2705              MOVS     r7,#5
000026  fb96fcf7          SDIV     r12,r6,r7
00002a  fb07661c          MLS      r6,r7,r12,r6
00002e  42a6              CMP      r6,r4
000030  d100              BNE      |L14.52|
                  |L14.50|
;;;119    	{
;;;120    		return;
;;;121    	}
;;;122    
;;;123    	// 命令帧长度不足，清除已填充的数据，退出
;;;124    	if (ARM_PROTOCOL_CMD_FRAME_LENGTH_MIN - 1 > length) // 减去"校验和"1个字节
;;;125    	{
;;;126    		pCmdFrame->length = 0;
;;;127    
;;;128    		return;
;;;129    	}
;;;130    
;;;131    	// 队尾命令帧已满，退出
;;;132    	if (length >= ARM_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX)
;;;133    	{
;;;134    		return;
;;;135    	}
;;;136    
;;;137    	// 重新设置数据长度，系统在准备数据时，填充的"数据长度"可以为任意值，并且不需要添加校验码，在这里重新设置为正确的值
;;;138    	pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] = length - 3; // 重设数据长度
;;;139    
;;;140    	for (i = 0; i < length; i++)
;;;141    	{
;;;142    		cc ^= pCmdFrame->buff[i];
;;;143    	}
;;;144    	pCmdFrame->buff[pCmdFrame->length++] = ~cc;
;;;145    
;;;146    	armProtocolCB.tx.end++;
;;;147    	armProtocolCB.tx.end %= ARM_PROTOCOL_TX_QUEUE_SIZE;
;;;148    	// pCB->tx.cmdQueue[pCB->tx.end].length = 0;   //2015.12.2修改
;;;149    }
000032  bdf0              POP      {r4-r7,pc}
                  |L14.52|
000034  2903              CMP      r1,#3                 ;124
000036  da03              BGE      |L14.64|
000038  2600              MOVS     r6,#0                 ;126
00003a  f8a06098          STRH     r6,[r0,#0x98]         ;126
00003e  e7f8              B        |L14.50|
                  |L14.64|
000040  2996              CMP      r1,#0x96              ;132
000042  db00              BLT      |L14.70|
000044  e7f5              B        |L14.50|
                  |L14.70|
000046  1ece              SUBS     r6,r1,#3              ;138
000048  7106              STRB     r6,[r0,#4]            ;138
00004a  2200              MOVS     r2,#0                 ;140
00004c  e004              B        |L14.88|
                  |L14.78|
00004e  1c86              ADDS     r6,r0,#2              ;142
000050  5cb6              LDRB     r6,[r6,r2]            ;142
000052  4073              EORS     r3,r3,r6              ;142
000054  1c56              ADDS     r6,r2,#1              ;140
000056  b2b2              UXTH     r2,r6                 ;140
                  |L14.88|
000058  428a              CMP      r2,r1                 ;140
00005a  dbf8              BLT      |L14.78|
00005c  43de              MVNS     r6,r3                 ;144
00005e  b2f7              UXTB     r7,r6                 ;144
000060  f8b0c098          LDRH     r12,[r0,#0x98]        ;144
000064  f10c0601          ADD      r6,r12,#1             ;144
000068  f8a06098          STRH     r6,[r0,#0x98]         ;144
00006c  1c86              ADDS     r6,r0,#2              ;144
00006e  f806700c          STRB     r7,[r6,r12]           ;144
000072  4e0a              LDR      r6,|L14.156|
000074  f8b6673c          LDRH     r6,[r6,#0x73c]        ;146
000078  1c76              ADDS     r6,r6,#1              ;146
00007a  b2b7              UXTH     r7,r6                 ;146
00007c  4e07              LDR      r6,|L14.156|
00007e  f8a6773c          STRH     r7,[r6,#0x73c]        ;146
000082  f8b6673c          LDRH     r6,[r6,#0x73c]        ;147
000086  2705              MOVS     r7,#5                 ;147
000088  fb96fcf7          SDIV     r12,r6,r7             ;147
00008c  fb07661c          MLS      r6,r7,r12,r6          ;147
000090  b2b7              UXTH     r7,r6                 ;147
000092  4e02              LDR      r6,|L14.156|
000094  f8a6773c          STRH     r7,[r6,#0x73c]        ;147
000098  bf00              NOP      
00009a  e7ca              B        |L14.50|
;;;150    
                          ENDP

                  |L14.156|
                          DCD      armProtocolCB
                  |L14.160|
                          DCD      armProtocolCB+0x438

                          AREA ||i.ARM_PROTOCOL_TxStateProcess||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_TxStateProcess PROC
;;;242    // 协议层发送处理过程
;;;243    void ARM_PROTOCOL_TxStateProcess(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;244    {
;;;245    	uint16 head = armProtocolCB.tx.head;
000004  4821              LDR      r0,|L15.140|
000006  f8b0473a          LDRH     r4,[r0,#0x73a]
;;;246    	uint16 end = armProtocolCB.tx.end;
00000a  f8b0573c          LDRH     r5,[r0,#0x73c]
;;;247    	uint16 length = armProtocolCB.tx.cmdQueue[head].length;
00000e  204d              MOVS     r0,#0x4d
000010  4360              MULS     r0,r4,r0
000012  491f              LDR      r1,|L15.144|
000014  eb010040          ADD      r0,r1,r0,LSL #1
000018  f8b06098          LDRH     r6,[r0,#0x98]
;;;248    	uint8 *pCmd = armProtocolCB.tx.cmdQueue[head].buff;
00001c  204d              MOVS     r0,#0x4d
00001e  4360              MULS     r0,r4,r0
000020  eb010040          ADD      r0,r1,r0,LSL #1
000024  1c87              ADDS     r7,r0,#2
;;;249    	uint16 localDeviceID = armProtocolCB.tx.cmdQueue[head].deviceID;
000026  204d              MOVS     r0,#0x4d
000028  4360              MULS     r0,r4,r0
00002a  f8318010          LDRH     r8,[r1,r0,LSL #1]
;;;250    
;;;251    	// 发送缓冲区为空，说明无数据
;;;252    	if (head == end)
00002e  42ac              CMP      r4,r5
000030  d101              BNE      |L15.54|
                  |L15.50|
;;;253    	{
;;;254    		return;
;;;255    	}
;;;256    
;;;257    	// 发送函数没有注册直接返回
;;;258    	if (NULL == armProtocolCB.sendDataThrowService)
;;;259    	{
;;;260    		return;
;;;261    	}
;;;262    
;;;263    	// 协议层有数据需要发送到驱动层
;;;264    	if (!(*armProtocolCB.sendDataThrowService)(localDeviceID, pCmd, length))
;;;265    	{
;;;266    		return;
;;;267    	}
;;;268    
;;;269    	// 发送环形队列更新位置
;;;270    	armProtocolCB.tx.cmdQueue[head].length = 0;
;;;271    	armProtocolCB.tx.head++;
;;;272    	armProtocolCB.tx.head %= ARM_PROTOCOL_TX_QUEUE_SIZE;
;;;273    }
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L15.54|
000036  4815              LDR      r0,|L15.140|
000038  f8d00744          LDR      r0,[r0,#0x744]        ;258  ; armProtocolCB
00003c  b900              CBNZ     r0,|L15.64|
00003e  e7f8              B        |L15.50|
                  |L15.64|
000040  4812              LDR      r0,|L15.140|
000042  4632              MOV      r2,r6                 ;264
000044  4639              MOV      r1,r7                 ;264
000046  f8d03744          LDR      r3,[r0,#0x744]        ;264  ; armProtocolCB
00004a  4640              MOV      r0,r8                 ;264
00004c  4798              BLX      r3                    ;264
00004e  b900              CBNZ     r0,|L15.82|
000050  e7ef              B        |L15.50|
                  |L15.82|
000052  2200              MOVS     r2,#0                 ;270
000054  204d              MOVS     r0,#0x4d              ;270
000056  4360              MULS     r0,r4,r0              ;270
000058  490d              LDR      r1,|L15.144|
00005a  eb010040          ADD      r0,r1,r0,LSL #1       ;270
00005e  f8a02098          STRH     r2,[r0,#0x98]         ;270
000062  480a              LDR      r0,|L15.140|
000064  f8b0073a          LDRH     r0,[r0,#0x73a]        ;271
000068  1c40              ADDS     r0,r0,#1              ;271
00006a  b281              UXTH     r1,r0                 ;271
00006c  4807              LDR      r0,|L15.140|
00006e  f8a0173a          STRH     r1,[r0,#0x73a]        ;271
000072  f8b0073a          LDRH     r0,[r0,#0x73a]        ;272
000076  2105              MOVS     r1,#5                 ;272
000078  fb90f2f1          SDIV     r2,r0,r1              ;272
00007c  fb010012          MLS      r0,r1,r2,r0           ;272
000080  b281              UXTH     r1,r0                 ;272
000082  4802              LDR      r0,|L15.140|
000084  f8a0173a          STRH     r1,[r0,#0x73a]        ;272
000088  bf00              NOP      
00008a  e7d2              B        |L15.50|
;;;274    
                          ENDP

                  |L15.140|
                          DCD      armProtocolCB
                  |L15.144|
                          DCD      armProtocolCB+0x438

                          AREA ||i.dutProgressReport||, CODE, READONLY, ALIGN=2

                  dutProgressReport PROC
;;;461    
;;;462    void dutProgressReport(uint32 temp)
000000  b570              PUSH     {r4-r6,lr}
;;;463    {
000002  4605              MOV      r5,r0
;;;464    	uint8 i;
;;;465    
;;;466    	if (dut_info.appUpFlag)
000004  4854              LDR      r0,|L16.344|
000006  7e40              LDRB     r0,[r0,#0x19]  ; dut_info
000008  b160              CBZ      r0,|L16.36|
;;;467    	{
;;;468    		dut_info.dutProgress[3] = (dut_info.currentAppSize * 100) / dut_info.appSize;
00000a  4853              LDR      r0,|L16.344|
00000c  6ac0              LDR      r0,[r0,#0x2c]  ; dut_info
00000e  2164              MOVS     r1,#0x64
000010  4348              MULS     r0,r1,r0
000012  4951              LDR      r1,|L16.344|
000014  6a09              LDR      r1,[r1,#0x20]  ; dut_info
000016  fbb0f0f1          UDIV     r0,r0,r1
00001a  b2c1              UXTB     r1,r0
00001c  484e              LDR      r0,|L16.344|
00001e  f880103f          STRB     r1,[r0,#0x3f]
000022  e020              B        |L16.102|
                  |L16.36|
;;;469    	}
;;;470    	else if (dut_info.uiUpFlag)
000024  484c              LDR      r0,|L16.344|
000026  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
000028  b160              CBZ      r0,|L16.68|
;;;471    	{
;;;472    		dut_info.dutProgress[5] = (dut_info.currentUiSize * 100) / dut_info.uiSize;
00002a  484b              LDR      r0,|L16.344|
00002c  6b00              LDR      r0,[r0,#0x30]  ; dut_info
00002e  2164              MOVS     r1,#0x64
000030  4348              MULS     r0,r1,r0
000032  4949              LDR      r1,|L16.344|
000034  6a49              LDR      r1,[r1,#0x24]  ; dut_info
000036  fbb0f0f1          UDIV     r0,r0,r1
00003a  b2c1              UXTB     r1,r0
00003c  4846              LDR      r0,|L16.344|
00003e  f8801041          STRB     r1,[r0,#0x41]
000042  e010              B        |L16.102|
                  |L16.68|
;;;473    	}
;;;474    	else if (dut_info.configUpFlag)
000044  4844              LDR      r0,|L16.344|
000046  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
000048  b968              CBNZ     r0,|L16.102|
;;;475    	{
;;;476    		// 配置信息进度只有0%和100%。
;;;477    	}
;;;478    	else
;;;479    	{
;;;480    		// 所有项升级完毕
;;;481    		TIMER_KillTask(TIMER_ID_SET_DUT_PROGRESS_REPORT);
00004a  2003              MOVS     r0,#3
00004c  f7fffffe          BL       TIMER_KillTask
;;;482    		TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG);
000050  2002              MOVS     r0,#2
000052  f7fffffe          BL       TIMER_KillTask
;;;483    		dut_info.configUpFaile = FALSE;
000056  2000              MOVS     r0,#0
000058  493f              LDR      r1,|L16.344|
00005a  f8810037          STRB     r0,[r1,#0x37]
;;;484    		dut_info.appUpFaile = FALSE;
00005e  f8810035          STRB     r0,[r1,#0x35]
;;;485    		dut_info.uiUpFaile = FALSE;
000062  f8810036          STRB     r0,[r1,#0x36]
                  |L16.102|
;;;486    	}
;;;487    
;;;488    	if (dut_info.appUpFaile) // app升级失败
000066  483c              LDR      r0,|L16.344|
000068  f8900035          LDRB     r0,[r0,#0x35]  ; dut_info
00006c  b180              CBZ      r0,|L16.144|
;;;489    	{
;;;490    		dut_info.appUpFaile = FALSE;
00006e  2000              MOVS     r0,#0
000070  4939              LDR      r1,|L16.344|
000072  f8810035          STRB     r0,[r1,#0x35]
;;;491    		dut_info.dutProgress[3] = 102;
000076  2166              MOVS     r1,#0x66
000078  4837              LDR      r0,|L16.344|
00007a  f880103f          STRB     r1,[r0,#0x3f]
;;;492    		dut_info.currentAppSize = 0;
00007e  2000              MOVS     r0,#0
000080  4935              LDR      r1,|L16.344|
000082  62c8              STR      r0,[r1,#0x2c]  ; dut_info
;;;493    		TIMER_KillTask(TIMER_ID_SET_DUT_PROGRESS_REPORT);
000084  2003              MOVS     r0,#3
000086  f7fffffe          BL       TIMER_KillTask
;;;494    		dut_info.appUpFlag = FALSE;
00008a  2000              MOVS     r0,#0
00008c  4932              LDR      r1,|L16.344|
00008e  7648              STRB     r0,[r1,#0x19]
                  |L16.144|
;;;495    	}
;;;496    	
;;;497    	if (dut_info.uiUpFaile) // ui升级失败
000090  4831              LDR      r0,|L16.344|
000092  f8900036          LDRB     r0,[r0,#0x36]  ; dut_info
000096  b188              CBZ      r0,|L16.188|
;;;498    	{
;;;499    		dut_info.dutProgress[5] = 102;
000098  2166              MOVS     r1,#0x66
00009a  482f              LDR      r0,|L16.344|
00009c  f8801041          STRB     r1,[r0,#0x41]
;;;500    		dut_info.currentUiSize = 0;
0000a0  2000              MOVS     r0,#0
0000a2  492d              LDR      r1,|L16.344|
0000a4  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;501    		TIMER_KillTask(TIMER_ID_SET_DUT_PROGRESS_REPORT);
0000a6  2003              MOVS     r0,#3
0000a8  f7fffffe          BL       TIMER_KillTask
;;;502    		TIMER_KillTask(TIMER_ID_TIME_OUT_DETECTION); // 高标的超时检测
0000ac  2004              MOVS     r0,#4
0000ae  f7fffffe          BL       TIMER_KillTask
;;;503    		dut_info.uiUpFaile = FALSE;
0000b2  2000              MOVS     r0,#0
0000b4  4928              LDR      r1,|L16.344|
0000b6  f8810036          STRB     r0,[r1,#0x36]
;;;504    		dut_info.uiUpFlag = FALSE;
0000ba  76c8              STRB     r0,[r1,#0x1b]
                  |L16.188|
;;;505    	}	
;;;506    	
;;;507    	if (dut_info.configUpFaile) // config升级失败
0000bc  4826              LDR      r0,|L16.344|
0000be  f8900037          LDRB     r0,[r0,#0x37]  ; dut_info
0000c2  b158              CBZ      r0,|L16.220|
;;;508    	{
;;;509    		dut_info.dutProgress[7] = 102;
0000c4  2166              MOVS     r1,#0x66
0000c6  4824              LDR      r0,|L16.344|
0000c8  f8801043          STRB     r1,[r0,#0x43]
;;;510    		TIMER_KillTask(TIMER_ID_SET_DUT_PROGRESS_REPORT);
0000cc  2003              MOVS     r0,#3
0000ce  f7fffffe          BL       TIMER_KillTask
;;;511    		dut_info.configUpFaile = FALSE;
0000d2  2000              MOVS     r0,#0
0000d4  4920              LDR      r1,|L16.344|
0000d6  f8810037          STRB     r0,[r1,#0x37]
;;;512    		dut_info.configUpFlag = FALSE;
0000da  7688              STRB     r0,[r1,#0x1a]
                  |L16.220|
;;;513    	}
;;;514    	
;;;515    	if (dut_info.appUpSuccesss)
0000dc  481e              LDR      r0,|L16.344|
0000de  f890003b          LDRB     r0,[r0,#0x3b]  ; dut_info
0000e2  b140              CBZ      r0,|L16.246|
;;;516    	{
;;;517    		dut_info.dutProgress[3] = 100;
0000e4  2164              MOVS     r1,#0x64
0000e6  481c              LDR      r0,|L16.344|
0000e8  f880103f          STRB     r1,[r0,#0x3f]
;;;518    		dut_info.currentAppSize = 0;
0000ec  2000              MOVS     r0,#0
0000ee  491a              LDR      r1,|L16.344|
0000f0  62c8              STR      r0,[r1,#0x2c]  ; dut_info
;;;519    		dut_info.appUpSuccesss = FALSE;
0000f2  f881003b          STRB     r0,[r1,#0x3b]
                  |L16.246|
;;;520    	}
;;;521    
;;;522    	if (dut_info.uiUpSuccesss)
0000f6  4818              LDR      r0,|L16.344|
0000f8  f890003a          LDRB     r0,[r0,#0x3a]  ; dut_info
0000fc  b140              CBZ      r0,|L16.272|
;;;523    	{
;;;524    		dut_info.dutProgress[5] = 100;
0000fe  2164              MOVS     r1,#0x64
000100  4815              LDR      r0,|L16.344|
000102  f8801041          STRB     r1,[r0,#0x41]
;;;525    		dut_info.currentUiSize = 0;
000106  2000              MOVS     r0,#0
000108  4913              LDR      r1,|L16.344|
00010a  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;526    		dut_info.uiUpSuccesss = FALSE;
00010c  f881003a          STRB     r0,[r1,#0x3a]
                  |L16.272|
;;;527    	}
;;;528    
;;;529    	if (dut_info.configUpSuccesss)
000110  4811              LDR      r0,|L16.344|
000112  f8900039          LDRB     r0,[r0,#0x39]  ; dut_info
000116  b138              CBZ      r0,|L16.296|
;;;530    	{
;;;531    		dut_info.dutProgress[7] = 100;
000118  2164              MOVS     r1,#0x64
00011a  480f              LDR      r0,|L16.344|
00011c  f8801043          STRB     r1,[r0,#0x43]
;;;532    		dut_info.configUpSuccesss = FALSE;
000120  2000              MOVS     r0,#0
000122  490d              LDR      r1,|L16.344|
000124  f8810039          STRB     r0,[r1,#0x39]
                  |L16.296|
;;;533    	}
;;;534    	ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);		   // 添加命令头
000128  2055              MOVS     r0,#0x55
00012a  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;535    	ARM_PROTOCOL_TxAddData(UART_ARM_CMD_TOOL_DUT_PROCESS); // 添加命令字0x15
00012e  2015              MOVS     r0,#0x15
000130  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;536    	ARM_PROTOCOL_TxAddData(0x00);						   // 数据长度临时为0
000134  2000              MOVS     r0,#0
000136  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;537    	for (i = 0; i < 8; i++)
00013a  2400              MOVS     r4,#0
00013c  e006              B        |L16.332|
                  |L16.318|
;;;538    	{
;;;539    		ARM_PROTOCOL_TxAddData(dut_info.dutProgress[i]);
00013e  4906              LDR      r1,|L16.344|
000140  313c              ADDS     r1,r1,#0x3c
000142  5d08              LDRB     r0,[r1,r4]
000144  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000148  1c60              ADDS     r0,r4,#1              ;537
00014a  b2c4              UXTB     r4,r0                 ;537
                  |L16.332|
00014c  2c08              CMP      r4,#8                 ;537
00014e  dbf6              BLT      |L16.318|
;;;540    	}
;;;541    	ARM_PROTOCOL_TxAddFrame(); // 设置数据长度和添加校验
000150  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
;;;542    }
000154  bd70              POP      {r4-r6,pc}
;;;543    
                          ENDP

000156  0000              DCW      0x0000
                  |L16.344|
                          DCD      dut_info

                          AREA ||i.enterState||, CODE, READONLY, ALIGN=2

                  enterState PROC
;;;617    // 根据升级信息进入不同的状态机
;;;618    void enterState()
000000  b510              PUSH     {r4,lr}
;;;619    {
;;;620    	if (dut_info.appUpFlag || dut_info.uiUpFlag || dut_info.configUpFlag)
000002  482a              LDR      r0,|L17.172|
000004  7e40              LDRB     r0,[r0,#0x19]  ; dut_info
000006  b930              CBNZ     r0,|L17.22|
000008  4828              LDR      r0,|L17.172|
00000a  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00000c  b918              CBNZ     r0,|L17.22|
00000e  4827              LDR      r0,|L17.172|
000010  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
000012  2800              CMP      r0,#0
000014  d046              BEQ      |L17.164|
                  |L17.22|
;;;621    	{
;;;622    		switch (dut_info.dutBusType)
000016  4825              LDR      r0,|L17.172|
000018  7dc0              LDRB     r0,[r0,#0x17]  ; dut_info
00001a  b110              CBZ      r0,|L17.34|
00001c  2801              CMP      r0,#1
00001e  d13f              BNE      |L17.160|
000020  e01d              B        |L17.94|
                  |L17.34|
;;;623    		{
;;;624    		case 0: // 串口
;;;625    			switch (dut_info.ID)
000022  4822              LDR      r0,|L17.172|
000024  7d80              LDRB     r0,[r0,#0x16]  ; dut_info
000026  2802              CMP      r0,#2
000028  d00a              BEQ      |L17.64|
00002a  2803              CMP      r0,#3
00002c  d00c              BEQ      |L17.72|
00002e  2804              CMP      r0,#4
000030  d002              BEQ      |L17.56|
000032  2805              CMP      r0,#5
000034  d110              BNE      |L17.88|
000036  e00b              B        |L17.80|
                  |L17.56|
;;;626    			{
;;;627    			case DUT_TYPE_SEG:
;;;628    				// 进入数码管、段码屏升级
;;;629    				STATE_EnterState(STATE_CM_UART_SEG_UPGRADE);
000038  2007              MOVS     r0,#7
00003a  f7fffffe          BL       STATE_EnterState
;;;630    				break;
00003e  e00c              B        |L17.90|
                  |L17.64|
;;;631    			case DUT_TYPE_CM:
;;;632    				// 进入通用彩屏升级
;;;633    				STATE_EnterState(STATE_CM_UART_BC_UPGRADE);
000040  2008              MOVS     r0,#8
000042  f7fffffe          BL       STATE_EnterState
;;;634    				break;
000046  e008              B        |L17.90|
                  |L17.72|
;;;635    			case DUT_TYPE_HUAXIN:
;;;636    				// 进入华芯微特升级
;;;637    				STATE_EnterState(STATE_HUAXIN_UART_BC_UPGRADE);
000048  2009              MOVS     r0,#9
00004a  f7fffffe          BL       STATE_EnterState
;;;638    				break;
00004e  e004              B        |L17.90|
                  |L17.80|
;;;639    			case DUT_TYPE_KAIYANG:
;;;640    				// 进入开阳升级
;;;641    				STATE_EnterState(STATE_KAIYANG_UART_BC_UPGRADE);
000050  200a              MOVS     r0,#0xa
000052  f7fffffe          BL       STATE_EnterState
;;;642    				break;
000056  e000              B        |L17.90|
                  |L17.88|
;;;643    			default:
;;;644    				break;
000058  bf00              NOP      
                  |L17.90|
00005a  bf00              NOP                            ;630
;;;645    			}
;;;646    
;;;647    			break;
00005c  e021              B        |L17.162|
                  |L17.94|
;;;648    
;;;649    		case 1: // can
;;;650    			switch (dut_info.ID)
00005e  4813              LDR      r0,|L17.172|
000060  7d80              LDRB     r0,[r0,#0x16]  ; dut_info
000062  2801              CMP      r0,#1
000064  d006              BEQ      |L17.116|
000066  2803              CMP      r0,#3
000068  d00c              BEQ      |L17.132|
00006a  2804              CMP      r0,#4
00006c  d006              BEQ      |L17.124|
00006e  2805              CMP      r0,#5
000070  d110              BNE      |L17.148|
000072  e00b              B        |L17.140|
                  |L17.116|
;;;651    			{
;;;652    			case DUT_TYPE_GB:
;;;653    				// 进入高标升级
;;;654    				STATE_EnterState(STATE_GAOBIAO_CAN_UPGRADE);
000074  2002              MOVS     r0,#2
000076  f7fffffe          BL       STATE_EnterState
;;;655    				break;
00007a  e00f              B        |L17.156|
                  |L17.124|
;;;656    
;;;657    			case DUT_TYPE_SEG:
;;;658    				// 进入数码管、段码屏升级
;;;659    				STATE_EnterState(STATE_SEG_CAN_UPGRADE);
00007c  2005              MOVS     r0,#5
00007e  f7fffffe          BL       STATE_EnterState
;;;660    				break;
000082  e00b              B        |L17.156|
                  |L17.132|
;;;661    
;;;662    			case DUT_TYPE_HUAXIN:
;;;663    				// 华芯微特升级
;;;664    				STATE_EnterState(STATE_HUAXIN_CAN_UPGRADE);
000084  2004              MOVS     r0,#4
000086  f7fffffe          BL       STATE_EnterState
;;;665    				break;
00008a  e007              B        |L17.156|
                  |L17.140|
;;;666    
;;;667    			case DUT_TYPE_KAIYANG:
;;;668    				// 进入开阳升级
;;;669    				STATE_EnterState(STATE_KAIYANG_CAN_UPGRADE);
00008c  2006              MOVS     r0,#6
00008e  f7fffffe          BL       STATE_EnterState
;;;670    				break;
000092  e003              B        |L17.156|
                  |L17.148|
;;;671    
;;;672    			default:
;;;673    				// 进入通用can升级
;;;674    				STATE_EnterState(STATE_CM_CAN_UPGRADE);
000094  2003              MOVS     r0,#3
000096  f7fffffe          BL       STATE_EnterState
;;;675    				break;
00009a  bf00              NOP      
                  |L17.156|
00009c  bf00              NOP                            ;655
;;;676    			}
;;;677    			break;
00009e  e000              B        |L17.162|
                  |L17.160|
;;;678    
;;;679    		default:
;;;680    			break;
0000a0  bf00              NOP      
                  |L17.162|
0000a2  e002              B        |L17.170|
                  |L17.164|
;;;681    		}
;;;682    	}
;;;683    	else
;;;684    	{
;;;685    		STATE_EnterState(STATE_STANDBY);
0000a4  2001              MOVS     r0,#1
0000a6  f7fffffe          BL       STATE_EnterState
                  |L17.170|
;;;686    	}
;;;687    }
0000aa  bd10              POP      {r4,pc}
;;;688    
                          ENDP

                  |L17.172|
                          DCD      dut_info

                          AREA ||i.setDutProgressReportInfo||, CODE, READONLY, ALIGN=2

                  setDutProgressReportInfo PROC
;;;572    // 设置进度上报信息
;;;573    void setDutProgressReportInfo()
000000  b51c              PUSH     {r2-r4,lr}
;;;574    {
;;;575    	dut_info.dutProgress[0] = 0;   // boot
000002  2000              MOVS     r0,#0
000004  491f              LDR      r1,|L18.132|
000006  f881003c          STRB     r0,[r1,#0x3c]
;;;576    	dut_info.dutProgress[1] = 101; // boot
00000a  2165              MOVS     r1,#0x65
00000c  481d              LDR      r0,|L18.132|
00000e  f880103d          STRB     r1,[r0,#0x3d]
;;;577    	dut_info.dutProgress[2] = 1;   // app
000012  2101              MOVS     r1,#1
000014  f880103e          STRB     r1,[r0,#0x3e]
;;;578    	dut_info.dutProgress[4] = 2;   // ui
000018  2102              MOVS     r1,#2
00001a  f8801040          STRB     r1,[r0,#0x40]
;;;579    	dut_info.dutProgress[6] = 3;   // config
00001e  2103              MOVS     r1,#3
000020  f8801042          STRB     r1,[r0,#0x42]
;;;580    
;;;581    	if (!dut_info.appUpFlag)
000024  7e40              LDRB     r0,[r0,#0x19]  ; dut_info
000026  b920              CBNZ     r0,|L18.50|
;;;582    	{
;;;583    		dut_info.dutProgress[3] = 101;
000028  2165              MOVS     r1,#0x65
00002a  4816              LDR      r0,|L18.132|
00002c  f880103f          STRB     r1,[r0,#0x3f]
000030  e003              B        |L18.58|
                  |L18.50|
;;;584    	}
;;;585    	else
;;;586    	{
;;;587    		dut_info.dutProgress[3] = 0;
000032  2100              MOVS     r1,#0
000034  4813              LDR      r0,|L18.132|
000036  f880103f          STRB     r1,[r0,#0x3f]
                  |L18.58|
;;;588    	}
;;;589    
;;;590    	if (!dut_info.uiUpFlag)
00003a  4812              LDR      r0,|L18.132|
00003c  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00003e  b920              CBNZ     r0,|L18.74|
;;;591    	{
;;;592    		dut_info.dutProgress[5] = 101;
000040  2165              MOVS     r1,#0x65
000042  4810              LDR      r0,|L18.132|
000044  f8801041          STRB     r1,[r0,#0x41]
000048  e003              B        |L18.82|
                  |L18.74|
;;;593    	}
;;;594    	else
;;;595    	{
;;;596    		dut_info.dutProgress[5] = 0;
00004a  2100              MOVS     r1,#0
00004c  480d              LDR      r0,|L18.132|
00004e  f8801041          STRB     r1,[r0,#0x41]
                  |L18.82|
;;;597    	}
;;;598    
;;;599    	if (!dut_info.configUpFlag)
000052  480c              LDR      r0,|L18.132|
000054  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
000056  b920              CBNZ     r0,|L18.98|
;;;600    	{
;;;601    		dut_info.dutProgress[7] = 101;
000058  2165              MOVS     r1,#0x65
00005a  480a              LDR      r0,|L18.132|
00005c  f8801043          STRB     r1,[r0,#0x43]
000060  e003              B        |L18.106|
                  |L18.98|
;;;602    	}
;;;603    	else
;;;604    	{
;;;605    		dut_info.dutProgress[7] = 0;
000062  2100              MOVS     r1,#0
000064  4807              LDR      r0,|L18.132|
000066  f8801043          STRB     r1,[r0,#0x43]
                  |L18.106|
;;;606    	}
;;;607    
;;;608    	// 进度上报
;;;609    	TIMER_AddTask(TIMER_ID_SET_DUT_PROGRESS_REPORT,
00006a  2001              MOVS     r0,#1
00006c  1e81              SUBS     r1,r0,#2
00006e  4603              MOV      r3,r0
000070  4a05              LDR      r2,|L18.136|
000072  e9cd1000          STRD     r1,r0,[sp,#0]
000076  f44f7196          MOV      r1,#0x12c
00007a  2003              MOVS     r0,#3
00007c  f7fffffe          BL       TIMER_AddTask
;;;610    				  300,
;;;611    				  dutProgressReport,
;;;612    				  TRUE,
;;;613    				  TIMER_LOOP_FOREVER,
;;;614    				  ACTION_MODE_ADD_TO_QUEUE);
;;;615    }
000080  bd1c              POP      {r2-r4,pc}
;;;616    
                          ENDP

000082  0000              DCW      0x0000
                  |L18.132|
                          DCD      dut_info
                  |L18.136|
                          DCD      dutProgressReport

                          AREA ||i.setUpItem||, CODE, READONLY, ALIGN=2

                  setUpItem PROC
;;;544    // 升级项控制
;;;545    void setUpItem(uint8 upItem, uint8 ctrlState)
000000  2200              MOVS     r2,#0
;;;546    {
;;;547    	dut_info.appUpFlag = FALSE;
000002  4b0e              LDR      r3,|L19.60|
000004  765a              STRB     r2,[r3,#0x19]
;;;548    	dut_info.uiUpFlag = FALSE;
000006  76da              STRB     r2,[r3,#0x1b]
;;;549    	dut_info.configUpFlag = FALSE;
000008  769a              STRB     r2,[r3,#0x1a]
;;;550    	// 清除状态
;;;551    	dut_info.currentAppSize = 0;
00000a  62da              STR      r2,[r3,#0x2c]  ; dut_info
;;;552    	dut_info.currentUiSize = 0;
00000c  631a              STR      r2,[r3,#0x30]  ; dut_info
;;;553    	if (1 == ctrlState)
00000e  2901              CMP      r1,#1
000010  d113              BNE      |L19.58|
;;;554    	{
;;;555    		if (0x02 == (upItem & 0x02)) // 升级app
000012  f0000202          AND      r2,r0,#2
000016  2a02              CMP      r2,#2
000018  d101              BNE      |L19.30|
;;;556    		{
;;;557    			dut_info.appUpFlag = TRUE;
00001a  2201              MOVS     r2,#1
00001c  765a              STRB     r2,[r3,#0x19]
                  |L19.30|
;;;558    		}
;;;559    
;;;560    		if (0x04 == (upItem & 0x04)) // 升级ui
00001e  f0000204          AND      r2,r0,#4
000022  2a04              CMP      r2,#4
000024  d102              BNE      |L19.44|
;;;561    		{
;;;562    			dut_info.uiUpFlag = TRUE;
000026  2201              MOVS     r2,#1
000028  4b04              LDR      r3,|L19.60|
00002a  76da              STRB     r2,[r3,#0x1b]
                  |L19.44|
;;;563    		}
;;;564    
;;;565    		if (0x08 == (upItem & 0x08)) // 升级config
00002c  f0000208          AND      r2,r0,#8
000030  2a08              CMP      r2,#8
000032  d102              BNE      |L19.58|
;;;566    		{
;;;567    			dut_info.configUpFlag = TRUE;
000034  2201              MOVS     r2,#1
000036  4b01              LDR      r3,|L19.60|
000038  769a              STRB     r2,[r3,#0x1a]
                  |L19.58|
;;;568    		}
;;;569    	}
;;;570    }
00003a  4770              BX       lr
;;;571    
                          ENDP

                  |L19.60|
                          DCD      dut_info

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  armProtocolCB
                          %        1872

                          AREA ||.data||, DATA, ALIGN=2

                  allPacketSize
                          DCD      0x00000000
                  allPacket
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  currPacketNum
                          DCD      0x0000ffff

;*** Start embedded assembler ***

#line 1 "User\\ArmProtocol.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_ArmProtocol_c_a6b8f6fd____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___13_ArmProtocol_c_a6b8f6fd____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_ArmProtocol_c_a6b8f6fd____REVSH|
#line 128
|__asm___13_ArmProtocol_c_a6b8f6fd____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
