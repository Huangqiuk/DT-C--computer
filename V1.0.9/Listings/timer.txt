; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\timer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\timer.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\timer.crf User\timer.c]
                          THUMB

                          AREA ||i.TIMER1_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIMER1_IRQHandler PROC
;;;28     // 定时器x中断服务程序
;;;29     void TIMER1_IRQHandler(void) // TIMx硬件定时器中断矢量入口
000000  b510              PUSH     {r4,lr}
;;;30     {
;;;31         if (timer_interrupt_flag_get(STM32_TIMERx_NUM_DEF, TIMER_INT_FLAG_UP) != RESET) // 检查TIMx更新中断发生与否
000002  2101              MOVS     r1,#1
000004  078c              LSLS     r4,r1,#30
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       timer_interrupt_flag_get
00000c  2800              CMP      r0,#0
00000e  d007              BEQ      |L1.32|
;;;32         {
;;;33             // 清除TIMx更新中断标志
;;;34             timer_interrupt_flag_clear(STM32_TIMERx_NUM_DEF, TIMER_INT_FLAG_UP);
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       timer_interrupt_flag_clear
;;;35     
;;;36             // 定时器回调函数
;;;37             TIMER_CALLBACK_OnTimer();
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      TIMER_CALLBACK_OnTimer
                  |L1.32|
;;;38         }
;;;39     }
000020  bd10              POP      {r4,pc}
;;;40     
                          ENDP


                          AREA ||i.TIMER_AddTask||, CODE, READONLY, ALIGN=2

                  TIMER_AddTask PROC
;;;87     
;;;88     BOOL TIMER_AddTask(TIMER_ID id, uint32 time, void (*action)(uint32 param), uint32 param, int32 actionTime, ACTION_MODE_E actionMode)
000000  b5f0              PUSH     {r4-r7,lr}
;;;89     {
000002  e9dd6705          LDRD     r6,r7,[sp,#0x14]
;;;90         // 执行次数为0，不添加
;;;91         if (0 == actionTime)
000006  2e00              CMP      r6,#0
000008  d01a              BEQ      |L2.64|
;;;92         {
;;;93             return FALSE;
;;;94         }
;;;95     
;;;96         // 进入多少次中断之后执行回调函数
;;;97         timerCB.top[id] = time / TIMER_TIME;
00000a  f04f0c05          MOV      r12,#5
00000e  fbb1f4fc          UDIV     r4,r1,r12
000012  4d0c              LDR      r5,|L2.68|
000014  f8454020          STR      r4,[r5,r0,LSL #2]
;;;98         
;;;99         // 时间到执行的回调函数
;;;100        timerCB.action[id] = action;
000018  eb050480          ADD      r4,r5,r0,LSL #2
00001c  f8c420d0          STR      r2,[r4,#0xd0]
;;;101        timerCB.param[id] = param;
000020  f8c43138          STR      r3,[r4,#0x138]
;;;102        
;;;103        // 循环次数
;;;104        timerCB.loopCount[id] = actionTime - 1; // 动作次数减1，即为重复次数
000024  1e76              SUBS     r6,r6,#1
000026  f8c461a0          STR      r6,[r4,#0x1a0]
;;;105        
;;;106        // 进入中断的次数
;;;107        timerCB.count[id] = time / TIMER_TIME;  // 这条赋值语句放到最后，可以保证在前面参数设置OK以后才启动软件定时器
00002a  fbb1f1fc          UDIV     r1,r1,r12
00002e  66a1              STR      r1,[r4,#0x68]
;;;108        
;;;109        // 执行模式
;;;110        timerCB.actionMode[id] = actionMode;
000030  4428              ADD      r0,r0,r5
000032  f8807208          STRB     r7,[r0,#0x208]
;;;111        
;;;112        // 设置定时器任务状态
;;;113        timerCB.active[id] = TRUE;
000036  2101              MOVS     r1,#1
000038  f8801222          STRB     r1,[r0,#0x222]
;;;114    
;;;115        return TRUE;
00003c  2001              MOVS     r0,#1
;;;116    }
00003e  bdf0              POP      {r4-r7,pc}
                  |L2.64|
000040  2000              MOVS     r0,#0                 ;93
000042  bdf0              POP      {r4-r7,pc}
;;;117    
                          ENDP

                  |L2.68|
                          DCD      ||.bss||

                          AREA ||i.TIMER_AddToQueue||, CODE, READONLY, ALIGN=2

                  TIMER_AddToQueue PROC
;;;149    // 向定时器任务队列中添加一个任务
;;;150    BOOL TIMER_AddToQueue(void (*action)(uint32 param), uint32 param)
000000  b570              PUSH     {r4-r6,lr}
;;;151    {
;;;152        // 队列满，返回失败信息
;;;153        if ((timerCB.queue.end + 1) % TIMER_TASK_QUEUE_SIZE == timerCB.queue.head)
000002  4a13              LDR      r2,|L3.80|
000004  240f              MOVS     r4,#0xf
000006  f89232b5          LDRB     r3,[r2,#0x2b5]  ; timerCB
00000a  461d              MOV      r5,r3
00000c  1c5b              ADDS     r3,r3,#1
00000e  fbb3f6f4          UDIV     r6,r3,r4
000012  fb043316          MLS      r3,r4,r6,r3
000016  f89262b4          LDRB     r6,[r2,#0x2b4]  ; timerCB
00001a  42b3              CMP      r3,r6
00001c  d101              BNE      |L3.34|
;;;154        {
;;;155            return FALSE;
00001e  2000              MOVS     r0,#0
;;;156        }
;;;157    
;;;158        // 队列未满，添加
;;;159        timerCB.queue.task[timerCB.queue.end].action = action;
;;;160        timerCB.queue.task[timerCB.queue.end].param = param;
;;;161        timerCB.queue.end++;
;;;162        timerCB.queue.end %= TIMER_TASK_QUEUE_SIZE;
;;;163    
;;;164        return TRUE;
;;;165    }
000020  bd70              POP      {r4-r6,pc}
                  |L3.34|
000022  eb0203c5          ADD      r3,r2,r5,LSL #3       ;159
000026  f8c3023c          STR      r0,[r3,#0x23c]        ;159
00002a  f89202b5          LDRB     r0,[r2,#0x2b5]        ;160  ; timerCB
00002e  eb0200c0          ADD      r0,r2,r0,LSL #3       ;160
000032  f8c01240          STR      r1,[r0,#0x240]        ;160
000036  f89202b5          LDRB     r0,[r2,#0x2b5]        ;161  ; timerCB
00003a  1c40              ADDS     r0,r0,#1              ;161
00003c  b2c0              UXTB     r0,r0                 ;161
00003e  fbb0f1f4          UDIV     r1,r0,r4              ;162
000042  fb040011          MLS      r0,r4,r1,r0           ;162
000046  f88202b5          STRB     r0,[r2,#0x2b5]        ;162
00004a  2001              MOVS     r0,#1                 ;164
00004c  bd70              POP      {r4-r6,pc}
;;;166    
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      ||.bss||

                          AREA ||i.TIMER_CALLBACK_OnTimer||, CODE, READONLY, ALIGN=2

                  TIMER_CALLBACK_OnTimer PROC
;;;190    
;;;191    void TIMER_CALLBACK_OnTimer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;192    {
;;;193        uint8 i;
;;;194        for (i = 0; i < TIMER_ID_MAX; i++)
000002  2400              MOVS     r4,#0
;;;195        {
;;;196            // 计数值大于0，说明当前定时器处于活动状态，需要进行处理
;;;197            if (timerCB.count[i] > 0)
000004  4d18              LDR      r5,|L4.104|
                  |L4.6|
000006  eb050284          ADD      r2,r5,r4,LSL #2
00000a  6e90              LDR      r0,[r2,#0x68]
00000c  b308              CBZ      r0,|L4.82|
;;;198            {
;;;199                // 跳过被暂停的定时器
;;;200                if (!timerCB.active[i])
00000e  1929              ADDS     r1,r5,r4
000010  f8910222          LDRB     r0,[r1,#0x222]
000014  b1e8              CBZ      r0,|L4.82|
;;;201                {
;;;202                    continue;
;;;203                }
;;;204    
;;;205                // 计数值递减
;;;206                timerCB.count[i]--;
000016  6e90              LDR      r0,[r2,#0x68]
000018  1e40              SUBS     r0,r0,#1
00001a  6690              STR      r0,[r2,#0x68]
;;;207                
;;;208                // 计数值为0，说明软件定时器时间到
;;;209                if (0 == timerCB.count[i])
00001c  6e90              LDR      r0,[r2,#0x68]
00001e  b9c0              CBNZ     r0,|L4.82|
;;;210                {
;;;211    
;;;212                    // 如果是无限循环，则无条件重新设置计数初值
;;;213                    if (timerCB.loopCount[i] < 0)
000020  f8d201a0          LDR      r0,[r2,#0x1a0]
000024  2800              CMP      r0,#0
000026  da03              BGE      |L4.48|
;;;214                    {
;;;215                        timerCB.count[i] = timerCB.top[i];
000028  f8550024          LDR      r0,[r5,r4,LSL #2]
00002c  6690              STR      r0,[r2,#0x68]
00002e  e007              B        |L4.64|
                  |L4.48|
;;;216                    }
;;;217                    // 有限循环
;;;218                    else if (timerCB.loopCount[i] > 0)
000030  dd06              BLE      |L4.64|
;;;219                    {
;;;220                        timerCB.count[i] = timerCB.top[i];
000032  f8553024          LDR      r3,[r5,r4,LSL #2]
000036  6693              STR      r3,[r2,#0x68]
;;;221    
;;;222                        // 剩余循环次数递减
;;;223                        timerCB.loopCount[i]--;
000038  f1a00001          SUB      r0,r0,#1
00003c  f8c201a0          STR      r0,[r2,#0x1a0]
                  |L4.64|
;;;224                    }
;;;225                    // 循环次数为0，不予重复，当前软件定时器资源释放
;;;226                    else
;;;227                    {
;;;228                    }
;;;229    
;;;230                    // 执行模式为立即执行，则在中断中执行动作
;;;231                    if (ACTION_MODE_DO_AT_ONCE == timerCB.actionMode[i])
000040  f8910208          LDRB     r0,[r1,#0x208]
000044  b150              CBZ      r0,|L4.92|
;;;232                    {
;;;233                        (*timerCB.action[i])(timerCB.param[i]);
;;;234                    }
;;;235                    // 其它模式，添加到任务队列中，在中断外执行
;;;236                    else
;;;237                    {
;;;238                        TIMER_AddToQueue(timerCB.action[i], timerCB.param[i]);
000046  f10202d0          ADD      r2,r2,#0xd0
00004a  6e91              LDR      r1,[r2,#0x68]
00004c  6810              LDR      r0,[r2,#0]
00004e  f7fffffe          BL       TIMER_AddToQueue
                  |L4.82|
000052  1c64              ADDS     r4,r4,#1              ;194
000054  b2e4              UXTB     r4,r4                 ;194
000056  2c1a              CMP      r4,#0x1a              ;194
000058  d3d5              BCC      |L4.6|
;;;239                    }
;;;240                }
;;;241            }
;;;242        }
;;;243    }
00005a  bd70              POP      {r4-r6,pc}
                  |L4.92|
00005c  32d0              ADDS     r2,r2,#0xd0           ;233
00005e  6811              LDR      r1,[r2,#0]            ;233
000060  6e90              LDR      r0,[r2,#0x68]         ;233
000062  4788              BLX      r1                    ;233
000064  e7f5              B        |L4.82|
;;;244    
                          ENDP

000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      ||.bss||

                          AREA ||i.TIMER_ChangeTime||, CODE, READONLY, ALIGN=2

                  TIMER_ChangeTime PROC
;;;291    // 改变指定定时器定时时间
;;;292    BOOL TIMER_ChangeTime(TIMER_ID id, uint32 time)
000000  b510              PUSH     {r4,lr}
;;;293    {
;;;294        timerCB.top[id] = time / TIMER_TIME;
000002  2205              MOVS     r2,#5
000004  fbb1f4f2          UDIV     r4,r1,r2
000008  4b04              LDR      r3,|L5.28|
00000a  f8434020          STR      r4,[r3,r0,LSL #2]
;;;295        timerCB.count[id] = time / TIMER_TIME;
00000e  fbb1f1f2          UDIV     r1,r1,r2
000012  eb030080          ADD      r0,r3,r0,LSL #2
000016  6681              STR      r1,[r0,#0x68]
;;;296    
;;;297        return TRUE;
000018  2001              MOVS     r0,#1
;;;298    }
00001a  bd10              POP      {r4,pc}
                          ENDP

                  |L5.28|
                          DCD      ||.bss||

                          AREA ||i.TIMER_DoNothing||, CODE, READONLY, ALIGN=1

                  TIMER_DoNothing PROC
;;;58     
;;;59     void TIMER_DoNothing(uint32 param)
000000  4770              BX       lr
;;;60     {
;;;61     }
;;;62     
                          ENDP


                          AREA ||i.TIMER_Init||, CODE, READONLY, ALIGN=2

                  TIMER_Init PROC
;;;62     
;;;63     void TIMER_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;64     {
;;;65         TIMER_ID i;
;;;66     
;;;67         // 定时器数据结构初始化
;;;68         for (i = (TIMER_ID)0; i < TIMER_ID_MAX; i++)
000002  2000              MOVS     r0,#0
000004  2200              MOVS     r2,#0
;;;69         {
;;;70             timerCB.count[i] = 0;
000006  4b0f              LDR      r3,|L7.68|
;;;71             timerCB.top[i] = 0;
;;;72             timerCB.action[i] = TIMER_DoNothing;
000008  4c0f              LDR      r4,|L7.72|
;;;73             timerCB.param[i] = 0;
;;;74             timerCB.loopCount[i] = 0;
;;;75             timerCB.active[i] = TRUE;
00000a  2501              MOVS     r5,#1
                  |L7.12|
00000c  eb030180          ADD      r1,r3,r0,LSL #2       ;70
000010  668a              STR      r2,[r1,#0x68]         ;70
000012  f8432020          STR      r2,[r3,r0,LSL #2]     ;71
000016  f8c140d0          STR      r4,[r1,#0xd0]         ;72
00001a  f8c12138          STR      r2,[r1,#0x138]        ;73
00001e  f8c121a0          STR      r2,[r1,#0x1a0]        ;74
000022  1819              ADDS     r1,r3,r0
000024  f8815222          STRB     r5,[r1,#0x222]
000028  1c40              ADDS     r0,r0,#1              ;68
00002a  b240              SXTB     r0,r0                 ;68
00002c  281a              CMP      r0,#0x1a              ;68
00002e  dbed              BLT      |L7.12|
;;;76         }
;;;77     
;;;78         timerCB.queue.head = 0;
000030  f88322b4          STRB     r2,[r3,#0x2b4]
;;;79         timerCB.queue.end = 0;
000034  f88322b5          STRB     r2,[r3,#0x2b5]
;;;80     
;;;81         // 硬件定时器x初始化
;;;82         TIMER_InitTimerx();
000038  f7fffffe          BL       TIMER_InitTimerx
;;;83     
;;;84         // 启动定时器x
;;;85         TIMER_StartTimerx();
00003c  e8bd4070          POP      {r4-r6,lr}
000040  f7ffbffe          B.W      TIMER_StartTimerx
;;;86     }
;;;87     
                          ENDP

                  |L7.68|
                          DCD      ||.bss||
                  |L7.72|
                          DCD      TIMER_DoNothing

                          AREA ||i.TIMER_InitTimerx||, CODE, READONLY, ALIGN=1

                  TIMER_InitTimerx PROC
;;;41     // 初始化定时器
;;;42     void TIMER_InitTimerx(void)
000000  f648419f          MOV      r1,#0x8c9f
;;;43     {
;;;44         TIMx_INT_Init(9, 35999); // (35999+1) / 72MHz * (9+1) =  5ms
000004  2009              MOVS     r0,#9
000006  f7ffbffe          B.W      TIMx_INT_Init
;;;45     }
;;;46     
                          ENDP


                          AREA ||i.TIMER_KillAllTimer||, CODE, READONLY, ALIGN=2

                  TIMER_KillAllTimer PROC
;;;267    // 注销所有定时器
;;;268    void TIMER_KillAllTimer(void)
000000  b510              PUSH     {r4,lr}
;;;269    {
;;;270        TIMER_ID i;
;;;271    
;;;272        for (i = (TIMER_ID)0; i < TIMER_ID_MAX; i++)
000002  2000              MOVS     r0,#0
;;;273        {
;;;274            timerCB.count[i] = 0;
000004  4b08              LDR      r3,|L9.40|
;;;275            timerCB.loopCount[i] = 0;
;;;276            timerCB.queue.task[i].action = TIMER_DoNothing;
000006  4c09              LDR      r4,|L9.44|
000008  2200              MOVS     r2,#0                 ;272
                  |L9.10|
00000a  eb030180          ADD      r1,r3,r0,LSL #2       ;274
00000e  668a              STR      r2,[r1,#0x68]         ;274
000010  f8c121a0          STR      r2,[r1,#0x1a0]        ;275
000014  eb0301c0          ADD      r1,r3,r0,LSL #3
000018  f8c1423c          STR      r4,[r1,#0x23c]
00001c  1c40              ADDS     r0,r0,#1              ;272
00001e  b240              SXTB     r0,r0                 ;272
000020  281a              CMP      r0,#0x1a              ;272
000022  dbf2              BLT      |L9.10|
;;;277        }
;;;278    }
000024  bd10              POP      {r4,pc}
;;;279    
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
                          DCD      ||.bss||
                  |L9.44|
                          DCD      TIMER_DoNothing

                          AREA ||i.TIMER_KillTask||, CODE, READONLY, ALIGN=2

                  TIMER_KillTask PROC
;;;118    // 销毁定时器任务
;;;119    void TIMER_KillTask(TIMER_ID id)
000000  b5f0              PUSH     {r4-r7,lr}
;;;120    {
;;;121        uint8 i;
;;;122    
;;;123        if ((TIMER_ID_NULL == id) || (id >= TIMER_ID_MAX))
000002  1c41              ADDS     r1,r0,#1
000004  d027              BEQ      |L10.86|
000006  281a              CMP      r0,#0x1a
000008  da25              BGE      |L10.86|
;;;124        {
;;;125            return;
;;;126        }
;;;127    
;;;128        // 计数值清零，即可将当前软件定时器释放
;;;129        timerCB.count[id] = 0; // 这条赋值语句放到最前，可以保证在第一时间停止软件定时器
00000a  4c13              LDR      r4,|L10.88|
00000c  2200              MOVS     r2,#0
00000e  eb040180          ADD      r1,r4,r0,LSL #2
000012  668a              STR      r2,[r1,#0x68]
;;;130    
;;;131        // 同时要删除已添加入任务队列的任务
;;;132        i = timerCB.queue.head;
000014  f89402b4          LDRB     r0,[r4,#0x2b4]  ; timerCB
;;;133        while (i != timerCB.queue.end)
;;;134        {
;;;135            // 队列中有当前定时器对应的任务，就删除
;;;136            if ((timerCB.queue.task[i].action == timerCB.action[id]) &&
;;;137                    (timerCB.queue.task[i].param == timerCB.param[id]))
;;;138            {
;;;139                timerCB.queue.task[i].action = TIMER_DoNothing;
000018  4d10              LDR      r5,|L10.92|
;;;140            }
;;;141    
;;;142            i++;
;;;143            i %= TIMER_TASK_QUEUE_SIZE;
00001a  230f              MOVS     r3,#0xf
00001c  e015              B        |L10.74|
                  |L10.30|
00001e  eb0402c0          ADD      r2,r4,r0,LSL #3       ;136
000022  f8d170d0          LDR      r7,[r1,#0xd0]         ;136
000026  f8d2623c          LDR      r6,[r2,#0x23c]        ;136
00002a  42be              CMP      r6,r7                 ;136
00002c  d107              BNE      |L10.62|
00002e  f8d26240          LDR      r6,[r2,#0x240]        ;137
000032  f8d17138          LDR      r7,[r1,#0x138]        ;137
000036  42be              CMP      r6,r7                 ;137
000038  d101              BNE      |L10.62|
00003a  f8c2523c          STR      r5,[r2,#0x23c]        ;139
                  |L10.62|
00003e  1c40              ADDS     r0,r0,#1              ;142
000040  b2c0              UXTB     r0,r0                 ;142
000042  fbb0f2f3          UDIV     r2,r0,r3
000046  fb030012          MLS      r0,r3,r2,r0
                  |L10.74|
00004a  f89422b5          LDRB     r2,[r4,#0x2b5]        ;133  ; timerCB
00004e  4282              CMP      r2,r0                 ;133
000050  d1e5              BNE      |L10.30|
;;;144        }
;;;145        timerCB.action[id] = TIMER_DoNothing;
000052  f8c150d0          STR      r5,[r1,#0xd0]
                  |L10.86|
;;;146    
;;;147    }
000056  bdf0              POP      {r4-r7,pc}
;;;148    
                          ENDP

                  |L10.88|
                          DCD      ||.bss||
                  |L10.92|
                          DCD      TIMER_DoNothing

                          AREA ||i.TIMER_Pause||, CODE, READONLY, ALIGN=2

                  TIMER_Pause PROC
;;;245    // 暂停指定的定时器
;;;246    void TIMER_Pause(TIMER_ID id)
000000  1c41              ADDS     r1,r0,#1
;;;247    {
000002  d006              BEQ      |L11.18|
;;;248        if ((TIMER_ID_NULL == id) || (id >= TIMER_ID_MAX))
000004  281a              CMP      r0,#0x1a
000006  da04              BGE      |L11.18|
;;;249        {
;;;250            return;
;;;251        }
;;;252    
;;;253        timerCB.active[id] = FALSE;
000008  4a02              LDR      r2,|L11.20|
00000a  2100              MOVS     r1,#0
00000c  4410              ADD      r0,r0,r2
00000e  f8801222          STRB     r1,[r0,#0x222]
                  |L11.18|
;;;254    }
000012  4770              BX       lr
;;;255    
                          ENDP

                  |L11.20|
                          DCD      ||.bss||

                          AREA ||i.TIMER_ResetTimer||, CODE, READONLY, ALIGN=2

                  TIMER_ResetTimer PROC
;;;280    // 复位定时器，重新开始
;;;281    void TIMER_ResetTimer(TIMER_ID id)
000000  1c41              ADDS     r1,r0,#1
;;;282    {
000002  d007              BEQ      |L12.20|
;;;283        if ((TIMER_ID_NULL == id) || (id >= TIMER_ID_MAX))
000004  281a              CMP      r0,#0x1a
000006  da05              BGE      |L12.20|
;;;284        {
;;;285            return;
;;;286        }
;;;287    
;;;288        timerCB.count[id] = timerCB.top[id];
000008  4903              LDR      r1,|L12.24|
00000a  f8512020          LDR      r2,[r1,r0,LSL #2]
00000e  eb010080          ADD      r0,r1,r0,LSL #2
000012  6682              STR      r2,[r0,#0x68]
                  |L12.20|
;;;289    }
000014  4770              BX       lr
;;;290    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      ||.bss||

                          AREA ||i.TIMER_Resume||, CODE, READONLY, ALIGN=2

                  TIMER_Resume PROC
;;;256    // 恢复指定的定时器
;;;257    void TIMER_Resume(TIMER_ID id)
000000  1c41              ADDS     r1,r0,#1
;;;258    {
000002  d006              BEQ      |L13.18|
;;;259        if ((TIMER_ID_NULL == id) || (id >= TIMER_ID_MAX))
000004  281a              CMP      r0,#0x1a
000006  da04              BGE      |L13.18|
;;;260        {
;;;261            return;
;;;262        }
;;;263    
;;;264        timerCB.active[id] = TRUE;
000008  4a02              LDR      r2,|L13.20|
00000a  2101              MOVS     r1,#1
00000c  4410              ADD      r0,r0,r2
00000e  f8801222          STRB     r1,[r0,#0x222]
                  |L13.18|
;;;265    }
000012  4770              BX       lr
;;;266    
                          ENDP

                  |L13.20|
                          DCD      ||.bss||

                          AREA ||i.TIMER_StartTimerx||, CODE, READONLY, ALIGN=1

                  TIMER_StartTimerx PROC
;;;47     // 启动硬件定时器
;;;48     void TIMER_StartTimerx(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;49     {
;;;50         timer_enable(STM32_TIMERx_NUM_DEF);
000004  f7ffbffe          B.W      timer_enable
;;;51     }
;;;52     
                          ENDP


                          AREA ||i.TIMER_StopTimerx||, CODE, READONLY, ALIGN=1

                  TIMER_StopTimerx PROC
;;;53     // 停止硬件定时器
;;;54     void TIMER_StopTimerx(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;55     {
;;;56         timer_disable(STM32_TIMERx_NUM_DEF);
000004  f7ffbffe          B.W      timer_disable
;;;57     }
;;;58     
                          ENDP


                          AREA ||i.TIMER_TaskQueueProcess||, CODE, READONLY, ALIGN=2

                  TIMER_TaskQueueProcess PROC
;;;167    // 定时器任务队列处理，在main中调用
;;;168    void TIMER_TaskQueueProcess(void)
000000  b510              PUSH     {r4,lr}
;;;169    {
;;;170        void (*action)(uint32 param) = NULL;
;;;171        uint32 param;
;;;172        TIMER_TASK *pTask = NULL;
;;;173    
;;;174        // 队列空，退出
;;;175        if (timerCB.queue.head == timerCB.queue.end)
000002  4c0d              LDR      r4,|L16.56|
000004  f89402b4          LDRB     r0,[r4,#0x2b4]  ; timerCB
000008  f89412b5          LDRB     r1,[r4,#0x2b5]  ; timerCB
00000c  4288              CMP      r0,r1
00000e  d011              BEQ      |L16.52|
;;;176        {
;;;177            return;
;;;178        }
;;;179    
;;;180        // 队列非空，取出head处的任务执行之
;;;181        pTask = &timerCB.queue.task[timerCB.queue.head];
000010  eb0400c0          ADD      r0,r4,r0,LSL #3
000014  f500700f          ADD      r0,r0,#0x23c
;;;182        action = pTask->action;
000018  6801              LDR      r1,[r0,#0]
;;;183        param = pTask->param;
00001a  6840              LDR      r0,[r0,#4]
;;;184        (*action)(param);
00001c  4788              BLX      r1
;;;185    
;;;186        // 删除任务
;;;187        timerCB.queue.head++;
00001e  f89402b4          LDRB     r0,[r4,#0x2b4]  ; timerCB
000022  1c40              ADDS     r0,r0,#1
000024  b2c0              UXTB     r0,r0
;;;188        timerCB.queue.head %= TIMER_TASK_QUEUE_SIZE;
000026  210f              MOVS     r1,#0xf
000028  fbb0f2f1          UDIV     r2,r0,r1
00002c  fb010012          MLS      r0,r1,r2,r0
000030  f88402b4          STRB     r0,[r4,#0x2b4]
                  |L16.52|
;;;189    }
000034  bd10              POP      {r4,pc}
;;;190    
                          ENDP

000036  0000              DCW      0x0000
                  |L16.56|
                          DCD      ||.bss||

                          AREA ||i.TIMx_INT_Init||, CODE, READONLY, ALIGN=1

                  TIMx_INT_Init PROC
;;;6      // 定时器硬件底层初始化
;;;7      void TIMx_INT_Init(uint16 arr, uint16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;8      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;9          timer_parameter_struct timer_initpara;
;;;10     
;;;11         rcu_periph_clock_enable(RCU_TIMER1); // 时钟使能
000006  f44f60e0          MOV      r0,#0x700
00000a  f7fffffe          BL       rcu_periph_clock_enable
;;;12         timer_deinit(STM32_TIMERx_NUM_DEF);
00000e  f04f4680          MOV      r6,#0x40000000
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       timer_deinit
;;;13     
;;;14         timer_initpara.prescaler = psc;
000018  f8ad5000          STRH     r5,[sp,#0]
;;;15         timer_initpara.alignedmode = TIMER_COUNTER_EDGE;
00001c  2100              MOVS     r1,#0
00001e  f8ad1002          STRH     r1,[sp,#2]
;;;16         timer_initpara.counterdirection = TIMER_COUNTER_UP;
000022  f8ad1004          STRH     r1,[sp,#4]
;;;17         timer_initpara.period = arr;
000026  9402              STR      r4,[sp,#8]
;;;18         timer_initpara.clockdivision = TIMER_CKDIV_DIV1;
000028  f8ad100c          STRH     r1,[sp,#0xc]
;;;19         timer_initpara.repetitioncounter = 0;
00002c  f88d100e          STRB     r1,[sp,#0xe]
;;;20         timer_init(STM32_TIMERx_NUM_DEF, &timer_initpara);
000030  4669              MOV      r1,sp
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       timer_init
;;;21     
;;;22         timer_flag_clear(STM32_TIMERx_NUM_DEF, TIMER_FLAG_UP);      // 清除溢出中断标志
000038  2101              MOVS     r1,#1
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       timer_flag_clear
;;;23         timer_interrupt_enable(STM32_TIMERx_NUM_DEF, TIMER_INT_UP); // 使能指定的TIM1中断,允许更新中断
000040  2101              MOVS     r1,#1
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       timer_interrupt_enable
;;;24     
;;;25         nvic_irq_enable(STM32_TIMERx_IRQn_DEF, 2, 2); // 设置中断优先级
000048  2202              MOVS     r2,#2
00004a  4611              MOV      r1,r2
00004c  201c              MOVS     r0,#0x1c
00004e  f7fffffe          BL       nvic_irq_enable
;;;26     }
000052  bd7f              POP      {r0-r6,pc}
;;;27     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  timerCB
                          %        696

;*** Start embedded assembler ***

#line 1 "User\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_769cd868____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___7_timer_c_769cd868____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_769cd868____REVSH|
#line 128
|__asm___7_timer_c_769cd868____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
