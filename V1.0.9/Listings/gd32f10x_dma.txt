; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_dma.crf Libraries\src\gd32f10x_dma.c]
                          THUMB

                          AREA ||i.dma_channel_disable||, CODE, READONLY, ALIGN=1

                  dma_channel_disable PROC
;;;262    */
;;;263    void dma_channel_disable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;264    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;265        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L1.34|
;;;266            DMA_WRONG_HANDLE
;;;267        }
;;;268        
;;;269        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CHEN;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f0210101          BIC      r1,r1,#1
00001e  6081              STR      r1,[r0,#8]
;;;270    }
000020  bd70              POP      {r4-r6,pc}
                  |L1.34|
000022  e7fe              B        |L1.34|
;;;271    
                          ENDP


                          AREA ||i.dma_channel_enable||, CODE, READONLY, ALIGN=1

                  dma_channel_enable PROC
;;;243    */
;;;244    void dma_channel_enable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;245    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;246        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L2.34|
;;;247            DMA_WRONG_HANDLE
;;;248        }
;;;249        
;;;250        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_CHEN;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f0410101          ORR      r1,r1,#1
00001e  6081              STR      r1,[r0,#8]
;;;251    }
000020  bd70              POP      {r4-r6,pc}
                  |L2.34|
000022  e7fe              B        |L2.34|
;;;252    
                          ENDP


                          AREA ||i.dma_circulation_disable||, CODE, READONLY, ALIGN=1

                  dma_circulation_disable PROC
;;;186    */
;;;187    void dma_circulation_disable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;188    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;189        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L3.34|
;;;190            DMA_WRONG_HANDLE
;;;191        }
;;;192        
;;;193        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CMEN;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f0210120          BIC      r1,r1,#0x20
00001e  6081              STR      r1,[r0,#8]
;;;194    }
000020  bd70              POP      {r4-r6,pc}
                  |L3.34|
000022  e7fe              B        |L3.34|
;;;195    
                          ENDP


                          AREA ||i.dma_circulation_enable||, CODE, READONLY, ALIGN=1

                  dma_circulation_enable PROC
;;;167    */
;;;168    void dma_circulation_enable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;169    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;170        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L4.34|
;;;171            DMA_WRONG_HANDLE
;;;172        }
;;;173    
;;;174        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_CMEN;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f0410120          ORR      r1,r1,#0x20
00001e  6081              STR      r1,[r0,#8]
;;;175    }
000020  bd70              POP      {r4-r6,pc}
                  |L4.34|
000022  e7fe              B        |L4.34|
;;;176    
                          ENDP


                          AREA ||i.dma_deinit||, CODE, READONLY, ALIGN=1

                  dma_deinit PROC
;;;56     */
;;;57     void dma_deinit(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;58     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;59         if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b198              CBZ      r0,|L5.56|
;;;60             DMA_WRONG_HANDLE
;;;61         }
;;;62         
;;;63         /* disable DMA a channel */
;;;64         DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_CHEN;
000010  eb050085          ADD      r0,r5,r5,LSL #2
000014  eb040280          ADD      r2,r4,r0,LSL #2
000018  6890              LDR      r0,[r2,#8]
00001a  f0200001          BIC      r0,r0,#1
00001e  6090              STR      r0,[r2,#8]
;;;65         /* reset DMA channel registers */
;;;66         DMA_CHCTL(dma_periph, channelx) = DMA_CHCTL_RESET_VALUE;
000020  2000              MOVS     r0,#0
000022  6090              STR      r0,[r2,#8]
;;;67         DMA_CHCNT(dma_periph, channelx) = DMA_CHCNT_RESET_VALUE;
000024  60d0              STR      r0,[r2,#0xc]
;;;68         DMA_CHPADDR(dma_periph, channelx) = DMA_CHPADDR_RESET_VALUE;
000026  6110              STR      r0,[r2,#0x10]
;;;69         DMA_CHMADDR(dma_periph, channelx) = DMA_CHMADDR_RESET_VALUE;
000028  6150              STR      r0,[r2,#0x14]
;;;70         DMA_INTC(dma_periph) |= DMA_FLAG_ADD(DMA_CHINTF_RESET_VALUE, channelx);
00002a  6860              LDR      r0,[r4,#4]
00002c  00aa              LSLS     r2,r5,#2
00002e  210f              MOVS     r1,#0xf
000030  4091              LSLS     r1,r1,r2
000032  4308              ORRS     r0,r0,r1
000034  6060              STR      r0,[r4,#4]
;;;71     }
000036  bd70              POP      {r4-r6,pc}
                  |L5.56|
000038  e7fe              B        |L5.56|
;;;72     
                          ENDP


                          AREA ||i.dma_flag_clear||, CODE, READONLY, ALIGN=1

                  dma_flag_clear PROC
;;;594    */
;;;595    void dma_flag_clear(uint32_t dma_periph, dma_channel_enum channelx, uint32_t flag)
000000  6843              LDR      r3,[r0,#4]
;;;596    {
;;;597        DMA_INTC(dma_periph) |= DMA_FLAG_ADD(flag, channelx);
000002  0089              LSLS     r1,r1,#2
000004  408a              LSLS     r2,r2,r1
000006  4313              ORRS     r3,r3,r2
000008  6043              STR      r3,[r0,#4]
;;;598    }
00000a  4770              BX       lr
;;;599    
                          ENDP


                          AREA ||i.dma_flag_get||, CODE, READONLY, ALIGN=1

                  dma_flag_get PROC
;;;564    */
;;;565    FlagStatus dma_flag_get(uint32_t dma_periph, dma_channel_enum channelx, uint32_t flag)
000000  6800              LDR      r0,[r0,#0]
;;;566    {
;;;567        FlagStatus reval;
;;;568    
;;;569        /* check whether the flag is set or not */
;;;570        if(RESET != (DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, channelx))){
000002  0089              LSLS     r1,r1,#2
000004  408a              LSLS     r2,r2,r1
000006  4210              TST      r0,r2
000008  d001              BEQ      |L7.14|
;;;571            reval = SET;
00000a  2001              MOVS     r0,#1
;;;572        }else{
;;;573            reval = RESET;
;;;574        }
;;;575        
;;;576        return reval;
;;;577    }
00000c  4770              BX       lr
                  |L7.14|
00000e  2000              MOVS     r0,#0                 ;573
000010  4770              BX       lr
;;;578    
                          ENDP


                          AREA ||i.dma_init||, CODE, READONLY, ALIGN=1

                  dma_init PROC
;;;112    */
;;;113    void dma_init(uint32_t dma_periph, dma_channel_enum channelx, dma_parameter_struct *init_struct)
000000  b570              PUSH     {r4-r6,lr}
;;;114    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;115        uint32_t ctl;
;;;116        
;;;117        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4629              MOV      r1,r5
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b348              CBZ      r0,|L8.102|
;;;118            DMA_WRONG_HANDLE
;;;119        }
;;;120        
;;;121        /* configure peripheral base address */
;;;122        DMA_CHPADDR(dma_periph, channelx) = init_struct->periph_addr;
000012  eb050085          ADD      r0,r5,r5,LSL #2
000016  eb060080          ADD      r0,r6,r0,LSL #2
00001a  6822              LDR      r2,[r4,#0]
00001c  6102              STR      r2,[r0,#0x10]
;;;123        
;;;124        /* configure memory base address */
;;;125        DMA_CHMADDR(dma_periph, channelx) = init_struct->memory_addr;
00001e  68a1              LDR      r1,[r4,#8]
000020  6141              STR      r1,[r0,#0x14]
;;;126        
;;;127        /* configure the number of remaining data to be transferred */
;;;128        DMA_CHCNT(dma_periph, channelx) = (init_struct->number & DMA_CHANNEL_CNT_MASK);
000022  8a21              LDRH     r1,[r4,#0x10]
000024  b289              UXTH     r1,r1
000026  60c1              STR      r1,[r0,#0xc]
;;;129        
;;;130        /* configure peripheral transfer width,memory transfer width, */
;;;131        ctl = DMA_CHCTL(dma_periph, channelx);
000028  6881              LDR      r1,[r0,#8]
;;;132        ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
00002a  f421527c          BIC      r2,r1,#0x3f00
;;;133        ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
00002e  68e3              LDR      r3,[r4,#0xc]
000030  6861              LDR      r1,[r4,#4]
000032  4319              ORRS     r1,r1,r3
000034  6963              LDR      r3,[r4,#0x14]
000036  4313              ORRS     r3,r3,r2
000038  4319              ORRS     r1,r1,r3
;;;134        DMA_CHCTL(dma_periph, channelx) = ctl;
00003a  6081              STR      r1,[r0,#8]
;;;135    
;;;136        /* configure peripheral increasing mode */
;;;137        if(DMA_PERIPH_INCREASE_ENABLE == init_struct->periph_inc){
00003c  7e21              LDRB     r1,[r4,#0x18]
00003e  2901              CMP      r1,#1
000040  d012              BEQ      |L8.104|
;;;138            DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_PNAGA;
;;;139        }else{
;;;140            DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
000042  6881              LDR      r1,[r0,#8]
000044  f0210140          BIC      r1,r1,#0x40
000048  6081              STR      r1,[r0,#8]
                  |L8.74|
;;;141        }
;;;142    
;;;143        /* configure memory increasing mode */
;;;144        if(DMA_MEMORY_INCREASE_ENABLE == init_struct->memory_inc){
00004a  7e61              LDRB     r1,[r4,#0x19]
00004c  2901              CMP      r1,#1
00004e  d010              BEQ      |L8.114|
;;;145            DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_MNAGA;
;;;146        }else{
;;;147            DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
000050  6881              LDR      r1,[r0,#8]
000052  f0210180          BIC      r1,r1,#0x80
000056  6081              STR      r1,[r0,#8]
                  |L8.88|
;;;148        }
;;;149        
;;;150        /* configure the direction of  data transfer */
;;;151        if(DMA_PERIPHERAL_TO_MEMORY == init_struct->direction){
000058  7ea1              LDRB     r1,[r4,#0x1a]
00005a  b179              CBZ      r1,|L8.124|
;;;152            DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_DIR;
;;;153        }else{
;;;154            DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
00005c  6881              LDR      r1,[r0,#8]
00005e  f0410110          ORR      r1,r1,#0x10
000062  6081              STR      r1,[r0,#8]
;;;155        } 
;;;156    }
000064  bd70              POP      {r4-r6,pc}
                  |L8.102|
000066  e7fe              B        |L8.102|
                  |L8.104|
000068  6881              LDR      r1,[r0,#8]            ;138
00006a  f0410140          ORR      r1,r1,#0x40           ;138
00006e  6081              STR      r1,[r0,#8]            ;138
000070  e7eb              B        |L8.74|
                  |L8.114|
000072  6881              LDR      r1,[r0,#8]            ;145
000074  f0410180          ORR      r1,r1,#0x80           ;145
000078  6081              STR      r1,[r0,#8]            ;145
00007a  e7ed              B        |L8.88|
                  |L8.124|
00007c  6881              LDR      r1,[r0,#8]            ;152
00007e  f0210110          BIC      r1,r1,#0x10           ;152
000082  6081              STR      r1,[r0,#8]            ;152
000084  bd70              POP      {r4-r6,pc}
;;;157    
                          ENDP


                          AREA ||i.dma_interrupt_disable||, CODE, READONLY, ALIGN=1

                  dma_interrupt_disable PROC
;;;706    */
;;;707    void dma_interrupt_disable(uint32_t dma_periph, dma_channel_enum channelx, uint32_t source)
000000  b570              PUSH     {r4-r6,lr}
;;;708    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;709        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b138              CBZ      r0,|L9.34|
;;;710            DMA_WRONG_HANDLE
;;;711        }
;;;712        
;;;713        DMA_CHCTL(dma_periph, channelx) &= ~source;
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  eb060080          ADD      r0,r6,r0,LSL #2
00001a  6881              LDR      r1,[r0,#8]
00001c  43a9              BICS     r1,r1,r5
00001e  6081              STR      r1,[r0,#8]
;;;714    }
000020  bd70              POP      {r4-r6,pc}
                  |L9.34|
000022  e7fe              B        |L9.34|
;;;715    
                          ENDP


                          AREA ||i.dma_interrupt_enable||, CODE, READONLY, ALIGN=1

                  dma_interrupt_enable PROC
;;;682    */
;;;683    void dma_interrupt_enable(uint32_t dma_periph, dma_channel_enum channelx, uint32_t source)
000000  b570              PUSH     {r4-r6,lr}
;;;684    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;685        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b138              CBZ      r0,|L10.34|
;;;686            DMA_WRONG_HANDLE
;;;687        }
;;;688        
;;;689        DMA_CHCTL(dma_periph, channelx) |= source;
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  eb060080          ADD      r0,r6,r0,LSL #2
00001a  6881              LDR      r1,[r0,#8]
00001c  4329              ORRS     r1,r1,r5
00001e  6081              STR      r1,[r0,#8]
;;;690    }
000020  bd70              POP      {r4-r6,pc}
                  |L10.34|
000022  e7fe              B        |L10.34|
;;;691    
                          ENDP


                          AREA ||i.dma_interrupt_flag_clear||, CODE, READONLY, ALIGN=1

                  dma_interrupt_flag_clear PROC
;;;662    */
;;;663    void dma_interrupt_flag_clear(uint32_t dma_periph, dma_channel_enum channelx, uint32_t flag)
000000  6843              LDR      r3,[r0,#4]
;;;664    {
;;;665        DMA_INTC(dma_periph) |= DMA_FLAG_ADD(flag, channelx);
000002  0089              LSLS     r1,r1,#2
000004  408a              LSLS     r2,r2,r1
000006  4313              ORRS     r3,r3,r2
000008  6043              STR      r3,[r0,#4]
;;;666    }
00000a  4770              BX       lr
;;;667    
                          ENDP


                          AREA ||i.dma_interrupt_flag_get||, CODE, READONLY, ALIGN=1

                  dma_interrupt_flag_get PROC
;;;614    */
;;;615    FlagStatus dma_interrupt_flag_get(uint32_t dma_periph, dma_channel_enum channelx, uint32_t flag)
000000  b510              PUSH     {r4,lr}
;;;616    {
;;;617        uint32_t interrupt_enable = 0U, interrupt_flag = 0U;
;;;618        
;;;619        switch(flag){
;;;620            case DMA_INT_FLAG_FTF:
;;;621                /* check whether the full transfer finish interrupt flag is set and enabled */
;;;622                interrupt_flag = DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, channelx);
000002  008c              LSLS     r4,r1,#2
000004  4613              MOV      r3,r2                 ;619
000006  40a2              LSLS     r2,r2,r4
;;;623                interrupt_enable = DMA_CHCTL(dma_periph, channelx) & DMA_CHXCTL_FTFIE;
000008  eb010181          ADD      r1,r1,r1,LSL #2
00000c  eb000181          ADD      r1,r0,r1,LSL #2
000010  2b02              CMP      r3,#2                 ;619
000012  d004              BEQ      |L12.30|
000014  2b04              CMP      r3,#4                 ;619
000016  d008              BEQ      |L12.42|
000018  2b08              CMP      r3,#8                 ;619
00001a  d00c              BEQ      |L12.54|
                  |L12.28|
;;;624                break;
;;;625            case DMA_INT_FLAG_HTF:
;;;626                /* check whether the half transfer finish interrupt flag is set and enabled */
;;;627                interrupt_flag = DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, channelx);
;;;628                interrupt_enable = DMA_CHCTL(dma_periph, channelx) & DMA_CHXCTL_HTFIE;
;;;629                break;
;;;630            case DMA_INT_FLAG_ERR:
;;;631                /* check whether the error interrupt flag is set and enabled */
;;;632                interrupt_flag = DMA_INTF(dma_periph) & DMA_FLAG_ADD(flag, channelx);
;;;633                interrupt_enable = DMA_CHCTL(dma_periph, channelx) & DMA_CHXCTL_ERRIE;
;;;634                break;
;;;635            default:
;;;636                DMA_WRONG_HANDLE
00001c  e7fe              B        |L12.28|
                  |L12.30|
00001e  6800              LDR      r0,[r0,#0]            ;622
000020  4010              ANDS     r0,r0,r2              ;622
000022  6889              LDR      r1,[r1,#8]            ;623
000024  f0010102          AND      r1,r1,#2              ;623
000028  e00a              B        |L12.64|
                  |L12.42|
00002a  6800              LDR      r0,[r0,#0]            ;627
00002c  4010              ANDS     r0,r0,r2              ;627
00002e  6889              LDR      r1,[r1,#8]            ;628
000030  f0010104          AND      r1,r1,#4              ;628
000034  e004              B        |L12.64|
                  |L12.54|
000036  6800              LDR      r0,[r0,#0]            ;632
000038  4010              ANDS     r0,r0,r2              ;632
00003a  6889              LDR      r1,[r1,#8]            ;633
00003c  f0010108          AND      r1,r1,#8              ;633
                  |L12.64|
;;;637            }
;;;638        
;;;639        /* when the interrupt flag is set and enabled, return SET */    
;;;640        if(interrupt_flag && interrupt_enable){
000040  b110              CBZ      r0,|L12.72|
000042  b109              CBZ      r1,|L12.72|
;;;641            return SET;
000044  2001              MOVS     r0,#1
;;;642        }else{
;;;643            return RESET;
;;;644        }
;;;645    }
000046  bd10              POP      {r4,pc}
                  |L12.72|
000048  2000              MOVS     r0,#0                 ;643
00004a  bd10              POP      {r4,pc}
;;;646    
                          ENDP


                          AREA ||i.dma_memory_address_config||, CODE, READONLY, ALIGN=1

                  dma_memory_address_config PROC
;;;302    */
;;;303    void dma_memory_address_config(uint32_t dma_periph, dma_channel_enum channelx, uint32_t address)
000000  b570              PUSH     {r4-r6,lr}
;;;304    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;305        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b128              CBZ      r0,|L13.30|
;;;306            DMA_WRONG_HANDLE
;;;307        }
;;;308        
;;;309        DMA_CHMADDR(dma_periph, channelx) = address;
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  eb060080          ADD      r0,r6,r0,LSL #2
00001a  6145              STR      r5,[r0,#0x14]
;;;310    }
00001c  bd70              POP      {r4-r6,pc}
                  |L13.30|
00001e  e7fe              B        |L13.30|
;;;311    
                          ENDP


                          AREA ||i.dma_memory_increase_disable||, CODE, READONLY, ALIGN=1

                  dma_memory_increase_disable PROC
;;;474    */
;;;475    void dma_memory_increase_disable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;476    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;477        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L14.34|
;;;478            DMA_WRONG_HANDLE
;;;479        }
;;;480        
;;;481        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_MNAGA;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f0210180          BIC      r1,r1,#0x80
00001e  6081              STR      r1,[r0,#8]
;;;482    }
000020  bd70              POP      {r4-r6,pc}
                  |L14.34|
000022  e7fe              B        |L14.34|
;;;483    
                          ENDP


                          AREA ||i.dma_memory_increase_enable||, CODE, READONLY, ALIGN=1

                  dma_memory_increase_enable PROC
;;;455    */
;;;456    void dma_memory_increase_enable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;457    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;458        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L15.34|
;;;459            DMA_WRONG_HANDLE
;;;460        }
;;;461        
;;;462        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_MNAGA;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f0410180          ORR      r1,r1,#0x80
00001e  6081              STR      r1,[r0,#8]
;;;463    }
000020  bd70              POP      {r4-r6,pc}
                  |L15.34|
000022  e7fe              B        |L15.34|
;;;464    
                          ENDP


                          AREA ||i.dma_memory_to_memory_disable||, CODE, READONLY, ALIGN=1

                  dma_memory_to_memory_disable PROC
;;;224    */
;;;225    void dma_memory_to_memory_disable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;226    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;227        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L16.34|
;;;228            DMA_WRONG_HANDLE
;;;229        }
;;;230        
;;;231        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_M2M;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f4214180          BIC      r1,r1,#0x4000
00001e  6081              STR      r1,[r0,#8]
;;;232    }
000020  bd70              POP      {r4-r6,pc}
                  |L16.34|
000022  e7fe              B        |L16.34|
;;;233    
                          ENDP


                          AREA ||i.dma_memory_to_memory_enable||, CODE, READONLY, ALIGN=1

                  dma_memory_to_memory_enable PROC
;;;205    */
;;;206    void dma_memory_to_memory_enable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;207    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;208        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L17.34|
;;;209            DMA_WRONG_HANDLE
;;;210        }
;;;211        
;;;212        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_M2M;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f4414180          ORR      r1,r1,#0x4000
00001e  6081              STR      r1,[r0,#8]
;;;213    }
000020  bd70              POP      {r4-r6,pc}
                  |L17.34|
000022  e7fe              B        |L17.34|
;;;214    
                          ENDP


                          AREA ||i.dma_memory_width_config||, CODE, READONLY, ALIGN=1

                  dma_memory_width_config PROC
;;;398    */
;;;399    void dma_memory_width_config(uint32_t dma_periph, dma_channel_enum channelx, uint32_t mwidth)
000000  b570              PUSH     {r4-r6,lr}
;;;400    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;401        uint32_t ctl;
;;;402        
;;;403        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b148              CBZ      r0,|L18.38|
;;;404            DMA_WRONG_HANDLE
;;;405        }
;;;406        
;;;407        /* acquire DMA_CHxCTL register */
;;;408        ctl = DMA_CHCTL(dma_periph, channelx);
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  eb060080          ADD      r0,r6,r0,LSL #2
00001a  6881              LDR      r1,[r0,#8]
;;;409        /* assign regiser */
;;;410        ctl &= ~DMA_CHXCTL_MWIDTH;
00001c  f4216140          BIC      r1,r1,#0xc00
;;;411        ctl |= mwidth;
000020  4329              ORRS     r1,r1,r5
;;;412        DMA_CHCTL(dma_periph, channelx) = ctl;
000022  6081              STR      r1,[r0,#8]
;;;413    }
000024  bd70              POP      {r4-r6,pc}
                  |L18.38|
000026  e7fe              B        |L18.38|
;;;414    
                          ENDP


                          AREA ||i.dma_periph_address_config||, CODE, READONLY, ALIGN=1

                  dma_periph_address_config PROC
;;;282    */
;;;283    void dma_periph_address_config(uint32_t dma_periph, dma_channel_enum channelx, uint32_t address)
000000  b570              PUSH     {r4-r6,lr}
;;;284    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;285        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b128              CBZ      r0,|L19.30|
;;;286            DMA_WRONG_HANDLE
;;;287        }
;;;288        
;;;289        DMA_CHPADDR(dma_periph, channelx) = address;
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  eb060080          ADD      r0,r6,r0,LSL #2
00001a  6105              STR      r5,[r0,#0x10]
;;;290    }
00001c  bd70              POP      {r4-r6,pc}
                  |L19.30|
00001e  e7fe              B        |L19.30|
;;;291    
                          ENDP


                          AREA ||i.dma_periph_and_channel_check||, CODE, READONLY, ALIGN=2

                  dma_periph_and_channel_check PROC
;;;725    */
;;;726    static ErrStatus dma_periph_and_channel_check(uint32_t dma_periph, dma_channel_enum channelx)
000000  4602              MOV      r2,r0
;;;727    {
;;;728        ErrStatus val = SUCCESS;
000002  2001              MOVS     r0,#1
;;;729        
;;;730        if(DMA1 == dma_periph){
000004  4b03              LDR      r3,|L20.20|
000006  429a              CMP      r2,r3
000008  d102              BNE      |L20.16|
;;;731            /* for DMA1, the channel is from DMA_CH0 to DMA_CH4 */
;;;732            if(channelx > DMA_CH4){
00000a  2904              CMP      r1,#4
00000c  d900              BLS      |L20.16|
;;;733                val = ERROR;
00000e  2000              MOVS     r0,#0
                  |L20.16|
;;;734            }
;;;735        }
;;;736        
;;;737        return val;
;;;738    }
000010  4770              BX       lr
                          ENDP

000012  0000              DCW      0x0000
                  |L20.20|
                          DCD      0x40020400

                          AREA ||i.dma_periph_increase_disable||, CODE, READONLY, ALIGN=1

                  dma_periph_increase_disable PROC
;;;512    */
;;;513    void dma_periph_increase_disable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;514    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;515        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L21.34|
;;;516            DMA_WRONG_HANDLE
;;;517        }
;;;518        
;;;519        DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_PNAGA;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f0210140          BIC      r1,r1,#0x40
00001e  6081              STR      r1,[r0,#8]
;;;520    }
000020  bd70              POP      {r4-r6,pc}
                  |L21.34|
000022  e7fe              B        |L21.34|
;;;521    
                          ENDP


                          AREA ||i.dma_periph_increase_enable||, CODE, READONLY, ALIGN=1

                  dma_periph_increase_enable PROC
;;;493    */
;;;494    void dma_periph_increase_enable(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;495    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;496        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b140              CBZ      r0,|L22.34|
;;;497            DMA_WRONG_HANDLE
;;;498        }
;;;499        
;;;500        DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_PNAGA;
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  6881              LDR      r1,[r0,#8]
00001a  f0410140          ORR      r1,r1,#0x40
00001e  6081              STR      r1,[r0,#8]
;;;501    }
000020  bd70              POP      {r4-r6,pc}
                  |L22.34|
000022  e7fe              B        |L22.34|
;;;502    
                          ENDP


                          AREA ||i.dma_periph_width_config||, CODE, READONLY, ALIGN=1

                  dma_periph_width_config PROC
;;;429    */
;;;430    void dma_periph_width_config(uint32_t dma_periph, dma_channel_enum channelx, uint32_t pwidth)
000000  b570              PUSH     {r4-r6,lr}
;;;431    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;432        uint32_t ctl;
;;;433        
;;;434        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b148              CBZ      r0,|L23.38|
;;;435            DMA_WRONG_HANDLE
;;;436        }
;;;437        
;;;438        /* acquire DMA_CHxCTL register */
;;;439        ctl = DMA_CHCTL(dma_periph, channelx);
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  eb060080          ADD      r0,r6,r0,LSL #2
00001a  6881              LDR      r1,[r0,#8]
;;;440        /* assign regiser */
;;;441        ctl &= ~DMA_CHXCTL_PWIDTH;
00001c  f4217140          BIC      r1,r1,#0x300
;;;442        ctl |= pwidth;
000020  4329              ORRS     r1,r1,r5
;;;443        DMA_CHCTL(dma_periph, channelx) = ctl;
000022  6081              STR      r1,[r0,#8]
;;;444    }
000024  bd70              POP      {r4-r6,pc}
                  |L23.38|
000026  e7fe              B        |L23.38|
;;;445    
                          ENDP


                          AREA ||i.dma_priority_config||, CODE, READONLY, ALIGN=1

                  dma_priority_config PROC
;;;367    */
;;;368    void dma_priority_config(uint32_t dma_periph, dma_channel_enum channelx, uint32_t priority)
000000  b570              PUSH     {r4-r6,lr}
;;;369    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;370        uint32_t ctl;
;;;371        
;;;372        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b148              CBZ      r0,|L24.38|
;;;373            DMA_WRONG_HANDLE
;;;374        }
;;;375        
;;;376        /* acquire DMA_CHxCTL register */
;;;377        ctl = DMA_CHCTL(dma_periph, channelx);
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  eb060080          ADD      r0,r6,r0,LSL #2
00001a  6881              LDR      r1,[r0,#8]
;;;378        /* assign regiser */
;;;379        ctl &= ~DMA_CHXCTL_PRIO;
00001c  f4215140          BIC      r1,r1,#0x3000
;;;380        ctl |= priority;
000020  4329              ORRS     r1,r1,r5
;;;381        DMA_CHCTL(dma_periph, channelx) = ctl;
000022  6081              STR      r1,[r0,#8]
;;;382    }
000024  bd70              POP      {r4-r6,pc}
                  |L24.38|
000026  e7fe              B        |L24.38|
;;;383    
                          ENDP


                          AREA ||i.dma_struct_para_init||, CODE, READONLY, ALIGN=1

                  dma_struct_para_init PROC
;;;78     */
;;;79     void dma_struct_para_init(dma_parameter_struct* init_struct)
000000  2100              MOVS     r1,#0
;;;80     {
;;;81         /* set the DMA struct with the default values */
;;;82         init_struct->periph_addr  = 0U;
000002  6001              STR      r1,[r0,#0]
;;;83         init_struct->periph_width = 0U; 
000004  6041              STR      r1,[r0,#4]
;;;84         init_struct->periph_inc   = DMA_PERIPH_INCREASE_DISABLE;
000006  7601              STRB     r1,[r0,#0x18]
;;;85         init_struct->memory_addr  = 0U;
000008  6081              STR      r1,[r0,#8]
;;;86         init_struct->memory_width = 0U;
00000a  60c1              STR      r1,[r0,#0xc]
;;;87         init_struct->memory_inc   = DMA_MEMORY_INCREASE_DISABLE;
00000c  7641              STRB     r1,[r0,#0x19]
;;;88         init_struct->number       = 0U;
00000e  6101              STR      r1,[r0,#0x10]
;;;89         init_struct->direction    = DMA_PERIPHERAL_TO_MEMORY;
000010  7681              STRB     r1,[r0,#0x1a]
;;;90         init_struct->priority     = DMA_PRIORITY_LOW;
000012  6141              STR      r1,[r0,#0x14]
;;;91     }
000014  4770              BX       lr
;;;92     
                          ENDP


                          AREA ||i.dma_transfer_direction_config||, CODE, READONLY, ALIGN=1

                  dma_transfer_direction_config PROC
;;;535    */
;;;536    void dma_transfer_direction_config(uint32_t dma_periph, dma_channel_enum channelx, uint8_t direction)
000000  b570              PUSH     {r4-r6,lr}
;;;537    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;538        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b148              CBZ      r0,|L26.38|
;;;539            DMA_WRONG_HANDLE
;;;540        }
;;;541        
;;;542        if(DMA_PERIPHERAL_TO_MEMORY == direction){
;;;543            DMA_CHCTL(dma_periph, channelx) &= ~DMA_CHXCTL_DIR;
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  eb060080          ADD      r0,r6,r0,LSL #2
00001a  b12d              CBZ      r5,|L26.40|
;;;544        } else {
;;;545            DMA_CHCTL(dma_periph, channelx) |= DMA_CHXCTL_DIR;
00001c  6881              LDR      r1,[r0,#8]
00001e  f0410110          ORR      r1,r1,#0x10
000022  6081              STR      r1,[r0,#8]
;;;546        }
;;;547    }
000024  bd70              POP      {r4-r6,pc}
                  |L26.38|
000026  e7fe              B        |L26.38|
                  |L26.40|
000028  6881              LDR      r1,[r0,#8]            ;543
00002a  f0210110          BIC      r1,r1,#0x10           ;543
00002e  6081              STR      r1,[r0,#8]            ;543
000030  bd70              POP      {r4-r6,pc}
;;;548    
                          ENDP


                          AREA ||i.dma_transfer_number_config||, CODE, READONLY, ALIGN=1

                  dma_transfer_number_config PROC
;;;323    */
;;;324    void dma_transfer_number_config(uint32_t dma_periph, dma_channel_enum channelx, uint32_t number)
000000  b570              PUSH     {r4-r6,lr}
;;;325    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;326        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000008  4621              MOV      r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       dma_periph_and_channel_check
000010  b130              CBZ      r0,|L27.32|
;;;327            DMA_WRONG_HANDLE
;;;328        }
;;;329        
;;;330        DMA_CHCNT(dma_periph, channelx) = (number & DMA_CHANNEL_CNT_MASK);
000012  eb040184          ADD      r1,r4,r4,LSL #2
000016  eb060181          ADD      r1,r6,r1,LSL #2
00001a  b2a8              UXTH     r0,r5
00001c  60c8              STR      r0,[r1,#0xc]
;;;331    }
00001e  bd70              POP      {r4-r6,pc}
                  |L27.32|
000020  e7fe              B        |L27.32|
;;;332    
                          ENDP


                          AREA ||i.dma_transfer_number_get||, CODE, READONLY, ALIGN=1

                  dma_transfer_number_get PROC
;;;342    */
;;;343    uint32_t dma_transfer_number_get(uint32_t dma_periph, dma_channel_enum channelx)
000000  b570              PUSH     {r4-r6,lr}
;;;344    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;345        if(ERROR == dma_periph_and_channel_check(dma_periph, channelx)){
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       dma_periph_and_channel_check
00000e  b128              CBZ      r0,|L28.28|
;;;346            DMA_WRONG_HANDLE
;;;347        }
;;;348        
;;;349        return (uint32_t)DMA_CHCNT(dma_periph, channelx);
000010  eb040084          ADD      r0,r4,r4,LSL #2
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  68c0              LDR      r0,[r0,#0xc]
;;;350    }
00001a  bd70              POP      {r4-r6,pc}
                  |L28.28|
00001c  e7fe              B        |L28.28|
;;;351    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_dma_c_7af11ded____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_dma_c_7af11ded____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_dma_c_7af11ded____REVSH|
#line 128
|__asm___14_gd32f10x_dma_c_7af11ded____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
