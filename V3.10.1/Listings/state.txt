; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\state.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\state.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -IC:\Users\Administrator\AppData\Local\Arm\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\state.crf User\state.c]
                          THUMB

                          AREA ||i.STATE_EnterState||, CODE, READONLY, ALIGN=2

                  STATE_EnterState PROC
;;;30     // 每个状态的入口处理
;;;31     void STATE_EnterState(uint32 state)
000000  b51c              PUSH     {r2-r4,lr}
;;;32     {
;;;33     	uint8 updateFlag = 0;
;;;34     
;;;35     	// 让当前的状态成为历史
;;;36     	stateCB.preState = stateCB.state;
000002  4918              LDR      r1,|L1.100|
000004  780a              LDRB     r2,[r1,#0]  ; stateCB
000006  704a              STRB     r2,[r1,#1]
;;;37     
;;;38     	// 设置新的状态
;;;39     	stateCB.state = (STATE_E)state;
000008  7008              STRB     r0,[r1,#0]
;;;40     
;;;41     	// 各状态的入口设定
;;;42     	switch (state)
00000a  2800              CMP      r0,#0
00000c  d00d              BEQ      |L1.42|
00000e  2801              CMP      r0,#1
000010  d018              BEQ      |L1.68|
000012  2802              CMP      r0,#2
000014  d108              BNE      |L1.40|
;;;43     	{
;;;44     		// ■■ 空状态 ■■
;;;45     		case STATE_NULL:
;;;46     
;;;47     			// 查询升级标志
;;;48     			// 清除蓝牙升级标志和屏蔽蓝牙模块初始化标志	
;;;49     			updateFlag = SPI_FLASH_ReadByte(SPI_FLASH_HOST_INFO_OFFSET_ADDR);
;;;50     		
;;;51     			if (0xAA == updateFlag)
;;;52     			{
;;;53     				STATE_EnterState(STATE_ENTRY);	
;;;54     			}
;;;55     			else
;;;56     			{
;;;57     				STATE_EnterState(STATE_JUMP);		
;;;58     			}
;;;59     			break;
;;;60     
;;;61     		// ■■ 入口状态的入口处理 ■■
;;;62     		case STATE_ENTRY:
;;;63     			POWER_ON();
;;;64     		
;;;65     			// 升级数据包大小
;;;66     			upAppDataSize = SPI_FLASH_ReadWord(SPI_FLASH_HOST_INFO_OFFSET_ADDR+4);
;;;67     			
;;;68     			// 擦除APP所有页
;;;69     			IAP_EraseAPPArea();
;;;70     			break;
;;;71     
;;;72     		// 跳转APP
;;;73     		case STATE_JUMP:
;;;74     
;;;75     			// 开启定时跳入APP
;;;76     			TIMER_AddTask(TIMER_ID_IAP_RUN_WINDOW_TIME,
000016  2001              MOVS     r0,#1
000018  9000              STR      r0,[sp,#0]
00001a  9001              STR      r0,[sp,#4]
00001c  4b12              LDR      r3,|L1.104|
00001e  4a13              LDR      r2,|L1.108|
000020  21c8              MOVS     r1,#0xc8
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       TIMER_AddTask
                  |L1.40|
;;;77     							200,
;;;78     							IAP_JumpToAppFun,
;;;79     							IAP_FLASH_APP1_ADDR,
;;;80     							1,
;;;81     							ACTION_MODE_ADD_TO_QUEUE);
;;;82     			break;
;;;83     
;;;84     		default:
;;;85     			break;
;;;86     	}
;;;87     }
000028  bd1c              POP      {r2-r4,pc}
                  |L1.42|
00002a  4811              LDR      r0,|L1.112|
00002c  f7fffffe          BL       SPI_FLASH_ReadByte
000030  28aa              CMP      r0,#0xaa              ;51
000032  d003              BEQ      |L1.60|
000034  e8bd401c          POP      {r2-r4,lr}            ;57
000038  2002              MOVS     r0,#2                 ;57
00003a  e7fe              B        STATE_EnterState
                  |L1.60|
00003c  e8bd401c          POP      {r2-r4,lr}            ;53
000040  2001              MOVS     r0,#1                 ;53
000042  e7fe              B        STATE_EnterState
                  |L1.68|
000044  2102              MOVS     r1,#2                 ;63
000046  480b              LDR      r0,|L1.116|
000048  f7fffffe          BL       gpio_bit_set
00004c  4808              LDR      r0,|L1.112|
00004e  1d00              ADDS     r0,r0,#4              ;66
000050  f7fffffe          BL       SPI_FLASH_ReadWord
000054  4903              LDR      r1,|L1.100|
000056  1e89              SUBS     r1,r1,#2              ;66
000058  6088              STR      r0,[r1,#8]            ;66  ; upAppDataSize
00005a  e8bd401c          POP      {r2-r4,lr}            ;69
00005e  f7ffbffe          B.W      IAP_EraseAPPArea
;;;88     
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      ||.data||+0x2
                  |L1.104|
                          DCD      0x08008000
                  |L1.108|
                          DCD      IAP_JumpToAppFun
                  |L1.112|
                          DCD      0x0035a000
                  |L1.116|
                          DCD      0x40010c00

                          AREA ||i.STATE_Init||, CODE, READONLY, ALIGN=2

                  STATE_Init PROC
;;;11     // 状态机初始化
;;;12     void STATE_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;13     {
;;;14     	// 默认状态为空
;;;15     	stateCB.state = STATE_NULL;
000002  4807              LDR      r0,|L2.32|
000004  2100              MOVS     r1,#0
000006  7001              STRB     r1,[r0,#0]
;;;16     	stateCB.preState = STATE_NULL;
000008  7041              STRB     r1,[r0,#1]
;;;17     
;;;18     	// 延时进入入口状态
;;;19     	TIMER_AddTask(TIMER_ID_STATE_CONTROL,
00000a  2001              MOVS     r0,#1
00000c  9000              STR      r0,[sp,#0]
00000e  9001              STR      r0,[sp,#4]
000010  2300              MOVS     r3,#0
000012  4a04              LDR      r2,|L2.36|
000014  210a              MOVS     r1,#0xa
000016  2008              MOVS     r0,#8
000018  f7fffffe          BL       TIMER_AddTask
;;;20     					10,
;;;21     					STATE_EnterState,
;;;22     					STATE_NULL,
;;;23     					1,
;;;24     					ACTION_MODE_ADD_TO_QUEUE);	
;;;25     	
;;;26     }
00001c  bd1c              POP      {r2-r4,pc}
;;;27     
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      ||.data||+0x2
                  |L2.36|
                          DCD      STATE_EnterState

                          AREA ||i.STATE_Process||, CODE, READONLY, ALIGN=2

                  STATE_Process PROC
;;;89     // 每个状态下的过程处理
;;;90     void STATE_Process(void)
000000  b530              PUSH     {r4,r5,lr}
;;;91     {
000002  f2ad4d04          SUB      sp,sp,#0x404
;;;92     	uint8 buff[SPI_FLASH_APP_READ_UPDATA_SIZE] = {0};
000006  f44f6580          MOV      r5,#0x400
00000a  4629              MOV      r1,r5
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memclr4
;;;93     	static uint16 i = 0;
;;;94     	
;;;95     	switch (stateCB.state)
000012  4816              LDR      r0,|L3.108|
000014  7800              LDRB     r0,[r0,#0]  ; stateCB
000016  2800              CMP      r0,#0
000018  d025              BEQ      |L3.102|
00001a  2801              CMP      r0,#1
00001c  d123              BNE      |L3.102|
;;;96     	{
;;;97     		// ■■ 空状态 ■■
;;;98     		case STATE_NULL:
;;;99     			break;
;;;100    
;;;101    		// ■■ 入口状态过程处理 ■■
;;;102    		case STATE_ENTRY:
;;;103    
;;;104    				if (i > ((upAppDataSize / SPI_FLASH_APP_READ_UPDATA_SIZE) + 1))
00001e  4c13              LDR      r4,|L3.108|
000020  2101              MOVS     r1,#1
000022  1ea4              SUBS     r4,r4,#2
000024  68a0              LDR      r0,[r4,#8]  ; upAppDataSize
000026  eb012090          ADD      r0,r1,r0,LSR #10
00002a  8821              LDRH     r1,[r4,#0]  ; i
00002c  4288              CMP      r0,r1
00002e  d206              BCS      |L3.62|
;;;105    				{
;;;106    					STATE_EnterState(STATE_JUMP);
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       STATE_EnterState
;;;107    					
;;;108    					// 清除蓝牙升级标志和屏蔽蓝牙模块初始化标志
;;;109    					SPI_FLASH_WriteByte(SPI_FLASH_HOST_INFO_OFFSET_ADDR, 0x00);
000036  2100              MOVS     r1,#0
000038  480d              LDR      r0,|L3.112|
00003a  f7fffffe          BL       SPI_FLASH_WriteByte
                  |L3.62|
;;;110    				}
;;;111    				
;;;112    				SPI_FLASH_ReadArray(buff, SPI_FLASH_HOST_APP_OFFSET_ADDR + i*SPI_FLASH_APP_READ_UPDATA_SIZE, SPI_FLASH_APP_READ_UPDATA_SIZE);
00003e  8820              LDRH     r0,[r4,#0]  ; i
000040  f44f31c8          MOV      r1,#0x19000
000044  eb012180          ADD      r1,r1,r0,LSL #10
000048  462a              MOV      r2,r5
00004a  a801              ADD      r0,sp,#4
00004c  f7fffffe          BL       SPI_FLASH_ReadArray
;;;113    				
;;;114    				IAP_WriteAppBin(IAP_FLASH_APP1_ADDR + i*SPI_FLASH_APP_READ_UPDATA_SIZE, buff, SPI_FLASH_APP_READ_UPDATA_SIZE);
000050  8820              LDRH     r0,[r4,#0]  ; i
000052  4908              LDR      r1,|L3.116|
000054  462a              MOV      r2,r5
000056  eb012080          ADD      r0,r1,r0,LSL #10
00005a  a901              ADD      r1,sp,#4
00005c  f7fffffe          BL       IAP_WriteAppBin
;;;115    				
;;;116    				i++;
000060  8820              LDRH     r0,[r4,#0]  ; i
000062  1c40              ADDS     r0,r0,#1
000064  8020              STRH     r0,[r4,#0]
                  |L3.102|
;;;117    			break;
;;;118    
;;;119    		// 跳转APP
;;;120    		case STATE_JUMP:
;;;121    			break;
;;;122    		
;;;123    		default:
;;;124    			break;		
;;;125    	}
;;;126    }
000066  f20d4d04          ADD      sp,sp,#0x404
00006a  bd30              POP      {r4,r5,pc}
;;;127    
                          ENDP

                  |L3.108|
                          DCD      ||.data||+0x2
                  |L3.112|
                          DCD      0x0035a000
                  |L3.116|
                          DCD      0x08008000

                          AREA ||.data||, DATA, ALIGN=2

                  i
000000  0000              DCW      0x0000
                  stateCB
000002  0000              DCB      0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  upAppDataSize
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "User\\state.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_state_c_0e6e1d03____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___7_state_c_0e6e1d03____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_state_c_0e6e1d03____REVSH|
#line 128
|__asm___7_state_c_0e6e1d03____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
