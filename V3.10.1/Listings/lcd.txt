; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\lcd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\lcd.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -IC:\Users\Administrator\AppData\Local\Arm\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\lcd.crf User\lcd.c]
                          THUMB

                          AREA ||i.LCD_ColorInverse||, CODE, READONLY, ALIGN=1

                  LCD_ColorInverse PROC
;;;162    // 颜色翻转开关
;;;163    void LCD_ColorInverse(BOOL onoff)
000000  f04f41c0          MOV      r1,#0x60000000
;;;164    {
;;;165    	if(onoff)
000004  2800              CMP      r0,#0
000006  d002              BEQ      |L1.14|
;;;166    	{
;;;167    		LCD_CMD=0x21;
000008  2021              MOVS     r0,#0x21
00000a  8008              STRH     r0,[r1,#0]
;;;168    	}
;;;169    	else
;;;170    	{
;;;171    		LCD_CMD=0x20;
;;;172    	}
;;;173    }
00000c  4770              BX       lr
                  |L1.14|
00000e  2020              MOVS     r0,#0x20              ;171
000010  8008              STRH     r0,[r1,#0]            ;171
000012  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||i.LCD_CtrlPortInit||, CODE, READONLY, ALIGN=2

                  LCD_CtrlPortInit PROC
;;;422    // LCD控制端口初始化
;;;423    void LCD_CtrlPortInit(void)
000000  b510              PUSH     {r4,lr}
;;;424    {
;;;425    	// 使能端口时钟
;;;426    	rcu_periph_clock_enable(RCU_GPIOA);
000002  f2406002          MOV      r0,#0x602
000006  f7fffffe          BL       rcu_periph_clock_enable
;;;427    	rcu_periph_clock_enable(RCU_GPIOB);
00000a  f2406003          MOV      r0,#0x603
00000e  f7fffffe          BL       rcu_periph_clock_enable
;;;428    	rcu_periph_clock_enable(RCU_GPIOD);
000012  f2406005          MOV      r0,#0x605
000016  f7fffffe          BL       rcu_periph_clock_enable
;;;429    	rcu_periph_clock_enable(RCU_GPIOE);
00001a  f2406006          MOV      r0,#0x606
00001e  f7fffffe          BL       rcu_periph_clock_enable
;;;430    
;;;431    	// LCD背光控制端口设置为输出
;;;432    	gpio_init(GPIOA, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_8);
000022  f44f7380          MOV      r3,#0x100
000026  2203              MOVS     r2,#3
000028  2110              MOVS     r1,#0x10
00002a  480c              LDR      r0,|L2.92|
00002c  f7fffffe          BL       gpio_init
;;;433    	
;;;434    	// LCD复位信号控制端口设置为输出
;;;435    	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0); 
000030  2301              MOVS     r3,#1
000032  2203              MOVS     r2,#3
000034  2110              MOVS     r1,#0x10
000036  480a              LDR      r0,|L2.96|
000038  f7fffffe          BL       gpio_init
;;;436    
;;;437    	// 设置 PD.00(D2), PD.01(D3), PD.04(NOE-RD), PD.05(NWE-WR), PD.07(NE1-CS)，PD.08(D13), PD.09(D14),
;;;438    	// PD.10(D15), PD.12(A17-RS), PD.14(D0), PD.15(D1) 为复用推挽输出
;;;439    	gpio_init(GPIOD, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | 
00003c  f64c03b3          MOV      r3,#0xc8b3
000040  2203              MOVS     r2,#3
000042  2118              MOVS     r1,#0x18
000044  4807              LDR      r0,|L2.100|
000046  f7fffffe          BL       gpio_init
;;;440    														GPIO_PIN_1 |
;;;441    														GPIO_PIN_4 |
;;;442    														GPIO_PIN_5 |
;;;443    														GPIO_PIN_7 |
;;;444    														GPIO_PIN_11 |
;;;445    														GPIO_PIN_14 |
;;;446    														GPIO_PIN_15);
;;;447    
;;;448    	gpio_init(GPIOE, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_7 |
00004a  2203              MOVS     r2,#3
00004c  e8bd4010          POP      {r4,lr}
000050  f44f63f0          MOV      r3,#0x780
000054  2118              MOVS     r1,#0x18
000056  4804              LDR      r0,|L2.104|
000058  f7ffbffe          B.W      gpio_init
;;;449    														GPIO_PIN_8 |
;;;450    														GPIO_PIN_9 |
;;;451    														GPIO_PIN_10);
;;;452    }
;;;453    
                          ENDP

                  |L2.92|
                          DCD      0x40010800
                  |L2.96|
                          DCD      0x40010c00
                  |L2.100|
                          DCD      0x40011400
                  |L2.104|
                          DCD      0x40011800

                          AREA ||i.LCD_DisplayOnOff||, CODE, READONLY, ALIGN=1

                  LCD_DisplayOnOff PROC
;;;175    // 显示开关
;;;176    void LCD_DisplayOnOff(BOOL onoff)
000000  f04f41c0          MOV      r1,#0x60000000
;;;177    {
;;;178    	if(onoff)
000004  2800              CMP      r0,#0
000006  d002              BEQ      |L3.14|
;;;179    	{
;;;180    		LCD_CMD=0x29;
000008  2029              MOVS     r0,#0x29
00000a  8008              STRH     r0,[r1,#0]
;;;181    	}
;;;182    	else
;;;183    	{
;;;184    		LCD_CMD=0x28;
;;;185    	}
;;;186    }
00000c  4770              BX       lr
                  |L3.14|
00000e  2028              MOVS     r0,#0x28              ;184
000010  8008              STRH     r0,[r1,#0]            ;184
000012  4770              BX       lr
;;;187    
                          ENDP


                          AREA ||i.LCD_DotDynamicShow||, CODE, READONLY, ALIGN=2

                  LCD_DotDynamicShow PROC
;;;845    // .动态显示
;;;846    void LCD_DotDynamicShow(uint32 param)
000000  b5f8              PUSH     {r3-r7,lr}
;;;847    {
;;;848    	static uint8 count;
;;;849    	
;;;850    	if(4 == count)
000002  4d19              LDR      r5,|L4.104|
000004  2400              MOVS     r4,#0
000006  7828              LDRB     r0,[r5,#0]  ; count
000008  2804              CMP      r0,#4
00000a  d100              BNE      |L4.14|
;;;851    	{
;;;852    		count = 0;
00000c  702c              STRB     r4,[r5,#0]
                  |L4.14|
;;;853    	}
;;;854    	if(0 == count)
00000e  7828              LDRB     r0,[r5,#0]  ; count
;;;855    	{
;;;856    		LCD_PrintString(107, 50, "         ", LCD_COLOR_WHITE, LCD_OPERATOR_MODE_DRAW);
000010  f64f76ff          MOV      r6,#0xffff
000014  b930              CBNZ     r0,|L4.36|
000016  4633              MOV      r3,r6
000018  a214              ADR      r2,|L4.108|
00001a  2132              MOVS     r1,#0x32
00001c  206b              MOVS     r0,#0x6b
00001e  9400              STR      r4,[sp,#0]
000020  f7fffffe          BL       LCD_PrintString
                  |L4.36|
;;;857    	}
;;;858    	if(1 == count)
000024  7828              LDRB     r0,[r5,#0]  ; count
000026  2801              CMP      r0,#1
000028  d106              BNE      |L4.56|
;;;859    	{
;;;860    		LCD_PrintString(107, 50, ".        ", LCD_COLOR_WHITE, LCD_OPERATOR_MODE_DRAW);
00002a  4633              MOV      r3,r6
00002c  a212              ADR      r2,|L4.120|
00002e  2132              MOVS     r1,#0x32
000030  206b              MOVS     r0,#0x6b
000032  9400              STR      r4,[sp,#0]
000034  f7fffffe          BL       LCD_PrintString
                  |L4.56|
;;;861    	}
;;;862    	if(2 == count)
000038  7828              LDRB     r0,[r5,#0]  ; count
00003a  2802              CMP      r0,#2
00003c  d106              BNE      |L4.76|
;;;863    	{
;;;864    		LCD_PrintString(107, 50, "..       ", LCD_COLOR_WHITE, LCD_OPERATOR_MODE_DRAW);
00003e  4633              MOV      r3,r6
000040  a210              ADR      r2,|L4.132|
000042  2132              MOVS     r1,#0x32
000044  206b              MOVS     r0,#0x6b
000046  9400              STR      r4,[sp,#0]
000048  f7fffffe          BL       LCD_PrintString
                  |L4.76|
;;;865    	}
;;;866    	if(3 == count)
00004c  7828              LDRB     r0,[r5,#0]  ; count
00004e  2803              CMP      r0,#3
000050  d106              BNE      |L4.96|
;;;867    	{
;;;868    		LCD_PrintString(107, 50, "...      ", LCD_COLOR_WHITE, LCD_OPERATOR_MODE_DRAW);
000052  4633              MOV      r3,r6
000054  a20e              ADR      r2,|L4.144|
000056  2132              MOVS     r1,#0x32
000058  206b              MOVS     r0,#0x6b
00005a  9400              STR      r4,[sp,#0]
00005c  f7fffffe          BL       LCD_PrintString
                  |L4.96|
;;;869    	}
;;;870    	count++;
000060  7828              LDRB     r0,[r5,#0]  ; count
000062  1c40              ADDS     r0,r0,#1
000064  7028              STRB     r0,[r5,#0]
;;;871    }
000066  bdf8              POP      {r3-r7,pc}
                          ENDP

                  |L4.104|
                          DCD      ||.data||
                  |L4.108|
00006c  20202020          DCB      "         ",0
000070  20202020
000074  2000    
000076  00                DCB      0
000077  00                DCB      0
                  |L4.120|
000078  2e202020          DCB      ".        ",0
00007c  20202020
000080  2000    
000082  00                DCB      0
000083  00                DCB      0
                  |L4.132|
000084  2e2e2020          DCB      "..       ",0
000088  20202020
00008c  2000    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L4.144|
000090  2e2e2e20          DCB      "...      ",0
000094  20202020
000098  2000    
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.LCD_DrawAreaColor||, CODE, READONLY, ALIGN=2

                  LCD_DrawAreaColor PROC
;;;560    // 在指定区域显示指定的颜色
;;;561    void LCD_DrawAreaColor(uint16 x, uint16 y, uint16 w, uint16 h, uint16 data)
000000  b530              PUSH     {r4,r5,lr}
;;;562    {
000002  9d03              LDR      r5,[sp,#0xc]
;;;563    	uint32 i;
;;;564    	uint32 size = w * h;	
000004  fb02f403          MUL      r4,r2,r3
;;;565    
;;;566    	/* 需要添加参数判断 */
;;;567    	CHECK_PARAM_OVER_RETURN(w,LCD_WIDTH);
000008  2a80              CMP      r2,#0x80
00000a  d80c              BHI      |L5.38|
;;;568    	CHECK_PARAM_OVER_RETURN(h,LCD_HEIGHT);
00000c  2ba0              CMP      r3,#0xa0
00000e  d80a              BHI      |L5.38|
;;;569    
;;;570    	LCD_SetAreaByPointAndSize(x, y, w, h);
000010  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;571    
;;;572    	for(i=0; i<size; i++)
000014  2000              MOVS     r0,#0
;;;573    	{
;;;574    		LCD_WriteColor(data);
000016  0a29              LSRS     r1,r5,#8
000018  4b03              LDR      r3,|L5.40|
00001a  e002              B        |L5.34|
                  |L5.28|
00001c  8019              STRH     r1,[r3,#0]
00001e  801d              STRH     r5,[r3,#0]
000020  1c40              ADDS     r0,r0,#1              ;572
                  |L5.34|
000022  42a0              CMP      r0,r4                 ;572
000024  d3fa              BCC      |L5.28|
                  |L5.38|
;;;575    	}
;;;576    }
000026  bd30              POP      {r4,r5,pc}
;;;577    
                          ENDP

                  |L5.40|
                          DCD      0x60020000

                          AREA ||i.LCD_DrawBmpByID||, CODE, READONLY, ALIGN=2

                  LCD_DrawBmpByID PROC
;;;720    // 在指定位置显示指定ID的图片
;;;721    void LCD_DrawBmpByID(uint16 x, uint16 y, uint8 id, uint8 mode)
000000  b5f8              PUSH     {r3-r7,lr}
;;;722    {
;;;723    	// 显示背景
;;;724    	uint32 ulDataAddress = 0;
;;;725    	uint16 usBackgroundColor;
;;;726    
;;;727    	if(id >= 50)
000002  2a32              CMP      r2,#0x32
000004  d215              BCS      |L6.50|
;;;728    	{
;;;729    		return;
;;;730    	}
;;;731    
;;;732    	// 取出数据的首地址
;;;733    	ulDataAddress = g_PIC_StartAddr[id];
000006  4c19              LDR      r4,|L6.108|
000008  f8546022          LDR      r6,[r4,r2,LSL #2]
;;;734    
;;;735    	switch(mode)
;;;736    	{
;;;737    		// 直接绘制
;;;738    		case LCD_OPERATOR_MODE_DRAW:
;;;739    			LCD_DrawPicFromAddress(x, y, g_PIC_Width[id], g_PIC_Height[id], ulDataAddress);
00000c  f504752d          ADD      r5,r4,#0x2b4
000010  f204440e          ADD      r4,r4,#0x40e
000014  b173              CBZ      r3,|L6.52|
000016  2b01              CMP      r3,#1                 ;735
000018  d014              BEQ      |L6.68|
00001a  2b02              CMP      r3,#2                 ;735
00001c  d01c              BEQ      |L6.88|
00001e  2b03              CMP      r3,#3                 ;735
000020  d107              BNE      |L6.50|
;;;740    			break;
;;;741    
;;;742    		// 背景色
;;;743    		case LCD_OPERATOR_MODE_BACKGROUND:
;;;744    			usBackgroundColor = LCD_COLOR_BACKGROUND;
;;;745    			LCD_DrawAreaColor(x, y, g_PIC_Width[id], g_PIC_Height[id], usBackgroundColor);
;;;746    			break;
;;;747    
;;;748    		// 全白
;;;749    		case LCD_OPERATOR_MODE_ALL_WHITE:
;;;750    			usBackgroundColor = LCD_COLOR_WHITE;
;;;751    			LCD_DrawAreaColor(x, y, g_PIC_Width[id], g_PIC_Height[id], usBackgroundColor);
;;;752    			break;
;;;753    
;;;754    		// 全黑
;;;755    		case LCD_OPERATOR_MODE_ALL_BLACK:
;;;756    			usBackgroundColor = LCD_COLOR_BLACK;
000022  2300              MOVS     r3,#0
;;;757    			LCD_DrawAreaColor(x, y, g_PIC_Width[id], g_PIC_Height[id], usBackgroundColor);
000024  9300              STR      r3,[sp,#0]
000026  f8353012          LDRH     r3,[r5,r2,LSL #1]
00002a  f8342012          LDRH     r2,[r4,r2,LSL #1]
00002e  f7fffffe          BL       LCD_DrawAreaColor
                  |L6.50|
;;;758    			break;
;;;759    
;;;760    		default:
;;;761    			break;
;;;762    	}
;;;763    }
000032  bdf8              POP      {r3-r7,pc}
                  |L6.52|
000034  9600              STR      r6,[sp,#0]            ;739
000036  f8353012          LDRH     r3,[r5,r2,LSL #1]     ;739
00003a  f8342012          LDRH     r2,[r4,r2,LSL #1]     ;739
00003e  f7fffffe          BL       LCD_DrawPicFromAddress
000042  bdf8              POP      {r3-r7,pc}
                  |L6.68|
000044  f24e733c          MOV      r3,#0xe73c            ;744
000048  9300              STR      r3,[sp,#0]            ;745
00004a  f8353012          LDRH     r3,[r5,r2,LSL #1]     ;745
00004e  f8342012          LDRH     r2,[r4,r2,LSL #1]     ;745
000052  f7fffffe          BL       LCD_DrawAreaColor
000056  bdf8              POP      {r3-r7,pc}
                  |L6.88|
000058  f64f73ff          MOV      r3,#0xffff            ;750
00005c  9300              STR      r3,[sp,#0]            ;751
00005e  f8353012          LDRH     r3,[r5,r2,LSL #1]     ;751
000062  f8342012          LDRH     r2,[r4,r2,LSL #1]     ;751
000066  f7fffffe          BL       LCD_DrawAreaColor
00006a  bdf8              POP      {r3-r7,pc}
;;;764    
                          ENDP

                  |L6.108|
                          DCD      ||.data||+0x4

                          AREA ||i.LCD_DrawLine||, CODE, READONLY, ALIGN=1

                  LCD_DrawLine PROC
;;;578    // 画直线
;;;579    void LCD_DrawLine(uint16 x1, uint16 y1, uint16 x2, uint16 y2, uint16 usColor, uint16 usLineWidth)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;580    {
;;;581    
;;;582    	uint16 t; 
;;;583    
;;;584    	int xerr=0,yerr=0,delta_x,delta_y,distance; 
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;585    
;;;586    	int incx,incy,uRow,uCol; 
;;;587    
;;;588    	delta_x=x2-x1; //计算坐标增量 
000008  1a17              SUBS     r7,r2,r0
;;;589    
;;;590    	delta_y=y2-y1; 
00000a  eba30801          SUB      r8,r3,r1
;;;591    
;;;592    	uRow=x1; 
00000e  4681              MOV      r9,r0
;;;593    
;;;594    	uCol=y1; 
000010  468a              MOV      r10,r1
;;;595    
;;;596    	if(delta_x>0)incx=1; //设置单步方向 
;;;597    
;;;598    	else if(delta_x==0)incx=0;//垂直线 
;;;599    
;;;600    	else {incx=-1;delta_x=-delta_x;} 
000012  1e68              SUBS     r0,r5,#1
000014  2f00              CMP      r7,#0                 ;596
000016  dd03              BLE      |L7.32|
000018  f04f0101          MOV      r1,#1                 ;596
00001c  9102              STR      r1,[sp,#8]            ;596
00001e  e007              B        |L7.48|
                  |L7.32|
000020  d103              BNE      |L7.42|
000022  f04f0100          MOV      r1,#0                 ;598
000026  9102              STR      r1,[sp,#8]            ;598
000028  e002              B        |L7.48|
                  |L7.42|
00002a  9002              STR      r0,[sp,#8]
00002c  f1c70700          RSB      r7,r7,#0
                  |L7.48|
;;;601    
;;;602    	if(delta_y>0)incy=1; 
000030  f1b80f00          CMP      r8,#0
000034  dd03              BLE      |L7.62|
000036  f04f0001          MOV      r0,#1
00003a  9001              STR      r0,[sp,#4]
00003c  e007              B        |L7.78|
                  |L7.62|
;;;603    
;;;604    	else if(delta_y==0)incy=0;//水平线 
00003e  d103              BNE      |L7.72|
000040  f04f0000          MOV      r0,#0
000044  9001              STR      r0,[sp,#4]
000046  e002              B        |L7.78|
                  |L7.72|
;;;605    
;;;606    	else{incy=-1;delta_y=-delta_y;} 
000048  9001              STR      r0,[sp,#4]
00004a  f1c80800          RSB      r8,r8,#0
                  |L7.78|
;;;607    
;;;608    	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
00004e  4547              CMP      r7,r8
000050  dd01              BLE      |L7.86|
000052  463c              MOV      r4,r7
000054  e000              B        |L7.88|
                  |L7.86|
;;;609    
;;;610    	else distance=delta_y; 
000056  4644              MOV      r4,r8
                  |L7.88|
;;;611    
;;;612    	for(t=0;t<=distance+1;t++ )//画线输出 
000058  f04f0b00          MOV      r11,#0
00005c  1c60              ADDS     r0,r4,#1
00005e  9003              STR      r0,[sp,#0xc]
000060  e019              B        |L7.150|
                  |L7.98|
;;;613    
;;;614    	{  
;;;615    
;;;616    		LCD_DrawAreaColor(uRow,uCol, 3, 3, usColor);//画点 
000062  980d              LDR      r0,[sp,#0x34]
000064  9000              STR      r0,[sp,#0]
000066  2303              MOVS     r3,#3
000068  fa1ff18a          UXTH     r1,r10
00006c  fa1ff089          UXTH     r0,r9
000070  461a              MOV      r2,r3
000072  f7fffffe          BL       LCD_DrawAreaColor
;;;617    
;;;618    		xerr+=delta_x ; 
000076  443d              ADD      r5,r5,r7
;;;619    
;;;620    		yerr+=delta_y ; 
000078  4446              ADD      r6,r6,r8
;;;621    
;;;622    		if(xerr>distance) 
00007a  42a5              CMP      r5,r4
00007c  dd02              BLE      |L7.132|
;;;623    
;;;624    		{ 
;;;625    
;;;626    			xerr-=distance; 
00007e  1b2d              SUBS     r5,r5,r4
;;;627    
;;;628    			uRow+=incx; 
000080  9802              LDR      r0,[sp,#8]
000082  4481              ADD      r9,r9,r0
                  |L7.132|
;;;629    
;;;630    		} 
;;;631    
;;;632    		if(yerr>distance) 
000084  42a6              CMP      r6,r4
000086  dd02              BLE      |L7.142|
;;;633    
;;;634    		{ 
;;;635    
;;;636    			yerr-=distance; 
000088  1b36              SUBS     r6,r6,r4
;;;637    
;;;638    			uCol+=incy; 
00008a  9801              LDR      r0,[sp,#4]
00008c  4482              ADD      r10,r10,r0
                  |L7.142|
00008e  f10b0b01          ADD      r11,r11,#1            ;612
000092  fa1ffb8b          UXTH     r11,r11               ;612
                  |L7.150|
000096  9803              LDR      r0,[sp,#0xc]          ;612
000098  4583              CMP      r11,r0                ;612
00009a  dde2              BLE      |L7.98|
;;;639    
;;;640    		} 
;;;641    
;;;642    	}  
;;;643    
;;;644    }  
00009c  e8bd8fff          POP      {r0-r11,pc}
;;;645    
                          ENDP


                          AREA ||i.LCD_DrawPic||, CODE, READONLY, ALIGN=2

                  LCD_DrawPic PROC
;;;535    // 在指定位置显示指定的图片
;;;536    void LCD_DrawPic(uint16 x, uint16 y, const uint16* pData)
000000  b530              PUSH     {r4,r5,lr}
;;;537    {
000002  4614              MOV      r4,r2
;;;538    	uint16 width=0, height=0;
;;;539    	uint32 i;
;;;540    	uint32 size;
;;;541    	
;;;542    	if(NULL == pData)
000004  2c00              CMP      r4,#0
000006  d013              BEQ      |L8.48|
;;;543    	{
;;;544    		return;
;;;545    	}
;;;546    
;;;547    	width = pData[0];
000008  8822              LDRH     r2,[r4,#0]
;;;548    	height = pData[1];
00000a  8863              LDRH     r3,[r4,#2]
;;;549    	size = width;
;;;550    	size *= height;
00000c  fb02f503          MUL      r5,r2,r3
;;;551    
;;;552    	LCD_SetAreaByPointAndSize(x, y, width, height);
000010  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;553    
;;;554    	for(i=0; i<size; i++)
000014  2000              MOVS     r0,#0
;;;555    	{
;;;556    		LCD_WriteColor(pData[2+i]);
000016  4a07              LDR      r2,|L8.52|
000018  e008              B        |L8.44|
                  |L8.26|
00001a  1c81              ADDS     r1,r0,#2
00001c  f8343011          LDRH     r3,[r4,r1,LSL #1]
000020  0a1b              LSRS     r3,r3,#8
000022  8013              STRH     r3,[r2,#0]
000024  f8341011          LDRH     r1,[r4,r1,LSL #1]
000028  8011              STRH     r1,[r2,#0]
00002a  1c40              ADDS     r0,r0,#1              ;554
                  |L8.44|
00002c  42a8              CMP      r0,r5                 ;554
00002e  d3f4              BCC      |L8.26|
                  |L8.48|
;;;557    	}
;;;558    }
000030  bd30              POP      {r4,r5,pc}
;;;559    
                          ENDP

000032  0000              DCW      0x0000
                  |L8.52|
                          DCD      0x60020000

                          AREA ||i.LCD_DrawPicFromAddress||, CODE, READONLY, ALIGN=2

                  LCD_DrawPicFromAddress PROC
;;;647    // 显示指定位置的图片数据，在参数中给出要显示的图片数据在SPI Flash中的首地址
;;;648    void LCD_DrawPicFromAddress(uint16 x, uint16 y, uint16 w, uint16 h, uint32 addr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;649    {
000004  4607              MOV      r7,r0
000006  9e06              LDR      r6,[sp,#0x18]
000008  460d              MOV      r5,r1
00000a  4614              MOV      r4,r2
00000c  4698              MOV      r8,r3
;;;650    #if 0	// NO DMA
;;;651    	uint32 size		= 0;
;;;652    	uint8  data[2];
;;;653    
;;;654    	/* 设定操作区域 */
;;;655    	LCD_SetAreaByPointAndSize(x, y, w, h);
;;;656    
;;;657    	/* 根据图片尺寸与数据作图 */
;;;658    	size = w * h;	
;;;659    
;;;660    	// 片选
;;;661    	SPI_FLASH_CS_L();
;;;662    
;;;663    	// 发送读取命令
;;;664    	(void)SPI_FLASH_SendByte(CMD_READ_BYTE);
;;;665    
;;;666    	// 发送24位起始地址
;;;667    	(void)SPI_FLASH_SendByte((addr & 0xFF0000) >> 16);
;;;668    	(void)SPI_FLASH_SendByte((addr& 0xFF00) >> 8);
;;;669    	(void)SPI_FLASH_SendByte(addr & 0xFF);
;;;670    
;;;671    	// 一直读取完指定的数量为止
;;;672    	while(size--)
;;;673    	{
;;;674    		// 读取一个字节
;;;675    		data[1] = SPI_FLASH_SendByte(0);
;;;676    		data[0] = SPI_FLASH_SendByte(0);
;;;677    
;;;678    		LCD_WriteColor( *((uint16*)data) );
;;;679    	}
;;;680    
;;;681    	// 释放
;;;682    	SPI_FLASH_CS_H();
;;;683    #else	// DMA
;;;684    	uint32 size = 0, offset = 0;
;;;685    	uint32 srcAddr = addr;
;;;686    
;;;687    	/* 设定操作区域 */
;;;688    	LCD_SetAreaByPointAndSize( x, y, w, h );
00000e  4643              MOV      r3,r8
000010  4622              MOV      r2,r4
000012  4629              MOV      r1,r5
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;689    
;;;690    	/* 根据图片尺寸与数据作图 */
;;;691    	size = w;
;;;692    	size *= h;
00001a  fb04f408          MUL      r4,r4,r8
;;;693    	size *= 2;
00001e  0064              LSLS     r4,r4,#1
;;;694    	offset = y;
;;;695    	offset *= LCD_WIDTH;
000020  01e8              LSLS     r0,r5,#7
;;;696    	offset += x;
000022  19c5              ADDS     r5,r0,r7
;;;697    
;;;698    #define _DMA_MOVE_BYTES_COUNT_TOP_			0xD000
;;;699    	while(size > 0)
;;;700    	{
;;;701    		// 超过搬运上限，分多次
;;;702    		if(size > _DMA_MOVE_BYTES_COUNT_TOP_)
000024  f44f4850          MOV      r8,#0xd000
;;;703    		{
;;;704    			SPIx_DMAy_Read(srcAddr, 0x60020000+offset, _DMA_MOVE_BYTES_COUNT_TOP_);
000028  4f0c              LDR      r7,|L9.92|
00002a  e00c              B        |L9.70|
                  |L9.44|
00002c  4642              MOV      r2,r8                 ;702
00002e  4294              CMP      r4,r2                 ;702
000030  d90d              BLS      |L9.78|
000032  19e9              ADDS     r1,r5,r7
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       SPIx_DMAy_Read
;;;705    			srcAddr += _DMA_MOVE_BYTES_COUNT_TOP_;
00003a  f5064650          ADD      r6,r6,#0xd000
;;;706    			size -= _DMA_MOVE_BYTES_COUNT_TOP_;
00003e  f5a44450          SUB      r4,r4,#0xd000
;;;707    			offset += _DMA_MOVE_BYTES_COUNT_TOP_;
000042  f5054550          ADD      r5,r5,#0xd000
                  |L9.70|
000046  2c00              CMP      r4,#0                 ;699
000048  d1f0              BNE      |L9.44|
;;;708    		}
;;;709    		// 不超过搬运上限，一次完成
;;;710    		else
;;;711    		{
;;;712    			SPIx_DMAy_Read(srcAddr, 0x60020000+offset, size);
;;;713    			break;
;;;714    		}
;;;715    	}
;;;716    #undef _DMA_MOVE_BYTES_COUNT_TOP_
;;;717    #endif
;;;718    }
00004a  e8bd81f0          POP      {r4-r8,pc}
                  |L9.78|
00004e  b2a2              UXTH     r2,r4                 ;712
000050  19e9              ADDS     r1,r5,r7              ;712
000052  4630              MOV      r0,r6                 ;712
000054  e8bd41f0          POP      {r4-r8,lr}            ;712
000058  f7ffbffe          B.W      SPIx_DMAy_Read
;;;719    
                          ENDP

                  |L9.92|
                          DCD      0x60020000

                          AREA ||i.LCD_DrawPixel||, CODE, READONLY, ALIGN=2

                  LCD_DrawPixel PROC
;;;188    // 绘制一个像素
;;;189    void LCD_DrawPixel(uint16 x,uint16 y,uint16 color)
000000  b510              PUSH     {r4,lr}
;;;190    {	   
000002  4614              MOV      r4,r2
;;;191    	LCD_SetCursor(x, y);
000004  f7fffffe          BL       LCD_SetCursor
;;;192    
;;;193    	LCD_CMD = 0x002C;
000008  202c              MOVS     r0,#0x2c
00000a  06c1              LSLS     r1,r0,#27
00000c  8008              STRH     r0,[r1,#0]
;;;194    	LCD_WriteColor(color);
00000e  4802              LDR      r0,|L10.24|
000010  0a21              LSRS     r1,r4,#8
000012  8001              STRH     r1,[r0,#0]
000014  8004              STRH     r4,[r0,#0]
;;;195    }	
000016  bd10              POP      {r4,pc}
;;;196    
                          ENDP

                  |L10.24|
                          DCD      0x60020000

                          AREA ||i.LCD_DrawRect||, CODE, READONLY, ALIGN=2

                  LCD_DrawRect PROC
;;;824    // 在指定位置绘制正方形
;;;825    void LCD_DrawRect(uint16 x, uint16 y, uint8 width, uint16 color)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;826    {
000004  b081              SUB      sp,sp,#4
000006  4617              MOV      r7,r2
000008  4698              MOV      r8,r3
;;;827    	uint8 i, j;
;;;828    	uint8 xPos, yPos;
;;;829    	
;;;830    	for(i=0; i<width; i++)
00000a  2600              MOVS     r6,#0
00000c  e021              B        |L11.82|
                  |L11.14|
;;;831    	{
;;;832    		xPos = x;
00000e  9801              LDR      r0,[sp,#4]
000010  b2c4              UXTB     r4,r0
;;;833    		yPos = y+i;
000012  9802              LDR      r0,[sp,#8]
000014  4430              ADD      r0,r0,r6
000016  b2c0              UXTB     r0,r0
000018  9000              STR      r0,[sp,#0]
;;;834    		for(j=0; j<width; j++)
00001a  2500              MOVS     r5,#0
;;;835    		{
;;;836    			LCD_SetCursor(xPos++, yPos);
;;;837    
;;;838    			LCD_CMD = 0x002C;
00001c  f04f0b2c          MOV      r11,#0x2c
;;;839    
;;;840    			LCD_WriteColor(color);
000020  ea4f2918          LSR      r9,r8,#8
000024  f8dfa034          LDR      r10,|L11.92|
000028  e00f              B        |L11.74|
                  |L11.42|
00002a  4620              MOV      r0,r4                 ;836
00002c  1c64              ADDS     r4,r4,#1              ;836
00002e  b2e4              UXTB     r4,r4                 ;836
000030  9900              LDR      r1,[sp,#0]            ;836
000032  f7fffffe          BL       LCD_SetCursor
000036  f04f40c0          MOV      r0,#0x60000000        ;838
00003a  f8a0b000          STRH     r11,[r0,#0]           ;838
00003e  f8aa9000          STRH     r9,[r10,#0]
000042  f8aa8000          STRH     r8,[r10,#0]
000046  1c6d              ADDS     r5,r5,#1              ;834
000048  b2ed              UXTB     r5,r5                 ;834
                  |L11.74|
00004a  42bd              CMP      r5,r7                 ;834
00004c  d3ed              BCC      |L11.42|
00004e  1c76              ADDS     r6,r6,#1              ;830
000050  b2f6              UXTB     r6,r6                 ;830
                  |L11.82|
000052  42be              CMP      r6,r7                 ;830
000054  d3db              BCC      |L11.14|
;;;841    		}
;;;842    	}
;;;843    }
000056  b005              ADD      sp,sp,#0x14
000058  e8bd8ff0          POP      {r4-r11,pc}
;;;844    
                          ENDP

                  |L11.92|
                          DCD      0x60020000

                          AREA ||i.LCD_DriverInit||, CODE, READONLY, ALIGN=2

                  LCD_DriverInit PROC
;;;214    // LCD驱动芯片初始化
;;;215    void LCD_DriverInit(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;216    {
;;;217    	LCD_RST_H();
000004  2101              MOVS     r1,#1
000006  4851              LDR      r0,|L12.332|
000008  f7fffffe          BL       gpio_bit_set
;;;218    	Delayms(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       Delayms
;;;219    	LCD_RST_L();
000012  2101              MOVS     r1,#1
000014  484d              LDR      r0,|L12.332|
000016  f7fffffe          BL       gpio_bit_reset
;;;220    	Delayms(10);
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       Delayms
;;;221    	LCD_RST_H();
000020  2101              MOVS     r1,#1
000022  484a              LDR      r0,|L12.332|
000024  f7fffffe          BL       gpio_bit_set
;;;222    	Delayms(120);
000028  2078              MOVS     r0,#0x78
00002a  f7fffffe          BL       Delayms
;;;223    
;;;224    	LCD_CMD = 0x11; //Sleep out 
00002e  f04f44c0          MOV      r4,#0x60000000
000032  2011              MOVS     r0,#0x11
000034  8020              STRH     r0,[r4,#0]
;;;225    	Delayms (120);         //Delay 120ms  
000036  2078              MOVS     r0,#0x78
000038  f7fffffe          BL       Delayms
;;;226    
;;;227    	LCD_CMD = 0xB1; 
00003c  20b1              MOVS     r0,#0xb1
00003e  8020              STRH     r0,[r4,#0]
;;;228    	LCD_DAT = 0x01; 
000040  4843              LDR      r0,|L12.336|
000042  2301              MOVS     r3,#1
000044  8003              STRH     r3,[r0,#0]
;;;229    	LCD_DAT = 0x08; 
000046  2208              MOVS     r2,#8
000048  8002              STRH     r2,[r0,#0]
;;;230    	LCD_DAT = 0x05; 
00004a  2105              MOVS     r1,#5
00004c  8001              STRH     r1,[r0,#0]
;;;231    
;;;232    	LCD_CMD = 0xB2;
00004e  25b2              MOVS     r5,#0xb2
000050  8025              STRH     r5,[r4,#0]
;;;233    	LCD_DAT = 0x01; 
000052  8003              STRH     r3,[r0,#0]
;;;234    	LCD_DAT = 0x08; 
000054  8002              STRH     r2,[r0,#0]
;;;235    	LCD_DAT = 0x05; 
000056  8001              STRH     r1,[r0,#0]
;;;236    
;;;237    	LCD_CMD = 0xB3; 
000058  25b3              MOVS     r5,#0xb3
00005a  8025              STRH     r5,[r4,#0]
;;;238    	LCD_DAT = 0x01; 
00005c  8003              STRH     r3,[r0,#0]
;;;239    	LCD_DAT = 0x08; 
00005e  8002              STRH     r2,[r0,#0]
;;;240    	LCD_DAT = 0x05; 
000060  8001              STRH     r1,[r0,#0]
;;;241    	LCD_DAT = 0x05; 
000062  8001              STRH     r1,[r0,#0]
;;;242    	LCD_DAT = 0x08; 
000064  8002              STRH     r2,[r0,#0]
;;;243    	LCD_DAT = 0x05; 
000066  8001              STRH     r1,[r0,#0]
;;;244    
;;;245    	LCD_CMD = 0xB4; //Dot inversion 
000068  23b4              MOVS     r3,#0xb4
00006a  8023              STRH     r3,[r4,#0]
;;;246    	LCD_DAT = 0x03; 
00006c  2503              MOVS     r5,#3
00006e  8005              STRH     r5,[r0,#0]
;;;247    
;;;248    	LCD_CMD = 0xC0; 
000070  26c0              MOVS     r6,#0xc0
000072  8026              STRH     r6,[r4,#0]
;;;249    	LCD_DAT = 0x28; 
000074  2328              MOVS     r3,#0x28
000076  8003              STRH     r3,[r0,#0]
;;;250    	LCD_DAT = 0x08; 
000078  8002              STRH     r2,[r0,#0]
;;;251    	LCD_DAT = 0x04; 
00007a  2204              MOVS     r2,#4
00007c  8002              STRH     r2,[r0,#0]
;;;252    
;;;253    	LCD_CMD = 0xC1;
00007e  22c1              MOVS     r2,#0xc1
000080  8022              STRH     r2,[r4,#0]
;;;254    	LCD_DAT = 0XC0; 
000082  8006              STRH     r6,[r0,#0]
;;;255    
;;;256    	LCD_CMD = 0xC2; 
000084  22c2              MOVS     r2,#0xc2
000086  8022              STRH     r2,[r4,#0]
;;;257    	LCD_DAT = 0x0D; 
000088  f04f0c0d          MOV      r12,#0xd
00008c  f8a0c000          STRH     r12,[r0,#0]
;;;258    	LCD_DAT = 0x00; 
000090  2200              MOVS     r2,#0
000092  8002              STRH     r2,[r0,#0]
;;;259    
;;;260    	LCD_CMD = 0xC3; 
000094  26c3              MOVS     r6,#0xc3
000096  8026              STRH     r6,[r4,#0]
;;;261    	LCD_DAT = 0x8D; 
000098  278d              MOVS     r7,#0x8d
00009a  8007              STRH     r7,[r0,#0]
;;;262    	LCD_DAT = 0x2A; 
00009c  262a              MOVS     r6,#0x2a
00009e  8006              STRH     r6,[r0,#0]
;;;263    
;;;264    	LCD_CMD = 0xC4; 
0000a0  f04f08c4          MOV      r8,#0xc4
0000a4  f8a48000          STRH     r8,[r4,#0]
;;;265    	LCD_DAT = 0x8D; 
0000a8  8007              STRH     r7,[r0,#0]
;;;266    	LCD_DAT = 0xEE;
0000aa  27ee              MOVS     r7,#0xee
0000ac  8007              STRH     r7,[r0,#0]
;;;267    
;;;268    	LCD_CMD = 0xC5; //VCOM 
0000ae  27c5              MOVS     r7,#0xc5
0000b0  8027              STRH     r7,[r4,#0]
;;;269    	LCD_DAT = 0x1a;  
0000b2  271a              MOVS     r7,#0x1a
0000b4  8007              STRH     r7,[r0,#0]
;;;270    
;;;271    	// 设置扫描方向
;;;272    	LCD_CMD = 0x36; //MX, MY, RGB mode 
0000b6  2736              MOVS     r7,#0x36
0000b8  8027              STRH     r7,[r4,#0]
;;;273    	LCD_DAT = 0x40;
0000ba  2740              MOVS     r7,#0x40
0000bc  8007              STRH     r7,[r0,#0]
;;;274    
;;;275    	LCD_CMD = 0xE0; 
0000be  27e0              MOVS     r7,#0xe0
0000c0  8027              STRH     r7,[r4,#0]
;;;276    	LCD_DAT = 0x07; 
0000c2  2707              MOVS     r7,#7
0000c4  8007              STRH     r7,[r0,#0]
;;;277    	LCD_DAT = 0x18; 
0000c6  2718              MOVS     r7,#0x18
0000c8  8007              STRH     r7,[r0,#0]
;;;278    	LCD_DAT = 0x0c; 
0000ca  270c              MOVS     r7,#0xc
0000cc  8007              STRH     r7,[r0,#0]
;;;279    	LCD_DAT = 0x15; 
0000ce  2715              MOVS     r7,#0x15
0000d0  8007              STRH     r7,[r0,#0]
;;;280    	LCD_DAT = 0x2E; 
0000d2  f04f082e          MOV      r8,#0x2e
0000d6  f8a08000          STRH     r8,[r0,#0]
;;;281    	LCD_DAT = 0x2a; 
0000da  8006              STRH     r6,[r0,#0]
;;;282    	LCD_DAT = 0x23; 
0000dc  2723              MOVS     r7,#0x23
0000de  8007              STRH     r7,[r0,#0]
;;;283    	LCD_DAT = 0x28; 
0000e0  8003              STRH     r3,[r0,#0]
;;;284    	LCD_DAT = 0x28; 
0000e2  8003              STRH     r3,[r0,#0]
;;;285    	LCD_DAT = 0x28; 
0000e4  8003              STRH     r3,[r0,#0]
;;;286    	LCD_DAT = 0x2e; 
0000e6  f8a08000          STRH     r8,[r0,#0]
;;;287    	LCD_DAT = 0x39; 
0000ea  2339              MOVS     r3,#0x39
0000ec  8003              STRH     r3,[r0,#0]
;;;288    	LCD_DAT = 0x00; 
0000ee  8002              STRH     r2,[r0,#0]
;;;289    	LCD_DAT = 0x03;   
0000f0  8005              STRH     r5,[r0,#0]
;;;290    	LCD_DAT = 0x02; 
0000f2  2302              MOVS     r3,#2
0000f4  8003              STRH     r3,[r0,#0]
;;;291    	LCD_DAT = 0x10; 
0000f6  f04f0810          MOV      r8,#0x10
0000fa  f8a08000          STRH     r8,[r0,#0]
;;;292    //	LCD_DAT = 0x13; 
;;;293    
;;;294    	LCD_CMD = 0xE1; 
0000fe  f04f08e1          MOV      r8,#0xe1
000102  f8a48000          STRH     r8,[r4,#0]
;;;295    	LCD_DAT = 0x06; 
000106  f04f0806          MOV      r8,#6
00010a  f8a08000          STRH     r8,[r0,#0]
;;;296    	LCD_DAT = 0x23; 
00010e  8007              STRH     r7,[r0,#0]
;;;297    	LCD_DAT = 0x0d; 
000110  f8a0c000          STRH     r12,[r0,#0]
;;;298    	LCD_DAT = 0x17; 
000114  2717              MOVS     r7,#0x17
000116  8007              STRH     r7,[r0,#0]
;;;299    	LCD_DAT = 0x35; 
000118  2735              MOVS     r7,#0x35
00011a  8007              STRH     r7,[r0,#0]
;;;300    	LCD_DAT = 0x30; 
00011c  2730              MOVS     r7,#0x30
00011e  8007              STRH     r7,[r0,#0]
;;;301    	LCD_DAT = 0x2a; 
000120  8006              STRH     r6,[r0,#0]
;;;302    	LCD_DAT = 0x2d; 
000122  262d              MOVS     r6,#0x2d
000124  8006              STRH     r6,[r0,#0]
;;;303    	LCD_DAT = 0x2c; 
000126  262c              MOVS     r6,#0x2c
000128  8006              STRH     r6,[r0,#0]
;;;304    	LCD_DAT = 0x29; 
00012a  2629              MOVS     r6,#0x29
00012c  8006              STRH     r6,[r0,#0]
;;;305    	LCD_DAT = 0x31; 
00012e  2731              MOVS     r7,#0x31
000130  8007              STRH     r7,[r0,#0]
;;;306    	LCD_DAT = 0x3B; 
000132  273b              MOVS     r7,#0x3b
000134  8007              STRH     r7,[r0,#0]
;;;307    	LCD_DAT = 0x00; 
000136  8002              STRH     r2,[r0,#0]
;;;308    	LCD_DAT = 0x02; 
000138  8003              STRH     r3,[r0,#0]
;;;309    	LCD_DAT = 0x03; 
00013a  8005              STRH     r5,[r0,#0]
;;;310    	LCD_DAT = 0x12;  
00013c  2212              MOVS     r2,#0x12
00013e  8002              STRH     r2,[r0,#0]
;;;311    
;;;312    	LCD_CMD = 0x3A; //65k mode 
000140  223a              MOVS     r2,#0x3a
000142  8022              STRH     r2,[r4,#0]
;;;313    	LCD_DAT = 0x05; 
000144  8001              STRH     r1,[r0,#0]
;;;314    
;;;315    	LCD_CMD = 0x29; //Display on
000146  8026              STRH     r6,[r4,#0]
;;;316    
;;;317    /*	// 初始化
;;;318    	LCD_CMD = 0x00CF;  
;;;319    	LCD_DAT = 0x00; 
;;;320    	LCD_DAT = 0xD9; 
;;;321    	LCD_DAT = 0X30; 
;;;322    
;;;323    	LCD_CMD = 0x00ED;  
;;;324    	LCD_DAT = 0x64; 
;;;325    	LCD_DAT = 0x03; 
;;;326    	LCD_DAT = 0X12; 
;;;327    	LCD_DAT = 0X81; 
;;;328    
;;;329    	LCD_CMD = 0x00E8;  
;;;330    	LCD_DAT = 0x85; 
;;;331    	LCD_DAT = 0x10; 
;;;332    	LCD_DAT = 0x78; 
;;;333    
;;;334    	LCD_CMD = 0x00CB;  
;;;335    	LCD_DAT = 0x39; 
;;;336    	LCD_DAT = 0x2C; 
;;;337    	LCD_DAT = 0x00; 
;;;338    	LCD_DAT = 0x34; 
;;;339    	LCD_DAT = 0x02; 
;;;340    
;;;341    	LCD_CMD = 0x00F7;  
;;;342    	LCD_DAT = 0x20; 
;;;343    
;;;344    	LCD_CMD = 0x00EA;  
;;;345    	LCD_DAT = 0x00; 
;;;346    	LCD_DAT = 0x00; 
;;;347    
;;;348    	LCD_CMD = 0x00C0;    //Power control 
;;;349    	LCD_DAT = 0x21;   //VRH[5:0] 
;;;350    
;;;351    	LCD_CMD = 0x00C1;    //Power control 
;;;352    	LCD_DAT = 0x12;   //SAP[2:0];BT[3:0] 
;;;353    
;;;354    	LCD_CMD = 0x00C5;    //VCM control 
;;;355    	LCD_DAT = 0x32; 
;;;356    	LCD_DAT = 0x3C; 
;;;357    
;;;358    	LCD_CMD = 0x00C7;    //VCM control2 
;;;359    	LCD_DAT = 0XC1; 
;;;360    
;;;361    	// 设置行列扫描方向，设定左上方为原点
;;;362    	LCD_CMD = 0x0036;    // Memory Access Control 
;;;363    	LCD_DAT = 0x08;		// D7控制水平镜像，D6控制垂直镜像
;;;364    
;;;365    	LCD_CMD = 0x003A;   
;;;366    	LCD_DAT = 0x55; 
;;;367    
;;;368    	LCD_CMD = 0x00B1;   
;;;369    	LCD_DAT = 0x00;   
;;;370    	LCD_DAT = 0x18; 
;;;371    
;;;372    	LCD_CMD = 0x00B6;    // Display Function Control 
;;;373    	LCD_DAT = 0x0A; 
;;;374    	LCD_DAT = 0xA2; 
;;;375    
;;;376    	LCD_CMD = 0x00F2;    // 3Gamma Function Disable 
;;;377    	LCD_DAT = 0x00; 
;;;378    
;;;379    	LCD_CMD = 0x0026;    //Gamma curve selected 
;;;380    	LCD_DAT = 0x01; 
;;;381    
;;;382    	LCD_CMD = 0x00E0;    //Set Gamma 
;;;383    	LCD_DAT = 0x0F; 
;;;384    	LCD_DAT = 0x20; 
;;;385    	LCD_DAT = 0x1E; 
;;;386    	LCD_DAT = 0x09; 
;;;387    	LCD_DAT = 0x12; 
;;;388    	LCD_DAT = 0x0B; 
;;;389    	LCD_DAT = 0x50; 
;;;390    	LCD_DAT = 0XBA; 
;;;391    	LCD_DAT = 0x44; 
;;;392    	LCD_DAT = 0x09; 
;;;393    	LCD_DAT = 0x14; 
;;;394    	LCD_DAT = 0x05; 
;;;395    	LCD_DAT = 0x23; 
;;;396    	LCD_DAT = 0x21; 
;;;397    	LCD_DAT = 0x00; 
;;;398    
;;;399    	LCD_CMD = 0XE1;    //Set Gamma 
;;;400    	LCD_DAT = 0x00; 
;;;401    	LCD_DAT = 0x19; 
;;;402    	LCD_DAT = 0x19; 
;;;403    	LCD_DAT = 0x00; 
;;;404    	LCD_DAT = 0x12; 
;;;405    	LCD_DAT = 0x07; 
;;;406    	LCD_DAT = 0x2D; 
;;;407    	LCD_DAT = 0x28; 
;;;408    	LCD_DAT = 0x3F; 
;;;409    	LCD_DAT = 0x02; 
;;;410    	LCD_DAT = 0x0A; 
;;;411    	LCD_DAT = 0x08; 
;;;412    	LCD_DAT = 0x25; 
;;;413    	LCD_DAT = 0x2D; 
;;;414    	LCD_DAT = 0x0F; 
;;;415    
;;;416    	LCD_CMD = 0x0011;    //Exit Sleep 
;;;417    	Delayms(120); 
;;;418    	LCD_CMD = 0x0029;    //Display on 
;;;419    */
;;;420    }
000148  e8bd81f0          POP      {r4-r8,pc}
;;;421    
                          ENDP

                  |L12.332|
                          DCD      0x40010c00
                  |L12.336|
                          DCD      0x60020000

                          AREA ||i.LCD_FSMCInit||, CODE, READONLY, ALIGN=1

                  LCD_FSMCInit PROC
;;;459    ********************************************************************************/ 
;;;460    void LCD_FSMCInit(void)
000000  b500              PUSH     {lr}
;;;461    {
000002  b097              SUB      sp,sp,#0x5c
;;;462    	// GD32
;;;463        exmc_norsram_parameter_struct lcd_init_struct;
;;;464        exmc_norsram_timing_parameter_struct lcd_timing_init_struct;	
;;;465    
;;;466    	// 使能FSMC时钟
;;;467    	rcu_periph_clock_enable(RCU_EXMC);
000004  f44f60a1          MOV      r0,#0x508
000008  f7fffffe          BL       rcu_periph_clock_enable
;;;468    	exmc_norsram_deinit(EXMC_BANK0_NORSRAM_REGION0);
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       exmc_norsram_deinit
;;;469    
;;;470        /*-- FSMC Configuration ------------------------------------------------------*/
;;;471        /* FSMC_Bank1_NORSRAM1 configuration */
;;;472    	lcd_timing_init_struct.asyn_address_setuptime = 1;
000012  2101              MOVS     r1,#1
000014  9107              STR      r1,[sp,#0x1c]
;;;473    	lcd_timing_init_struct.asyn_address_holdtime = 0;
000016  2000              MOVS     r0,#0
000018  9006              STR      r0,[sp,#0x18]
;;;474    	lcd_timing_init_struct.asyn_data_setuptime = 2;
00001a  2202              MOVS     r2,#2
00001c  9205              STR      r2,[sp,#0x14]
;;;475    	lcd_timing_init_struct.bus_latency = 0;
00001e  9004              STR      r0,[sp,#0x10]
;;;476    	lcd_timing_init_struct.syn_clk_division = EXMC_SYN_CLOCK_RATIO_DISABLE;
000020  9003              STR      r0,[sp,#0xc]
;;;477    	lcd_timing_init_struct.syn_data_latency = EXMC_DATALAT_2_CLK;
000022  9002              STR      r0,[sp,#8]
;;;478    	lcd_timing_init_struct.asyn_access_mode = EXMC_ACCESS_MODE_B;
000024  070a              LSLS     r2,r1,#28
000026  9201              STR      r2,[sp,#4]
;;;479    
;;;480        /* Color LCD configuration ------------------------------------
;;;481         LCD configured as follow:
;;;482            - Data/Address MUX = Disable
;;;483            - Memory Type = SRAM
;;;484            - Data Width = 16bit
;;;485            - Write Operation = Enable
;;;486            - Extended Mode = Enable
;;;487            - Asynchronous Wait = Disable */
;;;488    	lcd_init_struct.norsram_region = EXMC_BANK0_NORSRAM_REGION0;
000028  9008              STR      r0,[sp,#0x20]
;;;489    	lcd_init_struct.address_data_mux = DISABLE;
00002a  9014              STR      r0,[sp,#0x50]
;;;490       	lcd_init_struct.memory_type = EXMC_MEMORY_TYPE_PSRAM;	
00002c  2204              MOVS     r2,#4
00002e  9213              STR      r2,[sp,#0x4c]
;;;491    	lcd_init_struct.asyn_wait = DISABLE;
000030  900b              STR      r0,[sp,#0x2c]
;;;492    	lcd_init_struct.databus_width = EXMC_NOR_DATABUS_WIDTH_16B;
000032  2210              MOVS     r2,#0x10
000034  9212              STR      r2,[sp,#0x48]
;;;493    	lcd_init_struct.burst_mode = DISABLE;
000036  9011              STR      r0,[sp,#0x44]
;;;494    	lcd_init_struct.nwait_polarity = EXMC_NWAIT_POLARITY_LOW;
000038  9010              STR      r0,[sp,#0x40]
;;;495    	lcd_init_struct.wrap_burst_mode = DISABLE;	
00003a  900f              STR      r0,[sp,#0x3c]
;;;496    	lcd_init_struct.nwait_config = EXMC_NWAIT_CONFIG_BEFORE;	
00003c  900e              STR      r0,[sp,#0x38]
;;;497    	lcd_init_struct.memory_write = ENABLE;
00003e  910d              STR      r1,[sp,#0x34]
;;;498        lcd_init_struct.nwait_signal = DISABLE;
000040  900c              STR      r0,[sp,#0x30]
;;;499    	lcd_init_struct.extended_mode = DISABLE;
000042  900a              STR      r0,[sp,#0x28]
;;;500    	lcd_init_struct.write_mode = EXMC_ASYN_WRITE;								// 异步写
000044  9009              STR      r0,[sp,#0x24]
;;;501        lcd_init_struct.read_write_timing = &lcd_timing_init_struct;
000046  a801              ADD      r0,sp,#4
000048  9015              STR      r0,[sp,#0x54]
;;;502        lcd_init_struct.write_timing = &lcd_timing_init_struct;
00004a  9016              STR      r0,[sp,#0x58]
;;;503    	exmc_norsram_init(&lcd_init_struct);
00004c  a808              ADD      r0,sp,#0x20
00004e  f7fffffe          BL       exmc_norsram_init
;;;504    
;;;505    	/* - BANK 1 (of NOR/SRAM Bank 0~3) is enabled */
;;;506        exmc_norsram_enable(EXMC_BANK0_NORSRAM_REGION0);
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       exmc_norsram_enable
;;;507    }
000058  b017              ADD      sp,sp,#0x5c
00005a  bd00              POP      {pc}
;;;508    
                          ENDP


                          AREA ||i.LCD_FillColor||, CODE, READONLY, ALIGN=2

                  LCD_FillColor PROC
;;;197    // 填充指定的颜色
;;;198    void LCD_FillColor(uint16 color)
000000  b530              PUSH     {r4,r5,lr}
;;;199    {
000002  4605              MOV      r5,r0
;;;200    	int i,j;
;;;201    
;;;202    	// 从原点开始扫描
;;;203    	LCD_SetAreaByPointAndSize(0, 0, LCD_WIDTH, LCD_HEIGHT);
000004  2100              MOVS     r1,#0
000006  23a0              MOVS     r3,#0xa0
000008  2280              MOVS     r2,#0x80
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;204    
;;;205    	for (i=0;i<LCD_HEIGHT;i++)
000010  2200              MOVS     r2,#0
;;;206    	{
;;;207    		for (j=0;j<LCD_WIDTH;j++)
;;;208    		{
;;;209    			LCD_WriteColor(color);
000012  4b06              LDR      r3,|L14.44|
000014  0a2c              LSRS     r4,r5,#8
                  |L14.22|
000016  2100              MOVS     r1,#0                 ;207
                  |L14.24|
000018  801c              STRH     r4,[r3,#0]
00001a  801d              STRH     r5,[r3,#0]
00001c  1c49              ADDS     r1,r1,#1              ;207
00001e  2980              CMP      r1,#0x80              ;207
000020  dbfa              BLT      |L14.24|
000022  1c52              ADDS     r2,r2,#1              ;205
000024  2aa0              CMP      r2,#0xa0              ;205
000026  dbf6              BLT      |L14.22|
;;;210    		}
;;;211    	}
;;;212    }
000028  bd30              POP      {r4,r5,pc}
;;;213    
                          ENDP

00002a  0000              DCW      0x0000
                  |L14.44|
                          DCD      0x60020000

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=2

                  LCD_Init PROC
;;;509    // LCD驱动模块初始化入口
;;;510    void LCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;511    {
;;;512    	LCD_CtrlPortInit();
000002  f7fffffe          BL       LCD_CtrlPortInit
;;;513    
;;;514    	LCD_FSMCInit();
000006  f7fffffe          BL       LCD_FSMCInit
;;;515    
;;;516    	LCD_DriverInit();
00000a  f7fffffe          BL       LCD_DriverInit
;;;517    
;;;518    	LCD_FillColor(LCD_COLOR_BLACK);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       LCD_FillColor
;;;519    	
;;;520    	// LCD背光
;;;521    	LCD_BL_OFF();
000014  e8bd4010          POP      {r4,lr}
000018  f44f7180          MOV      r1,#0x100
00001c  4801              LDR      r0,|L15.36|
00001e  f7ffbffe          B.W      gpio_bit_reset
;;;522    
;;;523    //	LCD_BL_ON();
;;;524    //	
;;;525    //	LCD_FillColor(LCD_COLOR_RED);
;;;526    //	LCD_FillColor(LCD_COLOR_GREEN);
;;;527    //	LCD_FillColor(LCD_COLOR_BLUE);	
;;;528    }
;;;529    
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
                          DCD      0x40010800

                          AREA ||i.LCD_PrintChar||, CODE, READONLY, ALIGN=2

                  LCD_PrintChar PROC
;;;765    // 在指定坐标位置打印一个字符
;;;766    void LCD_PrintChar(uint16 x, uint16 y, uint8 ch, uint16 color, LCD_OPERATOR_MODE_E mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;767    {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4610              MOV      r0,r2
00000a  461d              MOV      r5,r3
;;;768    	uint16 width=0, height=0;
;;;769    	uint32 i, j;
;;;770    	uint32 size;
;;;771    	uint16* pData = FONT_GetAsciiDataPtr(ch);
00000c  f7fffffe          BL       FONT_GetAsciiDataPtr
000010  4680              MOV      r8,r0
;;;772    	uint16 mask=0x0001;
000012  2401              MOVS     r4,#1
;;;773    	
;;;774    	width = 16;//FONT_WIDTH();
000014  2610              MOVS     r6,#0x10
;;;775    	height = 8;//FONT_HEIGHT();
000016  2708              MOVS     r7,#8
;;;776    
;;;777    	size = width;
;;;778    	size *= height;
;;;779    
;;;780    	LCD_SetAreaByPointAndSize(x, y, width, height);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4651              MOV      r1,r10
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;781    
;;;782    	for(i=0; i<height; i++)
000024  2100              MOVS     r1,#0
;;;783    	{
;;;784    		for(j=0; j<width; j++)
;;;785    		{
;;;786    			if((*(pData+j)) & mask)
;;;787    			{
;;;788    				LCD_WriteColor(color);
000026  4a0f              LDR      r2,|L16.100|
000028  e017              B        |L16.90|
                  |L16.42|
00002a  2000              MOVS     r0,#0                 ;784
00002c  ea4f2915          LSR      r9,r5,#8
000030  2300              MOVS     r3,#0
000032  e00b              B        |L16.76|
                  |L16.52|
000034  f838c010          LDRH     r12,[r8,r0,LSL #1]    ;786
000038  ea1c0f04          TST      r12,r4                ;786
00003c  d003              BEQ      |L16.70|
00003e  f8a29000          STRH     r9,[r2,#0]
000042  8015              STRH     r5,[r2,#0]
000044  e001              B        |L16.74|
                  |L16.70|
;;;789    			}
;;;790    			else
;;;791    			{
;;;792    				LCD_WriteColor(0);
000046  8013              STRH     r3,[r2,#0]
000048  8013              STRH     r3,[r2,#0]
                  |L16.74|
00004a  1c40              ADDS     r0,r0,#1              ;784
                  |L16.76|
00004c  42b0              CMP      r0,r6                 ;784
00004e  d3f1              BCC      |L16.52|
;;;793    			}
;;;794    		}
;;;795    
;;;796    		mask <<= 1;
000050  f64f70ff          MOV      r0,#0xffff
000054  ea000444          AND      r4,r0,r4,LSL #1
000058  1c49              ADDS     r1,r1,#1              ;782
                  |L16.90|
00005a  42b9              CMP      r1,r7                 ;782
00005c  d3e5              BCC      |L16.42|
;;;797    	}
;;;798    }
00005e  e8bd87f0          POP      {r4-r10,pc}
;;;799    
                          ENDP

000062  0000              DCW      0x0000
                  |L16.100|
                          DCD      0x60020000

                          AREA ||i.LCD_PrintString||, CODE, READONLY, ALIGN=1

                  LCD_PrintString PROC
;;;800    // 从指定位置开始，打印一个字符串
;;;801    void LCD_PrintString(uint16 x, uint16 y, char* pStr, uint16 color, LCD_OPERATOR_MODE_E mode)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;802    {
000004  4614              MOV      r4,r2
000006  9e08              LDR      r6,[sp,#0x20]
000008  4698              MOV      r8,r3
;;;803    	uint16 xPos=x, yPos=y;
00000a  4605              MOV      r5,r0
00000c  460f              MOV      r7,r1
;;;804    	
;;;805    	if(NULL == pStr)
00000e  2c00              CMP      r4,#0
000010  d010              BEQ      |L17.52|
;;;806    	{
;;;807    		return;
;;;808    	}
;;;809    
;;;810    	if((x >= LCD_WIDTH)||(y >= LCD_HEIGHT))
000012  2880              CMP      r0,#0x80
000014  d20e              BCS      |L17.52|
000016  29a0              CMP      r1,#0xa0
000018  d20c              BCS      |L17.52|
00001a  e008              B        |L17.46|
                  |L17.28|
;;;811    	{
;;;812    		return;
;;;813    	}
;;;814    
;;;815    	while(0 != *pStr)
;;;816    	{
;;;817    		LCD_PrintChar(xPos, yPos, *pStr, color, mode);
00001c  4643              MOV      r3,r8
00001e  4639              MOV      r1,r7
000020  4628              MOV      r0,r5
000022  9600              STR      r6,[sp,#0]
000024  f7fffffe          BL       LCD_PrintChar
;;;818    
;;;819    		xPos += FONT_WIDTH();
000028  3508              ADDS     r5,r5,#8
00002a  b2ad              UXTH     r5,r5
;;;820    		pStr ++;
00002c  1c64              ADDS     r4,r4,#1
                  |L17.46|
00002e  7822              LDRB     r2,[r4,#0]            ;815
000030  2a00              CMP      r2,#0                 ;815
000032  d1f3              BNE      |L17.28|
                  |L17.52|
;;;821    	}
;;;822    }
000034  e8bd83f8          POP      {r3-r9,pc}
;;;823    
                          ENDP


                          AREA ||i.LCD_Process||, CODE, READONLY, ALIGN=1

                  LCD_Process PROC
;;;530    // LCD处理过程函数
;;;531    void LCD_Process(void)
000000  4770              BX       lr
;;;532    {
;;;533    }
;;;534    
                          ENDP


                          AREA ||i.LCD_SetAreaBy2Point||, CODE, READONLY, ALIGN=2

                  LCD_SetAreaBy2Point PROC
;;;126    // 设定操作区域，输入参数为起始x坐标、结束x坐标、起始y坐标、结束y坐标
;;;127    void LCD_SetAreaBy2Point(uint16 startX, uint16 startY, uint16 endX, uint16 endY)
000000  b570              PUSH     {r4-r6,lr}
;;;128    {
;;;129    	LCD_CMD = 0x002A;
000002  f04f45c0          MOV      r5,#0x60000000
000006  242a              MOVS     r4,#0x2a
000008  802c              STRH     r4,[r5,#0]
;;;130    	LCD_DAT = startX>>8;
00000a  4c0b              LDR      r4,|L19.56|
00000c  0a06              LSRS     r6,r0,#8
00000e  8026              STRH     r6,[r4,#0]
;;;131    	LCD_DAT = startX&0XFF;
000010  b2c0              UXTB     r0,r0
000012  8020              STRH     r0,[r4,#0]
;;;132    	LCD_DAT = endX>>8;
000014  0a10              LSRS     r0,r2,#8
000016  8020              STRH     r0,[r4,#0]
;;;133    	LCD_DAT = endX&0XFF;
000018  b2d0              UXTB     r0,r2
00001a  8020              STRH     r0,[r4,#0]
;;;134    
;;;135    	LCD_CMD = 0x002B;
00001c  202b              MOVS     r0,#0x2b
00001e  8028              STRH     r0,[r5,#0]
;;;136    	LCD_DAT = startY>>8;
000020  0a08              LSRS     r0,r1,#8
000022  8020              STRH     r0,[r4,#0]
;;;137    	LCD_DAT = startY&0XFF;
000024  b2c8              UXTB     r0,r1
000026  8020              STRH     r0,[r4,#0]
;;;138    	LCD_DAT = endY>>8;
000028  0a18              LSRS     r0,r3,#8
00002a  8020              STRH     r0,[r4,#0]
;;;139    	LCD_DAT = endY&0XFF;
00002c  b2d8              UXTB     r0,r3
00002e  8020              STRH     r0,[r4,#0]
;;;140    
;;;141    	LCD_WriteGRAM();
000030  202c              MOVS     r0,#0x2c
000032  8028              STRH     r0,[r5,#0]
;;;142    }
000034  bd70              POP      {r4-r6,pc}
;;;143    
                          ENDP

000036  0000              DCW      0x0000
                  |L19.56|
                          DCD      0x60020000

                          AREA ||i.LCD_SetAreaByPointAndSize||, CODE, READONLY, ALIGN=2

                  LCD_SetAreaByPointAndSize PROC
;;;144    // 设定操作区域，输入参数为起始x坐标、起始y坐标、区域宽、区域高
;;;145    void LCD_SetAreaByPointAndSize(uint16 startX, uint16 startY, uint16 width, uint16 height)
000000  b570              PUSH     {r4-r6,lr}
;;;146    {
;;;147    	LCD_CMD = 0x002A;
000002  f04f45c0          MOV      r5,#0x60000000
000006  242a              MOVS     r4,#0x2a
000008  802c              STRH     r4,[r5,#0]
;;;148    	LCD_DAT = startY>>8;
00000a  4c0d              LDR      r4,|L20.64|
00000c  0a0e              LSRS     r6,r1,#8
00000e  8026              STRH     r6,[r4,#0]
;;;149    	LCD_DAT = startY&0XFF;
000010  b2ce              UXTB     r6,r1
000012  8026              STRH     r6,[r4,#0]
;;;150    	LCD_DAT = (startY+width-1)>>8;
000014  4411              ADD      r1,r1,r2
000016  1e49              SUBS     r1,r1,#1
000018  0a0a              LSRS     r2,r1,#8
00001a  8022              STRH     r2,[r4,#0]
;;;151    	LCD_DAT = (startY+width-1)&0XFF;
00001c  b2c9              UXTB     r1,r1
00001e  8021              STRH     r1,[r4,#0]
;;;152    
;;;153    	LCD_CMD = 0x002B;
000020  212b              MOVS     r1,#0x2b
000022  8029              STRH     r1,[r5,#0]
;;;154    	LCD_DAT = startX>>8;
000024  0a01              LSRS     r1,r0,#8
000026  8021              STRH     r1,[r4,#0]
;;;155    	LCD_DAT = startX&0XFF;
000028  b2c1              UXTB     r1,r0
00002a  8021              STRH     r1,[r4,#0]
;;;156    	LCD_DAT = (startX+height-1)>>8;
00002c  4418              ADD      r0,r0,r3
00002e  1e40              SUBS     r0,r0,#1
000030  0a01              LSRS     r1,r0,#8
000032  8021              STRH     r1,[r4,#0]
;;;157    	LCD_DAT = (startX+height-1)&0XFF;
000034  b2c0              UXTB     r0,r0
000036  8020              STRH     r0,[r4,#0]
;;;158    
;;;159    	LCD_WriteGRAM();
000038  202c              MOVS     r0,#0x2c
00003a  8028              STRH     r0,[r5,#0]
;;;160    }
00003c  bd70              POP      {r4-r6,pc}
;;;161    
                          ENDP

00003e  0000              DCW      0x0000
                  |L20.64|
                          DCD      0x60020000

                          AREA ||i.LCD_SetCursor||, CODE, READONLY, ALIGN=2

                  LCD_SetCursor PROC
;;;112    // 设定起始扫描坐标
;;;113    void LCD_SetCursor(uint16 x, uint16 y)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115    	LCD_CMD = 0x002A;
000002  f04f43c0          MOV      r3,#0x60000000
000006  222a              MOVS     r2,#0x2a
000008  801a              STRH     r2,[r3,#0]
;;;116    	LCD_DAT = x>>8;
00000a  4a07              LDR      r2,|L21.40|
00000c  0a04              LSRS     r4,r0,#8
00000e  8014              STRH     r4,[r2,#0]
;;;117    	LCD_DAT = x&0XFF;
000010  b2c0              UXTB     r0,r0
000012  8010              STRH     r0,[r2,#0]
;;;118    
;;;119    	LCD_CMD = 0x002B;
000014  202b              MOVS     r0,#0x2b
000016  8018              STRH     r0,[r3,#0]
;;;120    	LCD_DAT = y>>8;
000018  0a08              LSRS     r0,r1,#8
00001a  8010              STRH     r0,[r2,#0]
;;;121    	LCD_DAT = y&0XFF;
00001c  b2c8              UXTB     r0,r1
00001e  8010              STRH     r0,[r2,#0]
;;;122    
;;;123    	LCD_WriteGRAM();
000020  202c              MOVS     r0,#0x2c
000022  8018              STRH     r0,[r3,#0]
;;;124    }
000024  bd10              POP      {r4,pc}
;;;125    
                          ENDP

000026  0000              DCW      0x0000
                  |L21.40|
                          DCD      0x60020000

                          AREA ||.data||, DATA, ALIGN=2

                  count
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  g_PIC_StartAddr
                          DCD      0x00000100
                          DCD      0x00000498
                          DCD      0x0000185c
                          DCD      0x0000a45c
                          DCD      0x0000b518
                          DCD      0x00014118
                          DCD      0x00015518
                          DCD      0x00015560
                          DCD      0x00015628
                          DCD      0x00015640
                          DCD      0x000171c0
                          DCD      0x0001724c
                          DCD      0x0001748e
                          DCD      0x000176d0
                          DCD      0x00017912
                          DCD      0x00017b54
                          DCD      0x00017d96
                          DCD      0x0001826e
                          DCD      0x00018386
                          DCD      0x0001a4fe
                          DCD      0x0001c676
                          DCD      0x0001e7ee
                          DCD      0x00020966
                          DCD      0x00022ade
                          DCD      0x00024c56
                          DCD      0x00026dce
                          DCD      0x00028f46
                          DCD      0x0002b0be
                          DCD      0x0002d236
                          DCD      0x0002f3ae
                          DCD      0x00031526
                          DCD      0x0003369e
                          DCD      0x00035816
                          DCD      0x0003798e
                          DCD      0x00039b06
                          DCD      0x0003bc7e
                          DCD      0x0003ddf6
                          DCD      0x0003ff6e
                          DCD      0x000420e6
                          DCD      0x0004425e
                          DCD      0x000463d6
                          DCD      0x000467c6
                          DCD      0x0004893e
                          DCD      0x0004aab6
                          DCD      0x0004cc2e
                          DCD      0x0004eda6
                          DCD      0x0004f1c6
                          DCD      0x0004f5b6
                          DCD      0x0005172e
                          DCD      0x000538a6
                          DCD      0x00055a1e
                          DCD      0x00055f96
                          DCD      0x000563b6
                          DCD      0x0005852e
                          DCD      0x0005a6a6
                          DCD      0x0005acc6
                          DCD      0x0005b2e6
                          DCD      0x0005bbe6
                          DCD      0x0005dd5e
                          DCD      0x0005fed6
                          DCD      0x0006204e
                          DCD      0x000641c6
                          DCD      0x0006633e
                          DCD      0x000684b6
                          DCD      0x0006a62e
                          DCD      0x0006c7a6
                          DCD      0x0006e91e
                          DCD      0x00070a96
                          DCD      0x00071316
                          DCD      0x000715be
                          DCD      0x00071a96
                          DCD      0x0007228e
                          DCD      0x00072a86
                          DCD      0x0007327e
                          DCD      0x00073a76
                          DCD      0x0007426e
                          DCD      0x00074a66
                          DCD      0x0007525e
                          DCD      0x00075a56
                          DCD      0x0007624e
                          DCD      0x00076a46
                          DCD      0x0007723e
                          DCD      0x00077da2
                          DCD      0x00078906
                          DCD      0x0007946a
                          DCD      0x00079fce
                          DCD      0x0007ab32
                          DCD      0x0007b696
                          DCD      0x0007c1fa
                          DCD      0x0007cd5e
                          DCD      0x0007d8c2
                          DCD      0x0007e426
                          DCD      0x0007e76e
                          DCD      0x0007eab6
                          DCD      0x0007edfe
                          DCD      0x0007f146
                          DCD      0x0007f48e
                          DCD      0x0007f7d6
                          DCD      0x0007fb1e
                          DCD      0x0007fe66
                          DCD      0x000801ae
                          DCD      0x000804f6
                          DCD      0x000806c4
                          DCD      0x00080892
                          DCD      0x00080a60
                          DCD      0x00080c2e
                          DCD      0x00080dfc
                          DCD      0x00080fca
                          DCD      0x00081198
                          DCD      0x00081366
                          DCD      0x00081534
                          DCD      0x00081702
                          DCD      0x000818d0
                          DCD      0x00081948
                          DCD      0x000819c0
                          DCD      0x00081a38
                          DCD      0x00081ab0
                          DCD      0x00081b28
                          DCD      0x00081ba0
                          DCD      0x00081c18
                          DCD      0x00081c90
                          DCD      0x00081d08
                          DCD      0x00081d80
                          DCD      0x00082230
                          DCD      0x00083154
                          DCD      0x00084078
                          DCD      0x00084f9c
                          DCD      0x00085ec0
                          DCD      0x00086de4
                          DCD      0x00087d08
                          DCD      0x00088c2c
                          DCD      0x00089b50
                          DCD      0x0008aa74
                          DCD      0x0008b998
                          DCD      0x0008c8bc
                          DCD      0x0008d7e0
                          DCD      0x0008e704
                          DCD      0x0008e7cc
                          DCD      0x0008e894
                          DCD      0x00098894
                          DCD      0x00098a38
                          DCD      0x000a2a38
                          DCD      0x000aca38
                          DCD      0x000acee8
                          DCD      0x000ad398
                          DCD      0x000ad848
                          DCD      0x000adcf8
                          DCD      0x000ae1a8
                          DCD      0x000ae658
                          DCD      0x000aeb08
                          DCD      0x000aef26
                          DCD      0x000af344
                          DCD      0x000af762
                          DCD      0x000afb80
                          DCD      0x000aff9e
                          DCD      0x000b03bc
                          DCD      0x000b0c54
                          DCD      0x000b14ec
                          DCD      0x000b1d84
                          DCD      0x000b261c
                          DCD      0x000b2eb4
                          DCD      0x000b374c
                          DCD      0x000b3fe4
                          DCD      0x000b487c
                          DCD      0x000b5114
                          DCD      0x000b59ac
                          DCD      0x000b6244
                          DCD      0x000b6adc
                          DCD      0x000b7374
                          DCD      0x000b7c0c
                          DCD      0x000b84a4
                          DCD      0x000b8d3c
                          DCD      0x000b95d4
                  g_PIC_Height
0002b8  002e002e          DCW      0x002e,0x002e
0002bc  00a00066          DCW      0x00a0,0x0066
0002c0  00a000a0          DCW      0x00a0,0x00a0
0002c4  0003000a          DCW      0x0003,0x000a
0002c8  000300a0          DCW      0x0003,0x00a0
0002cc  00070011          DCW      0x0007,0x0011
0002d0  00110011          DCW      0x0011,0x0011
0002d4  00110011          DCW      0x0011,0x0011
0002d8  001f000e          DCW      0x001f,0x000e
0002dc  00990099          DCW      0x0099,0x0099
0002e0  00990099          DCW      0x0099,0x0099
0002e4  00990099          DCW      0x0099,0x0099
0002e8  00990099          DCW      0x0099,0x0099
0002ec  00990099          DCW      0x0099,0x0099
0002f0  00990099          DCW      0x0099,0x0099
0002f4  00990099          DCW      0x0099,0x0099
0002f8  00990099          DCW      0x0099,0x0099
0002fc  00990099          DCW      0x0099,0x0099
000300  00990099          DCW      0x0099,0x0099
000304  00990099          DCW      0x0099,0x0099
000308  00240099          DCW      0x0024,0x0099
00030c  00990099          DCW      0x0099,0x0099
000310  00990016          DCW      0x0099,0x0016
000314  00240099          DCW      0x0024,0x0099
000318  00990099          DCW      0x0099,0x0099
00031c  00230016          DCW      0x0023,0x0016
000320  00990099          DCW      0x0099,0x0099
000324  00070007          DCW      0x0007,0x0007
000328  00300099          DCW      0x0030,0x0099
00032c  00990099          DCW      0x0099,0x0099
000330  00990099          DCW      0x0099,0x0099
000334  00990099          DCW      0x0099,0x0099
000338  00990099          DCW      0x0099,0x0099
00033c  00990040          DCW      0x0099,0x0040
000340  0022001f          DCW      0x0022,0x001f
000344  00220022          DCW      0x0022,0x0022
000348  00220022          DCW      0x0022,0x0022
00034c  00220022          DCW      0x0022,0x0022
000350  00220022          DCW      0x0022,0x0022
000354  00220022          DCW      0x0022,0x0022
000358  0022001b          DCW      0x0022,0x001b
00035c  001b001b          DCW      0x001b,0x001b
000360  001b001b          DCW      0x001b,0x001b
000364  001b001b          DCW      0x001b,0x001b
000368  001b001b          DCW      0x001b,0x001b
00036c  001b000f          DCW      0x001b,0x000f
000370  000f000f          DCW      0x000f,0x000f
000374  000f000f          DCW      0x000f,0x000f
000378  000f000f          DCW      0x000f,0x000f
00037c  000f000f          DCW      0x000f,0x000f
000380  000f000b          DCW      0x000f,0x000b
000384  000b000b          DCW      0x000b,0x000b
000388  000b000b          DCW      0x000b,0x000b
00038c  000b000b          DCW      0x000b,0x000b
000390  000b000b          DCW      0x000b,0x000b
000394  000b000b          DCW      0x000b,0x000b
000398  00060006          DCW      0x0006,0x0006
00039c  00060006          DCW      0x0006,0x0006
0003a0  00060006          DCW      0x0006,0x0006
0003a4  00060006          DCW      0x0006,0x0006
0003a8  00060006          DCW      0x0006,0x0006
0003ac  001e0022          DCW      0x001e,0x0022
0003b0  00220022          DCW      0x0022,0x0022
0003b4  00220022          DCW      0x0022,0x0022
0003b8  00220022          DCW      0x0022,0x0022
0003bc  00220022          DCW      0x0022,0x0022
0003c0  00220022          DCW      0x0022,0x0022
0003c4  00220022          DCW      0x0022,0x0022
0003c8  000a000a          DCW      0x000a,0x000a
0003cc  00a0000f          DCW      0x00a0,0x000f
0003d0  00a000a0          DCW      0x00a0,0x00a0
0003d4  003c003c          DCW      0x003c,0x003c
0003d8  003c003c          DCW      0x003c,0x003c
0003dc  003c003c          DCW      0x003c,0x003c
0003e0  003c001f          DCW      0x003c,0x001f
0003e4  001f001f          DCW      0x001f,0x001f
0003e8  001f001f          DCW      0x001f,0x001f
0003ec  001f0032          DCW      0x001f,0x0032
0003f0  00320032          DCW      0x0032,0x0032
0003f4  00320032          DCW      0x0032,0x0032
0003f8  00320032          DCW      0x0032,0x0032
0003fc  00320032          DCW      0x0032,0x0032
000400  00320032          DCW      0x0032,0x0032
000404  00320032          DCW      0x0032,0x0032
000408  00320032          DCW      0x0032,0x0032
00040c  00320032          DCW      0x0032,0x0032
000410  0032              DCW      0x0032
                  g_PIC_Width
000412  000a              DCW      0x000a
000414  00370070          DCW      0x0037,0x0070
000418  00150070          DCW      0x0015,0x0070
00041c  0010000c          DCW      0x0010,0x000c
000420  000a0004          DCW      0x000a,0x0004
000424  0016000a          DCW      0x0016,0x000a
000428  00110011          DCW      0x0011,0x0011
00042c  00110011          DCW      0x0011,0x0011
000430  00110014          DCW      0x0011,0x0014
000434  000a001c          DCW      0x000a,0x001c
000438  001c001c          DCW      0x001c,0x001c
00043c  001c001c          DCW      0x001c,0x001c
000440  001c001c          DCW      0x001c,0x001c
000444  001c001c          DCW      0x001c,0x001c
000448  001c001c          DCW      0x001c,0x001c
00044c  001c001c          DCW      0x001c,0x001c
000450  001c001c          DCW      0x001c,0x001c
000454  001c001c          DCW      0x001c,0x001c
000458  001c001c          DCW      0x001c,0x001c
00045c  001c001c          DCW      0x001c,0x001c
000460  001c000e          DCW      0x001c,0x000e
000464  001c001c          DCW      0x001c,0x001c
000468  001c001c          DCW      0x001c,0x001c
00046c  0018000e          DCW      0x0018,0x000e
000470  001c001c          DCW      0x001c,0x001c
000474  001c0014          DCW      0x001c,0x0014
000478  0018001c          DCW      0x0018,0x001c
00047c  001c0070          DCW      0x001c,0x0070
000480  00700018          DCW      0x0070,0x0018
000484  001c001c          DCW      0x001c,0x001c
000488  001c001c          DCW      0x001c,0x001c
00048c  001c001c          DCW      0x001c,0x001c
000490  001c001c          DCW      0x001c,0x001c
000494  001c001c          DCW      0x001c,0x001c
000498  0011000a          DCW      0x0011,0x000a
00049c  0014001e          DCW      0x0014,0x001e
0004a0  001e001e          DCW      0x001e,0x001e
0004a4  001e001e          DCW      0x001e,0x001e
0004a8  001e001e          DCW      0x001e,0x001e
0004ac  001e001e          DCW      0x001e,0x001e
0004b0  001e001e          DCW      0x001e,0x001e
0004b4  00360036          DCW      0x0036,0x0036
0004b8  00360036          DCW      0x0036,0x0036
0004bc  00360036          DCW      0x0036,0x0036
0004c0  00360036          DCW      0x0036,0x0036
0004c4  00360036          DCW      0x0036,0x0036
0004c8  001c001c          DCW      0x001c,0x001c
0004cc  001c001c          DCW      0x001c,0x001c
0004d0  001c001c          DCW      0x001c,0x001c
0004d4  001c001c          DCW      0x001c,0x001c
0004d8  001c001c          DCW      0x001c,0x001c
0004dc  00150015          DCW      0x0015,0x0015
0004e0  00150015          DCW      0x0015,0x0015
0004e4  00150015          DCW      0x0015,0x0015
0004e8  00150015          DCW      0x0015,0x0015
0004ec  00150015          DCW      0x0015,0x0015
0004f0  0015000a          DCW      0x0015,0x000a
0004f4  000a000a          DCW      0x000a,0x000a
0004f8  000a000a          DCW      0x000a,0x000a
0004fc  000a000a          DCW      0x000a,0x000a
000500  000a000a          DCW      0x000a,0x000a
000504  000a0014          DCW      0x000a,0x0014
000508  00390039          DCW      0x0039,0x0039
00050c  00390039          DCW      0x0039,0x0039
000510  00390039          DCW      0x0039,0x0039
000514  00390039          DCW      0x0039,0x0039
000518  00390039          DCW      0x0039,0x0039
00051c  00390039          DCW      0x0039,0x0039
000520  0039000a          DCW      0x0039,0x000a
000524  000a0080          DCW      0x000a,0x0080
000528  000e0080          DCW      0x000e,0x0080
00052c  0080000a          DCW      0x0080,0x000a
000530  000a000a          DCW      0x000a,0x000a
000534  000a000a          DCW      0x000a,0x000a
000538  000a000a          DCW      0x000a,0x000a
00053c  00110011          DCW      0x0011,0x0011
000540  00110011          DCW      0x0011,0x0011
000544  00110011          DCW      0x0011,0x0011
000548  00160016          DCW      0x0016,0x0016
00054c  00160016          DCW      0x0016,0x0016
000550  00160016          DCW      0x0016,0x0016
000554  00160016          DCW      0x0016,0x0016
000558  00160016          DCW      0x0016,0x0016
00055c  00160016          DCW      0x0016,0x0016
000560  00160016          DCW      0x0016,0x0016
000564  00160016          DCW      0x0016,0x0016
000568  00160016          DCW      0x0016,0x0016

                          AREA ||area_number.25||, DATA, ALIGN=1

                          EXPORTAS ||area_number.25||, ||.data||
                  lcdCB
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "User\\lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_0bd68314____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___5_lcd_c_0bd68314____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_0bd68314____REVSH|
#line 128
|__asm___5_lcd_c_0bd68314____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
