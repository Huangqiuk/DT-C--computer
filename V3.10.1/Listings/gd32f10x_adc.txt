; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_adc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_adc.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -IC:\Users\Administrator\AppData\Local\Arm\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_adc.crf Libraries\src\gd32f10x_adc.c]
                          THUMB

                          AREA ||i.adc_calibration_enable||, CODE, READONLY, ALIGN=1

                  adc_calibration_enable PROC
;;;211    */
;;;212    void adc_calibration_enable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;213    {
;;;214        /* reset the selected ADC1 calibration registers */
;;;215        ADC_CTL1(adc_periph) |= (uint32_t) ADC_CTL1_RSTCLB;
000002  f0410108          ORR      r1,r1,#8
000006  6081              STR      r1,[r0,#8]
                  |L1.8|
;;;216        /* check the RSTCLB bit state */
;;;217        while(RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_RSTCLB)){
000008  6881              LDR      r1,[r0,#8]
00000a  0709              LSLS     r1,r1,#28
00000c  d4fc              BMI      |L1.8|
;;;218        }
;;;219        /* enable ADC calibration process */
;;;220        ADC_CTL1(adc_periph) |= ADC_CTL1_CLB;
00000e  6881              LDR      r1,[r0,#8]
000010  f0410104          ORR      r1,r1,#4
000014  6081              STR      r1,[r0,#8]
                  |L1.22|
;;;221        /* check the CLB bit state */
;;;222        while(RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_CLB)){
000016  6881              LDR      r1,[r0,#8]
000018  0749              LSLS     r1,r1,#29
00001a  d4fc              BMI      |L1.22|
;;;223        }
;;;224    }
00001c  4770              BX       lr
;;;225    
                          ENDP


                          AREA ||i.adc_channel_length_config||, CODE, READONLY, ALIGN=1

                  adc_channel_length_config PROC
;;;322    */
;;;323    void adc_channel_length_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t length)
000000  1e52              SUBS     r2,r2,#1
;;;324    {
;;;325        switch(adc_channel_group){
000002  2901              CMP      r1,#1
000004  d00d              BEQ      |L2.34|
000006  2902              CMP      r1,#2
000008  d10a              BNE      |L2.32|
;;;326        case ADC_REGULAR_CHANNEL:
;;;327            /* configure the length of regular channel group */
;;;328            ADC_RSQ0(adc_periph) &= ~((uint32_t)ADC_RSQ0_RL);
;;;329            ADC_RSQ0(adc_periph) |= RSQ0_RL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
;;;330            break;
;;;331        case ADC_INSERTED_CHANNEL:
;;;332            /* configure the length of inserted channel group */
;;;333            ADC_ISQ(adc_periph) &= ~((uint32_t)ADC_ISQ_IL);
00000a  6b81              LDR      r1,[r0,#0x38]
00000c  f4211140          BIC      r1,r1,#0x300000
000010  6381              STR      r1,[r0,#0x38]
;;;334            ADC_ISQ(adc_periph) |= ISQ_IL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
000012  6b81              LDR      r1,[r0,#0x38]
000014  f44f1340          MOV      r3,#0x300000
000018  ea035202          AND      r2,r3,r2,LSL #20
00001c  4311              ORRS     r1,r1,r2
00001e  6381              STR      r1,[r0,#0x38]
                  |L2.32|
;;;335            break;
;;;336        default:
;;;337            break;
;;;338        }
;;;339    }
000020  4770              BX       lr
                  |L2.34|
000022  6ac1              LDR      r1,[r0,#0x2c]         ;328
000024  f4210170          BIC      r1,r1,#0xf00000       ;328
000028  62c1              STR      r1,[r0,#0x2c]         ;328
00002a  6ac1              LDR      r1,[r0,#0x2c]         ;329
00002c  f44f0370          MOV      r3,#0xf00000          ;329
000030  ea035202          AND      r2,r3,r2,LSL #20      ;329
000034  4311              ORRS     r1,r1,r2              ;329
000036  62c1              STR      r1,[r0,#0x2c]         ;329
000038  4770              BX       lr
;;;340    
                          ENDP


                          AREA ||i.adc_data_alignment_config||, CODE, READONLY, ALIGN=1

                  adc_data_alignment_config PROC
;;;168    */
;;;169    void adc_data_alignment_config(uint32_t adc_periph, uint32_t data_alignment)
000000  2900              CMP      r1,#0
;;;170    {
000002  d004              BEQ      |L3.14|
;;;171        if(ADC_DATAALIGN_RIGHT != data_alignment){
;;;172            /* MSB alignment */
;;;173            ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
000004  6881              LDR      r1,[r0,#8]
000006  f4416100          ORR      r1,r1,#0x800
00000a  6081              STR      r1,[r0,#8]
;;;174        }else{
;;;175            /* LSB alignment */
;;;176            ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
;;;177        }
;;;178    }
00000c  4770              BX       lr
                  |L3.14|
00000e  6881              LDR      r1,[r0,#8]            ;176
000010  f4216100          BIC      r1,r1,#0x800          ;176
000014  6081              STR      r1,[r0,#8]            ;176
000016  4770              BX       lr
;;;179    
                          ENDP


                          AREA ||i.adc_deinit||, CODE, READONLY, ALIGN=2

                  adc_deinit PROC
;;;68     */
;;;69     void adc_deinit(uint32_t adc_periph)
000000  b510              PUSH     {r4,lr}
;;;70     {
;;;71         switch(adc_periph){
000002  4914              LDR      r1,|L4.84|
000004  1840              ADDS     r0,r0,r1
000006  d00f              BEQ      |L4.40|
000008  f5b06f80          CMP      r0,#0x400
00000c  d016              BEQ      |L4.60|
00000e  f5b05fc0          CMP      r0,#0x1800
000012  d11d              BNE      |L4.80|
;;;72         case ADC0:
;;;73             /* reset ADC0 */
;;;74             rcu_periph_reset_enable(RCU_ADC0RST);
;;;75             rcu_periph_reset_disable(RCU_ADC0RST);
;;;76             break;
;;;77         case ADC1:
;;;78             /* reset ADC1 */
;;;79             rcu_periph_reset_enable(RCU_ADC1RST);
;;;80             rcu_periph_reset_disable(RCU_ADC1RST);
;;;81             break;
;;;82     #ifndef GD32F10X_CL
;;;83         case ADC2:
;;;84             rcu_periph_reset_enable(RCU_ADC2RST);
000014  f240340f          MOV      r4,#0x30f
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       rcu_periph_reset_enable
;;;85             rcu_periph_reset_disable(RCU_ADC2RST);
00001e  4620              MOV      r0,r4
000020  e8bd4010          POP      {r4,lr}
000024  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L4.40|
000028  f2403409          MOV      r4,#0x309             ;74
00002c  4620              MOV      r0,r4                 ;74
00002e  f7fffffe          BL       rcu_periph_reset_enable
000032  4620              MOV      r0,r4                 ;75
000034  e8bd4010          POP      {r4,lr}               ;75
000038  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L4.60|
00003c  f240340a          MOV      r4,#0x30a             ;79
000040  4620              MOV      r0,r4                 ;79
000042  f7fffffe          BL       rcu_periph_reset_enable
000046  4620              MOV      r0,r4                 ;80
000048  e8bd4010          POP      {r4,lr}               ;80
00004c  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L4.80|
;;;86             break;
;;;87     #endif /* GD32F10X_CL */
;;;88         default:
;;;89             break;
;;;90         }
;;;91     }
000050  bd10              POP      {r4,pc}
;;;92     
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      0xbffedc00

                          AREA ||i.adc_disable||, CODE, READONLY, ALIGN=1

                  adc_disable PROC
;;;199    */
;;;200    void adc_disable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;201    {
;;;202        /* disable ADC */
;;;203        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ADCON);
000002  f0210101          BIC      r1,r1,#1
000006  6081              STR      r1,[r0,#8]
;;;204    }
000008  4770              BX       lr
;;;205    
                          ENDP


                          AREA ||i.adc_discontinuous_mode_config||, CODE, READONLY, ALIGN=1

                  adc_discontinuous_mode_config PROC
;;;286    */
;;;287    void adc_discontinuous_mode_config(uint32_t adc_periph, uint8_t adc_channel_group, uint8_t length)
000000  6843              LDR      r3,[r0,#4]
;;;288    {
;;;289        /* disable discontinuous mode of regular & inserted channel */
;;;290        ADC_CTL0(adc_periph) &= ~((uint32_t)(ADC_CTL0_DISRC | ADC_CTL0_DISIC));
000002  f42353c0          BIC      r3,r3,#0x1800
000006  6043              STR      r3,[r0,#4]
;;;291        switch(adc_channel_group){
000008  2901              CMP      r1,#1
00000a  d006              BEQ      |L6.26|
00000c  2902              CMP      r1,#2
00000e  d103              BNE      |L6.24|
;;;292        case ADC_REGULAR_CHANNEL:
;;;293            /* config the number of conversions in discontinuous mode */
;;;294            ADC_CTL0(adc_periph) &= ~((uint32_t)ADC_CTL0_DISNUM);
;;;295            ADC_CTL0(adc_periph) |= CTL0_DISNUM(((uint32_t)length - ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
;;;296            /* enable regular channel group discontinuous mode */
;;;297            ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISRC;
;;;298            break;
;;;299        case ADC_INSERTED_CHANNEL:
;;;300            /* enable inserted channel group discontinuous mode */
;;;301            ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISIC;
000010  6841              LDR      r1,[r0,#4]
000012  f4415180          ORR      r1,r1,#0x1000
000016  6041              STR      r1,[r0,#4]
                  |L6.24|
;;;302            break;
;;;303        case ADC_CHANNEL_DISCON_DISABLE:
;;;304            /* disable discontinuous mode of regular & inserted channel */
;;;305        default:
;;;306            break;
;;;307        }
;;;308    }
000018  4770              BX       lr
                  |L6.26|
00001a  6841              LDR      r1,[r0,#4]            ;294
00001c  f4214160          BIC      r1,r1,#0xe000         ;294
000020  6041              STR      r1,[r0,#4]            ;294
000022  6841              LDR      r1,[r0,#4]            ;295
000024  1e52              SUBS     r2,r2,#1              ;295
000026  f64f73ff          MOV      r3,#0xffff            ;295
00002a  ea033242          AND      r2,r3,r2,LSL #13      ;295
00002e  4311              ORRS     r1,r1,r2              ;295
000030  6041              STR      r1,[r0,#4]            ;295
000032  6841              LDR      r1,[r0,#4]            ;297
000034  f4416100          ORR      r1,r1,#0x800          ;297
000038  6041              STR      r1,[r0,#4]            ;297
00003a  4770              BX       lr
;;;309    
                          ENDP


                          AREA ||i.adc_dma_mode_disable||, CODE, READONLY, ALIGN=1

                  adc_dma_mode_disable PROC
;;;267    */
;;;268    void adc_dma_mode_disable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;269    {
;;;270        /* disable DMA request */
;;;271        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DMA);
000002  f4217180          BIC      r1,r1,#0x100
000006  6081              STR      r1,[r0,#8]
;;;272    }
000008  4770              BX       lr
;;;273    
                          ENDP


                          AREA ||i.adc_dma_mode_enable||, CODE, READONLY, ALIGN=1

                  adc_dma_mode_enable PROC
;;;255    */
;;;256    void adc_dma_mode_enable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;257    {
;;;258        /* enable DMA request */
;;;259        ADC_CTL1(adc_periph) |= (uint32_t)(ADC_CTL1_DMA);
000002  f4417180          ORR      r1,r1,#0x100
000006  6081              STR      r1,[r0,#8]
;;;260    }
000008  4770              BX       lr
;;;261    
                          ENDP


                          AREA ||i.adc_enable||, CODE, READONLY, ALIGN=1

                  adc_enable PROC
;;;185    */
;;;186    void adc_enable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;187    {
;;;188        if(RESET == (ADC_CTL1(adc_periph) & ADC_CTL1_ADCON)){
000002  07c9              LSLS     r1,r1,#31
000004  d103              BNE      |L9.14|
;;;189            /* enable ADC */
;;;190            ADC_CTL1(adc_periph) |= (uint32_t)ADC_CTL1_ADCON;
000006  6881              LDR      r1,[r0,#8]
000008  f0410101          ORR      r1,r1,#1
00000c  6081              STR      r1,[r0,#8]
                  |L9.14|
;;;191        }       
;;;192    }
00000e  4770              BX       lr
;;;193    
                          ENDP


                          AREA ||i.adc_external_trigger_config||, CODE, READONLY, ALIGN=1

                  adc_external_trigger_config PROC
;;;563    */
;;;564    void adc_external_trigger_config(uint32_t adc_periph, uint8_t adc_channel_group, ControlStatus newvalue)
000000  2a00              CMP      r2,#0
;;;565    {
000002  d00c              BEQ      |L10.30|
;;;566        if(newvalue){
;;;567            if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
000004  07ca              LSLS     r2,r1,#31
000006  d003              BEQ      |L10.16|
;;;568                /* enable ADC regular channel group external trigger */
;;;569                ADC_CTL1(adc_periph) |= ADC_CTL1_ETERC;
000008  6882              LDR      r2,[r0,#8]
00000a  f4421280          ORR      r2,r2,#0x100000
00000e  6082              STR      r2,[r0,#8]
                  |L10.16|
;;;570            }
;;;571            if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
000010  0789              LSLS     r1,r1,#30
000012  d503              BPL      |L10.28|
;;;572                /* enable ADC inserted channel group external trigger */
;;;573                ADC_CTL1(adc_periph) |= ADC_CTL1_ETEIC;
000014  6881              LDR      r1,[r0,#8]
000016  f4414100          ORR      r1,r1,#0x8000
00001a  6081              STR      r1,[r0,#8]
                  |L10.28|
;;;574            }        
;;;575        }else{
;;;576            if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
;;;577                /* disable ADC regular channel group external trigger */
;;;578                ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
;;;579            }
;;;580            if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
;;;581                /* disable ADC regular channel group external trigger */
;;;582                ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
;;;583            }      
;;;584        }
;;;585    }
00001c  4770              BX       lr
                  |L10.30|
00001e  07ca              LSLS     r2,r1,#31             ;576
000020  d003              BEQ      |L10.42|
000022  6882              LDR      r2,[r0,#8]            ;578
000024  f4221280          BIC      r2,r2,#0x100000       ;578
000028  6082              STR      r2,[r0,#8]            ;578
                  |L10.42|
00002a  0789              LSLS     r1,r1,#30             ;580
00002c  d5f6              BPL      |L10.28|
00002e  6881              LDR      r1,[r0,#8]            ;582
000030  f4214100          BIC      r1,r1,#0x8000         ;582
000034  6081              STR      r1,[r0,#8]            ;582
000036  4770              BX       lr
;;;586    
                          ENDP


                          AREA ||i.adc_external_trigger_source_config||, CODE, READONLY, ALIGN=1

                  adc_external_trigger_source_config PROC
;;;534    */
;;;535    void adc_external_trigger_source_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t external_trigger_source)
000000  2901              CMP      r1,#1
;;;536    {   
000002  d009              BEQ      |L11.24|
;;;537        switch(adc_channel_group){
000004  2902              CMP      r1,#2
000006  d106              BNE      |L11.22|
;;;538        case ADC_REGULAR_CHANNEL:
;;;539            /* configure ADC regular group external trigger source */
;;;540            ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSRC);
;;;541            ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
;;;542            break;
;;;543        case ADC_INSERTED_CHANNEL:
;;;544            /* configure ADC inserted group external trigger source */
;;;545            ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSIC);
000008  6881              LDR      r1,[r0,#8]
00000a  f42141e0          BIC      r1,r1,#0x7000
00000e  6081              STR      r1,[r0,#8]
;;;546            ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
000010  6881              LDR      r1,[r0,#8]
000012  4311              ORRS     r1,r1,r2
000014  6081              STR      r1,[r0,#8]
                  |L11.22|
;;;547            break;
;;;548        default:
;;;549            break;
;;;550        }
;;;551    }
000016  4770              BX       lr
                  |L11.24|
000018  6881              LDR      r1,[r0,#8]            ;540
00001a  f4212160          BIC      r1,r1,#0xe0000        ;540
00001e  6081              STR      r1,[r0,#8]            ;540
000020  6881              LDR      r1,[r0,#8]            ;541
000022  4311              ORRS     r1,r1,r2              ;541
000024  6081              STR      r1,[r0,#8]            ;541
000026  4770              BX       lr
;;;552    
                          ENDP


                          AREA ||i.adc_flag_clear||, CODE, READONLY, ALIGN=1

                  adc_flag_clear PROC
;;;783    */
;;;784    void adc_flag_clear(uint32_t adc_periph, uint32_t adc_flag)
000000  6802              LDR      r2,[r0,#0]
;;;785    {
;;;786        ADC_STAT(adc_periph) &= ~((uint32_t)adc_flag);
000002  438a              BICS     r2,r2,r1
000004  6002              STR      r2,[r0,#0]
;;;787    }
000006  4770              BX       lr
;;;788    
                          ENDP


                          AREA ||i.adc_flag_get||, CODE, READONLY, ALIGN=1

                  adc_flag_get PROC
;;;761    */
;;;762    FlagStatus adc_flag_get(uint32_t adc_periph, uint32_t adc_flag)
000000  4602              MOV      r2,r0
;;;763    {
;;;764        FlagStatus reval = RESET;
000002  2000              MOVS     r0,#0
;;;765        if(ADC_STAT(adc_periph) & adc_flag){
000004  6812              LDR      r2,[r2,#0]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L13.12|
;;;766            reval = SET;
00000a  2001              MOVS     r0,#1
                  |L13.12|
;;;767        }
;;;768        return reval;
;;;769    }
00000c  4770              BX       lr
;;;770    
                          ENDP


                          AREA ||i.adc_inserted_channel_config||, CODE, READONLY, ALIGN=1

                  adc_inserted_channel_config PROC
;;;428    */
;;;429    void adc_inserted_channel_config(uint32_t adc_periph, uint8_t rank, uint8_t adc_channel, uint32_t sample_time)
000000  b530              PUSH     {r4,r5,lr}
;;;430    {
;;;431        uint8_t inserted_length;
;;;432        uint32_t isq,sampt;
;;;433        /* get inserted channel group length */
;;;434        inserted_length = (uint8_t)GET_BITS(ADC_ISQ(adc_periph) , 20U , 21U);
000002  6b84              LDR      r4,[r0,#0x38]
000004  f3c45501          UBFX     r5,r4,#20,#2
;;;435        /* the channel number is written to these bits to select a channel as the nth conversion in the inserted channel group */
;;;436        isq = ADC_ISQ(adc_periph);
000008  6b84              LDR      r4,[r0,#0x38]
;;;437        isq &= ~((uint32_t)(ADC_ISQ_ISQN << (ADC_INSERTED_CHANNEL_SHIFT_LENGTH-(inserted_length-rank)*ADC_INSERTED_CHANNEL_RANK_LENGTH)));
00000a  1b49              SUBS     r1,r1,r5
00000c  eb010181          ADD      r1,r1,r1,LSL #2
000010  310f              ADDS     r1,r1,#0xf
000012  251f              MOVS     r5,#0x1f
000014  408d              LSLS     r5,r5,r1
000016  43ac              BICS     r4,r4,r5
;;;438        isq |= ((uint32_t)adc_channel << (ADC_INSERTED_CHANNEL_SHIFT_LENGTH-(inserted_length-rank)*ADC_INSERTED_CHANNEL_RANK_LENGTH));
000018  fa02f501          LSL      r5,r2,r1
00001c  4325              ORRS     r5,r5,r4
;;;439        ADC_ISQ(adc_periph) = isq;
00001e  6385              STR      r5,[r0,#0x38]
;;;440    
;;;441        /* ADC sampling time config */  
;;;442        if(adc_channel < ADC_CHANNEL_SAMPLE_TEN){
;;;443            /* the inserted group sequence rank is smaller than ten */
;;;444            sampt = ADC_SAMPT1(adc_periph);
;;;445            sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
000020  2507              MOVS     r5,#7
000022  2a0a              CMP      r2,#0xa               ;442
000024  d208              BCS      |L14.56|
000026  6904              LDR      r4,[r0,#0x10]         ;444
000028  eb020142          ADD      r1,r2,r2,LSL #1
00002c  408d              LSLS     r5,r5,r1
00002e  43ac              BICS     r4,r4,r5
;;;446            /* channel sample time set*/
;;;447            sampt |= (uint32_t) sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel);
000030  408b              LSLS     r3,r3,r1
000032  4323              ORRS     r3,r3,r4
;;;448            ADC_SAMPT1(adc_periph) = sampt;
000034  6103              STR      r3,[r0,#0x10]
                  |L14.54|
;;;449        }else if(adc_channel < ADC_CHANNEL_SAMPLE_EIGHTEEN){
;;;450            /* the inserted group sequence rank is smaller than eighteen */
;;;451            sampt = ADC_SAMPT0(adc_periph);
;;;452            sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
;;;453            /* channel sample time set*/
;;;454            sampt |= ((uint32_t)sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN)));
;;;455            ADC_SAMPT0(adc_periph) = sampt;
;;;456        }else{
;;;457        }
;;;458    }
000036  bd30              POP      {r4,r5,pc}
                  |L14.56|
000038  2a12              CMP      r2,#0x12              ;449
00003a  d2fc              BCS      |L14.54|
00003c  68c4              LDR      r4,[r0,#0xc]          ;451
00003e  3a0a              SUBS     r2,r2,#0xa            ;452
000040  eb020142          ADD      r1,r2,r2,LSL #1       ;452
000044  408d              LSLS     r5,r5,r1              ;452
000046  43ac              BICS     r4,r4,r5              ;452
000048  408b              LSLS     r3,r3,r1              ;454
00004a  4323              ORRS     r3,r3,r4              ;454
00004c  60c3              STR      r3,[r0,#0xc]          ;455
00004e  bd30              POP      {r4,r5,pc}
;;;459    
                          ENDP


                          AREA ||i.adc_inserted_channel_offset_config||, CODE, READONLY, ALIGN=1

                  adc_inserted_channel_offset_config PROC
;;;472    */
;;;473    void adc_inserted_channel_offset_config(uint32_t adc_periph, uint8_t inserted_channel, uint16_t offset)
000000  6b83              LDR      r3,[r0,#0x38]
;;;474    {
;;;475        uint8_t inserted_length;
;;;476        uint32_t num = 0U;
;;;477    
;;;478        inserted_length = (uint8_t)GET_BITS(ADC_ISQ(adc_periph) , 20U , 21U);
000002  f3c35301          UBFX     r3,r3,#20,#2
;;;479        num = ((uint32_t)ADC_OFFSET_LENGTH - ((uint32_t)inserted_length - (uint32_t)inserted_channel));
000006  1a59              SUBS     r1,r3,r1
000008  f1c10103          RSB      r1,r1,#3
;;;480        
;;;481        if(num <= ADC_OFFSET_LENGTH){
00000c  2903              CMP      r1,#3
00000e  d804              BHI      |L15.26|
;;;482            /* calculate the offset of the register */
;;;483            num = num * ADC_OFFSET_SHIFT_LENGTH;
000010  0089              LSLS     r1,r1,#2
;;;484            /* config the offset of the selected channels */
;;;485            REG32((adc_periph) + 0x14U + num) = IOFFX_IOFF((uint32_t)offset);
000012  4408              ADD      r0,r0,r1
000014  f3c2020b          UBFX     r2,r2,#0,#12
000018  6142              STR      r2,[r0,#0x14]
                  |L15.26|
;;;486        }  
;;;487    }
00001a  4770              BX       lr
;;;488    
                          ENDP


                          AREA ||i.adc_inserted_data_read||, CODE, READONLY, ALIGN=1

                  adc_inserted_data_read PROC
;;;632    */
;;;633    uint16_t adc_inserted_data_read(uint32_t adc_periph, uint8_t inserted_channel)
000000  2900              CMP      r1,#0
;;;634    {
000002  d008              BEQ      |L16.22|
;;;635        uint32_t idata;
;;;636        /* read the data of the selected channel */
;;;637        switch(inserted_channel){
000004  2901              CMP      r1,#1
000006  d008              BEQ      |L16.26|
000008  2902              CMP      r1,#2
00000a  d008              BEQ      |L16.30|
00000c  2903              CMP      r1,#3
00000e  d008              BEQ      |L16.34|
;;;638        case ADC_INSERTED_CHANNEL_0:
;;;639            /* read the data of channel 0 */
;;;640            idata = ADC_IDATA0(adc_periph);
;;;641            break;
;;;642        case ADC_INSERTED_CHANNEL_1:
;;;643            /* read the data of channel 1 */
;;;644            idata = ADC_IDATA1(adc_periph);
;;;645            break;
;;;646        case ADC_INSERTED_CHANNEL_2:
;;;647            /* read the data of channel 2 */
;;;648            idata = ADC_IDATA2(adc_periph);
;;;649            break;
;;;650        case ADC_INSERTED_CHANNEL_3:
;;;651            /* read the data of channel 3 */
;;;652            idata = ADC_IDATA3(adc_periph);
;;;653            break;
;;;654        default:
;;;655            idata = 0U;
000010  2000              MOVS     r0,#0
                  |L16.18|
;;;656            break;
;;;657        }
;;;658        return (uint16_t)idata;
000012  b280              UXTH     r0,r0
;;;659    }
000014  4770              BX       lr
                  |L16.22|
000016  6bc0              LDR      r0,[r0,#0x3c]         ;640
000018  e7fb              B        |L16.18|
                  |L16.26|
00001a  6c00              LDR      r0,[r0,#0x40]         ;644
00001c  e7f9              B        |L16.18|
                  |L16.30|
00001e  6c40              LDR      r0,[r0,#0x44]         ;648
000020  e7f7              B        |L16.18|
                  |L16.34|
000022  6c80              LDR      r0,[r0,#0x48]         ;652
000024  e7f5              B        |L16.18|
;;;660    
                          ENDP


                          AREA ||i.adc_inserted_software_startconv_flag_get||, CODE, READONLY, ALIGN=1

                  adc_inserted_software_startconv_flag_get PROC
;;;811    */
;;;812    FlagStatus adc_inserted_software_startconv_flag_get(uint32_t adc_periph)
000000  4601              MOV      r1,r0
;;;813    {
;;;814        FlagStatus reval = RESET;
000002  2000              MOVS     r0,#0
;;;815        if((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_SWICST)){
000004  6889              LDR      r1,[r1,#8]
000006  0289              LSLS     r1,r1,#10
000008  d500              BPL      |L17.12|
;;;816            reval = SET;
00000a  2001              MOVS     r0,#1
                  |L17.12|
;;;817        }
;;;818        return reval;
;;;819    }
00000c  4770              BX       lr
;;;820    
                          ENDP


                          AREA ||i.adc_interrupt_disable||, CODE, READONLY, ALIGN=1

                  adc_interrupt_disable PROC
;;;918    */
;;;919    void adc_interrupt_disable(uint32_t adc_periph, uint32_t adc_interrupt)
000000  07ca              LSLS     r2,r1,#31
;;;920    {  
000002  d003              BEQ      |L18.12|
;;;921        /* disable ADC analog watchdog interrupt */
;;;922        if(0U != (adc_interrupt & ADC_INT_WDE)){  
;;;923            ADC_CTL0(adc_periph) &= ~(uint32_t) ADC_CTL0_WDEIE;
000004  6842              LDR      r2,[r0,#4]
000006  f0220240          BIC      r2,r2,#0x40
00000a  6042              STR      r2,[r0,#4]
                  |L18.12|
;;;924        }  
;;;925        /* disable ADC end of group conversion interrupt */
;;;926        if(0U != (adc_interrupt & ADC_INT_EOC)){      
00000c  078a              LSLS     r2,r1,#30
00000e  d503              BPL      |L18.24|
;;;927            ADC_CTL0(adc_periph) &= ~(uint32_t) ADC_CTL0_EOCIE;
000010  6842              LDR      r2,[r0,#4]
000012  f0220220          BIC      r2,r2,#0x20
000016  6042              STR      r2,[r0,#4]
                  |L18.24|
;;;928        }  
;;;929        /* disable ADC end of inserted group conversion interrupt */
;;;930        if(0U != (adc_interrupt & ADC_INT_EOIC)){      
000018  0749              LSLS     r1,r1,#29
00001a  d503              BPL      |L18.36|
;;;931            ADC_CTL0(adc_periph) &= ~(uint32_t) ADC_CTL0_EOICIE;
00001c  6841              LDR      r1,[r0,#4]
00001e  f0210180          BIC      r1,r1,#0x80
000022  6041              STR      r1,[r0,#4]
                  |L18.36|
;;;932        }
;;;933    }
000024  4770              BX       lr
                          ENDP


                          AREA ||i.adc_interrupt_enable||, CODE, READONLY, ALIGN=1

                  adc_interrupt_enable PROC
;;;891    */
;;;892    void adc_interrupt_enable(uint32_t adc_periph, uint32_t adc_interrupt)
000000  07ca              LSLS     r2,r1,#31
;;;893    {
000002  d003              BEQ      |L19.12|
;;;894        /* enable ADC analog watchdog interrupt */
;;;895        if(0U != (adc_interrupt & ADC_INT_WDE)){
;;;896            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_WDEIE;
000004  6842              LDR      r2,[r0,#4]
000006  f0420240          ORR      r2,r2,#0x40
00000a  6042              STR      r2,[r0,#4]
                  |L19.12|
;;;897        }  
;;;898        /* enable ADC end of group conversion interrupt */
;;;899        if(0U != (adc_interrupt & ADC_INT_EOC)){      
00000c  078a              LSLS     r2,r1,#30
00000e  d503              BPL      |L19.24|
;;;900            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_EOCIE;
000010  6842              LDR      r2,[r0,#4]
000012  f0420220          ORR      r2,r2,#0x20
000016  6042              STR      r2,[r0,#4]
                  |L19.24|
;;;901        }  
;;;902        /* enable ADC end of inserted group conversion interrupt */
;;;903        if(0U != (adc_interrupt & ADC_INT_EOIC)){      
000018  0749              LSLS     r1,r1,#29
00001a  d503              BPL      |L19.36|
;;;904            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_EOICIE;
00001c  6841              LDR      r1,[r0,#4]
00001e  f0410180          ORR      r1,r1,#0x80
000022  6041              STR      r1,[r0,#4]
                  |L19.36|
;;;905        }
;;;906    }
000024  4770              BX       lr
;;;907    
                          ENDP


                          AREA ||i.adc_interrupt_flag_clear||, CODE, READONLY, ALIGN=1

                  adc_interrupt_flag_clear PROC
;;;875    */
;;;876    void adc_interrupt_flag_clear(uint32_t adc_periph, uint32_t adc_interrupt)
000000  6802              LDR      r2,[r0,#0]
;;;877    {
;;;878        ADC_STAT(adc_periph) &= ~((uint32_t)adc_interrupt);
000002  438a              BICS     r2,r2,r1
000004  6002              STR      r2,[r0,#0]
;;;879    }
000006  4770              BX       lr
;;;880    
                          ENDP


                          AREA ||i.adc_interrupt_flag_get||, CODE, READONLY, ALIGN=1

                  adc_interrupt_flag_get PROC
;;;831    */
;;;832    FlagStatus adc_interrupt_flag_get(uint32_t adc_periph, uint32_t adc_interrupt)
000000  2200              MOVS     r2,#0
;;;833    {
;;;834        FlagStatus interrupt_flag = RESET;
;;;835        uint32_t state;
;;;836        /* check the interrupt bits */
;;;837        switch(adc_interrupt){
000002  2901              CMP      r1,#1
000004  d004              BEQ      |L21.16|
000006  2902              CMP      r1,#2
000008  d00b              BEQ      |L21.34|
00000a  2904              CMP      r1,#4
00000c  d11a              BNE      |L21.68|
00000e  e011              B        |L21.52|
                  |L21.16|
;;;838        case ADC_INT_FLAG_WDE:
;;;839            /* get the ADC analog watchdog interrupt bits */
;;;840            state = ADC_STAT(adc_periph) & ADC_STAT_WDE;
000010  6801              LDR      r1,[r0,#0]
000012  f0010101          AND      r1,r1,#1
;;;841            if((ADC_CTL0(adc_periph) & ADC_CTL0_WDEIE) && state){
000016  6840              LDR      r0,[r0,#4]
000018  0640              LSLS     r0,r0,#25
00001a  d513              BPL      |L21.68|
00001c  b191              CBZ      r1,|L21.68|
;;;842              interrupt_flag = SET;
00001e  2201              MOVS     r2,#1
000020  e010              B        |L21.68|
                  |L21.34|
;;;843            }
;;;844            break;
;;;845        case ADC_INT_FLAG_EOC:
;;;846            /* get the ADC end of group conversion interrupt bits */
;;;847            state = ADC_STAT(adc_periph) & ADC_STAT_EOC;
000022  6801              LDR      r1,[r0,#0]
000024  f0010102          AND      r1,r1,#2
;;;848              if((ADC_CTL0(adc_periph) & ADC_CTL0_EOCIE) && state){
000028  6840              LDR      r0,[r0,#4]
00002a  0680              LSLS     r0,r0,#26
00002c  d50a              BPL      |L21.68|
00002e  b149              CBZ      r1,|L21.68|
;;;849                interrupt_flag = SET;
000030  2201              MOVS     r2,#1
000032  e007              B        |L21.68|
                  |L21.52|
;;;850              }
;;;851            break;
;;;852        case ADC_INT_FLAG_EOIC:
;;;853            /* get the ADC end of inserted group conversion interrupt bits */
;;;854            state = ADC_STAT(adc_periph) & ADC_STAT_EOIC;
000034  6801              LDR      r1,[r0,#0]
000036  f0010104          AND      r1,r1,#4
;;;855            if((ADC_CTL0(adc_periph) & ADC_CTL0_EOICIE) && state){
00003a  6840              LDR      r0,[r0,#4]
00003c  0600              LSLS     r0,r0,#24
00003e  d501              BPL      |L21.68|
000040  b101              CBZ      r1,|L21.68|
;;;856                interrupt_flag = SET;
000042  2201              MOVS     r2,#1
                  |L21.68|
;;;857            }
;;;858            break;
;;;859        default:
;;;860            break;
;;;861        }
;;;862        return interrupt_flag;
000044  4610              MOV      r0,r2
;;;863    }
000046  4770              BX       lr
;;;864    
                          ENDP


                          AREA ||i.adc_mode_config||, CODE, READONLY, ALIGN=2

                  adc_mode_config PROC
;;;109    */
;;;110    void adc_mode_config(uint32_t mode)
000000  4904              LDR      r1,|L22.20|
;;;111    {
;;;112        ADC_CTL0(ADC0) &= ~(ADC_CTL0_SYNCM);
000002  680a              LDR      r2,[r1,#0]
000004  f4222270          BIC      r2,r2,#0xf0000
000008  600a              STR      r2,[r1,#0]
;;;113        ADC_CTL0(ADC0) |= mode;
00000a  680a              LDR      r2,[r1,#0]
00000c  4302              ORRS     r2,r2,r0
00000e  600a              STR      r2,[r1,#0]
;;;114    }
000010  4770              BX       lr
;;;115    
                          ENDP

000012  0000              DCW      0x0000
                  |L22.20|
                          DCD      0x40012404

                          AREA ||i.adc_regular_channel_config||, CODE, READONLY, ALIGN=1

                  adc_regular_channel_config PROC
;;;360    */
;;;361    void adc_regular_channel_config(uint32_t adc_periph, uint8_t rank, uint8_t adc_channel, uint32_t sample_time)
000000  b530              PUSH     {r4,r5,lr}
;;;362    {
;;;363        uint32_t rsq,sampt;
;;;364        
;;;365        /* ADC regular sequence config */
;;;366        if(rank < ADC_REGULAR_CHANNEL_RANK_SIX){
;;;367            /* the regular group sequence rank is smaller than six */
;;;368            rsq = ADC_RSQ2(adc_periph);
;;;369            rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
000002  241f              MOVS     r4,#0x1f
000004  2906              CMP      r1,#6                 ;366
000006  d209              BCS      |L23.28|
000008  6b45              LDR      r5,[r0,#0x34]         ;368
00000a  eb010181          ADD      r1,r1,r1,LSL #2
00000e  408c              LSLS     r4,r4,r1
000010  43a5              BICS     r5,r5,r4
;;;370            /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
;;;371            rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank));
000012  fa02f401          LSL      r4,r2,r1
000016  432c              ORRS     r4,r4,r5
;;;372            ADC_RSQ2(adc_periph) = rsq;
000018  6344              STR      r4,[r0,#0x34]
00001a  e018              B        |L23.78|
                  |L23.28|
;;;373        }else if(rank < ADC_REGULAR_CHANNEL_RANK_TWELVE){
00001c  290c              CMP      r1,#0xc
00001e  d20a              BCS      |L23.54|
;;;374            /* the regular group sequence rank is smaller than twelve */
;;;375            rsq = ADC_RSQ1(adc_periph);
000020  6b05              LDR      r5,[r0,#0x30]
;;;376            rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
000022  1f89              SUBS     r1,r1,#6
000024  eb010181          ADD      r1,r1,r1,LSL #2
000028  408c              LSLS     r4,r4,r1
00002a  43a5              BICS     r5,r5,r4
;;;377            /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
;;;378            rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX)));
00002c  fa02f401          LSL      r4,r2,r1
000030  432c              ORRS     r4,r4,r5
;;;379            ADC_RSQ1(adc_periph) = rsq;
000032  6304              STR      r4,[r0,#0x30]
000034  e00b              B        |L23.78|
                  |L23.54|
;;;380        }else if(rank < ADC_REGULAR_CHANNEL_RANK_SIXTEEN){
000036  2910              CMP      r1,#0x10
000038  d209              BCS      |L23.78|
;;;381            /* the regular group sequence rank is smaller than sixteen */
;;;382            rsq = ADC_RSQ0(adc_periph);
00003a  6ac5              LDR      r5,[r0,#0x2c]
;;;383            rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
00003c  390c              SUBS     r1,r1,#0xc
00003e  eb010181          ADD      r1,r1,r1,LSL #2
000042  408c              LSLS     r4,r4,r1
000044  43a5              BICS     r5,r5,r4
;;;384            /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
;;;385            rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE)));
000046  fa02f401          LSL      r4,r2,r1
00004a  432c              ORRS     r4,r4,r5
;;;386            ADC_RSQ0(adc_periph) = rsq;
00004c  62c4              STR      r4,[r0,#0x2c]
                  |L23.78|
;;;387        }else{
;;;388        }
;;;389        
;;;390        /* ADC sampling time config */
;;;391        if(adc_channel < ADC_CHANNEL_SAMPLE_TEN){
;;;392            /* the regular group sequence rank is smaller than ten */
;;;393            sampt = ADC_SAMPT1(adc_periph);
;;;394            sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
00004e  2507              MOVS     r5,#7
000050  2a0a              CMP      r2,#0xa               ;391
000052  d208              BCS      |L23.102|
000054  6904              LDR      r4,[r0,#0x10]         ;393
000056  eb020142          ADD      r1,r2,r2,LSL #1
00005a  408d              LSLS     r5,r5,r1
00005c  43ac              BICS     r4,r4,r5
;;;395            /* channel sample time set*/
;;;396            sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel));
00005e  408b              LSLS     r3,r3,r1
000060  4323              ORRS     r3,r3,r4
;;;397            ADC_SAMPT1(adc_periph) = sampt;
000062  6103              STR      r3,[r0,#0x10]
                  |L23.100|
;;;398        }else if(adc_channel < ADC_CHANNEL_SAMPLE_EIGHTEEN){
;;;399            /* the regular group sequence rank is smaller than eighteen */
;;;400            sampt = ADC_SAMPT0(adc_periph);
;;;401            sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
;;;402            /* channel sample time set*/
;;;403            sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN)));
;;;404            ADC_SAMPT0(adc_periph) = sampt;
;;;405        }else{
;;;406        }
;;;407    }
000064  bd30              POP      {r4,r5,pc}
                  |L23.102|
000066  2a12              CMP      r2,#0x12              ;398
000068  d2fc              BCS      |L23.100|
00006a  68c4              LDR      r4,[r0,#0xc]          ;400
00006c  3a0a              SUBS     r2,r2,#0xa            ;401
00006e  eb020142          ADD      r1,r2,r2,LSL #1       ;401
000072  408d              LSLS     r5,r5,r1              ;401
000074  43ac              BICS     r4,r4,r5              ;401
000076  408b              LSLS     r3,r3,r1              ;403
000078  4323              ORRS     r3,r3,r4              ;403
00007a  60c3              STR      r3,[r0,#0xc]          ;404
00007c  bd30              POP      {r4,r5,pc}
;;;408    
                          ENDP


                          AREA ||i.adc_regular_data_read||, CODE, READONLY, ALIGN=1

                  adc_regular_data_read PROC
;;;615    */
;;;616    uint16_t adc_regular_data_read(uint32_t adc_periph)
000000  6cc0              LDR      r0,[r0,#0x4c]
;;;617    {
;;;618        return (uint16_t)(ADC_RDATA(adc_periph));
000002  b280              UXTH     r0,r0
;;;619    }
000004  4770              BX       lr
;;;620    
                          ENDP


                          AREA ||i.adc_regular_software_startconv_flag_get||, CODE, READONLY, ALIGN=1

                  adc_regular_software_startconv_flag_get PROC
;;;795    */
;;;796    FlagStatus adc_regular_software_startconv_flag_get(uint32_t adc_periph)
000000  4601              MOV      r1,r0
;;;797    {
;;;798        FlagStatus reval = RESET;
000002  2000              MOVS     r0,#0
;;;799        if((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_SWRCST)){
000004  6889              LDR      r1,[r1,#8]
000006  0249              LSLS     r1,r1,#9
000008  d500              BPL      |L25.12|
;;;800            reval = SET;
00000a  2001              MOVS     r0,#1
                  |L25.12|
;;;801        }
;;;802        return reval;
;;;803    }
00000c  4770              BX       lr
;;;804    
                          ENDP


                          AREA ||i.adc_software_trigger_enable||, CODE, READONLY, ALIGN=1

                  adc_software_trigger_enable PROC
;;;596    */
;;;597    void adc_software_trigger_enable(uint32_t adc_periph, uint8_t adc_channel_group)
000000  07ca              LSLS     r2,r1,#31
;;;598    {
000002  d003              BEQ      |L26.12|
;;;599        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
;;;600            /* enable ADC regular channel group software trigger */
;;;601            ADC_CTL1(adc_periph) |= ADC_CTL1_SWRCST;
000004  6882              LDR      r2,[r0,#8]
000006  f4420280          ORR      r2,r2,#0x400000
00000a  6082              STR      r2,[r0,#8]
                  |L26.12|
;;;602        }
;;;603        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
00000c  0789              LSLS     r1,r1,#30
00000e  d503              BPL      |L26.24|
;;;604            /* enable ADC inserted channel group software trigger */
;;;605            ADC_CTL1(adc_periph) |= ADC_CTL1_SWICST;
000010  6881              LDR      r1,[r0,#8]
000012  f4411100          ORR      r1,r1,#0x200000
000016  6081              STR      r1,[r0,#8]
                  |L26.24|
;;;606        }
;;;607    }
000018  4770              BX       lr
;;;608    
                          ENDP


                          AREA ||i.adc_special_function_config||, CODE, READONLY, ALIGN=1

                  adc_special_function_config PROC
;;;127    */
;;;128    void adc_special_function_config(uint32_t adc_periph, uint32_t function, ControlStatus newvalue)
000000  2a00              CMP      r2,#0
;;;129    {
000002  d012              BEQ      |L27.42|
;;;130        if(newvalue){
;;;131            if(0U != (function & ADC_SCAN_MODE)){
000004  05ca              LSLS     r2,r1,#23
000006  d503              BPL      |L27.16|
;;;132                /* enable scan mode */
;;;133                ADC_CTL0(adc_periph) |= ADC_SCAN_MODE;
000008  6842              LDR      r2,[r0,#4]
00000a  f4427280          ORR      r2,r2,#0x100
00000e  6042              STR      r2,[r0,#4]
                  |L27.16|
;;;134            }
;;;135            if(0U != (function & ADC_INSERTED_CHANNEL_AUTO)){
000010  054a              LSLS     r2,r1,#21
000012  d503              BPL      |L27.28|
;;;136                /* enable inserted channel group convert automatically */
;;;137                ADC_CTL0(adc_periph) |= ADC_INSERTED_CHANNEL_AUTO;
000014  6842              LDR      r2,[r0,#4]
000016  f4426280          ORR      r2,r2,#0x400
00001a  6042              STR      r2,[r0,#4]
                  |L27.28|
;;;138            } 
;;;139            if(0U != (function & ADC_CONTINUOUS_MODE)){
00001c  0789              LSLS     r1,r1,#30
00001e  d503              BPL      |L27.40|
;;;140                /* enable continuous mode */
;;;141                ADC_CTL1(adc_periph) |= ADC_CONTINUOUS_MODE;
000020  6881              LDR      r1,[r0,#8]
000022  f0410102          ORR      r1,r1,#2
000026  6081              STR      r1,[r0,#8]
                  |L27.40|
;;;142            }        
;;;143        }else{
;;;144            if(0U != (function & ADC_SCAN_MODE)){
;;;145                /* disable scan mode */
;;;146                ADC_CTL0(adc_periph) &= ~ADC_SCAN_MODE;
;;;147            }
;;;148            if(0U != (function & ADC_INSERTED_CHANNEL_AUTO)){
;;;149                /* disable inserted channel group convert automatically */
;;;150                ADC_CTL0(adc_periph) &= ~ADC_INSERTED_CHANNEL_AUTO;
;;;151            } 
;;;152            if(0U != (function & ADC_CONTINUOUS_MODE)){
;;;153                /* disable continuous mode */
;;;154                ADC_CTL1(adc_periph) &= ~ADC_CONTINUOUS_MODE;
;;;155            }       
;;;156        }
;;;157    }
000028  4770              BX       lr
                  |L27.42|
00002a  05ca              LSLS     r2,r1,#23             ;144
00002c  d503              BPL      |L27.54|
00002e  6842              LDR      r2,[r0,#4]            ;146
000030  f4227280          BIC      r2,r2,#0x100          ;146
000034  6042              STR      r2,[r0,#4]            ;146
                  |L27.54|
000036  054a              LSLS     r2,r1,#21             ;148
000038  d503              BPL      |L27.66|
00003a  6842              LDR      r2,[r0,#4]            ;150
00003c  f4226280          BIC      r2,r2,#0x400          ;150
000040  6042              STR      r2,[r0,#4]            ;150
                  |L27.66|
000042  0789              LSLS     r1,r1,#30             ;152
000044  d5f0              BPL      |L27.40|
000046  6881              LDR      r1,[r0,#8]            ;154
000048  f0210102          BIC      r1,r1,#2              ;154
00004c  6081              STR      r1,[r0,#8]            ;154
00004e  4770              BX       lr
;;;158    
                          ENDP


                          AREA ||i.adc_sync_mode_convert_value_read||, CODE, READONLY, ALIGN=2

                  adc_sync_mode_convert_value_read PROC
;;;666    */
;;;667    uint32_t adc_sync_mode_convert_value_read(void)
000000  4801              LDR      r0,|L28.8|
;;;668    {
;;;669        /* return conversion value */
;;;670        return ADC_RDATA(ADC0);
000002  6800              LDR      r0,[r0,#0]
;;;671    }
000004  4770              BX       lr
;;;672    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x4001244c

                          AREA ||i.adc_tempsensor_vrefint_disable||, CODE, READONLY, ALIGN=2

                  adc_tempsensor_vrefint_disable PROC
;;;243    */
;;;244    void adc_tempsensor_vrefint_disable(void)
000000  4802              LDR      r0,|L29.12|
;;;245    {
;;;246        /* disable the temperature sensor and Vrefint channel */
;;;247        ADC_CTL1(ADC0) &= ~ADC_CTL1_TSVREN;
000002  6801              LDR      r1,[r0,#0]
000004  f4210100          BIC      r1,r1,#0x800000
000008  6001              STR      r1,[r0,#0]
;;;248    }
00000a  4770              BX       lr
;;;249    
                          ENDP

                  |L29.12|
                          DCD      0x40012408

                          AREA ||i.adc_tempsensor_vrefint_enable||, CODE, READONLY, ALIGN=2

                  adc_tempsensor_vrefint_enable PROC
;;;231    */
;;;232    void adc_tempsensor_vrefint_enable(void)
000000  4802              LDR      r0,|L30.12|
;;;233    {
;;;234        /* enable the temperature sensor and Vrefint channel */
;;;235        ADC_CTL1(ADC0) |= ADC_CTL1_TSVREN;
000002  6801              LDR      r1,[r0,#0]
000004  f4410100          ORR      r1,r1,#0x800000
000008  6001              STR      r1,[r0,#0]
;;;236    }
00000a  4770              BX       lr
;;;237    
                          ENDP

                  |L30.12|
                          DCD      0x40012408

                          AREA ||i.adc_watchdog_disable||, CODE, READONLY, ALIGN=2

                  adc_watchdog_disable PROC
;;;729    */
;;;730    void adc_watchdog_disable(uint32_t adc_periph)
000000  6841              LDR      r1,[r0,#4]
;;;731    {
;;;732        ADC_CTL0(adc_periph) &= (uint32_t)~(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN | ADC_CTL0_WDSC | ADC_CTL0_WDCHSEL);
000002  4a02              LDR      r2,|L31.12|
000004  4011              ANDS     r1,r1,r2
000006  6041              STR      r1,[r0,#4]
;;;733    }
000008  4770              BX       lr
;;;734    
                          ENDP

00000a  0000              DCW      0x0000
                  |L31.12|
                          DCD      0xff3ffde0

                          AREA ||i.adc_watchdog_group_channel_enable||, CODE, READONLY, ALIGN=2

                  adc_watchdog_group_channel_enable PROC
;;;701    */
;;;702    void adc_watchdog_group_channel_enable(uint32_t adc_periph, uint8_t adc_channel_group)
000000  6842              LDR      r2,[r0,#4]
;;;703    {
;;;704        ADC_CTL0(adc_periph) &= (uint32_t)~(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN | ADC_CTL0_WDSC);
000002  4b0c              LDR      r3,|L32.52|
000004  401a              ANDS     r2,r2,r3
000006  6042              STR      r2,[r0,#4]
;;;705        /* select the group */
;;;706        switch(adc_channel_group){
000008  2901              CMP      r1,#1
00000a  d008              BEQ      |L32.30|
00000c  2902              CMP      r1,#2
00000e  d00b              BEQ      |L32.40|
000010  2903              CMP      r1,#3
000012  d103              BNE      |L32.28|
;;;707        case ADC_REGULAR_CHANNEL:
;;;708            /* regular channel analog watchdog enable */
;;;709            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_RWDEN;
;;;710            break;
;;;711        case ADC_INSERTED_CHANNEL:
;;;712            /* inserted channel analog watchdog enable */
;;;713            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_IWDEN;
;;;714            break;
;;;715        case ADC_REGULAR_INSERTED_CHANNEL:
;;;716            /* regular and inserted channel analog watchdog enable */
;;;717            ADC_CTL0(adc_periph) |= (uint32_t)(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN);
000014  6841              LDR      r1,[r0,#4]
000016  f4410140          ORR      r1,r1,#0xc00000
00001a  6041              STR      r1,[r0,#4]
                  |L32.28|
;;;718            break;
;;;719        default:
;;;720            break;
;;;721        }
;;;722    }
00001c  4770              BX       lr
                  |L32.30|
00001e  6841              LDR      r1,[r0,#4]            ;709
000020  f4410100          ORR      r1,r1,#0x800000       ;709
000024  6041              STR      r1,[r0,#4]            ;709
000026  4770              BX       lr
                  |L32.40|
000028  6841              LDR      r1,[r0,#4]            ;713
00002a  f4410180          ORR      r1,r1,#0x400000       ;713
00002e  6041              STR      r1,[r0,#4]            ;713
000030  4770              BX       lr
;;;723    
                          ENDP

000032  0000              DCW      0x0000
                  |L32.52|
                          DCD      0xff3ffdff

                          AREA ||i.adc_watchdog_single_channel_enable||, CODE, READONLY, ALIGN=2

                  adc_watchdog_single_channel_enable PROC
;;;682    */
;;;683    void adc_watchdog_single_channel_enable(uint32_t adc_periph, uint8_t adc_channel)
000000  6842              LDR      r2,[r0,#4]
;;;684    {
;;;685        ADC_CTL0(adc_periph) &= (uint32_t)~(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN | ADC_CTL0_WDSC | ADC_CTL0_WDCHSEL);
000002  4b05              LDR      r3,|L33.24|
000004  401a              ANDS     r2,r2,r3
000006  6042              STR      r2,[r0,#4]
;;;686        /* analog watchdog channel select */
;;;687        ADC_CTL0(adc_periph) |= (uint32_t)adc_channel;
000008  6842              LDR      r2,[r0,#4]
00000a  430a              ORRS     r2,r2,r1
00000c  6042              STR      r2,[r0,#4]
;;;688        ADC_CTL0(adc_periph) |= (uint32_t)(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN | ADC_CTL0_WDSC);
00000e  6841              LDR      r1,[r0,#4]
000010  4a02              LDR      r2,|L33.28|
000012  4311              ORRS     r1,r1,r2
000014  6041              STR      r1,[r0,#4]
;;;689    }
000016  4770              BX       lr
;;;690    
                          ENDP

                  |L33.24|
                          DCD      0xff3ffde0
                  |L33.28|
                          DCD      0x00c00200

                          AREA ||i.adc_watchdog_threshold_config||, CODE, READONLY, ALIGN=1

                  adc_watchdog_threshold_config PROC
;;;742    */
;;;743    void adc_watchdog_threshold_config(uint32_t adc_periph, uint16_t low_threshold, uint16_t high_threshold)
000000  f3c1010b          UBFX     r1,r1,#0,#12
;;;744    {
;;;745        ADC_WDLT(adc_periph) = (uint32_t)WDLT_WDLT(low_threshold);
000004  6281              STR      r1,[r0,#0x28]
;;;746        ADC_WDHT(adc_periph) = (uint32_t)WDHT_WDHT(high_threshold);
000006  f3c2010b          UBFX     r1,r2,#0,#12
00000a  6241              STR      r1,[r0,#0x24]
;;;747    }
00000c  4770              BX       lr
;;;748    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_adc_c_725e678f____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_adc_c_725e678f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_adc_c_725e678f____REVSH|
#line 128
|__asm___14_gd32f10x_adc_c_725e678f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
