; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\bleprotocol.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\bleprotocol.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -IC:\Users\Administrator\AppData\Local\Arm\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\bleprotocol.crf User\BleProtocol.c]
                          THUMB

                          AREA ||i.BLE_PROTOCOL_CheckSUM||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_CheckSUM PROC
;;;548    // 对传入的命令帧进行校验，返回校验结果
;;;549    BOOL BLE_PROTOCOL_CheckSUM(BLE_PROTOCOL_RX_CMD_FRAME* pCmdFrame)
000000  b530              PUSH     {r4,r5,lr}
;;;550    {
;;;551    	uint8 cc = 0;
000002  2200              MOVS     r2,#0
;;;552    	uint16 i = 0;
000004  2100              MOVS     r1,#0
;;;553    	
;;;554    	if(NULL == pCmdFrame)
000006  2800              CMP      r0,#0
000008  d003              BEQ      |L1.18|
;;;555    	{
;;;556    		return FALSE;
;;;557    	}
;;;558    
;;;559    	// 从命令头开始，到校验码之前的一个字节，依次进行异或运算
;;;560    	for(i=0; i<pCmdFrame->length-1; i++)
00000a  f8b05098          LDRH     r5,[r0,#0x98]
00000e  1e6b              SUBS     r3,r5,#1
000010  e006              B        |L1.32|
                  |L1.18|
000012  2000              MOVS     r0,#0                 ;556
;;;561    	{
;;;562    		cc ^= pCmdFrame->buff[i];
;;;563    	}
;;;564    
;;;565    	cc = ~cc;
;;;566    	
;;;567    	// 判断计算得到的校验码与命令帧中的校验码是否相同
;;;568    	if(pCmdFrame->buff[pCmdFrame->length-1] != cc)
;;;569    	{
;;;570    		return FALSE;
;;;571    	}
;;;572    	
;;;573    	return TRUE;
;;;574    }
000014  bd30              POP      {r4,r5,pc}
                  |L1.22|
000016  1844              ADDS     r4,r0,r1              ;562
000018  78a4              LDRB     r4,[r4,#2]            ;562
00001a  4062              EORS     r2,r2,r4              ;562
00001c  1c49              ADDS     r1,r1,#1              ;560
00001e  b289              UXTH     r1,r1                 ;560
                  |L1.32|
000020  428b              CMP      r3,r1                 ;560
000022  dcf8              BGT      |L1.22|
000024  43d1              MVNS     r1,r2                 ;565
000026  b2c9              UXTB     r1,r1                 ;565
000028  1c40              ADDS     r0,r0,#1              ;568
00002a  5c28              LDRB     r0,[r5,r0]            ;568
00002c  4288              CMP      r0,r1                 ;568
00002e  d001              BEQ      |L1.52|
000030  2000              MOVS     r0,#0                 ;570
000032  bd30              POP      {r4,r5,pc}
                  |L1.52|
000034  2001              MOVS     r0,#1                 ;573
000036  bd30              POP      {r4,r5,pc}
;;;575    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_CmdFrameProcess||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_CmdFrameProcess PROC
;;;576    // BLE命令帧缓冲区处理
;;;577    void BLE_PROTOCOL_CmdFrameProcess(BLE_PROTOCOL_CB* pCB)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;578    {
000004  4605              MOV      r5,r0
;;;579    	static uint32 recDataNum = 0;
;;;580    	static uint8 recCrc8 = 0;
;;;581    	BLE_PROTOCOL_CMD cmd = BLE_CMD_MAX;
;;;582    	BLE_PROTOCOL_RX_CMD_FRAME* pCmdFrame = NULL;
;;;583    	uint32 temp = 0;
;;;584    	uint8 tempCrc8 = 0;
;;;585    	BOOL errStatus;
;;;586    	BOOL writeRes;
;;;587    
;;;588    	// 参数合法性检验
;;;589    	if(NULL == pCB)
000006  2d00              CMP      r5,#0
000008  d017              BEQ      |L2.58|
;;;590    	{
;;;591    		return;
;;;592    	}
;;;593    
;;;594    	// 命令帧缓冲区为空，退出
;;;595    	if(pCB->rx.head == pCB->rx.end)
00000a  f8b503d0          LDRH     r0,[r5,#0x3d0]
00000e  f8b513d2          LDRH     r1,[r5,#0x3d2]
000012  4288              CMP      r0,r1
000014  d011              BEQ      |L2.58|
;;;596    	{
;;;597    		return;
;;;598    	}
;;;599    
;;;600    	// 获取当前要处理的命令帧指针
;;;601    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.head];
000016  214d              MOVS     r1,#0x4d
000018  4341              MULS     r1,r0,r1
00001a  eb050441          ADD      r4,r5,r1,LSL #1
00001e  34ce              ADDS     r4,r4,#0xce
;;;602    	
;;;603    	// 命令头非法，退出
;;;604    	if(BLE_PROTOCOL_CMD_HEAD != pCmdFrame->buff[BLE_PROTOCOL_CMD_HEAD_INDEX])
;;;605    	{
;;;606    		// 删除命令帧
;;;607    		pCB->rx.head ++;
;;;608    		pCB->rx.head %= BLE_PROTOCOL_RX_QUEUE_SIZE;
000020  f04f0905          MOV      r9,#5
000024  78a1              LDRB     r1,[r4,#2]            ;604
000026  2955              CMP      r1,#0x55              ;604
000028  d009              BEQ      |L2.62|
00002a  1c40              ADDS     r0,r0,#1              ;607
00002c  b280              UXTH     r0,r0                 ;607
00002e  fbb0f1f9          UDIV     r1,r0,r9
000032  fb090011          MLS      r0,r9,r1,r0
000036  f8a503d0          STRH     r0,[r5,#0x3d0]
                  |L2.58|
;;;609    		return;
;;;610    	}
;;;611    
;;;612    	// 命令头合法，则提取命令
;;;613    	cmd = (BLE_PROTOCOL_CMD)pCmdFrame->buff[BLE_PROTOCOL_CMD_CMD_INDEX];
;;;614    	
;;;615    	// 执行命令帧
;;;616    	switch (cmd)
;;;617    	{
;;;618    		// 心跳命令
;;;619    		case BLE_CMD_HEARTBEAT_DOWN:
;;;620    			// BOOT心跳回应:0x00
;;;621    			BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_HEARTBEAT_UP,0x00);
;;;622    			break;
;;;623    
;;;624    		// 权鉴命令
;;;625    		case BLE_CMD_AUTHENTICATE_DOWN:
;;;626    			if ((Authentication_Table[pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX] - 1][pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX]] \
;;;627    			== pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX]) && \
;;;628    					(Authentication_Table[pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX] - 1][pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX]] \
;;;629    			== pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA6_INDEX]) && \
;;;630    					(Authentication_Table[pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA7_INDEX] - 1][pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA8_INDEX]] \
;;;631    			== pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA9_INDEX]))
;;;632    			{
;;;633    				// 权鉴判断成功
;;;634    				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_AUTHENTICATE_UP,0x00);
;;;635    			}
;;;636    			else
;;;637    			{
;;;638    				// 权鉴判断失败
;;;639    				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_AUTHENTICATE_UP,0x01);
;;;640    				// 断开蓝牙连接处理
;;;641    				//BLE_MODULE_Reset(UINT32_NULL);
;;;642    			}
;;;643    			TIMER_KillTask(TIMER_ID_BLE_CONNECT_VERIFICATE);
;;;644    			break;
;;;645    
;;;646    		// 询问固件版本命令
;;;647    		case BLE_CMD_FIRMVERSION_DOWN:
;;;648    			BLE_PROTOCOL_SendCmdFirmVersionAck();
;;;649    			break;
;;;650    
;;;651    		// 蓝牙授时命令
;;;652    		case BLE_CMD_SETTIMER_DOWN:
;;;653    			BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_SETTIMER_UP, 0x00);
;;;654    			break;
;;;655    
;;;656    		// 错误代码接收应答命令
;;;657    		case BLE_CMD_ERROR_DOWN:
;;;658    			break;
;;;659    
;;;660    		// 复位命令
;;;661    		case BLE_CMD_RESET_DOWN:
;;;662    			// 软件复位处理
;;;663    			BLE_PROTOCOL_SendCmdAck(BLE_CMD_RESET_UP);
;;;664    			break;
;;;665    
;;;666    		// 固件升级命令
;;;667    		case BLE_CMD_FIRMUPDATE_DOWN:
;;;668    			// 用来判断数据包是否合法
;;;669    			temp  = pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA2_INDEX];
;;;670    			temp <<= 8;
;;;671    			temp += pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA3_INDEX];
;;;672    			temp <<= 8;
;;;673    			temp += pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA4_INDEX];
;;;674    			temp <<= 8;
;;;675    			temp += pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA5_INDEX];
;;;676    			if(temp > IAP_GD32_APP2_SIZE)
;;;677    			{
;;;678    				// 超过存储空间返回应答
;;;679    				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_FIRMUPDATE_UP, 0x00);
;;;680    			}
;;;681    			else
;;;682    			{
;;;683    				// 擦除之前的应用APP
;;;684    				IAP_EraseAPP2Area();
;;;685    				
;;;686    				// 擦除完成之后需要读取出来判断
;;;687    				errStatus = IAP_CheckApp2FlashIsBlank();
;;;688    				if(!errStatus)
;;;689    				{
;;;690    					BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_FIRMUPDATE_UP, 0x00);
;;;691    					break;
;;;692    				}
;;;693    				// 应该接收数据长度
;;;694    				recDataNum = temp;
;;;695    				recCrc8 = pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA1_INDEX];
;;;696    				// 正常应答
;;;697    				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_FIRMUPDATE_UP, 0x01);
;;;698    			}
;;;699    			//LCD_PrintString(50, 160, "Please BLE Update...", LCD_COLOR_BLACK, LCD_OPERATOR_MODE_DRAW);
;;;700    			LCD_PrintString(10, 50, "BLE Updating...", LCD_COLOR_WHITE, LCD_OPERATOR_MODE_DRAW);
;;;701    			
;;;702    			// 动态显示
;;;703    			TIMER_AddTask(TIMER_ID_BLE_UPDATE_STATE,
;;;704    							1000,
;;;705    							LCD_DotDynamicShow,
;;;706    							UINT32_NULL,
;;;707    							TIMER_LOOP_FOREVER,
;;;708    							ACTION_MODE_ADD_TO_QUEUE);
;;;709    			break;
;;;710    
;;;711    		// 数据包写入命令
;;;712    		case BLE_CMD_DATAIN_DOWN:
;;;713    			// 如果数据长度不合法
;;;714    			if (4 > pCmdFrame->buff[IAP_CTRL_UART_CMD_LENGTH_INDEX])
;;;715    			{
;;;716    				break;
;;;717    			}
;;;718    
;;;719    			// 数据包编号(固定数据长度)
;;;720    			temp  = pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA1_INDEX];
;;;721    			temp <<= 8;
;;;722    			temp += pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA2_INDEX];
;;;723    			temp <<= 8;
;;;724    			temp += pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA3_INDEX];
;;;725    			temp <<= 8;
;;;726    			temp += pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA4_INDEX];
;;;727    			writeRes = IAP_BleWriteAppBin(IAP_FLASH_APP2_ADDR + temp * 128, &pCmdFrame->buff[IAP_CTRL_UART_CMD_DATA5_INDEX], 128);
;;;728    			if(writeRes)
;;;729    			{
;;;730    				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_DATAIN_UP, 0x00);
;;;731    			}
;;;732    			else
;;;733    			{
;;;734    				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_DATAIN_UP, 0x01);
;;;735    			}
;;;736    			break;
;;;737    
;;;738    		// 数据包写入完成命令
;;;739    		case BLE_CMD_DATAIN_FINISH_DOWN:
;;;740    			// 数据包校验
;;;741    			tempCrc8 = IAP_FlashReadForCrc8(recDataNum);
;;;742    		
;;;743    			TIMER_KillTask(TIMER_ID_BLE_UPDATE_STATE);
;;;744    			LCD_PrintString(10, 50, "BLE Updating...    ", LCD_COLOR_BLACK, LCD_OPERATOR_MODE_DRAW);
;;;745    			if(recCrc8 == tempCrc8)
;;;746    			{
;;;747    				// 清除蓝牙升级标志和屏蔽蓝牙模块初始化标志
;;;748    				SPI_FLASH_WriteHalfWord(SPI_FLASH_BLE_UPDATA_FLAG_ADDEESS,0xFFFF);
;;;749    
;;;750    				// 数据包校验成功之后，跳转应用程序运行
;;;751    				LCD_PrintString(10, 50, "BLE Update Success!", LCD_COLOR_WHITE, LCD_OPERATOR_MODE_DRAW);
;;;752    				
;;;753    				temp = IAP_FLASH_ADRESS_APP2_OFFSET;
;;;754    				
;;;755    				TIMER_AddTask(TIMER_ID_ECO_JUMP,
;;;756    								2000,
;;;757    								IAP_JumpToAppFun,
;;;758    								temp,
;;;759    								1,
;;;760    								ACTION_MODE_ADD_TO_QUEUE);
;;;761    				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_DATAIN_FINISH_UP, 0x01);
;;;762    			}
;;;763    			else
;;;764    			{
;;;765    				// 数据包校验不成功，则一直处于boot中，等待再次升级程序
;;;766    				LCD_PrintString(10, 50, "BLE Update failed!", LCD_COLOR_WHITE, LCD_OPERATOR_MODE_DRAW);
;;;767    				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_DATAIN_FINISH_UP, 0x00);
;;;768    			}
;;;769    			break;
;;;770    
;;;771    		// 获取仪表状态命令
;;;772    		case BLE_CMD_GETSTATUS_DOWN:
;;;773    			break;
;;;774    
;;;775    		// 控制仪表命令
;;;776    		case BLE_CMD_CONTROL_DOWN:
;;;777    			break;
;;;778    
;;;779    		// 获取实时运动数据命令
;;;780    		case BLE_CMD_GETDATA_RUNNING_DOWN:
;;;781    			break;
;;;782    
;;;783    		// 启动同步历史运动数据应答命令
;;;784    		case BLE_CMD_START_HISTORICAL_DATA_DOWN:
;;;785    			break;
;;;786    
;;;787    		// 上报历史运动数据应答
;;;788    		case BLE_CMD_REPORT_HISTORICAL_DATA_DOWN:
;;;789    			break;
;;;790    			
;;;791    		default:
;;;792    			break;
;;;793    	}
;;;794    
;;;795    	// 启动UART总线通讯超时判断
;;;796    	BLE_PROTOCOL_StartTimeoutCheckTask();
;;;797    	
;;;798    	// 删除命令帧
;;;799    	pCB->rx.head ++;
;;;800    	pCB->rx.head %= BLE_PROTOCOL_RX_QUEUE_SIZE;
;;;801    }
00003a  e8bd9ffc          POP      {r2-r12,pc}
                  |L2.62|
00003e  78e1              LDRB     r1,[r4,#3]            ;613
000040  4e7a              LDR      r6,|L2.556|
000042  2700              MOVS     r7,#0                 ;700
000044  f04f0801          MOV      r8,#1                 ;621
000048  f64f7aff          MOV      r10,#0xffff           ;700
00004c  2924              CMP      r1,#0x24              ;616
00004e  d07d              BEQ      |L2.332|
000050  dc0f              BGT      |L2.114|
000052  2906              CMP      r1,#6                 ;616
000054  d043              BEQ      |L2.222|
000056  dc05              BGT      |L2.100|
000058  b181              CBZ      r1,|L2.124|
00005a  2902              CMP      r1,#2                 ;616
00005c  d013              BEQ      |L2.134|
00005e  2904              CMP      r1,#4                 ;616
                  |L2.96|
000060  d110              BNE      |L2.132|
000062  e039              B        |L2.216|
                  |L2.100|
000064  2909              CMP      r1,#9                 ;616
000066  d00d              BEQ      |L2.132|
000068  2920              CMP      r1,#0x20              ;616
00006a  d03d              BEQ      |L2.232|
00006c  2922              CMP      r1,#0x22              ;616
00006e  d1f7              BNE      |L2.96|
000070  e03e              B        |L2.240|
                  |L2.114|
000072  2960              CMP      r1,#0x60              ;616
000074  da06              BGE      |L2.132|
000076  2926              CMP      r1,#0x26              ;616
000078  d1f2              BNE      |L2.96|
00007a  e092              B        |L2.418|
                  |L2.124|
00007c  2100              MOVS     r1,#0                 ;621
00007e  2001              MOVS     r0,#1                 ;621
000080  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
                  |L2.132|
000084  e0c5              B        |L2.530|
                  |L2.134|
000086  7961              LDRB     r1,[r4,#5]            ;626
000088  4869              LDR      r0,|L2.560|
00008a  79a2              LDRB     r2,[r4,#6]            ;626
00008c  1e49              SUBS     r1,r1,#1              ;626
00008e  eb002101          ADD      r1,r0,r1,LSL #8       ;626
000092  5c51              LDRB     r1,[r2,r1]            ;626
000094  79e2              LDRB     r2,[r4,#7]            ;626
000096  4291              CMP      r1,r2                 ;626
000098  d116              BNE      |L2.200|
00009a  7a21              LDRB     r1,[r4,#8]            ;628
00009c  7a62              LDRB     r2,[r4,#9]            ;628
00009e  1e49              SUBS     r1,r1,#1              ;628
0000a0  eb002101          ADD      r1,r0,r1,LSL #8       ;628
0000a4  5c51              LDRB     r1,[r2,r1]            ;628
0000a6  7aa2              LDRB     r2,[r4,#0xa]          ;628
0000a8  4291              CMP      r1,r2                 ;628
0000aa  d10d              BNE      |L2.200|
0000ac  7ae1              LDRB     r1,[r4,#0xb]          ;630
0000ae  7b22              LDRB     r2,[r4,#0xc]          ;630
0000b0  1e49              SUBS     r1,r1,#1              ;630
0000b2  eb002001          ADD      r0,r0,r1,LSL #8       ;630
0000b6  7b61              LDRB     r1,[r4,#0xd]          ;630
0000b8  5c10              LDRB     r0,[r2,r0]            ;630
0000ba  4288              CMP      r0,r1                 ;630
0000bc  d104              BNE      |L2.200|
0000be  2100              MOVS     r1,#0                 ;634
0000c0  2003              MOVS     r0,#3                 ;634
0000c2  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
0000c6  e003              B        |L2.208|
                  |L2.200|
0000c8  2101              MOVS     r1,#1                 ;639
0000ca  2003              MOVS     r0,#3                 ;639
0000cc  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
                  |L2.208|
0000d0  200b              MOVS     r0,#0xb               ;643
0000d2  f7fffffe          BL       TIMER_KillTask
0000d6  e09c              B        |L2.530|
                  |L2.216|
0000d8  f7fffffe          BL       BLE_PROTOCOL_SendCmdFirmVersionAck
0000dc  e099              B        |L2.530|
                  |L2.222|
0000de  2100              MOVS     r1,#0                 ;653
0000e0  2007              MOVS     r0,#7                 ;653
0000e2  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
0000e6  e094              B        |L2.530|
                  |L2.232|
0000e8  2021              MOVS     r0,#0x21              ;663
0000ea  f7fffffe          BL       BLE_PROTOCOL_SendCmdAck
0000ee  e090              B        |L2.530|
                  |L2.240|
0000f0  79a0              LDRB     r0,[r4,#6]            ;669
0000f2  0200              LSLS     r0,r0,#8              ;670
0000f4  79e1              LDRB     r1,[r4,#7]            ;671
0000f6  4408              ADD      r0,r0,r1              ;671
0000f8  0200              LSLS     r0,r0,#8              ;672
0000fa  7a21              LDRB     r1,[r4,#8]            ;673
0000fc  4408              ADD      r0,r0,r1              ;673
0000fe  0200              LSLS     r0,r0,#8              ;674
000100  7a61              LDRB     r1,[r4,#9]            ;675
000102  eb010b00          ADD      r11,r1,r0             ;675
000106  f5bb3f40          CMP      r11,#0x30000          ;676
00010a  d904              BLS      |L2.278|
00010c  2100              MOVS     r1,#0                 ;679
00010e  2023              MOVS     r0,#0x23              ;679
000110  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000114  e00c              B        |L2.304|
                  |L2.278|
000116  f7fffffe          BL       IAP_EraseAPP2Area
00011a  f7fffffe          BL       IAP_CheckApp2FlashIsBlank
00011e  b1d8              CBZ      r0,|L2.344|
000120  f8c6b004          STR      r11,[r6,#4]           ;694  ; recDataNum
000124  7960              LDRB     r0,[r4,#5]            ;695
000126  7030              STRB     r0,[r6,#0]            ;695
000128  2101              MOVS     r1,#1                 ;697
00012a  2023              MOVS     r0,#0x23              ;697
00012c  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
                  |L2.304|
000130  4653              MOV      r3,r10                ;700
000132  a240              ADR      r2,|L2.564|
000134  2132              MOVS     r1,#0x32              ;700
000136  200a              MOVS     r0,#0xa               ;700
000138  9700              STR      r7,[sp,#0]            ;700
00013a  f7fffffe          BL       LCD_PrintString
00013e  f04f33ff          MOV      r3,#0xffffffff        ;703
000142  4a40              LDR      r2,|L2.580|
000144  f44f717a          MOV      r1,#0x3e8             ;703
000148  200c              MOVS     r0,#0xc               ;703
00014a  e000              B        |L2.334|
                  |L2.332|
00014c  e009              B        |L2.354|
                  |L2.334|
00014e  e9cd3800          STRD     r3,r8,[sp,#0]         ;703
000152  f7fffffe          BL       TIMER_AddTask
000156  e05c              B        |L2.530|
                  |L2.344|
000158  2100              MOVS     r1,#0                 ;690
00015a  2023              MOVS     r0,#0x23              ;690
00015c  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000160  e057              B        |L2.530|
                  |L2.354|
000162  7920              LDRB     r0,[r4,#4]            ;714
000164  2804              CMP      r0,#4                 ;714
000166  d354              BCC      |L2.530|
000168  7960              LDRB     r0,[r4,#5]            ;720
00016a  0200              LSLS     r0,r0,#8              ;721
00016c  79a1              LDRB     r1,[r4,#6]            ;722
00016e  4408              ADD      r0,r0,r1              ;722
000170  0200              LSLS     r0,r0,#8              ;723
000172  79e1              LDRB     r1,[r4,#7]            ;724
000174  4408              ADD      r0,r0,r1              ;724
000176  0200              LSLS     r0,r0,#8              ;725
000178  7a21              LDRB     r1,[r4,#8]            ;726
00017a  4408              ADD      r0,r0,r1              ;726
00017c  4932              LDR      r1,|L2.584|
00017e  2280              MOVS     r2,#0x80              ;727
000180  eb0110c0          ADD      r0,r1,r0,LSL #7       ;727
000184  f1040109          ADD      r1,r4,#9              ;727
000188  f7fffffe          BL       IAP_BleWriteAppBin
00018c  b120              CBZ      r0,|L2.408|
00018e  2100              MOVS     r1,#0                 ;730
000190  2025              MOVS     r0,#0x25              ;730
000192  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000196  e03c              B        |L2.530|
                  |L2.408|
000198  2101              MOVS     r1,#1                 ;734
00019a  2025              MOVS     r0,#0x25              ;734
00019c  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
0001a0  e037              B        |L2.530|
                  |L2.418|
0001a2  6870              LDR      r0,[r6,#4]            ;741  ; recDataNum
0001a4  f7fffffe          BL       IAP_FlashReadForCrc8
0001a8  4604              MOV      r4,r0                 ;741
0001aa  200c              MOVS     r0,#0xc               ;743
0001ac  f7fffffe          BL       TIMER_KillTask
0001b0  2300              MOVS     r3,#0                 ;744
0001b2  a226              ADR      r2,|L2.588|
0001b4  2132              MOVS     r1,#0x32              ;744
0001b6  200a              MOVS     r0,#0xa               ;744
0001b8  9700              STR      r7,[sp,#0]            ;744
0001ba  f7fffffe          BL       LCD_PrintString
0001be  7830              LDRB     r0,[r6,#0]            ;745  ; recCrc8
0001c0  42a0              CMP      r0,r4                 ;745
0001c2  d11b              BNE      |L2.508|
0001c4  4651              MOV      r1,r10                ;748
0001c6  4826              LDR      r0,|L2.608|
0001c8  f7fffffe          BL       SPI_FLASH_WriteHalfWord
0001cc  4653              MOV      r3,r10                ;751
0001ce  a225              ADR      r2,|L2.612|
0001d0  2132              MOVS     r1,#0x32              ;751
0001d2  200a              MOVS     r0,#0xa               ;751
0001d4  9700              STR      r7,[sp,#0]            ;751
0001d6  f7fffffe          BL       LCD_PrintString
0001da  f44f3380          MOV      r3,#0x10000           ;753
0001de  f8cd8000          STR      r8,[sp,#0]            ;755
0001e2  4a25              LDR      r2,|L2.632|
0001e4  f44f61fa          MOV      r1,#0x7d0             ;755
0001e8  2006              MOVS     r0,#6                 ;755
0001ea  f8cd8004          STR      r8,[sp,#4]            ;755
0001ee  f7fffffe          BL       TIMER_AddTask
0001f2  2101              MOVS     r1,#1                 ;761
0001f4  2027              MOVS     r0,#0x27              ;761
0001f6  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
0001fa  e00a              B        |L2.530|
                  |L2.508|
0001fc  4653              MOV      r3,r10                ;766
0001fe  a21f              ADR      r2,|L2.636|
000200  2132              MOVS     r1,#0x32              ;766
000202  200a              MOVS     r0,#0xa               ;766
000204  9700              STR      r7,[sp,#0]            ;766
000206  f7fffffe          BL       LCD_PrintString
00020a  2100              MOVS     r1,#0                 ;767
00020c  2027              MOVS     r0,#0x27              ;767
00020e  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
                  |L2.530|
000212  f7fffffe          BL       BLE_PROTOCOL_StartTimeoutCheckTask
000216  f8b503d0          LDRH     r0,[r5,#0x3d0]        ;799
00021a  1c40              ADDS     r0,r0,#1              ;799
00021c  b280              UXTH     r0,r0                 ;799
00021e  fbb0f1f9          UDIV     r1,r0,r9              ;800
000222  fb090011          MLS      r0,r9,r1,r0           ;800
000226  f8a503d0          STRH     r0,[r5,#0x3d0]        ;800
00022a  e706              B        |L2.58|
;;;802    
                          ENDP

                  |L2.556|
                          DCD      ||.data||
                  |L2.560|
                          DCD      ||.constdata||
                  |L2.564|
000234  424c4520          DCB      "BLE Updating...",0
000238  55706461
00023c  74696e67
000240  2e2e2e00
                  |L2.580|
                          DCD      LCD_DotDynamicShow
                  |L2.584|
                          DCD      0x08010000
                  |L2.588|
00024c  424c4520          DCB      "BLE Updating...    ",0
000250  55706461
000254  74696e67
000258  2e2e2e20
00025c  20202000
                  |L2.608|
                          DCD      0x003ff080
                  |L2.612|
000264  424c4520          DCB      "BLE Update Success!",0
000268  55706461
00026c  74652053
000270  75636365
000274  73732100
                  |L2.632|
                          DCD      IAP_JumpToAppFun
                  |L2.636|
00027c  424c4520          DCB      "BLE Update failed!",0
000280  55706461
000284  74652066
000288  61696c65
00028c  642100  
00028f  00                DCB      0

                          AREA ||i.BLE_PROTOCOL_ConfirmTempCmdFrameBuff||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_ConfirmTempCmdFrameBuff PROC
;;;329    // 将临时缓冲区添加到命令帧缓冲区中，其本质操作是承认临时缓冲区数据有效
;;;330    BOOL BLE_PROTOCOL_ConfirmTempCmdFrameBuff(BLE_PROTOCOL_CB* pCB)
000000  2800              CMP      r0,#0
;;;331    {
000002  d01a              BEQ      |L3.58|
;;;332    	BLE_PROTOCOL_RX_CMD_FRAME* pCmdFrame = NULL;
;;;333    	
;;;334    	// 参数合法性检验
;;;335    	if(NULL == pCB)
;;;336    	{
;;;337    		return FALSE;
;;;338    	}
;;;339    
;;;340    	// 临时缓冲区为空，不予添加
;;;341    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
000004  f8b013d2          LDRH     r1,[r0,#0x3d2]
000008  224d              MOVS     r2,#0x4d
00000a  434a              MULS     r2,r1,r2
00000c  eb000242          ADD      r2,r0,r2,LSL #1
;;;342    	if(0 == pCmdFrame->length)
000010  f8b22166          LDRH     r2,[r2,#0x166]
000014  b19a              CBZ      r2,|L3.62|
;;;343    	{
;;;344    		return FALSE;
;;;345    	}
;;;346    
;;;347    	// 添加
;;;348    	pCB->rx.end ++;
000016  1c49              ADDS     r1,r1,#1
000018  b289              UXTH     r1,r1
;;;349    	pCB->rx.end %= BLE_PROTOCOL_RX_QUEUE_SIZE;
00001a  2205              MOVS     r2,#5
00001c  fbb1f3f2          UDIV     r3,r1,r2
000020  fb021113          MLS      r1,r2,r3,r1
000024  f8a013d2          STRH     r1,[r0,#0x3d2]
;;;350    	pCB->rx.cmdQueue[pCB->rx.end].length = 0;	// 该行的作用是将新的添加位置有效数据个数清零，以便将这个位置当做临时帧缓冲区
000028  2200              MOVS     r2,#0
00002a  234d              MOVS     r3,#0x4d
00002c  4359              MULS     r1,r3,r1
00002e  eb000041          ADD      r0,r0,r1,LSL #1
000032  f8a02166          STRH     r2,[r0,#0x166]
;;;351    	
;;;352    	return TRUE;
000036  2001              MOVS     r0,#1
;;;353    }
000038  4770              BX       lr
                  |L3.58|
00003a  2000              MOVS     r0,#0                 ;337
00003c  4770              BX       lr
                  |L3.62|
00003e  2000              MOVS     r0,#0                 ;344
000040  4770              BX       lr
;;;354    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_DataStructInit||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_DataStructInit PROC
;;;264    // 数据结构初始化
;;;265    void BLE_PROTOCOL_DataStructInit(BLE_PROTOCOL_CB* pCB)
000000  2800              CMP      r0,#0
;;;266    {
000002  d029              BEQ      |L4.88|
;;;267    	uint16 i;
;;;268    	
;;;269    	// 参数合法性检验
;;;270    	if (NULL == pCB)
;;;271    	{
;;;272    		return;
;;;273    	}
;;;274    
;;;275    	pCB->tx.txBusy = FALSE;
000004  2200              MOVS     r2,#0
000006  f88026dc          STRB     r2,[r0,#0x6dc]
;;;276    	pCB->tx.index = 0;
00000a  f8a026da          STRH     r2,[r0,#0x6da]
;;;277    	pCB->tx.head = 0;
00000e  f8a026d6          STRH     r2,[r0,#0x6d6]
;;;278    	pCB->tx.end = 0;
000012  f8a026d8          STRH     r2,[r0,#0x6d8]
;;;279    	for(i = 0; i < BLE_PROTOCOL_TX_QUEUE_SIZE; i++)
000016  2100              MOVS     r1,#0
                  |L4.24|
;;;280    	{
;;;281    		pCB->tx.cmdQueue[i].length = 0;
000018  234d              MOVS     r3,#0x4d
00001a  434b              MULS     r3,r1,r3
00001c  eb000343          ADD      r3,r0,r3,LSL #1
000020  f8a3246c          STRH     r2,[r3,#0x46c]
000024  1c49              ADDS     r1,r1,#1              ;279
000026  b289              UXTH     r1,r1                 ;279
000028  2905              CMP      r1,#5                 ;279
00002a  d3f5              BCC      |L4.24|
;;;282    	}
;;;283    
;;;284    	pCB->rxFIFO.head = 0;
00002c  f8202fc8          STRH     r2,[r0,#0xc8]!
;;;285    	pCB->rxFIFO.end = 0;
000030  8042              STRH     r2,[r0,#2]
;;;286    	pCB->rxFIFO.currentProcessIndex = 0;
000032  8082              STRH     r2,[r0,#4]
;;;287    
;;;288    	pCB->rx.head = 0;
000034  f8a02308          STRH     r2,[r0,#0x308]
;;;289    	pCB->rx.end  = 0;
000038  f8a0230a          STRH     r2,[r0,#0x30a]
00003c  38c8              SUBS     r0,r0,#0xc8
;;;290    	for(i=0; i<BLE_PROTOCOL_RX_QUEUE_SIZE; i++)
00003e  2100              MOVS     r1,#0
                  |L4.64|
;;;291    	{
;;;292    		pCB->rx.cmdQueue[i].length = 0;
000040  234d              MOVS     r3,#0x4d
000042  434b              MULS     r3,r1,r3
000044  eb000343          ADD      r3,r0,r3,LSL #1
000048  f8a32166          STRH     r2,[r3,#0x166]
00004c  1c49              ADDS     r1,r1,#1              ;290
00004e  b289              UXTH     r1,r1                 ;290
000050  2905              CMP      r1,#5                 ;290
000052  d3f5              BCC      |L4.64|
;;;293    	}
;;;294    
;;;295    	pCB->isTimeCheck = FALSE;
000054  f88026e8          STRB     r2,[r0,#0x6e8]
                  |L4.88|
;;;296    }
000058  4770              BX       lr
;;;297    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_Init||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_Init PROC
;;;169    // 协议初始化
;;;170    void BLE_PROTOCOL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;171    {
;;;172    	// 协议层数据结构初始化
;;;173    	BLE_PROTOCOL_DataStructInit(&bleProtocolCB);
000002  4805              LDR      r0,|L5.24|
000004  f7fffffe          BL       BLE_PROTOCOL_DataStructInit
;;;174    
;;;175    	// 向驱动层注册数据接收接口
;;;176    	BLE_UART_RegisterDataSendService(BLE_PROTOCOL_MacProcess);
000008  4804              LDR      r0,|L5.28|
00000a  f7fffffe          BL       BLE_UART_RegisterDataSendService
;;;177    
;;;178    	// 向驱动层注册数据发送接口
;;;179    	BLE_PROTOCOL_RegisterDataSendService(BLE_UART_AddTxArray);
00000e  e8bd4010          POP      {r4,lr}
000012  4803              LDR      r0,|L5.32|
000014  f7ffbffe          B.W      BLE_PROTOCOL_RegisterDataSendService
;;;180    }
;;;181    
                          ENDP

                  |L5.24|
                          DCD      ||.bss||
                  |L5.28|
                          DCD      BLE_PROTOCOL_MacProcess
                  |L5.32|
                          DCD      BLE_UART_AddTxArray

                          AREA ||i.BLE_PROTOCOL_MacProcess||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_MacProcess PROC
;;;298    // UART报文接收处理函数(注意根据具体模块修改)
;;;299    void BLE_PROTOCOL_MacProcess(uint16 standarID, uint8* pData, uint16 length)
000000  b570              PUSH     {r4-r6,lr}
;;;300    {
;;;301    	uint16 end = bleProtocolCB.rxFIFO.end;
000002  480d              LDR      r0,|L6.56|
000004  f8b020ca          LDRH     r2,[r0,#0xca]  ; bleProtocolCB
;;;302    	uint16 head = bleProtocolCB.rxFIFO.head;
000008  f8b040c8          LDRH     r4,[r0,#0xc8]  ; bleProtocolCB
;;;303    	uint8 rxdata = 0x00;
;;;304    	
;;;305    	// 接收数据
;;;306    	rxdata = *pData;
00000c  780d              LDRB     r5,[r1,#0]
;;;307    
;;;308    	// 一级缓冲区已满，不予接收
;;;309    	if((end + 1)%BLE_PROTOCOL_RX_FIFO_SIZE == head)
00000e  1c53              ADDS     r3,r2,#1
000010  21c8              MOVS     r1,#0xc8
000012  fbb3f6f1          UDIV     r6,r3,r1
000016  fb013316          MLS      r3,r1,r6,r3
00001a  42a3              CMP      r3,r4
00001c  d00a              BEQ      |L6.52|
;;;310    	{
;;;311    		return;
;;;312    	}
;;;313    	// 一级缓冲区未满，接收 
;;;314    	else
;;;315    	{
;;;316    		// 将接收到的数据放到临时缓冲区中
;;;317    		bleProtocolCB.rxFIFO.buff[end] = rxdata;
00001e  5485              STRB     r5,[r0,r2]
;;;318    		bleProtocolCB.rxFIFO.end ++;
000020  f8302fca          LDRH     r2,[r0,#0xca]!  ; bleProtocolCB
000024  1c52              ADDS     r2,r2,#1
000026  8002              STRH     r2,[r0,#0]
;;;319    		bleProtocolCB.rxFIFO.end %= BLE_PROTOCOL_RX_FIFO_SIZE;
000028  8802              LDRH     r2,[r0,#0]  ; bleProtocolCB
00002a  fbb2f3f1          UDIV     r3,r2,r1
00002e  fb012113          MLS      r1,r1,r3,r2
000032  8001              STRH     r1,[r0,#0]
                  |L6.52|
;;;320    	}	
;;;321    }
000034  bd70              POP      {r4-r6,pc}
;;;322    
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_Process||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_Process PROC
;;;182    // BLE协议层过程处理
;;;183    void BLE_PROTOCOL_Process(void)
000000  b510              PUSH     {r4,lr}
;;;184    {
;;;185    	// BLE接收FIFO缓冲区处理
;;;186    	BLE_PROTOCOL_RxFIFOProcess(&bleProtocolCB);
000002  4805              LDR      r0,|L7.24|
000004  f7fffffe          BL       BLE_PROTOCOL_RxFIFOProcess
;;;187    
;;;188    	// BLE接收命令缓冲区处理
;;;189    	BLE_PROTOCOL_CmdFrameProcess(&bleProtocolCB);
000008  4803              LDR      r0,|L7.24|
00000a  f7fffffe          BL       BLE_PROTOCOL_CmdFrameProcess
;;;190    	
;;;191    	// BLE协议层发送处理过程
;;;192    	BLE_PROTOCOL_TxStateProcess();
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      BLE_PROTOCOL_TxStateProcess
;;;193    }
;;;194    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_RegisterDataSendService||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_RegisterDataSendService PROC
;;;323    // UART协议层向驱动层注册数据发送接口
;;;324    void BLE_PROTOCOL_RegisterDataSendService(BOOL (*service)(uint16 id, uint8 *pData, uint16 length))
000000  4901              LDR      r1,|L8.8|
;;;325    {		
;;;326    	bleProtocolCB.sendDataThrowService = service;
000002  f8c106e0          STR      r0,[r1,#0x6e0]  ; bleProtocolCB
;;;327    }
000006  4770              BX       lr
;;;328    
                          ENDP

                  |L8.8|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_RxFIFOProcess||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_RxFIFOProcess PROC
;;;388    // 一级接收缓冲区处理，从一级接收缓冲区中取出一个字节添加到命令帧缓冲区中
;;;389    void BLE_PROTOCOL_RxFIFOProcess(BLE_PROTOCOL_CB* pCB)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;390    {
000004  4604              MOV      r4,r0
;;;391    	uint16 end = pCB->rxFIFO.end;
000006  f8b410ca          LDRH     r1,[r4,#0xca]
;;;392    	uint16 head = pCB->rxFIFO.head;
00000a  f8b400c8          LDRH     r0,[r4,#0xc8]
;;;393    	BLE_PROTOCOL_RX_CMD_FRAME* pCmdFrame = NULL;
;;;394    	uint16 length = 0;
;;;395    	uint8 currentData = 0;
;;;396    	
;;;397    	// 参数合法性检验
;;;398    	if(NULL == pCB)
00000e  2c00              CMP      r4,#0
000010  d021              BEQ      |L9.86|
;;;399    	{
;;;400    		return;
;;;401    	}
;;;402    	
;;;403    	// 一级缓冲区为空，退出
;;;404    	if(head == end)
000012  4288              CMP      r0,r1
000014  d01f              BEQ      |L9.86|
;;;405    	{
;;;406    		return;
;;;407    	}
;;;408    
;;;409    	// 获取临时缓冲区指针
;;;410    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
000016  f8b423d2          LDRH     r2,[r4,#0x3d2]
00001a  204d              MOVS     r0,#0x4d
00001c  4350              MULS     r0,r2,r0
00001e  eb040540          ADD      r5,r4,r0,LSL #1
000022  35ce              ADDS     r5,r5,#0xce
;;;411    	// 取出当前要处理的字节
;;;412    	currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
000024  f8b400cc          LDRH     r0,[r4,#0xcc]
000028  5c20              LDRB     r0,[r4,r0]
;;;413    	
;;;414    	// 临时缓冲区长度为0时，搜索首字节
;;;415    	if(0 == pCmdFrame->length)
00002a  f8b53098          LDRH     r3,[r5,#0x98]
;;;416    	{
;;;417    		// 命令头错误，删除当前字节并退出
;;;418    		if(BLE_PROTOCOL_CMD_HEAD != currentData)
;;;419    		{
;;;420    			pCB->rxFIFO.head ++;
;;;421    			pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
00002e  27c8              MOVS     r7,#0xc8
000030  b19b              CBZ      r3,|L9.90|
;;;422    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;423    
;;;424    			return;
;;;425    		}
;;;426    		
;;;427    		// 命令头正确，但无临时缓冲区可用，退出
;;;428    		if((pCB->rx.end + 1)%BLE_PROTOCOL_RX_QUEUE_SIZE == pCB->rx.head)
;;;429    		{
;;;430    			return;
;;;431    		}
;;;432    
;;;433    		// 添加UART通讯超时时间设置-2016.1.5增加
;;;434    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;435    		TIMER_AddTask(TIMER_ID_UART_RX_TIME_OUT_CONTROL,
;;;436    						BLE_PROTOCOL_BUS_UNIDIRECTIONAL_TIME_OUT,
;;;437    						BLE_PROTOCOL_CALLBACK_RxTimeOut,
;;;438    						0,
;;;439    						1,
;;;440    						ACTION_MODE_ADD_TO_QUEUE);
;;;441    #endif
;;;442    		
;;;443    		// 命令头正确，有临时缓冲区可用，则将其添加到命令帧临时缓冲区中
;;;444    		pCmdFrame->buff[pCmdFrame->length++]= currentData;
;;;445    		pCB->rxFIFO.currentProcessIndex ++;
;;;446    		pCB->rxFIFO.currentProcessIndex %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;447    	}
;;;448    	// 非首字节，将数据添加到命令帧临时缓冲区中，但暂不删除当前数据
;;;449    	else
;;;450    	{
;;;451    		// 临时缓冲区溢出，说明当前正在接收的命令帧是错误的，正确的命令帧不会出现长度溢出的情况
;;;452    		if(pCmdFrame->length >= BLE_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX)
000032  f04f0800          MOV      r8,#0
000036  2b96              CMP      r3,#0x96
000038  d37e              BCC      |L9.312|
;;;453    		{
;;;454    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;455    			// 停止RX通讯超时检测
;;;456    			BLE_PROTOCOL_StopRxTimeOutCheck();
;;;457    #endif
;;;458    
;;;459    			// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;460    			pCmdFrame->length = 0;	// 2016.1.5增加
00003a  f8a58098          STRH     r8,[r5,#0x98]
;;;461    			// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;462    			pCB->rxFIFO.head ++;
00003e  f8340fc8          LDRH     r0,[r4,#0xc8]!
000042  1c40              ADDS     r0,r0,#1
000044  8020              STRH     r0,[r4,#0]
;;;463    			pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
000046  8820              LDRH     r0,[r4,#0]
000048  fbb0f1f7          UDIV     r1,r0,r7
00004c  fb070011          MLS      r0,r7,r1,r0
000050  8020              STRH     r0,[r4,#0]
;;;464    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
000052  8820              LDRH     r0,[r4,#0]
000054  80a0              STRH     r0,[r4,#4]
                  |L9.86|
;;;465    
;;;466    			return;
;;;467    		}
;;;468    
;;;469    		// 一直取到末尾
;;;470    		while(end != pCB->rxFIFO.currentProcessIndex)
;;;471    		{
;;;472    			// 取出当前要处理的字节
;;;473    			currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
;;;474    			// 缓冲区未溢出，正常接收，将数据添加到临时缓冲区中
;;;475    			pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;476    			pCB->rxFIFO.currentProcessIndex ++;
;;;477    			pCB->rxFIFO.currentProcessIndex %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;478    
;;;479    			// ■■接下来，需要检查命令帧是否完整，如果完整，则将命令帧临时缓冲区扶正 ■■
;;;480    						
;;;481    			// 首先判断命令帧最小长度，一个完整的命令字至少包括4个字节: 命令帧最小长度，包含:命令头、命令字、数据长度、校验和，因此不足4个字节的必定不完整
;;;482    			if(pCmdFrame->length < BLE_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;483    			{
;;;484    				// 继续接收
;;;485    				continue;
;;;486    			}
;;;487    
;;;488    			// 命令帧长度数值越界，说明当前命令帧错误，停止接收
;;;489    			if(pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] > (BLE_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX - BLE_PROTOCOL_CMD_FRAME_LENGTH_MIN))
;;;490    			{
;;;491    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;492    				// 停止RX通讯超时检测
;;;493    				BLE_PROTOCOL_StopRxTimeOutCheck();
;;;494    #endif
;;;495    			
;;;496    				// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;497    				pCmdFrame->length = 0;
;;;498    				// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;499    				pCB->rxFIFO.head ++;
;;;500    				pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;501    				pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;502    
;;;503    				return;
;;;504    			}
;;;505    
;;;506    			// 命令帧长度校验
;;;507    			length = pCmdFrame->length;
;;;508    			if(length < pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] + BLE_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;509    			{
;;;510    				// 长度要求不一致，说明未接收完毕，退出继续
;;;511    				continue;
;;;512    			}
;;;513    
;;;514    			// 命令帧长度OK，则进行校验，失败时删除命令头
;;;515    			if(!BLE_PROTOCOL_CheckSUM(pCmdFrame))
;;;516    			{
;;;517    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;518    				// 停止RX通讯超时检测
;;;519    				BLE_PROTOCOL_StopRxTimeOutCheck();
;;;520    #endif
;;;521    				
;;;522    				// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;523    				pCmdFrame->length = 0;
;;;524    				// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;525    				pCB->rxFIFO.head ++;
;;;526    				pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;527    				pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;528    				
;;;529    				return;
;;;530    			}
;;;531    
;;;532    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;533    			// 停止RX通讯超时检测
;;;534    			BLE_PROTOCOL_StopRxTimeOutCheck();
;;;535    #endif
;;;536    			
;;;537    			// 执行到这里，即说明接收到了一个完整并且正确的命令帧，此时需将处理过的数据从一级缓冲区中删除，并将该命令帧扶正
;;;538    			pCB->rxFIFO.head += length;
;;;539    			pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;540    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;541    			BLE_PROTOCOL_ConfirmTempCmdFrameBuff(pCB);
;;;542    
;;;543    			return;
;;;544    		}
;;;545    	}
;;;546    }
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L9.90|
00005a  2855              CMP      r0,#0x55              ;418
00005c  d00c              BEQ      |L9.120|
00005e  f8340fc8          LDRH     r0,[r4,#0xc8]!        ;420
000062  1c40              ADDS     r0,r0,#1              ;420
000064  8020              STRH     r0,[r4,#0]            ;420
000066  8820              LDRH     r0,[r4,#0]            ;421
000068  fbb0f1f7          UDIV     r1,r0,r7              ;421
00006c  fb070011          MLS      r0,r7,r1,r0           ;421
000070  8020              STRH     r0,[r4,#0]            ;421
000072  8820              LDRH     r0,[r4,#0]            ;422
000074  80a0              STRH     r0,[r4,#4]            ;422
000076  e7ee              B        |L9.86|
                  |L9.120|
000078  1c52              ADDS     r2,r2,#1              ;428
00007a  2105              MOVS     r1,#5                 ;428
00007c  fbb2f3f1          UDIV     r3,r2,r1              ;428
000080  fb012113          MLS      r1,r1,r3,r2           ;428
000084  f8b423d0          LDRH     r2,[r4,#0x3d0]        ;428
000088  4291              CMP      r1,r2                 ;428
00008a  d0e4              BEQ      |L9.86|
00008c  2101              MOVS     r1,#1                 ;444
00008e  f8a51098          STRH     r1,[r5,#0x98]         ;444
000092  70a8              STRB     r0,[r5,#2]            ;444
000094  f8340fcc          LDRH     r0,[r4,#0xcc]!        ;445
000098  1c40              ADDS     r0,r0,#1              ;445
00009a  b280              UXTH     r0,r0                 ;445
00009c  fbb0f1f7          UDIV     r1,r0,r7              ;446
0000a0  fb070011          MLS      r0,r7,r1,r0           ;446
0000a4  8020              STRH     r0,[r4,#0]            ;446
0000a6  e7d6              B        |L9.86|
                  |L9.168|
0000a8  5c22              LDRB     r2,[r4,r0]            ;473
0000aa  f8b50098          LDRH     r0,[r5,#0x98]         ;475
0000ae  1c43              ADDS     r3,r0,#1              ;475
0000b0  4428              ADD      r0,r0,r5              ;475
0000b2  f8a53098          STRH     r3,[r5,#0x98]         ;475
0000b6  7082              STRB     r2,[r0,#2]            ;475
0000b8  f8b400cc          LDRH     r0,[r4,#0xcc]         ;476
0000bc  1c40              ADDS     r0,r0,#1              ;476
0000be  b280              UXTH     r0,r0                 ;476
0000c0  fbb0f2f7          UDIV     r2,r0,r7              ;477
0000c4  fb070012          MLS      r0,r7,r2,r0           ;477
0000c8  f8a400cc          STRH     r0,[r4,#0xcc]         ;477
0000cc  f8b56098          LDRH     r6,[r5,#0x98]         ;482
0000d0  2e04              CMP      r6,#4                 ;482
0000d2  d33b              BCC      |L9.332|
0000d4  7928              LDRB     r0,[r5,#4]            ;489
0000d6  2892              CMP      r0,#0x92              ;489
0000d8  d90e              BLS      |L9.248|
0000da  f8a58098          STRH     r8,[r5,#0x98]         ;497
0000de  f8340fc8          LDRH     r0,[r4,#0xc8]!        ;499
0000e2  1c40              ADDS     r0,r0,#1              ;499
0000e4  8020              STRH     r0,[r4,#0]            ;499
0000e6  8820              LDRH     r0,[r4,#0]            ;500
0000e8  fbb0f1f7          UDIV     r1,r0,r7              ;500
0000ec  fb070011          MLS      r0,r7,r1,r0           ;500
0000f0  8020              STRH     r0,[r4,#0]            ;500
0000f2  8820              LDRH     r0,[r4,#0]            ;501
0000f4  80a0              STRH     r0,[r4,#4]            ;501
0000f6  e7ae              B        |L9.86|
                  |L9.248|
0000f8  1d00              ADDS     r0,r0,#4              ;508
0000fa  42b0              CMP      r0,r6                 ;508
0000fc  d826              BHI      |L9.332|
0000fe  4628              MOV      r0,r5                 ;515
000100  f7fffffe          BL       BLE_PROTOCOL_CheckSUM
000104  b188              CBZ      r0,|L9.298|
000106  f8340fc8          LDRH     r0,[r4,#0xc8]!        ;538
00010a  4430              ADD      r0,r0,r6              ;538
00010c  8020              STRH     r0,[r4,#0]            ;538
00010e  8820              LDRH     r0,[r4,#0]            ;539
000110  fbb0f1f7          UDIV     r1,r0,r7              ;539
000114  fb070011          MLS      r0,r7,r1,r0           ;539
000118  8020              STRH     r0,[r4,#0]            ;539
00011a  8820              LDRH     r0,[r4,#0]            ;540
00011c  80a0              STRH     r0,[r4,#4]            ;540
00011e  3cc8              SUBS     r4,r4,#0xc8           ;540
000120  4620              MOV      r0,r4                 ;541
000122  e8bd41f0          POP      {r4-r8,lr}            ;541
000126  f7ffbffe          B.W      BLE_PROTOCOL_ConfirmTempCmdFrameBuff
                  |L9.298|
00012a  f8a58098          STRH     r8,[r5,#0x98]         ;523
00012e  f8340fc8          LDRH     r0,[r4,#0xc8]!        ;525
000132  1c40              ADDS     r0,r0,#1              ;525
000134  8020              STRH     r0,[r4,#0]            ;525
000136  e000              B        |L9.314|
                  |L9.312|
000138  e008              B        |L9.332|
                  |L9.314|
00013a  8820              LDRH     r0,[r4,#0]            ;526
00013c  fbb0f1f7          UDIV     r1,r0,r7              ;526
000140  fb070011          MLS      r0,r7,r1,r0           ;526
000144  8020              STRH     r0,[r4,#0]            ;526
000146  8820              LDRH     r0,[r4,#0]            ;527
000148  80a0              STRH     r0,[r4,#4]            ;527
00014a  e784              B        |L9.86|
                  |L9.332|
00014c  f8b400cc          LDRH     r0,[r4,#0xcc]         ;470
000150  4288              CMP      r0,r1                 ;470
000152  d1a9              BNE      |L9.168|
000154  e77f              B        |L9.86|
;;;547    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendCmdAck||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendCmdAck PROC
;;;840    // 发送命令回复
;;;841    void BLE_PROTOCOL_SendCmdAck(uint32 ackCmd)
000000  b510              PUSH     {r4,lr}
;;;842    {
000002  4604              MOV      r4,r0
;;;843    	// 使能BLE发送
;;;844    	BLE_BRTS_TX_REQUEST();
;;;845    
;;;846    	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;847    	BLE_PROTOCOL_TxAddData(ackCmd); 	
00000a  b2e0              UXTB     r0,r4
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;848    	BLE_PROTOCOL_TxAddData(0x00);	
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;849    	BLE_PROTOCOL_TxAddFrame();	
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;850    }
;;;851    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendCmdFirmVersionAck||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_SendCmdFirmVersionAck PROC
;;;866    // 查询固件版本回复
;;;867    void BLE_PROTOCOL_SendCmdFirmVersionAck(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;868    {
;;;869    	uint8 val1, val2, val3, val4;
;;;870    	uint32 valTemp;
;;;871    
;;;872    	// 使能BLE发送
;;;873    	BLE_BRTS_TX_REQUEST();
;;;874    	
;;;875    	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000002  2055              MOVS     r0,#0x55
000004  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;876    	BLE_PROTOCOL_TxAddData(BLE_CMD_FIRMVERSION_UP); 	
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;877    	BLE_PROTOCOL_TxAddData(0x07);	
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;878    
;;;879    	// 仪表型号编码
;;;880    	BLE_PROTOCOL_TxAddData(paramCB.runtime.devVersion[0]);
000014  4c17              LDR      r4,|L11.116|
000016  7820              LDRB     r0,[r4,#0]  ; paramCB
000018  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;881    	BLE_PROTOCOL_TxAddData(paramCB.runtime.devVersion[1]);
00001c  7860              LDRB     r0,[r4,#1]  ; paramCB
00001e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;882    	BLE_PROTOCOL_TxAddData(paramCB.runtime.devVersion[2]);
000022  78a0              LDRB     r0,[r4,#2]  ; paramCB
000024  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;883    	
;;;884    	// 固件版本
;;;885    	val1 = PARAM_GetDevVersionRemain();
000028  79a0              LDRB     r0,[r4,#6]  ; paramCB
;;;886    	val2 = PARAM_Get_DevReleaseVersion();
00002a  79e7              LDRB     r7,[r4,#7]  ; paramCB
;;;887    	val3 = PARAM_Get_FwUpdateVersion();
00002c  7a25              LDRB     r5,[r4,#8]  ; paramCB
;;;888    	val4 = PARAM_Get_FwDebugReleaseVersion();
00002e  7a66              LDRB     r6,[r4,#9]  ; paramCB
;;;889    	BLE_PROTOCOL_TxAddData(val1);
000030  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;890    	BLE_PROTOCOL_TxAddData(val2);
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;891    	BLE_PROTOCOL_TxAddData(val3);
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;892    	BLE_PROTOCOL_TxAddData(val4);
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;893    
;;;894    	// 固件版本编号
;;;895    	valTemp = PARAM_GetFwBinNum();
000046  88a0              LDRH     r0,[r4,#4]  ; paramCB
;;;896    	val1 = (valTemp / 10) % 10;
000048  210a              MOVS     r1,#0xa
00004a  fbb0f2f1          UDIV     r2,r0,r1
00004e  fbb2f3f1          UDIV     r3,r2,r1
000052  fb012213          MLS      r2,r1,r3,r2
;;;897    	val2 = (valTemp) % 10;
000056  fbb0f3f1          UDIV     r3,r0,r1
00005a  fb010413          MLS      r4,r1,r3,r0
;;;898    	BLE_PROTOCOL_TxAddData(val1);
00005e  4610              MOV      r0,r2
000060  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;899    	BLE_PROTOCOL_TxAddData(val2);
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;900    	
;;;901    	BLE_PROTOCOL_TxAddFrame();	
00006a  e8bd40f0          POP      {r4-r7,lr}
00006e  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;902    }
;;;903    
                          ENDP

000072  0000              DCW      0x0000
                  |L11.116|
                          DCD      paramCB+0x16a

                          AREA ||i.BLE_PROTOCOL_SendCmdParamAck||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendCmdParamAck PROC
;;;852    // 发送命令回复，带一个参数
;;;853    void BLE_PROTOCOL_SendCmdParamAck(uint8 ackCmd, uint8 ackParam)
000000  b530              PUSH     {r4,r5,lr}
;;;854    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;855    	// 使能BLE发送
;;;856    	BLE_BRTS_TX_REQUEST();
;;;857    
;;;858    	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000006  2055              MOVS     r0,#0x55
000008  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;859    	BLE_PROTOCOL_TxAddData(ackCmd); 	
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;860    	BLE_PROTOCOL_TxAddData(0x01);	
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;861    	
;;;862    	BLE_PROTOCOL_TxAddData(ackParam);	
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;863    	BLE_PROTOCOL_TxAddFrame();	
00001e  e8bd4030          POP      {r4,r5,lr}
000022  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;864    }
;;;865    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_StartTimeoutCheckTask||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_StartTimeoutCheckTask PROC
;;;164    // 启动通讯超时判断任务
;;;165    void BLE_PROTOCOL_StartTimeoutCheckTask(void)
000000  4770              BX       lr
;;;166    {
;;;167    }
;;;168    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_TxAddData||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_TxAddData PROC
;;;195    // 向发送命令帧队列中添加数据
;;;196    void BLE_PROTOCOL_TxAddData(uint8 data)
000000  b530              PUSH     {r4,r5,lr}
;;;197    {
;;;198    	uint16 head = bleProtocolCB.tx.head;
000002  490f              LDR      r1,|L14.64|
000004  f8b146d6          LDRH     r4,[r1,#0x6d6]  ; bleProtocolCB
;;;199    	uint16 end =  bleProtocolCB.tx.end;
000008  f8b126d8          LDRH     r2,[r1,#0x6d8]  ; bleProtocolCB
;;;200    	BLE_PROTOCOL_TX_CMD_FRAME* pCmdFrame = &bleProtocolCB.tx.cmdQueue[bleProtocolCB.tx.end];
00000c  234d              MOVS     r3,#0x4d
00000e  4353              MULS     r3,r2,r3
000010  eb010143          ADD      r1,r1,r3,LSL #1
000014  f5017175          ADD      r1,r1,#0x3d4
;;;201    
;;;202    	// 发送缓冲区已满，不予接收
;;;203    	if((end + 1) % BLE_PROTOCOL_TX_QUEUE_SIZE == head)
000018  1c52              ADDS     r2,r2,#1
00001a  2305              MOVS     r3,#5
00001c  fbb2f5f3          UDIV     r5,r2,r3
000020  fb032215          MLS      r2,r3,r5,r2
000024  42a2              CMP      r2,r4
000026  d009              BEQ      |L14.60|
;;;204    	{
;;;205    		return;
;;;206    	}
;;;207    	
;;;208    	// 队尾命令帧已满，退出
;;;209    	if(pCmdFrame->length >= BLE_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX)
000028  f8b12098          LDRH     r2,[r1,#0x98]
00002c  2a96              CMP      r2,#0x96
00002e  d205              BCS      |L14.60|
;;;210    	{
;;;211    		return;
;;;212    	}
;;;213    
;;;214    	// 数据添加到帧末尾，并更新帧长度
;;;215    	pCmdFrame->buff[pCmdFrame->length] = data;
000030  1c8b              ADDS     r3,r1,#2
000032  54d0              STRB     r0,[r2,r3]
;;;216    	pCmdFrame->length ++;
000034  f8310f98          LDRH     r0,[r1,#0x98]!
000038  1c40              ADDS     r0,r0,#1
00003a  8008              STRH     r0,[r1,#0]
                  |L14.60|
;;;217    }
00003c  bd30              POP      {r4,r5,pc}
;;;218    
                          ENDP

00003e  0000              DCW      0x0000
                  |L14.64|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_TxAddFrame||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_TxAddFrame PROC
;;;219    // 确认添加命令帧，即承认之前填充的数据为命令帧，将其添加到发送队列中，由main进行调度发送，本函数内会自动校正命令长度，并添加校验码
;;;220    void BLE_PROTOCOL_TxAddFrame(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;221    {
;;;222    	uint16 cc = 0;
000002  2300              MOVS     r3,#0
;;;223    	uint16 i = 0;
000004  2100              MOVS     r1,#0
;;;224    	uint16 head = bleProtocolCB.tx.head;
000006  4d1c              LDR      r5,|L15.120|
000008  f8b576d6          LDRH     r7,[r5,#0x6d6]  ; bleProtocolCB
;;;225    	uint16 end  = bleProtocolCB.tx.end;
00000c  f8b546d8          LDRH     r4,[r5,#0x6d8]  ; bleProtocolCB
;;;226    	BLE_PROTOCOL_TX_CMD_FRAME* pCmdFrame = &bleProtocolCB.tx.cmdQueue[bleProtocolCB.tx.end];
000010  204d              MOVS     r0,#0x4d
000012  4360              MULS     r0,r4,r0
000014  eb050040          ADD      r0,r5,r0,LSL #1
000018  f5007075          ADD      r0,r0,#0x3d4
;;;227    	uint16 length = pCmdFrame->length;
00001c  f8b02098          LDRH     r2,[r0,#0x98]
;;;228    
;;;229    	// 发送缓冲区已满，不予接收
;;;230    	if((end + 1) % BLE_PROTOCOL_TX_QUEUE_SIZE == head)
000020  1c64              ADDS     r4,r4,#1
000022  2605              MOVS     r6,#5
000024  fbb4fcf6          UDIV     r12,r4,r6
000028  fb06441c          MLS      r4,r6,r12,r4
00002c  42bc              CMP      r4,r7
00002e  d003              BEQ      |L15.56|
;;;231    	{
;;;232    		return;
;;;233    	}
;;;234    	
;;;235    	// 命令帧长度不足，清除已填充的数据，退出
;;;236    	if(BLE_PROTOCOL_CMD_FRAME_LENGTH_MIN-1 > length)	// 减去"校验和"1个字节
000030  2a03              CMP      r2,#3
000032  d202              BCS      |L15.58|
;;;237    	{
;;;238    		pCmdFrame->length = 0;
000034  f8a01098          STRH     r1,[r0,#0x98]
                  |L15.56|
;;;239    		
;;;240    		return;
;;;241    	}
;;;242    
;;;243    	// 队尾命令帧已满，退出
;;;244    	if(length >= BLE_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX)
;;;245    	{
;;;246    		return;
;;;247    	}
;;;248    
;;;249    	// 重新设置数据长度，系统在准备数据时，填充的"数据长度"可以为任意值，并且不需要添加校验码，在这里重新设置为正确的值
;;;250    	pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] = length - 3;	// 重设数据长度
;;;251    
;;;252    	for(i=0; i<length; i++)
;;;253    	{
;;;254    		cc ^= pCmdFrame->buff[i];
;;;255    	}
;;;256    	pCmdFrame->buff[pCmdFrame->length++] = ~cc ;
;;;257    
;;;258    	bleProtocolCB.tx.end ++;
;;;259    	bleProtocolCB.tx.end %= BLE_PROTOCOL_TX_QUEUE_SIZE;
;;;260    	//pCB->tx.cmdQueue[pCB->tx.end].length = 0;   //2015.12.2修改
;;;261    }
000038  bdf0              POP      {r4-r7,pc}
                  |L15.58|
00003a  2a96              CMP      r2,#0x96              ;244
00003c  d2fc              BCS      |L15.56|
00003e  1ed4              SUBS     r4,r2,#3              ;250
000040  7104              STRB     r4,[r0,#4]            ;250
000042  e004              B        |L15.78|
                  |L15.68|
000044  1844              ADDS     r4,r0,r1              ;254
000046  78a4              LDRB     r4,[r4,#2]            ;254
000048  4063              EORS     r3,r3,r4              ;254
00004a  1c49              ADDS     r1,r1,#1              ;252
00004c  b289              UXTH     r1,r1                 ;252
                  |L15.78|
00004e  4291              CMP      r1,r2                 ;252
000050  d3f8              BCC      |L15.68|
000052  f8b01098          LDRH     r1,[r0,#0x98]         ;256
000056  43db              MVNS     r3,r3                 ;256
000058  1c4a              ADDS     r2,r1,#1              ;256
00005a  f8a02098          STRH     r2,[r0,#0x98]         ;256
00005e  4408              ADD      r0,r0,r1              ;256
000060  7083              STRB     r3,[r0,#2]            ;256
000062  f8b506d8          LDRH     r0,[r5,#0x6d8]        ;258  ; bleProtocolCB
000066  1c40              ADDS     r0,r0,#1              ;258
000068  b280              UXTH     r0,r0                 ;258
00006a  fbb0f1f6          UDIV     r1,r0,r6              ;259
00006e  fb060011          MLS      r0,r6,r1,r0           ;259
000072  f8a506d8          STRH     r0,[r5,#0x6d8]        ;259
000076  bdf0              POP      {r4-r7,pc}
;;;262    
                          ENDP

                  |L15.120|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_TxStateProcess||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_TxStateProcess PROC
;;;355    // 协议层发送处理过程
;;;356    void BLE_PROTOCOL_TxStateProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;357    {
;;;358    	uint16 head = bleProtocolCB.tx.head;
000002  4c14              LDR      r4,|L16.84|
000004  f8b436d6          LDRH     r3,[r4,#0x6d6]  ; bleProtocolCB
;;;359    	uint16 end =  bleProtocolCB.tx.end;
000008  f8b466d8          LDRH     r6,[r4,#0x6d8]  ; bleProtocolCB
;;;360    	uint16 length = bleProtocolCB.tx.cmdQueue[head].length;
00000c  204d              MOVS     r0,#0x4d
00000e  4358              MULS     r0,r3,r0
000010  eb040040          ADD      r0,r4,r0,LSL #1
000014  4605              MOV      r5,r0
000016  f8b0246c          LDRH     r2,[r0,#0x46c]
;;;361    	uint8* pCmd = bleProtocolCB.tx.cmdQueue[head].buff;
00001a  f20031d6          ADD      r1,r0,#0x3d6
;;;362    	uint16 localDeviceID = bleProtocolCB.tx.cmdQueue[head].deviceID;
00001e  f8b003d4          LDRH     r0,[r0,#0x3d4]
;;;363    
;;;364    	// 发送缓冲区为空，说明无数据
;;;365    	if (head == end)
000022  42b3              CMP      r3,r6
000024  d014              BEQ      |L16.80|
;;;366    	{
;;;367    		return;
;;;368    	}
;;;369    
;;;370    	// 发送函数没有注册直接返回
;;;371    	if (NULL == bleProtocolCB.sendDataThrowService)
000026  f8d436e0          LDR      r3,[r4,#0x6e0]  ; bleProtocolCB
00002a  2b00              CMP      r3,#0
00002c  d010              BEQ      |L16.80|
;;;372    	{
;;;373    		return;
;;;374    	}
;;;375    
;;;376    	// 协议层有数据需要发送到驱动层		
;;;377    	if (!(*bleProtocolCB.sendDataThrowService)(localDeviceID, pCmd, length))
00002e  4798              BLX      r3
000030  2800              CMP      r0,#0
000032  d00d              BEQ      |L16.80|
;;;378    	{
;;;379    		return;
;;;380    	}
;;;381    
;;;382    	// 发送环形队列更新位置
;;;383    	bleProtocolCB.tx.cmdQueue[head].length = 0;
000034  2000              MOVS     r0,#0
000036  f8a5046c          STRH     r0,[r5,#0x46c]
;;;384    	bleProtocolCB.tx.head ++;
00003a  f8b406d6          LDRH     r0,[r4,#0x6d6]  ; bleProtocolCB
00003e  1c40              ADDS     r0,r0,#1
000040  b280              UXTH     r0,r0
;;;385    	bleProtocolCB.tx.head %= BLE_PROTOCOL_TX_QUEUE_SIZE;
000042  2105              MOVS     r1,#5
000044  fbb0f2f1          UDIV     r2,r0,r1
000048  fb010012          MLS      r0,r1,r2,r0
00004c  f8a406d6          STRH     r0,[r4,#0x6d6]
                  |L16.80|
;;;386    }
000050  bd70              POP      {r4-r6,pc}
;;;387    
                          ENDP

000052  0000              DCW      0x0000
                  |L16.84|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  bleProtocolCB
                          %        1772

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Authentication_Table
000000  094cd76e          DCB      0x09,0x4c,0xd7,0x6e
000004  2e6d285f          DCB      0x2e,0x6d,0x28,0x5f
000008  03c6d159          DCB      0x03,0xc6,0xd1,0x59
00000c  abe3d597          DCB      0xab,0xe3,0xd5,0x97
000010  99373d3d          DCB      0x99,0x37,0x3d,0x3d
000014  3763e780          DCB      0x37,0x63,0xe7,0x80
000018  6953e4c9          DCB      0x69,0x53,0xe4,0xc9
00001c  1c60895c          DCB      0x1c,0x60,0x89,0x5c
000020  e819ce51          DCB      0xe8,0x19,0xce,0x51
000024  8d9bdbae          DCB      0x8d,0x9b,0xdb,0xae
000028  a43cf7f1          DCB      0xa4,0x3c,0xf7,0xf1
00002c  7ceee0ae          DCB      0x7c,0xee,0xe0,0xae
000030  7bcb07b2          DCB      0x7b,0xcb,0x07,0xb2
000034  b6449fd4          DCB      0xb6,0x44,0x9f,0xd4
000038  bfc7af9d          DCB      0xbf,0xc7,0xaf,0x9d
00003c  cb00bf09          DCB      0xcb,0x00,0xbf,0x09
000040  56839ffc          DCB      0x56,0x83,0x9f,0xfc
000044  825e2252          DCB      0x82,0x5e,0x22,0x52
000048  32f34237          DCB      0x32,0xf3,0x42,0x37
00004c  be8e5d06          DCB      0xbe,0x8e,0x5d,0x06
000050  c656acfc          DCB      0xc6,0x56,0xac,0xfc
000054  3a9508f1          DCB      0x3a,0x95,0x08,0xf1
000058  51dc69ba          DCB      0x51,0xdc,0x69,0xba
00005c  672e44ec          DCB      0x67,0x2e,0x44,0xec
000060  1b2c1591          DCB      0x1b,0x2c,0x15,0x91
000064  5c3ff2c1          DCB      0x5c,0x3f,0xf2,0xc1
000068  fdebee30          DCB      0xfd,0xeb,0xee,0x30
00006c  aa947c79          DCB      0xaa,0x94,0x7c,0x79
000070  deb8cb63          DCB      0xde,0xb8,0xcb,0x63
000074  6ef8285e          DCB      0x6e,0xf8,0x28,0x5e
000078  f5322b34          DCB      0xf5,0x32,0x2b,0x34
00007c  0fe4564e          DCB      0x0f,0xe4,0x56,0x4e
000080  f3f03ee1          DCB      0xf3,0xf0,0x3e,0xe1
000084  6853262d          DCB      0x68,0x53,0x26,0x2d
000088  70981e13          DCB      0x70,0x98,0x1e,0x13
00008c  616f5f91          DCB      0x61,0x6f,0x5f,0x91
000090  3975a211          DCB      0x39,0x75,0xa2,0x11
000094  2c3496fd          DCB      0x2c,0x34,0x96,0xfd
000098  5e2f76e6          DCB      0x5e,0x2f,0x76,0xe6
00009c  a73cf737          DCB      0xa7,0x3c,0xf7,0x37
0000a0  17886ea5          DCB      0x17,0x88,0x6e,0xa5
0000a4  9f3d249b          DCB      0x9f,0x3d,0x24,0x9b
0000a8  e6542d49          DCB      0xe6,0x54,0x2d,0x49
0000ac  f1000d77          DCB      0xf1,0x00,0x0d,0x77
0000b0  87f0aae6          DCB      0x87,0xf0,0xaa,0xe6
0000b4  cadbc1cc          DCB      0xca,0xdb,0xc1,0xcc
0000b8  97082216          DCB      0x97,0x08,0x22,0x16
0000bc  78e583f8          DCB      0x78,0xe5,0x83,0xf8
0000c0  0a637ce6          DCB      0x0a,0x63,0x7c,0xe6
0000c4  9a76c33d          DCB      0x9a,0x76,0xc3,0x3d
0000c8  c9063bae          DCB      0xc9,0x06,0x3b,0xae
0000cc  98b4ae18          DCB      0x98,0xb4,0xae,0x18
0000d0  1eeb7a84          DCB      0x1e,0xeb,0x7a,0x84
0000d4  b13073d8          DCB      0xb1,0x30,0x73,0xd8
0000d8  be148b54          DCB      0xbe,0x14,0x8b,0x54
0000dc  15db88f5          DCB      0x15,0xdb,0x88,0xf5
0000e0  a0c443b6          DCB      0xa0,0xc4,0x43,0xb6
0000e4  c8d2750c          DCB      0xc8,0xd2,0x75,0x0c
0000e8  eb15fd10          DCB      0xeb,0x15,0xfd,0x10
0000ec  45d1fc90          DCB      0x45,0xd1,0xfc,0x90
0000f0  a641e0a7          DCB      0xa6,0x41,0xe0,0xa7
0000f4  30489f7c          DCB      0x30,0x48,0x9f,0x7c
0000f8  0154039f          DCB      0x01,0x54,0x03,0x9f
0000fc  7d58deac          DCB      0x7d,0x58,0xde,0xac
000100  c8ed36ab          DCB      0xc8,0xed,0x36,0xab
000104  a6368e68          DCB      0xa6,0x36,0x8e,0x68
000108  262f4230          DCB      0x26,0x2f,0x42,0x30
00010c  b07956bc          DCB      0xb0,0x79,0x56,0xbc
000110  fdbe7e2a          DCB      0xfd,0xbe,0x7e,0x2a
000114  b8eacf3e          DCB      0xb8,0xea,0xcf,0x3e
000118  78b4224f          DCB      0x78,0xb4,0x22,0x4f
00011c  75b9fd31          DCB      0x75,0xb9,0xfd,0x31
000120  0abe0881          DCB      0x0a,0xbe,0x08,0x81
000124  87e8ec2d          DCB      0x87,0xe8,0xec,0x2d
000128  bd96b1b7          DCB      0xbd,0x96,0xb1,0xb7
00012c  115b8ac8          DCB      0x11,0x5b,0x8a,0xc8
000130  e7f353cb          DCB      0xe7,0xf3,0x53,0xcb
000134  a07bf6fa          DCB      0xa0,0x7b,0xf6,0xfa
000138  932e41f2          DCB      0x93,0x2e,0x41,0xf2
00013c  bbbfb62b          DCB      0xbb,0xbf,0xb6,0x2b
000140  311b5fea          DCB      0x31,0x1b,0x5f,0xea
000144  e3b49a14          DCB      0xe3,0xb4,0x9a,0x14
000148  5cb67826          DCB      0x5c,0xb6,0x78,0x26
00014c  e8654cd9          DCB      0xe8,0x65,0x4c,0xd9
000150  c9c69a84          DCB      0xc9,0xc6,0x9a,0x84
000154  c32dd609          DCB      0xc3,0x2d,0xd6,0x09
000158  ae84dd4c          DCB      0xae,0x84,0xdd,0x4c
00015c  71648b64          DCB      0x71,0x64,0x8b,0x64
000160  36db2c8e          DCB      0x36,0xdb,0x2c,0x8e
000164  725f30a0          DCB      0x72,0x5f,0x30,0xa0
000168  cef6fd23          DCB      0xce,0xf6,0xfd,0x23
00016c  e7bd4985          DCB      0xe7,0xbd,0x49,0x85
000170  5b0812cf          DCB      0x5b,0x08,0x12,0xcf
000174  7c07e113          DCB      0x7c,0x07,0xe1,0x13
000178  b594a667          DCB      0xb5,0x94,0xa6,0x67
00017c  8cf8479a          DCB      0x8c,0xf8,0x47,0x9a
000180  e7aea1e4          DCB      0xe7,0xae,0xa1,0xe4
000184  3e1f78e7          DCB      0x3e,0x1f,0x78,0xe7
000188  1adfc1c8          DCB      0x1a,0xdf,0xc1,0xc8
00018c  739148fc          DCB      0x73,0x91,0x48,0xfc
000190  1fbad04a          DCB      0x1f,0xba,0xd0,0x4a
000194  d3e679e8          DCB      0xd3,0xe6,0x79,0xe8
000198  0b4d411f          DCB      0x0b,0x4d,0x41,0x1f
00019c  50be54c0          DCB      0x50,0xbe,0x54,0xc0
0001a0  5feaece4          DCB      0x5f,0xea,0xec,0xe4
0001a4  e47a72ca          DCB      0xe4,0x7a,0x72,0xca
0001a8  8b02ac6b          DCB      0x8b,0x02,0xac,0x6b
0001ac  6cfbc253          DCB      0x6c,0xfb,0xc2,0x53
0001b0  f50b1a86          DCB      0xf5,0x0b,0x1a,0x86
0001b4  de7f0cdd          DCB      0xde,0x7f,0x0c,0xdd
0001b8  b7acba06          DCB      0xb7,0xac,0xba,0x06
0001bc  40f36e75          DCB      0x40,0xf3,0x6e,0x75
0001c0  baa036ff          DCB      0xba,0xa0,0x36,0xff
0001c4  175e9577          DCB      0x17,0x5e,0x95,0x77
0001c8  fa1996a2          DCB      0xfa,0x19,0x96,0xa2
0001cc  402fb41a          DCB      0x40,0x2f,0xb4,0x1a
0001d0  f8838923          DCB      0xf8,0x83,0x89,0x23
0001d4  5c917d6a          DCB      0x5c,0x91,0x7d,0x6a
0001d8  c5fd2b87          DCB      0xc5,0xfd,0x2b,0x87
0001dc  4a1d98a9          DCB      0x4a,0x1d,0x98,0xa9
0001e0  16ecdc58          DCB      0x16,0xec,0xdc,0x58
0001e4  5f7e5729          DCB      0x5f,0x7e,0x57,0x29
0001e8  5367178b          DCB      0x53,0x67,0x17,0x8b
0001ec  3ee5b320          DCB      0x3e,0xe5,0xb3,0x20
0001f0  93765f22          DCB      0x93,0x76,0x5f,0x22
0001f4  9b66c60a          DCB      0x9b,0x66,0xc6,0x0a
0001f8  f464ac52          DCB      0xf4,0x64,0xac,0x52
0001fc  3f914e92          DCB      0x3f,0x91,0x4e,0x92
000200  f58ed199          DCB      0xf5,0x8e,0xd1,0x99
000204  3625c546          DCB      0x36,0x25,0xc5,0x46
000208  48de347f          DCB      0x48,0xde,0x34,0x7f
00020c  f85b22d2          DCB      0xf8,0x5b,0x22,0xd2
000210  135781d6          DCB      0x13,0x57,0x81,0xd6
000214  2d6386a9          DCB      0x2d,0x63,0x86,0xa9
000218  1fe2e4ad          DCB      0x1f,0xe2,0xe4,0xad
00021c  6907d7b2          DCB      0x69,0x07,0xd7,0xb2
000220  8d17137c          DCB      0x8d,0x17,0x13,0x7c
000224  fae20c51          DCB      0xfa,0xe2,0x0c,0x51
000228  b821ea54          DCB      0xb8,0x21,0xea,0x54
00022c  7263cf86          DCB      0x72,0x63,0xcf,0x86
000230  d94eb4a4          DCB      0xd9,0x4e,0xb4,0xa4
000234  8f383f7f          DCB      0x8f,0x38,0x3f,0x7f
000238  008f6f24          DCB      0x00,0x8f,0x6f,0x24
00023c  a60cdace          DCB      0xa6,0x0c,0xda,0xce
000240  087999b8          DCB      0x08,0x79,0x99,0xb8
000244  e7b09bc1          DCB      0xe7,0xb0,0x9b,0xc1
000248  8e754763          DCB      0x8e,0x75,0x47,0x63
00024c  1d1ed486          DCB      0x1d,0x1e,0xd4,0x86
000250  3039a7a4          DCB      0x30,0x39,0xa7,0xa4
000254  bef9681e          DCB      0xbe,0xf9,0x68,0x1e
000258  7fcc2dc3          DCB      0x7f,0xcc,0x2d,0xc3
00025c  756c4c47          DCB      0x75,0x6c,0x4c,0x47
000260  6d8af4f5          DCB      0x6d,0x8a,0xf4,0xf5
000264  758f84d6          DCB      0x75,0x8f,0x84,0xd6
000268  35003163          DCB      0x35,0x00,0x31,0x63
00026c  3eb8043d          DCB      0x3e,0xb8,0x04,0x3d
000270  f19db262          DCB      0xf1,0x9d,0xb2,0x62
000274  ac5c2627          DCB      0xac,0x5c,0x26,0x27
000278  627ec384          DCB      0x62,0x7e,0xc3,0x84
00027c  6664a266          DCB      0x66,0x64,0xa2,0x66
000280  abd20142          DCB      0xab,0xd2,0x01,0x42
000284  1a1e2da7          DCB      0x1a,0x1e,0x2d,0xa7
000288  eab0e664          DCB      0xea,0xb0,0xe6,0x64
00028c  1227369f          DCB      0x12,0x27,0x36,0x9f
000290  08492272          DCB      0x08,0x49,0x22,0x72
000294  0d036fa7          DCB      0x0d,0x03,0x6f,0xa7
000298  1cd005c9          DCB      0x1c,0xd0,0x05,0xc9
00029c  6f35fdff          DCB      0x6f,0x35,0xfd,0xff
0002a0  42939126          DCB      0x42,0x93,0x91,0x26
0002a4  29089625          DCB      0x29,0x08,0x96,0x25
0002a8  be10f3bb          DCB      0xbe,0x10,0xf3,0xbb
0002ac  f86ce7fe          DCB      0xf8,0x6c,0xe7,0xfe
0002b0  c9008428          DCB      0xc9,0x00,0x84,0x28
0002b4  d68df6c3          DCB      0xd6,0x8d,0xf6,0xc3
0002b8  6dae89e6          DCB      0x6d,0xae,0x89,0xe6
0002bc  b4fd6be5          DCB      0xb4,0xfd,0x6b,0xe5
0002c0  3d0a4f00          DCB      0x3d,0x0a,0x4f,0x00
0002c4  e8aff15b          DCB      0xe8,0xaf,0xf1,0x5b
0002c8  d7586d2c          DCB      0xd7,0x58,0x6d,0x2c
0002cc  df0c1517          DCB      0xdf,0x0c,0x15,0x17
0002d0  815d2c91          DCB      0x81,0x5d,0x2c,0x91
0002d4  f7db5b8f          DCB      0xf7,0xdb,0x5b,0x8f
0002d8  45757de6          DCB      0x45,0x75,0x7d,0xe6
0002dc  97d76596          DCB      0x97,0xd7,0x65,0x96
0002e0  62f9e99c          DCB      0x62,0xf9,0xe9,0x9c
0002e4  ef1c6af2          DCB      0xef,0x1c,0x6a,0xf2
0002e8  fac8634e          DCB      0xfa,0xc8,0x63,0x4e
0002ec  efcf6467          DCB      0xef,0xcf,0x64,0x67
0002f0  4df7fab0          DCB      0x4d,0xf7,0xfa,0xb0
0002f4  57a79d36          DCB      0x57,0xa7,0x9d,0x36
0002f8  ebedc399          DCB      0xeb,0xed,0xc3,0x99
0002fc  02388f31          DCB      0x02,0x38,0x8f,0x31
000300  262e9204          DCB      0x26,0x2e,0x92,0x04
000304  9e3b51af          DCB      0x9e,0x3b,0x51,0xaf
000308  c9664825          DCB      0xc9,0x66,0x48,0x25
00030c  881b24ba          DCB      0x88,0x1b,0x24,0xba
000310  97ae8805          DCB      0x97,0xae,0x88,0x05
000314  6e16b559          DCB      0x6e,0x16,0xb5,0x59
000318  6c20f307          DCB      0x6c,0x20,0xf3,0x07
00031c  b38628e0          DCB      0xb3,0x86,0x28,0xe0
000320  f728a17c          DCB      0xf7,0x28,0xa1,0x7c
000324  edf77cf3          DCB      0xed,0xf7,0x7c,0xf3
000328  ec65d52c          DCB      0xec,0x65,0xd5,0x2c
00032c  d43251b7          DCB      0xd4,0x32,0x51,0xb7
000330  422a6929          DCB      0x42,0x2a,0x69,0x29
000334  aa045a43          DCB      0xaa,0x04,0x5a,0x43
000338  efe670d8          DCB      0xef,0xe6,0x70,0xd8
00033c  b9311640          DCB      0xb9,0x31,0x16,0x40
000340  d51bc247          DCB      0xd5,0x1b,0xc2,0x47
000344  a662c11b          DCB      0xa6,0x62,0xc1,0x1b
000348  c8b89151          DCB      0xc8,0xb8,0x91,0x51
00034c  c2f18841          DCB      0xc2,0xf1,0x88,0x41
000350  f2e62129          DCB      0xf2,0xe6,0x21,0x29
000354  8cd57632          DCB      0x8c,0xd5,0x76,0x32
000358  e5b44138          DCB      0xe5,0xb4,0x41,0x38
00035c  112ba875          DCB      0x11,0x2b,0xa8,0x75
000360  352c437a          DCB      0x35,0x2c,0x43,0x7a
000364  ec0eb9ba          DCB      0xec,0x0e,0xb9,0xba
000368  64ab61c5          DCB      0x64,0xab,0x61,0xc5
00036c  f8b982ad          DCB      0xf8,0xb9,0x82,0xad
000370  6c9ae497          DCB      0x6c,0x9a,0xe4,0x97
000374  0830843f          DCB      0x08,0x30,0x84,0x3f
000378  50e58966          DCB      0x50,0xe5,0x89,0x66
00037c  39e2b27f          DCB      0x39,0xe2,0xb2,0x7f
000380  58bade8d          DCB      0x58,0xba,0xde,0x8d
000384  a205683a          DCB      0xa2,0x05,0x68,0x3a
000388  08789f41          DCB      0x08,0x78,0x9f,0x41
00038c  889abbf1          DCB      0x88,0x9a,0xbb,0xf1
000390  dae3513d          DCB      0xda,0xe3,0x51,0x3d
000394  536081f3          DCB      0x53,0x60,0x81,0xf3
000398  52eda20c          DCB      0x52,0xed,0xa2,0x0c
00039c  dd26b2a1          DCB      0xdd,0x26,0xb2,0xa1
0003a0  05b93d16          DCB      0x05,0xb9,0x3d,0x16
0003a4  f333011d          DCB      0xf3,0x33,0x01,0x1d
0003a8  8fb133d7          DCB      0x8f,0xb1,0x33,0xd7
0003ac  09c5cff9          DCB      0x09,0xc5,0xcf,0xf9
0003b0  a1b813fb          DCB      0xa1,0xb8,0x13,0xfb
0003b4  83d8daaf          DCB      0x83,0xd8,0xda,0xaf
0003b8  a2e45529          DCB      0xa2,0xe4,0x55,0x29
0003bc  16b74ad8          DCB      0x16,0xb7,0x4a,0xd8
0003c0  8c53c3c6          DCB      0x8c,0x53,0xc3,0xc6
0003c4  1e05f888          DCB      0x1e,0x05,0xf8,0x88
0003c8  f7eae702          DCB      0xf7,0xea,0xe7,0x02
0003cc  f0411841          DCB      0xf0,0x41,0x18,0x41
0003d0  8b27c3e7          DCB      0x8b,0x27,0xc3,0xe7
0003d4  7df79c4d          DCB      0x7d,0xf7,0x9c,0x4d
0003d8  3a555243          DCB      0x3a,0x55,0x52,0x43
0003dc  da1cff8f          DCB      0xda,0x1c,0xff,0x8f
0003e0  05ba8bac          DCB      0x05,0xba,0x8b,0xac
0003e4  794a4b08          DCB      0x79,0x4a,0x4b,0x08
0003e8  32a1f9ef          DCB      0x32,0xa1,0xf9,0xef
0003ec  27d884a3          DCB      0x27,0xd8,0x84,0xa3
0003f0  224e10a6          DCB      0x22,0x4e,0x10,0xa6
0003f4  1d06da0c          DCB      0x1d,0x06,0xda,0x0c
0003f8  463edbd3          DCB      0x46,0x3e,0xdb,0xd3
0003fc  bdb13399          DCB      0xbd,0xb1,0x33,0x99
000400  d70eb3ef          DCB      0xd7,0x0e,0xb3,0xef
000404  d07ee338          DCB      0xd0,0x7e,0xe3,0x38
000408  1beda678          DCB      0x1b,0xed,0xa6,0x78
00040c  a0330765          DCB      0xa0,0x33,0x07,0x65
000410  f3848c16          DCB      0xf3,0x84,0x8c,0x16
000414  8a5aeb58          DCB      0x8a,0x5a,0xeb,0x58
000418  91865b83          DCB      0x91,0x86,0x5b,0x83
00041c  655816b1          DCB      0x65,0x58,0x16,0xb1
000420  fb8dd02f          DCB      0xfb,0x8d,0xd0,0x2f
000424  dab67342          DCB      0xda,0xb6,0x73,0x42
000428  3cf56c92          DCB      0x3c,0xf5,0x6c,0x92
00042c  20262c3e          DCB      0x20,0x26,0x2c,0x3e
000430  f6123c07          DCB      0xf6,0x12,0x3c,0x07
000434  5ad3900a          DCB      0x5a,0xd3,0x90,0x0a
000438  3263293e          DCB      0x32,0x63,0x29,0x3e
00043c  14324951          DCB      0x14,0x32,0x49,0x51
000440  77abb66a          DCB      0x77,0xab,0xb6,0x6a
000444  a0ea6e30          DCB      0xa0,0xea,0x6e,0x30
000448  ab145fa2          DCB      0xab,0x14,0x5f,0xa2
00044c  4d8e4878          DCB      0x4d,0x8e,0x48,0x78
000450  2fc2002f          DCB      0x2f,0xc2,0x00,0x2f
000454  b431c282          DCB      0xb4,0x31,0xc2,0x82
000458  3b77edb8          DCB      0x3b,0x77,0xed,0xb8
00045c  9817ef08          DCB      0x98,0x17,0xef,0x08
000460  7938b984          DCB      0x79,0x38,0xb9,0x84
000464  1a0916e5          DCB      0x1a,0x09,0x16,0xe5
000468  4900c842          DCB      0x49,0x00,0xc8,0x42
00046c  3e1823d6          DCB      0x3e,0x18,0x23,0xd6
000470  540b1d11          DCB      0x54,0x0b,0x1d,0x11
000474  f2c18488          DCB      0xf2,0xc1,0x84,0x88
000478  333618be          DCB      0x33,0x36,0x18,0xbe
00047c  26d1c18b          DCB      0x26,0xd1,0xc1,0x8b
000480  5c760a63          DCB      0x5c,0x76,0x0a,0x63
000484  a8785307          DCB      0xa8,0x78,0x53,0x07
000488  ae7fcdec          DCB      0xae,0x7f,0xcd,0xec
00048c  bf599b33          DCB      0xbf,0x59,0x9b,0x33
000490  2b06ce25          DCB      0x2b,0x06,0xce,0x25
000494  c59ff100          DCB      0xc5,0x9f,0xf1,0x00
000498  d7313b59          DCB      0xd7,0x31,0x3b,0x59
00049c  44571f71          DCB      0x44,0x57,0x1f,0x71
0004a0  ba3c34a4          DCB      0xba,0x3c,0x34,0xa4
0004a4  4494e08c          DCB      0x44,0x94,0xe0,0x8c
0004a8  7d53417f          DCB      0x7d,0x53,0x41,0x7f
0004ac  d6241be5          DCB      0xd6,0x24,0x1b,0xe5
0004b0  31205e27          DCB      0x31,0x20,0x5e,0x27
0004b4  0ddcfd2b          DCB      0x0d,0xdc,0xfd,0x2b
0004b8  1ba66eed          DCB      0x1b,0xa6,0x6e,0xed
0004bc  eabd2c3b          DCB      0xea,0xbd,0x2c,0x3b
0004c0  b052dc89          DCB      0xb0,0x52,0xdc,0x89
0004c4  f679b09b          DCB      0xf6,0x79,0xb0,0x9b
0004c8  0a66b2fe          DCB      0x0a,0x66,0xb2,0xfe
0004cc  881c5169          DCB      0x88,0x1c,0x51,0x69
0004d0  88208bab          DCB      0x88,0x20,0x8b,0xab
0004d4  e8e0811c          DCB      0xe8,0xe0,0x81,0x1c
0004d8  654a099b          DCB      0x65,0x4a,0x09,0x9b
0004dc  e76b1f9d          DCB      0xe7,0x6b,0x1f,0x9d
0004e0  6d0ebe2b          DCB      0x6d,0x0e,0xbe,0x2b
0004e4  890794a2          DCB      0x89,0x07,0x94,0xa2
0004e8  293db990          DCB      0x29,0x3d,0xb9,0x90
0004ec  d88e244f          DCB      0xd8,0x8e,0x24,0x4f
0004f0  1f6321ec          DCB      0x1f,0x63,0x21,0xec
0004f4  09148274          DCB      0x09,0x14,0x82,0x74
0004f8  04598ae4          DCB      0x04,0x59,0x8a,0xe4
0004fc  8694e10a          DCB      0x86,0x94,0xe1,0x0a

                          AREA ||.data||, DATA, ALIGN=2

                  recCrc8
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  recDataNum
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "User\\BleProtocol.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_BleProtocol_c_c76f1baf____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___13_BleProtocol_c_c76f1baf____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_BleProtocol_c_c76f1baf____REVSH|
#line 128
|__asm___13_BleProtocol_c_c76f1baf____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
