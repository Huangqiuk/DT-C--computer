; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_i2c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_i2c.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -IC:\Users\Administrator\AppData\Local\Arm\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_i2c.crf Libraries\src\gd32f10x_i2c.c]
                          THUMB

                          AREA ||i.i2c_ack_config||, CODE, READONLY, ALIGN=1

                  i2c_ack_config PROC
;;;200    */
;;;201    void i2c_ack_config(uint32_t i2c_periph, uint32_t ack)
000000  2901              CMP      r1,#1
;;;202    {
000002  d004              BEQ      |L1.14|
;;;203        if(I2C_ACK_ENABLE == ack){
;;;204            I2C_CTL0(i2c_periph) |= I2C_CTL0_ACKEN;
;;;205        }else{
;;;206            I2C_CTL0(i2c_periph) &= ~(I2C_CTL0_ACKEN);
000004  6801              LDR      r1,[r0,#0]
000006  f4216180          BIC      r1,r1,#0x400
00000a  6001              STR      r1,[r0,#0]
;;;207        }
;;;208    }
00000c  4770              BX       lr
                  |L1.14|
00000e  6801              LDR      r1,[r0,#0]            ;204
000010  f4416180          ORR      r1,r1,#0x400          ;204
000014  6001              STR      r1,[r0,#0]            ;204
000016  4770              BX       lr
;;;209    
                          ENDP


                          AREA ||i.i2c_ackpos_config||, CODE, READONLY, ALIGN=1

                  i2c_ackpos_config PROC
;;;219    */
;;;220    void i2c_ackpos_config(uint32_t i2c_periph, uint32_t pos)
000000  2900              CMP      r1,#0
;;;221    {
000002  d004              BEQ      |L2.14|
;;;222        /* configure I2C POAP position */
;;;223        if(I2C_ACKPOS_NEXT == pos){
;;;224            I2C_CTL0(i2c_periph) |= I2C_CTL0_POAP;
;;;225        }else{
;;;226            I2C_CTL0(i2c_periph) &= ~(I2C_CTL0_POAP);
000004  6801              LDR      r1,[r0,#0]
000006  f4216100          BIC      r1,r1,#0x800
00000a  6001              STR      r1,[r0,#0]
;;;227        }
;;;228    }
00000c  4770              BX       lr
                  |L2.14|
00000e  6801              LDR      r1,[r0,#0]            ;224
000010  f4416100          ORR      r1,r1,#0x800          ;224
000014  6001              STR      r1,[r0,#0]            ;224
000016  4770              BX       lr
;;;229    
                          ENDP


                          AREA ||i.i2c_clock_config||, CODE, READONLY, ALIGN=2

                  i2c_clock_config PROC
;;;86     */
;;;87     void i2c_clock_config(uint32_t i2c_periph, uint32_t clkspeed, uint32_t dutycyc)
000000  b570              PUSH     {r4-r6,lr}
;;;88     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;89         uint32_t pclk1, clkc, freq, risetime;
;;;90         uint32_t temp;
;;;91         
;;;92         pclk1 = rcu_clock_freq_get(CK_APB1);
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       rcu_clock_freq_get
;;;93         /* I2C peripheral clock frequency */
;;;94         freq = (uint32_t)(pclk1/1000000U);
00000e  4a2a              LDR      r2,|L3.184|
000010  fbb0f1f2          UDIV     r1,r0,r2
;;;95         if(freq >= I2CCLK_MAX){
000014  2936              CMP      r1,#0x36
000016  d300              BCC      |L3.26|
;;;96             freq = I2CCLK_MAX;
000018  2136              MOVS     r1,#0x36
                  |L3.26|
;;;97         }
;;;98         temp = I2C_CTL1(i2c_periph);
00001a  6863              LDR      r3,[r4,#4]
;;;99         temp &= ~I2C_CTL1_I2CCLK;
00001c  f023033f          BIC      r3,r3,#0x3f
;;;100        temp |= freq;
000020  430b              ORRS     r3,r3,r1
;;;101        
;;;102        I2C_CTL1(i2c_periph) = temp;
000022  6063              STR      r3,[r4,#4]
;;;103        
;;;104        if(100000U >= clkspeed){
000024  4b25              LDR      r3,|L3.188|
000026  429d              CMP      r5,r3
000028  d819              BHI      |L3.94|
;;;105            /* the maximum SCL rise time is 1000ns in standard mode */
;;;106            risetime = (uint32_t)((pclk1/1000000U)+1U);
00002a  fbb0f1f2          UDIV     r1,r0,r2
00002e  1c49              ADDS     r1,r1,#1
;;;107            if(risetime >= I2CCLK_MAX){
000030  2936              CMP      r1,#0x36
000032  d302              BCC      |L3.58|
;;;108                I2C_RT(i2c_periph) = I2CCLK_MAX;
000034  2136              MOVS     r1,#0x36
000036  6221              STR      r1,[r4,#0x20]
000038  e005              B        |L3.70|
                  |L3.58|
;;;109            }else if(risetime <= I2CCLK_MIN){
00003a  2902              CMP      r1,#2
00003c  d802              BHI      |L3.68|
;;;110                I2C_RT(i2c_periph) = I2CCLK_MIN;
00003e  2102              MOVS     r1,#2
000040  6221              STR      r1,[r4,#0x20]
000042  e000              B        |L3.70|
                  |L3.68|
;;;111            }else{
;;;112                I2C_RT(i2c_periph) = risetime;
000044  6221              STR      r1,[r4,#0x20]
                  |L3.70|
;;;113            }
;;;114            clkc = (uint32_t)(pclk1/(clkspeed*2U)); 
000046  0069              LSLS     r1,r5,#1
000048  fbb0f0f1          UDIV     r0,r0,r1
;;;115            if(clkc < 0x04U){
00004c  2804              CMP      r0,#4
00004e  d200              BCS      |L3.82|
;;;116                /* the CLKC in standard mode minmum value is 4 */
;;;117                clkc = 0x04U;
000050  2004              MOVS     r0,#4
                  |L3.82|
;;;118            }
;;;119            I2C_CKCFG(i2c_periph) |= (I2C_CKCFG_CLKC & clkc);
000052  69e1              LDR      r1,[r4,#0x1c]
000054  f3c0000b          UBFX     r0,r0,#0,#12
000058  4301              ORRS     r1,r1,r0
00005a  61e1              STR      r1,[r4,#0x1c]
                  |L3.92|
;;;120    
;;;121        }else if(400000U >= clkspeed){
;;;122            /* the maximum SCL rise time is 300ns in fast mode */
;;;123            I2C_RT(i2c_periph) = (uint32_t)(((freq*(uint32_t)300U)/(uint32_t)1000U)+(uint32_t)1U);
;;;124            if(I2C_DTCY_2 == dutycyc){
;;;125                /* I2C duty cycle is 2 */
;;;126                clkc = (uint32_t)(pclk1/(clkspeed*3U));
;;;127                I2C_CKCFG(i2c_periph) &= ~I2C_CKCFG_DTCY;
;;;128            }else{
;;;129                /* I2C duty cycle is 16/9 */
;;;130                clkc = (uint32_t)(pclk1/(clkspeed*25U));
;;;131                I2C_CKCFG(i2c_periph) |= I2C_CKCFG_DTCY;
;;;132            }
;;;133            if(0U == (clkc & I2C_CKCFG_CLKC)){
;;;134                /* the CLKC in fast mode minmum value is 1 */
;;;135                clkc |= 0x0001U;  
;;;136            }
;;;137            I2C_CKCFG(i2c_periph) |= I2C_CKCFG_FAST;
;;;138            I2C_CKCFG(i2c_periph) |= clkc;
;;;139        }else{
;;;140        }
;;;141    }
00005c  bd70              POP      {r4-r6,pc}
                  |L3.94|
00005e  4a18              LDR      r2,|L3.192|
000060  4295              CMP      r5,r2                 ;121
000062  d8fb              BHI      |L3.92|
000064  f44f7296          MOV      r2,#0x12c             ;123
000068  4351              MULS     r1,r2,r1              ;123
00006a  f44f727a          MOV      r2,#0x3e8             ;123
00006e  fbb1f1f2          UDIV     r1,r1,r2              ;123
000072  1c49              ADDS     r1,r1,#1              ;123
000074  6221              STR      r1,[r4,#0x20]         ;123
000076  b166              CBZ      r6,|L3.146|
000078  eb0501c5          ADD      r1,r5,r5,LSL #3       ;130
00007c  eb011105          ADD      r1,r1,r5,LSL #4       ;130
000080  fbb0f0f1          UDIV     r0,r0,r1              ;130
000084  69e1              LDR      r1,[r4,#0x1c]         ;131
000086  f4414180          ORR      r1,r1,#0x4000         ;131
00008a  61e1              STR      r1,[r4,#0x1c]         ;131
                  |L3.140|
00008c  0501              LSLS     r1,r0,#20             ;133
00008e  d009              BEQ      |L3.164|
000090  e00a              B        |L3.168|
                  |L3.146|
000092  eb050145          ADD      r1,r5,r5,LSL #1       ;126
000096  fbb0f0f1          UDIV     r0,r0,r1              ;126
00009a  69e1              LDR      r1,[r4,#0x1c]         ;127
00009c  f4214180          BIC      r1,r1,#0x4000         ;127
0000a0  61e1              STR      r1,[r4,#0x1c]         ;127
0000a2  e7f3              B        |L3.140|
                  |L3.164|
0000a4  f0400001          ORR      r0,r0,#1              ;135
                  |L3.168|
0000a8  69e1              LDR      r1,[r4,#0x1c]         ;137
0000aa  f4414100          ORR      r1,r1,#0x8000         ;137
0000ae  61e1              STR      r1,[r4,#0x1c]         ;137
0000b0  69e1              LDR      r1,[r4,#0x1c]         ;138
0000b2  4301              ORRS     r1,r1,r0              ;138
0000b4  61e1              STR      r1,[r4,#0x1c]         ;138
0000b6  bd70              POP      {r4-r6,pc}
;;;142    
                          ENDP

                  |L3.184|
                          DCD      0x000f4240
                  |L3.188|
                          DCD      0x000186a0
                  |L3.192|
                          DCD      0x00061a80

                          AREA ||i.i2c_data_receive||, CODE, READONLY, ALIGN=1

                  i2c_data_receive PROC
;;;339    */
;;;340    uint8_t i2c_data_receive(uint32_t i2c_periph)
000000  6900              LDR      r0,[r0,#0x10]
;;;341    {
;;;342        return (uint8_t)DATA_RECV(I2C_DATA(i2c_periph));
000002  b2c0              UXTB     r0,r0
;;;343    }
000004  4770              BX       lr
;;;344    
                          ENDP


                          AREA ||i.i2c_data_transmit||, CODE, READONLY, ALIGN=1

                  i2c_data_transmit PROC
;;;328    */
;;;329    void i2c_data_transmit(uint32_t i2c_periph, uint8_t data)
000000  6101              STR      r1,[r0,#0x10]
;;;330    {
;;;331        I2C_DATA(i2c_periph) = DATA_TRANS(data);
;;;332    }
000002  4770              BX       lr
;;;333    
                          ENDP


                          AREA ||i.i2c_deinit||, CODE, READONLY, ALIGN=2

                  i2c_deinit PROC
;;;57     */
;;;58     void i2c_deinit(uint32_t i2c_periph)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60         switch(i2c_periph){
000002  490d              LDR      r1,|L6.56|
000004  1840              ADDS     r0,r0,r1
000006  d00c              BEQ      |L6.34|
000008  f5b06f80          CMP      r0,#0x400
00000c  d113              BNE      |L6.54|
;;;61         case I2C0:
;;;62             /* reset I2C0 */
;;;63             rcu_periph_reset_enable(RCU_I2C0RST);
;;;64             rcu_periph_reset_disable(RCU_I2C0RST);
;;;65             break;
;;;66         case I2C1:
;;;67             /* reset I2C1 */
;;;68             rcu_periph_reset_enable(RCU_I2C1RST);
00000e  f2404416          MOV      r4,#0x416
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       rcu_periph_reset_enable
;;;69             rcu_periph_reset_disable(RCU_I2C1RST);
000018  4620              MOV      r0,r4
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L6.34|
000022  f2404415          MOV      r4,#0x415             ;63
000026  4620              MOV      r0,r4                 ;63
000028  f7fffffe          BL       rcu_periph_reset_enable
00002c  4620              MOV      r0,r4                 ;64
00002e  e8bd4010          POP      {r4,lr}               ;64
000032  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L6.54|
;;;70             break;
;;;71         default:
;;;72             break;
;;;73         }
;;;74     }
000036  bd10              POP      {r4,pc}
;;;75     
                          ENDP

                  |L6.56|
                          DCD      0xbfffac00

                          AREA ||i.i2c_disable||, CODE, READONLY, ALIGN=1

                  i2c_disable PROC
;;;294    */
;;;295    void i2c_disable(uint32_t i2c_periph)
000000  6801              LDR      r1,[r0,#0]
;;;296    {
;;;297        I2C_CTL0(i2c_periph) &= ~(I2C_CTL0_I2CEN);
000002  f0210101          BIC      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;298    }
000008  4770              BX       lr
;;;299    
                          ENDP


                          AREA ||i.i2c_dma_enable||, CODE, READONLY, ALIGN=1

                  i2c_dma_enable PROC
;;;354    */
;;;355    void i2c_dma_enable(uint32_t i2c_periph, uint32_t dmastate)
000000  6842              LDR      r2,[r0,#4]
;;;356    {
;;;357        /* configure I2C DMA function */
;;;358        uint32_t ctl = 0U;
;;;359        
;;;360        ctl = I2C_CTL1(i2c_periph);
;;;361        ctl &= ~(I2C_CTL1_DMAON); 
000002  f4226200          BIC      r2,r2,#0x800
;;;362        ctl |= dmastate;
000006  430a              ORRS     r2,r2,r1
;;;363        I2C_CTL1(i2c_periph) = ctl;
000008  6042              STR      r2,[r0,#4]
;;;364    }
00000a  4770              BX       lr
;;;365    
                          ENDP


                          AREA ||i.i2c_dma_last_transfer_config||, CODE, READONLY, ALIGN=1

                  i2c_dma_last_transfer_config PROC
;;;375    */
;;;376    void i2c_dma_last_transfer_config(uint32_t i2c_periph, uint32_t dmalast)
000000  6842              LDR      r2,[r0,#4]
;;;377    {
;;;378        /* configure DMA last transfer */
;;;379        uint32_t ctl = 0U;
;;;380        
;;;381        ctl = I2C_CTL1(i2c_periph);
;;;382        ctl &= ~(I2C_CTL1_DMALST); 
000002  f4225280          BIC      r2,r2,#0x1000
;;;383        ctl |= dmalast;
000006  430a              ORRS     r2,r2,r1
;;;384        I2C_CTL1(i2c_periph) = ctl;
000008  6042              STR      r2,[r0,#4]
;;;385    }
00000a  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.i2c_dualaddr_disable||, CODE, READONLY, ALIGN=1

                  i2c_dualaddr_disable PROC
;;;272    */
;;;273    void i2c_dualaddr_disable(uint32_t i2c_periph)
000000  68c1              LDR      r1,[r0,#0xc]
;;;274    {
;;;275        I2C_SADDR1(i2c_periph) &= ~(I2C_SADDR1_DUADEN);
000002  f0210101          BIC      r1,r1,#1
000006  60c1              STR      r1,[r0,#0xc]
;;;276    }
000008  4770              BX       lr
;;;277    
                          ENDP


                          AREA ||i.i2c_dualaddr_enable||, CODE, READONLY, ALIGN=1

                  i2c_dualaddr_enable PROC
;;;259    */
;;;260    void i2c_dualaddr_enable(uint32_t i2c_periph, uint32_t addr)
000000  f00101fe          AND      r1,r1,#0xfe
;;;261    {
;;;262        /* configure address */
;;;263        addr = addr & I2C_ADDRESS2_MASK;
;;;264        I2C_SADDR1(i2c_periph) = (I2C_SADDR1_DUADEN | addr);
000004  f0410101          ORR      r1,r1,#1
000008  60c1              STR      r1,[r0,#0xc]
;;;265    }
00000a  4770              BX       lr
;;;266    
                          ENDP


                          AREA ||i.i2c_enable||, CODE, READONLY, ALIGN=1

                  i2c_enable PROC
;;;283    */
;;;284    void i2c_enable(uint32_t i2c_periph)
000000  6801              LDR      r1,[r0,#0]
;;;285    {
;;;286        I2C_CTL0(i2c_periph) |= I2C_CTL0_I2CEN;
000002  f0410101          ORR      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;287    }
000008  4770              BX       lr
;;;288    
                          ENDP


                          AREA ||i.i2c_flag_clear||, CODE, READONLY, ALIGN=1

                  i2c_flag_clear PROC
;;;598    */
;;;599    void i2c_flag_clear(uint32_t i2c_periph, i2c_flag_enum flag)
000000  f5a162a0          SUB      r2,r1,#0x500
;;;600    {
;;;601        if(I2C_FLAG_ADDSEND == flag){
000004  3a01              SUBS     r2,#1
000006  d009              BEQ      |L13.28|
;;;602            /* read I2C_STAT0 and then read I2C_STAT1 to clear ADDSEND */
;;;603            I2C_STAT0(i2c_periph);
;;;604            I2C_STAT1(i2c_periph);
;;;605        }else{
;;;606            I2C_REG_VAL(i2c_periph, flag) &= ~BIT(I2C_BIT_POS(flag));
000008  eb001091          ADD      r0,r0,r1,LSR #6
00000c  6802              LDR      r2,[r0,#0]
00000e  f001031f          AND      r3,r1,#0x1f
000012  2101              MOVS     r1,#1
000014  4099              LSLS     r1,r1,r3
000016  438a              BICS     r2,r2,r1
000018  6002              STR      r2,[r0,#0]
;;;607        }
;;;608    }
00001a  4770              BX       lr
                  |L13.28|
00001c  6941              LDR      r1,[r0,#0x14]         ;603
00001e  6980              LDR      r0,[r0,#0x18]         ;604
000020  4770              BX       lr
;;;609    
                          ENDP


                          AREA ||i.i2c_flag_get||, CODE, READONLY, ALIGN=1

                  i2c_flag_get PROC
;;;573    */
;;;574    FlagStatus i2c_flag_get(uint32_t i2c_periph, i2c_flag_enum flag)
000000  eb001091          ADD      r0,r0,r1,LSR #6
;;;575    {
;;;576        if(RESET != (I2C_REG_VAL(i2c_periph, flag) & BIT(I2C_BIT_POS(flag)))){
000004  6800              LDR      r0,[r0,#0]
000006  f001021f          AND      r2,r1,#0x1f
00000a  2101              MOVS     r1,#1
00000c  4091              LSLS     r1,r1,r2
00000e  4208              TST      r0,r1
000010  d001              BEQ      |L14.22|
;;;577            return SET;
000012  2001              MOVS     r0,#1
;;;578        }else{
;;;579            return RESET;
;;;580        }
;;;581    }
000014  4770              BX       lr
                  |L14.22|
000016  2000              MOVS     r0,#0                 ;579
000018  4770              BX       lr
;;;582    
                          ENDP


                          AREA ||i.i2c_interrupt_disable||, CODE, READONLY, ALIGN=1

                  i2c_interrupt_disable PROC
;;;636    */
;;;637    void i2c_interrupt_disable(uint32_t i2c_periph, i2c_interrupt_enum interrupt)
000000  eb001091          ADD      r0,r0,r1,LSR #6
;;;638    {
;;;639        I2C_REG_VAL(i2c_periph, interrupt) &= ~BIT(I2C_BIT_POS(interrupt));
000004  6802              LDR      r2,[r0,#0]
000006  f001031f          AND      r3,r1,#0x1f
00000a  2101              MOVS     r1,#1
00000c  4099              LSLS     r1,r1,r3
00000e  438a              BICS     r2,r2,r1
000010  6002              STR      r2,[r0,#0]
;;;640    }
000012  4770              BX       lr
;;;641    
                          ENDP


                          AREA ||i.i2c_interrupt_enable||, CODE, READONLY, ALIGN=1

                  i2c_interrupt_enable PROC
;;;620    */
;;;621    void i2c_interrupt_enable(uint32_t i2c_periph, i2c_interrupt_enum interrupt)
000000  eb001091          ADD      r0,r0,r1,LSR #6
;;;622    {
;;;623        I2C_REG_VAL(i2c_periph, interrupt) |= BIT(I2C_BIT_POS(interrupt));
000004  6802              LDR      r2,[r0,#0]
000006  f001031f          AND      r3,r1,#0x1f
00000a  2101              MOVS     r1,#1
00000c  4099              LSLS     r1,r1,r3
00000e  430a              ORRS     r2,r2,r1
000010  6002              STR      r2,[r0,#0]
;;;624    }
000012  4770              BX       lr
;;;625    
                          ENDP


                          AREA ||i.i2c_interrupt_flag_clear||, CODE, READONLY, ALIGN=2

                  i2c_interrupt_flag_clear PROC
;;;705    */
;;;706    void i2c_interrupt_flag_clear(uint32_t i2c_periph, i2c_interrupt_flag_enum int_flag)
000000  4a07              LDR      r2,|L17.32|
;;;707    {
;;;708        if(I2C_INT_FLAG_ADDSEND == int_flag){
000002  4291              CMP      r1,r2
000004  d102              BNE      |L17.12|
;;;709            /* read I2C_STAT0 and then read I2C_STAT1 to clear ADDSEND */
;;;710            I2C_STAT0(i2c_periph);
000006  6941              LDR      r1,[r0,#0x14]
;;;711            I2C_STAT1(i2c_periph);
000008  6980              LDR      r0,[r0,#0x18]
;;;712        }else{
;;;713            I2C_REG_VAL2(i2c_periph, int_flag) &= ~BIT(I2C_BIT_POS2(int_flag));
;;;714        }
;;;715    }
00000a  4770              BX       lr
                  |L17.12|
00000c  eb005091          ADD      r0,r0,r1,LSR #22      ;713
000010  6802              LDR      r2,[r0,#0]            ;713
000012  f3c14304          UBFX     r3,r1,#16,#5          ;713
000016  2101              MOVS     r1,#1                 ;713
000018  4099              LSLS     r1,r1,r3              ;713
00001a  438a              BICS     r2,r2,r1              ;713
00001c  6002              STR      r2,[r0,#0]            ;713
00001e  4770              BX       lr
                          ENDP

                  |L17.32|
                          DCD      0x05010109

                          AREA ||i.i2c_interrupt_flag_get||, CODE, READONLY, ALIGN=2

                  i2c_interrupt_flag_get PROC
;;;663    */
;;;664    FlagStatus i2c_interrupt_flag_get(uint32_t i2c_periph, i2c_interrupt_flag_enum int_flag)
000000  b570              PUSH     {r4-r6,lr}
;;;665    {
;;;666        uint32_t intenable = 0U, flagstatus = 0U, bufie;
;;;667        
;;;668        /* check BUFIE */
;;;669        bufie = I2C_CTL1(i2c_periph)&I2C_CTL1_BUFIE;
000002  6842              LDR      r2,[r0,#4]
000004  f4026380          AND      r3,r2,#0x400
;;;670        
;;;671        /* get the interrupt enable bit status */
;;;672        intenable = (I2C_REG_VAL(i2c_periph, int_flag) & BIT(I2C_BIT_POS(int_flag)));
000008  f3c11289          UBFX     r2,r1,#6,#10
00000c  5882              LDR      r2,[r0,r2]
00000e  f001051f          AND      r5,r1,#0x1f
000012  2601              MOVS     r6,#1
000014  fa06f405          LSL      r4,r6,r5
000018  4022              ANDS     r2,r2,r4
;;;673        /* get the corresponding flag bit status */
;;;674        flagstatus = (I2C_REG_VAL2(i2c_periph, int_flag) & BIT(I2C_BIT_POS2(int_flag)));
00001a  eb005091          ADD      r0,r0,r1,LSR #22
00001e  6800              LDR      r0,[r0,#0]
000020  f3c14504          UBFX     r5,r1,#16,#5
000024  fa06f405          LSL      r4,r6,r5
000028  4020              ANDS     r0,r0,r4
;;;675    
;;;676        if((I2C_INT_FLAG_RBNE == int_flag) || (I2C_INT_FLAG_TBE == int_flag)){
00002a  4c08              LDR      r4,|L18.76|
00002c  42a1              CMP      r1,r4
00002e  d002              BEQ      |L18.54|
000030  4c07              LDR      r4,|L18.80|
000032  42a1              CMP      r1,r4
000034  d104              BNE      |L18.64|
                  |L18.54|
;;;677            if(intenable && bufie){
000036  b112              CBZ      r2,|L18.62|
000038  b10b              CBZ      r3,|L18.62|
;;;678                intenable = 1U;                       
00003a  2201              MOVS     r2,#1
00003c  e000              B        |L18.64|
                  |L18.62|
;;;679            }else{
;;;680                intenable = 0U;
00003e  2200              MOVS     r2,#0
                  |L18.64|
;;;681            }
;;;682        }
;;;683        if((0U != flagstatus) && (0U != intenable)){
000040  b110              CBZ      r0,|L18.72|
000042  b10a              CBZ      r2,|L18.72|
;;;684            return SET;
000044  2001              MOVS     r0,#1
;;;685        }else{
;;;686            return RESET; 
;;;687        }
;;;688    }
000046  bd70              POP      {r4-r6,pc}
                  |L18.72|
000048  2000              MOVS     r0,#0                 ;686
00004a  bd70              POP      {r4-r6,pc}
;;;689    
                          ENDP

                  |L18.76|
                          DCD      0x05060109
                  |L18.80|
                          DCD      0x05070109

                          AREA ||i.i2c_master_addressing||, CODE, READONLY, ALIGN=1

                  i2c_master_addressing PROC
;;;240    */
;;;241    void i2c_master_addressing(uint32_t i2c_periph, uint32_t addr, uint32_t trandirection)
000000  1c92              ADDS     r2,r2,#2
;;;242    {
000002  d003              BEQ      |L19.12|
;;;243        /* master is a transmitter or a receiver */
;;;244        if(I2C_TRANSMITTER == trandirection){
;;;245            addr = addr & I2C_TRANSMITTER;
;;;246        }else{
;;;247            addr = addr | I2C_RECEIVER;
000004  f0410101          ORR      r1,r1,#1
                  |L19.8|
;;;248        }
;;;249        /* send slave address */
;;;250        I2C_DATA(i2c_periph) = addr;
000008  6101              STR      r1,[r0,#0x10]
;;;251    }
00000a  4770              BX       lr
                  |L19.12|
00000c  f0210101          BIC      r1,r1,#1              ;245
000010  e7fa              B        |L19.8|
;;;252    
                          ENDP


                          AREA ||i.i2c_mode_addr_config||, CODE, READONLY, ALIGN=1

                  i2c_mode_addr_config PROC
;;;157    */
;;;158    void i2c_mode_addr_config(uint32_t i2c_periph, uint32_t mode, uint32_t addformat, uint32_t addr)
000000  b510              PUSH     {r4,lr}
;;;159    {
;;;160        /* SMBus/I2C mode selected */
;;;161        uint32_t ctl = 0U;
;;;162        
;;;163        ctl = I2C_CTL0(i2c_periph);
000002  6804              LDR      r4,[r0,#0]
;;;164        ctl &= ~(I2C_CTL0_SMBEN); 
000004  f0240402          BIC      r4,r4,#2
;;;165        ctl |= mode;
000008  430c              ORRS     r4,r4,r1
;;;166        I2C_CTL0(i2c_periph) = ctl;
00000a  6004              STR      r4,[r0,#0]
;;;167        /* configure address */
;;;168        addr = addr & I2C_ADDRESS_MASK;
00000c  f3c30109          UBFX     r1,r3,#0,#10
;;;169        I2C_SADDR0(i2c_periph) = (addformat | addr);
000010  430a              ORRS     r2,r2,r1
000012  6082              STR      r2,[r0,#8]
;;;170    }
000014  bd10              POP      {r4,pc}
;;;171    
                          ENDP


                          AREA ||i.i2c_pec_enable||, CODE, READONLY, ALIGN=1

                  i2c_pec_enable PROC
;;;459    */
;;;460    void i2c_pec_enable(uint32_t i2c_periph, uint32_t pecstate)
000000  6802              LDR      r2,[r0,#0]
;;;461    {
;;;462        /* on/off PEC calculation */
;;;463        uint32_t ctl = 0U;
;;;464        
;;;465        ctl = I2C_CTL0(i2c_periph);
;;;466        ctl &= ~(I2C_CTL0_PECEN);
000002  f0220220          BIC      r2,r2,#0x20
;;;467        ctl |= pecstate;
000006  430a              ORRS     r2,r2,r1
;;;468        I2C_CTL0(i2c_periph) = ctl;
000008  6002              STR      r2,[r0,#0]
;;;469    }
00000a  4770              BX       lr
;;;470    
                          ENDP


                          AREA ||i.i2c_pec_transfer_enable||, CODE, READONLY, ALIGN=1

                  i2c_pec_transfer_enable PROC
;;;480    */
;;;481    void i2c_pec_transfer_enable(uint32_t i2c_periph, uint32_t pecpara)
000000  6802              LDR      r2,[r0,#0]
;;;482    {
;;;483        /* whether to transfer PEC */
;;;484        uint32_t ctl = 0U;
;;;485        
;;;486        ctl = I2C_CTL0(i2c_periph);
;;;487        ctl &= ~(I2C_CTL0_PECTRANS);
000002  f4225280          BIC      r2,r2,#0x1000
;;;488        ctl |= pecpara;
000006  430a              ORRS     r2,r2,r1
;;;489        I2C_CTL0(i2c_periph) = ctl;
000008  6002              STR      r2,[r0,#0]
;;;490    }
00000a  4770              BX       lr
;;;491    
                          ENDP


                          AREA ||i.i2c_pec_value_get||, CODE, READONLY, ALIGN=1

                  i2c_pec_value_get PROC
;;;497    */
;;;498    uint8_t i2c_pec_value_get(uint32_t i2c_periph)
000000  6980              LDR      r0,[r0,#0x18]
;;;499    {
;;;500        return (uint8_t)((I2C_STAT1(i2c_periph) & I2C_STAT1_PECV)>>STAT1_PECV_OFFSET);
000002  f3c02007          UBFX     r0,r0,#8,#8
;;;501    }
000006  4770              BX       lr
;;;502    
                          ENDP


                          AREA ||i.i2c_slave_response_to_gcall_config||, CODE, READONLY, ALIGN=1

                  i2c_slave_response_to_gcall_config PROC
;;;417    */
;;;418    void i2c_slave_response_to_gcall_config(uint32_t i2c_periph, uint32_t gcallpara)
000000  6802              LDR      r2,[r0,#0]
;;;419    {
;;;420        /* configure slave response to a general call enable or disable */
;;;421        uint32_t ctl = 0U;
;;;422        
;;;423        ctl = I2C_CTL0(i2c_periph);
;;;424        ctl &= ~(I2C_CTL0_GCEN); 
000002  f0220240          BIC      r2,r2,#0x40
;;;425        ctl |= gcallpara;
000006  430a              ORRS     r2,r2,r1
;;;426        I2C_CTL0(i2c_periph) = ctl;
000008  6002              STR      r2,[r0,#0]
;;;427    }
00000a  4770              BX       lr
;;;428    
                          ENDP


                          AREA ||i.i2c_smbus_arp_enable||, CODE, READONLY, ALIGN=1

                  i2c_smbus_arp_enable PROC
;;;533    */
;;;534    void i2c_smbus_arp_enable(uint32_t i2c_periph, uint32_t arpstate)
000000  6802              LDR      r2,[r0,#0]
;;;535    {
;;;536        /* enable or disable I2C ARP protocol*/
;;;537        uint32_t ctl = 0U;
;;;538        
;;;539        ctl = I2C_CTL0(i2c_periph);
;;;540        ctl &= ~(I2C_CTL0_ARPEN);
000002  f0220210          BIC      r2,r2,#0x10
;;;541        ctl |= arpstate;
000006  430a              ORRS     r2,r2,r1
;;;542        I2C_CTL0(i2c_periph) = ctl;
000008  6002              STR      r2,[r0,#0]
;;;543    }
00000a  4770              BX       lr
;;;544    
                          ENDP


                          AREA ||i.i2c_smbus_issue_alert||, CODE, READONLY, ALIGN=1

                  i2c_smbus_issue_alert PROC
;;;512    */
;;;513    void i2c_smbus_issue_alert(uint32_t i2c_periph, uint32_t smbuspara)
000000  6802              LDR      r2,[r0,#0]
;;;514    {
;;;515        /* issue alert through SMBA pin configure*/
;;;516        uint32_t ctl = 0U;
;;;517        
;;;518        ctl = I2C_CTL0(i2c_periph);
;;;519        ctl &= ~(I2C_CTL0_SALT);
000002  f4225200          BIC      r2,r2,#0x2000
;;;520        ctl |= smbuspara;
000006  430a              ORRS     r2,r2,r1
;;;521        I2C_CTL0(i2c_periph) = ctl;
000008  6002              STR      r2,[r0,#0]
;;;522    }
00000a  4770              BX       lr
;;;523    
                          ENDP


                          AREA ||i.i2c_smbus_type_config||, CODE, READONLY, ALIGN=1

                  i2c_smbus_type_config PROC
;;;181    */
;;;182    void i2c_smbus_type_config(uint32_t i2c_periph, uint32_t type)
000000  2908              CMP      r1,#8
;;;183    {
000002  d004              BEQ      |L27.14|
;;;184        if(I2C_SMBUS_HOST == type){
;;;185            I2C_CTL0(i2c_periph) |= I2C_CTL0_SMBSEL;
;;;186        }else{
;;;187            I2C_CTL0(i2c_periph) &= ~(I2C_CTL0_SMBSEL);
000004  6801              LDR      r1,[r0,#0]
000006  f0210108          BIC      r1,r1,#8
00000a  6001              STR      r1,[r0,#0]
;;;188        }
;;;189    }
00000c  4770              BX       lr
                  |L27.14|
00000e  6801              LDR      r1,[r0,#0]            ;185
000010  f0410108          ORR      r1,r1,#8              ;185
000014  6001              STR      r1,[r0,#0]            ;185
000016  4770              BX       lr
;;;190    
                          ENDP


                          AREA ||i.i2c_software_reset_config||, CODE, READONLY, ALIGN=1

                  i2c_software_reset_config PROC
;;;438    */
;;;439    void i2c_software_reset_config(uint32_t i2c_periph, uint32_t sreset)
000000  6802              LDR      r2,[r0,#0]
;;;440    {
;;;441        /* modify CTL0 and configure software reset I2C state */
;;;442        uint32_t ctl = 0U;
;;;443        
;;;444        ctl = I2C_CTL0(i2c_periph);
;;;445        ctl &= ~(I2C_CTL0_SRESET); 
000002  f4224200          BIC      r2,r2,#0x8000
;;;446        ctl |= sreset;
000006  430a              ORRS     r2,r2,r1
;;;447        I2C_CTL0(i2c_periph) = ctl;
000008  6002              STR      r2,[r0,#0]
;;;448    }
00000a  4770              BX       lr
;;;449    
                          ENDP


                          AREA ||i.i2c_start_on_bus||, CODE, READONLY, ALIGN=1

                  i2c_start_on_bus PROC
;;;305    */
;;;306    void i2c_start_on_bus(uint32_t i2c_periph)
000000  6801              LDR      r1,[r0,#0]
;;;307    {
;;;308        I2C_CTL0(i2c_periph) |= I2C_CTL0_START;
000002  f4417180          ORR      r1,r1,#0x100
000006  6001              STR      r1,[r0,#0]
;;;309    }
000008  4770              BX       lr
;;;310    
                          ENDP


                          AREA ||i.i2c_stop_on_bus||, CODE, READONLY, ALIGN=1

                  i2c_stop_on_bus PROC
;;;316    */
;;;317    void i2c_stop_on_bus(uint32_t i2c_periph)
000000  6801              LDR      r1,[r0,#0]
;;;318    {
;;;319        I2C_CTL0(i2c_periph) |= I2C_CTL0_STOP;
000002  f4417100          ORR      r1,r1,#0x200
000006  6001              STR      r1,[r0,#0]
;;;320    }
000008  4770              BX       lr
;;;321    
                          ENDP


                          AREA ||i.i2c_stretch_scl_low_config||, CODE, READONLY, ALIGN=1

                  i2c_stretch_scl_low_config PROC
;;;396    */
;;;397    void i2c_stretch_scl_low_config(uint32_t i2c_periph, uint32_t stretchpara)
000000  6802              LDR      r2,[r0,#0]
;;;398    {
;;;399        /* configure I2C SCL strerching enable or disable */
;;;400        uint32_t ctl = 0U;
;;;401        
;;;402        ctl = I2C_CTL0(i2c_periph);
;;;403        ctl &= ~(I2C_CTL0_SS); 
000002  f0220280          BIC      r2,r2,#0x80
;;;404        ctl |= stretchpara;
000006  430a              ORRS     r2,r2,r1
;;;405        I2C_CTL0(i2c_periph) = ctl;
000008  6002              STR      r2,[r0,#0]
;;;406    }
00000a  4770              BX       lr
;;;407    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_i2c_c_60c11f87____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_i2c_c_60c11f87____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_i2c_c_60c11f87____REVSH|
#line 128
|__asm___14_gd32f10x_i2c_c_60c11f87____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
