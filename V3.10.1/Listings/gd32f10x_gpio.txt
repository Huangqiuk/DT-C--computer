; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -IC:\Users\Administrator\AppData\Local\Arm\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_gpio.crf Libraries\src\gd32f10x_gpio.c]
                          THUMB

                          AREA ||i.gpio_afio_deinit||, CODE, READONLY, ALIGN=1

                  gpio_afio_deinit PROC
;;;105    */
;;;106    void gpio_afio_deinit(void)
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108        rcu_periph_reset_enable(RCU_AFRST);
000002  f44f7440          MOV      r4,#0x300
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       rcu_periph_reset_enable
;;;109        rcu_periph_reset_disable(RCU_AFRST);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      rcu_periph_reset_disable
;;;110    }
;;;111    
                          ENDP


                          AREA ||i.gpio_bit_reset||, CODE, READONLY, ALIGN=1

                  gpio_bit_reset PROC
;;;224    */
;;;225    void gpio_bit_reset(uint32_t gpio_periph, uint32_t pin)
000000  6141              STR      r1,[r0,#0x14]
;;;226    {
;;;227        GPIO_BC(gpio_periph) = (uint32_t)pin;
;;;228    }
000002  4770              BX       lr
;;;229    
                          ENDP


                          AREA ||i.gpio_bit_set||, CODE, READONLY, ALIGN=1

                  gpio_bit_set PROC
;;;210    */
;;;211    void gpio_bit_set(uint32_t gpio_periph, uint32_t pin)
000000  6101              STR      r1,[r0,#0x10]
;;;212    {
;;;213        GPIO_BOP(gpio_periph) = (uint32_t)pin;
;;;214    }
000002  4770              BX       lr
;;;215    
                          ENDP


                          AREA ||i.gpio_bit_write||, CODE, READONLY, ALIGN=1

                  gpio_bit_write PROC
;;;241    */
;;;242    void gpio_bit_write(uint32_t gpio_periph, uint32_t pin, bit_status bit_value)
000000  2a00              CMP      r2,#0
;;;243    {
000002  d001              BEQ      |L4.8|
;;;244        if(RESET != bit_value){
;;;245            GPIO_BOP(gpio_periph) = (uint32_t)pin;
000004  6101              STR      r1,[r0,#0x10]
;;;246        }else{
;;;247            GPIO_BC(gpio_periph) = (uint32_t)pin;
;;;248        }
;;;249    }
000006  4770              BX       lr
                  |L4.8|
000008  6141              STR      r1,[r0,#0x14]         ;247
00000a  4770              BX       lr
;;;250    
                          ENDP


                          AREA ||i.gpio_deinit||, CODE, READONLY, ALIGN=2

                  gpio_deinit PROC
;;;56     */
;;;57     void gpio_deinit(uint32_t gpio_periph)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59         switch(gpio_periph){
000002  4a2e              LDR      r2,|L5.188|
000004  1a81              SUBS     r1,r0,r2
000006  1513              ASRS     r3,r2,#20
000008  14d4              ASRS     r4,r2,#19
00000a  4290              CMP      r0,r2
00000c  d036              BEQ      |L5.124|
00000e  dc10              BGT      |L5.50|
000010  492b              LDR      r1,|L5.192|
000012  1840              ADDS     r0,r0,r1
000014  d01e              BEQ      |L5.84|
000016  4298              CMP      r0,r3
000018  d026              BEQ      |L5.104|
00001a  42a0              CMP      r0,r4
00001c  d14c              BNE      |L5.184|
;;;60         case GPIOA:
;;;61             /* reset GPIOA */
;;;62             rcu_periph_reset_enable(RCU_GPIOARST);
;;;63             rcu_periph_reset_disable(RCU_GPIOARST);
;;;64             break;
;;;65         case GPIOB:
;;;66             /* reset GPIOB */
;;;67             rcu_periph_reset_enable(RCU_GPIOBRST);
;;;68             rcu_periph_reset_disable(RCU_GPIOBRST);
;;;69             break;
;;;70         case GPIOC:
;;;71             /* reset GPIOC */
;;;72             rcu_periph_reset_enable(RCU_GPIOCRST);
00001e  f44f7441          MOV      r4,#0x304
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       rcu_periph_reset_enable
;;;73             rcu_periph_reset_disable(RCU_GPIOCRST);
000028  4620              MOV      r0,r4
00002a  e8bd4010          POP      {r4,lr}
00002e  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L5.50|
000032  4299              CMP      r1,r3                 ;59
000034  d02c              BEQ      |L5.144|
000036  42a1              CMP      r1,r4                 ;59
000038  d034              BEQ      |L5.164|
00003a  f5b16f40          CMP      r1,#0xc00             ;59
00003e  d13b              BNE      |L5.184|
;;;74             break;
;;;75         case GPIOD:
;;;76             /* reset GPIOD */
;;;77             rcu_periph_reset_enable(RCU_GPIODRST);
;;;78             rcu_periph_reset_disable(RCU_GPIODRST);
;;;79             break;
;;;80         case GPIOE:
;;;81             /* reset GPIOE */
;;;82             rcu_periph_reset_enable(RCU_GPIOERST);
;;;83             rcu_periph_reset_disable(RCU_GPIOERST);
;;;84             break;
;;;85         case GPIOF:
;;;86             /* reset GPIOF */
;;;87             rcu_periph_reset_enable(RCU_GPIOFRST);
;;;88             rcu_periph_reset_disable(RCU_GPIOFRST);
;;;89             break;
;;;90         case GPIOG:
;;;91             /* reset GPIOG */
;;;92             rcu_periph_reset_enable(RCU_GPIOGRST);
000040  f44f7442          MOV      r4,#0x308
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       rcu_periph_reset_enable
;;;93             rcu_periph_reset_disable(RCU_GPIOGRST);
00004a  4620              MOV      r0,r4
00004c  e8bd4010          POP      {r4,lr}
000050  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L5.84|
000054  f2403402          MOV      r4,#0x302             ;62
000058  4620              MOV      r0,r4                 ;62
00005a  f7fffffe          BL       rcu_periph_reset_enable
00005e  4620              MOV      r0,r4                 ;63
000060  e8bd4010          POP      {r4,lr}               ;63
000064  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L5.104|
000068  f2403403          MOV      r4,#0x303             ;67
00006c  4620              MOV      r0,r4                 ;67
00006e  f7fffffe          BL       rcu_periph_reset_enable
000072  4620              MOV      r0,r4                 ;68
000074  e8bd4010          POP      {r4,lr}               ;68
000078  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L5.124|
00007c  f2403405          MOV      r4,#0x305             ;77
000080  4620              MOV      r0,r4                 ;77
000082  f7fffffe          BL       rcu_periph_reset_enable
000086  4620              MOV      r0,r4                 ;78
000088  e8bd4010          POP      {r4,lr}               ;78
00008c  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L5.144|
000090  f2403406          MOV      r4,#0x306             ;82
000094  4620              MOV      r0,r4                 ;82
000096  f7fffffe          BL       rcu_periph_reset_enable
00009a  4620              MOV      r0,r4                 ;83
00009c  e8bd4010          POP      {r4,lr}               ;83
0000a0  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L5.164|
0000a4  f2403407          MOV      r4,#0x307             ;87
0000a8  4620              MOV      r0,r4                 ;87
0000aa  f7fffffe          BL       rcu_periph_reset_enable
0000ae  4620              MOV      r0,r4                 ;88
0000b0  e8bd4010          POP      {r4,lr}               ;88
0000b4  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L5.184|
;;;94             break;
;;;95         default:
;;;96             break;
;;;97         }
;;;98     }
0000b8  bd10              POP      {r4,pc}
;;;99     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L5.188|
                          DCD      0x40011400
                  |L5.192|
                          DCD      0xbffef800

                          AREA ||i.gpio_event_output_config||, CODE, READONLY, ALIGN=2

                  gpio_event_output_config PROC
;;;463    */
;;;464    void gpio_event_output_config(uint8_t output_port, uint8_t output_pin)
000000  4b04              LDR      r3,|L6.20|
;;;465    {
;;;466        uint32_t reg = 0U;
;;;467        reg = AFIO_EC;
000002  681a              LDR      r2,[r3,#0]
;;;468        
;;;469        /* clear AFIO_EC_PORT and AFIO_EC_PIN bits */
;;;470        reg &= (uint32_t)(~(AFIO_EC_PORT|AFIO_EC_PIN));
000004  f022027f          BIC      r2,r2,#0x7f
;;;471        
;;;472        reg |= (uint32_t)((uint32_t)output_port << GPIO_OUTPUT_PORT_OFFSET);
000008  ea421000          ORR      r0,r2,r0,LSL #4
;;;473        reg |= (uint32_t)output_pin;
00000c  4308              ORRS     r0,r0,r1
;;;474        
;;;475        AFIO_EC = reg;
00000e  6018              STR      r0,[r3,#0]
;;;476    }
000010  4770              BX       lr
;;;477    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40010000

                          AREA ||i.gpio_event_output_disable||, CODE, READONLY, ALIGN=2

                  gpio_event_output_disable PROC
;;;494    */
;;;495    void gpio_event_output_disable(void)
000000  4802              LDR      r0,|L7.12|
;;;496    {
;;;497        AFIO_EC &= (uint32_t)(~AFIO_EC_EOE);
000002  6801              LDR      r1,[r0,#0]
000004  f0210180          BIC      r1,r1,#0x80
000008  6001              STR      r1,[r0,#0]
;;;498    }
00000a  4770              BX       lr
;;;499    
                          ENDP

                  |L7.12|
                          DCD      0x40010000

                          AREA ||i.gpio_event_output_enable||, CODE, READONLY, ALIGN=2

                  gpio_event_output_enable PROC
;;;483    */
;;;484    void gpio_event_output_enable(void)
000000  4802              LDR      r0,|L8.12|
;;;485    {
;;;486        AFIO_EC |= AFIO_EC_EOE;
000002  6801              LDR      r1,[r0,#0]
000004  f0410180          ORR      r1,r1,#0x80
000008  6001              STR      r1,[r0,#0]
;;;487    }
00000a  4770              BX       lr
;;;488    
                          ENDP

                  |L8.12|
                          DCD      0x40010000

                          AREA ||i.gpio_exti_source_select||, CODE, READONLY, ALIGN=2

                  gpio_exti_source_select PROC
;;;421    */
;;;422    void gpio_exti_source_select(uint8_t output_port, uint8_t output_pin)
000000  b510              PUSH     {r4,lr}
;;;423    {
;;;424        uint32_t source = 0U;
;;;425        source = ((uint32_t)0x0FU) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK));
000002  078a              LSLS     r2,r1,#30
000004  0f13              LSRS     r3,r2,#28
000006  220f              MOVS     r2,#0xf
000008  409a              LSLS     r2,r2,r3
;;;426    
;;;427        /* select EXTI sources */
;;;428        if(GPIO_PIN_SOURCE_4 > output_pin){
;;;429            /* select EXTI0/EXTI1/EXTI2/EXTI3 */
;;;430            AFIO_EXTISS0 &= ~source;
00000a  4c12              LDR      r4,|L9.84|
;;;431            AFIO_EXTISS0 |= (((uint32_t)output_port) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK)));
00000c  4098              LSLS     r0,r0,r3
00000e  2904              CMP      r1,#4                 ;428
000010  d206              BCS      |L9.32|
000012  68a1              LDR      r1,[r4,#8]            ;430
000014  4391              BICS     r1,r1,r2              ;430
000016  60a1              STR      r1,[r4,#8]            ;430
000018  68a1              LDR      r1,[r4,#8]
00001a  4301              ORRS     r1,r1,r0
00001c  60a1              STR      r1,[r4,#8]
;;;432        }else if(GPIO_PIN_SOURCE_8 > output_pin){
;;;433            /* select EXTI4/EXTI5/EXTI6/EXTI7 */
;;;434            AFIO_EXTISS1 &= ~source;
;;;435            AFIO_EXTISS1 |= (((uint32_t)output_port) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK)));
;;;436        }else if(GPIO_PIN_SOURCE_12 > output_pin){
;;;437            /* select EXTI8/EXTI9/EXTI10/EXTI11 */
;;;438            AFIO_EXTISS2 &= ~source;
;;;439            AFIO_EXTISS2 |= (((uint32_t)output_port) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK)));
;;;440        }else{
;;;441            /* select EXTI12/EXTI13/EXTI14/EXTI15 */
;;;442            AFIO_EXTISS3 &= ~source;
;;;443            AFIO_EXTISS3 |= (((uint32_t)output_port) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK)));
;;;444        }
;;;445    }
00001e  bd10              POP      {r4,pc}
                  |L9.32|
000020  2908              CMP      r1,#8                 ;432
000022  d206              BCS      |L9.50|
000024  68e1              LDR      r1,[r4,#0xc]          ;434
000026  4391              BICS     r1,r1,r2              ;434
000028  60e1              STR      r1,[r4,#0xc]          ;434
00002a  68e1              LDR      r1,[r4,#0xc]          ;435
00002c  4301              ORRS     r1,r1,r0              ;435
00002e  60e1              STR      r1,[r4,#0xc]          ;435
000030  bd10              POP      {r4,pc}
                  |L9.50|
000032  290c              CMP      r1,#0xc               ;436
000034  d206              BCS      |L9.68|
000036  6921              LDR      r1,[r4,#0x10]         ;438
000038  4391              BICS     r1,r1,r2              ;438
00003a  6121              STR      r1,[r4,#0x10]         ;438
00003c  6921              LDR      r1,[r4,#0x10]         ;439
00003e  4301              ORRS     r1,r1,r0              ;439
000040  6121              STR      r1,[r4,#0x10]         ;439
000042  bd10              POP      {r4,pc}
                  |L9.68|
000044  6961              LDR      r1,[r4,#0x14]         ;442
000046  4391              BICS     r1,r1,r2              ;442
000048  6161              STR      r1,[r4,#0x14]         ;442
00004a  6961              LDR      r1,[r4,#0x14]         ;443
00004c  4301              ORRS     r1,r1,r0              ;443
00004e  6161              STR      r1,[r4,#0x14]         ;443
000050  bd10              POP      {r4,pc}
;;;446    
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      0x40010000

                          AREA ||i.gpio_init||, CODE, READONLY, ALIGN=1

                  gpio_init PROC
;;;136    */
;;;137    void gpio_init(uint32_t gpio_periph, uint32_t mode, uint32_t speed, uint32_t pin)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;138    {
;;;139        uint16_t i;
;;;140        uint32_t temp_mode = 0U;
;;;141        uint32_t reg = 0U;
;;;142    
;;;143        /* GPIO mode configuration */
;;;144        temp_mode = (uint32_t)(mode & ((uint32_t)0x0FU));
000004  f001040f          AND      r4,r1,#0xf
;;;145        
;;;146        /* GPIO speed configuration */
;;;147        if(((uint32_t)0x00U) != ((uint32_t)mode & ((uint32_t)0x10U))){
000008  06cd              LSLS     r5,r1,#27
00000a  d500              BPL      |L10.14|
;;;148                /* output mode max speed:10MHz,2MHz,50MHz */
;;;149                temp_mode |= (uint32_t)speed;
00000c  4314              ORRS     r4,r4,r2
                  |L10.14|
;;;150        }
;;;151    
;;;152        /* configure the eight low port pins with GPIO_CTL0 */
;;;153        for(i = 0U;i < 8U;i++){
00000e  2200              MOVS     r2,#0
;;;154            if((1U << i) & pin){
;;;155                reg = GPIO_CTL0(gpio_periph);
;;;156                
;;;157                /* clear the specified pin mode bits */
;;;158                reg &= ~GPIO_MODE_MASK(i);
000010  f04f0c0f          MOV      r12,#0xf
000014  2701              MOVS     r7,#1                 ;154
                  |L10.22|
000016  fa07f502          LSL      r5,r7,r2              ;154
00001a  401d              ANDS     r5,r5,r3              ;154
00001c  d014              BEQ      |L10.72|
00001e  f8d08000          LDR      r8,[r0,#0]            ;155
000022  0096              LSLS     r6,r2,#2
000024  fa0cf906          LSL      r9,r12,r6
000028  ea280809          BIC      r8,r8,r9
;;;159                /* set the specified pin mode bits */
;;;160                reg |= GPIO_MODE_SET(i, temp_mode);
00002c  fa04f906          LSL      r9,r4,r6
000030  ea490908          ORR      r9,r9,r8
;;;161                
;;;162                /* set IPD or IPU */
;;;163                if(GPIO_MODE_IPD == mode){
000034  2928              CMP      r1,#0x28
000036  d002              BEQ      |L10.62|
;;;164                    /* reset the corresponding OCTL bit */
;;;165                    GPIO_BC(gpio_periph) = (uint32_t)((1U << i) & pin);
;;;166                }else{
;;;167                    /* set the corresponding OCTL bit */
;;;168                    if(GPIO_MODE_IPU == mode){
000038  2948              CMP      r1,#0x48
00003a  d002              BEQ      |L10.66|
00003c  e002              B        |L10.68|
                  |L10.62|
00003e  6145              STR      r5,[r0,#0x14]         ;165
000040  e000              B        |L10.68|
                  |L10.66|
;;;169                        GPIO_BOP(gpio_periph) = (uint32_t)((1U << i) & pin);
000042  6105              STR      r5,[r0,#0x10]
                  |L10.68|
;;;170                    }
;;;171                }
;;;172                /* set GPIO_CTL0 register */
;;;173                GPIO_CTL0(gpio_periph) = reg;
000044  f8c09000          STR      r9,[r0,#0]
                  |L10.72|
000048  1c52              ADDS     r2,r2,#1              ;153
00004a  b292              UXTH     r2,r2                 ;153
00004c  2a08              CMP      r2,#8                 ;153
00004e  d3e2              BCC      |L10.22|
;;;174            }
;;;175        }
;;;176        /* configure the eight high port pins with GPIO_CTL1 */
;;;177        for(i = 8U;i < 16U;i++){
000050  2208              MOVS     r2,#8
                  |L10.82|
;;;178            if((1U << i) & pin){
000052  fa07f502          LSL      r5,r7,r2
000056  401d              ANDS     r5,r5,r3
000058  d016              BEQ      |L10.136|
;;;179                reg = GPIO_CTL1(gpio_periph);
00005a  f8d08004          LDR      r8,[r0,#4]
;;;180                
;;;181                /* clear the specified pin mode bits */
;;;182                reg &= ~GPIO_MODE_MASK(i - 8U);
00005e  f1a20608          SUB      r6,r2,#8
000062  00b6              LSLS     r6,r6,#2
000064  fa0cf906          LSL      r9,r12,r6
000068  ea280809          BIC      r8,r8,r9
;;;183                /* set the specified pin mode bits */
;;;184                reg |= GPIO_MODE_SET(i - 8U, temp_mode);
00006c  fa04f906          LSL      r9,r4,r6
000070  ea490908          ORR      r9,r9,r8
;;;185                
;;;186                /* set IPD or IPU */
;;;187                if(GPIO_MODE_IPD == mode){
000074  2928              CMP      r1,#0x28
000076  d002              BEQ      |L10.126|
;;;188                    /* reset the corresponding OCTL bit */
;;;189                    GPIO_BC(gpio_periph) = (uint32_t)((1U << i) & pin);
;;;190                }else{
;;;191                    /* set the corresponding OCTL bit */
;;;192                    if(GPIO_MODE_IPU == mode){
000078  2948              CMP      r1,#0x48
00007a  d002              BEQ      |L10.130|
00007c  e002              B        |L10.132|
                  |L10.126|
00007e  6145              STR      r5,[r0,#0x14]         ;189
000080  e000              B        |L10.132|
                  |L10.130|
;;;193                        GPIO_BOP(gpio_periph) = (uint32_t)((1U << i) & pin);
000082  6105              STR      r5,[r0,#0x10]
                  |L10.132|
;;;194                    }
;;;195                }
;;;196                /* set GPIO_CTL1 register */
;;;197                GPIO_CTL1(gpio_periph) = reg;
000084  f8c09004          STR      r9,[r0,#4]
                  |L10.136|
000088  1c52              ADDS     r2,r2,#1              ;177
00008a  b292              UXTH     r2,r2                 ;177
00008c  2a10              CMP      r2,#0x10              ;177
00008e  d3e0              BCC      |L10.82|
;;;198            }
;;;199        }
;;;200    }
000090  e8bd83f0          POP      {r4-r9,pc}
;;;201    
                          ENDP


                          AREA ||i.gpio_input_bit_get||, CODE, READONLY, ALIGN=1

                  gpio_input_bit_get PROC
;;;271    */
;;;272    FlagStatus gpio_input_bit_get(uint32_t gpio_periph,uint32_t pin)
000000  6880              LDR      r0,[r0,#8]
;;;273    {
;;;274        if((uint32_t)RESET != (GPIO_ISTAT(gpio_periph)&(pin))){
000002  4208              TST      r0,r1
000004  d001              BEQ      |L11.10|
;;;275            return SET; 
000006  2001              MOVS     r0,#1
;;;276        }else{
;;;277            return RESET;
;;;278        }
;;;279    }
000008  4770              BX       lr
                  |L11.10|
00000a  2000              MOVS     r0,#0                 ;277
00000c  4770              BX       lr
;;;280    
                          ENDP


                          AREA ||i.gpio_input_port_get||, CODE, READONLY, ALIGN=1

                  gpio_input_port_get PROC
;;;286    */
;;;287    uint16_t gpio_input_port_get(uint32_t gpio_periph)
000000  6880              LDR      r0,[r0,#8]
;;;288    {
;;;289        return (uint16_t)(GPIO_ISTAT(gpio_periph));
000002  b280              UXTH     r0,r0
;;;290    }
000004  4770              BX       lr
;;;291    
                          ENDP


                          AREA ||i.gpio_output_bit_get||, CODE, READONLY, ALIGN=1

                  gpio_output_bit_get PROC
;;;300    */
;;;301    FlagStatus gpio_output_bit_get(uint32_t gpio_periph, uint32_t pin)
000000  68c0              LDR      r0,[r0,#0xc]
;;;302    {
;;;303        if((uint32_t)RESET !=(GPIO_OCTL(gpio_periph)&(pin))){
000002  4208              TST      r0,r1
000004  d001              BEQ      |L13.10|
;;;304            return SET;
000006  2001              MOVS     r0,#1
;;;305        }else{
;;;306            return RESET;
;;;307        }
;;;308    }
000008  4770              BX       lr
                  |L13.10|
00000a  2000              MOVS     r0,#0                 ;306
00000c  4770              BX       lr
;;;309    
                          ENDP


                          AREA ||i.gpio_output_port_get||, CODE, READONLY, ALIGN=1

                  gpio_output_port_get PROC
;;;315    */
;;;316    uint16_t gpio_output_port_get(uint32_t gpio_periph)
000000  68c0              LDR      r0,[r0,#0xc]
;;;317    {
;;;318        return ((uint16_t)GPIO_OCTL(gpio_periph));
000002  b280              UXTH     r0,r0
;;;319    }
000004  4770              BX       lr
;;;320    
                          ENDP


                          AREA ||i.gpio_pin_lock||, CODE, READONLY, ALIGN=1

                  gpio_pin_lock PROC
;;;508    */
;;;509    void gpio_pin_lock(uint32_t gpio_periph, uint32_t pin)
000000  f4413280          ORR      r2,r1,#0x10000
;;;510    {
;;;511        uint32_t lock = 0x00010000U;
;;;512        lock |= pin;
;;;513    
;;;514        /* lock key writing sequence: write 1 -> write 0 -> write 1 -> read 0 -> read 1 */
;;;515        GPIO_LOCK(gpio_periph) = (uint32_t)lock;
000004  6182              STR      r2,[r0,#0x18]
;;;516        GPIO_LOCK(gpio_periph) = (uint32_t)pin;
000006  6181              STR      r1,[r0,#0x18]
;;;517        GPIO_LOCK(gpio_periph) = (uint32_t)lock;
000008  6182              STR      r2,[r0,#0x18]
;;;518        lock = GPIO_LOCK(gpio_periph);
00000a  6981              LDR      r1,[r0,#0x18]
;;;519        lock = GPIO_LOCK(gpio_periph);
00000c  6980              LDR      r0,[r0,#0x18]
;;;520    }
00000e  4770              BX       lr
;;;521    
                          ENDP


                          AREA ||i.gpio_pin_remap_config||, CODE, READONLY, ALIGN=2

                  gpio_pin_remap_config PROC
;;;365    */
;;;366    void gpio_pin_remap_config(uint32_t remap, ControlStatus newvalue)
000000  b5f0              PUSH     {r4-r7,lr}
;;;367    {
;;;368        uint32_t remap1 = 0U, remap2 = 0U, temp_reg = 0U, temp_mask = 0U;
;;;369    
;;;370        if(AFIO_PCF1_FIELDS == (remap & AFIO_PCF1_FIELDS)){
;;;371            /* get AFIO_PCF1 regiter value */
;;;372            temp_reg = AFIO_PCF1;
000002  4c15              LDR      r4,|L16.88|
000004  2800              CMP      r0,#0                 ;370
000006  da01              BGE      |L16.12|
000008  69e3              LDR      r3,[r4,#0x1c]
00000a  e000              B        |L16.14|
                  |L16.12|
;;;373        }else{
;;;374            /* get AFIO_PCF0 regiter value */
;;;375            temp_reg = AFIO_PCF0;
00000c  6863              LDR      r3,[r4,#4]
                  |L16.14|
;;;376        }
;;;377    
;;;378        temp_mask = (remap & PCF_POSITION_MASK) >> 0x10U;
00000e  f3c04603          UBFX     r6,r0,#16,#4
;;;379        remap1 = remap & LSB_16BIT_MASK;
;;;380    
;;;381        /* judge pin remap type */
;;;382        if((PCF_LOCATION1_MASK | PCF_LOCATION2_MASK) == (remap & (PCF_LOCATION1_MASK | PCF_LOCATION2_MASK))){
;;;383            temp_reg &= PCF_SWJCFG_MASK;
;;;384            AFIO_PCF0 &= PCF_SWJCFG_MASK;
;;;385        }else if(PCF_LOCATION2_MASK == (remap & PCF_LOCATION2_MASK)){
;;;386            remap2 = ((uint32_t)0x03U) << temp_mask;
;;;387            temp_reg &= ~remap2;
;;;388            temp_reg |= ~PCF_SWJCFG_MASK;
;;;389        }else{
;;;390            temp_reg &= ~(remap1 << ((remap >> 0x15U)*0x10U));
000012  0d42              LSRS     r2,r0,#21
000014  0112              LSLS     r2,r2,#4
000016  b285              UXTH     r5,r0                 ;379
000018  f3c05701          UBFX     r7,r0,#20,#2          ;382
00001c  4095              LSLS     r5,r5,r2
00001e  2f03              CMP      r7,#3                 ;382
000020  d007              BEQ      |L16.50|
000022  02c2              LSLS     r2,r0,#11             ;385
000024  d50c              BPL      |L16.64|
000026  2203              MOVS     r2,#3                 ;386
000028  40b2              LSLS     r2,r2,r6              ;386
00002a  4393              BICS     r3,r3,r2              ;387
00002c  f0436270          ORR      r2,r3,#0xf000000      ;388
000030  e009              B        |L16.70|
                  |L16.50|
000032  f0236270          BIC      r2,r3,#0xf000000      ;383
000036  6863              LDR      r3,[r4,#4]            ;384
000038  f0236370          BIC      r3,r3,#0xf000000      ;384
00003c  6063              STR      r3,[r4,#4]            ;384
00003e  e002              B        |L16.70|
                  |L16.64|
000040  43ab              BICS     r3,r3,r5
;;;391            temp_reg |= ~PCF_SWJCFG_MASK;
000042  f0436270          ORR      r2,r3,#0xf000000
                  |L16.70|
;;;392        }
;;;393        
;;;394        /* set pin remap value */
;;;395        if(DISABLE != newvalue){
000046  b101              CBZ      r1,|L16.74|
;;;396            temp_reg |= (remap1 << ((remap >> 0x15U)*0x10U));
000048  432a              ORRS     r2,r2,r5
                  |L16.74|
;;;397        }
;;;398        
;;;399        if(AFIO_PCF1_FIELDS == (remap & AFIO_PCF1_FIELDS)){
00004a  2800              CMP      r0,#0
00004c  da01              BGE      |L16.82|
;;;400            /* set AFIO_PCF1 regiter value */
;;;401            AFIO_PCF1 = temp_reg;
00004e  61e2              STR      r2,[r4,#0x1c]
;;;402        }else{
;;;403            /* set AFIO_PCF0 regiter value */
;;;404            AFIO_PCF0 = temp_reg;
;;;405        }
;;;406    }
000050  bdf0              POP      {r4-r7,pc}
                  |L16.82|
000052  6062              STR      r2,[r4,#4]            ;404
000054  bdf0              POP      {r4-r7,pc}
;;;407    
                          ENDP

000056  0000              DCW      0x0000
                  |L16.88|
                          DCD      0x40010000

                          AREA ||i.gpio_port_write||, CODE, READONLY, ALIGN=1

                  gpio_port_write PROC
;;;257    */
;;;258    void gpio_port_write(uint32_t gpio_periph,uint16_t data)
000000  60c1              STR      r1,[r0,#0xc]
;;;259    {
;;;260        GPIO_OCTL(gpio_periph) = (uint32_t)data;
;;;261    }
000002  4770              BX       lr
;;;262    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_gpio_c_ed302560____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___15_gd32f10x_gpio_c_ed302560____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_gpio_c_ed302560____REVSH|
#line 128
|__asm___15_gd32f10x_gpio_c_ed302560____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
