; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_pmu.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_pmu.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -IC:\Users\Administrator\AppData\Local\Arm\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_pmu.crf Libraries\src\gd32f10x_pmu.c]
                          THUMB

                          AREA ||i.pmu_backup_write_disable||, CODE, READONLY, ALIGN=2

                  pmu_backup_write_disable PROC
;;;235    */
;;;236    void pmu_backup_write_disable(void)
000000  4802              LDR      r0,|L1.12|
;;;237    {
;;;238        PMU_CTL &= ~PMU_CTL_BKPWEN;
000002  6801              LDR      r1,[r0,#0]
000004  f4217180          BIC      r1,r1,#0x100
000008  6001              STR      r1,[r0,#0]
;;;239    }
00000a  4770              BX       lr
;;;240    
                          ENDP

                  |L1.12|
                          DCD      0x40007000

                          AREA ||i.pmu_backup_write_enable||, CODE, READONLY, ALIGN=2

                  pmu_backup_write_enable PROC
;;;224    */
;;;225    void pmu_backup_write_enable(void)
000000  4802              LDR      r0,|L2.12|
;;;226    {
;;;227        PMU_CTL |= PMU_CTL_BKPWEN;
000002  6801              LDR      r1,[r0,#0]
000004  f4417180          ORR      r1,r1,#0x100
000008  6001              STR      r1,[r0,#0]
;;;228    }
00000a  4770              BX       lr
;;;229    
                          ENDP

                  |L2.12|
                          DCD      0x40007000

                          AREA ||i.pmu_deinit||, CODE, READONLY, ALIGN=1

                  pmu_deinit PROC
;;;47     */
;;;48     void pmu_deinit(void)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50         /* reset PMU */
;;;51         rcu_periph_reset_enable(RCU_PMURST);
000002  f240441c          MOV      r4,#0x41c
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       rcu_periph_reset_enable
;;;52         rcu_periph_reset_disable(RCU_PMURST);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      rcu_periph_reset_disable
;;;53     }
;;;54     
                          ENDP


                          AREA ||i.pmu_flag_clear||, CODE, READONLY, ALIGN=2

                  pmu_flag_clear PROC
;;;268    */
;;;269    void pmu_flag_clear(uint32_t flag_reset)
000000  4907              LDR      r1,|L4.32|
;;;270    {
;;;271        switch(flag_reset){
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L4.20|
000006  2801              CMP      r0,#1
000008  d103              BNE      |L4.18|
;;;272        case PMU_FLAG_RESET_WAKEUP:
;;;273            /* reset wakeup flag */
;;;274            PMU_CTL |= PMU_CTL_WURST;
;;;275            break;
;;;276        case PMU_FLAG_RESET_STANDBY:
;;;277            /* reset standby flag */
;;;278            PMU_CTL |= PMU_CTL_STBRST;
00000a  6808              LDR      r0,[r1,#0]
00000c  f0400008          ORR      r0,r0,#8
000010  6008              STR      r0,[r1,#0]
                  |L4.18|
;;;279            break;
;;;280        default :
;;;281            break;
;;;282        }
;;;283    }
000012  4770              BX       lr
                  |L4.20|
000014  6808              LDR      r0,[r1,#0]            ;274
000016  f0400004          ORR      r0,r0,#4              ;274
00001a  6008              STR      r0,[r1,#0]            ;274
00001c  4770              BX       lr
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      0x40007000

                          AREA ||i.pmu_flag_get||, CODE, READONLY, ALIGN=2

                  pmu_flag_get PROC
;;;250    */
;;;251    FlagStatus pmu_flag_get(uint32_t flag)
000000  4903              LDR      r1,|L5.16|
;;;252    {
;;;253        if(PMU_CS & flag){
000002  6849              LDR      r1,[r1,#4]
000004  4201              TST      r1,r0
000006  d001              BEQ      |L5.12|
;;;254            return  SET;
000008  2001              MOVS     r0,#1
;;;255        }else{
;;;256            return  RESET;
;;;257        }
;;;258    }
00000a  4770              BX       lr
                  |L5.12|
00000c  2000              MOVS     r0,#0                 ;256
00000e  4770              BX       lr
;;;259    
                          ENDP

                  |L5.16|
                          DCD      0x40007000

                          AREA ||i.pmu_lvd_disable||, CODE, READONLY, ALIGN=2

                  pmu_lvd_disable PROC
;;;87     */
;;;88     void pmu_lvd_disable(void)
000000  4802              LDR      r0,|L6.12|
;;;89     {
;;;90         /* disable LVD */
;;;91         PMU_CTL &= ~PMU_CTL_LVDEN;
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;92     }
00000a  4770              BX       lr
;;;93     
                          ENDP

                  |L6.12|
                          DCD      0x40007000

                          AREA ||i.pmu_lvd_select||, CODE, READONLY, ALIGN=2

                  pmu_lvd_select PROC
;;;69     */
;;;70     void pmu_lvd_select(uint32_t lvdt_n)
000000  4908              LDR      r1,|L7.36|
;;;71     {
;;;72         /* disable LVD */
;;;73         PMU_CTL &= ~PMU_CTL_LVDEN;
000002  680a              LDR      r2,[r1,#0]
000004  f0220210          BIC      r2,r2,#0x10
000008  600a              STR      r2,[r1,#0]
;;;74         /* clear LVDT bits */
;;;75         PMU_CTL &= ~PMU_CTL_LVDT;
00000a  680a              LDR      r2,[r1,#0]
00000c  f02202e0          BIC      r2,r2,#0xe0
000010  600a              STR      r2,[r1,#0]
;;;76         /* set LVDT bits according to lvdt_n */
;;;77         PMU_CTL |= lvdt_n;
000012  680a              LDR      r2,[r1,#0]
000014  4302              ORRS     r2,r2,r0
000016  600a              STR      r2,[r1,#0]
;;;78         /* enable LVD */
;;;79         PMU_CTL |= PMU_CTL_LVDEN;
000018  6808              LDR      r0,[r1,#0]
00001a  f0400010          ORR      r0,r0,#0x10
00001e  6008              STR      r0,[r1,#0]
;;;80     }
000020  4770              BX       lr
;;;81     
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      0x40007000

                          AREA ||i.pmu_to_deepsleepmode||, CODE, READONLY, ALIGN=2

                  pmu_to_deepsleepmode PROC
;;;128    */
;;;129    void pmu_to_deepsleepmode(uint32_t ldo,uint8_t deepsleepmodecmd)
000000  b530              PUSH     {r4,r5,lr}
;;;130    {
;;;131        static uint32_t reg_snap[ 4 ];   
;;;132        /* clear stbmod and ldolp bits */
;;;133        PMU_CTL &= ~((uint32_t)(PMU_CTL_STBMOD | PMU_CTL_LDOLP));
000002  4a1f              LDR      r2,|L8.128|
000004  6813              LDR      r3,[r2,#0]
000006  f0230303          BIC      r3,r3,#3
00000a  6013              STR      r3,[r2,#0]
;;;134        
;;;135        /* set ldolp bit according to pmu_ldo */
;;;136        PMU_CTL |= ldo;
00000c  6813              LDR      r3,[r2,#0]
00000e  4303              ORRS     r3,r3,r0
000010  6013              STR      r3,[r2,#0]
;;;137        
;;;138        /* set sleepdeep bit of Cortex-M3 system control register */
;;;139        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000012  4b1c              LDR      r3,|L8.132|
000014  6818              LDR      r0,[r3,#0]
000016  f0400004          ORR      r0,r0,#4
00001a  6018              STR      r0,[r3,#0]
;;;140    
;;;141        reg_snap[0] = REG32(0xE000E010U);
00001c  f04f20e0          MOV      r0,#0xe000e000
000020  6904              LDR      r4,[r0,#0x10]
000022  4a19              LDR      r2,|L8.136|
000024  6014              STR      r4,[r2,#0]  ; reg_snap
;;;142        reg_snap[1] = REG32(0xE000E100U);
000026  f8d04100          LDR      r4,[r0,#0x100]
00002a  6054              STR      r4,[r2,#4]  ; reg_snap
;;;143        reg_snap[2] = REG32(0xE000E104U);
00002c  f8d04104          LDR      r4,[r0,#0x104]
000030  6094              STR      r4,[r2,#8]  ; reg_snap
;;;144        reg_snap[3] = REG32(0xE000E108U);
000032  f8d04108          LDR      r4,[r0,#0x108]
000036  60d4              STR      r4,[r2,#0xc]  ; reg_snap
;;;145        
;;;146        REG32( 0xE000E010U ) &= 0x00010004U;
000038  6904              LDR      r4,[r0,#0x10]
00003a  4d14              LDR      r5,|L8.140|
00003c  402c              ANDS     r4,r4,r5
00003e  6104              STR      r4,[r0,#0x10]
;;;147        REG32( 0xE000E180U )  = 0XFF7FF83DU;
000040  4c13              LDR      r4,|L8.144|
000042  f8c04180          STR      r4,[r0,#0x180]
;;;148        REG32( 0xE000E184U )  = 0XBFFFF8FFU;
000046  4c13              LDR      r4,|L8.148|
000048  f8c04184          STR      r4,[r0,#0x184]
;;;149        REG32( 0xE000E188U )  = 0xFFFFFFFFU;
00004c  1744              ASRS     r4,r0,#29
00004e  f8c04188          STR      r4,[r0,#0x188]
;;;150        
;;;151        /* select WFI or WFE command to enter deepsleep mode */
;;;152        if(WFI_CMD == deepsleepmodecmd){
000052  2900              CMP      r1,#0
000054  d011              BEQ      |L8.122|
;;;153            __WFI();
;;;154        }else{
;;;155            __SEV();
000056  bf40              SEV      
;;;156            __WFE();
000058  bf20              WFE      
;;;157            __WFE();
00005a  bf20              WFE      
                  |L8.92|
;;;158        }
;;;159    
;;;160        REG32(0xE000E010U) = reg_snap[0] ; 
00005c  308c              ADDS     r0,r0,#0x8c
00005e  6811              LDR      r1,[r2,#0]  ; reg_snap
000060  f8401c7c          STR      r1,[r0,#-0x7c]
;;;161        REG32(0xE000E100U) = reg_snap[1] ;
000064  6851              LDR      r1,[r2,#4]  ; reg_snap
000066  6741              STR      r1,[r0,#0x74]
;;;162        REG32(0xE000E104U) = reg_snap[2] ;
000068  6891              LDR      r1,[r2,#8]  ; reg_snap
00006a  6781              STR      r1,[r0,#0x78]
;;;163        REG32(0xE000E108U) = reg_snap[3] ;  
00006c  68d1              LDR      r1,[r2,#0xc]  ; reg_snap
00006e  67c1              STR      r1,[r0,#0x7c]
;;;164    
;;;165        /* reset sleepdeep bit of Cortex-M3 system control register */
;;;166        SCB->SCR &= ~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
000070  6818              LDR      r0,[r3,#0]
000072  f0200004          BIC      r0,r0,#4
000076  6018              STR      r0,[r3,#0]
;;;167    }
000078  bd30              POP      {r4,r5,pc}
                  |L8.122|
00007a  bf30              WFI                            ;153
00007c  e7ee              B        |L8.92|
;;;168    
                          ENDP

00007e  0000              DCW      0x0000
                  |L8.128|
                          DCD      0x40007000
                  |L8.132|
                          DCD      0xe000ed10
                  |L8.136|
                          DCD      ||.bss||
                  |L8.140|
                          DCD      0x00010004
                  |L8.144|
                          DCD      0xff7ff83d
                  |L8.148|
                          DCD      0xbffff8ff

                          AREA ||i.pmu_to_sleepmode||, CODE, READONLY, ALIGN=2

                  pmu_to_sleepmode PROC
;;;102    */
;;;103    void pmu_to_sleepmode(uint8_t sleepmodecmd)
000000  4905              LDR      r1,|L9.24|
;;;104    {
;;;105        /* clear sleepdeep bit of Cortex-M3 system control register */
;;;106        SCB->SCR &= ~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
000002  680a              LDR      r2,[r1,#0]
000004  f0220204          BIC      r2,r2,#4
000008  600a              STR      r2,[r1,#0]
;;;107        
;;;108        /* select WFI or WFE command to enter sleep mode */
;;;109        if(WFI_CMD == sleepmodecmd){
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L9.18|
;;;110            __WFI();
;;;111        }else{
;;;112            __WFE();
00000e  bf20              WFE      
;;;113        }
;;;114    }
000010  4770              BX       lr
                  |L9.18|
000012  bf30              WFI                            ;110
000014  4770              BX       lr
;;;115    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0xe000ed10

                          AREA ||i.pmu_to_standbymode||, CODE, READONLY, ALIGN=2

                  pmu_to_standbymode PROC
;;;177    */
;;;178    void pmu_to_standbymode(uint8_t standbymodecmd)
000000  4909              LDR      r1,|L10.40|
;;;179    {
;;;180        /* set sleepdeep bit of Cortex-M3 system control register */
;;;181        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000002  680a              LDR      r2,[r1,#0]
000004  f0420204          ORR      r2,r2,#4
000008  600a              STR      r2,[r1,#0]
;;;182    
;;;183        /* set stbmod bit */
;;;184        PMU_CTL |= PMU_CTL_STBMOD;
00000a  4908              LDR      r1,|L10.44|
00000c  680a              LDR      r2,[r1,#0]
00000e  f0420202          ORR      r2,r2,#2
000012  600a              STR      r2,[r1,#0]
;;;185            
;;;186        /* reset wakeup flag */
;;;187        PMU_CTL |= PMU_CTL_WURST;
000014  680a              LDR      r2,[r1,#0]
000016  f0420204          ORR      r2,r2,#4
00001a  600a              STR      r2,[r1,#0]
;;;188        
;;;189        /* select WFI or WFE command to enter standby mode */
;;;190        if(WFI_CMD == standbymodecmd){
00001c  2800              CMP      r0,#0
00001e  d001              BEQ      |L10.36|
;;;191            __WFI();
;;;192        }else{
;;;193            __WFE();
000020  bf20              WFE      
;;;194        }
;;;195    }
000022  4770              BX       lr
                  |L10.36|
000024  bf30              WFI                            ;191
000026  4770              BX       lr
;;;196    
                          ENDP

                  |L10.40|
                          DCD      0xe000ed10
                  |L10.44|
                          DCD      0x40007000

                          AREA ||i.pmu_wakeup_pin_disable||, CODE, READONLY, ALIGN=2

                  pmu_wakeup_pin_disable PROC
;;;213    */
;;;214    void pmu_wakeup_pin_disable(void)
000000  4802              LDR      r0,|L11.12|
;;;215    {
;;;216        PMU_CS &= ~PMU_CS_WUPEN;
000002  6841              LDR      r1,[r0,#4]
000004  f4217180          BIC      r1,r1,#0x100
000008  6041              STR      r1,[r0,#4]
;;;217    }
00000a  4770              BX       lr
;;;218    
                          ENDP

                  |L11.12|
                          DCD      0x40007000

                          AREA ||i.pmu_wakeup_pin_enable||, CODE, READONLY, ALIGN=2

                  pmu_wakeup_pin_enable PROC
;;;202    */
;;;203    void pmu_wakeup_pin_enable(void)
000000  4802              LDR      r0,|L12.12|
;;;204    {
;;;205        PMU_CS |= PMU_CS_WUPEN;
000002  6841              LDR      r1,[r0,#4]
000004  f4417180          ORR      r1,r1,#0x100
000008  6041              STR      r1,[r0,#4]
;;;206    }
00000a  4770              BX       lr
;;;207    
                          ENDP

                  |L12.12|
                          DCD      0x40007000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  reg_snap
                          %        16

;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_pmu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_pmu_c_ac4503ae____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_pmu_c_ac4503ae____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_pmu_c_ac4503ae____REVSH|
#line 128
|__asm___14_gd32f10x_pmu_c_ac4503ae____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
