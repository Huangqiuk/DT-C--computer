; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_fwdgt.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_fwdgt.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -IC:\Users\Administrator\AppData\Local\Arm\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_fwdgt.crf Libraries\src\gd32f10x_fwdgt.c]
                          THUMB

                          AREA ||i.fwdgt_config||, CODE, READONLY, ALIGN=2

                  fwdgt_config PROC
;;;104    */
;;;105    ErrStatus fwdgt_config(uint16_t reload_value, uint8_t prescaler_div)
000000  b530              PUSH     {r4,r5,lr}
;;;106    {
;;;107        uint32_t timeout = FWDGT_PSC_TIMEOUT;
000002  4b11              LDR      r3,|L1.72|
000004  461a              MOV      r2,r3
;;;108        uint32_t flag_status = RESET;
;;;109      
;;;110        /* enable write access to FWDGT_PSC,and FWDGT_RLD */
;;;111        FWDGT_CTL = FWDGT_WRITEACCESS_ENABLE;
000006  4d11              LDR      r5,|L1.76|
000008  f2455455          MOV      r4,#0x5555
00000c  602c              STR      r4,[r5,#0]
                  |L1.14|
;;;112        /* wait until the PUD flag to be reset */
;;;113        do{
;;;114           flag_status = FWDGT_STAT & FWDGT_STAT_PUD;
00000e  68ec              LDR      r4,[r5,#0xc]
000010  f0040401          AND      r4,r4,#1
;;;115        }while((--timeout > 0U) && ((uint32_t)RESET != flag_status));
000014  1e52              SUBS     r2,r2,#1
000016  d001              BEQ      |L1.28|
000018  2c00              CMP      r4,#0
00001a  d1f8              BNE      |L1.14|
                  |L1.28|
;;;116        
;;;117        if((uint32_t)RESET != flag_status){
00001c  b10c              CBZ      r4,|L1.34|
;;;118            return ERROR;
00001e  2000              MOVS     r0,#0
;;;119        }
;;;120        /* configure FWDGT */
;;;121        FWDGT_PSC = (uint32_t)prescaler_div;
;;;122    
;;;123        timeout = FWDGT_RLD_TIMEOUT;
;;;124        /* wait until the RUD flag to be reset */
;;;125        do{
;;;126           flag_status = FWDGT_STAT & FWDGT_STAT_RUD;
;;;127        }while((--timeout > 0U) && ((uint32_t)RESET != flag_status));
;;;128       
;;;129        if((uint32_t)RESET != flag_status){
;;;130            return ERROR;
;;;131        }
;;;132        FWDGT_RLD = RLD_RLD(reload_value);
;;;133        /* reload the counter */
;;;134        FWDGT_CTL = FWDGT_KEY_RELOAD;
;;;135    
;;;136        return SUCCESS;
;;;137    }
000020  bd30              POP      {r4,r5,pc}
                  |L1.34|
000022  6069              STR      r1,[r5,#4]            ;121
                  |L1.36|
000024  68e9              LDR      r1,[r5,#0xc]          ;126
000026  f0010102          AND      r1,r1,#2              ;126
00002a  1e5b              SUBS     r3,r3,#1              ;127
00002c  d001              BEQ      |L1.50|
00002e  2900              CMP      r1,#0                 ;127
000030  d1f8              BNE      |L1.36|
                  |L1.50|
000032  b109              CBZ      r1,|L1.56|
000034  2000              MOVS     r0,#0                 ;130
000036  bd30              POP      {r4,r5,pc}
                  |L1.56|
000038  f3c0000b          UBFX     r0,r0,#0,#12          ;132
00003c  60a8              STR      r0,[r5,#8]            ;132
00003e  f64a20aa          MOV      r0,#0xaaaa            ;134
000042  6028              STR      r0,[r5,#0]            ;134
000044  2001              MOVS     r0,#1                 ;136
000046  bd30              POP      {r4,r5,pc}
;;;138    
                          ENDP

                  |L1.72|
                          DCD      0x000fffff
                  |L1.76|
                          DCD      0x40003000

                          AREA ||i.fwdgt_counter_reload||, CODE, READONLY, ALIGN=2

                  fwdgt_counter_reload PROC
;;;84     */
;;;85     void fwdgt_counter_reload(void)
000000  4902              LDR      r1,|L2.12|
;;;86     {
;;;87         FWDGT_CTL = FWDGT_KEY_RELOAD;
000002  f64a20aa          MOV      r0,#0xaaaa
000006  6008              STR      r0,[r1,#0]
;;;88     }
000008  4770              BX       lr
;;;89     
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x40003000

                          AREA ||i.fwdgt_enable||, CODE, READONLY, ALIGN=2

                  fwdgt_enable PROC
;;;73     */
;;;74     void fwdgt_enable(void)
000000  4902              LDR      r1,|L3.12|
;;;75     {
;;;76         FWDGT_CTL = FWDGT_KEY_ENABLE;
000002  f64c40cc          MOV      r0,#0xcccc
000006  6008              STR      r0,[r1,#0]
;;;77     }
000008  4770              BX       lr
;;;78     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40003000

                          AREA ||i.fwdgt_flag_get||, CODE, READONLY, ALIGN=2

                  fwdgt_flag_get PROC
;;;147    */
;;;148    FlagStatus fwdgt_flag_get(uint16_t flag)
000000  4903              LDR      r1,|L4.16|
;;;149    {
;;;150        if(FWDGT_STAT & flag){
000002  68c9              LDR      r1,[r1,#0xc]
000004  4201              TST      r1,r0
000006  d001              BEQ      |L4.12|
;;;151            return SET;
000008  2001              MOVS     r0,#1
;;;152        }
;;;153        
;;;154        return RESET;
;;;155    }
00000a  4770              BX       lr
                  |L4.12|
00000c  2000              MOVS     r0,#0                 ;154
00000e  4770              BX       lr
                          ENDP

                  |L4.16|
                          DCD      0x40003000

                          AREA ||i.fwdgt_write_disable||, CODE, READONLY, ALIGN=2

                  fwdgt_write_disable PROC
;;;62     */
;;;63     void fwdgt_write_disable(void)
000000  4901              LDR      r1,|L5.8|
;;;64     {
;;;65         FWDGT_CTL = FWDGT_WRITEACCESS_DISABLE;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;66     }
000006  4770              BX       lr
;;;67     
                          ENDP

                  |L5.8|
                          DCD      0x40003000

                          AREA ||i.fwdgt_write_enable||, CODE, READONLY, ALIGN=2

                  fwdgt_write_enable PROC
;;;51     */
;;;52     void fwdgt_write_enable(void)
000000  4902              LDR      r1,|L6.12|
;;;53     {
;;;54         FWDGT_CTL = FWDGT_WRITEACCESS_ENABLE;
000002  f2455055          MOV      r0,#0x5555
000006  6008              STR      r0,[r1,#0]
;;;55     }
000008  4770              BX       lr
;;;56     
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40003000

;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_fwdgt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_gd32f10x_fwdgt_c_5a293c79____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___16_gd32f10x_fwdgt_c_5a293c79____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_gd32f10x_fwdgt_c_5a293c79____REVSH|
#line 128
|__asm___16_gd32f10x_fwdgt_c_5a293c79____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
