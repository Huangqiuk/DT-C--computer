; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\canprotocolupmd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\canprotocolupmd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\canprotocolupmd.crf User\CanProtocolUpMD.c]
                          THUMB

                          AREA ||i.CAN_MD_PROTOCOL_CALLBACK_UartBusError||, CODE, READONLY, ALIGN=1

                  CAN_MD_PROTOCOL_CALLBACK_UartBusError PROC
;;;646    // 	UART总线超时错误处理
;;;647    void CAN_MD_PROTOCOL_CALLBACK_UartBusError(uint32 param)
000000  4770              BX       lr
;;;648    {
;;;649    
;;;650    }
;;;651    
                          ENDP


                          AREA ||i.CAN_MD_PROTOCOL_CheckSUM||, CODE, READONLY, ALIGN=1

                  CAN_MD_PROTOCOL_CheckSUM PROC
;;;477    // 对传入的命令帧进行校验，返回校验结果
;;;478    BOOL CAN_MD_PROTOCOL_CheckSUM(uint8* buff, uint32 len, uint16 id)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;479    {
000004  b0a8              SUB      sp,sp,#0xa0
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4690              MOV      r8,r2
;;;480    	uint32 cc = 0;
00000c  f04f0900          MOV      r9,#0
;;;481    	uint16 i, j;
;;;482    	uint8 uBuff[CAN_MD_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX];
;;;483    	
;;;484    	if(NULL == buff)
000010  b91c              CBNZ     r4,|L2.26|
;;;485    	{
;;;486    		return FALSE;
000012  2000              MOVS     r0,#0
                  |L2.20|
;;;487    	}
;;;488    
;;;489    	// CAN_ID 插入到帧头和帧模式之前，长度要去掉4个crc和1个帧尾共5个字节
;;;490    	for (i = 0, j = 0; j < len-5; i++, j++)
;;;491    	{
;;;492    		if (i == 2)
;;;493    		{
;;;494    			uBuff[i++] = (id >> 8) & 0xFF;
;;;495    			uBuff[i++] = (id & 0xFF);
;;;496    		}
;;;497    		
;;;498    		uBuff[i] = buff[j];
;;;499    	}
;;;500    	
;;;501    	cc = ((uint32)buff[len - 5] << 24) | ((uint32)buff[len - 4] << 16) | ((uint32)buff[len - 3] << 8) | buff[len - 2];
;;;502    
;;;503    	// 判断计算得到的校验码与命令帧中的校验码是否相同，长度+2是增加can ID的2个字节
;;;504    	if(CRC32_Calculate(uBuff, len-5+2) != cc)
;;;505    	{
;;;506    		return FALSE;
;;;507    	}
;;;508    	
;;;509    	return TRUE;
;;;510    }
000014  b028              ADD      sp,sp,#0xa0
000016  e8bd83f0          POP      {r4-r9,pc}
                  |L2.26|
00001a  2600              MOVS     r6,#0                 ;490
00001c  2700              MOVS     r7,#0                 ;490
00001e  e016              B        |L2.78|
                  |L2.32|
000020  2e02              CMP      r6,#2                 ;492
000022  d10d              BNE      |L2.64|
000024  ea4f2218          LSR      r2,r8,#8              ;494
000028  4630              MOV      r0,r6                 ;494
00002a  1c71              ADDS     r1,r6,#1              ;494
00002c  b28e              UXTH     r6,r1                 ;494
00002e  f80d2000          STRB     r2,[sp,r0]            ;494
000032  f00802ff          AND      r2,r8,#0xff           ;495
000036  4630              MOV      r0,r6                 ;495
000038  1c71              ADDS     r1,r6,#1              ;495
00003a  b28e              UXTH     r6,r1                 ;495
00003c  f80d2000          STRB     r2,[sp,r0]            ;495
                  |L2.64|
000040  5de0              LDRB     r0,[r4,r7]            ;498
000042  f80d0006          STRB     r0,[sp,r6]            ;498
000046  1c70              ADDS     r0,r6,#1              ;490
000048  b286              UXTH     r6,r0                 ;490
00004a  1c78              ADDS     r0,r7,#1              ;490
00004c  b287              UXTH     r7,r0                 ;490
                  |L2.78|
00004e  1f68              SUBS     r0,r5,#5              ;490
000050  42b8              CMP      r0,r7                 ;490
000052  d8e5              BHI      |L2.32|
000054  5c20              LDRB     r0,[r4,r0]            ;501
000056  0601              LSLS     r1,r0,#24             ;501
000058  1f28              SUBS     r0,r5,#4              ;501
00005a  5c20              LDRB     r0,[r4,r0]            ;501
00005c  ea414100          ORR      r1,r1,r0,LSL #16      ;501
000060  1ee8              SUBS     r0,r5,#3              ;501
000062  5c20              LDRB     r0,[r4,r0]            ;501
000064  ea412000          ORR      r0,r1,r0,LSL #8       ;501
000068  1ea9              SUBS     r1,r5,#2              ;501
00006a  5c61              LDRB     r1,[r4,r1]            ;501
00006c  ea400901          ORR      r9,r0,r1              ;501
000070  1ee8              SUBS     r0,r5,#3              ;504
000072  b281              UXTH     r1,r0                 ;504
000074  4668              MOV      r0,sp                 ;504
000076  f7fffffe          BL       CRC32_Calculate
00007a  4548              CMP      r0,r9                 ;504
00007c  d001              BEQ      |L2.130|
00007e  2000              MOVS     r0,#0                 ;506
000080  e7c8              B        |L2.20|
                  |L2.130|
000082  2001              MOVS     r0,#1                 ;509
000084  e7c6              B        |L2.20|
;;;511    
                          ENDP


                          AREA ||i.CAN_MD_PROTOCOL_CmdFrameProcess||, CODE, READONLY, ALIGN=2

                  CAN_MD_PROTOCOL_CmdFrameProcess PROC
;;;512    // CAN命令帧缓冲区处理
;;;513    void CAN_MD_PROTOCOL_CmdFrameProcess(CAN_MD_PROTOCOL_CB* pCB)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;514    {
000004  4604              MOV      r4,r0
;;;515    	CAN_MD_PROTOCOL_CMD cmd = CAN_MD_PROTOCOL_CMD_NULL;
000006  2600              MOVS     r6,#0
;;;516    	CAN_MD_PROTOCOL_RX_CMD_FRAME* pCmdFrame = NULL;
000008  2500              MOVS     r5,#0
;;;517        
;;;518        uint8 eraResual;
;;;519        uint32 temp = 0;
00000a  2700              MOVS     r7,#0
;;;520        uint16 length = 0;	
00000c  46a8              MOV      r8,r5
;;;521    	BOOL 	writeRes;
;;;522    	uint8 	i;
;;;523    	uint32 	dataByteNum;
;;;524    	uint32 	u32TempVal;
;;;525    	uint32  temp1,temp2,temp3;
;;;526    	static BOOL flag = TRUE;
;;;527        
;;;528    	// 参数合法性检验
;;;529    	if(NULL == pCB)
00000e  b90c              CBNZ     r4,|L3.20|
                  |L3.16|
;;;530    	{
;;;531    		return;
;;;532    	}
;;;533    
;;;534    	// 命令帧缓冲区为空，退出
;;;535    	if(pCB->rx.head == pCB->rx.end)
;;;536    	{
;;;537    		return;
;;;538    	}
;;;539    
;;;540    	// 获取当前要处理的命令帧指针
;;;541    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.head];
;;;542    	
;;;543    	// 命令头非法，退出
;;;544    	if(CAN_MD_PROTOCOL_CMD_HEAD != pCmdFrame->buff[CAN_MD_PROTOCOL_CMD_HEAD_INDEX])
;;;545    	{
;;;546    		// 删除命令帧
;;;547    		pCB->rx.head ++;
;;;548    		pCB->rx.head %= CAN_MD_PROTOCOL_RX_QUEUE_SIZE;
;;;549    		return;
;;;550    	}
;;;551    
;;;552    	// 命令头合法，则提取命令
;;;553    	cmd = (CAN_MD_PROTOCOL_CMD)((((uint16)pCmdFrame->buff[CAN_MD_PROTOCOL_CMD_CMD_H_INDEX]) << 8) | pCmdFrame->buff[CAN_MD_PROTOCOL_CMD_CMD_L_INDEX]);
;;;554    
;;;555    	// 执行命令帧
;;;556    	switch(cmd)
;;;557    	{
;;;558    		// 空命令，不予执行
;;;559    		case CAN_MD_PROTOCOL_CMD_NULL:
;;;560    			break;
;;;561    
;;;562            // 收到ECO申请
;;;563            case CAN_MD_PROTOCOL_CMD_UP_PROJECT_APPLY:
;;;564                if (!dut_info.dutPowerOnAllow)
;;;565                {
;;;566                    // 延时50ms允许进入工程模式
;;;567                    STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST);
;;;568                    dut_info.dutPowerOnAllow = TRUE; // 不在接收eco请求
;;;569                }                        
;;;570                break;
;;;571                
;;;572            // 收到ECO准备就绪
;;;573            case CAN_MD_PROTOCOL_CMD_UP_PROJECT_READY:   
;;;574                if (dut_info.appUpFlag)
;;;575                {
;;;576                    STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_APP_EAR_RESUALT); // 发送第一帧数据会擦除APP
;;;577                }                   
;;;578                break;
;;;579    
;;;580            // APP数据写入,正确应答
;;;581            case CAN_MD_PROTOCOL_CMD_UP_IAP_WRITE_RIGHT_RESULT: 
;;;582                if (dut_info.currentAppSize < dut_info.appSize)
;;;583                {
;;;584                    STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_WRITE);
;;;585                }
;;;586                else
;;;587                {
;;;588                    STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_APP_UP_SUCCESS);
;;;589                }            
;;;590                break;
;;;591    
;;;592            // APP数据写入,错误应答
;;;593            case CAN_MD_PROTOCOL_CMD_UP_IAP_WRITE_ERROR_RESULT:    
;;;594                  dut_info.currentAppSize--;
;;;595                if (dut_info.currentAppSize < dut_info.appSize)
;;;596                {
;;;597                    STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_WRITE);
;;;598                }
;;;599                else
;;;600                {
;;;601                    STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_APP_UP_SUCCESS);
;;;602                }
;;;603                break;
;;;604                
;;;605            // APP数据完成
;;;606            case CAN_MD_PROTOCOL_CMD_UP_UPDATA_FINISH_RESULT: 
;;;607    		    STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_ITEM_FINISH);
;;;608                break;
;;;609                
;;;610            default:
;;;611                break;
;;;612    	}
;;;613    
;;;614    	// 启动UART总线通讯超时判断
;;;615    	CAN_MD_PROTOCOL_StartTimeoutCheckTask();
;;;616    	
;;;617    	// 删除命令帧
;;;618    	pCB->rx.head ++;
;;;619    	pCB->rx.head %= CAN_MD_PROTOCOL_RX_QUEUE_SIZE;
;;;620    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L3.20|
000014  f8b412a8          LDRH     r1,[r4,#0x2a8]        ;535
000018  f8b402aa          LDRH     r0,[r4,#0x2aa]        ;535
00001c  4281              CMP      r1,r0                 ;535
00001e  d100              BNE      |L3.34|
000020  e7f6              B        |L3.16|
                  |L3.34|
000022  f8b402a8          LDRH     r0,[r4,#0x2a8]        ;541
000026  eb0001c0          ADD      r1,r0,r0,LSL #3       ;541
00002a  eb011140          ADD      r1,r1,r0,LSL #5       ;541
00002e  f10400bc          ADD      r0,r4,#0xbc           ;541
000032  eb000581          ADD      r5,r0,r1,LSL #2       ;541
000036  78a8              LDRB     r0,[r5,#2]            ;544
000038  2855              CMP      r0,#0x55              ;544
00003a  d00e              BEQ      |L3.90|
00003c  f8b402a8          LDRH     r0,[r4,#0x2a8]        ;547
000040  1c40              ADDS     r0,r0,#1              ;547
000042  f8a402a8          STRH     r0,[r4,#0x2a8]        ;547
000046  f8b402a8          LDRH     r0,[r4,#0x2a8]        ;548
00004a  2103              MOVS     r1,#3                 ;548
00004c  fb90f2f1          SDIV     r2,r0,r1              ;548
000050  fb010012          MLS      r0,r1,r2,r0           ;548
000054  f8a402a8          STRH     r0,[r4,#0x2a8]        ;548
000058  e7da              B        |L3.16|
                  |L3.90|
00005a  79e9              LDRB     r1,[r5,#7]            ;553
00005c  79a8              LDRB     r0,[r5,#6]            ;553
00005e  ea412600          ORR      r6,r1,r0,LSL #8       ;553
000062  f24c3102          MOV      r1,#0xc302            ;556
000066  1a70              SUBS     r0,r6,r1              ;556
000068  428e              CMP      r6,r1                 ;556
00006a  d032              BEQ      |L3.210|
00006c  dc08              BGT      |L3.128|
00006e  b176              CBZ      r6,|L3.142|
000070  f5a64041          SUB      r0,r6,#0xc100         ;556
000074  f1a00009          SUB      r0,r0,#9              ;556
000078  b150              CBZ      r0,|L3.144|
00007a  28f9              CMP      r0,#0xf9              ;556
00007c  d13f              BNE      |L3.254|
00007e  e01a              B        |L3.182|
                  |L3.128|
000080  f5b07f80          CMP      r0,#0x100             ;556
000084  d010              BEQ      |L3.168|
000086  f5b07f00          CMP      r0,#0x200             ;556
00008a  d138              BNE      |L3.254|
00008c  e033              B        |L3.246|
                  |L3.142|
00008e  e037              B        |L3.256|
                  |L3.144|
000090  4825              LDR      r0,|L3.296|
000092  f890003c          LDRB     r0,[r0,#0x3c]         ;564  ; dut_info
000096  b930              CBNZ     r0,|L3.166|
000098  2032              MOVS     r0,#0x32              ;567
00009a  f7fffffe          BL       STATE_SwitchStep
00009e  2001              MOVS     r0,#1                 ;568
0000a0  4921              LDR      r1,|L3.296|
0000a2  f881003c          STRB     r0,[r1,#0x3c]         ;568
                  |L3.166|
0000a6  e02b              B        |L3.256|
                  |L3.168|
0000a8  481f              LDR      r0,|L3.296|
0000aa  7ec0              LDRB     r0,[r0,#0x1b]         ;574  ; dut_info
0000ac  b110              CBZ      r0,|L3.180|
0000ae  2035              MOVS     r0,#0x35              ;576
0000b0  f7fffffe          BL       STATE_SwitchStep
                  |L3.180|
0000b4  e024              B        |L3.256|
                  |L3.182|
0000b6  481c              LDR      r0,|L3.296|
0000b8  6b00              LDR      r0,[r0,#0x30]         ;582  ; dut_info
0000ba  491b              LDR      r1,|L3.296|
0000bc  6a49              LDR      r1,[r1,#0x24]         ;582  ; dut_info
0000be  4288              CMP      r0,r1                 ;582
0000c0  d203              BCS      |L3.202|
0000c2  2036              MOVS     r0,#0x36              ;584
0000c4  f7fffffe          BL       STATE_SwitchStep
0000c8  e002              B        |L3.208|
                  |L3.202|
0000ca  2037              MOVS     r0,#0x37              ;588
0000cc  f7fffffe          BL       STATE_SwitchStep
                  |L3.208|
0000d0  e016              B        |L3.256|
                  |L3.210|
0000d2  4815              LDR      r0,|L3.296|
0000d4  6b00              LDR      r0,[r0,#0x30]         ;594  ; dut_info
0000d6  1e40              SUBS     r0,r0,#1              ;594
0000d8  4913              LDR      r1,|L3.296|
0000da  6308              STR      r0,[r1,#0x30]         ;594  ; dut_info
0000dc  4608              MOV      r0,r1                 ;595
0000de  6b00              LDR      r0,[r0,#0x30]         ;595  ; dut_info
0000e0  6a49              LDR      r1,[r1,#0x24]         ;595  ; dut_info
0000e2  4288              CMP      r0,r1                 ;595
0000e4  d203              BCS      |L3.238|
0000e6  2036              MOVS     r0,#0x36              ;597
0000e8  f7fffffe          BL       STATE_SwitchStep
0000ec  e002              B        |L3.244|
                  |L3.238|
0000ee  2037              MOVS     r0,#0x37              ;601
0000f0  f7fffffe          BL       STATE_SwitchStep
                  |L3.244|
0000f4  e004              B        |L3.256|
                  |L3.246|
0000f6  2038              MOVS     r0,#0x38              ;607
0000f8  f7fffffe          BL       STATE_SwitchStep
0000fc  e000              B        |L3.256|
                  |L3.254|
0000fe  bf00              NOP                            ;611
                  |L3.256|
000100  bf00              NOP                            ;560
000102  f7fffffe          BL       CAN_MD_PROTOCOL_StartTimeoutCheckTask
000106  f8b402a8          LDRH     r0,[r4,#0x2a8]        ;618
00010a  1c40              ADDS     r0,r0,#1              ;618
00010c  f8a402a8          STRH     r0,[r4,#0x2a8]        ;618
000110  f8b402a8          LDRH     r0,[r4,#0x2a8]        ;619
000114  2103              MOVS     r1,#3                 ;619
000116  fb90f2f1          SDIV     r2,r0,r1              ;619
00011a  fb010012          MLS      r0,r1,r2,r0           ;619
00011e  f8a402a8          STRH     r0,[r4,#0x2a8]        ;619
000122  bf00              NOP      
000124  e774              B        |L3.16|
;;;621    
                          ENDP

000126  0000              DCW      0x0000
                  |L3.296|
                          DCD      dut_info

                          AREA ||i.CAN_MD_PROTOCOL_ConfirmTempCmdFrameBuff||, CODE, READONLY, ALIGN=1

                  CAN_MD_PROTOCOL_ConfirmTempCmdFrameBuff PROC
;;;257    // 将临时缓冲区添加到命令帧缓冲区中，其本质操作是承认临时缓冲区数据有效
;;;258    BOOL CAN_MD_PROTOCOL_ConfirmTempCmdFrameBuff(CAN_MD_PROTOCOL_CB* pCB)
000000  b510              PUSH     {r4,lr}
;;;259    {
000002  4601              MOV      r1,r0
;;;260    	CAN_MD_PROTOCOL_RX_CMD_FRAME* pCmdFrame = NULL;
000004  2200              MOVS     r2,#0
;;;261    	
;;;262    	// 参数合法性检验
;;;263    	if(NULL == pCB)
000006  b909              CBNZ     r1,|L4.12|
;;;264    	{
;;;265    		return FALSE;
000008  2000              MOVS     r0,#0
                  |L4.10|
;;;266    	}
;;;267    
;;;268    	// 临时缓冲区为空，不予添加
;;;269    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
;;;270    	if(0 == pCmdFrame->length)
;;;271    	{
;;;272    		return FALSE;
;;;273    	}
;;;274    
;;;275    	// 添加
;;;276    	pCB->rx.end ++;
;;;277    	pCB->rx.end %= CAN_MD_PROTOCOL_RX_QUEUE_SIZE;
;;;278    	pCB->rx.cmdQueue[pCB->rx.end].length = 0;	// 该行的作用是将新的添加位置有效数据个数清零，以便将这个位置当做临时帧缓冲区
;;;279    	
;;;280    	return TRUE;
;;;281    }
00000a  bd10              POP      {r4,pc}
                  |L4.12|
00000c  f8b102aa          LDRH     r0,[r1,#0x2aa]        ;269
000010  eb0003c0          ADD      r3,r0,r0,LSL #3       ;269
000014  eb031340          ADD      r3,r3,r0,LSL #5       ;269
000018  f10100bc          ADD      r0,r1,#0xbc           ;269
00001c  eb000283          ADD      r2,r0,r3,LSL #2       ;269
000020  f8b200a2          LDRH     r0,[r2,#0xa2]         ;270
000024  b908              CBNZ     r0,|L4.42|
000026  2000              MOVS     r0,#0                 ;272
000028  e7ef              B        |L4.10|
                  |L4.42|
00002a  f8b102aa          LDRH     r0,[r1,#0x2aa]        ;276
00002e  1c40              ADDS     r0,r0,#1              ;276
000030  f8a102aa          STRH     r0,[r1,#0x2aa]        ;276
000034  f8b102aa          LDRH     r0,[r1,#0x2aa]        ;277
000038  2303              MOVS     r3,#3                 ;277
00003a  fb90f4f3          SDIV     r4,r0,r3              ;277
00003e  fb030014          MLS      r0,r3,r4,r0           ;277
000042  f8a102aa          STRH     r0,[r1,#0x2aa]        ;277
000046  2300              MOVS     r3,#0                 ;278
000048  f8b102aa          LDRH     r0,[r1,#0x2aa]        ;278
00004c  eb0004c0          ADD      r4,r0,r0,LSL #3       ;278
000050  eb041440          ADD      r4,r4,r0,LSL #5       ;278
000054  f10100bc          ADD      r0,r1,#0xbc           ;278
000058  eb000084          ADD      r0,r0,r4,LSL #2       ;278
00005c  f8a030a2          STRH     r3,[r0,#0xa2]         ;278
000060  2001              MOVS     r0,#1                 ;280
000062  e7d2              B        |L4.10|
;;;282    
                          ENDP


                          AREA ||i.CAN_MD_PROTOCOL_DataStructInit||, CODE, READONLY, ALIGN=1

                  CAN_MD_PROTOCOL_DataStructInit PROC
;;;181    // 数据结构初始化
;;;182    void CAN_MD_PROTOCOL_DataStructInit(CAN_MD_PROTOCOL_CB* pCB)
000000  b510              PUSH     {r4,lr}
;;;183    {
;;;184    	uint16 i;
;;;185    	
;;;186    	// 参数合法性检验
;;;187    	if (NULL == pCB)
000002  b900              CBNZ     r0,|L5.6|
                  |L5.4|
;;;188    	{
;;;189    		return;
;;;190    	}
;;;191    
;;;192    	pCB->tx.txBusy = FALSE;
;;;193    	pCB->tx.index = 0;
;;;194    	pCB->tx.head = 0;
;;;195    	pCB->tx.end = 0;
;;;196    	for(i = 0; i < CAN_MD_PROTOCOL_TX_QUEUE_SIZE; i++)
;;;197    	{
;;;198    		pCB->tx.cmdQueue[i].length = 0;
;;;199    	}
;;;200    
;;;201    	pCB->rxFIFO.head = 0;
;;;202    	pCB->rxFIFO.end = 0;
;;;203    	pCB->rxFIFO.currentProcessIndex = 0;
;;;204    
;;;205    	pCB->rx.head = 0;
;;;206    	pCB->rx.end  = 0;
;;;207    	for(i=0; i<CAN_MD_PROTOCOL_RX_QUEUE_SIZE; i++)
;;;208    	{
;;;209    		pCB->rx.cmdQueue[i].length = 0;
;;;210    	}
;;;211    }
000004  bd10              POP      {r4,pc}
                  |L5.6|
000006  2300              MOVS     r3,#0                 ;192
000008  f880349e          STRB     r3,[r0,#0x49e]        ;192
00000c  f8a0349c          STRH     r3,[r0,#0x49c]        ;193
000010  f8a03498          STRH     r3,[r0,#0x498]        ;194
000014  f8a0349a          STRH     r3,[r0,#0x49a]        ;195
000018  2100              MOVS     r1,#0                 ;196
00001a  e00c              B        |L5.54|
                  |L5.28|
00001c  2300              MOVS     r3,#0                 ;198
00001e  eb0102c1          ADD      r2,r1,r1,LSL #3       ;198
000022  eb021441          ADD      r4,r2,r1,LSL #5       ;198
000026  f500722b          ADD      r2,r0,#0x2ac          ;198
00002a  eb020284          ADD      r2,r2,r4,LSL #2       ;198
00002e  f8a230a2          STRH     r3,[r2,#0xa2]         ;198
000032  1c4a              ADDS     r2,r1,#1              ;196
000034  b291              UXTH     r1,r2                 ;196
                  |L5.54|
000036  2903              CMP      r1,#3                 ;196
000038  dbf0              BLT      |L5.28|
00003a  2200              MOVS     r2,#0                 ;201
00003c  f8202fb4          STRH     r2,[r0,#0xb4]!        ;201
000040  8042              STRH     r2,[r0,#2]            ;202
000042  80c2              STRH     r2,[r0,#6]            ;203
000044  38b4              SUBS     r0,r0,#0xb4           ;203
000046  2300              MOVS     r3,#0                 ;205
000048  f8a032a8          STRH     r3,[r0,#0x2a8]        ;205
00004c  f8a032aa          STRH     r3,[r0,#0x2aa]        ;206
000050  2100              MOVS     r1,#0                 ;207
000052  e00c              B        |L5.110|
                  |L5.84|
000054  2300              MOVS     r3,#0                 ;209
000056  eb0102c1          ADD      r2,r1,r1,LSL #3       ;209
00005a  eb021441          ADD      r4,r2,r1,LSL #5       ;209
00005e  f10002bc          ADD      r2,r0,#0xbc           ;209
000062  eb020284          ADD      r2,r2,r4,LSL #2       ;209
000066  f8a230a2          STRH     r3,[r2,#0xa2]         ;209
00006a  1c4a              ADDS     r2,r1,#1              ;207
00006c  b291              UXTH     r1,r2                 ;207
                  |L5.110|
00006e  2903              CMP      r1,#3                 ;207
000070  dbf0              BLT      |L5.84|
000072  bf00              NOP      
000074  e7c6              B        |L5.4|
;;;212    
                          ENDP


                          AREA ||i.CAN_MD_PROTOCOL_Init||, CODE, READONLY, ALIGN=2

                  CAN_MD_PROTOCOL_Init PROC
;;;65     // 协议初始化
;;;66     void CAN_MD_PROTOCOL_Init(void)
000000  b500              PUSH     {lr}
;;;67     {
;;;68     	// 协议层数据结构初始化
;;;69     	CAN_MD_PROTOCOL_DataStructInit(&canMDProtocolCB);
000002  4803              LDR      r0,|L6.16|
000004  f7fffffe          BL       CAN_MD_PROTOCOL_DataStructInit
;;;70     
;;;71     	// 向驱动层注册数据接收接口
;;;72     //	CAN_DRIVE_RegisterDataSendService(CAN_MD_PROTOCOL_MacProcess);
;;;73     
;;;74     	// 向驱动层注册数据发送接口
;;;75     	CAN_MD_PROTOCOL_RegisterDataSendService(CAN_DRIVE_AddTxArray);
000008  4802              LDR      r0,|L6.20|
00000a  f7fffffe          BL       CAN_MD_PROTOCOL_RegisterDataSendService
;;;76     }
00000e  bd00              POP      {pc}
;;;77     
                          ENDP

                  |L6.16|
                          DCD      canMDProtocolCB
                  |L6.20|
                          DCD      CAN_DRIVE_AddTxArray

                          AREA ||i.CAN_MD_PROTOCOL_MacProcess||, CODE, READONLY, ALIGN=2

                  CAN_MD_PROTOCOL_MacProcess PROC
;;;213    // UART报文接收处理函数(注意根据具体模块修改)
;;;214    void CAN_MD_PROTOCOL_MacProcess(uint32 standarID, uint8* pData, uint16 length)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;215    {
;;;216    	uint16 end = canMDProtocolCB.rxFIFO.end;
000004  f8dfc0a0          LDR      r12,|L7.168|
000008  f8bc70b6          LDRH     r7,[r12,#0xb6]  ; canMDProtocolCB
;;;217    	uint16 head = canMDProtocolCB.rxFIFO.head;
00000c  f8bc30b4          LDRH     r3,[r12,#0xb4]  ; canMDProtocolCB
;;;218    	uint16 i = 0;
000010  2400              MOVS     r4,#0
;;;219    	uint8 *rxdata = pData;
000012  460d              MOV      r5,r1
;;;220        uint16 destinationID = 0x000;
000014  2600              MOVS     r6,#0
;;;221    
;;;222    	// 取出目标节点
;;;223    	destinationID = standarID & 0x07FF;
000016  f3c0060a          UBFX     r6,r0,#0,#11
;;;224    
;;;225    	canMDProtocolCB.rxFIFO.deviceID = destinationID;
00001a  f8ac60b8          STRH     r6,[r12,#0xb8]
;;;226    	
;;;227    	//■■环形列队，入队■■
;;;228    	// 一级缓冲区已满，不予接收
;;;229    	if ((end + 1) % CAN_MD_PROTOCOL_RX_FIFO_SIZE == head)
00001e  f1070c01          ADD      r12,r7,#1
000022  f04f08b4          MOV      r8,#0xb4
000026  fb9cf9f8          SDIV     r9,r12,r8
00002a  fb08cc19          MLS      r12,r8,r9,r12
00002e  459c              CMP      r12,r3
000030  d101              BNE      |L7.54|
                  |L7.50|
;;;230    	{
;;;231    		return;
;;;232    	}
;;;233    	
;;;234    	for (i = 0; i < length; i++)
;;;235    	{
;;;236    		// 单个字节读取，并放入FIFO中
;;;237    		canMDProtocolCB.rxFIFO.buff[canMDProtocolCB.rxFIFO.end] = *rxdata++;
;;;238    		
;;;239    		canMDProtocolCB.rxFIFO.end++;
;;;240    		
;;;241    		// 一级缓冲区已满，不予接收
;;;242    		if ((canMDProtocolCB.rxFIFO.end + 1) % CAN_MD_PROTOCOL_RX_FIFO_SIZE == head)
;;;243    		{
;;;244    			break;
;;;245    		}
;;;246    		
;;;247    		canMDProtocolCB.rxFIFO.end %= CAN_MD_PROTOCOL_RX_FIFO_SIZE;
;;;248    	}
;;;249    }
000032  e8bd83f0          POP      {r4-r9,pc}
                  |L7.54|
000036  2400              MOVS     r4,#0                 ;234
000038  e031              B        |L7.158|
                  |L7.58|
00003a  f815cb01          LDRB     r12,[r5],#1           ;237
00003e  f8df8068          LDR      r8,|L7.168|
000042  f8b880b6          LDRH     r8,[r8,#0xb6]         ;237  ; canMDProtocolCB
000046  f8df9060          LDR      r9,|L7.168|
00004a  f809c008          STRB     r12,[r9,r8]           ;237
00004e  46cc              MOV      r12,r9                ;239
000050  f8bcc0b6          LDRH     r12,[r12,#0xb6]       ;239  ; canMDProtocolCB
000054  f10c0c01          ADD      r12,r12,#1            ;239
000058  46c8              MOV      r8,r9                 ;239
00005a  f8a8c0b6          STRH     r12,[r8,#0xb6]        ;239
00005e  46c4              MOV      r12,r8                ;242
000060  f8bcc0b6          LDRH     r12,[r12,#0xb6]       ;242  ; canMDProtocolCB
000064  f10c0c01          ADD      r12,r12,#1            ;242
000068  f04f08b4          MOV      r8,#0xb4              ;242
00006c  fb9cf9f8          SDIV     r9,r12,r8             ;242
000070  fb08cc19          MLS      r12,r8,r9,r12         ;242
000074  459c              CMP      r12,r3                ;242
000076  d100              BNE      |L7.122|
000078  e013              B        |L7.162|
                  |L7.122|
00007a  f8dfc02c          LDR      r12,|L7.168|
00007e  f8bcc0b6          LDRH     r12,[r12,#0xb6]       ;247  ; canMDProtocolCB
000082  f04f08b4          MOV      r8,#0xb4              ;247
000086  fb9cf9f8          SDIV     r9,r12,r8             ;247
00008a  fb08cc19          MLS      r12,r8,r9,r12         ;247
00008e  f8df8018          LDR      r8,|L7.168|
000092  f8a8c0b6          STRH     r12,[r8,#0xb6]        ;247
000096  f1040c01          ADD      r12,r4,#1             ;234
00009a  fa1ff48c          UXTH     r4,r12                ;234
                  |L7.158|
00009e  4294              CMP      r4,r2                 ;234
0000a0  dbcb              BLT      |L7.58|
                  |L7.162|
0000a2  bf00              NOP                            ;244
0000a4  bf00              NOP      
0000a6  e7c4              B        |L7.50|
;;;250    
                          ENDP

                  |L7.168|
                          DCD      canMDProtocolCB

                          AREA ||i.CAN_MD_PROTOCOL_Process||, CODE, READONLY, ALIGN=2

                  CAN_MD_PROTOCOL_Process PROC
;;;78     // UART协议层过程处理
;;;79     void CAN_MD_PROTOCOL_Process(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81     	// CAN接收FIFO缓冲区处理
;;;82     	CAN_MD_PROTOCOL_RxFIFOProcess(&canMDProtocolCB);
000002  4804              LDR      r0,|L8.20|
000004  f7fffffe          BL       CAN_MD_PROTOCOL_RxFIFOProcess
;;;83     
;;;84     	// CAN接收命令缓冲区处理
;;;85     	CAN_MD_PROTOCOL_CmdFrameProcess(&canMDProtocolCB);
000008  4802              LDR      r0,|L8.20|
00000a  f7fffffe          BL       CAN_MD_PROTOCOL_CmdFrameProcess
;;;86     	
;;;87     	// CAN协议层发送处理过程
;;;88     	CAN_MD_PROTOCOL_TxStateProcess();
00000e  f7fffffe          BL       CAN_MD_PROTOCOL_TxStateProcess
;;;89     }
000012  bd10              POP      {r4,pc}
;;;90     
                          ENDP

                  |L8.20|
                          DCD      canMDProtocolCB

                          AREA ||i.CAN_MD_PROTOCOL_RegisterDataSendService||, CODE, READONLY, ALIGN=2

                  CAN_MD_PROTOCOL_RegisterDataSendService PROC
;;;251    // UART协议层向驱动层注册数据发送接口
;;;252    void CAN_MD_PROTOCOL_RegisterDataSendService(BOOL (*service)(uint32 id, uint8 *pData, uint8 length))
000000  4901              LDR      r1,|L9.8|
;;;253    {		
;;;254    	canMDProtocolCB.sendDataThrowService = service;
000002  f8c104a0          STR      r0,[r1,#0x4a0]  ; canMDProtocolCB
;;;255    }
000006  4770              BX       lr
;;;256    
                          ENDP

                  |L9.8|
                          DCD      canMDProtocolCB

                          AREA ||i.CAN_MD_PROTOCOL_RxFIFOProcess||, CODE, READONLY, ALIGN=1

                  CAN_MD_PROTOCOL_RxFIFOProcess PROC
;;;316    // 一级接收缓冲区处理，从一级接收缓冲区中取出一个字节添加到命令帧缓冲区中
;;;317    void CAN_MD_PROTOCOL_RxFIFOProcess(CAN_MD_PROTOCOL_CB* pCB)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;318    {
000004  4604              MOV      r4,r0
;;;319    	uint16 end = pCB->rxFIFO.end;
000006  f8b470b6          LDRH     r7,[r4,#0xb6]
;;;320    	uint16 head = pCB->rxFIFO.head;
00000a  f8b490b4          LDRH     r9,[r4,#0xb4]
;;;321    	CAN_MD_PROTOCOL_RX_CMD_FRAME* pCmdFrame = NULL;
00000e  2500              MOVS     r5,#0
;;;322    	uint16 length = 0;
000010  46a8              MOV      r8,r5
;;;323    	uint8 currentData = 0;
000012  2600              MOVS     r6,#0
;;;324    	
;;;325    	// 参数合法性检验
;;;326    	if(NULL == pCB)
000014  b90c              CBNZ     r4,|L10.26|
                  |L10.22|
;;;327    	{
;;;328    		return;
;;;329    	}
;;;330    	
;;;331    	// 一级缓冲区为空，退出
;;;332    	if(head == end)
;;;333    	{
;;;334    		return;
;;;335    	}
;;;336    
;;;337    	// 获取临时缓冲区指针
;;;338    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
;;;339        
;;;340    	// 取出当前要处理的字节
;;;341    	currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
;;;342    	
;;;343    	// 临时缓冲区长度为0时，搜索首字节
;;;344    	if(0 == pCmdFrame->length)
;;;345    	{
;;;346    		// 命令头错误，删除当前字节并退出
;;;347    		if(CAN_MD_PROTOCOL_CMD_HEAD != currentData)
;;;348    		{
;;;349    			pCB->rxFIFO.head ++;
;;;350    			pCB->rxFIFO.head %= CAN_MD_PROTOCOL_RX_FIFO_SIZE;
;;;351    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;352    
;;;353    			return;
;;;354    		}
;;;355    		
;;;356    		// 命令头正确，但无临时缓冲区可用，退出
;;;357    		if((pCB->rx.end + 1)%CAN_MD_PROTOCOL_RX_QUEUE_SIZE == pCB->rx.head)
;;;358    		{
;;;359    			return;
;;;360    		}
;;;361    
;;;362    		// 添加UART通讯超时时间设置-2016.1.5增加
;;;363    #if CAN_MD_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;364    		TIMER_AddTask(TIMER_ID_CAN_COMMUNICATION_TIME_OUT,
;;;365    						CAN_MD_PROTOCOL_BUS_UNIDIRECTIONAL_TIME_OUT,
;;;366    						CAN_MD_PROTOCOL_CALLBACK_RxTimeOut,
;;;367    						0,
;;;368    						1,
;;;369    						ACTION_MODE_ADD_TO_QUEUE);
;;;370    #endif
;;;371    		
;;;372    		// 命令头正确，有临时缓冲区可用，则将其添加到命令帧临时缓冲区中
;;;373    		pCmdFrame->buff[pCmdFrame->length++]= currentData;
;;;374    		pCB->rxFIFO.currentProcessIndex ++;
;;;375    		pCB->rxFIFO.currentProcessIndex %= CAN_MD_PROTOCOL_RX_FIFO_SIZE;
;;;376    	}
;;;377    	// 非首字节，将数据添加到命令帧临时缓冲区中，但暂不删除当前数据
;;;378    	else
;;;379    	{
;;;380    		// 临时缓冲区溢出，说明当前正在接收的命令帧是错误的，正确的命令帧不会出现长度溢出的情况
;;;381    		if(pCmdFrame->length >= CAN_MD_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX)
;;;382    		{
;;;383    #if CAN_MD_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;384    			// 停止RX通讯超时检测
;;;385    			CAN_MD_PROTOCOL_StopRxTimeOutCheck();
;;;386    #endif
;;;387    
;;;388    			// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;389    			pCmdFrame->length = 0;	// 2016.1.5增加
;;;390    			// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;391    			pCB->rxFIFO.head ++;
;;;392    			pCB->rxFIFO.head %= CAN_MD_PROTOCOL_RX_FIFO_SIZE;
;;;393    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;394    
;;;395    			return;
;;;396    		}
;;;397    
;;;398    		// 一直取到末尾
;;;399    		while(end != pCB->rxFIFO.currentProcessIndex)
;;;400    		{
;;;401    			// 取出当前要处理的字节
;;;402    			currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
;;;403    			// 缓冲区未溢出，正常接收，将数据添加到临时缓冲区中
;;;404    			pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;405    			pCB->rxFIFO.currentProcessIndex ++;
;;;406    			pCB->rxFIFO.currentProcessIndex %= CAN_MD_PROTOCOL_RX_FIFO_SIZE;
;;;407    
;;;408    			// ■■接下来，需要检查命令帧是否完整，如果完整，则将命令帧临时缓冲区扶正■■
;;;409    			
;;;410    			// 首先判断命令帧最小长度，一个完整的命令字至少包括8个字节: 命令头、设备地址、命令字、数据长度、校验和L、校验和H、结束标识0xD、结束标识OxA，因此不足8个字节的必定不完整
;;;411    			if(pCmdFrame->length < CAN_MD_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;412    			{
;;;413    				// 继续接收
;;;414    				continue;
;;;415    			}
;;;416    
;;;417    			// 命令帧长度数值越界，说明当前命令帧错误，停止接收
;;;418    			if(pCmdFrame->buff[CAN_MD_PROTOCOL_CMD_LENGTH_INDEX] > CAN_MD_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX-CAN_MD_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;419    			{
;;;420    #if CAN_MD_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;421    				// 停止RX通讯超时检测
;;;422    				CAN_MD_PROTOCOL_StopRxTimeOutCheck();
;;;423    #endif
;;;424    			
;;;425    				// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;426    				pCmdFrame->length = 0;
;;;427    				// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;428    				pCB->rxFIFO.head ++;
;;;429    				pCB->rxFIFO.head %= CAN_MD_PROTOCOL_RX_FIFO_SIZE;
;;;430    				pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;431    
;;;432    				return;
;;;433    			}
;;;434    
;;;435    			// 命令帧长度校验，在命令长度描述字的数值上，增加命令头、设备地址、命令字、数据长度、校验和L、校验和H、结束标识0xD、结束标识OxA，即为命令帧实际长度
;;;436    			length = pCmdFrame->length;
;;;437    			if(length < pCmdFrame->buff[CAN_MD_PROTOCOL_CMD_LENGTH_INDEX] + CAN_MD_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;438    			{
;;;439    				// 长度要求不一致，说明未接收完毕，退出继续
;;;440    				continue;
;;;441    			}
;;;442    
;;;443    			// 命令帧长度OK，则进行校验，失败时删除命令头
;;;444    			if(!CAN_MD_PROTOCOL_CheckSUM(pCmdFrame->buff, pCmdFrame->length, pCB->rxFIFO.deviceID))
;;;445    			{
;;;446    #if CAN_MD_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;447    				// 停止RX通讯超时检测
;;;448    				CAN_MD_PROTOCOL_StopRxTimeOutCheck();
;;;449    #endif
;;;450    				
;;;451    				// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;452    				pCmdFrame->length = 0;
;;;453    				// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;454    				pCB->rxFIFO.head ++;
;;;455    				pCB->rxFIFO.head %= CAN_MD_PROTOCOL_RX_FIFO_SIZE;
;;;456    				pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;457    				
;;;458    				return;
;;;459    			}
;;;460    
;;;461    #if CAN_MD_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;462    			// 停止RX通讯超时检测
;;;463    			CAN_MD_PROTOCOL_StopRxTimeOutCheck();
;;;464    #endif
;;;465    			
;;;466    			// 执行到这里，即说明接收到了一个完整并且正确的命令帧，此时需将处理过的数据从一级缓冲区中删除，并将该命令帧扶正
;;;467    			pCB->rxFIFO.head += length;
;;;468    			pCB->rxFIFO.head %= CAN_MD_PROTOCOL_RX_FIFO_SIZE;
;;;469    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;470    			CAN_MD_PROTOCOL_ConfirmTempCmdFrameBuff(pCB);
;;;471    
;;;472    			return;
;;;473    		}
;;;474    	}
;;;475    }
000016  e8bd83f0          POP      {r4-r9,pc}
                  |L10.26|
00001a  45b9              CMP      r9,r7                 ;332
00001c  d100              BNE      |L10.32|
00001e  e7fa              B        |L10.22|
                  |L10.32|
000020  f8b402aa          LDRH     r0,[r4,#0x2aa]        ;338
000024  eb0001c0          ADD      r1,r0,r0,LSL #3       ;338
000028  eb011140          ADD      r1,r1,r0,LSL #5       ;338
00002c  f10400bc          ADD      r0,r4,#0xbc           ;338
000030  eb000581          ADD      r5,r0,r1,LSL #2       ;338
000034  f8b400ba          LDRH     r0,[r4,#0xba]         ;341
000038  5c26              LDRB     r6,[r4,r0]            ;341
00003a  f8b500a2          LDRH     r0,[r5,#0xa2]         ;344
00003e  bb90              CBNZ     r0,|L10.166|
000040  2e55              CMP      r6,#0x55              ;347
000042  d00e              BEQ      |L10.98|
000044  f8340fb4          LDRH     r0,[r4,#0xb4]!        ;349
000048  1c40              ADDS     r0,r0,#1              ;349
00004a  8020              STRH     r0,[r4,#0]            ;349
00004c  8820              LDRH     r0,[r4,#0]            ;350
00004e  21b4              MOVS     r1,#0xb4              ;350
000050  fb90f2f1          SDIV     r2,r0,r1              ;350
000054  fb010012          MLS      r0,r1,r2,r0           ;350
000058  8020              STRH     r0,[r4,#0]            ;350
00005a  8820              LDRH     r0,[r4,#0]            ;351
00005c  80e0              STRH     r0,[r4,#6]            ;351
00005e  3cb4              SUBS     r4,r4,#0xb4           ;351
000060  e7d9              B        |L10.22|
                  |L10.98|
000062  f8b402aa          LDRH     r0,[r4,#0x2aa]        ;357
000066  1c40              ADDS     r0,r0,#1              ;357
000068  2103              MOVS     r1,#3                 ;357
00006a  fb90f2f1          SDIV     r2,r0,r1              ;357
00006e  fb010112          MLS      r1,r1,r2,r0           ;357
000072  f8b402a8          LDRH     r0,[r4,#0x2a8]        ;357
000076  4281              CMP      r1,r0                 ;357
000078  d100              BNE      |L10.124|
00007a  e7cc              B        |L10.22|
                  |L10.124|
00007c  f8351fa2          LDRH     r1,[r5,#0xa2]!        ;373
000080  8828              LDRH     r0,[r5,#0]            ;373
000082  1c40              ADDS     r0,r0,#1              ;373
000084  f82509a2          STRH     r0,[r5],#-0xa2        ;373
000088  1ca8              ADDS     r0,r5,#2              ;373
00008a  5446              STRB     r6,[r0,r1]            ;373
00008c  f8340fba          LDRH     r0,[r4,#0xba]!        ;374
000090  1c40              ADDS     r0,r0,#1              ;374
000092  8020              STRH     r0,[r4,#0]            ;374
000094  8820              LDRH     r0,[r4,#0]            ;375
000096  21b4              MOVS     r1,#0xb4              ;375
000098  fb90f2f1          SDIV     r2,r0,r1              ;375
00009c  fb010012          MLS      r0,r1,r2,r0           ;375
0000a0  f82409ba          STRH     r0,[r4],#-0xba        ;375
0000a4  e07f              B        |L10.422|
                  |L10.166|
0000a6  e7ff              B        |L10.168|
                  |L10.168|
0000a8  f8b500a2          LDRH     r0,[r5,#0xa2]         ;381
0000ac  28a0              CMP      r0,#0xa0              ;381
0000ae  db11              BLT      |L10.212|
0000b0  2000              MOVS     r0,#0                 ;389
0000b2  f8a500a2          STRH     r0,[r5,#0xa2]         ;389
0000b6  f8340fb4          LDRH     r0,[r4,#0xb4]!        ;391
0000ba  1c40              ADDS     r0,r0,#1              ;391
0000bc  8020              STRH     r0,[r4,#0]            ;391
0000be  8820              LDRH     r0,[r4,#0]            ;392
0000c0  21b4              MOVS     r1,#0xb4              ;392
0000c2  fb90f2f1          SDIV     r2,r0,r1              ;392
0000c6  fb010012          MLS      r0,r1,r2,r0           ;392
0000ca  8020              STRH     r0,[r4,#0]            ;392
0000cc  8820              LDRH     r0,[r4,#0]            ;393
0000ce  80e0              STRH     r0,[r4,#6]            ;393
0000d0  3cb4              SUBS     r4,r4,#0xb4           ;393
0000d2  e7a0              B        |L10.22|
                  |L10.212|
0000d4  e063              B        |L10.414|
                  |L10.214|
0000d6  f8b400ba          LDRH     r0,[r4,#0xba]         ;402
0000da  5c26              LDRB     r6,[r4,r0]            ;402
0000dc  f8351fa2          LDRH     r1,[r5,#0xa2]!        ;404
0000e0  8828              LDRH     r0,[r5,#0]            ;404
0000e2  1c40              ADDS     r0,r0,#1              ;404
0000e4  f82509a2          STRH     r0,[r5],#-0xa2        ;404
0000e8  1ca8              ADDS     r0,r5,#2              ;404
0000ea  5446              STRB     r6,[r0,r1]            ;404
0000ec  f8340fba          LDRH     r0,[r4,#0xba]!        ;405
0000f0  1c40              ADDS     r0,r0,#1              ;405
0000f2  8020              STRH     r0,[r4,#0]            ;405
0000f4  8820              LDRH     r0,[r4,#0]            ;406
0000f6  21b4              MOVS     r1,#0xb4              ;406
0000f8  fb90f2f1          SDIV     r2,r0,r1              ;406
0000fc  fb010012          MLS      r0,r1,r2,r0           ;406
000100  f82409ba          STRH     r0,[r4],#-0xba        ;406
000104  f8b500a2          LDRH     r0,[r5,#0xa2]         ;411
000108  2809              CMP      r0,#9                 ;411
00010a  da00              BGE      |L10.270|
00010c  e047              B        |L10.414|
                  |L10.270|
00010e  7968              LDRB     r0,[r5,#5]            ;418
000110  2897              CMP      r0,#0x97              ;418
000112  dd11              BLE      |L10.312|
000114  2000              MOVS     r0,#0                 ;426
000116  f8a500a2          STRH     r0,[r5,#0xa2]         ;426
00011a  f8340fb4          LDRH     r0,[r4,#0xb4]!        ;428
00011e  1c40              ADDS     r0,r0,#1              ;428
000120  8020              STRH     r0,[r4,#0]            ;428
000122  8820              LDRH     r0,[r4,#0]            ;429
000124  21b4              MOVS     r1,#0xb4              ;429
000126  fb90f2f1          SDIV     r2,r0,r1              ;429
00012a  fb010012          MLS      r0,r1,r2,r0           ;429
00012e  8020              STRH     r0,[r4,#0]            ;429
000130  8820              LDRH     r0,[r4,#0]            ;430
000132  80e0              STRH     r0,[r4,#6]            ;430
000134  3cb4              SUBS     r4,r4,#0xb4           ;430
000136  e76e              B        |L10.22|
                  |L10.312|
000138  f8b580a2          LDRH     r8,[r5,#0xa2]         ;436
00013c  7968              LDRB     r0,[r5,#5]            ;437
00013e  3009              ADDS     r0,r0,#9              ;437
000140  4540              CMP      r0,r8                 ;437
000142  dd00              BLE      |L10.326|
000144  e02b              B        |L10.414|
                  |L10.326|
000146  f8b420b8          LDRH     r2,[r4,#0xb8]         ;444
00014a  f8b510a2          LDRH     r1,[r5,#0xa2]         ;444
00014e  1ca8              ADDS     r0,r5,#2              ;444
000150  f7fffffe          BL       CAN_MD_PROTOCOL_CheckSUM
000154  b988              CBNZ     r0,|L10.378|
000156  2000              MOVS     r0,#0                 ;452
000158  f8a500a2          STRH     r0,[r5,#0xa2]         ;452
00015c  f8340fb4          LDRH     r0,[r4,#0xb4]!        ;454
000160  1c40              ADDS     r0,r0,#1              ;454
000162  8020              STRH     r0,[r4,#0]            ;454
000164  8820              LDRH     r0,[r4,#0]            ;455
000166  21b4              MOVS     r1,#0xb4              ;455
000168  fb90f2f1          SDIV     r2,r0,r1              ;455
00016c  fb010012          MLS      r0,r1,r2,r0           ;455
000170  8020              STRH     r0,[r4,#0]            ;455
000172  8820              LDRH     r0,[r4,#0]            ;456
000174  80e0              STRH     r0,[r4,#6]            ;456
000176  3cb4              SUBS     r4,r4,#0xb4           ;456
000178  e74d              B        |L10.22|
                  |L10.378|
00017a  f8340fb4          LDRH     r0,[r4,#0xb4]!        ;467
00017e  4440              ADD      r0,r0,r8              ;467
000180  8020              STRH     r0,[r4,#0]            ;467
000182  8820              LDRH     r0,[r4,#0]            ;468
000184  21b4              MOVS     r1,#0xb4              ;468
000186  fb90f2f1          SDIV     r2,r0,r1              ;468
00018a  fb010012          MLS      r0,r1,r2,r0           ;468
00018e  8020              STRH     r0,[r4,#0]            ;468
000190  8820              LDRH     r0,[r4,#0]            ;469
000192  80e0              STRH     r0,[r4,#6]            ;469
000194  3cb4              SUBS     r4,r4,#0xb4           ;469
000196  4620              MOV      r0,r4                 ;470
000198  f7fffffe          BL       CAN_MD_PROTOCOL_ConfirmTempCmdFrameBuff
00019c  e73b              B        |L10.22|
                  |L10.414|
00019e  f8b400ba          LDRH     r0,[r4,#0xba]         ;399
0001a2  42b8              CMP      r0,r7                 ;399
0001a4  d197              BNE      |L10.214|
                  |L10.422|
0001a6  bf00              NOP      
0001a8  e735              B        |L10.22|
;;;476    
                          ENDP


                          AREA ||i.CAN_MD_PROTOCOL_SendCmdNoResult||, CODE, READONLY, ALIGN=1

                  CAN_MD_PROTOCOL_SendCmdNoResult PROC
;;;671    // 发送命令无结果
;;;672    void CAN_MD_PROTOCOL_SendCmdNoResult(uint16 cmdWord)
000000  b510              PUSH     {r4,lr}
;;;673    {
000002  4604              MOV      r4,r0
;;;674    	// 添加命令头
;;;675    	CAN_MD_PROTOCOL_TxAddData(CAN_MD_PROTOCOL_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;676    	CAN_MD_PROTOCOL_TxAddData(CAN_MD_PROTOCOL_CMD_HEAD2);
00000a  20aa              MOVS     r0,#0xaa
00000c  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;677    	CAN_MD_PROTOCOL_TxAddData(CAN_MD_PROTOCOL_MODE_ACK);
000010  200c              MOVS     r0,#0xc
000012  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;678        
;;;679    	// 添加数据长度
;;;680    	CAN_MD_PROTOCOL_TxAddData(2);
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;681    	// 添加命令字
;;;682    	CAN_MD_PROTOCOL_TxAddData(cmdWord>>8); 	
00001c  1220              ASRS     r0,r4,#8
00001e  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;683    	CAN_MD_PROTOCOL_TxAddData(cmdWord&0x00FF);
000022  b2e0              UXTB     r0,r4
000024  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;684    		
;;;685    	CAN_MD_PROTOCOL_TxAddFrame();
000028  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddFrame
;;;686    }
00002c  bd10              POP      {r4,pc}
;;;687    
                          ENDP


                          AREA ||i.CAN_MD_PROTOCOL_SendCmdWithResult||, CODE, READONLY, ALIGN=1

                  CAN_MD_PROTOCOL_SendCmdWithResult PROC
;;;652    // 发送命令带结果
;;;653    void CAN_MD_PROTOCOL_SendCmdWithResult(uint16 cmdWord, uint8 result)
000000  b530              PUSH     {r4,r5,lr}
;;;654    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;655    	// 添加命令头
;;;656    	CAN_MD_PROTOCOL_TxAddData(CAN_MD_PROTOCOL_CMD_HEAD);
000006  2055              MOVS     r0,#0x55
000008  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;657    	CAN_MD_PROTOCOL_TxAddData(CAN_MD_PROTOCOL_CMD_HEAD2);
00000c  20aa              MOVS     r0,#0xaa
00000e  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;658    	CAN_MD_PROTOCOL_TxAddData(CAN_MD_PROTOCOL_MODE_ACK);
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;659        
;;;660    	// 添加数据长度
;;;661    	CAN_MD_PROTOCOL_TxAddData(2);
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;662    	// 添加命令字
;;;663    	CAN_MD_PROTOCOL_TxAddData(cmdWord>>8); 	
00001e  1220              ASRS     r0,r4,#8
000020  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;664    	CAN_MD_PROTOCOL_TxAddData(cmdWord&0x00FF);
000024  b2e0              UXTB     r0,r4
000026  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;665    	
;;;666    	CAN_MD_PROTOCOL_TxAddData(result);
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
;;;667    	
;;;668    	CAN_MD_PROTOCOL_TxAddFrame();
000030  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddFrame
;;;669    }
000034  bd30              POP      {r4,r5,pc}
;;;670    
                          ENDP


                          AREA ||i.CAN_MD_PROTOCOL_SendUpDataPacket||, CODE, READONLY, ALIGN=2

                  CAN_MD_PROTOCOL_SendUpDataPacket PROC
;;;688    // 发送升级数据
;;;689    void CAN_MD_PROTOCOL_SendUpDataPacket(DUT_FILE_TYPE upDataType, CAN_MD_PROTOCOL_CMD cmd, uint32 flashAddr, uint32 addr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;690    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;691    	uint8 i = 0;
00000c  2500              MOVS     r5,#0
;;;692        
;;;693    	switch (upDataType)
00000e  2e01              CMP      r6,#1
000010  d13e              BNE      |L13.144|
;;;694    	{
;;;695    //        case DUT_FILE_TYPE_HEX:							 // hex
;;;696    //            dut_info.reconnectionRepeatContent[0] = 121; // 总长度
;;;697    //            dut_info.reconnectionRepeatContent[1] = CAN_MD_PROTOCOL_CMD_HEAD;
;;;698    //            dut_info.reconnectionRepeatContent[2] = cmd;
;;;699    //            dut_info.reconnectionRepeatContent[3] = 0;											  // 数据长度
;;;700    //            dut_info.reconnectionRepeatContent[4] = 0;											  // 添加是否加密
;;;701    //            dut_info.reconnectionRepeatContent[5] = 0;											  // 添加密钥
;;;702    //            SPI_FLASH_ReadArray(&dut_info.reconnectionRepeatContent[6], flashAddr + (addr), 116); // 工具读取 4+112 个字节
;;;703    //            for (i = 0; i < 121; i++)															  // 添加数据
;;;704    //            {
;;;705    //                CAN_MD_PROTOCOL_TxAddData(dut_info.reconnectionRepeatContent[i + 1]);
;;;706    //            }
;;;707    //            break;
;;;708    
;;;709            case DUT_FILE_TYPE_BIN:							 // bin
;;;710                dut_info.reconnectionRepeatContent[0] = 139; // 总长度
000012  208b              MOVS     r0,#0x8b
000014  4921              LDR      r1,|L13.156|
000016  f881004c          STRB     r0,[r1,#0x4c]
;;;711                
;;;712                dut_info.reconnectionRepeatContent[1] = CAN_MD_PROTOCOL_CMD_HEAD;
00001a  2155              MOVS     r1,#0x55
00001c  481f              LDR      r0,|L13.156|
00001e  f880104d          STRB     r1,[r0,#0x4d]
;;;713                dut_info.reconnectionRepeatContent[2] = CAN_MD_PROTOCOL_CMD_HEAD2;
000022  21aa              MOVS     r1,#0xaa
000024  f880104e          STRB     r1,[r0,#0x4e]
;;;714                dut_info.reconnectionRepeatContent[3] = CAN_MD_PROTOCOL_MODE_WRITE; 
000028  2116              MOVS     r1,#0x16
00002a  f880104f          STRB     r1,[r0,#0x4f]
;;;715                dut_info.reconnectionRepeatContent[4] = 0; // 总长度									  // 数据长度            
00002e  2100              MOVS     r1,#0
000030  f8801050          STRB     r1,[r0,#0x50]
;;;716                dut_info.reconnectionRepeatContent[5] = (cmd>>8);
000034  1221              ASRS     r1,r4,#8
000036  f8801051          STRB     r1,[r0,#0x51]
;;;717                dut_info.reconnectionRepeatContent[6] = (cmd&0x00FF);   
00003a  f8804052          STRB     r4,[r0,#0x52]
;;;718    
;;;719                dut_info.reconnectionRepeatContent[7] = 0;                // boot没对第一个数据进行处理
00003e  2100              MOVS     r1,#0
000040  f8801053          STRB     r1,[r0,#0x53]
;;;720               
;;;721                dut_info.reconnectionRepeatContent[9] = ((dut_info.currentAppSize+1)>>8);				 
000044  8e00              LDRH     r0,[r0,#0x30]  ; dut_info
000046  1c40              ADDS     r0,r0,#1
000048  0a01              LSRS     r1,r0,#8
00004a  4814              LDR      r0,|L13.156|
00004c  f8801055          STRB     r1,[r0,#0x55]
;;;722                dut_info.reconnectionRepeatContent[8] = ((dut_info.currentAppSize+1)&0x00FF);
000050  f8900030          LDRB     r0,[r0,#0x30]  ; dut_info
000054  1c40              ADDS     r0,r0,#1
000056  b2c1              UXTB     r1,r0
000058  4810              LDR      r0,|L13.156|
00005a  f8801054          STRB     r1,[r0,#0x54]
;;;723                
;;;724                dut_info.reconnectionRepeatContent[10] = 0;					          // 128
00005e  2100              MOVS     r1,#0
000060  f8801056          STRB     r1,[r0,#0x56]
;;;725                dut_info.reconnectionRepeatContent[11] = 0x80;						  // 
000064  2180              MOVS     r1,#0x80
000066  f8801057          STRB     r1,[r0,#0x57]
;;;726                
;;;727                SPI_FLASH_ReadArray(&dut_info.reconnectionRepeatContent[12], flashAddr + (addr), 128); // 工具读取128字节
00006a  eb070108          ADD      r1,r7,r8
00006e  2280              MOVS     r2,#0x80
000070  3058              ADDS     r0,r0,#0x58
000072  f7fffffe          BL       SPI_FLASH_ReadArray
;;;728                for (i = 0; i < 139; i++)															  // 添加数据
000076  bf00              NOP      
000078  e007              B        |L13.138|
                  |L13.122|
;;;729                {
;;;730                    CAN_MD_PROTOCOL_TxAddData(dut_info.reconnectionRepeatContent[i + 1]);
00007a  4908              LDR      r1,|L13.156|
00007c  314c              ADDS     r1,r1,#0x4c
00007e  1c6a              ADDS     r2,r5,#1
000080  5c88              LDRB     r0,[r1,r2]
000082  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddData
000086  1c68              ADDS     r0,r5,#1              ;728
000088  b2c5              UXTB     r5,r0                 ;728
                  |L13.138|
00008a  2d8b              CMP      r5,#0x8b              ;728
00008c  dbf5              BLT      |L13.122|
;;;731                }
;;;732                break;
00008e  e000              B        |L13.146|
                  |L13.144|
;;;733                
;;;734            default:
;;;735                break;
000090  bf00              NOP      
                  |L13.146|
000092  bf00              NOP                            ;732
;;;736    	}
;;;737    	CAN_MD_PROTOCOL_TxAddFrame(); // 调整帧格式,修改长度和添加校验
000094  f7fffffe          BL       CAN_MD_PROTOCOL_TxAddFrame
;;;738    }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;739    
                          ENDP

                  |L13.156|
                          DCD      dut_info

                          AREA ||i.CAN_MD_PROTOCOL_StartTimeoutCheckTask||, CODE, READONLY, ALIGN=1

                  CAN_MD_PROTOCOL_StartTimeoutCheckTask PROC
;;;59     // 启动通讯超时判断任务
;;;60     void CAN_MD_PROTOCOL_StartTimeoutCheckTask(void)
000000  4770              BX       lr
;;;61     {
;;;62     
;;;63     }
;;;64     
                          ENDP


                          AREA ||i.CAN_MD_PROTOCOL_TxAddData||, CODE, READONLY, ALIGN=2

                  CAN_MD_PROTOCOL_TxAddData PROC
;;;91     // 向发送命令帧队列中添加数据
;;;92     void CAN_MD_PROTOCOL_TxAddData(uint8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;93     {
000002  4601              MOV      r1,r0
;;;94     	uint16 head = canMDProtocolCB.tx.head;
000004  4c13              LDR      r4,|L15.84|
000006  f8b42498          LDRH     r2,[r4,#0x498]
;;;95     	uint16 end =  canMDProtocolCB.tx.end;
00000a  f8b4349a          LDRH     r3,[r4,#0x49a]
;;;96     	CAN_MD_PROTOCOL_TX_CMD_FRAME* pCmdFrame = &canMDProtocolCB.tx.cmdQueue[canMDProtocolCB.tx.end];
00000e  f8b4449a          LDRH     r4,[r4,#0x49a]
000012  eb0405c4          ADD      r5,r4,r4,LSL #3
000016  eb051544          ADD      r5,r5,r4,LSL #5
00001a  4c0f              LDR      r4,|L15.88|
00001c  eb040085          ADD      r0,r4,r5,LSL #2
;;;97     
;;;98     	// 发送缓冲区已满，不予接收
;;;99     	if((end + 1) % CAN_MD_PROTOCOL_TX_QUEUE_SIZE == head)
000020  1c5c              ADDS     r4,r3,#1
000022  2503              MOVS     r5,#3
000024  fb94f6f5          SDIV     r6,r4,r5
000028  fb054416          MLS      r4,r5,r6,r4
00002c  4294              CMP      r4,r2
00002e  d100              BNE      |L15.50|
                  |L15.48|
;;;100    	{
;;;101    		return;
;;;102    	}
;;;103    	
;;;104    	// 队尾命令帧已满，退出
;;;105    	if(pCmdFrame->length >= CAN_MD_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX)
;;;106    	{
;;;107    		return;
;;;108    	}
;;;109    
;;;110    	// 数据添加到帧末尾，并更新帧长度
;;;111    	pCmdFrame->buff[pCmdFrame->length] = data;
;;;112    	pCmdFrame->length ++;
;;;113    }
000030  bd70              POP      {r4-r6,pc}
                  |L15.50|
000032  f8b040a2          LDRH     r4,[r0,#0xa2]         ;105
000036  2ca0              CMP      r4,#0xa0              ;105
000038  db00              BLT      |L15.60|
00003a  e7f9              B        |L15.48|
                  |L15.60|
00003c  f8b050a2          LDRH     r5,[r0,#0xa2]         ;111
000040  1c84              ADDS     r4,r0,#2              ;111
000042  5561              STRB     r1,[r4,r5]            ;111
000044  f8b040a2          LDRH     r4,[r0,#0xa2]         ;112
000048  1c64              ADDS     r4,r4,#1              ;112
00004a  f8a040a2          STRH     r4,[r0,#0xa2]         ;112
00004e  bf00              NOP      
000050  e7ee              B        |L15.48|
;;;114    
                          ENDP

000052  0000              DCW      0x0000
                  |L15.84|
                          DCD      canMDProtocolCB
                  |L15.88|
                          DCD      canMDProtocolCB+0x2ac

                          AREA ||i.CAN_MD_PROTOCOL_TxAddFrame||, CODE, READONLY, ALIGN=2

                  CAN_MD_PROTOCOL_TxAddFrame PROC
;;;115    // 确认添加命令帧，即承认之前填充的数据为命令帧，将其添加到发送队列中，由main进行调度发送，本函数内会自动校正命令长度，并添加校验码
;;;116    void CAN_MD_PROTOCOL_TxAddFrame(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;117    {
000004  b0a9              SUB      sp,sp,#0xa4
;;;118    	uint16 checkSum = 0;
000006  f04f0b00          MOV      r11,#0
;;;119    	uint8 i = 0, j = 0;
00000a  2600              MOVS     r6,#0
00000c  46b0              MOV      r8,r6
;;;120    	uint16 head = canMDProtocolCB.tx.head;
00000e  4993              LDR      r1,|L16.604|
000010  f8b19498          LDRH     r9,[r1,#0x498]
;;;121    	uint16 end  = canMDProtocolCB.tx.end;
000014  f8b1449a          LDRH     r4,[r1,#0x49a]
;;;122    	CAN_MD_PROTOCOL_TX_CMD_FRAME* pCmdFrame = &canMDProtocolCB.tx.cmdQueue[canMDProtocolCB.tx.end];
000018  f8b1149a          LDRH     r1,[r1,#0x49a]
00001c  eb0102c1          ADD      r2,r1,r1,LSL #3
000020  eb021241          ADD      r2,r2,r1,LSL #5
000024  498e              LDR      r1,|L16.608|
000026  eb010a82          ADD      r10,r1,r2,LSL #2
;;;123    	uint16 length = pCmdFrame->length;
00002a  f8ba70a2          LDRH     r7,[r10,#0xa2]
;;;124    	uint8 *buff = canMDProtocolCB.tx.cmdQueue[end].buff;    
00002e  eb0401c4          ADD      r1,r4,r4,LSL #3
000032  eb011244          ADD      r2,r1,r4,LSL #5
000036  498a              LDR      r1,|L16.608|
000038  eb010182          ADD      r1,r1,r2,LSL #2
00003c  1c8d              ADDS     r5,r1,#2
;;;125    	uint8 cmdHead = buff[CAN_MD_PROTOCOL_CMD_HEAD];  // 帧头
00003e  f8951055          LDRB     r1,[r5,#0x55]
000042  9128              STR      r1,[sp,#0xa0]
;;;126    	uint8 uBuff[CAN_MD_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX];
;;;127    	uint32 check = 0;
000044  2000              MOVS     r0,#0
;;;128    	
;;;129    	// 发送缓冲区已满，不予接收
;;;130    	if((end + 1) % CAN_MD_PROTOCOL_TX_QUEUE_SIZE == head)
000046  1c61              ADDS     r1,r4,#1
000048  2203              MOVS     r2,#3
00004a  fb91f3f2          SDIV     r3,r1,r2
00004e  fb021113          MLS      r1,r2,r3,r1
000052  4549              CMP      r1,r9
000054  d102              BNE      |L16.92|
                  |L16.86|
;;;131    	{
;;;132    		return;
;;;133    	}
;;;134    	
;;;135    	// 命令头正确，但数据长度不对(数据长度减去CRC的长度)
;;;136    	if((CAN_MD_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX - CAN_MD_PROTOCOL_CMD_CHECK_BYTE_SIZE < length) || (CAN_MD_PROTOCOL_CMD_FRAME_LENGTH_MIN - CAN_MD_PROTOCOL_CMD_CHECK_BYTE_SIZE > length))
;;;137    	{
;;;138    	    // 把帧数据索引放在最开始位置
;;;139    		canMDProtocolCB.tx.cmdQueue[end].length = 0;
;;;140            
;;;141    		buff[CAN_MD_PROTOCOL_CMD_HEAD_INDEX] = CAN_MD_PROTOCOL_CMD_NONHEAD; // 避免数据没更新时，再次进入
;;;142    		
;;;143    		return;
;;;144    	}
;;;145    
;;;146    	// 执行到此，命令头正确，数据长度正确,发送缓冲区未满
;;;147    	// 长度扶正
;;;148    	canMDProtocolCB.tx.cmdQueue[end].buff[CAN_MD_PROTOCOL_CMD_LENGTH_INDEX] = length + CAN_MD_PROTOCOL_CMD_CHECK_BYTE_SIZE + CAN_MD_PROTOCOL_CMD_TAIL_BYTE - CAN_MD_PROTOCOL_CMD_FRAME_LENGTH_MIN;
;;;149    	
;;;150    	// CAN_ID 插入到帧头和帧模式
;;;151    	for (i = 0, j = 0;j < length;i++,j++)
;;;152    	{
;;;153    		if (i == 2)
;;;154    		{
;;;155    			uBuff[i++] = 0x07;
;;;156    			uBuff[i++] = (0x53 & 0xFF) ;
;;;157    //			uBuff[i++] = 0;
;;;158    //			uBuff[i++] = 0 ;			
;;;159    		}
;;;160    		uBuff[i] = buff[j];
;;;161    	}
;;;162    	
;;;163    	// 填充校验码
;;;164    	check = CRC32_Calculate(uBuff, length+2);
;;;165    
;;;166    	buff[canMDProtocolCB.tx.cmdQueue[end].length++] = (check >> 24) & 0xFF;
;;;167    	buff[canMDProtocolCB.tx.cmdQueue[end].length++] = (check >> 16) & 0xFF;
;;;168    	buff[canMDProtocolCB.tx.cmdQueue[end].length++] = (check >> 8) & 0xFF;
;;;169    	buff[canMDProtocolCB.tx.cmdQueue[end].length++] = (check & 0xFF);
;;;170    	
;;;171    	// 填充帧尾
;;;172    	buff[canMDProtocolCB.tx.cmdQueue[end].length] = CAN_MD_PROTOCOL_CMD_TAIL;
;;;173    	canMDProtocolCB.tx.cmdQueue[end].length++;
;;;174    
;;;175    	// 发送环形队列更新位置
;;;176    	canMDProtocolCB.tx.end ++;
;;;177    	canMDProtocolCB.tx.end %= CAN_MD_PROTOCOL_TX_QUEUE_SIZE;
;;;178    	canMDProtocolCB.tx.cmdQueue[canMDProtocolCB.tx.end].length = 0;	//2015.12.2修改
;;;179    }
000056  b029              ADD      sp,sp,#0xa4
000058  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.92|
00005c  2f9c              CMP      r7,#0x9c              ;136
00005e  dc01              BGT      |L16.100|
000060  2f05              CMP      r7,#5                 ;136
000062  da0c              BGE      |L16.126|
                  |L16.100|
000064  2200              MOVS     r2,#0                 ;139
000066  eb0401c4          ADD      r1,r4,r4,LSL #3       ;139
00006a  eb011344          ADD      r3,r1,r4,LSL #5       ;139
00006e  497c              LDR      r1,|L16.608|
000070  eb010183          ADD      r1,r1,r3,LSL #2       ;139
000074  f8a120a2          STRH     r2,[r1,#0xa2]         ;139
000078  21ff              MOVS     r1,#0xff              ;141
00007a  7029              STRB     r1,[r5,#0]            ;141
00007c  e7eb              B        |L16.86|
                  |L16.126|
00007e  1f39              SUBS     r1,r7,#4              ;148
000080  b2ca              UXTB     r2,r1                 ;148
000082  eb0401c4          ADD      r1,r4,r4,LSL #3       ;148
000086  eb011344          ADD      r3,r1,r4,LSL #5       ;148
00008a  4975              LDR      r1,|L16.608|
00008c  eb010183          ADD      r1,r1,r3,LSL #2       ;148
000090  714a              STRB     r2,[r1,#5]            ;148
000092  2600              MOVS     r6,#0                 ;151
000094  46b0              MOV      r8,r6                 ;151
000096  e017              B        |L16.200|
                  |L16.152|
000098  2e02              CMP      r6,#2                 ;153
00009a  d10b              BNE      |L16.180|
00009c  2307              MOVS     r3,#7                 ;155
00009e  4631              MOV      r1,r6                 ;155
0000a0  1c72              ADDS     r2,r6,#1              ;155
0000a2  b2d6              UXTB     r6,r2                 ;155
0000a4  f80d3001          STRB     r3,[sp,r1]            ;155
0000a8  2353              MOVS     r3,#0x53              ;156
0000aa  4631              MOV      r1,r6                 ;156
0000ac  1c72              ADDS     r2,r6,#1              ;156
0000ae  b2d6              UXTB     r6,r2                 ;156
0000b0  f80d3001          STRB     r3,[sp,r1]            ;156
                  |L16.180|
0000b4  f8151008          LDRB     r1,[r5,r8]            ;160
0000b8  f80d1006          STRB     r1,[sp,r6]            ;160
0000bc  1c71              ADDS     r1,r6,#1              ;151
0000be  b2ce              UXTB     r6,r1                 ;151
0000c0  f1080101          ADD      r1,r8,#1              ;151
0000c4  f00108ff          AND      r8,r1,#0xff           ;151
                  |L16.200|
0000c8  45b8              CMP      r8,r7                 ;151
0000ca  dbe5              BLT      |L16.152|
0000cc  1cba              ADDS     r2,r7,#2              ;164
0000ce  b291              UXTH     r1,r2                 ;164
0000d0  4668              MOV      r0,sp                 ;164
0000d2  f7fffffe          BL       CRC32_Calculate
0000d6  0e01              LSRS     r1,r0,#24             ;166
0000d8  eb0402c4          ADD      r2,r4,r4,LSL #3       ;166
0000dc  eb021344          ADD      r3,r2,r4,LSL #5       ;166
0000e0  4a5f              LDR      r2,|L16.608|
0000e2  eb020283          ADD      r2,r2,r3,LSL #2       ;166
0000e6  f8b230a2          LDRH     r3,[r2,#0xa2]         ;166
0000ea  eb0402c4          ADD      r2,r4,r4,LSL #3       ;166
0000ee  eb021c44          ADD      r12,r2,r4,LSL #5      ;166
0000f2  4a5b              LDR      r2,|L16.608|
0000f4  eb02028c          ADD      r2,r2,r12,LSL #2      ;166
0000f8  f8b220a2          LDRH     r2,[r2,#0xa2]         ;166
0000fc  1c52              ADDS     r2,r2,#1              ;166
0000fe  fa1ffc82          UXTH     r12,r2                ;166
000102  eb0402c4          ADD      r2,r4,r4,LSL #3       ;166
000106  eb021e44          ADD      lr,r2,r4,LSL #5       ;166
00010a  4a55              LDR      r2,|L16.608|
00010c  eb02028e          ADD      r2,r2,lr,LSL #2       ;166
000110  f8a2c0a2          STRH     r12,[r2,#0xa2]        ;166
000114  54e9              STRB     r1,[r5,r3]            ;166
000116  f3c04207          UBFX     r2,r0,#16,#8          ;167
00011a  eb0401c4          ADD      r1,r4,r4,LSL #3       ;167
00011e  eb011344          ADD      r3,r1,r4,LSL #5       ;167
000122  494f              LDR      r1,|L16.608|
000124  eb010183          ADD      r1,r1,r3,LSL #2       ;167
000128  f8b130a2          LDRH     r3,[r1,#0xa2]         ;167
00012c  eb0401c4          ADD      r1,r4,r4,LSL #3       ;167
000130  eb011c44          ADD      r12,r1,r4,LSL #5      ;167
000134  494a              LDR      r1,|L16.608|
000136  eb01018c          ADD      r1,r1,r12,LSL #2      ;167
00013a  f8b110a2          LDRH     r1,[r1,#0xa2]         ;167
00013e  1c49              ADDS     r1,r1,#1              ;167
000140  fa1ffc81          UXTH     r12,r1                ;167
000144  eb0401c4          ADD      r1,r4,r4,LSL #3       ;167
000148  eb011e44          ADD      lr,r1,r4,LSL #5       ;167
00014c  4944              LDR      r1,|L16.608|
00014e  eb01018e          ADD      r1,r1,lr,LSL #2       ;167
000152  f8a1c0a2          STRH     r12,[r1,#0xa2]        ;167
000156  54ea              STRB     r2,[r5,r3]            ;167
000158  f3c02207          UBFX     r2,r0,#8,#8           ;168
00015c  eb0401c4          ADD      r1,r4,r4,LSL #3       ;168
000160  eb011344          ADD      r3,r1,r4,LSL #5       ;168
000164  493e              LDR      r1,|L16.608|
000166  eb010183          ADD      r1,r1,r3,LSL #2       ;168
00016a  f8b130a2          LDRH     r3,[r1,#0xa2]         ;168
00016e  eb0401c4          ADD      r1,r4,r4,LSL #3       ;168
000172  eb011c44          ADD      r12,r1,r4,LSL #5      ;168
000176  493a              LDR      r1,|L16.608|
000178  eb01018c          ADD      r1,r1,r12,LSL #2      ;168
00017c  f8b110a2          LDRH     r1,[r1,#0xa2]         ;168
000180  1c49              ADDS     r1,r1,#1              ;168
000182  fa1ffc81          UXTH     r12,r1                ;168
000186  eb0401c4          ADD      r1,r4,r4,LSL #3       ;168
00018a  eb011e44          ADD      lr,r1,r4,LSL #5       ;168
00018e  4934              LDR      r1,|L16.608|
000190  eb01018e          ADD      r1,r1,lr,LSL #2       ;168
000194  f8a1c0a2          STRH     r12,[r1,#0xa2]        ;168
000198  54ea              STRB     r2,[r5,r3]            ;168
00019a  b2c2              UXTB     r2,r0                 ;169
00019c  eb0401c4          ADD      r1,r4,r4,LSL #3       ;169
0001a0  eb011344          ADD      r3,r1,r4,LSL #5       ;169
0001a4  492e              LDR      r1,|L16.608|
0001a6  eb010183          ADD      r1,r1,r3,LSL #2       ;169
0001aa  f8b130a2          LDRH     r3,[r1,#0xa2]         ;169
0001ae  eb0401c4          ADD      r1,r4,r4,LSL #3       ;169
0001b2  eb011c44          ADD      r12,r1,r4,LSL #5      ;169
0001b6  492a              LDR      r1,|L16.608|
0001b8  eb01018c          ADD      r1,r1,r12,LSL #2      ;169
0001bc  f8b110a2          LDRH     r1,[r1,#0xa2]         ;169
0001c0  1c49              ADDS     r1,r1,#1              ;169
0001c2  fa1ffc81          UXTH     r12,r1                ;169
0001c6  eb0401c4          ADD      r1,r4,r4,LSL #3       ;169
0001ca  eb011e44          ADD      lr,r1,r4,LSL #5       ;169
0001ce  4924              LDR      r1,|L16.608|
0001d0  eb01018e          ADD      r1,r1,lr,LSL #2       ;169
0001d4  f8a1c0a2          STRH     r12,[r1,#0xa2]        ;169
0001d8  54ea              STRB     r2,[r5,r3]            ;169
0001da  22f0              MOVS     r2,#0xf0              ;172
0001dc  eb0401c4          ADD      r1,r4,r4,LSL #3       ;172
0001e0  eb011344          ADD      r3,r1,r4,LSL #5       ;172
0001e4  491e              LDR      r1,|L16.608|
0001e6  eb010183          ADD      r1,r1,r3,LSL #2       ;172
0001ea  f8b110a2          LDRH     r1,[r1,#0xa2]         ;172
0001ee  546a              STRB     r2,[r5,r1]            ;172
0001f0  eb0401c4          ADD      r1,r4,r4,LSL #3       ;173
0001f4  eb011244          ADD      r2,r1,r4,LSL #5       ;173
0001f8  4919              LDR      r1,|L16.608|
0001fa  eb010182          ADD      r1,r1,r2,LSL #2       ;173
0001fe  f8b110a2          LDRH     r1,[r1,#0xa2]         ;173
000202  1c49              ADDS     r1,r1,#1              ;173
000204  b28a              UXTH     r2,r1                 ;173
000206  eb0401c4          ADD      r1,r4,r4,LSL #3       ;173
00020a  eb011344          ADD      r3,r1,r4,LSL #5       ;173
00020e  4914              LDR      r1,|L16.608|
000210  eb010183          ADD      r1,r1,r3,LSL #2       ;173
000214  f8a120a2          STRH     r2,[r1,#0xa2]         ;173
000218  4910              LDR      r1,|L16.604|
00021a  f8b1149a          LDRH     r1,[r1,#0x49a]        ;176
00021e  1c49              ADDS     r1,r1,#1              ;176
000220  b28a              UXTH     r2,r1                 ;176
000222  490e              LDR      r1,|L16.604|
000224  f8a1249a          STRH     r2,[r1,#0x49a]        ;176
000228  f8b1149a          LDRH     r1,[r1,#0x49a]        ;177
00022c  2203              MOVS     r2,#3                 ;177
00022e  fb91f3f2          SDIV     r3,r1,r2              ;177
000232  fb021113          MLS      r1,r2,r3,r1           ;177
000236  b28a              UXTH     r2,r1                 ;177
000238  4908              LDR      r1,|L16.604|
00023a  f8a1249a          STRH     r2,[r1,#0x49a]        ;177
00023e  2200              MOVS     r2,#0                 ;178
000240  f8b1149a          LDRH     r1,[r1,#0x49a]        ;178
000244  eb0103c1          ADD      r3,r1,r1,LSL #3       ;178
000248  eb031341          ADD      r3,r3,r1,LSL #5       ;178
00024c  4904              LDR      r1,|L16.608|
00024e  eb010183          ADD      r1,r1,r3,LSL #2       ;178
000252  f8a120a2          STRH     r2,[r1,#0xa2]         ;178
000256  bf00              NOP      
000258  e6fd              B        |L16.86|
;;;180    
                          ENDP

00025a  0000              DCW      0x0000
                  |L16.604|
                          DCD      canMDProtocolCB
                  |L16.608|
                          DCD      canMDProtocolCB+0x2ac

                          AREA ||i.CAN_MD_PROTOCOL_TxStateProcess||, CODE, READONLY, ALIGN=2

                  CAN_MD_PROTOCOL_TxStateProcess PROC
;;;283    // 协议层发送处理过程
;;;284    void CAN_MD_PROTOCOL_TxStateProcess(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;285    {
;;;286    	uint16 head = canMDProtocolCB.tx.head;
000004  4826              LDR      r0,|L17.160|
000006  f8b04498          LDRH     r4,[r0,#0x498]
;;;287    	uint16 end =  canMDProtocolCB.tx.end;
00000a  f8b0549a          LDRH     r5,[r0,#0x49a]
;;;288    	uint16 length = canMDProtocolCB.tx.cmdQueue[head].length;
00000e  eb0400c4          ADD      r0,r4,r4,LSL #3
000012  eb001144          ADD      r1,r0,r4,LSL #5
000016  4823              LDR      r0,|L17.164|
000018  eb000081          ADD      r0,r0,r1,LSL #2
00001c  f8b060a2          LDRH     r6,[r0,#0xa2]
;;;289    	uint8* pCmd = canMDProtocolCB.tx.cmdQueue[head].buff;
000020  eb0400c4          ADD      r0,r4,r4,LSL #3
000024  eb001144          ADD      r1,r0,r4,LSL #5
000028  481e              LDR      r0,|L17.164|
00002a  eb000081          ADD      r0,r0,r1,LSL #2
00002e  1c87              ADDS     r7,r0,#2
;;;290    	uint16 localDeviceID = canMDProtocolCB.tx.cmdQueue[head].deviceID;
000030  eb0400c4          ADD      r0,r4,r4,LSL #3
000034  eb001144          ADD      r1,r0,r4,LSL #5
000038  481a              LDR      r0,|L17.164|
00003a  f8308021          LDRH     r8,[r0,r1,LSL #2]
;;;291    
;;;292    	// 发送缓冲区为空，说明无数据
;;;293    	if (head == end)
00003e  42ac              CMP      r4,r5
000040  d101              BNE      |L17.70|
                  |L17.66|
;;;294    	{
;;;295    		return;
;;;296    	}
;;;297    
;;;298    	// 发送函数没有注册直接返回
;;;299    	if (NULL == canMDProtocolCB.sendDataThrowService)
;;;300    	{
;;;301    		return;
;;;302    	}
;;;303    
;;;304    	// 协议层有数据需要发送到驱动层		
;;;305    	if (!(*canMDProtocolCB.sendDataThrowService)(localDeviceID, pCmd, length))
;;;306    	{
;;;307    		return;
;;;308    	}
;;;309    
;;;310    	// 发送环形队列更新位置
;;;311    	canMDProtocolCB.tx.cmdQueue[head].length = 0;
;;;312    	canMDProtocolCB.tx.head ++;
;;;313    	canMDProtocolCB.tx.head %= CAN_MD_PROTOCOL_TX_QUEUE_SIZE;
;;;314    }
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L17.70|
000046  4816              LDR      r0,|L17.160|
000048  f8d004a0          LDR      r0,[r0,#0x4a0]        ;299  ; canMDProtocolCB
00004c  b900              CBNZ     r0,|L17.80|
00004e  e7f8              B        |L17.66|
                  |L17.80|
000050  b2f2              UXTB     r2,r6                 ;305
000052  4813              LDR      r0,|L17.160|
000054  4639              MOV      r1,r7                 ;305
000056  f8d034a0          LDR      r3,[r0,#0x4a0]        ;305  ; canMDProtocolCB
00005a  4640              MOV      r0,r8                 ;305
00005c  4798              BLX      r3                    ;305
00005e  b900              CBNZ     r0,|L17.98|
000060  e7ef              B        |L17.66|
                  |L17.98|
000062  2100              MOVS     r1,#0                 ;311
000064  eb0400c4          ADD      r0,r4,r4,LSL #3       ;311
000068  eb001244          ADD      r2,r0,r4,LSL #5       ;311
00006c  480d              LDR      r0,|L17.164|
00006e  eb000082          ADD      r0,r0,r2,LSL #2       ;311
000072  f8a010a2          STRH     r1,[r0,#0xa2]         ;311
000076  480a              LDR      r0,|L17.160|
000078  f8b00498          LDRH     r0,[r0,#0x498]        ;312
00007c  1c40              ADDS     r0,r0,#1              ;312
00007e  b281              UXTH     r1,r0                 ;312
000080  4807              LDR      r0,|L17.160|
000082  f8a01498          STRH     r1,[r0,#0x498]        ;312
000086  f8b00498          LDRH     r0,[r0,#0x498]        ;313
00008a  2103              MOVS     r1,#3                 ;313
00008c  fb90f2f1          SDIV     r2,r0,r1              ;313
000090  fb010012          MLS      r0,r1,r2,r0           ;313
000094  b281              UXTH     r1,r0                 ;313
000096  4802              LDR      r0,|L17.160|
000098  f8a01498          STRH     r1,[r0,#0x498]        ;313
00009c  bf00              NOP      
00009e  e7d0              B        |L17.66|
;;;315    
                          ENDP

                  |L17.160|
                          DCD      canMDProtocolCB
                  |L17.164|
                          DCD      canMDProtocolCB+0x2ac

                          AREA ||i.CRC32_Calculate||, CODE, READONLY, ALIGN=2

                  CRC32_Calculate PROC
;;;786    // CRC32 计算方法
;;;787    uint32 CRC32_Calculate( uint8 *pData, uint16 Length)
000000  b5f0              PUSH     {r4-r7,lr}
;;;788    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;789    	uint32 nReg;
;;;790    	uint32 nTemp = 0;
000006  2500              MOVS     r5,#0
;;;791    	uint16 i, n;
;;;792    	nReg = 0xFFFFFFFF;
000008  1e68              SUBS     r0,r5,#1
;;;793    	for ( n = 0; n < Length; n++ )
00000a  2100              MOVS     r1,#0
00000c  e00f              B        |L18.46|
                  |L18.14|
;;;794    	{
;;;795    		nReg ^= (uint32) pData[ n ];
00000e  5c56              LDRB     r6,[r2,r1]
000010  4070              EORS     r0,r0,r6
;;;796    		for ( i = 0; i < 4; i++ )
000012  2400              MOVS     r4,#0
000014  e007              B        |L18.38|
                  |L18.22|
;;;797    		{
;;;798    			nTemp = Crc32Table[ ( uint8 )( ( nReg >> 24 ) & 0xFF ) ];
000016  0e06              LSRS     r6,r0,#24
000018  4f06              LDR      r7,|L18.52|
00001a  f8575026          LDR      r5,[r7,r6,LSL #2]
;;;799    			nReg <<= 8;
00001e  0200              LSLS     r0,r0,#8
;;;800    			nReg ^= nTemp;
000020  4068              EORS     r0,r0,r5
000022  1c66              ADDS     r6,r4,#1              ;796
000024  b2b4              UXTH     r4,r6                 ;796
                  |L18.38|
000026  2c04              CMP      r4,#4                 ;796
000028  dbf5              BLT      |L18.22|
00002a  1c4e              ADDS     r6,r1,#1              ;793
00002c  b2b1              UXTH     r1,r6                 ;793
                  |L18.46|
00002e  4299              CMP      r1,r3                 ;793
000030  dbed              BLT      |L18.14|
;;;801    		}
;;;802    	}
;;;803    	return nReg;
;;;804    }
000032  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L18.52|
                          DCD      Crc32Table

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  canMDProtocolCB
                          %        1188

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Crc32Table
                          DCD      0x00000000
                          DCD      0x04c11db7
                          DCD      0x09823b6e
                          DCD      0x0d4326d9
                          DCD      0x130476dc
                          DCD      0x17c56b6b
                          DCD      0x1a864db2
                          DCD      0x1e475005
                          DCD      0x2608edb8
                          DCD      0x22c9f00f
                          DCD      0x2f8ad6d6
                          DCD      0x2b4bcb61
                          DCD      0x350c9b64
                          DCD      0x31cd86d3
                          DCD      0x3c8ea00a
                          DCD      0x384fbdbd
                          DCD      0x4c11db70
                          DCD      0x48d0c6c7
                          DCD      0x4593e01e
                          DCD      0x4152fda9
                          DCD      0x5f15adac
                          DCD      0x5bd4b01b
                          DCD      0x569796c2
                          DCD      0x52568b75
                          DCD      0x6a1936c8
                          DCD      0x6ed82b7f
                          DCD      0x639b0da6
                          DCD      0x675a1011
                          DCD      0x791d4014
                          DCD      0x7ddc5da3
                          DCD      0x709f7b7a
                          DCD      0x745e66cd
                          DCD      0x9823b6e0
                          DCD      0x9ce2ab57
                          DCD      0x91a18d8e
                          DCD      0x95609039
                          DCD      0x8b27c03c
                          DCD      0x8fe6dd8b
                          DCD      0x82a5fb52
                          DCD      0x8664e6e5
                          DCD      0xbe2b5b58
                          DCD      0xbaea46ef
                          DCD      0xb7a96036
                          DCD      0xb3687d81
                          DCD      0xad2f2d84
                          DCD      0xa9ee3033
                          DCD      0xa4ad16ea
                          DCD      0xa06c0b5d
                          DCD      0xd4326d90
                          DCD      0xd0f37027
                          DCD      0xddb056fe
                          DCD      0xd9714b49
                          DCD      0xc7361b4c
                          DCD      0xc3f706fb
                          DCD      0xceb42022
                          DCD      0xca753d95
                          DCD      0xf23a8028
                          DCD      0xf6fb9d9f
                          DCD      0xfbb8bb46
                          DCD      0xff79a6f1
                          DCD      0xe13ef6f4
                          DCD      0xe5ffeb43
                          DCD      0xe8bccd9a
                          DCD      0xec7dd02d
                          DCD      0x34867077
                          DCD      0x30476dc0
                          DCD      0x3d044b19
                          DCD      0x39c556ae
                          DCD      0x278206ab
                          DCD      0x23431b1c
                          DCD      0x2e003dc5
                          DCD      0x2ac12072
                          DCD      0x128e9dcf
                          DCD      0x164f8078
                          DCD      0x1b0ca6a1
                          DCD      0x1fcdbb16
                          DCD      0x018aeb13
                          DCD      0x054bf6a4
                          DCD      0x0808d07d
                          DCD      0x0cc9cdca
                          DCD      0x7897ab07
                          DCD      0x7c56b6b0
                          DCD      0x71159069
                          DCD      0x75d48dde
                          DCD      0x6b93dddb
                          DCD      0x6f52c06c
                          DCD      0x6211e6b5
                          DCD      0x66d0fb02
                          DCD      0x5e9f46bf
                          DCD      0x5a5e5b08
                          DCD      0x571d7dd1
                          DCD      0x53dc6066
                          DCD      0x4d9b3063
                          DCD      0x495a2dd4
                          DCD      0x44190b0d
                          DCD      0x40d816ba
                          DCD      0xaca5c697
                          DCD      0xa864db20
                          DCD      0xa527fdf9
                          DCD      0xa1e6e04e
                          DCD      0xbfa1b04b
                          DCD      0xbb60adfc
                          DCD      0xb6238b25
                          DCD      0xb2e29692
                          DCD      0x8aad2b2f
                          DCD      0x8e6c3698
                          DCD      0x832f1041
                          DCD      0x87ee0df6
                          DCD      0x99a95df3
                          DCD      0x9d684044
                          DCD      0x902b669d
                          DCD      0x94ea7b2a
                          DCD      0xe0b41de7
                          DCD      0xe4750050
                          DCD      0xe9362689
                          DCD      0xedf73b3e
                          DCD      0xf3b06b3b
                          DCD      0xf771768c
                          DCD      0xfa325055
                          DCD      0xfef34de2
                          DCD      0xc6bcf05f
                          DCD      0xc27dede8
                          DCD      0xcf3ecb31
                          DCD      0xcbffd686
                          DCD      0xd5b88683
                          DCD      0xd1799b34
                          DCD      0xdc3abded
                          DCD      0xd8fba05a
                          DCD      0x690ce0ee
                          DCD      0x6dcdfd59
                          DCD      0x608edb80
                          DCD      0x644fc637
                          DCD      0x7a089632
                          DCD      0x7ec98b85
                          DCD      0x738aad5c
                          DCD      0x774bb0eb
                          DCD      0x4f040d56
                          DCD      0x4bc510e1
                          DCD      0x46863638
                          DCD      0x42472b8f
                          DCD      0x5c007b8a
                          DCD      0x58c1663d
                          DCD      0x558240e4
                          DCD      0x51435d53
                          DCD      0x251d3b9e
                          DCD      0x21dc2629
                          DCD      0x2c9f00f0
                          DCD      0x285e1d47
                          DCD      0x36194d42
                          DCD      0x32d850f5
                          DCD      0x3f9b762c
                          DCD      0x3b5a6b9b
                          DCD      0x0315d626
                          DCD      0x07d4cb91
                          DCD      0x0a97ed48
                          DCD      0x0e56f0ff
                          DCD      0x1011a0fa
                          DCD      0x14d0bd4d
                          DCD      0x19939b94
                          DCD      0x1d528623
                          DCD      0xf12f560e
                          DCD      0xf5ee4bb9
                          DCD      0xf8ad6d60
                          DCD      0xfc6c70d7
                          DCD      0xe22b20d2
                          DCD      0xe6ea3d65
                          DCD      0xeba91bbc
                          DCD      0xef68060b
                          DCD      0xd727bbb6
                          DCD      0xd3e6a601
                          DCD      0xdea580d8
                          DCD      0xda649d6f
                          DCD      0xc423cd6a
                          DCD      0xc0e2d0dd
                          DCD      0xcda1f604
                          DCD      0xc960ebb3
                          DCD      0xbd3e8d7e
                          DCD      0xb9ff90c9
                          DCD      0xb4bcb610
                          DCD      0xb07daba7
                          DCD      0xae3afba2
                          DCD      0xaafbe615
                          DCD      0xa7b8c0cc
                          DCD      0xa379dd7b
                          DCD      0x9b3660c6
                          DCD      0x9ff77d71
                          DCD      0x92b45ba8
                          DCD      0x9675461f
                          DCD      0x8832161a
                          DCD      0x8cf30bad
                          DCD      0x81b02d74
                          DCD      0x857130c3
                          DCD      0x5d8a9099
                          DCD      0x594b8d2e
                          DCD      0x5408abf7
                          DCD      0x50c9b640
                          DCD      0x4e8ee645
                          DCD      0x4a4ffbf2
                          DCD      0x470cdd2b
                          DCD      0x43cdc09c
                          DCD      0x7b827d21
                          DCD      0x7f436096
                          DCD      0x7200464f
                          DCD      0x76c15bf8
                          DCD      0x68860bfd
                          DCD      0x6c47164a
                          DCD      0x61043093
                          DCD      0x65c52d24
                          DCD      0x119b4be9
                          DCD      0x155a565e
                          DCD      0x18197087
                          DCD      0x1cd86d30
                          DCD      0x029f3d35
                          DCD      0x065e2082
                          DCD      0x0b1d065b
                          DCD      0x0fdc1bec
                          DCD      0x3793a651
                          DCD      0x3352bbe6
                          DCD      0x3e119d3f
                          DCD      0x3ad08088
                          DCD      0x2497d08d
                          DCD      0x2056cd3a
                          DCD      0x2d15ebe3
                          DCD      0x29d4f654
                          DCD      0xc5a92679
                          DCD      0xc1683bce
                          DCD      0xcc2b1d17
                          DCD      0xc8ea00a0
                          DCD      0xd6ad50a5
                          DCD      0xd26c4d12
                          DCD      0xdf2f6bcb
                          DCD      0xdbee767c
                          DCD      0xe3a1cbc1
                          DCD      0xe760d676
                          DCD      0xea23f0af
                          DCD      0xeee2ed18
                          DCD      0xf0a5bd1d
                          DCD      0xf464a0aa
                          DCD      0xf9278673
                          DCD      0xfde69bc4
                          DCD      0x89b8fd09
                          DCD      0x8d79e0be
                          DCD      0x803ac667
                          DCD      0x84fbdbd0
                          DCD      0x9abc8bd5
                          DCD      0x9e7d9662
                          DCD      0x933eb0bb
                          DCD      0x97ffad0c
                          DCD      0xafb010b1
                          DCD      0xab710d06
                          DCD      0xa6322bdf
                          DCD      0xa2f33668
                          DCD      0xbcb4666d
                          DCD      0xb8757bda
                          DCD      0xb5365d03
                          DCD      0xb1f740b4

                          AREA ||.data||, DATA, ALIGN=2

                  Ccrc
                          DCD      0x00000000
                  flag
000004  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "User\\CanProtocolUpMD.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_CanProtocolUpMD_c_Ccrc____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___17_CanProtocolUpMD_c_Ccrc____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_CanProtocolUpMD_c_Ccrc____REVSH|
#line 128
|__asm___17_CanProtocolUpMD_c_Ccrc____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
