; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_dac.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_dac.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_dac.crf Libraries\src\gd32f10x_dac.c]
                          THUMB

                          AREA ||i.dac_concurrent_data_set||, CODE, READONLY, ALIGN=2

                  dac_concurrent_data_set PROC
;;;536    */
;;;537    void dac_concurrent_data_set(uint32_t dac_align, uint16_t data0, uint16_t data1)
000000  b510              PUSH     {r4,lr}
;;;538    {
000002  4603              MOV      r3,r0
;;;539        uint32_t data = 0U;
000004  2000              MOVS     r0,#0
;;;540        switch(dac_align){
000006  b123              CBZ      r3,|L1.18|
000008  2b01              CMP      r3,#1
00000a  d007              BEQ      |L1.28|
00000c  2b02              CMP      r3,#2
00000e  d111              BNE      |L1.52|
000010  e00a              B        |L1.40|
                  |L1.18|
;;;541        /* data right 12b alignment */
;;;542        case DAC_ALIGN_12B_R:
;;;543            data = ((uint32_t)data1 << DH_12BIT_OFFSET) | data0;
000012  ea414002          ORR      r0,r1,r2,LSL #16
;;;544            DACC_R12DH = data;
000016  4c09              LDR      r4,|L1.60|
000018  6020              STR      r0,[r4,#0]
;;;545            break;
00001a  e00c              B        |L1.54|
                  |L1.28|
;;;546        /* data left 12b alignment */
;;;547        case DAC_ALIGN_12B_L:
;;;548            data = ((uint32_t)data1 << DH_12BIT_OFFSET) | data0;
00001c  ea414002          ORR      r0,r1,r2,LSL #16
;;;549            DACC_L12DH = data;
000020  4c06              LDR      r4,|L1.60|
000022  1d24              ADDS     r4,r4,#4
000024  6020              STR      r0,[r4,#0]
;;;550            break;
000026  e006              B        |L1.54|
                  |L1.40|
;;;551        /* data right 8b alignment */
;;;552        case DAC_ALIGN_8B_R:
;;;553            data = ((uint32_t)data1 << DH_8BIT_OFFSET) | data0;
000028  ea412002          ORR      r0,r1,r2,LSL #8
;;;554            DACC_R8DH = data;
00002c  4c03              LDR      r4,|L1.60|
00002e  3408              ADDS     r4,r4,#8
000030  6020              STR      r0,[r4,#0]
;;;555            break;
000032  e000              B        |L1.54|
                  |L1.52|
;;;556        default:
;;;557            break;
000034  bf00              NOP      
                  |L1.54|
000036  bf00              NOP                            ;545
;;;558        }
;;;559    }
000038  bd10              POP      {r4,pc}
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x40007420

                          AREA ||i.dac_concurrent_disable||, CODE, READONLY, ALIGN=2

                  dac_concurrent_disable PROC
;;;465    */
;;;466    void dac_concurrent_disable(void)
000000  2000              MOVS     r0,#0
;;;467    {
;;;468        uint32_t ctl = 0U;
;;;469        ctl = DAC_CTL_DEN0 | DAC_CTL_DEN1;
000002  f04f1001          MOV      r0,#0x10001
;;;470        DAC_CTL &= (~ctl);
000006  4903              LDR      r1,|L2.20|
000008  6809              LDR      r1,[r1,#0]
00000a  4381              BICS     r1,r1,r0
00000c  4a01              LDR      r2,|L2.20|
00000e  6011              STR      r1,[r2,#0]
;;;471    }
000010  4770              BX       lr
;;;472    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40007400

                          AREA ||i.dac_concurrent_enable||, CODE, READONLY, ALIGN=2

                  dac_concurrent_enable PROC
;;;452    */
;;;453    void dac_concurrent_enable(void)
000000  2000              MOVS     r0,#0
;;;454    {
;;;455        uint32_t ctl = 0U;
;;;456        ctl = DAC_CTL_DEN0 | DAC_CTL_DEN1;
000002  f04f1001          MOV      r0,#0x10001
;;;457        DAC_CTL |= (ctl);
000006  4903              LDR      r1,|L3.20|
000008  6809              LDR      r1,[r1,#0]
00000a  4301              ORRS     r1,r1,r0
00000c  4a01              LDR      r2,|L3.20|
00000e  6011              STR      r1,[r2,#0]
;;;458    }
000010  4770              BX       lr
;;;459    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40007400

                          AREA ||i.dac_concurrent_output_buffer_disable||, CODE, READONLY, ALIGN=2

                  dac_concurrent_output_buffer_disable PROC
;;;517    */
;;;518    void dac_concurrent_output_buffer_disable(void)
000000  2000              MOVS     r0,#0
;;;519    {
;;;520        uint32_t ctl = 0U;
;;;521        ctl = DAC_CTL_DBOFF0 | DAC_CTL_DBOFF1;
000002  f04f1002          MOV      r0,#0x20002
;;;522        DAC_CTL |= (ctl);
000006  4903              LDR      r1,|L4.20|
000008  6809              LDR      r1,[r1,#0]
00000a  4301              ORRS     r1,r1,r0
00000c  4a01              LDR      r2,|L4.20|
00000e  6011              STR      r1,[r2,#0]
;;;523    }
000010  4770              BX       lr
;;;524    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40007400

                          AREA ||i.dac_concurrent_output_buffer_enable||, CODE, READONLY, ALIGN=2

                  dac_concurrent_output_buffer_enable PROC
;;;504    */
;;;505    void dac_concurrent_output_buffer_enable(void)
000000  2000              MOVS     r0,#0
;;;506    {
;;;507        uint32_t ctl = 0U;
;;;508        ctl = DAC_CTL_DBOFF0 | DAC_CTL_DBOFF1;
000002  f04f1002          MOV      r0,#0x20002
;;;509        DAC_CTL &= (~ctl);
000006  4903              LDR      r1,|L5.20|
000008  6809              LDR      r1,[r1,#0]
00000a  4381              BICS     r1,r1,r0
00000c  4a01              LDR      r2,|L5.20|
00000e  6011              STR      r1,[r2,#0]
;;;510    }
000010  4770              BX       lr
;;;511    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40007400

                          AREA ||i.dac_concurrent_software_trigger_disable||, CODE, READONLY, ALIGN=2

                  dac_concurrent_software_trigger_disable PROC
;;;491    */
;;;492    void dac_concurrent_software_trigger_disable(void)
000000  2000              MOVS     r0,#0
;;;493    {
;;;494        uint32_t swt = 0U;
;;;495        swt = DAC_SWT_SWTR0 | DAC_SWT_SWTR1;
000002  2003              MOVS     r0,#3
;;;496        DAC_SWT &= (~swt);
000004  4902              LDR      r1,|L6.16|
000006  6809              LDR      r1,[r1,#0]
000008  4381              BICS     r1,r1,r0
00000a  4a01              LDR      r2,|L6.16|
00000c  6011              STR      r1,[r2,#0]
;;;497    }
00000e  4770              BX       lr
;;;498    
                          ENDP

                  |L6.16|
                          DCD      0x40007404

                          AREA ||i.dac_concurrent_software_trigger_enable||, CODE, READONLY, ALIGN=2

                  dac_concurrent_software_trigger_enable PROC
;;;478    */
;;;479    void dac_concurrent_software_trigger_enable(void)
000000  2000              MOVS     r0,#0
;;;480    {
;;;481        uint32_t swt = 0U;
;;;482        swt = DAC_SWT_SWTR0 | DAC_SWT_SWTR1;
000002  2003              MOVS     r0,#3
;;;483        DAC_SWT |= (swt); 
000004  4902              LDR      r1,|L7.16|
000006  6809              LDR      r1,[r1,#0]
000008  4301              ORRS     r1,r1,r0
00000a  4a01              LDR      r2,|L7.16|
00000c  6011              STR      r1,[r2,#0]
;;;484    }
00000e  4770              BX       lr
;;;485    
                          ENDP

                  |L7.16|
                          DCD      0x40007404

                          AREA ||i.dac_data_set||, CODE, READONLY, ALIGN=2

                  dac_data_set PROC
;;;186    */
;;;187    void dac_data_set(uint32_t dac_periph, uint32_t dac_align, uint16_t data)
000000  b990              CBNZ     r0,|L8.40|
;;;188    {
;;;189        if(DAC0 == dac_periph){
;;;190            switch(dac_align){
000002  b121              CBZ      r1,|L8.14|
000004  2901              CMP      r1,#1
000006  d005              BEQ      |L8.20|
000008  2902              CMP      r1,#2
00000a  d10b              BNE      |L8.36|
00000c  e006              B        |L8.28|
                  |L8.14|
;;;191            /* data right 12b alignment */
;;;192            case DAC_ALIGN_12B_R:
;;;193                DAC0_R12DH = data;
00000e  4b11              LDR      r3,|L8.84|
000010  601a              STR      r2,[r3,#0]
;;;194                break;
000012  e008              B        |L8.38|
                  |L8.20|
;;;195            /* data left 12b alignment */
;;;196            case DAC_ALIGN_12B_L:
;;;197                DAC0_L12DH = data;
000014  4b0f              LDR      r3,|L8.84|
000016  1d1b              ADDS     r3,r3,#4
000018  601a              STR      r2,[r3,#0]
;;;198                break;
00001a  e004              B        |L8.38|
                  |L8.28|
;;;199            /* data right 8b alignment */
;;;200            case DAC_ALIGN_8B_R:
;;;201                DAC0_R8DH = data;
00001c  4b0d              LDR      r3,|L8.84|
00001e  3308              ADDS     r3,r3,#8
000020  601a              STR      r2,[r3,#0]
;;;202                break;
000022  e000              B        |L8.38|
                  |L8.36|
;;;203            default:
;;;204                break;
000024  bf00              NOP      
                  |L8.38|
000026  e013              B        |L8.80|
                  |L8.40|
;;;205            }
;;;206        }else{
;;;207            switch(dac_align){
000028  b121              CBZ      r1,|L8.52|
00002a  2901              CMP      r1,#1
00002c  d006              BEQ      |L8.60|
00002e  2902              CMP      r1,#2
000030  d10c              BNE      |L8.76|
000032  e007              B        |L8.68|
                  |L8.52|
;;;208            /* data right 12b alignment */
;;;209            case DAC_ALIGN_12B_R:
;;;210                DAC1_R12DH = data;
000034  4b07              LDR      r3,|L8.84|
000036  330c              ADDS     r3,r3,#0xc
000038  601a              STR      r2,[r3,#0]
;;;211                break;
00003a  e008              B        |L8.78|
                  |L8.60|
;;;212            /* data left 12b alignment */
;;;213            case DAC_ALIGN_12B_L:
;;;214                DAC1_L12DH = data;
00003c  4b05              LDR      r3,|L8.84|
00003e  3310              ADDS     r3,r3,#0x10
000040  601a              STR      r2,[r3,#0]
;;;215                break;
000042  e004              B        |L8.78|
                  |L8.68|
;;;216            /* data right 8b alignment */
;;;217            case DAC_ALIGN_8B_R:
;;;218                DAC1_R8DH = data;
000044  4b03              LDR      r3,|L8.84|
000046  3314              ADDS     r3,r3,#0x14
000048  601a              STR      r2,[r3,#0]
;;;219                break;
00004a  e000              B        |L8.78|
                  |L8.76|
;;;220            default:
;;;221                break;
00004c  bf00              NOP      
                  |L8.78|
00004e  bf00              NOP                            ;211
                  |L8.80|
;;;222            }
;;;223        }
;;;224    }
000050  4770              BX       lr
;;;225    
                          ENDP

000052  0000              DCW      0x0000
                  |L8.84|
                          DCD      0x40007408

                          AREA ||i.dac_deinit||, CODE, READONLY, ALIGN=1

                  dac_deinit PROC
;;;51     */
;;;52     void dac_deinit(void)
000000  b510              PUSH     {r4,lr}
;;;53     {
;;;54         rcu_periph_reset_enable(RCU_DACRST);
000002  f240401d          MOV      r0,#0x41d
000006  f7fffffe          BL       rcu_periph_reset_enable
;;;55         rcu_periph_reset_disable(RCU_DACRST);
00000a  f240401d          MOV      r0,#0x41d
00000e  f7fffffe          BL       rcu_periph_reset_disable
;;;56     }
000012  bd10              POP      {r4,pc}
;;;57     
                          ENDP


                          AREA ||i.dac_disable||, CODE, READONLY, ALIGN=2

                  dac_disable PROC
;;;80     */
;;;81     void dac_disable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L10.16|
;;;82     {
;;;83         if(DAC0 == dac_periph){
;;;84             DAC_CTL &= ~DAC_CTL_DEN0;
000002  4907              LDR      r1,|L10.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0210101          BIC      r1,r1,#1
00000a  4a05              LDR      r2,|L10.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L10.28|
                  |L10.16|
;;;85         }else{
;;;86             DAC_CTL &= ~DAC_CTL_DEN1;
000010  4903              LDR      r1,|L10.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  4a01              LDR      r2,|L10.32|
00001a  6011              STR      r1,[r2,#0]
                  |L10.28|
;;;87         }
;;;88     }
00001c  4770              BX       lr
;;;89     
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0x40007400

                          AREA ||i.dac_dma_disable||, CODE, READONLY, ALIGN=2

                  dac_dma_disable PROC
;;;112    */
;;;113    void dac_dma_disable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L11.16|
;;;114    {
;;;115        if(DAC0 == dac_periph){
;;;116            DAC_CTL &= ~DAC_CTL_DDMAEN0;
000002  4907              LDR      r1,|L11.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4215180          BIC      r1,r1,#0x1000
00000a  4a05              LDR      r2,|L11.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L11.28|
                  |L11.16|
;;;117        }else{
;;;118            DAC_CTL &= ~DAC_CTL_DDMAEN1;
000010  4903              LDR      r1,|L11.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0215180          BIC      r1,r1,#0x10000000
000018  4a01              LDR      r2,|L11.32|
00001a  6011              STR      r1,[r2,#0]
                  |L11.28|
;;;119        }
;;;120    }
00001c  4770              BX       lr
;;;121    
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      0x40007400

                          AREA ||i.dac_dma_enable||, CODE, READONLY, ALIGN=2

                  dac_dma_enable PROC
;;;96     */
;;;97     void dac_dma_enable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L12.16|
;;;98     {
;;;99         if(DAC0 == dac_periph){
;;;100            DAC_CTL |= DAC_CTL_DDMAEN0;
000002  4907              LDR      r1,|L12.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4415180          ORR      r1,r1,#0x1000
00000a  4a05              LDR      r2,|L12.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L12.28|
                  |L12.16|
;;;101        }else{
;;;102            DAC_CTL |= DAC_CTL_DDMAEN1;
000010  4903              LDR      r1,|L12.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0415180          ORR      r1,r1,#0x10000000
000018  4a01              LDR      r2,|L12.32|
00001a  6011              STR      r1,[r2,#0]
                  |L12.28|
;;;103        }
;;;104    }
00001c  4770              BX       lr
;;;105    
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
                          DCD      0x40007400

                          AREA ||i.dac_enable||, CODE, READONLY, ALIGN=2

                  dac_enable PROC
;;;64     */
;;;65     void dac_enable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L13.16|
;;;66     {
;;;67         if(DAC0 == dac_periph){
;;;68             DAC_CTL |= DAC_CTL_DEN0;
000002  4907              LDR      r1,|L13.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  4a05              LDR      r2,|L13.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L13.28|
                  |L13.16|
;;;69         }else{
;;;70             DAC_CTL |= DAC_CTL_DEN1;
000010  4903              LDR      r1,|L13.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4413180          ORR      r1,r1,#0x10000
000018  4a01              LDR      r2,|L13.32|
00001a  6011              STR      r1,[r2,#0]
                  |L13.28|
;;;71         }
;;;72     } 
00001c  4770              BX       lr
;;;73     
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      0x40007400

                          AREA ||i.dac_lfsr_noise_config||, CODE, READONLY, ALIGN=2

                  dac_lfsr_noise_config PROC
;;;399    */
;;;400    void dac_lfsr_noise_config(uint32_t dac_periph, uint32_t unmask_bits)
000000  b950              CBNZ     r0,|L14.24|
;;;401    {
;;;402        if(DAC0 == dac_periph){
;;;403            /* configure DAC0 LFSR noise mode */
;;;404            DAC_CTL &= ~DAC_CTL_DWBW0;
000002  4a0b              LDR      r2,|L14.48|
000004  6812              LDR      r2,[r2,#0]
000006  f4226270          BIC      r2,r2,#0xf00
00000a  4b09              LDR      r3,|L14.48|
00000c  601a              STR      r2,[r3,#0]
;;;405            DAC_CTL |= unmask_bits;
00000e  461a              MOV      r2,r3
000010  6812              LDR      r2,[r2,#0]
000012  430a              ORRS     r2,r2,r1
000014  601a              STR      r2,[r3,#0]
000016  e00a              B        |L14.46|
                  |L14.24|
;;;406        }else{
;;;407            /* configure DAC1 LFSR noise mode */
;;;408            DAC_CTL &= ~DAC_CTL_DWBW1;
000018  4a05              LDR      r2,|L14.48|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0226270          BIC      r2,r2,#0xf000000
000020  4b03              LDR      r3,|L14.48|
000022  601a              STR      r2,[r3,#0]
;;;409            DAC_CTL |= (unmask_bits << DAC1_REG_OFFSET);
000024  461a              MOV      r2,r3
000026  6812              LDR      r2,[r2,#0]
000028  ea424201          ORR      r2,r2,r1,LSL #16
00002c  601a              STR      r2,[r3,#0]
                  |L14.46|
;;;410        }
;;;411    }
00002e  4770              BX       lr
;;;412    
                          ENDP

                  |L14.48|
                          DCD      0x40007400

                          AREA ||i.dac_output_buffer_disable||, CODE, READONLY, ALIGN=2

                  dac_output_buffer_disable PROC
;;;144    */
;;;145    void dac_output_buffer_disable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L15.16|
;;;146    {
;;;147        if(DAC0 == dac_periph){
;;;148            DAC_CTL |= DAC_CTL_DBOFF0;
000002  4907              LDR      r1,|L15.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410102          ORR      r1,r1,#2
00000a  4a05              LDR      r2,|L15.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L15.28|
                  |L15.16|
;;;149        }else{
;;;150            DAC_CTL |= DAC_CTL_DBOFF1;
000010  4903              LDR      r1,|L15.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4413100          ORR      r1,r1,#0x20000
000018  4a01              LDR      r2,|L15.32|
00001a  6011              STR      r1,[r2,#0]
                  |L15.28|
;;;151        }
;;;152    }
00001c  4770              BX       lr
;;;153    
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      0x40007400

                          AREA ||i.dac_output_buffer_enable||, CODE, READONLY, ALIGN=2

                  dac_output_buffer_enable PROC
;;;128    */
;;;129    void dac_output_buffer_enable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L16.16|
;;;130    {
;;;131        if(DAC0 == dac_periph){
;;;132            DAC_CTL &= ~DAC_CTL_DBOFF0;
000002  4907              LDR      r1,|L16.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0210102          BIC      r1,r1,#2
00000a  4a05              LDR      r2,|L16.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L16.28|
                  |L16.16|
;;;133        }else{
;;;134            DAC_CTL &= ~DAC_CTL_DBOFF1;
000010  4903              LDR      r1,|L16.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4213100          BIC      r1,r1,#0x20000
000018  4a01              LDR      r2,|L16.32|
00001a  6011              STR      r1,[r2,#0]
                  |L16.28|
;;;135        }
;;;136    }
00001c  4770              BX       lr
;;;137    
                          ENDP

00001e  0000              DCW      0x0000
                  |L16.32|
                          DCD      0x40007400

                          AREA ||i.dac_output_value_get||, CODE, READONLY, ALIGN=2

                  dac_output_value_get PROC
;;;160    */
;;;161    uint16_t dac_output_value_get(uint32_t dac_periph)
000000  4601              MOV      r1,r0
;;;162    {
;;;163        uint16_t data = 0U;
000002  2000              MOVS     r0,#0
;;;164        if(DAC0 == dac_periph){
000004  b919              CBNZ     r1,|L17.14|
;;;165            /* store the DAC0 output value */
;;;166            data = (uint16_t)DAC0_DO;
000006  4a04              LDR      r2,|L17.24|
000008  6812              LDR      r2,[r2,#0]
00000a  b290              UXTH     r0,r2
00000c  e003              B        |L17.22|
                  |L17.14|
;;;167        }else{
;;;168            /* store the DAC1 output value */
;;;169            data = (uint16_t)DAC1_DO;
00000e  4a02              LDR      r2,|L17.24|
000010  1d12              ADDS     r2,r2,#4
000012  6812              LDR      r2,[r2,#0]
000014  b290              UXTH     r0,r2
                  |L17.22|
;;;170        }
;;;171        return data;
;;;172    }
000016  4770              BX       lr
;;;173    
                          ENDP

                  |L17.24|
                          DCD      0x4000742c

                          AREA ||i.dac_software_trigger_disable||, CODE, READONLY, ALIGN=2

                  dac_software_trigger_disable PROC
;;;310    */
;;;311    void dac_software_trigger_disable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L18.16|
;;;312    {
;;;313        if(DAC0 == dac_periph){
;;;314            DAC_SWT &= ~DAC_SWT_SWTR0;
000002  4907              LDR      r1,|L18.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0210101          BIC      r1,r1,#1
00000a  4a05              LDR      r2,|L18.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L18.28|
                  |L18.16|
;;;315        }else{
;;;316            DAC_SWT &= ~DAC_SWT_SWTR1;
000010  4903              LDR      r1,|L18.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0210102          BIC      r1,r1,#2
000018  4a01              LDR      r2,|L18.32|
00001a  6011              STR      r1,[r2,#0]
                  |L18.28|
;;;317        }
;;;318    }
00001c  4770              BX       lr
;;;319    
                          ENDP

00001e  0000              DCW      0x0000
                  |L18.32|
                          DCD      0x40007404

                          AREA ||i.dac_software_trigger_enable||, CODE, READONLY, ALIGN=2

                  dac_software_trigger_enable PROC
;;;294    */
;;;295    void dac_software_trigger_enable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L19.16|
;;;296    {
;;;297        if(DAC0 == dac_periph){
;;;298            DAC_SWT |= DAC_SWT_SWTR0;
000002  4907              LDR      r1,|L19.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  4a05              LDR      r2,|L19.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L19.28|
                  |L19.16|
;;;299        }else{
;;;300            DAC_SWT |= DAC_SWT_SWTR1;
000010  4903              LDR      r1,|L19.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0410102          ORR      r1,r1,#2
000018  4a01              LDR      r2,|L19.32|
00001a  6011              STR      r1,[r2,#0]
                  |L19.28|
;;;301        }
;;;302    }
00001c  4770              BX       lr
;;;303    
                          ENDP

00001e  0000              DCW      0x0000
                  |L19.32|
                          DCD      0x40007404

                          AREA ||i.dac_triangle_noise_config||, CODE, READONLY, ALIGN=2

                  dac_triangle_noise_config PROC
;;;433    */
;;;434    void dac_triangle_noise_config(uint32_t dac_periph, uint32_t amplitude)
000000  b950              CBNZ     r0,|L20.24|
;;;435    {
;;;436        if(DAC0 == dac_periph){
;;;437            /* configure DAC0 triangle noise mode */
;;;438            DAC_CTL &= ~DAC_CTL_DWBW0;
000002  4a0b              LDR      r2,|L20.48|
000004  6812              LDR      r2,[r2,#0]
000006  f4226270          BIC      r2,r2,#0xf00
00000a  4b09              LDR      r3,|L20.48|
00000c  601a              STR      r2,[r3,#0]
;;;439            DAC_CTL |= amplitude;
00000e  461a              MOV      r2,r3
000010  6812              LDR      r2,[r2,#0]
000012  430a              ORRS     r2,r2,r1
000014  601a              STR      r2,[r3,#0]
000016  e00a              B        |L20.46|
                  |L20.24|
;;;440        }else{
;;;441            /* configure DAC1 triangle noise mode */
;;;442            DAC_CTL &= ~DAC_CTL_DWBW1;
000018  4a05              LDR      r2,|L20.48|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0226270          BIC      r2,r2,#0xf000000
000020  4b03              LDR      r3,|L20.48|
000022  601a              STR      r2,[r3,#0]
;;;443            DAC_CTL |= (amplitude << DAC1_REG_OFFSET);
000024  461a              MOV      r2,r3
000026  6812              LDR      r2,[r2,#0]
000028  ea424201          ORR      r2,r2,r1,LSL #16
00002c  601a              STR      r2,[r3,#0]
                  |L20.46|
;;;444        }
;;;445    }
00002e  4770              BX       lr
;;;446    
                          ENDP

                  |L20.48|
                          DCD      0x40007400

                          AREA ||i.dac_trigger_disable||, CODE, READONLY, ALIGN=2

                  dac_trigger_disable PROC
;;;248    */
;;;249    void dac_trigger_disable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L21.16|
;;;250    {
;;;251        if(DAC0 == dac_periph){
;;;252            DAC_CTL &= ~DAC_CTL_DTEN0;
000002  4907              LDR      r1,|L21.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0210104          BIC      r1,r1,#4
00000a  4a05              LDR      r2,|L21.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L21.28|
                  |L21.16|
;;;253        }else{
;;;254            DAC_CTL &= ~DAC_CTL_DTEN1;
000010  4903              LDR      r1,|L21.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4212180          BIC      r1,r1,#0x40000
000018  4a01              LDR      r2,|L21.32|
00001a  6011              STR      r1,[r2,#0]
                  |L21.28|
;;;255        }
;;;256    }
00001c  4770              BX       lr
;;;257    
                          ENDP

00001e  0000              DCW      0x0000
                  |L21.32|
                          DCD      0x40007400

                          AREA ||i.dac_trigger_enable||, CODE, READONLY, ALIGN=2

                  dac_trigger_enable PROC
;;;232    */
;;;233    void dac_trigger_enable(uint32_t dac_periph)
000000  b930              CBNZ     r0,|L22.16|
;;;234    {
;;;235        if(DAC0 == dac_periph){
;;;236            DAC_CTL |= DAC_CTL_DTEN0;
000002  4907              LDR      r1,|L22.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410104          ORR      r1,r1,#4
00000a  4a05              LDR      r2,|L22.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L22.28|
                  |L22.16|
;;;237        }else{
;;;238            DAC_CTL |= DAC_CTL_DTEN1;
000010  4903              LDR      r1,|L22.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4412180          ORR      r1,r1,#0x40000
000018  4a01              LDR      r2,|L22.32|
00001a  6011              STR      r1,[r2,#0]
                  |L22.28|
;;;239        }
;;;240    }
00001c  4770              BX       lr
;;;241    
                          ENDP

00001e  0000              DCW      0x0000
                  |L22.32|
                          DCD      0x40007400

                          AREA ||i.dac_trigger_source_config||, CODE, READONLY, ALIGN=2

                  dac_trigger_source_config PROC
;;;275    */
;;;276    void dac_trigger_source_config(uint32_t dac_periph,uint32_t triggersource)
000000  b950              CBNZ     r0,|L23.24|
;;;277    {
;;;278        if(DAC0 == dac_periph){
;;;279            /* configure DAC0 trigger source */
;;;280            DAC_CTL &= ~DAC_CTL_DTSEL0;
000002  4a0b              LDR      r2,|L23.48|
000004  6812              LDR      r2,[r2,#0]
000006  f0220238          BIC      r2,r2,#0x38
00000a  4b09              LDR      r3,|L23.48|
00000c  601a              STR      r2,[r3,#0]
;;;281            DAC_CTL |= triggersource;
00000e  461a              MOV      r2,r3
000010  6812              LDR      r2,[r2,#0]
000012  430a              ORRS     r2,r2,r1
000014  601a              STR      r2,[r3,#0]
000016  e00a              B        |L23.46|
                  |L23.24|
;;;282        }else{
;;;283            /* configure DAC1 trigger source */
;;;284            DAC_CTL &= ~DAC_CTL_DTSEL1;
000018  4a05              LDR      r2,|L23.48|
00001a  6812              LDR      r2,[r2,#0]
00001c  f4221260          BIC      r2,r2,#0x380000
000020  4b03              LDR      r3,|L23.48|
000022  601a              STR      r2,[r3,#0]
;;;285            DAC_CTL |= (triggersource << DAC1_REG_OFFSET);
000024  461a              MOV      r2,r3
000026  6812              LDR      r2,[r2,#0]
000028  ea424201          ORR      r2,r2,r1,LSL #16
00002c  601a              STR      r2,[r3,#0]
                  |L23.46|
;;;286        }
;;;287    }
00002e  4770              BX       lr
;;;288    
                          ENDP

                  |L23.48|
                          DCD      0x40007400

                          AREA ||i.dac_wave_bit_width_config||, CODE, READONLY, ALIGN=2

                  dac_wave_bit_width_config PROC
;;;365    */
;;;366    void dac_wave_bit_width_config(uint32_t dac_periph, uint32_t bit_width)
000000  b950              CBNZ     r0,|L24.24|
;;;367    {
;;;368        if(DAC0 == dac_periph){
;;;369            /* configure DAC0 wave bit width */
;;;370            DAC_CTL &= ~DAC_CTL_DWBW0;
000002  4a0b              LDR      r2,|L24.48|
000004  6812              LDR      r2,[r2,#0]
000006  f4226270          BIC      r2,r2,#0xf00
00000a  4b09              LDR      r3,|L24.48|
00000c  601a              STR      r2,[r3,#0]
;;;371            DAC_CTL |= bit_width;
00000e  461a              MOV      r2,r3
000010  6812              LDR      r2,[r2,#0]
000012  430a              ORRS     r2,r2,r1
000014  601a              STR      r2,[r3,#0]
000016  e00a              B        |L24.46|
                  |L24.24|
;;;372        }else{
;;;373            /* configure DAC1 wave bit width */
;;;374            DAC_CTL &= ~DAC_CTL_DWBW1;
000018  4a05              LDR      r2,|L24.48|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0226270          BIC      r2,r2,#0xf000000
000020  4b03              LDR      r3,|L24.48|
000022  601a              STR      r2,[r3,#0]
;;;375            DAC_CTL |= (bit_width << DAC1_REG_OFFSET);
000024  461a              MOV      r2,r3
000026  6812              LDR      r2,[r2,#0]
000028  ea424201          ORR      r2,r2,r1,LSL #16
00002c  601a              STR      r2,[r3,#0]
                  |L24.46|
;;;376        }
;;;377    }
00002e  4770              BX       lr
;;;378    
                          ENDP

                  |L24.48|
                          DCD      0x40007400

                          AREA ||i.dac_wave_mode_config||, CODE, READONLY, ALIGN=2

                  dac_wave_mode_config PROC
;;;331    */
;;;332    void dac_wave_mode_config(uint32_t dac_periph, uint32_t wave_mode)
000000  b950              CBNZ     r0,|L25.24|
;;;333    {
;;;334        if(DAC0 == dac_periph){
;;;335            /* configure DAC0 wave mode */
;;;336            DAC_CTL &= ~DAC_CTL_DWM0;
000002  4a0b              LDR      r2,|L25.48|
000004  6812              LDR      r2,[r2,#0]
000006  f02202c0          BIC      r2,r2,#0xc0
00000a  4b09              LDR      r3,|L25.48|
00000c  601a              STR      r2,[r3,#0]
;;;337            DAC_CTL |= wave_mode;
00000e  461a              MOV      r2,r3
000010  6812              LDR      r2,[r2,#0]
000012  430a              ORRS     r2,r2,r1
000014  601a              STR      r2,[r3,#0]
000016  e00a              B        |L25.46|
                  |L25.24|
;;;338        }else{
;;;339            /* configure DAC1 wave mode */
;;;340            DAC_CTL &= ~DAC_CTL_DWM1;
000018  4a05              LDR      r2,|L25.48|
00001a  6812              LDR      r2,[r2,#0]
00001c  f4220240          BIC      r2,r2,#0xc00000
000020  4b03              LDR      r3,|L25.48|
000022  601a              STR      r2,[r3,#0]
;;;341            DAC_CTL |= (wave_mode << DAC1_REG_OFFSET);
000024  461a              MOV      r2,r3
000026  6812              LDR      r2,[r2,#0]
000028  ea424201          ORR      r2,r2,r1,LSL #16
00002c  601a              STR      r2,[r3,#0]
                  |L25.46|
;;;342        }
;;;343    }
00002e  4770              BX       lr
;;;344    
                          ENDP

                  |L25.48|
                          DCD      0x40007400

;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_dac.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_dac_c_dee0e984____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_dac_c_dee0e984____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_dac_c_dee0e984____REVSH|
#line 128
|__asm___14_gd32f10x_dac_c_dee0e984____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
