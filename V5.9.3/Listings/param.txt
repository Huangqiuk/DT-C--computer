; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\param.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\param.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\param.crf User\param.c]
                          THUMB

                          AREA ||i.FACTORY_NVM_SetDirtyFlag||, CODE, READONLY, ALIGN=2

                  FACTORY_NVM_SetDirtyFlag PROC
;;;102    
;;;103    void FACTORY_NVM_SetDirtyFlag(BOOL req)
000000  2101              MOVS     r1,#1
;;;104    {
;;;105    	paramCB.factoryNvmWriteRequest = TRUE;
000002  4a02              LDR      r2,|L1.12|
000004  f8821174          STRB     r1,[r2,#0x174]
;;;106    }
000008  4770              BX       lr
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      paramCB

                          AREA ||i.PARAM_CmpareN||, CODE, READONLY, ALIGN=1

                  PARAM_CmpareN PROC
;;;87     
;;;88     uint8 PARAM_CmpareN(const uint8 *str1, const uint8 *str2, uint8 len)
000000  b530              PUSH     {r4,r5,lr}
;;;89     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;90     	uint16 i = 0;
000006  2100              MOVS     r1,#0
;;;91     
;;;92     	while (i < len)
000008  e007              B        |L2.26|
                  |L2.10|
;;;93     	{
;;;94     		if (*(str1 + i) != *(str2 + i))
00000a  5c58              LDRB     r0,[r3,r1]
00000c  5c65              LDRB     r5,[r4,r1]
00000e  42a8              CMP      r0,r5
000010  d001              BEQ      |L2.22|
;;;95     		{
;;;96     			return 0;
000012  2000              MOVS     r0,#0
                  |L2.20|
;;;97     		}
;;;98     		i++;
;;;99     	}
;;;100    	return 1;
;;;101    }
000014  bd30              POP      {r4,r5,pc}
                  |L2.22|
000016  1c48              ADDS     r0,r1,#1              ;98
000018  b281              UXTH     r1,r0                 ;98
                  |L2.26|
00001a  4291              CMP      r1,r2                 ;92
00001c  dbf5              BLT      |L2.10|
00001e  2001              MOVS     r0,#1                 ;100
000020  e7f8              B        |L2.20|
;;;102    
                          ENDP


                          AREA ||i.PARAM_Init||, CODE, READONLY, ALIGN=2

                  PARAM_Init PROC
;;;50      **********************************************************************/
;;;51     void PARAM_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;52     {
;;;53     	uint8 appVer[3] = {0};
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
;;;54     	uint8 bootVer[3] = {0};
000006  9000              STR      r0,[sp,#0]
;;;55     
;;;56     	// 写入版本信息
;;;57     	bootVer[0] = BOOT_VERSION_1;
000008  f88d0000          STRB     r0,[sp,#0]
;;;58     	bootVer[1] = BOOT_VERSION_2;
00000c  f88d0001          STRB     r0,[sp,#1]
;;;59     	bootVer[2] = BOOT_VERSION_3;
000010  2002              MOVS     r0,#2
000012  f88d0002          STRB     r0,[sp,#2]
;;;60     	appVer[0] = APP_VERSION_1;
000016  2005              MOVS     r0,#5
000018  f88d0004          STRB     r0,[sp,#4]
;;;61     	appVer[1] = APP_VERSION_2;
00001c  2009              MOVS     r0,#9
00001e  f88d0005          STRB     r0,[sp,#5]
;;;62     	appVer[2] = APP_VERSION_3;
000022  2002              MOVS     r0,#2
000024  f88d0006          STRB     r0,[sp,#6]
;;;63     	SPI_FLASH_EraseSector(SPI_FLASH_BOOT_VERSION_ADDEESS);
000028  f44f10b2          MOV      r0,#0x164000
00002c  f7fffffe          BL       SPI_FLASH_EraseSector
;;;64     	SPI_FLASH_EraseSector(SPI_FLASH_APP_VERSION_ADDEESS);
000030  4808              LDR      r0,|L3.84|
000032  f7fffffe          BL       SPI_FLASH_EraseSector
;;;65     	SPI_FLASH_WriteArray(bootVer, SPI_FLASH_BOOT_VERSION_ADDEESS, 3);
000036  2203              MOVS     r2,#3
000038  f44f11b2          MOV      r1,#0x164000
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       SPI_FLASH_WriteArray
;;;66     	SPI_FLASH_WriteArray(appVer, SPI_FLASH_APP_VERSION_ADDEESS, 3);
000042  2203              MOVS     r2,#3
000044  4903              LDR      r1,|L3.84|
000046  a801              ADD      r0,sp,#4
000048  f7fffffe          BL       SPI_FLASH_WriteArray
;;;67     
;;;68     	// dut机型信息初始化
;;;69     	DutInfoUpdata();
00004c  f7fffffe          BL       DutInfoUpdata
;;;70     }
000050  bd1c              POP      {r2-r4,pc}
;;;71     
                          ENDP

000052  0000              DCW      0x0000
                  |L3.84|
                          DCD      0x00165000

                          AREA ||i.PARAM_Process||, CODE, READONLY, ALIGN=1

                  PARAM_Process PROC
;;;71     
;;;72     void PARAM_Process(void)
000000  4770              BX       lr
;;;73     {
;;;74     	// NVM有写入请求，并且写入使能时，才可以写入
;;;75     	//	if((paramCB.nvmWriteRequest) && (paramCB.nvmWriteEnable))
;;;76     	//	{
;;;77     	//		paramCB.nvmWriteRequest = FALSE;
;;;78     	//		paramCB.nvmWriteEnable = FALSE;
;;;79     
;;;80     	//		// 重新复位写数据到NVM定时器
;;;81     	//		TIMER_ResetTimer(TIMTR_ID_NVM_WRITE_REQUEST);
;;;82     
;;;83     	//		// 差异化保存
;;;84     	//		NVM_Save(FALSE);
;;;85     	//	}
;;;86     }
;;;87     
                          ENDP


                          AREA ||i.PARAM_SetDefaultRunningData||, CODE, READONLY, ALIGN=2

                  PARAM_SetDefaultRunningData PROC
;;;13     // 默认运行参数
;;;14     void PARAM_SetDefaultRunningData(void)
000000  2000              MOVS     r0,#0
;;;15     {
;;;16     	// ■■ 不需要保存至NVM的参数 ■■
;;;17     
;;;18     	paramCB.runtime.jumpFlag = (BOOL)0;
000002  4902              LDR      r1,|L5.12|
000004  f8810169          STRB     r0,[r1,#0x169]
;;;19     
;;;20     	// 固件版本号
;;;21     
;;;22     	// 验证BOOT版本
;;;23     
;;;24     	// 读取BOOT版本字符
;;;25     
;;;26     	// 读取APP版本字符
;;;27     
;;;28     	// 读取二维码版本字符
;;;29     
;;;30     	// 读取UI版本
;;;31     
;;;32     	// 读取硬件版本
;;;33     
;;;34     	// 读取SN号
;;;35     
;;;36     	// 读取蓝牙MAC地址
;;;37     }
000008  4770              BX       lr
;;;38     
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      paramCB

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  paramCB
                          %        376

;*** Start embedded assembler ***

#line 1 "User\\param.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_param_c_510448ac____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___7_param_c_510448ac____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_param_c_510448ac____REVSH|
#line 128
|__asm___7_param_c_510448ac____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
