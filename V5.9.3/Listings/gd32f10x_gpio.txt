; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_gpio.crf Libraries\src\gd32f10x_gpio.c]
                          THUMB

                          AREA ||i.gpio_afio_deinit||, CODE, READONLY, ALIGN=1

                  gpio_afio_deinit PROC
;;;105    */
;;;106    void gpio_afio_deinit(void)
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108        rcu_periph_reset_enable(RCU_AFRST);
000002  f44f7040          MOV      r0,#0x300
000006  f7fffffe          BL       rcu_periph_reset_enable
;;;109        rcu_periph_reset_disable(RCU_AFRST);
00000a  f44f7040          MOV      r0,#0x300
00000e  f7fffffe          BL       rcu_periph_reset_disable
;;;110    }
000012  bd10              POP      {r4,pc}
;;;111    
                          ENDP


                          AREA ||i.gpio_bit_reset||, CODE, READONLY, ALIGN=1

                  gpio_bit_reset PROC
;;;224    */
;;;225    void gpio_bit_reset(uint32_t gpio_periph, uint32_t pin)
000000  6141              STR      r1,[r0,#0x14]
;;;226    {
;;;227        GPIO_BC(gpio_periph) = (uint32_t)pin;
;;;228    }
000002  4770              BX       lr
;;;229    
                          ENDP


                          AREA ||i.gpio_bit_set||, CODE, READONLY, ALIGN=1

                  gpio_bit_set PROC
;;;210    */
;;;211    void gpio_bit_set(uint32_t gpio_periph, uint32_t pin)
000000  6101              STR      r1,[r0,#0x10]
;;;212    {
;;;213        GPIO_BOP(gpio_periph) = (uint32_t)pin;
;;;214    }
000002  4770              BX       lr
;;;215    
                          ENDP


                          AREA ||i.gpio_bit_write||, CODE, READONLY, ALIGN=1

                  gpio_bit_write PROC
;;;241    */
;;;242    void gpio_bit_write(uint32_t gpio_periph, uint32_t pin, bit_status bit_value)
000000  b10a              CBZ      r2,|L4.6|
;;;243    {
;;;244        if(RESET != bit_value){
;;;245            GPIO_BOP(gpio_periph) = (uint32_t)pin;
000002  6101              STR      r1,[r0,#0x10]
000004  e000              B        |L4.8|
                  |L4.6|
;;;246        }else{
;;;247            GPIO_BC(gpio_periph) = (uint32_t)pin;
000006  6141              STR      r1,[r0,#0x14]
                  |L4.8|
;;;248        }
;;;249    }
000008  4770              BX       lr
;;;250    
                          ENDP


                          AREA ||i.gpio_deinit||, CODE, READONLY, ALIGN=2

                  gpio_deinit PROC
;;;56     */
;;;57     void gpio_deinit(uint32_t gpio_periph)
000000  b510              PUSH     {r4,lr}
;;;58     {
000002  4604              MOV      r4,r0
;;;59         switch(gpio_periph){
000004  492d              LDR      r1,|L5.188|
000006  1a60              SUBS     r0,r4,r1
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L5.108|
00000c  dc09              BGT      |L5.34|
00000e  482c              LDR      r0,|L5.192|
000010  4420              ADD      r0,r0,r4
000012  b180              CBZ      r0,|L5.54|
000014  f5b06f80          CMP      r0,#0x400
000018  d016              BEQ      |L5.72|
00001a  f5b06f00          CMP      r0,#0x800
00001e  d149              BNE      |L5.180|
000020  e01b              B        |L5.90|
                  |L5.34|
000022  f5b06f80          CMP      r0,#0x400
000026  d02a              BEQ      |L5.126|
000028  f5b06f00          CMP      r0,#0x800
00002c  d030              BEQ      |L5.144|
00002e  f5b06f40          CMP      r0,#0xc00
000032  d13f              BNE      |L5.180|
000034  e035              B        |L5.162|
                  |L5.54|
;;;60         case GPIOA:
;;;61             /* reset GPIOA */
;;;62             rcu_periph_reset_enable(RCU_GPIOARST);
000036  f2403002          MOV      r0,#0x302
00003a  f7fffffe          BL       rcu_periph_reset_enable
;;;63             rcu_periph_reset_disable(RCU_GPIOARST);
00003e  f2403002          MOV      r0,#0x302
000042  f7fffffe          BL       rcu_periph_reset_disable
;;;64             break;
000046  e036              B        |L5.182|
                  |L5.72|
;;;65         case GPIOB:
;;;66             /* reset GPIOB */
;;;67             rcu_periph_reset_enable(RCU_GPIOBRST);
000048  f2403003          MOV      r0,#0x303
00004c  f7fffffe          BL       rcu_periph_reset_enable
;;;68             rcu_periph_reset_disable(RCU_GPIOBRST);
000050  f2403003          MOV      r0,#0x303
000054  f7fffffe          BL       rcu_periph_reset_disable
;;;69             break;
000058  e02d              B        |L5.182|
                  |L5.90|
;;;70         case GPIOC:
;;;71             /* reset GPIOC */
;;;72             rcu_periph_reset_enable(RCU_GPIOCRST);
00005a  f44f7041          MOV      r0,#0x304
00005e  f7fffffe          BL       rcu_periph_reset_enable
;;;73             rcu_periph_reset_disable(RCU_GPIOCRST);
000062  f44f7041          MOV      r0,#0x304
000066  f7fffffe          BL       rcu_periph_reset_disable
;;;74             break;
00006a  e024              B        |L5.182|
                  |L5.108|
;;;75         case GPIOD:
;;;76             /* reset GPIOD */
;;;77             rcu_periph_reset_enable(RCU_GPIODRST);
00006c  f2403005          MOV      r0,#0x305
000070  f7fffffe          BL       rcu_periph_reset_enable
;;;78             rcu_periph_reset_disable(RCU_GPIODRST);
000074  f2403005          MOV      r0,#0x305
000078  f7fffffe          BL       rcu_periph_reset_disable
;;;79             break;
00007c  e01b              B        |L5.182|
                  |L5.126|
;;;80         case GPIOE:
;;;81             /* reset GPIOE */
;;;82             rcu_periph_reset_enable(RCU_GPIOERST);
00007e  f2403006          MOV      r0,#0x306
000082  f7fffffe          BL       rcu_periph_reset_enable
;;;83             rcu_periph_reset_disable(RCU_GPIOERST);
000086  f2403006          MOV      r0,#0x306
00008a  f7fffffe          BL       rcu_periph_reset_disable
;;;84             break;
00008e  e012              B        |L5.182|
                  |L5.144|
;;;85         case GPIOF:
;;;86             /* reset GPIOF */
;;;87             rcu_periph_reset_enable(RCU_GPIOFRST);
000090  f2403007          MOV      r0,#0x307
000094  f7fffffe          BL       rcu_periph_reset_enable
;;;88             rcu_periph_reset_disable(RCU_GPIOFRST);
000098  f2403007          MOV      r0,#0x307
00009c  f7fffffe          BL       rcu_periph_reset_disable
;;;89             break;
0000a0  e009              B        |L5.182|
                  |L5.162|
;;;90         case GPIOG:
;;;91             /* reset GPIOG */
;;;92             rcu_periph_reset_enable(RCU_GPIOGRST);
0000a2  f44f7042          MOV      r0,#0x308
0000a6  f7fffffe          BL       rcu_periph_reset_enable
;;;93             rcu_periph_reset_disable(RCU_GPIOGRST);
0000aa  f44f7042          MOV      r0,#0x308
0000ae  f7fffffe          BL       rcu_periph_reset_disable
;;;94             break;
0000b2  e000              B        |L5.182|
                  |L5.180|
;;;95         default:
;;;96             break;
0000b4  bf00              NOP      
                  |L5.182|
0000b6  bf00              NOP                            ;64
;;;97         }
;;;98     }
0000b8  bd10              POP      {r4,pc}
;;;99     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L5.188|
                          DCD      0x40011400
                  |L5.192|
                          DCD      0xbffef800

                          AREA ||i.gpio_event_output_config||, CODE, READONLY, ALIGN=2

                  gpio_event_output_config PROC
;;;463    */
;;;464    void gpio_event_output_config(uint8_t output_port, uint8_t output_pin)
000000  4602              MOV      r2,r0
;;;465    {
;;;466        uint32_t reg = 0U;
000002  2000              MOVS     r0,#0
;;;467        reg = AFIO_EC;
000004  4b04              LDR      r3,|L6.24|
000006  6818              LDR      r0,[r3,#0]
;;;468        
;;;469        /* clear AFIO_EC_PORT and AFIO_EC_PIN bits */
;;;470        reg &= (uint32_t)(~(AFIO_EC_PORT|AFIO_EC_PIN));
000008  f020007f          BIC      r0,r0,#0x7f
;;;471        
;;;472        reg |= (uint32_t)((uint32_t)output_port << GPIO_OUTPUT_PORT_OFFSET);
00000c  ea401002          ORR      r0,r0,r2,LSL #4
;;;473        reg |= (uint32_t)output_pin;
000010  4308              ORRS     r0,r0,r1
;;;474        
;;;475        AFIO_EC = reg;
000012  6018              STR      r0,[r3,#0]
;;;476    }
000014  4770              BX       lr
;;;477    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40010000

                          AREA ||i.gpio_event_output_disable||, CODE, READONLY, ALIGN=2

                  gpio_event_output_disable PROC
;;;494    */
;;;495    void gpio_event_output_disable(void)
000000  4803              LDR      r0,|L7.16|
;;;496    {
;;;497        AFIO_EC &= (uint32_t)(~AFIO_EC_EOE);
000002  6800              LDR      r0,[r0,#0]
000004  f0200080          BIC      r0,r0,#0x80
000008  4901              LDR      r1,|L7.16|
00000a  6008              STR      r0,[r1,#0]
;;;498    }
00000c  4770              BX       lr
;;;499    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40010000

                          AREA ||i.gpio_event_output_enable||, CODE, READONLY, ALIGN=2

                  gpio_event_output_enable PROC
;;;483    */
;;;484    void gpio_event_output_enable(void)
000000  4803              LDR      r0,|L8.16|
;;;485    {
;;;486        AFIO_EC |= AFIO_EC_EOE;
000002  6800              LDR      r0,[r0,#0]
000004  f0400080          ORR      r0,r0,#0x80
000008  4901              LDR      r1,|L8.16|
00000a  6008              STR      r0,[r1,#0]
;;;487    }
00000c  4770              BX       lr
;;;488    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40010000

                          AREA ||i.gpio_exti_source_select||, CODE, READONLY, ALIGN=2

                  gpio_exti_source_select PROC
;;;421    */
;;;422    void gpio_exti_source_select(uint8_t output_port, uint8_t output_pin)
000000  b510              PUSH     {r4,lr}
;;;423    {
;;;424        uint32_t source = 0U;
000002  2200              MOVS     r2,#0
;;;425        source = ((uint32_t)0x0FU) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK));
000004  078b              LSLS     r3,r1,#30
000006  0f1c              LSRS     r4,r3,#28
000008  230f              MOVS     r3,#0xf
00000a  fa03f204          LSL      r2,r3,r4
;;;426    
;;;427        /* select EXTI sources */
;;;428        if(GPIO_PIN_SOURCE_4 > output_pin){
00000e  2904              CMP      r1,#4
000010  da0e              BGE      |L9.48|
;;;429            /* select EXTI0/EXTI1/EXTI2/EXTI3 */
;;;430            AFIO_EXTISS0 &= ~source;
000012  4b20              LDR      r3,|L9.148|
000014  689b              LDR      r3,[r3,#8]
000016  4393              BICS     r3,r3,r2
000018  4c1e              LDR      r4,|L9.148|
00001a  60a3              STR      r3,[r4,#8]
;;;431            AFIO_EXTISS0 |= (((uint32_t)output_port) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK)));
00001c  4623              MOV      r3,r4
00001e  689b              LDR      r3,[r3,#8]
000020  078c              LSLS     r4,r1,#30
000022  0f24              LSRS     r4,r4,#28
000024  fa00f404          LSL      r4,r0,r4
000028  4323              ORRS     r3,r3,r4
00002a  4c1a              LDR      r4,|L9.148|
00002c  60a3              STR      r3,[r4,#8]
00002e  e02f              B        |L9.144|
                  |L9.48|
;;;432        }else if(GPIO_PIN_SOURCE_8 > output_pin){
000030  2908              CMP      r1,#8
000032  da0e              BGE      |L9.82|
;;;433            /* select EXTI4/EXTI5/EXTI6/EXTI7 */
;;;434            AFIO_EXTISS1 &= ~source;
000034  4b17              LDR      r3,|L9.148|
000036  68db              LDR      r3,[r3,#0xc]
000038  4393              BICS     r3,r3,r2
00003a  4c16              LDR      r4,|L9.148|
00003c  60e3              STR      r3,[r4,#0xc]
;;;435            AFIO_EXTISS1 |= (((uint32_t)output_port) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK)));
00003e  4623              MOV      r3,r4
000040  68db              LDR      r3,[r3,#0xc]
000042  078c              LSLS     r4,r1,#30
000044  0f24              LSRS     r4,r4,#28
000046  fa00f404          LSL      r4,r0,r4
00004a  4323              ORRS     r3,r3,r4
00004c  4c11              LDR      r4,|L9.148|
00004e  60e3              STR      r3,[r4,#0xc]
000050  e01e              B        |L9.144|
                  |L9.82|
;;;436        }else if(GPIO_PIN_SOURCE_12 > output_pin){
000052  290c              CMP      r1,#0xc
000054  da0e              BGE      |L9.116|
;;;437            /* select EXTI8/EXTI9/EXTI10/EXTI11 */
;;;438            AFIO_EXTISS2 &= ~source;
000056  4b0f              LDR      r3,|L9.148|
000058  691b              LDR      r3,[r3,#0x10]
00005a  4393              BICS     r3,r3,r2
00005c  4c0d              LDR      r4,|L9.148|
00005e  6123              STR      r3,[r4,#0x10]
;;;439            AFIO_EXTISS2 |= (((uint32_t)output_port) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK)));
000060  4623              MOV      r3,r4
000062  691b              LDR      r3,[r3,#0x10]
000064  078c              LSLS     r4,r1,#30
000066  0f24              LSRS     r4,r4,#28
000068  fa00f404          LSL      r4,r0,r4
00006c  4323              ORRS     r3,r3,r4
00006e  4c09              LDR      r4,|L9.148|
000070  6123              STR      r3,[r4,#0x10]
000072  e00d              B        |L9.144|
                  |L9.116|
;;;440        }else{
;;;441            /* select EXTI12/EXTI13/EXTI14/EXTI15 */
;;;442            AFIO_EXTISS3 &= ~source;
000074  4b07              LDR      r3,|L9.148|
000076  695b              LDR      r3,[r3,#0x14]
000078  4393              BICS     r3,r3,r2
00007a  4c06              LDR      r4,|L9.148|
00007c  6163              STR      r3,[r4,#0x14]
;;;443            AFIO_EXTISS3 |= (((uint32_t)output_port) << (AFIO_EXTI_SOURCE_FIELDS * (output_pin & AFIO_EXTI_SOURCE_MASK)));
00007e  4623              MOV      r3,r4
000080  695b              LDR      r3,[r3,#0x14]
000082  078c              LSLS     r4,r1,#30
000084  0f24              LSRS     r4,r4,#28
000086  fa00f404          LSL      r4,r0,r4
00008a  4323              ORRS     r3,r3,r4
00008c  4c01              LDR      r4,|L9.148|
00008e  6163              STR      r3,[r4,#0x14]
                  |L9.144|
;;;444        }
;;;445    }
000090  bd10              POP      {r4,pc}
;;;446    
                          ENDP

000092  0000              DCW      0x0000
                  |L9.148|
                          DCD      0x40010000

                          AREA ||i.gpio_init||, CODE, READONLY, ALIGN=1

                  gpio_init PROC
;;;136    */
;;;137    void gpio_init(uint32_t gpio_periph, uint32_t mode, uint32_t speed, uint32_t pin)
000000  b5f0              PUSH     {r4-r7,lr}
;;;138    {
000002  4604              MOV      r4,r0
000004  4616              MOV      r6,r2
;;;139        uint16_t i;
;;;140        uint32_t temp_mode = 0U;
000006  2500              MOVS     r5,#0
;;;141        uint32_t reg = 0U;
000008  2200              MOVS     r2,#0
;;;142    
;;;143        /* GPIO mode configuration */
;;;144        temp_mode = (uint32_t)(mode & ((uint32_t)0x0FU));
00000a  f001050f          AND      r5,r1,#0xf
;;;145        
;;;146        /* GPIO speed configuration */
;;;147        if(((uint32_t)0x00U) != ((uint32_t)mode & ((uint32_t)0x10U))){
00000e  f0010710          AND      r7,r1,#0x10
000012  b107              CBZ      r7,|L10.22|
;;;148                /* output mode max speed:10MHz,2MHz,50MHz */
;;;149                temp_mode |= (uint32_t)speed;
000014  4335              ORRS     r5,r5,r6
                  |L10.22|
;;;150        }
;;;151    
;;;152        /* configure the eight low port pins with GPIO_CTL0 */
;;;153        for(i = 0U;i < 8U;i++){
000016  2000              MOVS     r0,#0
000018  e01e              B        |L10.88|
                  |L10.26|
;;;154            if((1U << i) & pin){
00001a  2701              MOVS     r7,#1
00001c  4087              LSLS     r7,r7,r0
00001e  401f              ANDS     r7,r7,r3
000020  b1c7              CBZ      r7,|L10.84|
;;;155                reg = GPIO_CTL0(gpio_periph);
000022  6822              LDR      r2,[r4,#0]
;;;156                
;;;157                /* clear the specified pin mode bits */
;;;158                reg &= ~GPIO_MODE_MASK(i);
000024  ea4f0c80          LSL      r12,r0,#2
000028  270f              MOVS     r7,#0xf
00002a  fa07f70c          LSL      r7,r7,r12
00002e  43ba              BICS     r2,r2,r7
;;;159                /* set the specified pin mode bits */
;;;160                reg |= GPIO_MODE_SET(i, temp_mode);
000030  0087              LSLS     r7,r0,#2
000032  fa05f707          LSL      r7,r5,r7
000036  433a              ORRS     r2,r2,r7
;;;161                
;;;162                /* set IPD or IPU */
;;;163                if(GPIO_MODE_IPD == mode){
000038  2928              CMP      r1,#0x28
00003a  d104              BNE      |L10.70|
;;;164                    /* reset the corresponding OCTL bit */
;;;165                    GPIO_BC(gpio_periph) = (uint32_t)((1U << i) & pin);
00003c  2701              MOVS     r7,#1
00003e  4087              LSLS     r7,r7,r0
000040  401f              ANDS     r7,r7,r3
000042  6167              STR      r7,[r4,#0x14]
000044  e005              B        |L10.82|
                  |L10.70|
;;;166                }else{
;;;167                    /* set the corresponding OCTL bit */
;;;168                    if(GPIO_MODE_IPU == mode){
000046  2948              CMP      r1,#0x48
000048  d103              BNE      |L10.82|
;;;169                        GPIO_BOP(gpio_periph) = (uint32_t)((1U << i) & pin);
00004a  2701              MOVS     r7,#1
00004c  4087              LSLS     r7,r7,r0
00004e  401f              ANDS     r7,r7,r3
000050  6127              STR      r7,[r4,#0x10]
                  |L10.82|
;;;170                    }
;;;171                }
;;;172                /* set GPIO_CTL0 register */
;;;173                GPIO_CTL0(gpio_periph) = reg;
000052  6022              STR      r2,[r4,#0]
                  |L10.84|
000054  1c47              ADDS     r7,r0,#1              ;153
000056  b2b8              UXTH     r0,r7                 ;153
                  |L10.88|
000058  2808              CMP      r0,#8                 ;153
00005a  d3de              BCC      |L10.26|
;;;174            }
;;;175        }
;;;176        /* configure the eight high port pins with GPIO_CTL1 */
;;;177        for(i = 8U;i < 16U;i++){
00005c  2008              MOVS     r0,#8
00005e  e022              B        |L10.166|
                  |L10.96|
;;;178            if((1U << i) & pin){
000060  2701              MOVS     r7,#1
000062  4087              LSLS     r7,r7,r0
000064  401f              ANDS     r7,r7,r3
000066  b1e7              CBZ      r7,|L10.162|
;;;179                reg = GPIO_CTL1(gpio_periph);
000068  6862              LDR      r2,[r4,#4]
;;;180                
;;;181                /* clear the specified pin mode bits */
;;;182                reg &= ~GPIO_MODE_MASK(i - 8U);
00006a  f1a00708          SUB      r7,r0,#8
00006e  ea4f0c87          LSL      r12,r7,#2
000072  270f              MOVS     r7,#0xf
000074  fa07f70c          LSL      r7,r7,r12
000078  43ba              BICS     r2,r2,r7
;;;183                /* set the specified pin mode bits */
;;;184                reg |= GPIO_MODE_SET(i - 8U, temp_mode);
00007a  f1a00708          SUB      r7,r0,#8
00007e  00bf              LSLS     r7,r7,#2
000080  fa05f707          LSL      r7,r5,r7
000084  433a              ORRS     r2,r2,r7
;;;185                
;;;186                /* set IPD or IPU */
;;;187                if(GPIO_MODE_IPD == mode){
000086  2928              CMP      r1,#0x28
000088  d104              BNE      |L10.148|
;;;188                    /* reset the corresponding OCTL bit */
;;;189                    GPIO_BC(gpio_periph) = (uint32_t)((1U << i) & pin);
00008a  2701              MOVS     r7,#1
00008c  4087              LSLS     r7,r7,r0
00008e  401f              ANDS     r7,r7,r3
000090  6167              STR      r7,[r4,#0x14]
000092  e005              B        |L10.160|
                  |L10.148|
;;;190                }else{
;;;191                    /* set the corresponding OCTL bit */
;;;192                    if(GPIO_MODE_IPU == mode){
000094  2948              CMP      r1,#0x48
000096  d103              BNE      |L10.160|
;;;193                        GPIO_BOP(gpio_periph) = (uint32_t)((1U << i) & pin);
000098  2701              MOVS     r7,#1
00009a  4087              LSLS     r7,r7,r0
00009c  401f              ANDS     r7,r7,r3
00009e  6127              STR      r7,[r4,#0x10]
                  |L10.160|
;;;194                    }
;;;195                }
;;;196                /* set GPIO_CTL1 register */
;;;197                GPIO_CTL1(gpio_periph) = reg;
0000a0  6062              STR      r2,[r4,#4]
                  |L10.162|
0000a2  1c47              ADDS     r7,r0,#1              ;177
0000a4  b2b8              UXTH     r0,r7                 ;177
                  |L10.166|
0000a6  2810              CMP      r0,#0x10              ;177
0000a8  d3da              BCC      |L10.96|
;;;198            }
;;;199        }
;;;200    }
0000aa  bdf0              POP      {r4-r7,pc}
;;;201    
                          ENDP


                          AREA ||i.gpio_input_bit_get||, CODE, READONLY, ALIGN=1

                  gpio_input_bit_get PROC
;;;271    */
;;;272    FlagStatus gpio_input_bit_get(uint32_t gpio_periph,uint32_t pin)
000000  4602              MOV      r2,r0
;;;273    {
;;;274        if((uint32_t)RESET != (GPIO_ISTAT(gpio_periph)&(pin))){
000002  6890              LDR      r0,[r2,#8]
000004  4008              ANDS     r0,r0,r1
000006  b108              CBZ      r0,|L11.12|
;;;275            return SET; 
000008  2001              MOVS     r0,#1
                  |L11.10|
;;;276        }else{
;;;277            return RESET;
;;;278        }
;;;279    }
00000a  4770              BX       lr
                  |L11.12|
00000c  2000              MOVS     r0,#0                 ;277
00000e  e7fc              B        |L11.10|
;;;280    
                          ENDP


                          AREA ||i.gpio_input_port_get||, CODE, READONLY, ALIGN=1

                  gpio_input_port_get PROC
;;;286    */
;;;287    uint16_t gpio_input_port_get(uint32_t gpio_periph)
000000  4601              MOV      r1,r0
;;;288    {
;;;289        return (uint16_t)(GPIO_ISTAT(gpio_periph));
000002  6888              LDR      r0,[r1,#8]
000004  b280              UXTH     r0,r0
;;;290    }
000006  4770              BX       lr
;;;291    
                          ENDP


                          AREA ||i.gpio_output_bit_get||, CODE, READONLY, ALIGN=1

                  gpio_output_bit_get PROC
;;;300    */
;;;301    FlagStatus gpio_output_bit_get(uint32_t gpio_periph, uint32_t pin)
000000  4602              MOV      r2,r0
;;;302    {
;;;303        if((uint32_t)RESET !=(GPIO_OCTL(gpio_periph)&(pin))){
000002  68d0              LDR      r0,[r2,#0xc]
000004  4008              ANDS     r0,r0,r1
000006  b108              CBZ      r0,|L13.12|
;;;304            return SET;
000008  2001              MOVS     r0,#1
                  |L13.10|
;;;305        }else{
;;;306            return RESET;
;;;307        }
;;;308    }
00000a  4770              BX       lr
                  |L13.12|
00000c  2000              MOVS     r0,#0                 ;306
00000e  e7fc              B        |L13.10|
;;;309    
                          ENDP


                          AREA ||i.gpio_output_port_get||, CODE, READONLY, ALIGN=1

                  gpio_output_port_get PROC
;;;315    */
;;;316    uint16_t gpio_output_port_get(uint32_t gpio_periph)
000000  4601              MOV      r1,r0
;;;317    {
;;;318        return ((uint16_t)GPIO_OCTL(gpio_periph));
000002  68c8              LDR      r0,[r1,#0xc]
000004  b280              UXTH     r0,r0
;;;319    }
000006  4770              BX       lr
;;;320    
                          ENDP


                          AREA ||i.gpio_pin_lock||, CODE, READONLY, ALIGN=1

                  gpio_pin_lock PROC
;;;508    */
;;;509    void gpio_pin_lock(uint32_t gpio_periph, uint32_t pin)
000000  f44f3280          MOV      r2,#0x10000
;;;510    {
;;;511        uint32_t lock = 0x00010000U;
;;;512        lock |= pin;
000004  430a              ORRS     r2,r2,r1
;;;513    
;;;514        /* lock key writing sequence: write 1 -> write 0 -> write 1 -> read 0 -> read 1 */
;;;515        GPIO_LOCK(gpio_periph) = (uint32_t)lock;
000006  6182              STR      r2,[r0,#0x18]
;;;516        GPIO_LOCK(gpio_periph) = (uint32_t)pin;
000008  6181              STR      r1,[r0,#0x18]
;;;517        GPIO_LOCK(gpio_periph) = (uint32_t)lock;
00000a  6182              STR      r2,[r0,#0x18]
;;;518        lock = GPIO_LOCK(gpio_periph);
00000c  6982              LDR      r2,[r0,#0x18]
;;;519        lock = GPIO_LOCK(gpio_periph);
00000e  6982              LDR      r2,[r0,#0x18]
;;;520    }
000010  4770              BX       lr
;;;521    
                          ENDP


                          AREA ||i.gpio_pin_remap_config||, CODE, READONLY, ALIGN=2

                  gpio_pin_remap_config PROC
;;;365    */
;;;366    void gpio_pin_remap_config(uint32_t remap, ControlStatus newvalue)
000000  b5f0              PUSH     {r4-r7,lr}
;;;367    {
000002  460a              MOV      r2,r1
;;;368        uint32_t remap1 = 0U, remap2 = 0U, temp_reg = 0U, temp_mask = 0U;
000004  2300              MOVS     r3,#0
000006  2400              MOVS     r4,#0
000008  2100              MOVS     r1,#0
00000a  2500              MOVS     r5,#0
;;;369    
;;;370        if(AFIO_PCF1_FIELDS == (remap & AFIO_PCF1_FIELDS)){
00000c  f0004600          AND      r6,r0,#0x80000000
000010  f1b64f00          CMP      r6,#0x80000000
000014  d102              BNE      |L16.28|
;;;371            /* get AFIO_PCF1 regiter value */
;;;372            temp_reg = AFIO_PCF1;
000016  4e1d              LDR      r6,|L16.140|
000018  69f1              LDR      r1,[r6,#0x1c]
00001a  e001              B        |L16.32|
                  |L16.28|
;;;373        }else{
;;;374            /* get AFIO_PCF0 regiter value */
;;;375            temp_reg = AFIO_PCF0;
00001c  4e1b              LDR      r6,|L16.140|
00001e  6871              LDR      r1,[r6,#4]
                  |L16.32|
;;;376        }
;;;377    
;;;378        temp_mask = (remap & PCF_POSITION_MASK) >> 0x10U;
000020  f3c04503          UBFX     r5,r0,#16,#4
;;;379        remap1 = remap & LSB_16BIT_MASK;
000024  b283              UXTH     r3,r0
;;;380    
;;;381        /* judge pin remap type */
;;;382        if((PCF_LOCATION1_MASK | PCF_LOCATION2_MASK) == (remap & (PCF_LOCATION1_MASK | PCF_LOCATION2_MASK))){
000026  f4001640          AND      r6,r0,#0x300000
00002a  f5b61f40          CMP      r6,#0x300000
00002e  d108              BNE      |L16.66|
;;;383            temp_reg &= PCF_SWJCFG_MASK;
000030  f0216170          BIC      r1,r1,#0xf000000
;;;384            AFIO_PCF0 &= PCF_SWJCFG_MASK;
000034  4e15              LDR      r6,|L16.140|
000036  6876              LDR      r6,[r6,#4]
000038  f0266670          BIC      r6,r6,#0xf000000
00003c  4f13              LDR      r7,|L16.140|
00003e  607e              STR      r6,[r7,#4]
000040  e012              B        |L16.104|
                  |L16.66|
;;;385        }else if(PCF_LOCATION2_MASK == (remap & PCF_LOCATION2_MASK)){
000042  f4001680          AND      r6,r0,#0x100000
000046  f5b61f80          CMP      r6,#0x100000
00004a  d106              BNE      |L16.90|
;;;386            remap2 = ((uint32_t)0x03U) << temp_mask;
00004c  2603              MOVS     r6,#3
00004e  fa06f405          LSL      r4,r6,r5
;;;387            temp_reg &= ~remap2;
000052  43a1              BICS     r1,r1,r4
;;;388            temp_reg |= ~PCF_SWJCFG_MASK;
000054  f0416170          ORR      r1,r1,#0xf000000
000058  e006              B        |L16.104|
                  |L16.90|
;;;389        }else{
;;;390            temp_reg &= ~(remap1 << ((remap >> 0x15U)*0x10U));
00005a  0d46              LSRS     r6,r0,#21
00005c  0136              LSLS     r6,r6,#4
00005e  fa03f606          LSL      r6,r3,r6
000062  43b1              BICS     r1,r1,r6
;;;391            temp_reg |= ~PCF_SWJCFG_MASK;
000064  f0416170          ORR      r1,r1,#0xf000000
                  |L16.104|
;;;392        }
;;;393        
;;;394        /* set pin remap value */
;;;395        if(DISABLE != newvalue){
000068  b122              CBZ      r2,|L16.116|
;;;396            temp_reg |= (remap1 << ((remap >> 0x15U)*0x10U));
00006a  0d46              LSRS     r6,r0,#21
00006c  0136              LSLS     r6,r6,#4
00006e  fa03f606          LSL      r6,r3,r6
000072  4331              ORRS     r1,r1,r6
                  |L16.116|
;;;397        }
;;;398        
;;;399        if(AFIO_PCF1_FIELDS == (remap & AFIO_PCF1_FIELDS)){
000074  f0004600          AND      r6,r0,#0x80000000
000078  f1b64f00          CMP      r6,#0x80000000
00007c  d102              BNE      |L16.132|
;;;400            /* set AFIO_PCF1 regiter value */
;;;401            AFIO_PCF1 = temp_reg;
00007e  4e03              LDR      r6,|L16.140|
000080  61f1              STR      r1,[r6,#0x1c]
000082  e001              B        |L16.136|
                  |L16.132|
;;;402        }else{
;;;403            /* set AFIO_PCF0 regiter value */
;;;404            AFIO_PCF0 = temp_reg;
000084  4e01              LDR      r6,|L16.140|
000086  6071              STR      r1,[r6,#4]
                  |L16.136|
;;;405        }
;;;406    }
000088  bdf0              POP      {r4-r7,pc}
;;;407    
                          ENDP

00008a  0000              DCW      0x0000
                  |L16.140|
                          DCD      0x40010000

                          AREA ||i.gpio_port_write||, CODE, READONLY, ALIGN=1

                  gpio_port_write PROC
;;;257    */
;;;258    void gpio_port_write(uint32_t gpio_periph,uint16_t data)
000000  60c1              STR      r1,[r0,#0xc]
;;;259    {
;;;260        GPIO_OCTL(gpio_periph) = (uint32_t)data;
;;;261    }
000002  4770              BX       lr
;;;262    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_gpio_c_ed302560____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___15_gd32f10x_gpio_c_ed302560____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_gpio_c_ed302560____REVSH|
#line 128
|__asm___15_gd32f10x_gpio_c_ed302560____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
