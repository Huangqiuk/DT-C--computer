; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_misc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_misc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_misc.crf Libraries\src\gd32f10x_misc.c]
                          THUMB

                          AREA ||i.nvic_irq_disable||, CODE, READONLY, ALIGN=2

                  nvic_irq_disable PROC
;;;116    */
;;;117    void nvic_irq_disable(uint8_t nvic_irq)
000000  f000021f          AND      r2,r0,#0x1f
;;;118    {
;;;119        /* disable the selected IRQ.*/
;;;120        NVIC->ICER[nvic_irq >> 0x05U] = (uint32_t)0x01U << (nvic_irq & (uint8_t)0x1FU);
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a02              LDR      r2,|L1.20|
00000a  1143              ASRS     r3,r0,#5
00000c  f8421023          STR      r1,[r2,r3,LSL #2]
;;;121    }
000010  4770              BX       lr
;;;122    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0xe000e180

                          AREA ||i.nvic_irq_enable||, CODE, READONLY, ALIGN=2

                  nvic_irq_enable PROC
;;;65     */
;;;66     void nvic_irq_enable(uint8_t nvic_irq, 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;67                          uint8_t nvic_irq_pre_priority, 
;;;68                          uint8_t nvic_irq_sub_priority)
;;;69     {
000004  4603              MOV      r3,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;70         uint32_t temp_priority = 0x00U, temp_pre = 0x00U, temp_sub = 0x00U;
00000a  2400              MOVS     r4,#0
00000c  2700              MOVS     r7,#0
00000e  46a0              MOV      r8,r4
;;;71     
;;;72         /* use the priority group value to get the temp_pre and the temp_sub */
;;;73         switch ((SCB->AIRCR) & (uint32_t)0x700U) {
000010  4824              LDR      r0,|L2.164|
000012  6800              LDR      r0,[r0,#0]
000014  f40060e0          AND      r0,r0,#0x700
000018  f5b06fa0          CMP      r0,#0x500
00001c  d015              BEQ      |L2.74|
00001e  dc06              BGT      |L2.46|
000020  f5b07f40          CMP      r0,#0x300
000024  d018              BEQ      |L2.88|
000026  f5b06f80          CMP      r0,#0x400
00002a  d119              BNE      |L2.96|
00002c  e010              B        |L2.80|
                  |L2.46|
00002e  f5b06fc0          CMP      r0,#0x600
000032  d006              BEQ      |L2.66|
000034  f5b06fe0          CMP      r0,#0x700
000038  d112              BNE      |L2.96|
;;;74         case NVIC_PRIGROUP_PRE0_SUB4:
;;;75             temp_pre = 0U;
00003a  2700              MOVS     r7,#0
;;;76             temp_sub = 0x4U;
00003c  f04f0804          MOV      r8,#4
;;;77             break;
000040  e015              B        |L2.110|
                  |L2.66|
;;;78         case NVIC_PRIGROUP_PRE1_SUB3:
;;;79             temp_pre = 1U;
000042  2701              MOVS     r7,#1
;;;80             temp_sub = 0x3U;
000044  f04f0803          MOV      r8,#3
;;;81             break;
000048  e011              B        |L2.110|
                  |L2.74|
;;;82         case NVIC_PRIGROUP_PRE2_SUB2:
;;;83             temp_pre = 2U;
00004a  2702              MOVS     r7,#2
;;;84             temp_sub = 0x2U;
00004c  46b8              MOV      r8,r7
;;;85             break;
00004e  e00e              B        |L2.110|
                  |L2.80|
;;;86         case NVIC_PRIGROUP_PRE3_SUB1:
;;;87             temp_pre = 3U;
000050  2703              MOVS     r7,#3
;;;88             temp_sub = 0x1U;
000052  f04f0801          MOV      r8,#1
;;;89             break;
000056  e00a              B        |L2.110|
                  |L2.88|
;;;90         case NVIC_PRIGROUP_PRE4_SUB0:
;;;91             temp_pre = 4U;
000058  2704              MOVS     r7,#4
;;;92             temp_sub = 0x0U;
00005a  f04f0800          MOV      r8,#0
;;;93             break;
00005e  e006              B        |L2.110|
                  |L2.96|
;;;94         default:
;;;95             nvic_priority_group_set(NVIC_PRIGROUP_PRE2_SUB2);
000060  f44f60a0          MOV      r0,#0x500
000064  f7fffffe          BL       nvic_priority_group_set
;;;96             temp_pre = 2U;
000068  2702              MOVS     r7,#2
;;;97             temp_sub = 0x2U;
00006a  46b8              MOV      r8,r7
;;;98             break;
00006c  bf00              NOP      
                  |L2.110|
00006e  bf00              NOP                            ;77
;;;99         }
;;;100    
;;;101        /* get the temp_priority to fill the NVIC->IP register */
;;;102        temp_priority = (uint32_t)nvic_irq_pre_priority << (0x4U - temp_pre);
000070  f1c70004          RSB      r0,r7,#4
000074  fa05f400          LSL      r4,r5,r0
;;;103        temp_priority |= nvic_irq_sub_priority &(0x0FU >> (0x4U - temp_sub));
000078  f1c80104          RSB      r1,r8,#4
00007c  200f              MOVS     r0,#0xf
00007e  40c8              LSRS     r0,r0,r1
000080  4030              ANDS     r0,r0,r6
000082  4304              ORRS     r4,r4,r0
;;;104        temp_priority = temp_priority << 0x04U;
000084  0124              LSLS     r4,r4,#4
;;;105        NVIC->IP[nvic_irq] = (uint8_t)temp_priority;
000086  4808              LDR      r0,|L2.168|
000088  54c4              STRB     r4,[r0,r3]
;;;106    
;;;107        /* enable the selected IRQ */
;;;108        NVIC->ISER[nvic_irq >> 0x05U] = (uint32_t)0x01U << (nvic_irq & (uint8_t)0x1FU);
00008a  f003011f          AND      r1,r3,#0x1f
00008e  2001              MOVS     r0,#1
000090  4088              LSLS     r0,r0,r1
000092  1159              ASRS     r1,r3,#5
000094  0089              LSLS     r1,r1,#2
000096  f10121e0          ADD      r1,r1,#0xe000e000
00009a  f8c10100          STR      r0,[r1,#0x100]
;;;109    }
00009e  e8bd81f0          POP      {r4-r8,pc}
;;;110    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L2.164|
                          DCD      0xe000ed0c
                  |L2.168|
                          DCD      0xe000e400

                          AREA ||i.nvic_priority_group_set||, CODE, READONLY, ALIGN=2

                  nvic_priority_group_set PROC
;;;51     */
;;;52     void nvic_priority_group_set(uint32_t nvic_prigroup)
000000  4902              LDR      r1,|L3.12|
;;;53     {
;;;54         /* set the priority group value */
;;;55         SCB->AIRCR = NVIC_AIRCR_VECTKEY_MASK | nvic_prigroup;
000002  4301              ORRS     r1,r1,r0
000004  4a02              LDR      r2,|L3.16|
000006  6011              STR      r1,[r2,#0]
;;;56     }
000008  4770              BX       lr
;;;57     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x05fa0000
                  |L3.16|
                          DCD      0xe000ed0c

                          AREA ||i.nvic_vector_table_set||, CODE, READONLY, ALIGN=2

                  nvic_vector_table_set PROC
;;;131    */
;;;132    void nvic_vector_table_set(uint32_t nvic_vict_tab, uint32_t offset)
000000  4a02              LDR      r2,|L4.12|
;;;133    {
;;;134        SCB->VTOR = nvic_vict_tab | (offset & NVIC_VECTTAB_OFFSET_MASK);
000002  400a              ANDS     r2,r2,r1
000004  4302              ORRS     r2,r2,r0
000006  4b02              LDR      r3,|L4.16|
000008  601a              STR      r2,[r3,#0]
;;;135    }
00000a  4770              BX       lr
;;;136    
                          ENDP

                  |L4.12|
                          DCD      0x1fffff80
                  |L4.16|
                          DCD      0xe000ed08

                          AREA ||i.system_lowpower_reset||, CODE, READONLY, ALIGN=2

                  system_lowpower_reset PROC
;;;163    */
;;;164    void system_lowpower_reset(uint8_t lowpower_mode)
000000  4902              LDR      r1,|L5.12|
;;;165    {
;;;166        SCB->SCR &= (~(uint32_t)lowpower_mode);
000002  6809              LDR      r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L5.12|
000008  6011              STR      r1,[r2,#0]
;;;167    }
00000a  4770              BX       lr
;;;168    
                          ENDP

                  |L5.12|
                          DCD      0xe000ed10

                          AREA ||i.system_lowpower_set||, CODE, READONLY, ALIGN=2

                  system_lowpower_set PROC
;;;147    */
;;;148    void system_lowpower_set(uint8_t lowpower_mode)
000000  4902              LDR      r1,|L6.12|
;;;149    {
;;;150        SCB->SCR |= (uint32_t)lowpower_mode;
000002  6809              LDR      r1,[r1,#0]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L6.12|
000008  6011              STR      r1,[r2,#0]
;;;151    }
00000a  4770              BX       lr
;;;152    
                          ENDP

                  |L6.12|
                          DCD      0xe000ed10

                          AREA ||i.systick_clksource_set||, CODE, READONLY, ALIGN=1

                  systick_clksource_set PROC
;;;177    
;;;178    void systick_clksource_set(uint32_t systick_clksource)
000000  2804              CMP      r0,#4
;;;179    {
;;;180        if(SYSTICK_CLKSOURCE_HCLK == systick_clksource ){
000002  d108              BNE      |L7.22|
;;;181            /* set the systick clock source from HCLK */
;;;182            SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
000004  f04f21e0          MOV      r1,#0xe000e000
000008  6909              LDR      r1,[r1,#0x10]
00000a  f0410104          ORR      r1,r1,#4
00000e  f04f22e0          MOV      r2,#0xe000e000
000012  6111              STR      r1,[r2,#0x10]
000014  e007              B        |L7.38|
                  |L7.22|
;;;183        }else{
;;;184            /* set the systick clock source from HCLK/8 */
;;;185            SysTick->CTRL &= SYSTICK_CLKSOURCE_HCLK_DIV8;
000016  f04f21e0          MOV      r1,#0xe000e000
00001a  6909              LDR      r1,[r1,#0x10]
00001c  f0210104          BIC      r1,r1,#4
000020  f04f22e0          MOV      r2,#0xe000e000
000024  6111              STR      r1,[r2,#0x10]
                  |L7.38|
;;;186        }
;;;187    }
000026  4770              BX       lr
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_misc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_misc_c_25ea0539____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___15_gd32f10x_misc_c_25ea0539____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_misc_c_25ea0539____REVSH|
#line 128
|__asm___15_gd32f10x_misc_c_25ea0539____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
