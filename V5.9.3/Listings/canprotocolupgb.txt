; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\canprotocolupgb.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\canprotocolupgb.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\canprotocolupgb.crf User\CanProtocolUpGB.c]
                          THUMB

                          AREA ||i.CAN_PGN_RequestGetData||, CODE, READONLY, ALIGN=2

                  CAN_PGN_RequestGetData PROC
;;;579    // state : 当前状态   DestAddress:目的地址   SourceAddress:源地址
;;;580    void CAN_PGN_RequestGetData(STATE_PGN state, uint8 PGN, uint8 DestAddress, uint8 SourceAddress)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;581    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;582        uint16 dataLength = 0, dataNumber = 0;
00000c  2400              MOVS     r4,#0
00000e  2700              MOVS     r7,#0
;;;583    
;;;584        canProtocolCB.preState = canProtocolCB.state;
000010  484d              LDR      r0,|L1.328|
000012  f8900d3c          LDRB     r0,[r0,#0xd3c]  ; canProtocolCB
000016  494c              LDR      r1,|L1.328|
000018  f8810d3d          STRB     r0,[r1,#0xd3d]
;;;585        canProtocolCB.state = state;
00001c  4608              MOV      r0,r1
00001e  f8805d3c          STRB     r5,[r0,#0xd3c]
;;;586    
;;;587        switch (PGN)
000022  f1a60050          SUB      r0,r6,#0x50
000026  2806              CMP      r0,#6
000028  d22b              BCS      |L1.130|
00002a  e8dff000          TBB      [pc,r0]
00002e  032a              DCB      0x03,0x2a
000030  15161718          DCB      0x15,0x16,0x17,0x18
;;;588        {
;;;589        // 升级数据包大小下发
;;;590        case 0x50:
;;;591            // 发送的字节数
;;;592            dataLength = 28;
000034  241c              MOVS     r4,#0x1c
;;;593    
;;;594            // 发送的总包数
;;;595            if (dataLength % 7)
000036  2007              MOVS     r0,#7
000038  fb94f1f0          SDIV     r1,r4,r0
00003c  fb004011          MLS      r0,r0,r1,r4
000040  b128              CBZ      r0,|L1.78|
;;;596            {
;;;597                dataNumber = (dataLength / 7) + 1;
000042  2007              MOVS     r0,#7
000044  fb94f0f0          SDIV     r0,r4,r0
000048  1c40              ADDS     r0,r0,#1
00004a  b287              UXTH     r7,r0
00004c  e003              B        |L1.86|
                  |L1.78|
;;;598            }
;;;599            else
;;;600            {
;;;601                dataNumber = dataLength / 7;
00004e  2007              MOVS     r0,#7
000050  fb94f0f0          SDIV     r0,r4,r0
000054  b287              UXTH     r7,r0
                  |L1.86|
;;;602            }
;;;603    
;;;604            break;
000056  e015              B        |L1.132|
;;;605    
;;;606        case 0x52:
;;;607        case 0x53:
000058  bf00              NOP      
;;;608        case 0x54:
00005a  bf00              NOP      
;;;609        case 0x55:
00005c  bf00              NOP      
;;;610            // 发送的字节数
;;;611            dataLength = 23;
00005e  2417              MOVS     r4,#0x17
;;;612    
;;;613            // 发送的总包数
;;;614            if (dataLength % 7)
000060  2007              MOVS     r0,#7
000062  fb94f1f0          SDIV     r1,r4,r0
000066  fb004011          MLS      r0,r0,r1,r4
00006a  b128              CBZ      r0,|L1.120|
;;;615            {
;;;616                dataNumber = (dataLength / 7) + 1;
00006c  2007              MOVS     r0,#7
00006e  fb94f0f0          SDIV     r0,r4,r0
000072  1c40              ADDS     r0,r0,#1
000074  b287              UXTH     r7,r0
000076  e003              B        |L1.128|
                  |L1.120|
;;;617            }
;;;618            else
;;;619            {
;;;620                dataNumber = dataLength / 7;
000078  2007              MOVS     r0,#7
00007a  fb94f0f0          SDIV     r0,r4,r0
00007e  b287              UXTH     r7,r0
                  |L1.128|
;;;621            }
;;;622            break;
000080  e000              B        |L1.132|
                  |L1.130|
;;;623    
;;;624        default:
;;;625            break;
000082  bf00              NOP      
                  |L1.132|
000084  bf00              NOP                            ;604
;;;626        }
;;;627    
;;;628        switch (state)
000086  b135              CBZ      r5,|L1.150|
000088  2d05              CMP      r5,#5
00008a  d005              BEQ      |L1.152|
00008c  2d06              CMP      r5,#6
00008e  d015              BEQ      |L1.188|
000090  2d07              CMP      r5,#7
000092  d155              BNE      |L1.320|
000094  e033              B        |L1.254|
                  |L1.150|
;;;629        {
;;;630        case STATE_PGN_NULL:
;;;631    
;;;632            break;
000096  e054              B        |L1.322|
                  |L1.152|
;;;633    
;;;634        // 请求PGN数据 第一步:发送请求PGN  EA00
;;;635        case STATE_PGN_GET_1:
;;;636    
;;;637            CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEA, DestAddress, SourceAddress);
000098  464b              MOV      r3,r9
00009a  4642              MOV      r2,r8
00009c  21ea              MOVS     r1,#0xea
00009e  2006              MOVS     r0,#6
0000a0  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;638    
;;;639            CAN_PROTOCOL_TxAddData(0x00);
0000a4  2000              MOVS     r0,#0
0000a6  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;640    
;;;641            CAN_PROTOCOL_TxAddData(PGN);
0000aa  4630              MOV      r0,r6
0000ac  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;642    
;;;643            CAN_PROTOCOL_TxAddData(0x00);
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;644    
;;;645            CAN_PROTOCOL_TxAddFrame();
0000b6  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
;;;646            break;
0000ba  e042              B        |L1.322|
                  |L1.188|
;;;647    
;;;648        // 请求PGN数据 第二步:发送请求PGN  EC00
;;;649        case STATE_PGN_GET_2:
;;;650    
;;;651            CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEC, DestAddress, SourceAddress);
0000bc  464b              MOV      r3,r9
0000be  4642              MOV      r2,r8
0000c0  21ec              MOVS     r1,#0xec
0000c2  2006              MOVS     r0,#6
0000c4  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;652    
;;;653            CAN_PROTOCOL_TxAddData(0x11); // 准许发送
0000c8  2011              MOVS     r0,#0x11
0000ca  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;654    
;;;655            CAN_PROTOCOL_TxAddData(dataNumber);
0000ce  b2f8              UXTB     r0,r7
0000d0  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;656    
;;;657            CAN_PROTOCOL_TxAddData(0x01);
0000d4  2001              MOVS     r0,#1
0000d6  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;658    
;;;659            CAN_PROTOCOL_TxAddData(0xFF);
0000da  20ff              MOVS     r0,#0xff
0000dc  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;660    
;;;661            CAN_PROTOCOL_TxAddData(0xFF);
0000e0  20ff              MOVS     r0,#0xff
0000e2  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;662    
;;;663            CAN_PROTOCOL_TxAddData(0);
0000e6  2000              MOVS     r0,#0
0000e8  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;664    
;;;665            CAN_PROTOCOL_TxAddData(PGN);
0000ec  4630              MOV      r0,r6
0000ee  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;666    
;;;667            CAN_PROTOCOL_TxAddData(0);
0000f2  2000              MOVS     r0,#0
0000f4  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;668    
;;;669            CAN_PROTOCOL_TxAddFrame();
0000f8  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
;;;670            break;
0000fc  e021              B        |L1.322|
                  |L1.254|
;;;671    
;;;672        // 请求PGN数据 第三步:发送请求PGN  EC00
;;;673        case STATE_PGN_GET_3:
;;;674    
;;;675            CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEC, DestAddress, SourceAddress);
0000fe  464b              MOV      r3,r9
000100  4642              MOV      r2,r8
000102  21ec              MOVS     r1,#0xec
000104  2006              MOVS     r0,#6
000106  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;676    
;;;677            CAN_PROTOCOL_TxAddData(0x13); // 结束应答
00010a  2013              MOVS     r0,#0x13
00010c  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;678    
;;;679            CAN_PROTOCOL_TxAddData(dataLength & 0xFF); //   字节数
000110  b2e0              UXTB     r0,r4
000112  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;680    
;;;681            CAN_PROTOCOL_TxAddData((dataLength >> 8) & 0xFF);
000116  0a20              LSRS     r0,r4,#8
000118  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;682    
;;;683            CAN_PROTOCOL_TxAddData(dataNumber); //  包数
00011c  b2f8              UXTB     r0,r7
00011e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;684    
;;;685            CAN_PROTOCOL_TxAddData(0x01); // 数据校验成功
000122  2001              MOVS     r0,#1
000124  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;686    
;;;687            CAN_PROTOCOL_TxAddData(0);
000128  2000              MOVS     r0,#0
00012a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;688    
;;;689            CAN_PROTOCOL_TxAddData(PGN);
00012e  4630              MOV      r0,r6
000130  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;690    
;;;691            CAN_PROTOCOL_TxAddData(0);
000134  2000              MOVS     r0,#0
000136  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;692    
;;;693            CAN_PROTOCOL_TxAddFrame();
00013a  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
;;;694            break;
00013e  e000              B        |L1.322|
                  |L1.320|
;;;695    
;;;696        default:
;;;697            break;
000140  bf00              NOP      
                  |L1.322|
000142  bf00              NOP                            ;632
;;;698        }
;;;699    }
000144  e8bd83f0          POP      {r4-r9,pc}
;;;700    
                          ENDP

                  |L1.328|
                          DCD      canProtocolCB

                          AREA ||i.CAN_PGN_RequestSendData||, CODE, READONLY, ALIGN=2

                  CAN_PGN_RequestSendData PROC
;;;471    // state : 当前状态   DestAddress:目的地址   SourceAddress:源地址
;;;472    void CAN_PGN_RequestSendData(STATE_PGN state, uint8 PGN, uint8 DestAddress, uint8 SourceAddress)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;473    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;474        uint16 dataLength = 0, dataNumber = 0;
00000c  2700              MOVS     r7,#0
00000e  46b8              MOV      r8,r7
;;;475        uint8 number = 1;
000010  2401              MOVS     r4,#1
;;;476    
;;;477        canProtocolCB.preState = canProtocolCB.state;
000012  484f              LDR      r0,|L2.336|
000014  f8900d3c          LDRB     r0,[r0,#0xd3c]  ; canProtocolCB
000018  494d              LDR      r1,|L2.336|
00001a  f8810d3d          STRB     r0,[r1,#0xd3d]
;;;478        canProtocolCB.state = state;
00001e  4608              MOV      r0,r1
000020  f8805d3c          STRB     r5,[r0,#0xd3c]
;;;479    
;;;480        switch (PGN)
000024  2e55              CMP      r6,#0x55
000026  d016              BEQ      |L2.86|
000028  dc06              BGT      |L2.56|
00002a  2e52              CMP      r6,#0x52
00002c  d010              BEQ      |L2.80|
00002e  2e53              CMP      r6,#0x53
000030  d00f              BEQ      |L2.82|
000032  2e54              CMP      r6,#0x54
000034  d113              BNE      |L2.94|
000036  e00d              B        |L2.84|
                  |L2.56|
000038  2eed              CMP      r6,#0xed
00003a  d005              BEQ      |L2.72|
00003c  2eef              CMP      r6,#0xef
00003e  d10e              BNE      |L2.94|
;;;481        {
;;;482        // 升级包数据大小
;;;483        case 0xEF:
;;;484    
;;;485            // 发送的字节数
;;;486            dataLength = 132;
000040  2784              MOVS     r7,#0x84
;;;487    
;;;488            // 发送的总包数
;;;489            dataNumber = 19;
000042  f04f0813          MOV      r8,#0x13
;;;490    
;;;491            break;
000046  e00b              B        |L2.96|
                  |L2.72|
;;;492    
;;;493        // 下发总成编码
;;;494        case 0xED:
;;;495    
;;;496            // 发送的字节数
;;;497            dataLength = 43;
000048  272b              MOVS     r7,#0x2b
;;;498    
;;;499            // 发送的总包数
;;;500            dataNumber = 7;
00004a  f04f0807          MOV      r8,#7
;;;501            break;
00004e  e007              B        |L2.96|
                  |L2.80|
;;;502    
;;;503        case 0x52:
;;;504        case 0x53:
000050  bf00              NOP      
                  |L2.82|
;;;505        case 0x54:
000052  bf00              NOP      
                  |L2.84|
;;;506        case 0x55:
000054  bf00              NOP      
                  |L2.86|
;;;507            // 发送的字节数
;;;508            dataLength = 23;
000056  2717              MOVS     r7,#0x17
;;;509    
;;;510            // 发送的总包数
;;;511            dataNumber = 4;
000058  f04f0804          MOV      r8,#4
;;;512            break;
00005c  e000              B        |L2.96|
                  |L2.94|
;;;513        default:
;;;514            break;
00005e  bf00              NOP      
                  |L2.96|
000060  bf00              NOP                            ;491
;;;515        }
;;;516    
;;;517        switch (state)
000062  b125              CBZ      r5,|L2.110|
000064  2d01              CMP      r5,#1
000066  d003              BEQ      |L2.112|
000068  2d02              CMP      r5,#2
00006a  d16c              BNE      |L2.326|
00006c  e022              B        |L2.180|
                  |L2.110|
;;;518        {
;;;519        case STATE_PGN_NULL:
;;;520    
;;;521            break;
00006e  e06b              B        |L2.328|
                  |L2.112|
;;;522    
;;;523        // 发送PGN数据第一步:请求发送
;;;524        case STATE_PGN_SEND_1:
;;;525    
;;;526            CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEC, DestAddress, SourceAddress);
000070  4653              MOV      r3,r10
000072  464a              MOV      r2,r9
000074  21ec              MOVS     r1,#0xec
000076  2006              MOVS     r0,#6
000078  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;527    
;;;528            CAN_PROTOCOL_TxAddData(0x10);
00007c  2010              MOVS     r0,#0x10
00007e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;529    
;;;530            CAN_PROTOCOL_TxAddData(dataLength & 0xFF);
000082  b2f8              UXTB     r0,r7
000084  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;531    
;;;532            CAN_PROTOCOL_TxAddData((dataLength >> 8) & 0xFF);
000088  0a38              LSRS     r0,r7,#8
00008a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;533    
;;;534            CAN_PROTOCOL_TxAddData(dataNumber);
00008e  f00800ff          AND      r0,r8,#0xff
000092  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;535    
;;;536            CAN_PROTOCOL_TxAddData(0xFF);
000096  20ff              MOVS     r0,#0xff
000098  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;537    
;;;538            CAN_PROTOCOL_TxAddData(0);
00009c  2000              MOVS     r0,#0
00009e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;539    
;;;540            CAN_PROTOCOL_TxAddData(PGN);
0000a2  4630              MOV      r0,r6
0000a4  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;541    
;;;542            CAN_PROTOCOL_TxAddData(0);
0000a8  2000              MOVS     r0,#0
0000aa  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;543    
;;;544            CAN_PROTOCOL_TxAddFrame();
0000ae  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
;;;545            break;
0000b2  e049              B        |L2.328|
                  |L2.180|
;;;546    
;;;547        // 发送PGN数据第二步:目的地址回应允许后下发对应的数据
;;;548        case STATE_PGN_SEND_2:
;;;549    
;;;550            for (number = 1; number <= dataNumber; number++)
0000b4  2401              MOVS     r4,#1
0000b6  e043              B        |L2.320|
                  |L2.184|
;;;551            {
;;;552                CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEB, DestAddress, SourceAddress);
0000b8  4653              MOV      r3,r10
0000ba  464a              MOV      r2,r9
0000bc  21eb              MOVS     r1,#0xeb
0000be  2006              MOVS     r0,#6
0000c0  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;553    
;;;554                CAN_PROTOCOL_TxAddData(number);
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;555    
;;;556                CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 0]);
0000ca  1e61              SUBS     r1,r4,#1
0000cc  ebc101c1          RSB      r1,r1,r1,LSL #3
0000d0  4a20              LDR      r2,|L2.340|
0000d2  5c50              LDRB     r0,[r2,r1]
0000d4  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;557    
;;;558                CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 1]);
0000d8  1e61              SUBS     r1,r4,#1
0000da  ebc101c1          RSB      r1,r1,r1,LSL #3
0000de  1c49              ADDS     r1,r1,#1
0000e0  4a1c              LDR      r2,|L2.340|
0000e2  5c50              LDRB     r0,[r2,r1]
0000e4  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;559    
;;;560                CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 2]);
0000e8  1e61              SUBS     r1,r4,#1
0000ea  ebc101c1          RSB      r1,r1,r1,LSL #3
0000ee  1c89              ADDS     r1,r1,#2
0000f0  4a18              LDR      r2,|L2.340|
0000f2  5c50              LDRB     r0,[r2,r1]
0000f4  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;561    
;;;562                CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 3]);
0000f8  1e61              SUBS     r1,r4,#1
0000fa  ebc101c1          RSB      r1,r1,r1,LSL #3
0000fe  1cc9              ADDS     r1,r1,#3
000100  4a14              LDR      r2,|L2.340|
000102  5c50              LDRB     r0,[r2,r1]
000104  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;563    
;;;564                CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 4]);
000108  1e61              SUBS     r1,r4,#1
00010a  ebc101c1          RSB      r1,r1,r1,LSL #3
00010e  1d09              ADDS     r1,r1,#4
000110  4a10              LDR      r2,|L2.340|
000112  5c50              LDRB     r0,[r2,r1]
000114  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;565    
;;;566                CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 5]);
000118  1e61              SUBS     r1,r4,#1
00011a  ebc101c1          RSB      r1,r1,r1,LSL #3
00011e  1d49              ADDS     r1,r1,#5
000120  4a0c              LDR      r2,|L2.340|
000122  5c50              LDRB     r0,[r2,r1]
000124  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;567    
;;;568                CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 6]);
000128  1e61              SUBS     r1,r4,#1
00012a  ebc101c1          RSB      r1,r1,r1,LSL #3
00012e  1d89              ADDS     r1,r1,#6
000130  4a08              LDR      r2,|L2.340|
000132  5c50              LDRB     r0,[r2,r1]
000134  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;569    
;;;570                CAN_PROTOCOL_TxAddFrame();
000138  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
00013c  1c60              ADDS     r0,r4,#1              ;550
00013e  b2c4              UXTB     r4,r0                 ;550
                  |L2.320|
000140  4544              CMP      r4,r8                 ;550
000142  ddb9              BLE      |L2.184|
;;;571            }
;;;572    
;;;573            break;
000144  e000              B        |L2.328|
                  |L2.326|
;;;574        default:
;;;575            break;
000146  bf00              NOP      
                  |L2.328|
000148  bf00              NOP                            ;521
;;;576        }
;;;577    }
00014a  e8bd87f0          POP      {r4-r10,pc}
;;;578    
                          ENDP

00014e  0000              DCW      0x0000
                  |L2.336|
                          DCD      canProtocolCB
                  |L2.340|
                          DCD      canProtocolCB+0xd3e

                          AREA ||i.CAN_PROTOCOL_AddSum||, CODE, READONLY, ALIGN=1

                  CAN_PROTOCOL_AddSum PROC
;;;381    // 对传入的命令帧进行校验，返回校验结果
;;;382    BOOL CAN_PROTOCOL_AddSum(uint8 *buff, uint32 len)
000000  b510              PUSH     {r4,lr}
;;;383    {
000002  4602              MOV      r2,r0
;;;384        uint8 cc = 0;
000004  2400              MOVS     r4,#0
;;;385        uint16 i = 0;
000006  2300              MOVS     r3,#0
;;;386    
;;;387        if (NULL == buff)
000008  b90a              CBNZ     r2,|L3.14|
;;;388        {
;;;389            return FALSE;
00000a  2000              MOVS     r0,#0
                  |L3.12|
;;;390        }
;;;391    
;;;392        // 从命令段长度开始(节点ID已经单独发送了，所以i为3)，到校验码之前的一个字节，依次进行异或运算
;;;393        for (i = CAN_PROTOCOL_TX_CMD_LENGTH_INDEX; i < len; i++)
;;;394        {
;;;395            cc ^= buff[i];
;;;396        }
;;;397    
;;;398        // 添加校验码
;;;399        buff[len] = cc;
;;;400    
;;;401        return TRUE;
;;;402    }
00000c  bd10              POP      {r4,pc}
                  |L3.14|
00000e  2303              MOVS     r3,#3                 ;393
000010  e003              B        |L3.26|
                  |L3.18|
000012  5cd0              LDRB     r0,[r2,r3]            ;395
000014  4044              EORS     r4,r4,r0              ;395
000016  1c58              ADDS     r0,r3,#1              ;393
000018  b283              UXTH     r3,r0                 ;393
                  |L3.26|
00001a  428b              CMP      r3,r1                 ;393
00001c  d3f9              BCC      |L3.18|
00001e  5454              STRB     r4,[r2,r1]            ;399
000020  2001              MOVS     r0,#1                 ;401
000022  e7f3              B        |L3.12|
;;;403    
                          ENDP


                          AREA ||i.CAN_PROTOCOL_CheckSum||, CODE, READONLY, ALIGN=1

                  CAN_PROTOCOL_CheckSum PROC
;;;355    // 对传入的命令帧进行校验，返回校验结果
;;;356    BOOL CAN_PROTOCOL_CheckSum(uint8 *buff, uint32 len)
000000  b510              PUSH     {r4,lr}
;;;357    {
000002  4602              MOV      r2,r0
;;;358        uint8 cc = 0;
000004  2400              MOVS     r4,#0
;;;359        uint16 i = 0;
000006  2300              MOVS     r3,#0
;;;360    
;;;361        if (NULL == buff)
000008  b90a              CBNZ     r2,|L4.14|
;;;362        {
;;;363            return FALSE;
00000a  2000              MOVS     r0,#0
                  |L4.12|
;;;364        }
;;;365    
;;;366        // 从命令段长度开始(节点ID已经在解析前去掉了，所以i为3)，到校验码之前的一个字节，依次进行异或运算
;;;367        for (i = CAN_PROTOCOL_RX_CMD_LENGTH_INDEX; i < (len - CAN_PROTOCOL_CHECK_BYTE - CAN_PROTOCOL_TAIL_BYTE); i++)
;;;368        {
;;;369            cc ^= buff[i];
;;;370        }
;;;371    
;;;372        // 判断计算得到的校验码与命令帧中的校验码是否相同
;;;373        if (buff[len - 2] != cc)
;;;374        {
;;;375            return FALSE;
;;;376        }
;;;377    
;;;378        return TRUE;
;;;379    }
00000c  bd10              POP      {r4,pc}
                  |L4.14|
00000e  2303              MOVS     r3,#3                 ;367
000010  e003              B        |L4.26|
                  |L4.18|
000012  5cd0              LDRB     r0,[r2,r3]            ;369
000014  4044              EORS     r4,r4,r0              ;369
000016  1c58              ADDS     r0,r3,#1              ;367
000018  b283              UXTH     r3,r0                 ;367
                  |L4.26|
00001a  1e88              SUBS     r0,r1,#2              ;367
00001c  4298              CMP      r0,r3                 ;367
00001e  d8f8              BHI      |L4.18|
000020  5c10              LDRB     r0,[r2,r0]            ;373
000022  42a0              CMP      r0,r4                 ;373
000024  d001              BEQ      |L4.42|
000026  2000              MOVS     r0,#0                 ;375
000028  e7f0              B        |L4.12|
                  |L4.42|
00002a  2001              MOVS     r0,#1                 ;378
00002c  e7ee              B        |L4.12|
;;;380    
                          ENDP


                          AREA ||i.CAN_PROTOCOL_CmdFrameProcess||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_CmdFrameProcess PROC
;;;261    // CAN命令帧缓冲区处理
;;;262    void CAN_PROTOCOL_CmdFrameProcess(CAN_PROTOCOL_RX *pCB)
000000  b510              PUSH     {r4,lr}
;;;263    {
000002  4604              MOV      r4,r0
;;;264        if (pCB->head == pCB->end)
000004  f8b40320          LDRH     r0,[r4,#0x320]
000008  f8b41322          LDRH     r1,[r4,#0x322]
00000c  4288              CMP      r0,r1
00000e  d100              BNE      |L5.18|
                  |L5.16|
;;;265        {
;;;266            return;
;;;267        }
;;;268    
;;;269        switch (pCB->cmdQueue[pCB->head].uExtId.ExtId)
;;;270        {
;;;271        case 0x1801FF28: // 仪表的状态
;;;272    
;;;273            // 升级流程是从app跳入boot开始升级
;;;274            if (!canProtocolCB.UPDATA1) // 升级标志位
;;;275            {
;;;276                // 01表示当前在app
;;;277                if (0x01 == (pCB->cmdQueue[pCB->head].Data[0] & 0x01))
;;;278                {
;;;279                    // 如果需要升级就跳入boot
;;;280                    if (!canProtocolCB.UPDATA)
;;;281                    {
;;;282                        canProtocolCB.UPDATA = TRUE;
;;;283                        // 切换到跳入boot步骤
;;;284                        STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_SEND_BOOT_CMD);
;;;285                    }
;;;286                }
;;;287                else // 在boot中，发送第一包升级的数据包，升级开始
;;;288                {
;;;289                    canProtocolCB.UPDATA1 = TRUE;
;;;290                    STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_ARE_YOU_READY);
;;;291                }
;;;292            }
;;;293            break;
;;;294    
;;;295        case 0x18ECF927: // 发送多包数据
;;;296            // 0xEF：一包132Byte数据，4个地址加128个数据。0x13：当前数据包仪表接收完成，
;;;297            if ((0xEF == pCB->cmdQueue[pCB->head].Data[6]) && (0x13 == pCB->cmdQueue[pCB->head].Data[0]))
;;;298            {
;;;299                // 0x01：校验通过，发送下一个数据包
;;;300                if (0x01 == pCB->cmdQueue[pCB->head].Data[4])
;;;301                {
;;;302                    //              CAN_UP_DATA(1);
;;;303                    STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_ARE_YOU_READY);
;;;304                }
;;;305                else
;;;306                {
;;;307                    // 校验不通过
;;;308                    STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_WRITE_ERROR);
;;;309                }
;;;310            }
;;;311            // 升级PGN，容许发送升级数据，0x11：仪表允许工具发送数据
;;;312            else if ((0xEF == pCB->cmdQueue[pCB->head].Data[6]) && (0x11 == pCB->cmdQueue[pCB->head].Data[0]))
;;;313            {
;;;314                // STATE_PGN_SEND_2：工具发送数据
;;;315                STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_SEND_DATA);
;;;316                // CAN_PGN_RequestSendData(STATE_PGN_SEND_2, pCB->cmdQueue[pCB->head].Data[6], 0x27, 0xF9);
;;;317            }
;;;318    
;;;319            break;
;;;320    
;;;321        case 0x18ECF928: // 发送多包数据
;;;322            // 0xEF：一包132Byte数据，4个地址加128个数据。0x13：当前数据包仪表接收完成，
;;;323            if ((0xEF == pCB->cmdQueue[pCB->head].Data[6]) && (0x13 == pCB->cmdQueue[pCB->head].Data[0]))
;;;324            {
;;;325                // 0x01：校验通过，发送下一个数据包
;;;326                if (0x01 == pCB->cmdQueue[pCB->head].Data[4])
;;;327                {
;;;328                    //              CAN_UP_DATA(1);
;;;329                    STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_ARE_YOU_READY);
;;;330                }
;;;331                else
;;;332                {
;;;333                    // 校验不通过
;;;334                    STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_WRITE_ERROR);
;;;335                }
;;;336            }
;;;337            // 升级PGN，容许发送升级数据，0x11：仪表允许工具发送数据
;;;338            else if ((0xEF == pCB->cmdQueue[pCB->head].Data[6]) && (0x11 == pCB->cmdQueue[pCB->head].Data[0]))
;;;339            {
;;;340                // STATE_PGN_SEND_2：工具发送数据
;;;341                STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_SEND_DATA);
;;;342                // CAN_PGN_RequestSendData(STATE_PGN_SEND_2, pCB->cmdQueue[pCB->head].Data[6], 0x27, 0xF9);
;;;343            }
;;;344    
;;;345            break;
;;;346    
;;;347        default:
;;;348            break;
;;;349        }
;;;350    
;;;351        pCB->head++;
;;;352        pCB->head %= CAN_PROTOCOL_RX_QUEUE_SIZE;
;;;353    }
000010  bd10              POP      {r4,pc}
                  |L5.18|
000012  f8b40320          LDRH     r0,[r4,#0x320]        ;269
000016  eb000080          ADD      r0,r0,r0,LSL #2       ;269
00001a  eb040080          ADD      r0,r4,r0,LSL #2       ;269
00001e  6840              LDR      r0,[r0,#4]            ;269
000020  4957              LDR      r1,|L5.384|
000022  4408              ADD      r0,r0,r1              ;269
000024  b128              CBZ      r0,|L5.50|
000026  4957              LDR      r1,|L5.388|
000028  4408              ADD      r0,r0,r1              ;269
00002a  b320              CBZ      r0,|L5.118|
00002c  2801              CMP      r0,#1                 ;269
00002e  d17a              BNE      |L5.294|
000030  e05a              B        |L5.232|
                  |L5.50|
000032  4855              LDR      r0,|L5.392|
000034  f8900f17          LDRB     r0,[r0,#0xf17]        ;274  ; canProtocolCB
000038  b9e0              CBNZ     r0,|L5.116|
00003a  f8b40320          LDRH     r0,[r4,#0x320]        ;277
00003e  eb000080          ADD      r0,r0,r0,LSL #2       ;277
000042  eb040080          ADD      r0,r4,r0,LSL #2       ;277
000046  7ac0              LDRB     r0,[r0,#0xb]          ;277
000048  f0000001          AND      r0,r0,#1              ;277
00004c  b158              CBZ      r0,|L5.102|
00004e  484e              LDR      r0,|L5.392|
000050  f8900f16          LDRB     r0,[r0,#0xf16]        ;280  ; canProtocolCB
000054  b970              CBNZ     r0,|L5.116|
000056  2001              MOVS     r0,#1                 ;282
000058  494b              LDR      r1,|L5.392|
00005a  f8810f16          STRB     r0,[r1,#0xf16]        ;282
00005e  2006              MOVS     r0,#6                 ;284
000060  f7fffffe          BL       STATE_SwitchStep
000064  e006              B        |L5.116|
                  |L5.102|
000066  2001              MOVS     r0,#1                 ;289
000068  4947              LDR      r1,|L5.392|
00006a  f8810f17          STRB     r0,[r1,#0xf17]        ;289
00006e  2007              MOVS     r0,#7                 ;290
000070  f7fffffe          BL       STATE_SwitchStep
                  |L5.116|
000074  e073              B        |L5.350|
                  |L5.118|
000076  f8b40320          LDRH     r0,[r4,#0x320]        ;297
00007a  eb000080          ADD      r0,r0,r0,LSL #2       ;297
00007e  eb040080          ADD      r0,r4,r0,LSL #2       ;297
000082  7c40              LDRB     r0,[r0,#0x11]         ;297
000084  28ef              CMP      r0,#0xef              ;297
000086  d119              BNE      |L5.188|
000088  f8b40320          LDRH     r0,[r4,#0x320]        ;297
00008c  eb000080          ADD      r0,r0,r0,LSL #2       ;297
000090  eb040080          ADD      r0,r4,r0,LSL #2       ;297
000094  7ac0              LDRB     r0,[r0,#0xb]          ;297
000096  2813              CMP      r0,#0x13              ;297
000098  d110              BNE      |L5.188|
00009a  f8b40320          LDRH     r0,[r4,#0x320]        ;300
00009e  eb000080          ADD      r0,r0,r0,LSL #2       ;300
0000a2  eb040080          ADD      r0,r4,r0,LSL #2       ;300
0000a6  7bc0              LDRB     r0,[r0,#0xf]          ;300
0000a8  2801              CMP      r0,#1                 ;300
0000aa  d103              BNE      |L5.180|
0000ac  2007              MOVS     r0,#7                 ;303
0000ae  f7fffffe          BL       STATE_SwitchStep
0000b2  e018              B        |L5.230|
                  |L5.180|
0000b4  200a              MOVS     r0,#0xa               ;308
0000b6  f7fffffe          BL       STATE_SwitchStep
0000ba  e014              B        |L5.230|
                  |L5.188|
0000bc  f8b40320          LDRH     r0,[r4,#0x320]        ;312
0000c0  eb000080          ADD      r0,r0,r0,LSL #2       ;312
0000c4  eb040080          ADD      r0,r4,r0,LSL #2       ;312
0000c8  7c40              LDRB     r0,[r0,#0x11]         ;312
0000ca  28ef              CMP      r0,#0xef              ;312
0000cc  d10b              BNE      |L5.230|
0000ce  f8b40320          LDRH     r0,[r4,#0x320]        ;312
0000d2  eb000080          ADD      r0,r0,r0,LSL #2       ;312
0000d6  eb040080          ADD      r0,r4,r0,LSL #2       ;312
0000da  7ac0              LDRB     r0,[r0,#0xb]          ;312
0000dc  2811              CMP      r0,#0x11              ;312
0000de  d102              BNE      |L5.230|
0000e0  2009              MOVS     r0,#9                 ;315
0000e2  f7fffffe          BL       STATE_SwitchStep
                  |L5.230|
0000e6  e03a              B        |L5.350|
                  |L5.232|
0000e8  f8b40320          LDRH     r0,[r4,#0x320]        ;323
0000ec  eb000080          ADD      r0,r0,r0,LSL #2       ;323
0000f0  eb040080          ADD      r0,r4,r0,LSL #2       ;323
0000f4  7c40              LDRB     r0,[r0,#0x11]         ;323
0000f6  28ef              CMP      r0,#0xef              ;323
0000f8  d11a              BNE      |L5.304|
0000fa  f8b40320          LDRH     r0,[r4,#0x320]        ;323
0000fe  eb000080          ADD      r0,r0,r0,LSL #2       ;323
000102  eb040080          ADD      r0,r4,r0,LSL #2       ;323
000106  7ac0              LDRB     r0,[r0,#0xb]          ;323
000108  2813              CMP      r0,#0x13              ;323
00010a  d111              BNE      |L5.304|
00010c  f8b40320          LDRH     r0,[r4,#0x320]        ;326
000110  eb000080          ADD      r0,r0,r0,LSL #2       ;326
000114  eb040080          ADD      r0,r4,r0,LSL #2       ;326
000118  7bc0              LDRB     r0,[r0,#0xf]          ;326
00011a  2801              CMP      r0,#1                 ;326
00011c  d104              BNE      |L5.296|
00011e  2007              MOVS     r0,#7                 ;329
000120  f7fffffe          BL       STATE_SwitchStep
000124  e019              B        |L5.346|
                  |L5.294|
000126  e019              B        |L5.348|
                  |L5.296|
000128  200a              MOVS     r0,#0xa               ;334
00012a  f7fffffe          BL       STATE_SwitchStep
00012e  e014              B        |L5.346|
                  |L5.304|
000130  f8b40320          LDRH     r0,[r4,#0x320]        ;338
000134  eb000080          ADD      r0,r0,r0,LSL #2       ;338
000138  eb040080          ADD      r0,r4,r0,LSL #2       ;338
00013c  7c40              LDRB     r0,[r0,#0x11]         ;338
00013e  28ef              CMP      r0,#0xef              ;338
000140  d10b              BNE      |L5.346|
000142  f8b40320          LDRH     r0,[r4,#0x320]        ;338
000146  eb000080          ADD      r0,r0,r0,LSL #2       ;338
00014a  eb040080          ADD      r0,r4,r0,LSL #2       ;338
00014e  7ac0              LDRB     r0,[r0,#0xb]          ;338
000150  2811              CMP      r0,#0x11              ;338
000152  d102              BNE      |L5.346|
000154  2009              MOVS     r0,#9                 ;341
000156  f7fffffe          BL       STATE_SwitchStep
                  |L5.346|
00015a  e000              B        |L5.350|
                  |L5.348|
00015c  bf00              NOP                            ;348
                  |L5.350|
00015e  bf00              NOP                            ;293
000160  f8b40320          LDRH     r0,[r4,#0x320]        ;351
000164  1c40              ADDS     r0,r0,#1              ;351
000166  f8a40320          STRH     r0,[r4,#0x320]        ;351
00016a  f8b40320          LDRH     r0,[r4,#0x320]        ;352
00016e  2128              MOVS     r1,#0x28              ;352
000170  fb90f2f1          SDIV     r2,r0,r1              ;352
000174  fb010012          MLS      r0,r1,r2,r0           ;352
000178  f8a40320          STRH     r0,[r4,#0x320]        ;352
00017c  bf00              NOP      
00017e  e747              B        |L5.16|
;;;354    
                          ENDP

                  |L5.384|
                          DCD      0xe7fe00d8
                  |L5.388|
                          DCD      0xff150601
                  |L5.392|
                          DCD      canProtocolCB

                          AREA ||i.CAN_PROTOCOL_ConfirmTempCmdFrameBuff||, CODE, READONLY, ALIGN=1

                  CAN_PROTOCOL_ConfirmTempCmdFrameBuff PROC
;;;404    // 将临时缓冲区添加到命令帧缓冲区中，其本质操作是承认临时缓冲区数据有效
;;;405    BOOL CAN_PROTOCOL_ConfirmTempCmdFrameBuff(CAN_PROTOCOL_CB *pCB, uint8 sourceSelect)
000000  b530              PUSH     {r4,r5,lr}
;;;406    {
000002  4602              MOV      r2,r0
;;;407        CAN_PROTOCOL_CMD_FRAME *pCmdFrame = NULL;
000004  2300              MOVS     r3,#0
;;;408    
;;;409        // 参数合法性检验
;;;410        if (NULL == pCB)
000006  b90a              CBNZ     r2,|L6.12|
;;;411        {
;;;412            return FALSE;
000008  2000              MOVS     r0,#0
                  |L6.10|
;;;413        }
;;;414    
;;;415        // 临时缓冲区为空，不予添加
;;;416        //  pCmdFrame = &pCB->rx.rxEachNode[sourceSelect].cmdQueue[pCB->rx.rxEachNode[sourceSelect].end];
;;;417    
;;;418        if (0 == pCmdFrame->length)
;;;419        {
;;;420            return FALSE;
;;;421        }
;;;422    
;;;423        // 添加
;;;424        pCB->rx.rxEachNode[sourceSelect].end++;
;;;425        pCB->rx.rxEachNode[sourceSelect].end %= CAN_PROTOCOL_RX_QUEUE_SIZE;
;;;426        // 该行的作用是将新的添加位置有效数据个数清零，以便将这个位置当做临时帧缓冲区
;;;427        //  pCB->rx.rxEachNode[sourceSelect].cmdQueue[pCB->rx.rxEachNode[sourceSelect].end].length = 0;
;;;428    
;;;429        return TRUE;
;;;430    }
00000a  bd30              POP      {r4,r5,pc}
                  |L6.12|
00000c  8998              LDRH     r0,[r3,#0xc]          ;418
00000e  b908              CBNZ     r0,|L6.20|
000010  2000              MOVS     r0,#0                 ;420
000012  e7fa              B        |L6.10|
                  |L6.20|
000014  20c9              MOVS     r0,#0xc9              ;424
000016  4348              MULS     r0,r1,r0              ;424
000018  f50274ea          ADD      r4,r2,#0x1d4          ;424
00001c  eb040080          ADD      r0,r4,r0,LSL #2       ;424
000020  f8b00322          LDRH     r0,[r0,#0x322]        ;424
000024  1c40              ADDS     r0,r0,#1              ;424
000026  b285              UXTH     r5,r0                 ;424
000028  20c9              MOVS     r0,#0xc9              ;424
00002a  4348              MULS     r0,r1,r0              ;424
00002c  eb040080          ADD      r0,r4,r0,LSL #2       ;424
000030  f8a05322          STRH     r5,[r0,#0x322]        ;424
000034  20c9              MOVS     r0,#0xc9              ;425
000036  4348              MULS     r0,r1,r0              ;425
000038  eb040080          ADD      r0,r4,r0,LSL #2       ;425
00003c  f8b00322          LDRH     r0,[r0,#0x322]        ;425
000040  2428              MOVS     r4,#0x28              ;425
000042  fb90f5f4          SDIV     r5,r0,r4              ;425
000046  fb040015          MLS      r0,r4,r5,r0           ;425
00004a  b285              UXTH     r5,r0                 ;425
00004c  20c9              MOVS     r0,#0xc9              ;425
00004e  4348              MULS     r0,r1,r0              ;425
000050  f50274ea          ADD      r4,r2,#0x1d4          ;425
000054  eb040080          ADD      r0,r4,r0,LSL #2       ;425
000058  f8a05322          STRH     r5,[r0,#0x322]        ;425
00005c  2001              MOVS     r0,#1                 ;429
00005e  e7d4              B        |L6.10|
;;;431    
                          ENDP


                          AREA ||i.CAN_PROTOCOL_DataStructInit||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_DataStructInit PROC
;;;195    // 数据结构初始化
;;;196    void CAN_PROTOCOL_DataStructInit(CAN_PROTOCOL_CB *pCB)
000000  b570              PUSH     {r4-r6,lr}
;;;197    {
000002  4605              MOV      r5,r0
;;;198        uint16 i;
;;;199        uint16 j;
;;;200    
;;;201        // 参数合法性检验
;;;202        if (NULL == pCB)
000004  b905              CBNZ     r5,|L7.8|
                  |L7.6|
;;;203        {
;;;204            return;
;;;205        }
;;;206    
;;;207        pCB->tx.txBusy = FALSE;
;;;208        pCB->tx.index = 0;
;;;209        pCB->tx.head = 0;
;;;210        pCB->tx.end = 0;
;;;211        for (i = 0; i < CAN_PROTOCOL_TX_QUEUE_SIZE; i++)
;;;212        {
;;;213            pCB->tx.cmdQueue[i].length = 0;
;;;214        }
;;;215    
;;;216        for (i = 0; i < CAN_PROTOCOL_DEVICE_SOURCE_ID_MAX; i++)
;;;217        {
;;;218            pCB->rxFIFO.rxFIFOEachNode[i].head = 0;
;;;219            pCB->rxFIFO.rxFIFOEachNode[i].end = 0;
;;;220            pCB->rxFIFO.rxFIFOEachNode[i].currentProcessIndex = 0;
;;;221        }
;;;222    
;;;223        for (i = 0; i < CAN_PROTOCOL_DEVICE_SOURCE_ID_MAX; i++)
;;;224        {
;;;225            for (j = 0; j < CAN_PROTOCOL_RX_QUEUE_SIZE; j++)
;;;226            {
;;;227                //      pCB->rx.rxEachNode[i].cmdQueue[j].length = 0;
;;;228            }
;;;229            pCB->rx.rxEachNode[i].head = 0;
;;;230            pCB->rx.rxEachNode[i].end = 0;
;;;231        }
;;;232    
;;;233        memset(canProtocolCB.sendBuff, 0xFF, 128);
;;;234        canProtocolCB.tripData.distance = 0;
;;;235        canProtocolCB.tripData.times = 0;
;;;236        canProtocolCB.hmiState = 0;
;;;237        canProtocolCB.UPDATA1 = TRUE;
;;;238        canProtocolCB.UPDATA = TRUE;
;;;239    }
000006  bd70              POP      {r4-r6,pc}
                  |L7.8|
000008  2100              MOVS     r1,#0                 ;207
00000a  f8851d26          STRB     r1,[r5,#0xd26]        ;207
00000e  f8a51d24          STRH     r1,[r5,#0xd24]        ;208
000012  f8a51d20          STRH     r1,[r5,#0xd20]        ;209
000016  f8a51d22          STRH     r1,[r5,#0xd22]        ;210
00001a  2400              MOVS     r4,#0                 ;211
00001c  e007              B        |L7.46|
                  |L7.30|
00001e  2100              MOVS     r1,#0                 ;213
000020  f5056034          ADD      r0,r5,#0xb40          ;213
000024  eb001004          ADD      r0,r0,r4,LSL #4       ;213
000028  8181              STRH     r1,[r0,#0xc]          ;213
00002a  1c60              ADDS     r0,r4,#1              ;211
00002c  b284              UXTH     r4,r0                 ;211
                  |L7.46|
00002e  2c1e              CMP      r4,#0x1e              ;211
000030  dbf5              BLT      |L7.30|
000032  2400              MOVS     r4,#0                 ;216
000034  e01a              B        |L7.108|
                  |L7.54|
000036  2000              MOVS     r0,#0                 ;218
000038  ebc401c4          RSB      r1,r4,r4,LSL #3       ;218
00003c  eb011144          ADD      r1,r1,r4,LSL #5       ;218
000040  eb050181          ADD      r1,r5,r1,LSL #2       ;218
000044  f8a10096          STRH     r0,[r1,#0x96]         ;218
000048  ebc401c4          RSB      r1,r4,r4,LSL #3       ;219
00004c  eb011144          ADD      r1,r1,r4,LSL #5       ;219
000050  eb050181          ADD      r1,r5,r1,LSL #2       ;219
000054  f8a10098          STRH     r0,[r1,#0x98]         ;219
000058  ebc401c4          RSB      r1,r4,r4,LSL #3       ;220
00005c  eb011144          ADD      r1,r1,r4,LSL #5       ;220
000060  eb050181          ADD      r1,r5,r1,LSL #2       ;220
000064  f8a1009a          STRH     r0,[r1,#0x9a]         ;220
000068  1c60              ADDS     r0,r4,#1              ;216
00006a  b284              UXTH     r4,r0                 ;216
                  |L7.108|
00006c  2c03              CMP      r4,#3                 ;216
00006e  dbe2              BLT      |L7.54|
000070  2400              MOVS     r4,#0                 ;223
000072  e016              B        |L7.162|
                  |L7.116|
000074  2600              MOVS     r6,#0                 ;225
000076  e001              B        |L7.124|
                  |L7.120|
000078  1c70              ADDS     r0,r6,#1              ;225
00007a  b286              UXTH     r6,r0                 ;225
                  |L7.124|
00007c  2e28              CMP      r6,#0x28              ;225
00007e  dbfb              BLT      |L7.120|
000080  2200              MOVS     r2,#0                 ;229
000082  20c9              MOVS     r0,#0xc9              ;229
000084  4360              MULS     r0,r4,r0              ;229
000086  f50571ea          ADD      r1,r5,#0x1d4          ;229
00008a  eb010080          ADD      r0,r1,r0,LSL #2       ;229
00008e  f8a02320          STRH     r2,[r0,#0x320]        ;229
000092  20c9              MOVS     r0,#0xc9              ;230
000094  4360              MULS     r0,r4,r0              ;230
000096  eb010080          ADD      r0,r1,r0,LSL #2       ;230
00009a  f8a02322          STRH     r2,[r0,#0x322]        ;230
00009e  1c60              ADDS     r0,r4,#1              ;223
0000a0  b284              UXTH     r4,r0                 ;223
                  |L7.162|
0000a2  2c03              CMP      r4,#3                 ;223
0000a4  dbe6              BLT      |L7.116|
0000a6  22ff              MOVS     r2,#0xff              ;233
0000a8  2180              MOVS     r1,#0x80              ;233
0000aa  480b              LDR      r0,|L7.216|
0000ac  f7fffffe          BL       __aeabi_memset
0000b0  2000              MOVS     r0,#0                 ;234
0000b2  490a              LDR      r1,|L7.220|
0000b4  f8c10d34          STR      r0,[r1,#0xd34]        ;234  ; canProtocolCB
0000b8  2100              MOVS     r1,#0                 ;235
0000ba  4808              LDR      r0,|L7.220|
0000bc  f8c01d38          STR      r1,[r0,#0xd38]        ;235
0000c0  2000              MOVS     r0,#0                 ;236
0000c2  4906              LDR      r1,|L7.220|
0000c4  f8810e1a          STRB     r0,[r1,#0xe1a]        ;236
0000c8  2001              MOVS     r0,#1                 ;237
0000ca  f8810f17          STRB     r0,[r1,#0xf17]        ;237
0000ce  f8810f16          STRB     r0,[r1,#0xf16]        ;238
0000d2  bf00              NOP      
0000d4  e797              B        |L7.6|
;;;240    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L7.216|
                          DCD      canProtocolCB+0xd3e
                  |L7.220|
                          DCD      canProtocolCB

                          AREA ||i.CAN_PROTOCOL_Init||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_Init PROC
;;;96     // CAN协议层初始化
;;;97     void CAN_PROTOCOL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;98     {
;;;99         // 协议层数据结构初始化
;;;100        CAN_PROTOCOL_DataStructInit(&canProtocolCB);
000002  4806              LDR      r0,|L8.28|
000004  f7fffffe          BL       CAN_PROTOCOL_DataStructInit
;;;101    
;;;102        // 向驱动层注册数据接收接口
;;;103        //  CAN_DRIVE_RegisterDataSendService(CAN_PROTOCOL_MacProcess);
;;;104    
;;;105        // 向驱动层注册数据发送接口
;;;106        CAN_PROTOCOL_RegisterDataSendService(CAN_DRIVE_AddTxArray);
000008  4805              LDR      r0,|L8.32|
00000a  f7fffffe          BL       CAN_PROTOCOL_RegisterDataSendService
;;;107    
;;;108        // 发送完毕，清空buff
;;;109        memset(canProtocolCB.sendBuff, 0xFF, 200);
00000e  22ff              MOVS     r2,#0xff
000010  21c8              MOVS     r1,#0xc8
000012  4804              LDR      r0,|L8.36|
000014  f7fffffe          BL       __aeabi_memset
;;;110        //  TIMER_AddTask(TIMER_ID_CAN_TEST,
;;;111        //                  100,
;;;112        //                  CAN_UP_RESET,
;;;113        //                  1,
;;;114        //                  TIMER_LOOP_FOREVER,
;;;115        //                  ACTION_MODE_ADD_TO_QUEUE);
;;;116        //  CAN_UP_RESET(1);
;;;117    }
000018  bd10              POP      {r4,pc}
;;;118    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      canProtocolCB
                  |L8.32|
                          DCD      CAN_DRIVE_AddTxArray
                  |L8.36|
                          DCD      canProtocolCB+0xd3e

                          AREA ||i.CAN_PROTOCOL_MacProcess||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_MacProcess PROC
;;;241    // CAN 报文接收处理函数(注意根据具体模块修改)
;;;242    void CAN_PROTOCOL_MacProcess(uint32 standarID, uint8 *pData, uint8 length)
000000  b570              PUSH     {r4-r6,lr}
;;;243    {
000002  4603              MOV      r3,r0
;;;244        uint8 i = 0;
000004  2000              MOVS     r0,#0
;;;245    
;;;246        canProtocolRX.cmdQueue[canProtocolRX.end].uExtId.ExtId = standarID;
000006  4c1b              LDR      r4,|L9.116|
000008  f8b44322          LDRH     r4,[r4,#0x322]  ; canProtocolRX
00000c  eb040484          ADD      r4,r4,r4,LSL #2
000010  4d18              LDR      r5,|L9.116|
000012  eb050484          ADD      r4,r5,r4,LSL #2
000016  6063              STR      r3,[r4,#4]
;;;247        for (i = 0; i < length; i++)
000018  bf00              NOP      
00001a  e00d              B        |L9.56|
                  |L9.28|
;;;248        {
;;;249            canProtocolRX.cmdQueue[canProtocolRX.end].Data[i] = *pData++;
00001c  f8115b01          LDRB     r5,[r1],#1
000020  4c14              LDR      r4,|L9.116|
000022  f8b44322          LDRH     r4,[r4,#0x322]  ; canProtocolRX
000026  eb040484          ADD      r4,r4,r4,LSL #2
00002a  4e12              LDR      r6,|L9.116|
00002c  eb060484          ADD      r4,r6,r4,LSL #2
000030  340b              ADDS     r4,r4,#0xb
000032  5425              STRB     r5,[r4,r0]
000034  1c44              ADDS     r4,r0,#1              ;247
000036  b2e0              UXTB     r0,r4                 ;247
                  |L9.56|
000038  4290              CMP      r0,r2                 ;247
00003a  dbef              BLT      |L9.28|
;;;250        }
;;;251        canProtocolRX.cmdQueue[canProtocolRX.end].DLC = length;
00003c  4c0d              LDR      r4,|L9.116|
00003e  f8b44322          LDRH     r4,[r4,#0x322]  ; canProtocolRX
000042  eb040484          ADD      r4,r4,r4,LSL #2
000046  4d0b              LDR      r5,|L9.116|
000048  eb050484          ADD      r4,r5,r4,LSL #2
00004c  72a2              STRB     r2,[r4,#0xa]
;;;252        canProtocolRX.end++;
00004e  462c              MOV      r4,r5
000050  f8b44322          LDRH     r4,[r4,#0x322]  ; canProtocolRX
000054  1c64              ADDS     r4,r4,#1
000056  f8a54322          STRH     r4,[r5,#0x322]
;;;253        canProtocolRX.end %= CAN_PROTOCOL_RX_QUEUE_SIZE;
00005a  462c              MOV      r4,r5
00005c  f8b44322          LDRH     r4,[r4,#0x322]  ; canProtocolRX
000060  2528              MOVS     r5,#0x28
000062  fb94f6f5          SDIV     r6,r4,r5
000066  fb054416          MLS      r4,r5,r6,r4
00006a  4d02              LDR      r5,|L9.116|
00006c  f8a54322          STRH     r4,[r5,#0x322]
;;;254    }
000070  bd70              POP      {r4-r6,pc}
;;;255    
                          ENDP

000072  0000              DCW      0x0000
                  |L9.116|
                          DCD      canProtocolRX

                          AREA ||i.CAN_PROTOCOL_Process_GB||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_Process_GB PROC
;;;182    // CAN协议层过程处理
;;;183    void CAN_PROTOCOL_Process_GB(void)
000000  b510              PUSH     {r4,lr}
;;;184    {
;;;185        // CAN接收FIFO缓冲区处理
;;;186        // CAN_PROTOCOL_RxFIFOProcess(&canProtocolCB);
;;;187    
;;;188        // CAN接收命令缓冲区处理
;;;189        CAN_PROTOCOL_CmdFrameProcess(&canProtocolRX);
000002  4803              LDR      r0,|L10.16|
000004  f7fffffe          BL       CAN_PROTOCOL_CmdFrameProcess
;;;190    
;;;191        // CAN协议层发送处理过程
;;;192        CAN_PROTOCOL_TxStateProcess();
000008  f7fffffe          BL       CAN_PROTOCOL_TxStateProcess
;;;193    }
00000c  bd10              POP      {r4,pc}
;;;194    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      canProtocolRX

                          AREA ||i.CAN_PROTOCOL_RegisterDataSendService||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_RegisterDataSendService PROC
;;;465    // CAN协议层向驱动层注册数据发送接口
;;;466    void CAN_PROTOCOL_RegisterDataSendService(BOOL (*service)(uint32 id, uint8 *pData, uint8 length))
000000  4901              LDR      r1,|L11.8|
;;;467    {
;;;468        canProtocolCB.sendDataThrowService = service;
000002  f8c10d28          STR      r0,[r1,#0xd28]  ; canProtocolCB
;;;469    }
000006  4770              BX       lr
;;;470    
                          ENDP

                  |L11.8|
                          DCD      canProtocolCB

                          AREA ||i.CAN_PROTOCOL_RxFIFOProcess||, CODE, READONLY, ALIGN=1

                  CAN_PROTOCOL_RxFIFOProcess PROC
;;;256    // 一级报文接收缓冲区处理，从一级接收缓冲区中取出一个字节添加到命令帧缓冲区中
;;;257    void CAN_PROTOCOL_RxFIFOProcess(CAN_PROTOCOL_CB *pCB)
000000  4770              BX       lr
;;;258    {
;;;259    }
;;;260    
                          ENDP


                          AREA ||i.CAN_PROTOCOL_TxAddData||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_TxAddData PROC
;;;140    // 向发送命令帧队列中添加数据
;;;141    void CAN_PROTOCOL_TxAddData(uint8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;142    {
000002  4601              MOV      r1,r0
;;;143        uint16 head = canProtocolCB.tx.head;
000004  4c0f              LDR      r4,|L13.68|
000006  f8b42d20          LDRH     r2,[r4,#0xd20]
;;;144        uint16 end = canProtocolCB.tx.end;
00000a  f8b43d22          LDRH     r3,[r4,#0xd22]
;;;145        CAN_PROTOCOL_CMD_FRAME *pCmdFrame = &canProtocolCB.tx.cmdQueue[canProtocolCB.tx.end];
00000e  f8b45d22          LDRH     r5,[r4,#0xd22]
000012  f5046434          ADD      r4,r4,#0xb40
000016  eb041005          ADD      r0,r4,r5,LSL #4
;;;146    
;;;147        // 发送缓冲区已满，不予接收
;;;148        if ((end + 1) % CAN_PROTOCOL_TX_QUEUE_SIZE == head)
00001a  1c5c              ADDS     r4,r3,#1
00001c  251e              MOVS     r5,#0x1e
00001e  fb94f6f5          SDIV     r6,r4,r5
000022  fb054416          MLS      r4,r5,r6,r4
000026  4294              CMP      r4,r2
000028  d100              BNE      |L13.44|
                  |L13.42|
;;;149        {
;;;150            return;
;;;151        }
;;;152    
;;;153        // 队尾命令帧已满，退出
;;;154        if (pCmdFrame->length >= CAN_PROTOCOL_CMD_FRAME_LENGTH_MAX)
;;;155        {
;;;156            return;
;;;157        }
;;;158    
;;;159        // 数据添加到帧末尾，并更新帧长度
;;;160        pCmdFrame->buff[pCmdFrame->length] = data;
;;;161        pCmdFrame->length++;
;;;162    }
00002a  bd70              POP      {r4-r6,pc}
                  |L13.44|
00002c  8984              LDRH     r4,[r0,#0xc]          ;154
00002e  2c08              CMP      r4,#8                 ;154
000030  db00              BLT      |L13.52|
000032  e7fa              B        |L13.42|
                  |L13.52|
000034  8985              LDRH     r5,[r0,#0xc]          ;160
000036  1d04              ADDS     r4,r0,#4              ;160
000038  5561              STRB     r1,[r4,r5]            ;160
00003a  8984              LDRH     r4,[r0,#0xc]          ;161
00003c  1c64              ADDS     r4,r4,#1              ;161
00003e  8184              STRH     r4,[r0,#0xc]          ;161
000040  bf00              NOP      
000042  e7f2              B        |L13.42|
;;;163    
                          ENDP

                  |L13.68|
                          DCD      canProtocolCB

                          AREA ||i.CAN_PROTOCOL_TxAddFrame||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_TxAddFrame PROC
;;;164    // 发送命令帧处理,自动扶正帧长度以及检验码
;;;165    void CAN_PROTOCOL_TxAddFrame(void)
000000  b510              PUSH     {r4,lr}
;;;166    {
;;;167        uint16 head = canProtocolCB.tx.head;
000002  4a15              LDR      r2,|L14.88|
000004  f8b20d20          LDRH     r0,[r2,#0xd20]
;;;168        uint16 end = canProtocolCB.tx.end;
000008  f8b21d22          LDRH     r1,[r2,#0xd22]
;;;169    
;;;170        // 发送缓冲区已满，不予接收
;;;171        if ((end + 1) % CAN_PROTOCOL_TX_QUEUE_SIZE == head)
00000c  1c4a              ADDS     r2,r1,#1
00000e  231e              MOVS     r3,#0x1e
000010  fb92f4f3          SDIV     r4,r2,r3
000014  fb032214          MLS      r2,r3,r4,r2
000018  4282              CMP      r2,r0
00001a  d100              BNE      |L14.30|
                  |L14.28|
;;;172        {
;;;173            return;
;;;174        }
;;;175    
;;;176        // 发送环形队列更新位置
;;;177        canProtocolCB.tx.end++;
;;;178        canProtocolCB.tx.end %= CAN_PROTOCOL_TX_QUEUE_SIZE;
;;;179        canProtocolCB.tx.cmdQueue[canProtocolCB.tx.end].length = 0; // 2015.12.2修改
;;;180    }
00001c  bd10              POP      {r4,pc}
                  |L14.30|
00001e  4a0e              LDR      r2,|L14.88|
000020  f8b22d22          LDRH     r2,[r2,#0xd22]        ;177
000024  1c52              ADDS     r2,r2,#1              ;177
000026  b293              UXTH     r3,r2                 ;177
000028  4a0b              LDR      r2,|L14.88|
00002a  f8a23d22          STRH     r3,[r2,#0xd22]        ;177
00002e  f8b22d22          LDRH     r2,[r2,#0xd22]        ;178
000032  231e              MOVS     r3,#0x1e              ;178
000034  fb92f4f3          SDIV     r4,r2,r3              ;178
000038  fb032214          MLS      r2,r3,r4,r2           ;178
00003c  b293              UXTH     r3,r2                 ;178
00003e  4a06              LDR      r2,|L14.88|
000040  f8a23d22          STRH     r3,[r2,#0xd22]        ;178
000044  2300              MOVS     r3,#0                 ;179
000046  f8b24d22          LDRH     r4,[r2,#0xd22]        ;179
00004a  f5026234          ADD      r2,r2,#0xb40          ;179
00004e  eb021204          ADD      r2,r2,r4,LSL #4       ;179
000052  8193              STRH     r3,[r2,#0xc]          ;179
000054  bf00              NOP      
000056  e7e1              B        |L14.28|
;;;181    
                          ENDP

                  |L14.88|
                          DCD      canProtocolCB

                          AREA ||i.CAN_PROTOCOL_TxAddNewFrame||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_TxAddNewFrame PROC
;;;119    // 向发送命令帧队列中添加帧源，帧目的
;;;120    void CAN_PROTOCOL_TxAddNewFrame(uint8 priority, uint16 pgn, uint8 destinationID, uint8 sourceID)
000000  b570              PUSH     {r4-r6,lr}
;;;121    {
000002  4604              MOV      r4,r0
;;;122        CAN_PROTOCOL_CMD_FRAME *pCmdFrame = &canProtocolCB.tx.cmdQueue[canProtocolCB.tx.end];
000004  4d10              LDR      r5,|L15.72|
000006  f8b56d22          LDRH     r6,[r5,#0xd22]
00000a  f5056534          ADD      r5,r5,#0xb40
00000e  eb051006          ADD      r0,r5,r6,LSL #4
;;;123    
;;;124        // 帧源和帧目的超出范围
;;;125        if ((sourceID > 0xFF) || (destinationID > 0xFF))
000012  2bff              CMP      r3,#0xff
000014  dc01              BGT      |L15.26|
000016  2aff              CMP      r2,#0xff
000018  dd00              BLE      |L15.28|
                  |L15.26|
;;;126        {
;;;127            return;
;;;128        }
;;;129    
;;;130        // 数据添加到帧末尾，并更新帧长度
;;;131        // pCmdFrame->deviceID = ((sourceID << 4) | destinationID);
;;;132    
;;;133        pCmdFrame->EXTID.sDet.nHeard = 0;                  // 3bit:000
;;;134        pCmdFrame->EXTID.sDet.priority = priority;         // 3bit:优先级
;;;135        pCmdFrame->EXTID.sDet.pgn = pgn;                   // 10bit:pgn
;;;136        pCmdFrame->EXTID.sDet.destination = destinationID; // 8bit:目的地址
;;;137        pCmdFrame->EXTID.sDet.source = sourceID;           // 8bit:源地址
;;;138    }
00001a  bd70              POP      {r4-r6,pc}
                  |L15.28|
00001c  6805              LDR      r5,[r0,#0]            ;133
00001e  f0254560          BIC      r5,r5,#0xe0000000     ;133
000022  6005              STR      r5,[r0,#0]            ;133
000024  6805              LDR      r5,[r0,#0]            ;134
000026  f364659c          BFI      r5,r4,#26,#3          ;134
00002a  6005              STR      r5,[r0,#0]            ;134
00002c  6805              LDR      r5,[r0,#0]            ;135
00002e  f3614519          BFI      r5,r1,#16,#10         ;135
000032  6005              STR      r5,[r0,#0]            ;135
000034  6805              LDR      r5,[r0,#0]            ;136
000036  f362250f          BFI      r5,r2,#8,#8           ;136
00003a  6005              STR      r5,[r0,#0]            ;136
00003c  6805              LDR      r5,[r0,#0]            ;137
00003e  f3630507          BFI      r5,r3,#0,#8           ;137
000042  6005              STR      r5,[r0,#0]            ;137
000044  bf00              NOP      
000046  e7e8              B        |L15.26|
;;;139    
                          ENDP

                  |L15.72|
                          DCD      canProtocolCB

                          AREA ||i.CAN_PROTOCOL_TxStateProcess||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_TxStateProcess PROC
;;;432    // 协议层发送处理过程
;;;433    void CAN_PROTOCOL_TxStateProcess(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;434    {
;;;435        uint16 head = canProtocolCB.tx.head;
000004  481f              LDR      r0,|L16.132|
000006  f8b04d20          LDRH     r4,[r0,#0xd20]
;;;436        uint16 end = canProtocolCB.tx.end;
00000a  f8b05d22          LDRH     r5,[r0,#0xd22]
;;;437        uint16 length = canProtocolCB.tx.cmdQueue[head].length;
00000e  f5006034          ADD      r0,r0,#0xb40
000012  eb001004          ADD      r0,r0,r4,LSL #4
000016  8986              LDRH     r6,[r0,#0xc]
;;;438        uint8 *pCmd = canProtocolCB.tx.cmdQueue[head].buff;
000018  481b              LDR      r0,|L16.136|
00001a  eb001004          ADD      r0,r0,r4,LSL #4
00001e  1d07              ADDS     r7,r0,#4
;;;439        uint32 localDeviceID = canProtocolCB.tx.cmdQueue[head].EXTID.deviceID;
000020  4819              LDR      r0,|L16.136|
000022  eb001004          ADD      r0,r0,r4,LSL #4
000026  f8d08000          LDR      r8,[r0,#0]
;;;440    
;;;441        // 发送缓冲区为空，说明无数据
;;;442        if (head == end)
00002a  42ac              CMP      r4,r5
00002c  d101              BNE      |L16.50|
                  |L16.46|
;;;443        {
;;;444            return;
;;;445        }
;;;446    
;;;447        // 发送函数没有注册直接返回
;;;448        if (NULL == canProtocolCB.sendDataThrowService)
;;;449        {
;;;450            return;
;;;451        }
;;;452    
;;;453        // 协议层有数据需要发送到驱动层
;;;454        if (!(*canProtocolCB.sendDataThrowService)(localDeviceID, pCmd, length))
;;;455        {
;;;456            return;
;;;457        }
;;;458    
;;;459        // 发送环形队列更新位置
;;;460        canProtocolCB.tx.cmdQueue[head].length = 0;
;;;461        canProtocolCB.tx.head++;
;;;462        canProtocolCB.tx.head %= CAN_PROTOCOL_TX_QUEUE_SIZE;
;;;463    }
00002e  e8bd81f0          POP      {r4-r8,pc}
                  |L16.50|
000032  4814              LDR      r0,|L16.132|
000034  f8d00d28          LDR      r0,[r0,#0xd28]        ;448  ; canProtocolCB
000038  b900              CBNZ     r0,|L16.60|
00003a  e7f8              B        |L16.46|
                  |L16.60|
00003c  b2f2              UXTB     r2,r6                 ;454
00003e  4811              LDR      r0,|L16.132|
000040  4639              MOV      r1,r7                 ;454
000042  f8d03d28          LDR      r3,[r0,#0xd28]        ;454  ; canProtocolCB
000046  4640              MOV      r0,r8                 ;454
000048  4798              BLX      r3                    ;454
00004a  b900              CBNZ     r0,|L16.78|
00004c  e7ef              B        |L16.46|
                  |L16.78|
00004e  2100              MOVS     r1,#0                 ;460
000050  480d              LDR      r0,|L16.136|
000052  eb001004          ADD      r0,r0,r4,LSL #4       ;460
000056  8181              STRH     r1,[r0,#0xc]          ;460
000058  480a              LDR      r0,|L16.132|
00005a  f8b00d20          LDRH     r0,[r0,#0xd20]        ;461
00005e  1c40              ADDS     r0,r0,#1              ;461
000060  b281              UXTH     r1,r0                 ;461
000062  4808              LDR      r0,|L16.132|
000064  f8a01d20          STRH     r1,[r0,#0xd20]        ;461
000068  f8b00d20          LDRH     r0,[r0,#0xd20]        ;462
00006c  211e              MOVS     r1,#0x1e              ;462
00006e  fb90f2f1          SDIV     r2,r0,r1              ;462
000072  fb010012          MLS      r0,r1,r2,r0           ;462
000076  b281              UXTH     r1,r0                 ;462
000078  4802              LDR      r0,|L16.132|
00007a  f8a01d20          STRH     r1,[r0,#0xd20]        ;462
00007e  bf00              NOP      
000080  e7d5              B        |L16.46|
;;;464    
                          ENDP

000082  0000              DCW      0x0000
                  |L16.132|
                          DCD      canProtocolCB
                  |L16.136|
                          DCD      canProtocolCB+0xb40

                          AREA ||i.CAN_UP_DATA||, CODE, READONLY, ALIGN=2

                  CAN_UP_DATA PROC
;;;700    
;;;701    void CAN_UP_DATA(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;702    {
000002  4604              MOV      r4,r0
;;;703        if (dut_info.uiUpFlag)
000004  483a              LDR      r0,|L17.240|
000006  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000008  b3b0              CBZ      r0,|L17.120|
;;;704        {
;;;705            dut_info.currentUiSize++;
00000a  4839              LDR      r0,|L17.240|
00000c  6b40              LDR      r0,[r0,#0x34]  ; dut_info
00000e  1c40              ADDS     r0,r0,#1
000010  4937              LDR      r1,|L17.240|
000012  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;706            
;;;707            // 如果升级完成
;;;708            if (dut_info.currentUiSize > dut_info.uiSize)
000014  4608              MOV      r0,r1
000016  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000018  6a89              LDR      r1,[r1,#0x28]  ; dut_info
00001a  4288              CMP      r0,r1
00001c  d903              BLS      |L17.38|
;;;709            {
;;;710                STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_FINISH);
00001e  200b              MOVS     r0,#0xb
000020  f7fffffe          BL       STATE_SwitchStep
                  |L17.36|
;;;711                return;
;;;712            }
;;;713            // 向发送buff添加地址编号
;;;714            canProtocolCB.sendBuff[0] = ((dut_info.currentUiSize >> 24) & 0xFF);
;;;715            canProtocolCB.sendBuff[1] = ((dut_info.currentUiSize >> 16) & 0xFF);
;;;716            canProtocolCB.sendBuff[2] = ((dut_info.currentUiSize >> 8) & 0xFF);
;;;717            canProtocolCB.sendBuff[3] = (dut_info.currentUiSize & 0xFF);
;;;718            // 向发送buff添加数据
;;;719            SPI_FLASH_ReadArray(&canProtocolCB.sendBuff[4], (SPI_FLASH_DUT_UI_ADDEESS + (dut_info.currentUiSize - 1) * 128), 128);
;;;720            // STATE_PGN_SEND_1：工具请求仪表接收数据
;;;721            CAN_PGN_RequestSendData(STATE_PGN_SEND_1, 0xEF, 0x27, 0xF9);
;;;722        }
;;;723        if (dut_info.appUpFlag)
;;;724        {
;;;725            dut_info.currentAppSize++;
;;;726            // 如果升级完成
;;;727            if (dut_info.currentAppSize > dut_info.appSize)
;;;728            {
;;;729                STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_FINISH);
;;;730                return;
;;;731            }
;;;732            // 向发送buff添加地址编号
;;;733            canProtocolCB.sendBuff[0] = ((dut_info.currentAppSize >> 24) & 0xFF);
;;;734            canProtocolCB.sendBuff[1] = ((dut_info.currentAppSize >> 16) & 0xFF);
;;;735            canProtocolCB.sendBuff[2] = ((dut_info.currentAppSize >> 8) & 0xFF);
;;;736            canProtocolCB.sendBuff[3] = (dut_info.currentAppSize & 0xFF);
;;;737            // 向发送buff添加数据
;;;738            SPI_FLASH_ReadArray(&canProtocolCB.sendBuff[4], (SPI_FLASH_DUT_APP_ADDEESS + (dut_info.currentAppSize - 1) * 128), 128);
;;;739            // STATE_PGN_SEND_1：工具请求仪表接收数据
;;;740            CAN_PGN_RequestSendData(STATE_PGN_SEND_1, 0xEF, 0x28, 0xF9);
;;;741        }
;;;742    
;;;743    }
000024  bd10              POP      {r4,pc}
                  |L17.38|
000026  4832              LDR      r0,|L17.240|
000028  6b40              LDR      r0,[r0,#0x34]         ;714  ; dut_info
00002a  0e00              LSRS     r0,r0,#24             ;714
00002c  4931              LDR      r1,|L17.244|
00002e  f8810d3e          STRB     r0,[r1,#0xd3e]        ;714
000032  482f              LDR      r0,|L17.240|
000034  6b40              LDR      r0,[r0,#0x34]         ;715  ; dut_info
000036  0c01              LSRS     r1,r0,#16             ;715
000038  482e              LDR      r0,|L17.244|
00003a  f8801d3f          STRB     r1,[r0,#0xd3f]        ;715
00003e  482c              LDR      r0,|L17.240|
000040  8e80              LDRH     r0,[r0,#0x34]         ;716  ; dut_info
000042  0a01              LSRS     r1,r0,#8              ;716
000044  482b              LDR      r0,|L17.244|
000046  f8801d40          STRB     r1,[r0,#0xd40]        ;716
00004a  4829              LDR      r0,|L17.240|
00004c  f8901034          LDRB     r1,[r0,#0x34]         ;717  ; dut_info
000050  4828              LDR      r0,|L17.244|
000052  f8801d41          STRB     r1,[r0,#0xd41]        ;717
000056  4826              LDR      r0,|L17.240|
000058  6b40              LDR      r0,[r0,#0x34]         ;719  ; dut_info
00005a  1e40              SUBS     r0,r0,#1              ;719
00005c  f44f1200          MOV      r2,#0x200000          ;719
000060  eb0211c0          ADD      r1,r2,r0,LSL #7       ;719
000064  2280              MOVS     r2,#0x80              ;719
000066  4824              LDR      r0,|L17.248|
000068  f7fffffe          BL       SPI_FLASH_ReadArray
00006c  23f9              MOVS     r3,#0xf9              ;721
00006e  2227              MOVS     r2,#0x27              ;721
000070  21ef              MOVS     r1,#0xef              ;721
000072  2001              MOVS     r0,#1                 ;721
000074  f7fffffe          BL       CAN_PGN_RequestSendData
                  |L17.120|
000078  481d              LDR      r0,|L17.240|
00007a  7ec0              LDRB     r0,[r0,#0x1b]         ;723  ; dut_info
00007c  b3b0              CBZ      r0,|L17.236|
00007e  481c              LDR      r0,|L17.240|
000080  6b00              LDR      r0,[r0,#0x30]         ;725  ; dut_info
000082  1c40              ADDS     r0,r0,#1              ;725
000084  491a              LDR      r1,|L17.240|
000086  6308              STR      r0,[r1,#0x30]         ;725  ; dut_info
000088  4608              MOV      r0,r1                 ;727
00008a  6b00              LDR      r0,[r0,#0x30]         ;727  ; dut_info
00008c  6a49              LDR      r1,[r1,#0x24]         ;727  ; dut_info
00008e  4288              CMP      r0,r1                 ;727
000090  d903              BLS      |L17.154|
000092  200b              MOVS     r0,#0xb               ;729
000094  f7fffffe          BL       STATE_SwitchStep
000098  e7c4              B        |L17.36|
                  |L17.154|
00009a  4815              LDR      r0,|L17.240|
00009c  6b00              LDR      r0,[r0,#0x30]         ;733  ; dut_info
00009e  0e00              LSRS     r0,r0,#24             ;733
0000a0  4914              LDR      r1,|L17.244|
0000a2  f8810d3e          STRB     r0,[r1,#0xd3e]        ;733
0000a6  4812              LDR      r0,|L17.240|
0000a8  6b00              LDR      r0,[r0,#0x30]         ;734  ; dut_info
0000aa  0c01              LSRS     r1,r0,#16             ;734
0000ac  4811              LDR      r0,|L17.244|
0000ae  f8801d3f          STRB     r1,[r0,#0xd3f]        ;734
0000b2  480f              LDR      r0,|L17.240|
0000b4  8e00              LDRH     r0,[r0,#0x30]         ;735  ; dut_info
0000b6  0a01              LSRS     r1,r0,#8              ;735
0000b8  480e              LDR      r0,|L17.244|
0000ba  f8801d40          STRB     r1,[r0,#0xd40]        ;735
0000be  480c              LDR      r0,|L17.240|
0000c0  f8901030          LDRB     r1,[r0,#0x30]         ;736  ; dut_info
0000c4  480b              LDR      r0,|L17.244|
0000c6  f8801d41          STRB     r1,[r0,#0xd41]        ;736
0000ca  4809              LDR      r0,|L17.240|
0000cc  6b00              LDR      r0,[r0,#0x30]         ;738  ; dut_info
0000ce  1e40              SUBS     r0,r0,#1              ;738
0000d0  f44f22c0          MOV      r2,#0x60000           ;738
0000d4  eb0211c0          ADD      r1,r2,r0,LSL #7       ;738
0000d8  2280              MOVS     r2,#0x80              ;738
0000da  4807              LDR      r0,|L17.248|
0000dc  f7fffffe          BL       SPI_FLASH_ReadArray
0000e0  23f9              MOVS     r3,#0xf9              ;740
0000e2  2228              MOVS     r2,#0x28              ;740
0000e4  21ef              MOVS     r1,#0xef              ;740
0000e6  2001              MOVS     r0,#1                 ;740
0000e8  f7fffffe          BL       CAN_PGN_RequestSendData
                  |L17.236|
0000ec  bf00              NOP      
0000ee  e799              B        |L17.36|
;;;744    
                          ENDP

                  |L17.240|
                          DCD      dut_info
                  |L17.244|
                          DCD      canProtocolCB
                  |L17.248|
                          DCD      canProtocolCB+0xd42

                          AREA ||i.CAN_UP_RESET||, CODE, READONLY, ALIGN=1

                  CAN_UP_RESET PROC
;;;744    
;;;745    void CAN_UP_RESET(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;746    {
000002  4604              MOV      r4,r0
;;;747        if (1 == param)
000004  2c01              CMP      r4,#1
000006  d120              BNE      |L18.74|
;;;748        {
;;;749            CAN_PROTOCOL_TxAddNewFrame(0x06, 0x01, 0xFF, 0xF9);
000008  23f9              MOVS     r3,#0xf9
00000a  22ff              MOVS     r2,#0xff
00000c  2101              MOVS     r1,#1
00000e  2006              MOVS     r0,#6
000010  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;750    
;;;751            CAN_PROTOCOL_TxAddData(0);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;752    
;;;753            CAN_PROTOCOL_TxAddData(0);
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;754    
;;;755            CAN_PROTOCOL_TxAddData(0);
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;756    
;;;757            CAN_PROTOCOL_TxAddData(0);
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;758    
;;;759            CAN_PROTOCOL_TxAddData(0);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;760    
;;;761            CAN_PROTOCOL_TxAddData(0);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;762    
;;;763            CAN_PROTOCOL_TxAddData(0);
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;764    
;;;765            CAN_PROTOCOL_TxAddData(0);
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;766    
;;;767            CAN_PROTOCOL_TxAddFrame();
000044  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
000048  e021              B        |L18.142|
                  |L18.74|
;;;768        }
;;;769        else if (2 == param)
00004a  2c02              CMP      r4,#2
00004c  d11f              BNE      |L18.142|
;;;770        {
;;;771            CAN_PROTOCOL_TxAddNewFrame(0x06, 0x01, 0xFF, 0xF9);
00004e  23f9              MOVS     r3,#0xf9
000050  22ff              MOVS     r2,#0xff
000052  2101              MOVS     r1,#1
000054  2006              MOVS     r0,#6
000056  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;772    
;;;773            CAN_PROTOCOL_TxAddData(0x40);
00005a  2040              MOVS     r0,#0x40
00005c  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;774    
;;;775            CAN_PROTOCOL_TxAddData(0);
000060  2000              MOVS     r0,#0
000062  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;776    
;;;777            CAN_PROTOCOL_TxAddData(0);
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;778    
;;;779            CAN_PROTOCOL_TxAddData(0x02);
00006c  2002              MOVS     r0,#2
00006e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;780    
;;;781            CAN_PROTOCOL_TxAddData(0);
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;782    
;;;783            CAN_PROTOCOL_TxAddData(0);
000078  2000              MOVS     r0,#0
00007a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;784    
;;;785            CAN_PROTOCOL_TxAddData(0);
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;786    
;;;787            CAN_PROTOCOL_TxAddData(0);
000084  2000              MOVS     r0,#0
000086  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;788    
;;;789            CAN_PROTOCOL_TxAddFrame();
00008a  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
                  |L18.142|
;;;790        }
;;;791    }
00008e  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  canRxDriveCB
                          %        16
                  canProtocolCB
                          %        3864
                  canProtocolRX
                          %        804

;*** Start embedded assembler ***

#line 1 "User\\CanProtocolUpGB.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_CanProtocolUpGB_c_ac16862f____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___17_CanProtocolUpGB_c_ac16862f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_CanProtocolUpGB_c_ac16862f____REVSH|
#line 128
|__asm___17_CanProtocolUpGB_c_ac16862f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
