; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\canprotocolupdt.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\canprotocolupdt.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\canprotocolupdt.crf User\CanProtocolUpDT.c]
                          THUMB

                          AREA ||i.CAN_AddSum||, CODE, READONLY, ALIGN=1

                  CAN_AddSum PROC
;;;1143   // 对传入的命令帧进行校验，返回校验结果
;;;1144   BOOL CAN_AddSum(uint8 *buff, uint32 len)
000000  b510              PUSH     {r4,lr}
;;;1145   {
000002  4602              MOV      r2,r0
;;;1146       uint8 cc = 0;
000004  2300              MOVS     r3,#0
;;;1147       uint16 i = 0;
000006  2400              MOVS     r4,#0
;;;1148   
;;;1149       if (NULL == buff)
000008  b90a              CBNZ     r2,|L1.14|
;;;1150       {
;;;1151           return FALSE;
00000a  2000              MOVS     r0,#0
                  |L1.12|
;;;1152       }
;;;1153   
;;;1154       // 从命令头开始，到校验码之前的一个字节，依次进行异或运算
;;;1155       for (i = 0; i < len; i++)
;;;1156       {
;;;1157           cc ^= buff[i];
;;;1158       }
;;;1159   
;;;1160       cc = ~cc;
;;;1161   
;;;1162       // 添加校验码
;;;1163       buff[len] = cc;
;;;1164   
;;;1165       return TRUE;
;;;1166   }
00000c  bd10              POP      {r4,pc}
                  |L1.14|
00000e  2400              MOVS     r4,#0                 ;1155
000010  e003              B        |L1.26|
                  |L1.18|
000012  5d10              LDRB     r0,[r2,r4]            ;1157
000014  4043              EORS     r3,r3,r0              ;1157
000016  1c60              ADDS     r0,r4,#1              ;1155
000018  b284              UXTH     r4,r0                 ;1155
                  |L1.26|
00001a  428c              CMP      r4,r1                 ;1155
00001c  d3f9              BCC      |L1.18|
00001e  43d8              MVNS     r0,r3                 ;1160
000020  b2c3              UXTB     r3,r0                 ;1160
000022  5453              STRB     r3,[r2,r1]            ;1163
000024  2001              MOVS     r0,#1                 ;1165
000026  e7f1              B        |L1.12|
;;;1167   
                          ENDP


                          AREA ||i.CAN_CheckSum||, CODE, READONLY, ALIGN=1

                  CAN_CheckSum PROC
;;;1115   // 对传入的命令帧进行校验，返回校验结果
;;;1116   BOOL CAN_CheckSum(uint8 *buff, uint32 len)
000000  b510              PUSH     {r4,lr}
;;;1117   {
000002  4602              MOV      r2,r0
;;;1118       uint8 cc = 0;
000004  2300              MOVS     r3,#0
;;;1119       uint16 i = 0;
000006  2400              MOVS     r4,#0
;;;1120   
;;;1121       if (NULL == buff)
000008  b90a              CBNZ     r2,|L2.14|
;;;1122       {
;;;1123           return FALSE;
00000a  2000              MOVS     r0,#0
                  |L2.12|
;;;1124       }
;;;1125   
;;;1126       // 从命令头开始，到校验码之前的一个字节，依次进行异或运算
;;;1127       for (i = 0; i < (len - CAN_CHECK_BYTE_SIZE); i++)
;;;1128       {
;;;1129           cc ^= buff[i];
;;;1130       }
;;;1131   
;;;1132       cc = ~cc;
;;;1133   
;;;1134       // 判断计算得到的校验码与命令帧中的校验码是否相同
;;;1135       if (buff[len - 1] != cc)
;;;1136       {
;;;1137           return FALSE;
;;;1138       }
;;;1139   
;;;1140       return TRUE;
;;;1141   }
00000c  bd10              POP      {r4,pc}
                  |L2.14|
00000e  2400              MOVS     r4,#0                 ;1127
000010  e003              B        |L2.26|
                  |L2.18|
000012  5d10              LDRB     r0,[r2,r4]            ;1129
000014  4043              EORS     r3,r3,r0              ;1129
000016  1c60              ADDS     r0,r4,#1              ;1127
000018  b284              UXTH     r4,r0                 ;1127
                  |L2.26|
00001a  1e48              SUBS     r0,r1,#1              ;1127
00001c  42a0              CMP      r0,r4                 ;1127
00001e  d8f8              BHI      |L2.18|
000020  43d8              MVNS     r0,r3                 ;1132
000022  b2c3              UXTB     r3,r0                 ;1132
000024  1e48              SUBS     r0,r1,#1              ;1135
000026  5c10              LDRB     r0,[r2,r0]            ;1135
000028  4298              CMP      r0,r3                 ;1135
00002a  d001              BEQ      |L2.48|
00002c  2000              MOVS     r0,#0                 ;1137
00002e  e7ed              B        |L2.12|
                  |L2.48|
000030  2001              MOVS     r0,#1                 ;1140
000032  e7eb              B        |L2.12|
;;;1142   
                          ENDP


                          AREA ||i.CAN_CmdFrameProcess||, CODE, READONLY, ALIGN=2

                  CAN_CmdFrameProcess PROC
;;;592    // CAN命令帧缓冲区处理
;;;593    void CAN_CmdFrameProcess(CAN_CB *pCB)
000000  b5fe              PUSH     {r1-r7,lr}
;;;594    {
000002  4605              MOV      r5,r0
;;;595        CAN_CMD cmd = IAP_CTRL_CAN_CMD_EMPTY;
000004  2700              MOVS     r7,#0
;;;596        CAN_CMD_FRAME *pCmdFrame = NULL;
000006  2400              MOVS     r4,#0
;;;597        uint8 sourceBuffSelect = CAN_DEVICE_SOURCE_ID_MAX;
000008  2601              MOVS     r6,#1
;;;598        volatile uint32 temp = 0;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;599        volatile uint16 length;
;;;600        volatile uint8 errStatus;
;;;601        volatile uint16 i;
;;;602    
;;;603        // 参数合法性检验
;;;604        if (NULL == pCB)
00000e  b905              CBNZ     r5,|L3.18|
                  |L3.16|
;;;605        {
;;;606            return;
;;;607        }
;;;608    
;;;609        // 循环判断是否有数据需要处理
;;;610        for (sourceBuffSelect = 0; sourceBuffSelect < CAN_DEVICE_SOURCE_ID_MAX; sourceBuffSelect++)
;;;611        {
;;;612            // 命令帧缓冲区为空，退出
;;;613            if (pCB->rx.rxEachNode[sourceBuffSelect].head == pCB->rx.rxEachNode[sourceBuffSelect].end)
;;;614            {
;;;615                continue;
;;;616            }
;;;617    
;;;618            // 获取当前要处理的命令帧指针
;;;619            pCmdFrame = &pCB->rx.rxEachNode[sourceBuffSelect].cmdQueue[pCB->rx.rxEachNode[sourceBuffSelect].head];
;;;620    
;;;621            // 命令头非法，退出
;;;622            if (CAN_CMD_HEAD != pCmdFrame->buff[CAN_CMD_HEAD_INDEX])
;;;623            {
;;;624                // 删除命令帧
;;;625                pCB->rx.rxEachNode[sourceBuffSelect].head++;
;;;626                pCB->rx.rxEachNode[sourceBuffSelect].head %= CAN_RX_QUEUE_SIZE;
;;;627                continue;
;;;628            }
;;;629    
;;;630            // 命令头合法，则提取命令
;;;631            cmd = (CAN_CMD)(pCmdFrame->buff[CAN_CMD_CMD_INDEX]);
;;;632    
;;;633            switch (dut_info.ID)
;;;634            {
;;;635                case DUT_TYPE_NULL:
;;;636                    break;
;;;637    
;;;638                case DUT_TYPE_CM: // 通用仪表升级
;;;639                    switch (cmd)
;;;640                    {
;;;641                        case IAP_CTRL_CAN_CMD_EMPTY: // 0x00 空命令
;;;642                            break;
;;;643    
;;;644                        case IAP_CTRL_CAN_CMD_UP_PROJECT_APPLY:
;;;645                            STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
;;;646                            if(dut_info.bootEaring)
;;;647                            {
;;;648                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);                        
;;;649                            }
;;;650                            else if (dut_info.bootUpFlag)
;;;651                            {
;;;652                                STATE_SwitchStep(STEP_CM_CAN_BC_UPGRADE_BOOT_ENTRY);
;;;653                            }
;;;654                            else if (!dut_info.dutPowerOnAllow) // 只接收一次eco请求
;;;655                            {
;;;656                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST);
;;;657                                dut_info.dutPowerOnAllow = TRUE; // 不再接收eco请求
;;;658                            }
;;;659                            else if ((DUT_NAME_BC147 == dut_info.nam) && (dut_info.configUpFlag) && (!dut_info.dutPowerOnAllow))
;;;660                            {
;;;661                                STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;662                            }
;;;663                            else if (writeUiVerFlag) // 只接收一次eco请求
;;;664                            {
;;;665                                STATE_SwitchStep(STEP_CM_CAN_WRITE_UI_VER);
;;;666                                writeUiVerFlag = FALSE;
;;;667                            }                        
;;;668                            break;
;;;669    
;;;670                        case IAP_CTRL_CAN_CMD_UP_PROJECT_READY: // 0x03：DUT工程模式准备就绪
;;;671                            TIMER_KillTask(TIMER_ID_DELAY_ENTER_UP_MODE);
;;;672                            if (dut_info.reconnectionFlag)
;;;673                            {
;;;674                                if (dut_info.reconnectionRepeatOne)
;;;675                                {
;;;676                                    if (dut_info.appUpFlag)
;;;677                                    {
;;;678                                        STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_APP_WRITE);
;;;679                                    }
;;;680                                    else if (dut_info.uiUpFlag)
;;;681                                    {
;;;682                                        STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_UI_WRITE);
;;;683                                    }
;;;684                                }
;;;685                                break;
;;;686                            }
;;;687                            // 选择升级
;;;688                            if (dut_info.appUpFlag)
;;;689                            {
;;;690                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_APP_EAR);
;;;691                            }
;;;692                            else if (dut_info.uiUpFlag)
;;;693                            {
;;;694                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_UI_EAR);
;;;695                            }
;;;696                            else if (dut_info.configUpFlag)
;;;697                            {
;;;698                                STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;699                            }
;;;700                            break;
;;;701    
;;;702                        case IAP_CTRL_CAN_CMD_UP_UI_DATA_ERASE_ACK: // 0x13,DUT_UI擦写成功
;;;703                            // 提取DUT_UI擦除结果
;;;704                            temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;705                            // 擦除失败
;;;706                            if (0 == temp)
;;;707                            {
;;;708                                // 擦除失败再擦除一次
;;;709                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_UI_EAR);
;;;710                                break;
;;;711                            }
;;;712                            // 擦除成功
;;;713                            STATE_SwitchStep(STEP_CM_CAN_UPGRADE_UI_EAR_RESUALT);
;;;714                            break;
;;;715    
;;;716                        case IAP_CTRL_CAN_CMD_UP_UI_DATA_WRITE_RESULT: // 0x15  //DUT_UI写入结果
;;;717                            temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;718    
;;;719                            if (0 == temp)
;;;720                            {
;;;721                                dut_info.currentUiSize--; // 应答失败重发上一包数据
;;;722                            }
;;;723    			           if (dut_info.currentUiSize < (dut_info.uiSize + 1))
;;;724                            {
;;;725                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_UI_WRITE);
;;;726                            }
;;;727                            else
;;;728                            {
;;;729                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_UI_UP_SUCCESS);
;;;730                            }
;;;731                            break;
;;;732    
;;;733                        case IAP_CTRL_CAN_CMD_DOWN_IAP_ERASE_FLASH: // 0x24：DUT_APP擦写
;;;734                            break;
;;;735    
;;;736                        case IAP_CTRL_CAN_CMD_UP_IAP_ERASE_FLASH_RESULT: // 0x25：DUT_APP擦写结果查询
;;;737                            temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;738                            // 擦除失败
;;;739                            if (0 == temp)
;;;740                            {
;;;741                                // 擦除失败再擦除一次
;;;742                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_APP_EAR);
;;;743                                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
;;;744                                // TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;745                                break;
;;;746                            }
;;;747                            STATE_SwitchStep(STEP_CM_CAN_UPGRADE_APP_EAR_RESUALT);
;;;748                            break;
;;;749    
;;;750                        case IAP_CTRL_CAN_CMD_UP_IAP_WRITE_FLASH_RESULT: // 0x27：DUT_APP写入结果
;;;751                            temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;752    
;;;753                            if (0 == temp)
;;;754                            {
;;;755                                if (0 < dut_info.currentAppSize)
;;;756                                {
;;;757                                    dut_info.currentAppSize--;
;;;758                                }
;;;759                                break;
;;;760                            }
;;;761                            if (dut_info.currentAppSize < dut_info.appSize)
;;;762                            {
;;;763                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_APP_WRITE);
;;;764                            }
;;;765                            else
;;;766                            {
;;;767                                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_APP_UP_SUCCESS);
;;;768                            }
;;;769                            break;
;;;770    
;;;771                        case IAP_CTRL_CAN_CMD_UP_UPDATA_FINISH_RESULT: // 0x2B：DUT写入结果确定
;;;772                            STATE_SwitchStep(STEP_CM_CAN_UPGRADE_ITEM_FINISH);
;;;773                            break;
;;;774    
;;;775                        default:
;;;776                            break;
;;;777                    }
;;;778                    break;
;;;779    
;;;780                // 华芯微特升级
;;;781                case DUT_TYPE_HUAXIN:
;;;782                    switch (cmd)
;;;783                    {
;;;784                    case IAP_CTRL_CAN_CMD_EMPTY: // 0x00 空命令
;;;785                        break;
;;;786    
;;;787                    // 收到仪表eco请求
;;;788                    case IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK: // 0x02
;;;789                        if (dut_info.appUpFlag || dut_info.uiUpFlag)
;;;790                        {
;;;791                            if (!dut_info.dutPowerOnAllow) // 只接收一次eco请求
;;;792                            {
;;;793                                STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST);
;;;794                                dut_info.dutPowerOnAllow = TRUE; // 不再接收eco请求
;;;795                            }
;;;796                        }
;;;797                        else if (dut_info.configUpFlag)
;;;798                        {
;;;799                            STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;800                        }
;;;801    
;;;802                        break;
;;;803    
;;;804                    case IAP_CTRL_CAN_CMD_UP_PROJECT_READY: // 0x03：DUT工程模式准备就绪
;;;805                        // 选择升级
;;;806                        if (dut_info.appUpFlag)
;;;807                        {
;;;808                            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_APP_EAR);
;;;809                        }
;;;810                        else if (dut_info.uiUpFlag)
;;;811                        {
;;;812                            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_EAR);
;;;813                        }
;;;814                        else if (dut_info.configUpFlag)
;;;815                        {
;;;816                            STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;817                        }
;;;818                        break;
;;;819    
;;;820                    case IAP_CTRL_CAN_HUAXIN_CMD_APP_EAR: // 0x05：DUT_APP擦写结果查询
;;;821                        temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;822                        // 擦除失败
;;;823                        if (0 == temp)
;;;824                        {
;;;825                            // 擦除失败再擦除一次
;;;826                            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_APP_EAR);
;;;827                            break;
;;;828                        }
;;;829                        dut_info.currentAppSize = 0;
;;;830                        STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_APP_WRITE);
;;;831                        break;
;;;832    
;;;833                    case IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP: // 0x06：DUT_APP写入结果
;;;834                        temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;835    
;;;836                        if (0 == temp)
;;;837                        {
;;;838                            if (0 < dut_info.currentAppSize)
;;;839                            {
;;;840                                dut_info.currentAppSize--;
;;;841                            }
;;;842                        }
;;;843                        if (dut_info.currentAppSize < dut_info.appSize)
;;;844                        {
;;;845                            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_APP_WRITE);
;;;846                        }
;;;847                        else
;;;848                        {
;;;849                            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_APP_UP_SUCCESS);
;;;850                        }
;;;851                        break;
;;;852    
;;;853                    case IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP_COMPLETE: // 0x07：DUT写入结果确定
;;;854                        STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_ITEM_FINISH);
;;;855                        break;
;;;856    
;;;857                    case IAP_CTRL_CAN_CMD_UP_UI_DATA_ERASE_ACK: // 0x13：DUT_UI擦写成功
;;;858                        // 提取DUT_UI擦除结果
;;;859                        temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;860                        // 擦除失败
;;;861                        if (0 == temp)
;;;862                        {
;;;863                            // 擦除失败再擦除一次
;;;864                            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_EAR);
;;;865                            break;
;;;866                        }
;;;867                        // 擦除成功
;;;868                        dut_info.currentUiSize = 0;
;;;869                        STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_WRITE);
;;;870                        break;
;;;871    
;;;872                    case IAP_CTRL_CAN_CMD_UP_UI_DATA_WRITE_RESULT: // 0x15：DUT_UI写入结果
;;;873                        temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;874    
;;;875                        if (0 == temp)
;;;876                        {
;;;877                            dut_info.currentUiSize--; // 应答失败重发上一包数据
;;;878                        }
;;;879    		        	if (dut_info.currentUiSize < (dut_info.uiSize + 1))
;;;880                        {
;;;881                            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_WRITE);
;;;882                        }
;;;883                        else
;;;884                        {
;;;885                            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_UI_UP_SUCCESS);
;;;886                        }
;;;887                        break;
;;;888    
;;;889                    case IAP_CTRL_CAN_CMD_UP_UPDATA_FINISH_RESULT:
;;;890                        STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_ITEM_FINISH);
;;;891                        break;
;;;892    
;;;893                    default:
;;;894                        break;
;;;895                    }
;;;896                    break;
;;;897    
;;;898                case DUT_TYPE_SPARROW:
;;;899                case DUT_TYPE_SEG: // 段码屏
;;;900                    // 执行命令帧
;;;901                    switch (cmd)
;;;902                    {
;;;903                    // 收到仪表发送的ECO请求
;;;904                    case IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK: // 02
;;;905                        if (!dut_info.dutPowerOnAllow)
;;;906                        {
;;;907                            // 延时50ms允许进入工程模式
;;;908                            STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST);
;;;909                            dut_info.dutPowerOnAllow = TRUE; // 不在接收eco请求
;;;910                        }
;;;911                        break;
;;;912    
;;;913                    // 仪表回应准备就绪
;;;914                    case IAP_CTRL_CAN_CMD_UP_PROJECT_READY: // 03
;;;915                        if (dut_info.appUpFlag)
;;;916                        {
;;;917                            STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_EAR); // 擦除app
;;;918                        }
;;;919                        break;
;;;920    
;;;921                    case IAP_CTRL_CAN_CMD_SEG_RUN_APP_ACK: // 04
;;;922                        if (dut_info.configUpFlag)
;;;923                        {
;;;924                            STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;925                        }
;;;926                        else
;;;927                        {
;;;928                        }
;;;929                        break;
;;;930    
;;;931                    case IAP_CTRL_CAN_HUAXIN_CMD_APP_EAR: // 05
;;;932                        STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_APP_EAR_RESUALT);
;;;933                        // 提取DUT_UI擦除结果
;;;934                        temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;935    
;;;936                        // 擦除失败
;;;937                        if (0 == temp)
;;;938                        {
;;;939                            // 擦除失败再擦除一次
;;;940                            STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_EAR); // 擦除app
;;;941                            break;
;;;942                        }
;;;943                        // 擦除成功
;;;944                        dut_info.currentAppSize = 0;
;;;945                        STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_WRITE);
;;;946    
;;;947                        break;
;;;948                    case IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP: // 06,app写入
;;;949                        temp = pCmdFrame->buff[CAN_CMD_DATA1_INDEX];
;;;950                        if (0 == temp) // 如果仪表写入失败
;;;951                        {
;;;952                            dut_info.currentAppSize--;
;;;953                        }
;;;954    
;;;955                        if (dut_info.currentAppSize < dut_info.appSize)
;;;956                        {
;;;957                            STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_SEND_APP_WRITE);
;;;958                        }
;;;959                        else
;;;960                        {
;;;961                            STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_APP_UP_SUCCESS);
;;;962                        }
;;;963                        break;
;;;964    
;;;965                    case IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP_COMPLETE: // 07，升级项结束，开始升级下一项
;;;966                        STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_ITEM_FINISH);
;;;967                        break;
;;;968    
;;;969                    default:
;;;970                        break;
;;;971                    }
;;;972                    break;
;;;973    
;;;974                // 开阳升级流程
;;;975                case DUT_TYPE_KAIYANG:
;;;976                    // 执行命令帧
;;;977                    switch (cmd)
;;;978                    {
;;;979                    // 收到仪表发送的ECO请求
;;;980                    case IAP_CTRL_CAN_CMD_UP_PROJECT_APPLY: // 01
;;;981    
;;;982                        if (!dut_info.dutPowerOnAllow)
;;;983                        {
;;;984                            if (dut_info.uiUpFlag || dut_info.appUpFlag)
;;;985                            {
;;;986                                STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_UP_ALLOW);
;;;987                            }
;;;988                            else if (dut_info.configUpFlag)
;;;989                            {
;;;990                                STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
;;;991                            }
;;;992                            dut_info.dutPowerOnAllow = TRUE; // 不在接收eco请求
;;;993                        }
;;;994                        break;
;;;995    
;;;996                    // 仪表回应准备就绪
;;;997                    case IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK: // 02
;;;998                        if (dut_info.appUpFlag)
;;;999                        {
;;;1000                           dut_info.currentAppSize = 0;
;;;1001                           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_APP_WRITE);
;;;1002                           TIMER_AddTask(TIMER_ID_RECONNECTION,
;;;1003                                         1000,
;;;1004                                         STATE_SwitchStep,
;;;1005                                         STEP_KAIYANG_CAN_UPGRADE_SEND_APP_AGAIN,
;;;1006                                         TIMER_LOOP_FOREVER,
;;;1007                                         ACTION_MODE_ADD_TO_QUEUE);
;;;1008                       }
;;;1009                       else if (dut_info.uiUpFlag)
;;;1010                       {
;;;1011                           dut_info.currentUiSize = 0;
;;;1012                           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_UI_WRITE);
;;;1013                           TIMER_AddTask(TIMER_ID_RECONNECTION,
;;;1014                                         1000,
;;;1015                                         STATE_SwitchStep,
;;;1016                                         STEP_KAIYANG_CAN_UPGRADE_SEND_UI_AGAIN,
;;;1017                                         TIMER_LOOP_FOREVER,
;;;1018                                         ACTION_MODE_ADD_TO_QUEUE);
;;;1019                       }
;;;1020                       break;
;;;1021   
;;;1022                   case IAP_CTRL_CAN_CMD_UP_PROJECT_READY: // 03
;;;1023                       TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
;;;1024                       if (dut_info.appUpFlag)
;;;1025                       {
;;;1026                           if (dut_info.currentAppSize < dut_info.appSize - 1)
;;;1027                           {
;;;1028                               if (pCmdFrame->buff[CAN_CMD_DATA1_INDEX])
;;;1029                               {
;;;1030                                   dut_info.currentAppSize++;
;;;1031                               }
;;;1032                               STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_APP_WRITE);
;;;1033                           }
;;;1034                           else
;;;1035                           {
;;;1036                               STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_APP_UP_SUCCESS);
;;;1037                           }
;;;1038                       }
;;;1039                       else if (dut_info.uiUpFlag)
;;;1040                       {
;;;1041                           if (dut_info.currentUiSize < dut_info.uiSize - 1)
;;;1042                           {
;;;1043                               if (pCmdFrame->buff[CAN_CMD_DATA1_INDEX])
;;;1044                               {
;;;1045                                   dut_info.currentUiSize++;
;;;1046                               }
;;;1047                               STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_UI_WRITE);
;;;1048                           }
;;;1049                           else
;;;1050                           {
;;;1051                               STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_APP_UP_SUCCESS);
;;;1052                           }
;;;1053                       }
;;;1054   
;;;1055                       break;
;;;1056                   case IAP_CTRL_CAN_CMD_SEG_RUN_APP_ACK: // 04
;;;1057                       if (pCmdFrame->buff[CAN_CMD_DATA1_INDEX])
;;;1058                       {
;;;1059                           // 升级成功
;;;1060                           if (dut_info.appUpFlag)
;;;1061                           {
;;;1062                               dut_info.appUpSuccesss = TRUE;
;;;1063                               dut_info.appUpFlag = FALSE;
;;;1064                           }
;;;1065                           else if (dut_info.uiUpFlag)
;;;1066                           {
;;;1067                               dut_info.uiUpSuccesss = TRUE;
;;;1068                               dut_info.uiUpFlag = FALSE;
;;;1069                           }
;;;1070                       }
;;;1071                       else // 升级失败
;;;1072                       {
;;;1073                           if (dut_info.appUpFlag)
;;;1074                           {
;;;1075                               dut_info.appUpFaile = TRUE;
;;;1076                               dut_info.appUpFlag = FALSE;
;;;1077                           }
;;;1078                           else if (dut_info.uiUpFlag)
;;;1079                           {
;;;1080                               dut_info.appUpFaile = TRUE;
;;;1081                               dut_info.uiUpFlag = FALSE;
;;;1082                           }
;;;1083                       }
;;;1084                       TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
;;;1085                       STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_ITEM_FINISH);
;;;1086                       break;
;;;1087   
;;;1088                   default:
;;;1089                       break;
;;;1090                   }
;;;1091                   break;
;;;1092   
;;;1093               default:
;;;1094                   break;
;;;1095               }
;;;1096           // 删除命令帧
;;;1097           pCB->rx.rxEachNode[sourceBuffSelect].head++;
;;;1098           pCB->rx.rxEachNode[sourceBuffSelect].head %= CAN_RX_QUEUE_SIZE;
;;;1099       }
;;;1100   }
000010  bdfe              POP      {r1-r7,pc}
                  |L3.18|
000012  2600              MOVS     r6,#0                 ;610
000014  e303              B        |L3.1566|
                  |L3.22|
000016  20d7              MOVS     r0,#0xd7              ;613
000018  4370              MULS     r0,r6,r0              ;613
00001a  f105019c          ADD      r1,r5,#0x9c           ;613
00001e  eb0100c0          ADD      r0,r1,r0,LSL #3       ;613
000022  f8b026b4          LDRH     r2,[r0,#0x6b4]        ;613
000026  20d7              MOVS     r0,#0xd7              ;613
000028  4370              MULS     r0,r6,r0              ;613
00002a  eb0100c0          ADD      r0,r1,r0,LSL #3       ;613
00002e  f8b006b6          LDRH     r0,[r0,#0x6b6]        ;613
000032  4282              CMP      r2,r0                 ;613
000034  d100              BNE      |L3.56|
000036  e2f0              B        |L3.1562|
                  |L3.56|
000038  20d7              MOVS     r0,#0xd7              ;619
00003a  4370              MULS     r0,r6,r0              ;619
00003c  f105019c          ADD      r1,r5,#0x9c           ;619
000040  eb0102c0          ADD      r2,r1,r0,LSL #3       ;619
000044  20d7              MOVS     r0,#0xd7              ;619
000046  4370              MULS     r0,r6,r0              ;619
000048  eb0100c0          ADD      r0,r1,r0,LSL #3       ;619
00004c  f8b006b4          LDRH     r0,[r0,#0x6b4]        ;619
000050  ebc001c0          RSB      r1,r0,r0,LSL #3       ;619
000054  eb011040          ADD      r0,r1,r0,LSL #5       ;619
000058  eb020480          ADD      r4,r2,r0,LSL #2       ;619
00005c  7920              LDRB     r0,[r4,#4]            ;622
00005e  2855              CMP      r0,#0x55              ;622
000060  d024              BEQ      |L3.172|
000062  20d7              MOVS     r0,#0xd7              ;625
000064  4370              MULS     r0,r6,r0              ;625
000066  f105019c          ADD      r1,r5,#0x9c           ;625
00006a  eb0100c0          ADD      r0,r1,r0,LSL #3       ;625
00006e  f8b006b4          LDRH     r0,[r0,#0x6b4]        ;625
000072  1c40              ADDS     r0,r0,#1              ;625
000074  b282              UXTH     r2,r0                 ;625
000076  20d7              MOVS     r0,#0xd7              ;625
000078  4370              MULS     r0,r6,r0              ;625
00007a  eb0100c0          ADD      r0,r1,r0,LSL #3       ;625
00007e  f8a026b4          STRH     r2,[r0,#0x6b4]        ;625
000082  20d7              MOVS     r0,#0xd7              ;626
000084  4370              MULS     r0,r6,r0              ;626
000086  eb0100c0          ADD      r0,r1,r0,LSL #3       ;626
00008a  f8b006b4          LDRH     r0,[r0,#0x6b4]        ;626
00008e  210b              MOVS     r1,#0xb               ;626
000090  fb90f2f1          SDIV     r2,r0,r1              ;626
000094  fb010012          MLS      r0,r1,r2,r0           ;626
000098  b282              UXTH     r2,r0                 ;626
00009a  20d7              MOVS     r0,#0xd7              ;626
00009c  4370              MULS     r0,r6,r0              ;626
00009e  f105019c          ADD      r1,r5,#0x9c           ;626
0000a2  eb0100c0          ADD      r0,r1,r0,LSL #3       ;626
0000a6  f8a026b4          STRH     r2,[r0,#0x6b4]        ;626
0000aa  e2b6              B        |L3.1562|
                  |L3.172|
0000ac  7967              LDRB     r7,[r4,#5]            ;631
0000ae  48f7              LDR      r0,|L3.1164|
0000b0  7d80              LDRB     r0,[r0,#0x16]         ;633  ; dut_info
0000b2  2808              CMP      r0,#8                 ;633
0000b4  d272              BCS      |L3.412|
0000b6  e8dff000          TBB      [pc,r0]               ;633
0000ba  0471              DCB      0x04,0x71
0000bc  05dbf1f0          DCB      0x05,0xdb,0xf1,0xf0
0000c0  71ef              DCB      0x71,0xef
0000c2  e284              B        |L3.1486|
0000c4  2f15              CMP      r7,#0x15              ;639
0000c6  d06a              BEQ      |L3.414|
0000c8  dc07              BGT      |L3.218|
0000ca  b17f              CBZ      r7,|L3.236|
0000cc  2f01              CMP      r7,#1                 ;639
0000ce  d00e              BEQ      |L3.238|
0000d0  2f03              CMP      r7,#3                 ;639
0000d2  d043              BEQ      |L3.348|
0000d4  2f13              CMP      r7,#0x13              ;639
                  |L3.214|
0000d6  d171              BNE      |L3.444|
0000d8  e074              B        |L3.452|
                  |L3.218|
0000da  2f24              CMP      r7,#0x24              ;639
0000dc  d06f              BEQ      |L3.446|
0000de  2f25              CMP      r7,#0x25              ;639
0000e0  d06e              BEQ      |L3.448|
0000e2  2f27              CMP      r7,#0x27              ;639
0000e4  d06d              BEQ      |L3.450|
0000e6  2f2b              CMP      r7,#0x2b              ;639
0000e8  d1f5              BNE      |L3.214|
0000ea  e0ba              B        |L3.610|
                  |L3.236|
0000ec  e0be              B        |L3.620|
                  |L3.238|
0000ee  2010              MOVS     r0,#0x10              ;645
0000f0  f7fffffe          BL       STATE_SwitchStep
0000f4  48e5              LDR      r0,|L3.1164|
0000f6  f89000e2          LDRB     r0,[r0,#0xe2]         ;646  ; dut_info
0000fa  b118              CBZ      r0,|L3.260|
0000fc  2010              MOVS     r0,#0x10              ;648
0000fe  f7fffffe          BL       STATE_SwitchStep
000102  e02a              B        |L3.346|
                  |L3.260|
000104  48e1              LDR      r0,|L3.1164|
000106  7e80              LDRB     r0,[r0,#0x1a]         ;650  ; dut_info
000108  b118              CBZ      r0,|L3.274|
00010a  20a6              MOVS     r0,#0xa6              ;652
00010c  f7fffffe          BL       STATE_SwitchStep
000110  e023              B        |L3.346|
                  |L3.274|
000112  48de              LDR      r0,|L3.1164|
000114  f890003c          LDRB     r0,[r0,#0x3c]         ;654  ; dut_info
000118  b938              CBNZ     r0,|L3.298|
00011a  2011              MOVS     r0,#0x11              ;656
00011c  f7fffffe          BL       STATE_SwitchStep
000120  2001              MOVS     r0,#1                 ;657
000122  49da              LDR      r1,|L3.1164|
000124  f881003c          STRB     r0,[r1,#0x3c]         ;657
000128  e017              B        |L3.346|
                  |L3.298|
00012a  48d8              LDR      r0,|L3.1164|
00012c  7dc0              LDRB     r0,[r0,#0x17]         ;659  ; dut_info
00012e  2801              CMP      r0,#1                 ;659
000130  d10a              BNE      |L3.328|
000132  48d6              LDR      r0,|L3.1164|
000134  7f00              LDRB     r0,[r0,#0x1c]         ;659  ; dut_info
000136  b138              CBZ      r0,|L3.328|
000138  48d4              LDR      r0,|L3.1164|
00013a  f890003c          LDRB     r0,[r0,#0x3c]         ;659  ; dut_info
00013e  b918              CBNZ     r0,|L3.328|
000140  204f              MOVS     r0,#0x4f              ;661
000142  f7fffffe          BL       STATE_SwitchStep
000146  e008              B        |L3.346|
                  |L3.328|
000148  48d1              LDR      r0,|L3.1168|
00014a  7800              LDRB     r0,[r0,#0]            ;663  ; writeUiVerFlag
00014c  b128              CBZ      r0,|L3.346|
00014e  2017              MOVS     r0,#0x17              ;665
000150  f7fffffe          BL       STATE_SwitchStep
000154  2000              MOVS     r0,#0                 ;666
000156  49ce              LDR      r1,|L3.1168|
000158  7008              STRB     r0,[r1,#0]            ;666
                  |L3.346|
00015a  e087              B        |L3.620|
                  |L3.348|
00015c  2008              MOVS     r0,#8                 ;671
00015e  f7fffffe          BL       TIMER_KillTask
000162  48ca              LDR      r0,|L3.1164|
000164  f890004a          LDRB     r0,[r0,#0x4a]         ;672  ; dut_info
000168  b188              CBZ      r0,|L3.398|
00016a  48c8              LDR      r0,|L3.1164|
00016c  f890004b          LDRB     r0,[r0,#0x4b]         ;674  ; dut_info
000170  b160              CBZ      r0,|L3.396|
000172  48c6              LDR      r0,|L3.1164|
000174  7ec0              LDRB     r0,[r0,#0x1b]         ;676  ; dut_info
000176  b118              CBZ      r0,|L3.384|
000178  201c              MOVS     r0,#0x1c              ;678
00017a  f7fffffe          BL       STATE_SwitchStep
00017e  e005              B        |L3.396|
                  |L3.384|
000180  48c2              LDR      r0,|L3.1164|
000182  7f40              LDRB     r0,[r0,#0x1d]         ;680  ; dut_info
000184  b110              CBZ      r0,|L3.396|
000186  2015              MOVS     r0,#0x15              ;682
000188  f7fffffe          BL       STATE_SwitchStep
                  |L3.396|
00018c  e06e              B        |L3.620|
                  |L3.398|
00018e  48bf              LDR      r0,|L3.1164|
000190  7ec0              LDRB     r0,[r0,#0x1b]         ;688  ; dut_info
000192  b128              CBZ      r0,|L3.416|
000194  201a              MOVS     r0,#0x1a              ;690
000196  f7fffffe          BL       STATE_SwitchStep
00019a  e00e              B        |L3.442|
                  |L3.412|
00019c  e216              B        |L3.1484|
                  |L3.414|
00019e  e01d              B        |L3.476|
                  |L3.416|
0001a0  48ba              LDR      r0,|L3.1164|
0001a2  7f40              LDRB     r0,[r0,#0x1d]         ;692  ; dut_info
0001a4  b118              CBZ      r0,|L3.430|
0001a6  2013              MOVS     r0,#0x13              ;694
0001a8  f7fffffe          BL       STATE_SwitchStep
0001ac  e005              B        |L3.442|
                  |L3.430|
0001ae  48b7              LDR      r0,|L3.1164|
0001b0  7f00              LDRB     r0,[r0,#0x1c]         ;696  ; dut_info
0001b2  b110              CBZ      r0,|L3.442|
0001b4  204f              MOVS     r0,#0x4f              ;698
0001b6  f7fffffe          BL       STATE_SwitchStep
                  |L3.442|
0001ba  e057              B        |L3.620|
                  |L3.444|
0001bc  e055              B        |L3.618|
                  |L3.446|
0001be  e024              B        |L3.522|
                  |L3.448|
0001c0  e024              B        |L3.524|
                  |L3.450|
0001c2  e032              B        |L3.554|
                  |L3.452|
0001c4  79e0              LDRB     r0,[r4,#7]            ;704
0001c6  9002              STR      r0,[sp,#8]            ;704
0001c8  9802              LDR      r0,[sp,#8]            ;706
0001ca  b918              CBNZ     r0,|L3.468|
0001cc  2013              MOVS     r0,#0x13              ;709
0001ce  f7fffffe          BL       STATE_SwitchStep
0001d2  e04b              B        |L3.620|
                  |L3.468|
0001d4  2014              MOVS     r0,#0x14              ;713
0001d6  f7fffffe          BL       STATE_SwitchStep
0001da  e047              B        |L3.620|
                  |L3.476|
0001dc  79e0              LDRB     r0,[r4,#7]            ;717
0001de  9002              STR      r0,[sp,#8]            ;717
0001e0  9802              LDR      r0,[sp,#8]            ;719
0001e2  b920              CBNZ     r0,|L3.494|
0001e4  48a9              LDR      r0,|L3.1164|
0001e6  6b40              LDR      r0,[r0,#0x34]         ;721  ; dut_info
0001e8  1e40              SUBS     r0,r0,#1              ;721
0001ea  49a8              LDR      r1,|L3.1164|
0001ec  6348              STR      r0,[r1,#0x34]         ;721  ; dut_info
                  |L3.494|
0001ee  48a7              LDR      r0,|L3.1164|
0001f0  6b41              LDR      r1,[r0,#0x34]         ;723  ; dut_info
0001f2  6a80              LDR      r0,[r0,#0x28]         ;723  ; dut_info
0001f4  1c40              ADDS     r0,r0,#1              ;723
0001f6  4281              CMP      r1,r0                 ;723
0001f8  d203              BCS      |L3.514|
0001fa  2015              MOVS     r0,#0x15              ;725
0001fc  f7fffffe          BL       STATE_SwitchStep
000200  e002              B        |L3.520|
                  |L3.514|
000202  2016              MOVS     r0,#0x16              ;729
000204  f7fffffe          BL       STATE_SwitchStep
                  |L3.520|
000208  e030              B        |L3.620|
                  |L3.522|
00020a  e02f              B        |L3.620|
                  |L3.524|
00020c  79e0              LDRB     r0,[r4,#7]            ;737
00020e  9002              STR      r0,[sp,#8]            ;737
000210  9802              LDR      r0,[sp,#8]            ;739
000212  b930              CBNZ     r0,|L3.546|
000214  201a              MOVS     r0,#0x1a              ;742
000216  f7fffffe          BL       STATE_SwitchStep
00021a  2009              MOVS     r0,#9                 ;743
00021c  f7fffffe          BL       TIMER_ResetTimer
000220  e024              B        |L3.620|
                  |L3.546|
000222  201b              MOVS     r0,#0x1b              ;747
000224  f7fffffe          BL       STATE_SwitchStep
000228  e020              B        |L3.620|
                  |L3.554|
00022a  79e0              LDRB     r0,[r4,#7]            ;751
00022c  9002              STR      r0,[sp,#8]            ;751
00022e  9802              LDR      r0,[sp,#8]            ;753
000230  b948              CBNZ     r0,|L3.582|
000232  4896              LDR      r0,|L3.1164|
000234  6b00              LDR      r0,[r0,#0x30]         ;755  ; dut_info
000236  2800              CMP      r0,#0                 ;755
000238  d904              BLS      |L3.580|
00023a  4894              LDR      r0,|L3.1164|
00023c  6b00              LDR      r0,[r0,#0x30]         ;757  ; dut_info
00023e  1e40              SUBS     r0,r0,#1              ;757
000240  4992              LDR      r1,|L3.1164|
000242  6308              STR      r0,[r1,#0x30]         ;757  ; dut_info
                  |L3.580|
000244  e012              B        |L3.620|
                  |L3.582|
000246  4891              LDR      r0,|L3.1164|
000248  6b00              LDR      r0,[r0,#0x30]         ;761  ; dut_info
00024a  4990              LDR      r1,|L3.1164|
00024c  6a49              LDR      r1,[r1,#0x24]         ;761  ; dut_info
00024e  4288              CMP      r0,r1                 ;761
000250  d203              BCS      |L3.602|
000252  201c              MOVS     r0,#0x1c              ;763
000254  f7fffffe          BL       STATE_SwitchStep
000258  e002              B        |L3.608|
                  |L3.602|
00025a  201d              MOVS     r0,#0x1d              ;767
00025c  f7fffffe          BL       STATE_SwitchStep
                  |L3.608|
000260  e004              B        |L3.620|
                  |L3.610|
000262  201e              MOVS     r0,#0x1e              ;772
000264  f7fffffe          BL       STATE_SwitchStep
000268  e000              B        |L3.620|
                  |L3.618|
00026a  bf00              NOP                            ;776
                  |L3.620|
00026c  bf00              NOP                            ;642
00026e  e1ae              B        |L3.1486|
000270  2f06              CMP      r7,#6                 ;782
000272  d052              BEQ      |L3.794|
000274  dc07              BGT      |L3.646|
000276  b197              CBZ      r7,|L3.670|
000278  2f02              CMP      r7,#2                 ;782
00027a  d011              BEQ      |L3.672|
00027c  2f03              CMP      r7,#3                 ;782
00027e  d028              BEQ      |L3.722|
000280  2f05              CMP      r7,#5                 ;782
000282  d171              BNE      |L3.872|
000284  e03a              B        |L3.764|
                  |L3.646|
000286  2f07              CMP      r7,#7                 ;782
000288  d062              BEQ      |L3.848|
00028a  2f13              CMP      r7,#0x13              ;782
00028c  d064              BEQ      |L3.856|
00028e  2f15              CMP      r7,#0x15              ;782
000290  d073              BEQ      |L3.890|
000292  2f2b              CMP      r7,#0x2b              ;782
000294  d168              BNE      |L3.872|
000296  e087              B        |L3.936|
000298  e08d              B        |L3.950|
00029a  e0df              B        |L3.1116|
00029c  e08c              B        |L3.952|
                  |L3.670|
00029e  e088              B        |L3.946|
                  |L3.672|
0002a0  487a              LDR      r0,|L3.1164|
0002a2  7ec0              LDRB     r0,[r0,#0x1b]         ;789  ; dut_info
0002a4  b910              CBNZ     r0,|L3.684|
0002a6  4879              LDR      r0,|L3.1164|
0002a8  7f40              LDRB     r0,[r0,#0x1d]         ;789  ; dut_info
0002aa  b158              CBZ      r0,|L3.708|
                  |L3.684|
0002ac  4877              LDR      r0,|L3.1164|
0002ae  f890003c          LDRB     r0,[r0,#0x3c]         ;791  ; dut_info
0002b2  b968              CBNZ     r0,|L3.720|
0002b4  2024              MOVS     r0,#0x24              ;793
0002b6  f7fffffe          BL       STATE_SwitchStep
0002ba  2001              MOVS     r0,#1                 ;794
0002bc  4973              LDR      r1,|L3.1164|
0002be  f881003c          STRB     r0,[r1,#0x3c]         ;794
0002c2  e005              B        |L3.720|
                  |L3.708|
0002c4  4871              LDR      r0,|L3.1164|
0002c6  7f00              LDRB     r0,[r0,#0x1c]         ;797  ; dut_info
0002c8  b110              CBZ      r0,|L3.720|
0002ca  204f              MOVS     r0,#0x4f              ;799
0002cc  f7fffffe          BL       STATE_SwitchStep
                  |L3.720|
0002d0  e06f              B        |L3.946|
                  |L3.722|
0002d2  486e              LDR      r0,|L3.1164|
0002d4  7ec0              LDRB     r0,[r0,#0x1b]         ;806  ; dut_info
0002d6  b118              CBZ      r0,|L3.736|
0002d8  2026              MOVS     r0,#0x26              ;808
0002da  f7fffffe          BL       STATE_SwitchStep
0002de  e00c              B        |L3.762|
                  |L3.736|
0002e0  486a              LDR      r0,|L3.1164|
0002e2  7f40              LDRB     r0,[r0,#0x1d]         ;810  ; dut_info
0002e4  b118              CBZ      r0,|L3.750|
0002e6  202a              MOVS     r0,#0x2a              ;812
0002e8  f7fffffe          BL       STATE_SwitchStep
0002ec  e005              B        |L3.762|
                  |L3.750|
0002ee  4867              LDR      r0,|L3.1164|
0002f0  7f00              LDRB     r0,[r0,#0x1c]         ;814  ; dut_info
0002f2  b110              CBZ      r0,|L3.762|
0002f4  204f              MOVS     r0,#0x4f              ;816
0002f6  f7fffffe          BL       STATE_SwitchStep
                  |L3.762|
0002fa  e05a              B        |L3.946|
                  |L3.764|
0002fc  79e0              LDRB     r0,[r4,#7]            ;821
0002fe  9002              STR      r0,[sp,#8]            ;821
000300  9802              LDR      r0,[sp,#8]            ;823
000302  b918              CBNZ     r0,|L3.780|
000304  2026              MOVS     r0,#0x26              ;826
000306  f7fffffe          BL       STATE_SwitchStep
00030a  e052              B        |L3.946|
                  |L3.780|
00030c  2000              MOVS     r0,#0                 ;829
00030e  495f              LDR      r1,|L3.1164|
000310  6308              STR      r0,[r1,#0x30]         ;829  ; dut_info
000312  2028              MOVS     r0,#0x28              ;830
000314  f7fffffe          BL       STATE_SwitchStep
000318  e04b              B        |L3.946|
                  |L3.794|
00031a  79e0              LDRB     r0,[r4,#7]            ;834
00031c  9002              STR      r0,[sp,#8]            ;834
00031e  9802              LDR      r0,[sp,#8]            ;836
000320  b940              CBNZ     r0,|L3.820|
000322  485a              LDR      r0,|L3.1164|
000324  6b00              LDR      r0,[r0,#0x30]         ;838  ; dut_info
000326  2800              CMP      r0,#0                 ;838
000328  d904              BLS      |L3.820|
00032a  4858              LDR      r0,|L3.1164|
00032c  6b00              LDR      r0,[r0,#0x30]         ;840  ; dut_info
00032e  1e40              SUBS     r0,r0,#1              ;840
000330  4956              LDR      r1,|L3.1164|
000332  6308              STR      r0,[r1,#0x30]         ;840  ; dut_info
                  |L3.820|
000334  4855              LDR      r0,|L3.1164|
000336  6b00              LDR      r0,[r0,#0x30]         ;843  ; dut_info
000338  4954              LDR      r1,|L3.1164|
00033a  6a49              LDR      r1,[r1,#0x24]         ;843  ; dut_info
00033c  4288              CMP      r0,r1                 ;843
00033e  d203              BCS      |L3.840|
000340  2028              MOVS     r0,#0x28              ;845
000342  f7fffffe          BL       STATE_SwitchStep
000346  e002              B        |L3.846|
                  |L3.840|
000348  2029              MOVS     r0,#0x29              ;849
00034a  f7fffffe          BL       STATE_SwitchStep
                  |L3.846|
00034e  e030              B        |L3.946|
                  |L3.848|
000350  202e              MOVS     r0,#0x2e              ;854
000352  f7fffffe          BL       STATE_SwitchStep
000356  e02c              B        |L3.946|
                  |L3.856|
000358  79e0              LDRB     r0,[r4,#7]            ;859
00035a  9002              STR      r0,[sp,#8]            ;859
00035c  9802              LDR      r0,[sp,#8]            ;861
00035e  b928              CBNZ     r0,|L3.876|
000360  202a              MOVS     r0,#0x2a              ;864
000362  f7fffffe          BL       STATE_SwitchStep
000366  e024              B        |L3.946|
                  |L3.872|
000368  e022              B        |L3.944|
00036a  e006              B        |L3.890|
                  |L3.876|
00036c  2000              MOVS     r0,#0                 ;868
00036e  4947              LDR      r1,|L3.1164|
000370  6348              STR      r0,[r1,#0x34]         ;868  ; dut_info
000372  202c              MOVS     r0,#0x2c              ;869
000374  f7fffffe          BL       STATE_SwitchStep
000378  e01b              B        |L3.946|
                  |L3.890|
00037a  79e0              LDRB     r0,[r4,#7]            ;873
00037c  9002              STR      r0,[sp,#8]            ;873
00037e  9802              LDR      r0,[sp,#8]            ;875
000380  b920              CBNZ     r0,|L3.908|
000382  4842              LDR      r0,|L3.1164|
000384  6b40              LDR      r0,[r0,#0x34]         ;877  ; dut_info
000386  1e40              SUBS     r0,r0,#1              ;877
000388  4940              LDR      r1,|L3.1164|
00038a  6348              STR      r0,[r1,#0x34]         ;877  ; dut_info
                  |L3.908|
00038c  483f              LDR      r0,|L3.1164|
00038e  6b41              LDR      r1,[r0,#0x34]         ;879  ; dut_info
000390  6a80              LDR      r0,[r0,#0x28]         ;879  ; dut_info
000392  1c40              ADDS     r0,r0,#1              ;879
000394  4281              CMP      r1,r0                 ;879
000396  d203              BCS      |L3.928|
000398  202c              MOVS     r0,#0x2c              ;881
00039a  f7fffffe          BL       STATE_SwitchStep
00039e  e002              B        |L3.934|
                  |L3.928|
0003a0  202d              MOVS     r0,#0x2d              ;885
0003a2  f7fffffe          BL       STATE_SwitchStep
                  |L3.934|
0003a6  e004              B        |L3.946|
                  |L3.936|
0003a8  202e              MOVS     r0,#0x2e              ;890
0003aa  f7fffffe          BL       STATE_SwitchStep
0003ae  e000              B        |L3.946|
                  |L3.944|
0003b0  bf00              NOP                            ;894
                  |L3.946|
0003b2  bf00              NOP                            ;785
0003b4  e10b              B        |L3.1486|
                  |L3.950|
0003b6  bf00              NOP                            ;899
                  |L3.952|
0003b8  1eb8              SUBS     r0,r7,#2              ;901
0003ba  2806              CMP      r0,#6                 ;901
0003bc  d24b              BCS      |L3.1110|
0003be  e8dff000          TBB      [pc,r0]               ;901
0003c2  030f              DCB      0x03,0x0f
0003c4  161d2f46          DCB      0x16,0x1d,0x2f,0x46
0003c8  4830              LDR      r0,|L3.1164|
0003ca  f890003c          LDRB     r0,[r0,#0x3c]         ;905  ; dut_info
0003ce  b930              CBNZ     r0,|L3.990|
0003d0  2032              MOVS     r0,#0x32              ;908
0003d2  f7fffffe          BL       STATE_SwitchStep
0003d6  2001              MOVS     r0,#1                 ;909
0003d8  492c              LDR      r1,|L3.1164|
0003da  f881003c          STRB     r0,[r1,#0x3c]         ;909
                  |L3.990|
0003de  e03b              B        |L3.1112|
0003e0  482a              LDR      r0,|L3.1164|
0003e2  7ec0              LDRB     r0,[r0,#0x1b]         ;915  ; dut_info
0003e4  b110              CBZ      r0,|L3.1004|
0003e6  2034              MOVS     r0,#0x34              ;917
0003e8  f7fffffe          BL       STATE_SwitchStep
                  |L3.1004|
0003ec  e034              B        |L3.1112|
0003ee  4827              LDR      r0,|L3.1164|
0003f0  7f00              LDRB     r0,[r0,#0x1c]         ;922  ; dut_info
0003f2  b110              CBZ      r0,|L3.1018|
0003f4  204f              MOVS     r0,#0x4f              ;924
0003f6  f7fffffe          BL       STATE_SwitchStep
                  |L3.1018|
0003fa  e02d              B        |L3.1112|
0003fc  2035              MOVS     r0,#0x35              ;932
0003fe  f7fffffe          BL       STATE_SwitchStep
000402  79e0              LDRB     r0,[r4,#7]            ;934
000404  9002              STR      r0,[sp,#8]            ;934
000406  9802              LDR      r0,[sp,#8]            ;937
000408  b918              CBNZ     r0,|L3.1042|
00040a  2034              MOVS     r0,#0x34              ;940
00040c  f7fffffe          BL       STATE_SwitchStep
000410  e022              B        |L3.1112|
                  |L3.1042|
000412  2000              MOVS     r0,#0                 ;944
000414  491d              LDR      r1,|L3.1164|
000416  6308              STR      r0,[r1,#0x30]         ;944  ; dut_info
000418  2036              MOVS     r0,#0x36              ;945
00041a  f7fffffe          BL       STATE_SwitchStep
00041e  e01b              B        |L3.1112|
000420  79e0              LDRB     r0,[r4,#7]            ;949
000422  9002              STR      r0,[sp,#8]            ;949
000424  9802              LDR      r0,[sp,#8]            ;950
000426  b920              CBNZ     r0,|L3.1074|
000428  4818              LDR      r0,|L3.1164|
00042a  6b00              LDR      r0,[r0,#0x30]         ;952  ; dut_info
00042c  1e40              SUBS     r0,r0,#1              ;952
00042e  4917              LDR      r1,|L3.1164|
000430  6308              STR      r0,[r1,#0x30]         ;952  ; dut_info
                  |L3.1074|
000432  4816              LDR      r0,|L3.1164|
000434  6b00              LDR      r0,[r0,#0x30]         ;955  ; dut_info
000436  4915              LDR      r1,|L3.1164|
000438  6a49              LDR      r1,[r1,#0x24]         ;955  ; dut_info
00043a  4288              CMP      r0,r1                 ;955
00043c  d203              BCS      |L3.1094|
00043e  2036              MOVS     r0,#0x36              ;957
000440  f7fffffe          BL       STATE_SwitchStep
000444  e002              B        |L3.1100|
                  |L3.1094|
000446  2037              MOVS     r0,#0x37              ;961
000448  f7fffffe          BL       STATE_SwitchStep
                  |L3.1100|
00044c  e004              B        |L3.1112|
00044e  2038              MOVS     r0,#0x38              ;966
000450  f7fffffe          BL       STATE_SwitchStep
000454  e000              B        |L3.1112|
                  |L3.1110|
000456  bf00              NOP                            ;970
                  |L3.1112|
000458  bf00              NOP                            ;911
00045a  e0b8              B        |L3.1486|
                  |L3.1116|
00045c  2f01              CMP      r7,#1                 ;977
00045e  d006              BEQ      |L3.1134|
000460  2f02              CMP      r7,#2                 ;977
000462  d022              BEQ      |L3.1194|
000464  2f03              CMP      r7,#3                 ;977
000466  d04a              BEQ      |L3.1278|
000468  2f04              CMP      r7,#4                 ;977
00046a  d177              BNE      |L3.1372|
00046c  e07b              B        |L3.1382|
                  |L3.1134|
00046e  4807              LDR      r0,|L3.1164|
000470  f890003c          LDRB     r0,[r0,#0x3c]         ;982  ; dut_info
000474  b9c0              CBNZ     r0,|L3.1192|
000476  4805              LDR      r0,|L3.1164|
000478  7f40              LDRB     r0,[r0,#0x1d]         ;984  ; dut_info
00047a  b910              CBNZ     r0,|L3.1154|
00047c  4803              LDR      r0,|L3.1164|
00047e  7ec0              LDRB     r0,[r0,#0x1b]         ;984  ; dut_info
000480  b140              CBZ      r0,|L3.1172|
                  |L3.1154|
000482  203d              MOVS     r0,#0x3d              ;986
000484  f7fffffe          BL       STATE_SwitchStep
000488  e00a              B        |L3.1184|
00048a  0000              DCW      0x0000
                  |L3.1164|
                          DCD      dut_info
                  |L3.1168|
                          DCD      writeUiVerFlag
                  |L3.1172|
000494  4864              LDR      r0,|L3.1576|
000496  7f00              LDRB     r0,[r0,#0x1c]         ;988  ; dut_info
000498  b110              CBZ      r0,|L3.1184|
00049a  204f              MOVS     r0,#0x4f              ;990
00049c  f7fffffe          BL       STATE_SwitchStep
                  |L3.1184|
0004a0  2001              MOVS     r0,#1                 ;992
0004a2  4961              LDR      r1,|L3.1576|
0004a4  f881003c          STRB     r0,[r1,#0x3c]         ;992
                  |L3.1192|
0004a8  e08e              B        |L3.1480|
                  |L3.1194|
0004aa  485f              LDR      r0,|L3.1576|
0004ac  7ec0              LDRB     r0,[r0,#0x1b]         ;998  ; dut_info
0004ae  b188              CBZ      r0,|L3.1236|
0004b0  2000              MOVS     r0,#0                 ;1000
0004b2  495d              LDR      r1,|L3.1576|
0004b4  6308              STR      r0,[r1,#0x30]         ;1000  ; dut_info
0004b6  203e              MOVS     r0,#0x3e              ;1001
0004b8  f7fffffe          BL       STATE_SwitchStep
0004bc  2001              MOVS     r0,#1                 ;1002
0004be  1e81              SUBS     r1,r0,#2              ;1002
0004c0  233f              MOVS     r3,#0x3f              ;1002
0004c2  4a5a              LDR      r2,|L3.1580|
0004c4  e9cd1000          STRD     r1,r0,[sp,#0]         ;1002
0004c8  f44f717a          MOV      r1,#0x3e8             ;1002
0004cc  200a              MOVS     r0,#0xa               ;1002
0004ce  f7fffffe          BL       TIMER_AddTask
0004d2  e013              B        |L3.1276|
                  |L3.1236|
0004d4  4854              LDR      r0,|L3.1576|
0004d6  7f40              LDRB     r0,[r0,#0x1d]         ;1009  ; dut_info
0004d8  b180              CBZ      r0,|L3.1276|
0004da  2000              MOVS     r0,#0                 ;1011
0004dc  4952              LDR      r1,|L3.1576|
0004de  6348              STR      r0,[r1,#0x34]         ;1011  ; dut_info
0004e0  2041              MOVS     r0,#0x41              ;1012
0004e2  f7fffffe          BL       STATE_SwitchStep
0004e6  2001              MOVS     r0,#1                 ;1013
0004e8  1e81              SUBS     r1,r0,#2              ;1013
0004ea  2342              MOVS     r3,#0x42              ;1013
0004ec  4a4f              LDR      r2,|L3.1580|
0004ee  e9cd1000          STRD     r1,r0,[sp,#0]         ;1013
0004f2  f44f717a          MOV      r1,#0x3e8             ;1013
0004f6  200a              MOVS     r0,#0xa               ;1013
0004f8  f7fffffe          BL       TIMER_AddTask
                  |L3.1276|
0004fc  e064              B        |L3.1480|
                  |L3.1278|
0004fe  2009              MOVS     r0,#9                 ;1023
000500  f7fffffe          BL       TIMER_ResetTimer
000504  4848              LDR      r0,|L3.1576|
000506  7ec0              LDRB     r0,[r0,#0x1b]         ;1024  ; dut_info
000508  b1a0              CBZ      r0,|L3.1332|
00050a  4847              LDR      r0,|L3.1576|
00050c  6b01              LDR      r1,[r0,#0x30]         ;1026  ; dut_info
00050e  6a40              LDR      r0,[r0,#0x24]         ;1026  ; dut_info
000510  1e40              SUBS     r0,r0,#1              ;1026
000512  4281              CMP      r1,r0                 ;1026
000514  d20a              BCS      |L3.1324|
000516  79e0              LDRB     r0,[r4,#7]            ;1028
000518  b120              CBZ      r0,|L3.1316|
00051a  4843              LDR      r0,|L3.1576|
00051c  6b00              LDR      r0,[r0,#0x30]         ;1030  ; dut_info
00051e  1c40              ADDS     r0,r0,#1              ;1030
000520  4941              LDR      r1,|L3.1576|
000522  6308              STR      r0,[r1,#0x30]         ;1030  ; dut_info
                  |L3.1316|
000524  203e              MOVS     r0,#0x3e              ;1032
000526  f7fffffe          BL       STATE_SwitchStep
00052a  e01b              B        |L3.1380|
                  |L3.1324|
00052c  2040              MOVS     r0,#0x40              ;1036
00052e  f7fffffe          BL       STATE_SwitchStep
000532  e017              B        |L3.1380|
                  |L3.1332|
000534  483c              LDR      r0,|L3.1576|
000536  7f40              LDRB     r0,[r0,#0x1d]         ;1039  ; dut_info
000538  b1a0              CBZ      r0,|L3.1380|
00053a  483b              LDR      r0,|L3.1576|
00053c  6b41              LDR      r1,[r0,#0x34]         ;1041  ; dut_info
00053e  6a80              LDR      r0,[r0,#0x28]         ;1041  ; dut_info
000540  1e40              SUBS     r0,r0,#1              ;1041
000542  4281              CMP      r1,r0                 ;1041
000544  d20b              BCS      |L3.1374|
000546  79e0              LDRB     r0,[r4,#7]            ;1043
000548  b120              CBZ      r0,|L3.1364|
00054a  4837              LDR      r0,|L3.1576|
00054c  6b40              LDR      r0,[r0,#0x34]         ;1045  ; dut_info
00054e  1c40              ADDS     r0,r0,#1              ;1045
000550  4935              LDR      r1,|L3.1576|
000552  6348              STR      r0,[r1,#0x34]         ;1045  ; dut_info
                  |L3.1364|
000554  2041              MOVS     r0,#0x41              ;1047
000556  f7fffffe          BL       STATE_SwitchStep
00055a  e003              B        |L3.1380|
                  |L3.1372|
00055c  e033              B        |L3.1478|
                  |L3.1374|
00055e  2040              MOVS     r0,#0x40              ;1051
000560  f7fffffe          BL       STATE_SwitchStep
                  |L3.1380|
000564  e030              B        |L3.1480|
                  |L3.1382|
000566  79e0              LDRB     r0,[r4,#7]            ;1057
000568  b198              CBZ      r0,|L3.1426|
00056a  482f              LDR      r0,|L3.1576|
00056c  7ec0              LDRB     r0,[r0,#0x1b]         ;1060  ; dut_info
00056e  b130              CBZ      r0,|L3.1406|
000570  2001              MOVS     r0,#1                 ;1062
000572  492d              LDR      r1,|L3.1576|
000574  f881003f          STRB     r0,[r1,#0x3f]         ;1062
000578  2000              MOVS     r0,#0                 ;1063
00057a  76c8              STRB     r0,[r1,#0x1b]         ;1063
00057c  e01c              B        |L3.1464|
                  |L3.1406|
00057e  482a              LDR      r0,|L3.1576|
000580  7f40              LDRB     r0,[r0,#0x1d]         ;1065  ; dut_info
000582  b1c8              CBZ      r0,|L3.1464|
000584  2001              MOVS     r0,#1                 ;1067
000586  4928              LDR      r1,|L3.1576|
000588  f881003e          STRB     r0,[r1,#0x3e]         ;1067
00058c  2000              MOVS     r0,#0                 ;1068
00058e  7748              STRB     r0,[r1,#0x1d]         ;1068
000590  e012              B        |L3.1464|
                  |L3.1426|
000592  4825              LDR      r0,|L3.1576|
000594  7ec0              LDRB     r0,[r0,#0x1b]         ;1073  ; dut_info
000596  b130              CBZ      r0,|L3.1446|
000598  2001              MOVS     r0,#1                 ;1075
00059a  4923              LDR      r1,|L3.1576|
00059c  f8810039          STRB     r0,[r1,#0x39]         ;1075
0005a0  2000              MOVS     r0,#0                 ;1076
0005a2  76c8              STRB     r0,[r1,#0x1b]         ;1076
0005a4  e008              B        |L3.1464|
                  |L3.1446|
0005a6  4820              LDR      r0,|L3.1576|
0005a8  7f40              LDRB     r0,[r0,#0x1d]         ;1078  ; dut_info
0005aa  b128              CBZ      r0,|L3.1464|
0005ac  2001              MOVS     r0,#1                 ;1080
0005ae  491e              LDR      r1,|L3.1576|
0005b0  f8810039          STRB     r0,[r1,#0x39]         ;1080
0005b4  2000              MOVS     r0,#0                 ;1081
0005b6  7748              STRB     r0,[r1,#0x1d]         ;1081
                  |L3.1464|
0005b8  2009              MOVS     r0,#9                 ;1084
0005ba  f7fffffe          BL       TIMER_KillTask
0005be  2044              MOVS     r0,#0x44              ;1085
0005c0  f7fffffe          BL       STATE_SwitchStep
0005c4  e000              B        |L3.1480|
                  |L3.1478|
0005c6  bf00              NOP                            ;1089
                  |L3.1480|
0005c8  bf00              NOP                            ;994
0005ca  e000              B        |L3.1486|
                  |L3.1484|
0005cc  bf00              NOP                            ;1094
                  |L3.1486|
0005ce  bf00              NOP                            ;636
0005d0  20d7              MOVS     r0,#0xd7              ;1097
0005d2  4370              MULS     r0,r6,r0              ;1097
0005d4  f105019c          ADD      r1,r5,#0x9c           ;1097
0005d8  eb0100c0          ADD      r0,r1,r0,LSL #3       ;1097
0005dc  f8b006b4          LDRH     r0,[r0,#0x6b4]        ;1097
0005e0  1c40              ADDS     r0,r0,#1              ;1097
0005e2  b282              UXTH     r2,r0                 ;1097
0005e4  20d7              MOVS     r0,#0xd7              ;1097
0005e6  4370              MULS     r0,r6,r0              ;1097
0005e8  eb0100c0          ADD      r0,r1,r0,LSL #3       ;1097
0005ec  f8a026b4          STRH     r2,[r0,#0x6b4]        ;1097
0005f0  20d7              MOVS     r0,#0xd7              ;1098
0005f2  4370              MULS     r0,r6,r0              ;1098
0005f4  eb0100c0          ADD      r0,r1,r0,LSL #3       ;1098
0005f8  f8b006b4          LDRH     r0,[r0,#0x6b4]        ;1098
0005fc  210b              MOVS     r1,#0xb               ;1098
0005fe  fb90f2f1          SDIV     r2,r0,r1              ;1098
000602  fb010012          MLS      r0,r1,r2,r0           ;1098
000606  b282              UXTH     r2,r0                 ;1098
000608  20d7              MOVS     r0,#0xd7              ;1098
00060a  4370              MULS     r0,r6,r0              ;1098
00060c  f105019c          ADD      r1,r5,#0x9c           ;1098
000610  eb0100c0          ADD      r0,r1,r0,LSL #3       ;1098
000614  f8a026b4          STRH     r2,[r0,#0x6b4]        ;1098
000618  bf00              NOP                            ;615
                  |L3.1562|
00061a  1c70              ADDS     r0,r6,#1              ;610
00061c  b2c6              UXTB     r6,r0                 ;610
                  |L3.1566|
00061e  2e01              CMP      r6,#1                 ;610
000620  f6ffacf9          BLT      |L3.22|
000624  bf00              NOP      
000626  e4f3              B        |L3.16|
;;;1101   
                          ENDP

                  |L3.1576|
                          DCD      dut_info
                  |L3.1580|
                          DCD      STATE_SwitchStep

                          AREA ||i.CAN_ConfirmTempCmdFrameBuff||, CODE, READONLY, ALIGN=1

                  CAN_ConfirmTempCmdFrameBuff PROC
;;;1168   // 将临时缓冲区添加到命令帧缓冲区中，其本质操作是承认临时缓冲区数据有效
;;;1169   BOOL CAN_ConfirmTempCmdFrameBuff(CAN_CB *pCB, uint8 sourceSelect)
000000  b570              PUSH     {r4-r6,lr}
;;;1170   {
000002  4602              MOV      r2,r0
;;;1171       CAN_CMD_FRAME *pCmdFrame = NULL;
000004  2300              MOVS     r3,#0
;;;1172   
;;;1173       // 参数合法性检验
;;;1174       if (NULL == pCB)
000006  b90a              CBNZ     r2,|L4.12|
;;;1175       {
;;;1176           return FALSE;
000008  2000              MOVS     r0,#0
                  |L4.10|
;;;1177       }
;;;1178   
;;;1179       // 临时缓冲区为空，不予添加
;;;1180       pCmdFrame = &pCB->rx.rxEachNode[sourceSelect].cmdQueue[pCB->rx.rxEachNode[sourceSelect].end];
;;;1181   
;;;1182       if (0 == pCmdFrame->length)
;;;1183       {
;;;1184           return FALSE;
;;;1185       }
;;;1186   
;;;1187       // 添加
;;;1188       pCB->rx.rxEachNode[sourceSelect].end++;
;;;1189       pCB->rx.rxEachNode[sourceSelect].end %= CAN_RX_QUEUE_SIZE;
;;;1190       // 该行的作用是将新的添加位置有效数据个数清零，以便将这个位置当做临时帧缓冲区
;;;1191       pCB->rx.rxEachNode[sourceSelect].cmdQueue[pCB->rx.rxEachNode[sourceSelect].end].length = 0;
;;;1192   
;;;1193       return TRUE;
;;;1194   }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  20d7              MOVS     r0,#0xd7              ;1180
00000e  4348              MULS     r0,r1,r0              ;1180
000010  f102049c          ADD      r4,r2,#0x9c           ;1180
000014  eb0405c0          ADD      r5,r4,r0,LSL #3       ;1180
000018  20d7              MOVS     r0,#0xd7              ;1180
00001a  4348              MULS     r0,r1,r0              ;1180
00001c  eb0400c0          ADD      r0,r4,r0,LSL #3       ;1180
000020  f8b006b6          LDRH     r0,[r0,#0x6b6]        ;1180
000024  ebc004c0          RSB      r4,r0,r0,LSL #3       ;1180
000028  eb041040          ADD      r0,r4,r0,LSL #5       ;1180
00002c  eb050380          ADD      r3,r5,r0,LSL #2       ;1180
000030  f8b3009a          LDRH     r0,[r3,#0x9a]         ;1182
000034  b908              CBNZ     r0,|L4.58|
000036  2000              MOVS     r0,#0                 ;1184
000038  e7e7              B        |L4.10|
                  |L4.58|
00003a  20d7              MOVS     r0,#0xd7              ;1188
00003c  4348              MULS     r0,r1,r0              ;1188
00003e  f102049c          ADD      r4,r2,#0x9c           ;1188
000042  eb0400c0          ADD      r0,r4,r0,LSL #3       ;1188
000046  f8b006b6          LDRH     r0,[r0,#0x6b6]        ;1188
00004a  1c40              ADDS     r0,r0,#1              ;1188
00004c  b285              UXTH     r5,r0                 ;1188
00004e  20d7              MOVS     r0,#0xd7              ;1188
000050  4348              MULS     r0,r1,r0              ;1188
000052  eb0400c0          ADD      r0,r4,r0,LSL #3       ;1188
000056  f8a056b6          STRH     r5,[r0,#0x6b6]        ;1188
00005a  20d7              MOVS     r0,#0xd7              ;1189
00005c  4348              MULS     r0,r1,r0              ;1189
00005e  eb0400c0          ADD      r0,r4,r0,LSL #3       ;1189
000062  f8b006b6          LDRH     r0,[r0,#0x6b6]        ;1189
000066  240b              MOVS     r4,#0xb               ;1189
000068  fb90f5f4          SDIV     r5,r0,r4              ;1189
00006c  fb040015          MLS      r0,r4,r5,r0           ;1189
000070  b285              UXTH     r5,r0                 ;1189
000072  20d7              MOVS     r0,#0xd7              ;1189
000074  4348              MULS     r0,r1,r0              ;1189
000076  f102049c          ADD      r4,r2,#0x9c           ;1189
00007a  eb0400c0          ADD      r0,r4,r0,LSL #3       ;1189
00007e  f8a056b6          STRH     r5,[r0,#0x6b6]        ;1189
000082  2500              MOVS     r5,#0                 ;1191
000084  20d7              MOVS     r0,#0xd7              ;1191
000086  4348              MULS     r0,r1,r0              ;1191
000088  eb0406c0          ADD      r6,r4,r0,LSL #3       ;1191
00008c  20d7              MOVS     r0,#0xd7              ;1191
00008e  4348              MULS     r0,r1,r0              ;1191
000090  eb0400c0          ADD      r0,r4,r0,LSL #3       ;1191
000094  f8b006b6          LDRH     r0,[r0,#0x6b6]        ;1191
000098  ebc004c0          RSB      r4,r0,r0,LSL #3       ;1191
00009c  eb041040          ADD      r0,r4,r0,LSL #5       ;1191
0000a0  eb060080          ADD      r0,r6,r0,LSL #2       ;1191
0000a4  f8a0509a          STRH     r5,[r0,#0x9a]         ;1191
0000a8  2001              MOVS     r0,#1                 ;1193
0000aa  e7ae              B        |L4.10|
;;;1195   
                          ENDP


                          AREA ||i.CAN_DRIVE_AddTxArray||, CODE, READONLY, ALIGN=2

                  CAN_DRIVE_AddTxArray PROC
;;;1238   // 向发送缓冲区中添加一条待发送序列
;;;1239   BOOL CAN_DRIVE_AddTxArray(uint32 id, uint8 *pArray, uint8 length)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1240   {
000002  4605              MOV      r5,r0
000004  460b              MOV      r3,r1
;;;1241       uint16 i;
;;;1242       uint16 head = sysCanCB.tx.head;
000006  4833              LDR      r0,|L5.212|
000008  f8b06d6c          LDRH     r6,[r0,#0xd6c]
;;;1243       uint16 end = sysCanCB.tx.end;
00000c  f8b01d6e          LDRH     r1,[r0,#0xd6e]
;;;1244   
;;;1245       // 参数检验
;;;1246       if ((NULL == pArray) || (0 == length))
000010  b103              CBZ      r3,|L5.20|
000012  b90a              CBNZ     r2,|L5.24|
                  |L5.20|
;;;1247       {
;;;1248           return FALSE;
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;1249       }
;;;1250   
;;;1251       // 发送缓冲区已满，不予接收
;;;1252       if ((end + 1) % CAN_TX_QUEUE_SIZE == head)
;;;1253       {
;;;1254           return FALSE;
;;;1255       }
;;;1256   
;;;1257       // BC147和280产品软件会过滤id信息
;;;1258       if((DUT_NAME_BC147 == dut_info.nam) || (DUT_NAME_BC280 == dut_info.nam)) 
;;;1259       {
;;;1260          sysCanCB.tx.cmdQueue[end].deviceID = 0x1801FFF4;
;;;1261       }
;;;1262       else
;;;1263       {
;;;1264          sysCanCB.tx.cmdQueue[end].deviceID = id;        
;;;1265       }
;;;1266   
;;;1267       for (i = 0; i < length; i++)
;;;1268       {
;;;1269           sysCanCB.tx.cmdQueue[end].buff[i] = *pArray++;
;;;1270       }
;;;1271       sysCanCB.tx.cmdQueue[end].length = length;
;;;1272   
;;;1273       // 发送环形队列更新位置
;;;1274       sysCanCB.tx.end++;
;;;1275       sysCanCB.tx.end %= CAN_TX_QUEUE_SIZE;
;;;1276       sysCanCB.tx.cmdQueue[sysCanCB.tx.end].length = 0;
;;;1277   
;;;1278       return TRUE;
;;;1279   }
000016  bdf0              POP      {r4-r7,pc}
                  |L5.24|
000018  1c48              ADDS     r0,r1,#1              ;1252
00001a  270a              MOVS     r7,#0xa               ;1252
00001c  fb90fcf7          SDIV     r12,r0,r7             ;1252
000020  fb07001c          MLS      r0,r7,r12,r0          ;1252
000024  42b0              CMP      r0,r6                 ;1252
000026  d101              BNE      |L5.44|
000028  2000              MOVS     r0,#0                 ;1254
00002a  e7f4              B        |L5.22|
                  |L5.44|
00002c  482a              LDR      r0,|L5.216|
00002e  7dc0              LDRB     r0,[r0,#0x17]         ;1258  ; dut_info
000030  2801              CMP      r0,#1                 ;1258
000032  d003              BEQ      |L5.60|
000034  4828              LDR      r0,|L5.216|
000036  7dc0              LDRB     r0,[r0,#0x17]         ;1258  ; dut_info
000038  2802              CMP      r0,#2                 ;1258
00003a  d108              BNE      |L5.78|
                  |L5.60|
00003c  4f27              LDR      r7,|L5.220|
00003e  ebc100c1          RSB      r0,r1,r1,LSL #3       ;1260
000042  eb001c41          ADD      r12,r0,r1,LSL #5      ;1260
000046  4826              LDR      r0,|L5.224|
000048  f840702c          STR      r7,[r0,r12,LSL #2]    ;1260
00004c  e006              B        |L5.92|
                  |L5.78|
00004e  ebc100c1          RSB      r0,r1,r1,LSL #3       ;1264
000052  eb001741          ADD      r7,r0,r1,LSL #5       ;1264
000056  4822              LDR      r0,|L5.224|
000058  f8405027          STR      r5,[r0,r7,LSL #2]     ;1264
                  |L5.92|
00005c  2400              MOVS     r4,#0                 ;1267
00005e  e00c              B        |L5.122|
                  |L5.96|
000060  f8137b01          LDRB     r7,[r3],#1            ;1269
000064  ebc100c1          RSB      r0,r1,r1,LSL #3       ;1269
000068  eb001c41          ADD      r12,r0,r1,LSL #5      ;1269
00006c  481c              LDR      r0,|L5.224|
00006e  eb00008c          ADD      r0,r0,r12,LSL #2      ;1269
000072  1d00              ADDS     r0,r0,#4              ;1269
000074  5507              STRB     r7,[r0,r4]            ;1269
000076  1c60              ADDS     r0,r4,#1              ;1267
000078  b284              UXTH     r4,r0                 ;1267
                  |L5.122|
00007a  4294              CMP      r4,r2                 ;1267
00007c  dbf0              BLT      |L5.96|
00007e  ebc100c1          RSB      r0,r1,r1,LSL #3       ;1271
000082  eb001741          ADD      r7,r0,r1,LSL #5       ;1271
000086  4816              LDR      r0,|L5.224|
000088  eb000087          ADD      r0,r0,r7,LSL #2       ;1271
00008c  f8a0209a          STRH     r2,[r0,#0x9a]         ;1271
000090  4810              LDR      r0,|L5.212|
000092  f8b00d6e          LDRH     r0,[r0,#0xd6e]        ;1274
000096  1c40              ADDS     r0,r0,#1              ;1274
000098  b287              UXTH     r7,r0                 ;1274
00009a  480e              LDR      r0,|L5.212|
00009c  f8a07d6e          STRH     r7,[r0,#0xd6e]        ;1274
0000a0  f8b00d6e          LDRH     r0,[r0,#0xd6e]        ;1275
0000a4  270a              MOVS     r7,#0xa               ;1275
0000a6  fb90fcf7          SDIV     r12,r0,r7             ;1275
0000aa  fb07001c          MLS      r0,r7,r12,r0          ;1275
0000ae  b287              UXTH     r7,r0                 ;1275
0000b0  4808              LDR      r0,|L5.212|
0000b2  f8a07d6e          STRH     r7,[r0,#0xd6e]        ;1275
0000b6  2700              MOVS     r7,#0                 ;1276
0000b8  f8b00d6e          LDRH     r0,[r0,#0xd6e]        ;1276
0000bc  ebc00cc0          RSB      r12,r0,r0,LSL #3      ;1276
0000c0  eb0c1c40          ADD      r12,r12,r0,LSL #5     ;1276
0000c4  4806              LDR      r0,|L5.224|
0000c6  eb00008c          ADD      r0,r0,r12,LSL #2      ;1276
0000ca  f8a0709a          STRH     r7,[r0,#0x9a]         ;1276
0000ce  2001              MOVS     r0,#1                 ;1278
0000d0  e7a1              B        |L5.22|
;;;1280   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L5.212|
                          DCD      sysCanCB
                  |L5.216|
                          DCD      dut_info
                  |L5.220|
                          DCD      0x1801fff4
                  |L5.224|
                          DCD      sysCanCB+0x754

                          AREA ||i.CAN_DataStructureInit||, CODE, READONLY, ALIGN=1

                  CAN_DataStructureInit PROC
;;;109    // 数据结构初始化
;;;110    void CAN_DataStructureInit(CAN_CB *pCB)
000000  b530              PUSH     {r4,r5,lr}
;;;111    {
000002  4601              MOV      r1,r0
;;;112        uint8 i;
;;;113        uint8 j;
;;;114    
;;;115        // 参数合法性检验
;;;116        if (NULL == pCB)
000004  b901              CBNZ     r1,|L6.8|
                  |L6.6|
;;;117        {
;;;118            return;
;;;119        }
;;;120    
;;;121        pCB->tx.txBusy = FALSE;
;;;122        pCB->tx.index = 0;
;;;123        pCB->tx.head = 0;
;;;124        pCB->tx.end = 0;
;;;125        for (i = 0; i < CAN_TX_QUEUE_SIZE; i++)
;;;126        {
;;;127            pCB->tx.cmdQueue[i].length = 0;
;;;128        }
;;;129    
;;;130        for (i = 0; i < CAN_DEVICE_SOURCE_ID_MAX; i++)
;;;131        {
;;;132            pCB->rxFIFO.rxFIFOEachNode[i].head = 0;
;;;133            pCB->rxFIFO.rxFIFOEachNode[i].end = 0;
;;;134            pCB->rxFIFO.rxFIFOEachNode[i].currentProcessIndex = 0;
;;;135        }
;;;136    
;;;137        for (i = 0; i < CAN_DEVICE_SOURCE_ID_MAX; i++)
;;;138        {
;;;139            for (j = 0; j < CAN_RX_QUEUE_SIZE; j++)
;;;140            {
;;;141                pCB->rx.rxEachNode[i].cmdQueue[j].length = 0;
;;;142            }
;;;143            pCB->rx.rxEachNode[i].head = 0;
;;;144            pCB->rx.rxEachNode[i].end = 0;
;;;145        }
;;;146    }
000006  bd30              POP      {r4,r5,pc}
                  |L6.8|
000008  2400              MOVS     r4,#0                 ;121
00000a  f8814d72          STRB     r4,[r1,#0xd72]        ;121
00000e  f8a14d70          STRH     r4,[r1,#0xd70]        ;122
000012  f8a14d6c          STRH     r4,[r1,#0xd6c]        ;123
000016  f8a14d6e          STRH     r4,[r1,#0xd6e]        ;124
00001a  2000              MOVS     r0,#0                 ;125
00001c  e00c              B        |L6.56|
                  |L6.30|
00001e  2400              MOVS     r4,#0                 ;127
000020  ebc003c0          RSB      r3,r0,r0,LSL #3       ;127
000024  eb031540          ADD      r5,r3,r0,LSL #5       ;127
000028  f2017354          ADD      r3,r1,#0x754          ;127
00002c  eb030385          ADD      r3,r3,r5,LSL #2       ;127
000030  f8a3409a          STRH     r4,[r3,#0x9a]         ;127
000034  1c43              ADDS     r3,r0,#1              ;125
000036  b2d8              UXTB     r0,r3                 ;125
                  |L6.56|
000038  280a              CMP      r0,#0xa               ;125
00003a  dbf0              BLT      |L6.30|
00003c  2000              MOVS     r0,#0                 ;130
00003e  e01a              B        |L6.118|
                  |L6.64|
000040  2300              MOVS     r3,#0                 ;132
000042  ebc004c0          RSB      r4,r0,r0,LSL #3       ;132
000046  eb041440          ADD      r4,r4,r0,LSL #5       ;132
00004a  eb010484          ADD      r4,r1,r4,LSL #2       ;132
00004e  f8a43096          STRH     r3,[r4,#0x96]         ;132
000052  ebc004c0          RSB      r4,r0,r0,LSL #3       ;133
000056  eb041440          ADD      r4,r4,r0,LSL #5       ;133
00005a  eb010484          ADD      r4,r1,r4,LSL #2       ;133
00005e  f8a43098          STRH     r3,[r4,#0x98]         ;133
000062  ebc004c0          RSB      r4,r0,r0,LSL #3       ;134
000066  eb041440          ADD      r4,r4,r0,LSL #5       ;134
00006a  eb010484          ADD      r4,r1,r4,LSL #2       ;134
00006e  f8a4309a          STRH     r3,[r4,#0x9a]         ;134
000072  1c43              ADDS     r3,r0,#1              ;130
000074  b2d8              UXTB     r0,r3                 ;130
                  |L6.118|
000076  2801              CMP      r0,#1                 ;130
000078  dbe2              BLT      |L6.64|
00007a  2000              MOVS     r0,#0                 ;137
00007c  e025              B        |L6.202|
                  |L6.126|
00007e  2200              MOVS     r2,#0                 ;139
000080  e010              B        |L6.164|
                  |L6.130|
000082  2500              MOVS     r5,#0                 ;141
000084  23d7              MOVS     r3,#0xd7              ;141
000086  4343              MULS     r3,r0,r3              ;141
000088  f101049c          ADD      r4,r1,#0x9c           ;141
00008c  eb0403c3          ADD      r3,r4,r3,LSL #3       ;141
000090  ebc204c2          RSB      r4,r2,r2,LSL #3       ;141
000094  eb041442          ADD      r4,r4,r2,LSL #5       ;141
000098  eb030384          ADD      r3,r3,r4,LSL #2       ;141
00009c  f8a3509a          STRH     r5,[r3,#0x9a]         ;141
0000a0  1c53              ADDS     r3,r2,#1              ;139
0000a2  b2da              UXTB     r2,r3                 ;139
                  |L6.164|
0000a4  2a0b              CMP      r2,#0xb               ;139
0000a6  dbec              BLT      |L6.130|
0000a8  2500              MOVS     r5,#0                 ;143
0000aa  23d7              MOVS     r3,#0xd7              ;143
0000ac  4343              MULS     r3,r0,r3              ;143
0000ae  f101049c          ADD      r4,r1,#0x9c           ;143
0000b2  eb0403c3          ADD      r3,r4,r3,LSL #3       ;143
0000b6  f8a356b4          STRH     r5,[r3,#0x6b4]        ;143
0000ba  23d7              MOVS     r3,#0xd7              ;144
0000bc  4343              MULS     r3,r0,r3              ;144
0000be  eb0403c3          ADD      r3,r4,r3,LSL #3       ;144
0000c2  f8a356b6          STRH     r5,[r3,#0x6b6]        ;144
0000c6  1c43              ADDS     r3,r0,#1              ;137
0000c8  b2d8              UXTB     r0,r3                 ;137
                  |L6.202|
0000ca  2801              CMP      r0,#1                 ;137
0000cc  dbd7              BLT      |L6.126|
0000ce  bf00              NOP      
0000d0  e799              B        |L6.6|
;;;147    
                          ENDP


                          AREA ||i.CAN_HW_Init||, CODE, READONLY, ALIGN=2

                  CAN_HW_Init PROC
;;;1333   // 功能函数：CAN初始化
;;;1334   void CAN_HW_Init(uint16 bund)
000000  b510              PUSH     {r4,lr}
;;;1335   {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;1336       can_parameter_struct can_parameter;
;;;1337       can_filter_parameter_struct can_filter;
;;;1338   
;;;1339       // 时钟分配与使能
;;;1340       rcu_periph_clock_enable(RCU_CAN0);
000006  f2407019          MOV      r0,#0x719
00000a  f7fffffe          BL       rcu_periph_clock_enable
;;;1341       // rcu_periph_clock_enable(RCU_GPIOB);
;;;1342       rcu_periph_clock_enable(RCU_GPIOA); // 后加
00000e  f2406002          MOV      r0,#0x602
000012  f7fffffe          BL       rcu_periph_clock_enable
;;;1343       rcu_periph_clock_enable(RCU_AF);
000016  f44f60c0          MOV      r0,#0x600
00001a  f7fffffe          BL       rcu_periph_clock_enable
;;;1344   
;;;1345       // 配置CAN的接收中断
;;;1346       nvic_irq_enable(USBD_LP_CAN0_RX0_IRQn, 1, 0);
00001e  2200              MOVS     r2,#0
000020  2101              MOVS     r1,#1
000022  2014              MOVS     r0,#0x14
000024  f7fffffe          BL       nvic_irq_enable
;;;1347   
;;;1348       // 配置CAN邮箱空中断
;;;1349       nvic_irq_enable(USBD_HP_CAN0_TX_IRQn, 2, 0);
000028  2200              MOVS     r2,#0
00002a  2102              MOVS     r1,#2
00002c  2013              MOVS     r0,#0x13
00002e  f7fffffe          BL       nvic_irq_enable
;;;1350   
;;;1351       // CAN管脚重映射到PB8-9
;;;1352       //  gpio_pin_remap_config(GPIO_CAN_PARTIAL_REMAP,ENABLE);
;;;1353   
;;;1354       /* configure CAN0 GPIO */
;;;1355       gpio_init(GPIOA, GPIO_MODE_IPU, GPIO_OSPEED_50MHZ, GPIO_PIN_11);
000032  f44f6300          MOV      r3,#0x800
000036  2203              MOVS     r2,#3
000038  2148              MOVS     r1,#0x48
00003a  4834              LDR      r0,|L7.268|
00003c  f7fffffe          BL       gpio_init
;;;1356       gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_12);
000040  f44f5380          MOV      r3,#0x1000
000044  2203              MOVS     r2,#3
000046  2118              MOVS     r1,#0x18
000048  4830              LDR      r0,|L7.268|
00004a  f7fffffe          BL       gpio_init
;;;1357   
;;;1358       can_struct_para_init(CAN_INIT_STRUCT, &can_parameter);
00004e  a905              ADD      r1,sp,#0x14
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       can_struct_para_init
;;;1359       can_struct_para_init(CAN_INIT_STRUCT, &can_filter);
000056  4669              MOV      r1,sp
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       can_struct_para_init
;;;1360   
;;;1361       /* initialize CAN register */
;;;1362       can_deinit(CAN0);
00005e  482c              LDR      r0,|L7.272|
000060  f7fffffe          BL       can_deinit
;;;1363   
;;;1364       /* initialize CAN parameters */
;;;1365       can_parameter.time_triggered = DISABLE;
000064  2000              MOVS     r0,#0
000066  f88d0018          STRB     r0,[sp,#0x18]
;;;1366       can_parameter.auto_bus_off_recovery = ENABLE;
00006a  2001              MOVS     r0,#1
00006c  f88d0019          STRB     r0,[sp,#0x19]
;;;1367       can_parameter.auto_wake_up = DISABLE;
000070  2000              MOVS     r0,#0
000072  f88d001a          STRB     r0,[sp,#0x1a]
;;;1368       can_parameter.no_auto_retrans = DISABLE;
000076  f88d001b          STRB     r0,[sp,#0x1b]
;;;1369       can_parameter.rec_fifo_overwrite = DISABLE;
00007a  f88d001c          STRB     r0,[sp,#0x1c]
;;;1370       can_parameter.trans_fifo_order = DISABLE;
00007e  f88d001d          STRB     r0,[sp,#0x1d]
;;;1371       can_parameter.working_mode = CAN_NORMAL_MODE;
000082  f88d0014          STRB     r0,[sp,#0x14]
;;;1372   
;;;1373       // 波特率计算：36MHz / (1+6+1) / 36 = 125K bit
;;;1374       can_parameter.resync_jump_width = CAN_BT_SJW_1TQ;
000086  f88d0015          STRB     r0,[sp,#0x15]
;;;1375       can_parameter.time_segment_1 = CAN_BT_BS1_6TQ;// 6
00008a  2005              MOVS     r0,#5
00008c  f88d0016          STRB     r0,[sp,#0x16]
;;;1376       can_parameter.time_segment_2 = CAN_BT_BS2_1TQ;// 1
000090  2000              MOVS     r0,#0
000092  f88d0017          STRB     r0,[sp,#0x17]
;;;1377       if (CAN_BAUD_RATE_125K == bund)
000096  2c7d              CMP      r4,#0x7d
000098  d103              BNE      |L7.162|
;;;1378       {
;;;1379           can_parameter.prescaler = 36;
00009a  2024              MOVS     r0,#0x24
00009c  f8ad001e          STRH     r0,[sp,#0x1e]
0000a0  e00f              B        |L7.194|
                  |L7.162|
;;;1380       }
;;;1381       else if (CAN_BAUD_RATE_250K == bund)
0000a2  2cfa              CMP      r4,#0xfa
0000a4  d103              BNE      |L7.174|
;;;1382       {
;;;1383           can_parameter.prescaler = 18;
0000a6  2012              MOVS     r0,#0x12
0000a8  f8ad001e          STRH     r0,[sp,#0x1e]
0000ac  e009              B        |L7.194|
                  |L7.174|
;;;1384       }
;;;1385       else if (CAN_BAUD_RATE_500K == bund)
0000ae  f5b47ffa          CMP      r4,#0x1f4
0000b2  d103              BNE      |L7.188|
;;;1386       {
;;;1387           can_parameter.prescaler = 9;
0000b4  2009              MOVS     r0,#9
0000b6  f8ad001e          STRH     r0,[sp,#0x1e]
0000ba  e002              B        |L7.194|
                  |L7.188|
;;;1388       }
;;;1389       else
;;;1390       {
;;;1391           can_parameter.prescaler = 36;
0000bc  2024              MOVS     r0,#0x24
0000be  f8ad001e          STRH     r0,[sp,#0x1e]
                  |L7.194|
;;;1392       }
;;;1393   
;;;1394       /* initialize CAN */
;;;1395       can_init(CAN0, &can_parameter);
0000c2  a905              ADD      r1,sp,#0x14
0000c4  4812              LDR      r0,|L7.272|
0000c6  f7fffffe          BL       can_init
;;;1396   
;;;1397       /* initialize filter */
;;;1398       can_filter.filter_number = 1;
0000ca  2001              MOVS     r0,#1
0000cc  f8ad000a          STRH     r0,[sp,#0xa]
;;;1399       can_filter.filter_mode = CAN_FILTERMODE_MASK;
0000d0  2000              MOVS     r0,#0
0000d2  f8ad000c          STRH     r0,[sp,#0xc]
;;;1400       can_filter.filter_bits = CAN_FILTERBITS_32BIT;
0000d6  2001              MOVS     r0,#1
0000d8  f8ad000e          STRH     r0,[sp,#0xe]
;;;1401       can_filter.filter_list_high = 0x0000;
0000dc  2000              MOVS     r0,#0
0000de  f8ad0000          STRH     r0,[sp,#0]
;;;1402       can_filter.filter_list_low = 0x0000;
0000e2  f8ad0002          STRH     r0,[sp,#2]
;;;1403       can_filter.filter_mask_high = 0x0000;
0000e6  f8ad0004          STRH     r0,[sp,#4]
;;;1404       can_filter.filter_mask_low = 0x0000;
0000ea  f8ad0006          STRH     r0,[sp,#6]
;;;1405       can_filter.filter_fifo_number = CAN_FIFO0;
0000ee  f8ad0008          STRH     r0,[sp,#8]
;;;1406       can_filter.filter_enable = ENABLE;
0000f2  2001              MOVS     r0,#1
0000f4  f88d0010          STRB     r0,[sp,#0x10]
;;;1407   
;;;1408       can_filter_init(&can_filter);
0000f8  4668              MOV      r0,sp
0000fa  f7fffffe          BL       can_filter_init
;;;1409   
;;;1410       /* enable can receive FIFO0 not empty interrupt */
;;;1411       can_interrupt_enable(CAN0, CAN_INT_RFNE0);
0000fe  2102              MOVS     r1,#2
000100  4803              LDR      r0,|L7.272|
000102  f7fffffe          BL       can_interrupt_enable
;;;1412   }
000106  b008              ADD      sp,sp,#0x20
000108  bd10              POP      {r4,pc}
;;;1413   
                          ENDP

00010a  0000              DCW      0x0000
                  |L7.268|
                          DCD      0x40010800
                  |L7.272|
                          DCD      0x40006400

                          AREA ||i.CAN_MacProcess||, CODE, READONLY, ALIGN=2

                  CAN_MacProcess PROC
;;;378    // CAN 报文接收处理函数(注意根据具体模块修改)
;;;379    void CAN_MacProcess(uint16 standarID, uint8 *data, uint8 length)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;380    {
000004  4604              MOV      r4,r0
000006  4615              MOV      r5,r2
;;;381        uint16 end;
;;;382        uint16 head;
;;;383        uint8 i;
;;;384        int8 sourceBuffSelect = CAN_DEVICE_SOURCE_ID_MAX; // 节点缓存区编号选择
000008  2001              MOVS     r0,#1
;;;385    
;;;386        // 参数合法性判断
;;;387        if (NULL == data)
00000a  b909              CBNZ     r1,|L8.16|
                  |L8.12|
;;;388        {
;;;389            return;
;;;390        }
;;;391    
;;;392        // 标准帧判断
;;;393        if (standarID > 0x7FF)
;;;394        {
;;;395            return;
;;;396        }
;;;397    
;;;398        // 取出目标节点
;;;399        //  destinationID = standarID & 0x07FF;
;;;400    
;;;401        // 不是发给自身ID的数据直接丢掉
;;;402        //  if (CAN_DEVICE_ID_HMI != destinationID)
;;;403        //  {
;;;404        //      return;
;;;405        //  }
;;;406    
;;;407        // 已经使能
;;;408        if (CAN_RX_DEVICE_PUC)
;;;409        {
;;;410            sourceBuffSelect = CAN_RX_DEVICE_PUC - 1;
;;;411        }
;;;412    
;;;413        // 没有合适的源节点
;;;414        if ((sourceBuffSelect >= CAN_DEVICE_SOURCE_ID_MAX) || (sourceBuffSelect < 0))
;;;415        {
;;;416            return;
;;;417        }
;;;418    
;;;419        // 取相应缓存区结构体数据
;;;420        end = sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end;
;;;421        head = sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].head;
;;;422    
;;;423        // ■■环形列队，入队■■
;;;424        //  一级缓冲区已满，不予接收
;;;425        if ((end + 1) % CAN_RX_FIFO_SIZE == head)
;;;426        {
;;;427            return;
;;;428        }
;;;429    
;;;430        for (i = 0; i < length; i++)
;;;431        {
;;;432            // 单个字节读取，并放入FIFO中
;;;433            sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].buff[sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end] = *data++;
;;;434    
;;;435            sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end++;
;;;436    
;;;437            // 一级缓冲区已满，不予接收
;;;438            if ((sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end + 1) % CAN_RX_FIFO_SIZE == head)
;;;439            {
;;;440                break;
;;;441            }
;;;442    
;;;443            sysCanCB.rxFIFO.rxFIFOEachNode[sourceBuffSelect].end %= CAN_RX_FIFO_SIZE;
;;;444        }
;;;445    }
00000c  e8bd83f0          POP      {r4-r9,pc}
                  |L8.16|
000010  f5b46f00          CMP      r4,#0x800             ;393
000014  db00              BLT      |L8.24|
000016  e7f9              B        |L8.12|
                  |L8.24|
000018  2000              MOVS     r0,#0                 ;410
00001a  2801              CMP      r0,#1                 ;414
00001c  da01              BGE      |L8.34|
00001e  2800              CMP      r0,#0                 ;414
000020  da00              BGE      |L8.36|
                  |L8.34|
000022  e7f3              B        |L8.12|
                  |L8.36|
000024  ebc007c0          RSB      r7,r0,r0,LSL #3       ;420
000028  eb071740          ADD      r7,r7,r0,LSL #5       ;420
00002c  f8dfc0ec          LDR      r12,|L8.284|
000030  eb0c0787          ADD      r7,r12,r7,LSL #2      ;420
000034  f8b76098          LDRH     r6,[r7,#0x98]         ;420
000038  ebc007c0          RSB      r7,r0,r0,LSL #3       ;421
00003c  eb071740          ADD      r7,r7,r0,LSL #5       ;421
000040  eb0c0787          ADD      r7,r12,r7,LSL #2      ;421
000044  f8b72096          LDRH     r2,[r7,#0x96]         ;421
000048  1c77              ADDS     r7,r6,#1              ;425
00004a  f04f0c96          MOV      r12,#0x96             ;425
00004e  fb97f8fc          SDIV     r8,r7,r12             ;425
000052  fb0c7718          MLS      r7,r12,r8,r7          ;425
000056  4297              CMP      r7,r2                 ;425
000058  d100              BNE      |L8.92|
00005a  e7d7              B        |L8.12|
                  |L8.92|
00005c  2300              MOVS     r3,#0                 ;430
00005e  e057              B        |L8.272|
                  |L8.96|
000060  f8117b01          LDRB     r7,[r1],#1            ;433
000064  ebc00cc0          RSB      r12,r0,r0,LSL #3      ;433
000068  eb0c1c40          ADD      r12,r12,r0,LSL #5     ;433
00006c  f8df80ac          LDR      r8,|L8.284|
000070  eb080c8c          ADD      r12,r8,r12,LSL #2     ;433
000074  ebc008c0          RSB      r8,r0,r0,LSL #3       ;433
000078  eb081840          ADD      r8,r8,r0,LSL #5       ;433
00007c  f8df909c          LDR      r9,|L8.284|
000080  eb090888          ADD      r8,r9,r8,LSL #2       ;433
000084  f8b88098          LDRH     r8,[r8,#0x98]         ;433
000088  f80c7008          STRB     r7,[r12,r8]           ;433
00008c  ebc007c0          RSB      r7,r0,r0,LSL #3       ;435
000090  eb071740          ADD      r7,r7,r0,LSL #5       ;435
000094  46cc              MOV      r12,r9                ;435
000096  eb0c0787          ADD      r7,r12,r7,LSL #2      ;435
00009a  f8b77098          LDRH     r7,[r7,#0x98]         ;435
00009e  1c7f              ADDS     r7,r7,#1              ;435
0000a0  ebc00cc0          RSB      r12,r0,r0,LSL #3      ;435
0000a4  eb0c1c40          ADD      r12,r12,r0,LSL #5     ;435
0000a8  46c8              MOV      r8,r9                 ;435
0000aa  eb080c8c          ADD      r12,r8,r12,LSL #2     ;435
0000ae  f8ac7098          STRH     r7,[r12,#0x98]        ;435
0000b2  ebc007c0          RSB      r7,r0,r0,LSL #3       ;438
0000b6  eb071740          ADD      r7,r7,r0,LSL #5       ;438
0000ba  46c4              MOV      r12,r8                ;438
0000bc  eb0c0787          ADD      r7,r12,r7,LSL #2      ;438
0000c0  f8b77098          LDRH     r7,[r7,#0x98]         ;438
0000c4  1c7f              ADDS     r7,r7,#1              ;438
0000c6  f04f0c96          MOV      r12,#0x96             ;438
0000ca  fb97f8fc          SDIV     r8,r7,r12             ;438
0000ce  fb0c7718          MLS      r7,r12,r8,r7          ;438
0000d2  4297              CMP      r7,r2                 ;438
0000d4  d100              BNE      |L8.216|
0000d6  e01d              B        |L8.276|
                  |L8.216|
0000d8  ebc007c0          RSB      r7,r0,r0,LSL #3       ;443
0000dc  eb071740          ADD      r7,r7,r0,LSL #5       ;443
0000e0  f8dfc038          LDR      r12,|L8.284|
0000e4  eb0c0787          ADD      r7,r12,r7,LSL #2      ;443
0000e8  f8b77098          LDRH     r7,[r7,#0x98]         ;443
0000ec  f04f0c96          MOV      r12,#0x96             ;443
0000f0  fb97f8fc          SDIV     r8,r7,r12             ;443
0000f4  fb0c7718          MLS      r7,r12,r8,r7          ;443
0000f8  ebc00cc0          RSB      r12,r0,r0,LSL #3      ;443
0000fc  eb0c1c40          ADD      r12,r12,r0,LSL #5     ;443
000100  f8df8018          LDR      r8,|L8.284|
000104  eb080c8c          ADD      r12,r8,r12,LSL #2     ;443
000108  f8ac7098          STRH     r7,[r12,#0x98]        ;443
00010c  1c5f              ADDS     r7,r3,#1              ;430
00010e  b2fb              UXTB     r3,r7                 ;430
                  |L8.272|
000110  42ab              CMP      r3,r5                 ;430
000112  dba5              BLT      |L8.96|
                  |L8.276|
000114  bf00              NOP                            ;440
000116  bf00              NOP      
000118  e778              B        |L8.12|
;;;446    
                          ENDP

00011a  0000              DCW      0x0000
                  |L8.284|
                          DCD      sysCanCB

                          AREA ||i.CAN_PROTOCOL_Process_DT||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_Process_DT PROC
;;;1102   // CAN处理测试过程函数
;;;1103   void CAN_PROTOCOL_Process_DT(void)
000000  b510              PUSH     {r4,lr}
;;;1104   {
;;;1105       // CAN接收FIFO缓冲区处理
;;;1106       CAN_RxFIFOProcess(&sysCanCB);
000002  4804              LDR      r0,|L9.20|
000004  f7fffffe          BL       CAN_RxFIFOProcess
;;;1107   
;;;1108       // CAN接收命令缓冲区处理
;;;1109       CAN_CmdFrameProcess(&sysCanCB);
000008  4802              LDR      r0,|L9.20|
00000a  f7fffffe          BL       CAN_CmdFrameProcess
;;;1110   
;;;1111       // CAN发送状态机处理过程
;;;1112       CAN_TxStateProcess();
00000e  f7fffffe          BL       CAN_TxStateProcess
;;;1113   }
000012  bd10              POP      {r4,pc}
;;;1114   
                          ENDP

                  |L9.20|
                          DCD      sysCanCB

                          AREA ||i.CAN_RxFIFOProcess||, CODE, READONLY, ALIGN=1

                  CAN_RxFIFOProcess PROC
;;;447    // 一级报文接收缓冲区处理，从一级接收缓冲区中取出一个字节添加到命令帧缓冲区中
;;;448    void CAN_RxFIFOProcess(CAN_CB *pCB)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;449    {
000004  4607              MOV      r7,r0
;;;450        uint16 end;
;;;451        uint16 head;
;;;452        CAN_CMD_FRAME *pCmdFrame = NULL;
000006  2500              MOVS     r5,#0
;;;453        CAN_RX_FIFO *pRxFIFO = NULL;
000008  2400              MOVS     r4,#0
;;;454        uint16 length = 0;
00000a  46a3              MOV      r11,r4
;;;455        uint8 currentData = 0;
00000c  46a0              MOV      r8,r4
;;;456        uint8 sourceBuffSelect;
;;;457    
;;;458        // 参数合法性检验
;;;459        if (NULL == pCB)
00000e  b90f              CBNZ     r7,|L10.20|
                  |L10.16|
;;;460        {
;;;461            return;
;;;462        }
;;;463    
;;;464        // 循环判断是否有数据需要处理
;;;465        for (sourceBuffSelect = 0; sourceBuffSelect < CAN_DEVICE_SOURCE_ID_MAX; sourceBuffSelect++)
;;;466        {
;;;467            // 获取接收一级缓冲区节点临时缓冲区指针
;;;468            pRxFIFO = &pCB->rxFIFO.rxFIFOEachNode[sourceBuffSelect];
;;;469    
;;;470            end = pRxFIFO->end;
;;;471            head = pRxFIFO->head;
;;;472    
;;;473            // 一级缓冲区为空，继续
;;;474            if (head == end)
;;;475            {
;;;476                continue;
;;;477            }
;;;478    
;;;479            // 获取接收命令临时缓冲区指针
;;;480            pCmdFrame = &pCB->rx.rxEachNode[sourceBuffSelect].cmdQueue[pCB->rx.rxEachNode[sourceBuffSelect].end];
;;;481    
;;;482            // 取出当前要处理的字节
;;;483            currentData = pRxFIFO->buff[pRxFIFO->currentProcessIndex];
;;;484    
;;;485            // 临时缓冲区长度为0时，搜索首字节
;;;486            if (0 == pCmdFrame->length)
;;;487            {
;;;488                // 命令头错误，删除当前字节并退出
;;;489                if (CAN_CMD_HEAD != currentData)
;;;490                {
;;;491                    pRxFIFO->head++;
;;;492                    pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;493                    pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;494    
;;;495                    continue;
;;;496                }
;;;497    
;;;498                // 命令头正确，但无命令临时缓冲区可用，退出
;;;499                if ((pCB->rx.rxEachNode[sourceBuffSelect].end + 1) % CAN_RX_QUEUE_SIZE == pCB->rx.rxEachNode[sourceBuffSelect].head)
;;;500                {
;;;501                    continue;
;;;502                }
;;;503    
;;;504                // 命令头正确，有临时缓冲区可用，则将其添加到命令帧临时缓冲区中
;;;505                pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;506                pRxFIFO->currentProcessIndex++;
;;;507                pRxFIFO->currentProcessIndex %= CAN_RX_FIFO_SIZE;
;;;508            }
;;;509            // 非首字节，将数据添加到命令帧临时缓冲区中，但暂不删除当前数据
;;;510            else
;;;511            {
;;;512                // 临时缓冲区溢出，说明当前正在接收的命令帧是错误的，正确的命令帧不会出现长度溢出的情况
;;;513                if (pCmdFrame->length >= CAN_CMD_FRAME_LENGTH_MAX)
;;;514                {
;;;515                    // 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;516                    pRxFIFO->head++;
;;;517                    pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;518                    pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;519    
;;;520                    continue;
;;;521                }
;;;522    
;;;523                // 一直取到末尾
;;;524                while (end != pRxFIFO->currentProcessIndex)
;;;525                {
;;;526                    // 取出当前要处理的字节
;;;527                    currentData = pRxFIFO->buff[pRxFIFO->currentProcessIndex];
;;;528                    // 缓冲区未溢出，正常接收，将数据添加到临时缓冲区中
;;;529                    pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;530                    pRxFIFO->currentProcessIndex++;
;;;531                    pRxFIFO->currentProcessIndex %= CAN_RX_FIFO_SIZE;
;;;532    
;;;533                    // ■■接下来，需要检查命令帧是否完整，如果完整，则将命令帧临时缓冲区扶正■■
;;;534    
;;;535                    // 首先判断命令帧最小长度，一个完整的命令字至少包括4个字节: 命令头(1Byte)+命令字(1Byte)+数据长度(1Byte)+校验码(1Byte) ，因此不足4个字节的必定不完整
;;;536                    if (pCmdFrame->length < CAN_CMD_FRAME_LENGTH_MIN)
;;;537                    {
;;;538                        // 继续接收
;;;539                        continue;
;;;540                    }
;;;541    
;;;542                    // 命令帧长度数值越界，说明当前命令帧错误，停止接收
;;;543                    if (pCmdFrame->buff[CAN_CMD_LENGTH_INDEX] > (CAN_CMD_FRAME_LENGTH_MAX - CAN_CMD_FRAME_LENGTH_MIN))
;;;544                    {
;;;545                        // 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;546                        pCmdFrame->length = 0;
;;;547                        // 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;548                        pRxFIFO->head++;
;;;549                        pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;550                        pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;551    
;;;552                        break;
;;;553                    }
;;;554    
;;;555                    // 命令帧长度校验，在命令长度描述字的数值上，增加命令头、命令字、...、数据长度、校验码，即为命令帧实际长度
;;;556                    length = pCmdFrame->length;
;;;557                    if (length < (pCmdFrame->buff[CAN_CMD_LENGTH_INDEX] + CAN_CMD_FRAME_LENGTH_MIN))
;;;558                    {
;;;559                        // 长度要求不一致，说明未接收完毕，继续
;;;560                        continue;
;;;561                    }
;;;562    
;;;563                    // 命令帧长度OK，则进行校验，失败时删除命令头
;;;564                    if (!CAN_CheckSum(pCmdFrame->buff, pCmdFrame->length))
;;;565                    {
;;;566                        // 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;567                        pCmdFrame->length = 0;
;;;568                        // 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;569                        pRxFIFO->head++;
;;;570                        pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;571                        pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;572    
;;;573                        break;
;;;574                    }
;;;575    
;;;576                    // 执行到这里，即说明接收到了一个完整并且正确的命令帧，此时需将处理过的数据从一级缓冲区中删除，并将该命令帧扶正
;;;577                    pRxFIFO->head += length;
;;;578                    pRxFIFO->head %= CAN_RX_FIFO_SIZE;
;;;579                    pRxFIFO->currentProcessIndex = pRxFIFO->head;
;;;580    
;;;581                    CAN_ConfirmTempCmdFrameBuff(pCB, sourceBuffSelect);
;;;582    
;;;583                    break;
;;;584                }
;;;585            }
;;;586        }
;;;587    
;;;588        return;
;;;589    }
000010  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.20|
000014  2600              MOVS     r6,#0                 ;465
000016  e0e9              B        |L10.492|
                  |L10.24|
000018  ebc600c6          RSB      r0,r6,r6,LSL #3       ;468
00001c  eb001046          ADD      r0,r0,r6,LSL #5       ;468
000020  eb070480          ADD      r4,r7,r0,LSL #2       ;468
000024  f8b49098          LDRH     r9,[r4,#0x98]         ;470
000028  f8b4a096          LDRH     r10,[r4,#0x96]        ;471
00002c  45ca              CMP      r10,r9                ;474
00002e  d100              BNE      |L10.50|
000030  e0da              B        |L10.488|
                  |L10.50|
000032  20d7              MOVS     r0,#0xd7              ;480
000034  4370              MULS     r0,r6,r0              ;480
000036  f107019c          ADD      r1,r7,#0x9c           ;480
00003a  eb0102c0          ADD      r2,r1,r0,LSL #3       ;480
00003e  20d7              MOVS     r0,#0xd7              ;480
000040  4370              MULS     r0,r6,r0              ;480
000042  eb0100c0          ADD      r0,r1,r0,LSL #3       ;480
000046  f8b006b6          LDRH     r0,[r0,#0x6b6]        ;480
00004a  ebc001c0          RSB      r1,r0,r0,LSL #3       ;480
00004e  eb011040          ADD      r0,r1,r0,LSL #5       ;480
000052  eb020580          ADD      r5,r2,r0,LSL #2       ;480
000056  f8b4009a          LDRH     r0,[r4,#0x9a]         ;483
00005a  f8148000          LDRB     r8,[r4,r0]            ;483
00005e  f8b5009a          LDRH     r0,[r5,#0x9a]         ;486
000062  bbe0              CBNZ     r0,|L10.222|
000064  f1b80f55          CMP      r8,#0x55              ;489
000068  d00e              BEQ      |L10.136|
00006a  f8340f96          LDRH     r0,[r4,#0x96]!        ;491
00006e  1c40              ADDS     r0,r0,#1              ;491
000070  8020              STRH     r0,[r4,#0]            ;491
000072  8820              LDRH     r0,[r4,#0]            ;492
000074  2196              MOVS     r1,#0x96              ;492
000076  fb90f2f1          SDIV     r2,r0,r1              ;492
00007a  fb010012          MLS      r0,r1,r2,r0           ;492
00007e  8020              STRH     r0,[r4,#0]            ;492
000080  8820              LDRH     r0,[r4,#0]            ;493
000082  80a0              STRH     r0,[r4,#4]            ;493
000084  3c96              SUBS     r4,r4,#0x96           ;493
000086  e0af              B        |L10.488|
                  |L10.136|
000088  20d7              MOVS     r0,#0xd7              ;499
00008a  4370              MULS     r0,r6,r0              ;499
00008c  f107019c          ADD      r1,r7,#0x9c           ;499
000090  eb0100c0          ADD      r0,r1,r0,LSL #3       ;499
000094  f8b006b6          LDRH     r0,[r0,#0x6b6]        ;499
000098  1c40              ADDS     r0,r0,#1              ;499
00009a  210b              MOVS     r1,#0xb               ;499
00009c  fb90f2f1          SDIV     r2,r0,r1              ;499
0000a0  fb010212          MLS      r2,r1,r2,r0           ;499
0000a4  20d7              MOVS     r0,#0xd7              ;499
0000a6  4370              MULS     r0,r6,r0              ;499
0000a8  f107019c          ADD      r1,r7,#0x9c           ;499
0000ac  eb0100c0          ADD      r0,r1,r0,LSL #3       ;499
0000b0  f8b006b4          LDRH     r0,[r0,#0x6b4]        ;499
0000b4  4282              CMP      r2,r0                 ;499
0000b6  d100              BNE      |L10.186|
0000b8  e096              B        |L10.488|
                  |L10.186|
0000ba  f8351f9a          LDRH     r1,[r5,#0x9a]!        ;505
0000be  8828              LDRH     r0,[r5,#0]            ;505
0000c0  1c40              ADDS     r0,r0,#1              ;505
0000c2  f825099a          STRH     r0,[r5],#-0x9a        ;505
0000c6  1d28              ADDS     r0,r5,#4              ;505
0000c8  f8008001          STRB     r8,[r0,r1]            ;505
0000cc  f8340f9a          LDRH     r0,[r4,#0x9a]!        ;506
0000d0  1c40              ADDS     r0,r0,#1              ;506
0000d2  8020              STRH     r0,[r4,#0]            ;506
0000d4  8820              LDRH     r0,[r4,#0]            ;507
0000d6  2196              MOVS     r1,#0x96              ;507
0000d8  fb90f2f1          SDIV     r2,r0,r1              ;507
0000dc  e000              B        |L10.224|
                  |L10.222|
0000de  e004              B        |L10.234|
                  |L10.224|
0000e0  fb010012          MLS      r0,r1,r2,r0           ;507
0000e4  f824099a          STRH     r0,[r4],#-0x9a        ;507
0000e8  e07d              B        |L10.486|
                  |L10.234|
0000ea  f8b5009a          LDRH     r0,[r5,#0x9a]         ;513
0000ee  2896              CMP      r0,#0x96              ;513
0000f0  db0e              BLT      |L10.272|
0000f2  f8340f96          LDRH     r0,[r4,#0x96]!        ;516
0000f6  1c40              ADDS     r0,r0,#1              ;516
0000f8  8020              STRH     r0,[r4,#0]            ;516
0000fa  8820              LDRH     r0,[r4,#0]            ;517
0000fc  2196              MOVS     r1,#0x96              ;517
0000fe  fb90f2f1          SDIV     r2,r0,r1              ;517
000102  fb010012          MLS      r0,r1,r2,r0           ;517
000106  8020              STRH     r0,[r4,#0]            ;517
000108  8820              LDRH     r0,[r4,#0]            ;518
00010a  80a0              STRH     r0,[r4,#4]            ;518
00010c  3c96              SUBS     r4,r4,#0x96           ;518
00010e  e06b              B        |L10.488|
                  |L10.272|
000110  e064              B        |L10.476|
                  |L10.274|
000112  f8b4009a          LDRH     r0,[r4,#0x9a]         ;527
000116  f8148000          LDRB     r8,[r4,r0]            ;527
00011a  f8351f9a          LDRH     r1,[r5,#0x9a]!        ;529
00011e  8828              LDRH     r0,[r5,#0]            ;529
000120  1c40              ADDS     r0,r0,#1              ;529
000122  f825099a          STRH     r0,[r5],#-0x9a        ;529
000126  1d28              ADDS     r0,r5,#4              ;529
000128  f8008001          STRB     r8,[r0,r1]            ;529
00012c  f8340f9a          LDRH     r0,[r4,#0x9a]!        ;530
000130  1c40              ADDS     r0,r0,#1              ;530
000132  8020              STRH     r0,[r4,#0]            ;530
000134  8820              LDRH     r0,[r4,#0]            ;531
000136  2196              MOVS     r1,#0x96              ;531
000138  fb90f2f1          SDIV     r2,r0,r1              ;531
00013c  fb010012          MLS      r0,r1,r2,r0           ;531
000140  f824099a          STRH     r0,[r4],#-0x9a        ;531
000144  f8b5009a          LDRH     r0,[r5,#0x9a]         ;536
000148  2804              CMP      r0,#4                 ;536
00014a  da00              BGE      |L10.334|
00014c  e046              B        |L10.476|
                  |L10.334|
00014e  79a8              LDRB     r0,[r5,#6]            ;543
000150  2892              CMP      r0,#0x92              ;543
000152  dd11              BLE      |L10.376|
000154  2000              MOVS     r0,#0                 ;546
000156  f8a5009a          STRH     r0,[r5,#0x9a]         ;546
00015a  f8340f96          LDRH     r0,[r4,#0x96]!        ;548
00015e  1c40              ADDS     r0,r0,#1              ;548
000160  8020              STRH     r0,[r4,#0]            ;548
000162  8820              LDRH     r0,[r4,#0]            ;549
000164  2196              MOVS     r1,#0x96              ;549
000166  fb90f2f1          SDIV     r2,r0,r1              ;549
00016a  fb010012          MLS      r0,r1,r2,r0           ;549
00016e  8020              STRH     r0,[r4,#0]            ;549
000170  8820              LDRH     r0,[r4,#0]            ;550
000172  80a0              STRH     r0,[r4,#4]            ;550
000174  3c96              SUBS     r4,r4,#0x96           ;550
000176  e035              B        |L10.484|
                  |L10.376|
000178  f8b5b09a          LDRH     r11,[r5,#0x9a]        ;556
00017c  79a8              LDRB     r0,[r5,#6]            ;557
00017e  1d00              ADDS     r0,r0,#4              ;557
000180  4558              CMP      r0,r11                ;557
000182  dd00              BLE      |L10.390|
000184  e02a              B        |L10.476|
                  |L10.390|
000186  f8b5109a          LDRH     r1,[r5,#0x9a]         ;564
00018a  1d28              ADDS     r0,r5,#4              ;564
00018c  f7fffffe          BL       CAN_CheckSum
000190  b988              CBNZ     r0,|L10.438|
000192  2000              MOVS     r0,#0                 ;567
000194  f8a5009a          STRH     r0,[r5,#0x9a]         ;567
000198  f8340f96          LDRH     r0,[r4,#0x96]!        ;569
00019c  1c40              ADDS     r0,r0,#1              ;569
00019e  8020              STRH     r0,[r4,#0]            ;569
0001a0  8820              LDRH     r0,[r4,#0]            ;570
0001a2  2196              MOVS     r1,#0x96              ;570
0001a4  fb90f2f1          SDIV     r2,r0,r1              ;570
0001a8  fb010012          MLS      r0,r1,r2,r0           ;570
0001ac  8020              STRH     r0,[r4,#0]            ;570
0001ae  8820              LDRH     r0,[r4,#0]            ;571
0001b0  80a0              STRH     r0,[r4,#4]            ;571
0001b2  3c96              SUBS     r4,r4,#0x96           ;571
0001b4  e016              B        |L10.484|
                  |L10.438|
0001b6  f8340f96          LDRH     r0,[r4,#0x96]!        ;577
0001ba  4458              ADD      r0,r0,r11             ;577
0001bc  8020              STRH     r0,[r4,#0]            ;577
0001be  8820              LDRH     r0,[r4,#0]            ;578
0001c0  2196              MOVS     r1,#0x96              ;578
0001c2  fb90f2f1          SDIV     r2,r0,r1              ;578
0001c6  fb010012          MLS      r0,r1,r2,r0           ;578
0001ca  8020              STRH     r0,[r4,#0]            ;578
0001cc  8820              LDRH     r0,[r4,#0]            ;579
0001ce  80a0              STRH     r0,[r4,#4]            ;579
0001d0  3c96              SUBS     r4,r4,#0x96           ;579
0001d2  4631              MOV      r1,r6                 ;581
0001d4  4638              MOV      r0,r7                 ;581
0001d6  f7fffffe          BL       CAN_ConfirmTempCmdFrameBuff
0001da  e003              B        |L10.484|
                  |L10.476|
0001dc  f8b4009a          LDRH     r0,[r4,#0x9a]         ;524
0001e0  4548              CMP      r0,r9                 ;524
0001e2  d196              BNE      |L10.274|
                  |L10.484|
0001e4  bf00              NOP                            ;552
                  |L10.486|
0001e6  bf00              NOP                            ;476
                  |L10.488|
0001e8  1c70              ADDS     r0,r6,#1              ;465
0001ea  b2c6              UXTB     r6,r0                 ;465
                  |L10.492|
0001ec  2e01              CMP      r6,#1                 ;465
0001ee  f6ffaf13          BLT      |L10.24|
0001f2  bf00              NOP                            ;588
0001f4  e70c              B        |L10.16|
;;;590    
                          ENDP


                          AREA ||i.CAN_TEST||, CODE, READONLY, ALIGN=1

                  CAN_TEST PROC
;;;83     
;;;84     void CAN_TEST(uint32 temp)
000000  b510              PUSH     {r4,lr}
;;;85     {
000002  4604              MOV      r4,r0
;;;86         IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;87         IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK);
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;88         IAP_CTRL_CAN_TxAddData(2); // 数据长度
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;89         IAP_CTRL_CAN_TxAddData(55);
000016  2037              MOVS     r0,#0x37
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;90         IAP_CTRL_CAN_TxAddData(55);
00001c  2037              MOVS     r0,#0x37
00001e  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;91         IAP_CTRL_CAN_TxAddFrame();
000022  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;92     }
000026  bd10              POP      {r4,pc}
;;;93     /*********************************************************
                          ENDP


                          AREA ||i.CAN_TxEnterState||, CODE, READONLY, ALIGN=2

                  CAN_TxEnterState PROC
;;;1202   // CANTX状态迁移函数
;;;1203   void CAN_TxEnterState(uint32 state)
000000  4909              LDR      r1,|L12.40|
;;;1204   {
;;;1205       // 让当前的状态成为历史
;;;1206       canTxStateCB.preState = canTxStateCB.state;
000002  7809              LDRB     r1,[r1,#0]  ; canTxStateCB
000004  4a08              LDR      r2,|L12.40|
000006  7051              STRB     r1,[r2,#1]
;;;1207   
;;;1208       // 设置新的状态
;;;1209       canTxStateCB.state = (CAN_TX_STATE_E)state;
000008  7010              STRB     r0,[r2,#0]
;;;1210   
;;;1211       switch (state)
00000a  b130              CBZ      r0,|L12.26|
00000c  2801              CMP      r0,#1
00000e  d005              BEQ      |L12.28|
000010  2802              CMP      r0,#2
000012  d004              BEQ      |L12.30|
000014  2804              CMP      r0,#4
000016  d104              BNE      |L12.34|
000018  e002              B        |L12.32|
                  |L12.26|
;;;1212       {
;;;1213       // ■■状态的入口处理■■
;;;1214       case CAN_TX_STATE_NULL:
;;;1215   
;;;1216           break;
00001a  e003              B        |L12.36|
                  |L12.28|
;;;1217   
;;;1218       // ■■入口状态的入口处理■■
;;;1219       case CAN_TX_STATE_ENTRY:
;;;1220   
;;;1221           break;
00001c  e002              B        |L12.36|
                  |L12.30|
;;;1222   
;;;1223       // ■■待机状态状态的入口处理■■
;;;1224       case CAN_TX_STATE_STANDBY:
;;;1225   
;;;1226           break;
00001e  e001              B        |L12.36|
                  |L12.32|
;;;1227   
;;;1228       // ■■CAN消息发送中■■
;;;1229       case CAN_TX_STATE_SENDING:
;;;1230   
;;;1231           break;
000020  e000              B        |L12.36|
                  |L12.34|
;;;1232   
;;;1233       default:
;;;1234           break;
000022  bf00              NOP      
                  |L12.36|
000024  bf00              NOP                            ;1216
;;;1235       }
;;;1236   }
000026  4770              BX       lr
;;;1237   
                          ENDP

                  |L12.40|
                          DCD      canTxStateCB

                          AREA ||i.CAN_TxStateInit||, CODE, READONLY, ALIGN=1

                  CAN_TxStateInit PROC
;;;1196   // CANTX状态机初始化
;;;1197   void CAN_TxStateInit(void)
000000  b500              PUSH     {lr}
;;;1198   {
;;;1199       CAN_TxEnterState(CAN_TX_STATE_STANDBY);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       CAN_TxEnterState
;;;1200   }
000008  bd00              POP      {pc}
;;;1201   
                          ENDP


                          AREA ||i.CAN_TxStateProcess||, CODE, READONLY, ALIGN=2

                  CAN_TxStateProcess PROC
;;;1281   // CANTX过程处理函数
;;;1282   void CAN_TxStateProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1283   {
;;;1284       uint16 head = sysCanCB.tx.head;
000002  4811              LDR      r0,|L14.72|
000004  f8b04d6c          LDRH     r4,[r0,#0xd6c]
;;;1285       uint16 end = sysCanCB.tx.end;
000008  f8b05d6e          LDRH     r5,[r0,#0xd6e]
;;;1286   
;;;1287       switch (canTxStateCB.state)
00000c  480f              LDR      r0,|L14.76|
00000e  7800              LDRB     r0,[r0,#0]  ; canTxStateCB
000010  b130              CBZ      r0,|L14.32|
000012  2801              CMP      r0,#1
000014  d005              BEQ      |L14.34|
000016  2802              CMP      r0,#2
000018  d004              BEQ      |L14.36|
00001a  2804              CMP      r0,#4
00001c  d111              BNE      |L14.66|
00001e  e00f              B        |L14.64|
                  |L14.32|
;;;1288       {
;;;1289       // ■■状态的入口处理■■
;;;1290       case CAN_TX_STATE_NULL:
;;;1291   
;;;1292           break;
000020  e010              B        |L14.68|
                  |L14.34|
;;;1293   
;;;1294       // ■■入口状态的入口处理■■
;;;1295       case CAN_TX_STATE_ENTRY:
;;;1296   
;;;1297           break;
000022  e00f              B        |L14.68|
                  |L14.36|
;;;1298   
;;;1299       // ■■待机状态状态的入口处理■■
;;;1300       case CAN_TX_STATE_STANDBY:
;;;1301           // 检测是否有Tx请求
;;;1302           if (head != end)
000024  42ac              CMP      r4,r5
000026  d00a              BEQ      |L14.62|
;;;1303           {
;;;1304               // 调用此函数填充与启动发送can消息
;;;1305               if (CAN_Tx_FillAndSend(&sysCanCB))
000028  4807              LDR      r0,|L14.72|
00002a  f7fffffe          BL       CAN_Tx_FillAndSend
00002e  b118              CBZ      r0,|L14.56|
;;;1306               {
;;;1307                   // 进入CAN消息发送中状态
;;;1308                   CAN_TxEnterState(CAN_TX_STATE_SENDING);
000030  2004              MOVS     r0,#4
000032  f7fffffe          BL       CAN_TxEnterState
000036  e002              B        |L14.62|
                  |L14.56|
;;;1309               }
;;;1310               else
;;;1311               {
;;;1312                   // 进入CAN消息发送待机状态
;;;1313                   CAN_TxEnterState(CAN_TX_STATE_STANDBY);
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       CAN_TxEnterState
                  |L14.62|
;;;1314               }
;;;1315           }
;;;1316           else
;;;1317           {
;;;1318               // 否则什么也不处理
;;;1319           }
;;;1320   
;;;1321           break;
00003e  e001              B        |L14.68|
                  |L14.64|
;;;1322   
;;;1323       // ■■CAN消息发送中■■
;;;1324       case CAN_TX_STATE_SENDING:
;;;1325   
;;;1326           break;
000040  e000              B        |L14.68|
                  |L14.66|
;;;1327   
;;;1328       default:
;;;1329           break;
000042  bf00              NOP      
                  |L14.68|
000044  bf00              NOP                            ;1292
;;;1330       }
;;;1331   }
000046  bd70              POP      {r4-r6,pc}
;;;1332   
                          ENDP

                  |L14.72|
                          DCD      sysCanCB
                  |L14.76|
                          DCD      canTxStateCB

                          AREA ||i.CAN_Tx_FillAndSend||, CODE, READONLY, ALIGN=2

                  CAN_Tx_FillAndSend PROC
;;;220    // 填充与发送处理:TRUE,填充与发送；FALSE，环形队列向前滑移.
;;;221    BOOL CAN_Tx_FillAndSend(CAN_CB *pCB)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;222    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
;;;223        uint16 index = pCB->tx.index;                          // 当前发送数据的索引号
000008  f8b46d70          LDRH     r6,[r4,#0xd70]
;;;224        uint16 length = pCB->tx.cmdQueue[pCB->tx.head].length; // 当前发送的命令帧的长度
00000c  f8b40d6c          LDRH     r0,[r4,#0xd6c]
000010  ebc001c0          RSB      r1,r0,r0,LSL #3
000014  eb011140          ADD      r1,r1,r0,LSL #5
000018  f2047054          ADD      r0,r4,#0x754
00001c  eb000081          ADD      r0,r0,r1,LSL #2
000020  f8b0809a          LDRH     r8,[r0,#0x9a]
;;;225        uint16 head = pCB->tx.head;                            // 发送命令帧队列头索引号
000024  f8b4ad6c          LDRH     r10,[r4,#0xd6c]
;;;226        uint16 end = pCB->tx.end;                              // 发送命令帧队列尾索引号
000028  f8b40d6e          LDRH     r0,[r4,#0xd6e]
00002c  9006              STR      r0,[sp,#0x18]
;;;227        CAN_CMD_FRAME *pCmd = &pCB->tx.cmdQueue[pCB->tx.head]; // 取当前发送缓冲区地址
00002e  f8b40d6c          LDRH     r0,[r4,#0xd6c]
000032  ebc001c0          RSB      r1,r0,r0,LSL #3
000036  eb011140          ADD      r1,r1,r0,LSL #5
00003a  f2047054          ADD      r0,r4,#0x754
00003e  eb000981          ADD      r9,r0,r1,LSL #2
;;;228        can_trasnmit_message_struct canTxMsgCB;
;;;229        uint16 standardID = 0x000;
000042  f04f0b00          MOV      r11,#0
;;;230        uint8 i; // 内部赋值用
;;;231        uint32 extendedID;
;;;232    
;;;233        // 参数合法性检验
;;;234        if (NULL == pCB)
000046  b91c              CBNZ     r4,|L15.80|
;;;235        {
;;;236            return FALSE;
000048  2000              MOVS     r0,#0
                  |L15.74|
;;;237        }
;;;238    
;;;239        // 队列为空，不处理
;;;240        if (head == end)
;;;241        {
;;;242            return FALSE;
;;;243        }
;;;244    
;;;245        // ■■执行到这里，说明队列非空■■
;;;246    
;;;247        // 当前命令帧未发送完时，根据长度的变化取出命令帧中的数据放到发送寄存器中
;;;248        if (index < length)
;;;249        {
;;;250            // 配置为标准帧
;;;251            // 配置为数据帧
;;;252            canTxMsgCB.tx_ft = CAN_FT_DATA;
;;;253            
;;;254            switch (dut_info.ID)
;;;255            {
;;;256                case DUT_TYPE_CM:
;;;257                    if (dut_info.frameType == DUT_FRAME_TYPE_EXT)
;;;258                    {
;;;259                        // 扩展帧
;;;260                        canTxMsgCB.tx_ff = CAN_FF_EXTENDED;
;;;261                        extendedID = pCmd->deviceID;
;;;262                        canTxMsgCB.tx_efid = extendedID;
;;;263                    }
;;;264                    else
;;;265                    {
;;;266                        // 标准帧
;;;267                        canTxMsgCB.tx_ff = CAN_FF_STANDARD;
;;;268                        standardID = (uint16)CAN_DEVICE_ID_HMI; // id：001
;;;269                        canTxMsgCB.tx_sfid = standardID;
;;;270                    }
;;;271                    break;
;;;272    
;;;273                case DUT_TYPE_GB:
;;;274                case DUT_TYPE_KAIYANG:
;;;275                        // 扩展帧
;;;276                        canTxMsgCB.tx_ff = CAN_FF_EXTENDED;
;;;277                        extendedID = pCmd->deviceID;
;;;278                        canTxMsgCB.tx_efid = extendedID;
;;;279                    break;
;;;280                    
;;;281                default:
;;;282                    // 标准帧
;;;283                    canTxMsgCB.tx_ff = CAN_FF_STANDARD;
;;;284                    standardID = (uint16)CAN_DEVICE_ID_HMI; // id：001
;;;285                    
;;;286                    if(DUT_TYPE_MEIDI == dut_info.ID)
;;;287                    {
;;;288                        canTxMsgCB.tx_sfid = 0x00000753;                    
;;;289                    }
;;;290                    else
;;;291                    {
;;;292                        canTxMsgCB.tx_sfid = standardID;                
;;;293                    }
;;;294                    
;;;295                    break;
;;;296            }
;;;297            // ■■标准数据帧CAN消息格式■■
;;;298    
;;;299            // 填充 DLC，最大8字节.当前长度>8字节，先发8字节。
;;;300            if ((length - index) >= CAN_ONCEMESSAGE_MAX_SIZE)
;;;301            {
;;;302                canTxMsgCB.tx_dlen = CAN_ONCEMESSAGE_MAX_SIZE;
;;;303            }
;;;304            else
;;;305            {
;;;306                canTxMsgCB.tx_dlen = length - index;
;;;307            }
;;;308    
;;;309            // 填充数据
;;;310            for (i = 0; i < canTxMsgCB.tx_dlen; i++)
;;;311            {
;;;312                canTxMsgCB.tx_data[i] = pCmd->buff[index + i];
;;;313            }
;;;314    
;;;315            // 发送数据
;;;316            if (can_message_transmit(CAN0, &canTxMsgCB) == CAN_TRANSMIT_NOMAILBOX)
;;;317            {
;;;318                return FALSE;
;;;319            }
;;;320    
;;;321            // 开启邮箱空中断
;;;322            can_interrupt_enable(CAN0, CAN_INT_TME);
;;;323    
;;;324            return TRUE;
;;;325        }
;;;326        // 当前命令帧发送完时，删除之
;;;327        else
;;;328        {
;;;329            pCB->tx.cmdQueue[head].length = 0;
;;;330            pCB->tx.head++;
;;;331            pCB->tx.head %= CAN_TX_QUEUE_SIZE;
;;;332            pCB->tx.index = 0;
;;;333    
;;;334            // 进入CAN消息发送待机状态
;;;335            CAN_TxEnterState(CAN_TX_STATE_STANDBY);
;;;336    
;;;337            return FALSE;
;;;338        }
;;;339    }
00004a  b007              ADD      sp,sp,#0x1c
00004c  e8bd8ff0          POP      {r4-r11,pc}
                  |L15.80|
000050  9806              LDR      r0,[sp,#0x18]         ;240
000052  4582              CMP      r10,r0                ;240
000054  d101              BNE      |L15.90|
000056  2000              MOVS     r0,#0                 ;242
000058  e7f7              B        |L15.74|
                  |L15.90|
00005a  4546              CMP      r6,r8                 ;248
00005c  da61              BGE      |L15.290|
00005e  2000              MOVS     r0,#0                 ;252
000060  f88d000d          STRB     r0,[sp,#0xd]          ;252
000064  483f              LDR      r0,|L15.356|
000066  7d80              LDRB     r0,[r0,#0x16]         ;254  ; dut_info
000068  2801              CMP      r0,#1                 ;254
00006a  d017              BEQ      |L15.156|
00006c  2802              CMP      r0,#2                 ;254
00006e  d002              BEQ      |L15.118|
000070  2805              CMP      r0,#5                 ;254
000072  d11b              BNE      |L15.172|
000074  e013              B        |L15.158|
                  |L15.118|
000076  483b              LDR      r0,|L15.356|
000078  7e00              LDRB     r0,[r0,#0x18]         ;257  ; dut_info
00007a  2801              CMP      r0,#1                 ;257
00007c  d106              BNE      |L15.140|
00007e  2004              MOVS     r0,#4                 ;260
000080  f88d000c          STRB     r0,[sp,#0xc]          ;260
000084  f8d97000          LDR      r7,[r9,#0]            ;261
000088  9702              STR      r7,[sp,#8]            ;262
00008a  e006              B        |L15.154|
                  |L15.140|
00008c  2000              MOVS     r0,#0                 ;267
00008e  f88d000c          STRB     r0,[sp,#0xc]          ;267
000092  f04f0b01          MOV      r11,#1                ;268
000096  f8cdb004          STR      r11,[sp,#4]           ;269
                  |L15.154|
00009a  e017              B        |L15.204|
                  |L15.156|
00009c  bf00              NOP                            ;274
                  |L15.158|
00009e  2004              MOVS     r0,#4                 ;276
0000a0  f88d000c          STRB     r0,[sp,#0xc]          ;276
0000a4  f8d97000          LDR      r7,[r9,#0]            ;277
0000a8  9702              STR      r7,[sp,#8]            ;278
0000aa  e00f              B        |L15.204|
                  |L15.172|
0000ac  2000              MOVS     r0,#0                 ;283
0000ae  f88d000c          STRB     r0,[sp,#0xc]          ;283
0000b2  f04f0b01          MOV      r11,#1                ;284
0000b6  482b              LDR      r0,|L15.356|
0000b8  7d80              LDRB     r0,[r0,#0x16]         ;286  ; dut_info
0000ba  2808              CMP      r0,#8                 ;286
0000bc  d103              BNE      |L15.198|
0000be  f2407053          MOV      r0,#0x753             ;288
0000c2  9001              STR      r0,[sp,#4]            ;288
0000c4  e001              B        |L15.202|
                  |L15.198|
0000c6  f8cdb004          STR      r11,[sp,#4]           ;292
                  |L15.202|
0000ca  bf00              NOP                            ;295
                  |L15.204|
0000cc  bf00              NOP                            ;271
0000ce  eba80006          SUB      r0,r8,r6              ;300
0000d2  2808              CMP      r0,#8                 ;300
0000d4  db03              BLT      |L15.222|
0000d6  2008              MOVS     r0,#8                 ;302
0000d8  f88d000e          STRB     r0,[sp,#0xe]          ;302
0000dc  e004              B        |L15.232|
                  |L15.222|
0000de  eba80006          SUB      r0,r8,r6              ;306
0000e2  b2c0              UXTB     r0,r0                 ;306
0000e4  f88d000e          STRB     r0,[sp,#0xe]          ;306
                  |L15.232|
0000e8  2500              MOVS     r5,#0                 ;310
0000ea  e008              B        |L15.254|
                  |L15.236|
0000ec  1971              ADDS     r1,r6,r5              ;312
0000ee  f1090004          ADD      r0,r9,#4              ;312
0000f2  5c41              LDRB     r1,[r0,r1]            ;312
0000f4  f10d000f          ADD      r0,sp,#0xf            ;312
0000f8  5541              STRB     r1,[r0,r5]            ;312
0000fa  1c68              ADDS     r0,r5,#1              ;310
0000fc  b2c5              UXTB     r5,r0                 ;310
                  |L15.254|
0000fe  f89d000e          LDRB     r0,[sp,#0xe]          ;310
000102  42a8              CMP      r0,r5                 ;310
000104  dcf2              BGT      |L15.236|
000106  a901              ADD      r1,sp,#4              ;316
000108  4817              LDR      r0,|L15.360|
00010a  f7fffffe          BL       can_message_transmit
00010e  2804              CMP      r0,#4                 ;316
000110  d101              BNE      |L15.278|
000112  2000              MOVS     r0,#0                 ;318
000114  e799              B        |L15.74|
                  |L15.278|
000116  2101              MOVS     r1,#1                 ;322
000118  4813              LDR      r0,|L15.360|
00011a  f7fffffe          BL       can_interrupt_enable
00011e  2001              MOVS     r0,#1                 ;324
000120  e793              B        |L15.74|
                  |L15.290|
000122  2100              MOVS     r1,#0                 ;329
000124  ebca00ca          RSB      r0,r10,r10,LSL #3     ;329
000128  eb00124a          ADD      r2,r0,r10,LSL #5      ;329
00012c  f2047054          ADD      r0,r4,#0x754          ;329
000130  eb000082          ADD      r0,r0,r2,LSL #2       ;329
000134  f8a0109a          STRH     r1,[r0,#0x9a]         ;329
000138  f8b40d6c          LDRH     r0,[r4,#0xd6c]        ;330
00013c  1c40              ADDS     r0,r0,#1              ;330
00013e  f8a40d6c          STRH     r0,[r4,#0xd6c]        ;330
000142  f8b40d6c          LDRH     r0,[r4,#0xd6c]        ;331
000146  210a              MOVS     r1,#0xa               ;331
000148  fb90f2f1          SDIV     r2,r0,r1              ;331
00014c  fb010012          MLS      r0,r1,r2,r0           ;331
000150  f8a40d6c          STRH     r0,[r4,#0xd6c]        ;331
000154  2100              MOVS     r1,#0                 ;332
000156  f8a41d70          STRH     r1,[r4,#0xd70]        ;332
00015a  2002              MOVS     r0,#2                 ;335
00015c  f7fffffe          BL       CAN_TxEnterState
000160  2000              MOVS     r0,#0                 ;337
000162  e772              B        |L15.74|
;;;340    
                          ENDP

                  |L15.356|
                          DCD      dut_info
                  |L15.360|
                          DCD      0x40006400

                          AREA ||i.CAN_Tx_NextFram||, CODE, READONLY, ALIGN=1

                  CAN_Tx_NextFram PROC
;;;341    // 发送成功启动下一帧:TRUE,启动下一帧；FALSE，发送完成.
;;;342    BOOL CAN_Tx_NextFram(CAN_CB *pCB)
000000  b530              PUSH     {r4,r5,lr}
;;;343    {
000002  4601              MOV      r1,r0
;;;344        uint16 index = pCB->tx.index;                          // 当前发送数据的索引号
000004  f8b13d70          LDRH     r3,[r1,#0xd70]
;;;345        uint16 length = pCB->tx.cmdQueue[pCB->tx.head].length; // 当前发送的命令帧的长度
000008  f8b10d6c          LDRH     r0,[r1,#0xd6c]
00000c  ebc005c0          RSB      r5,r0,r0,LSL #3
000010  eb051540          ADD      r5,r5,r0,LSL #5
000014  f2017054          ADD      r0,r1,#0x754
000018  eb000085          ADD      r0,r0,r5,LSL #2
00001c  f8b0209a          LDRH     r2,[r0,#0x9a]
;;;346        uint8 txBnDLC = 0;
000020  2400              MOVS     r4,#0
;;;347    
;;;348        // 参数合法性检验
;;;349        if (NULL == pCB)
000022  b909              CBNZ     r1,|L16.40|
;;;350        {
;;;351            return FALSE;
000024  2000              MOVS     r0,#0
                  |L16.38|
;;;352        }
;;;353    
;;;354        // 判断上一次成功发送的字节数.
;;;355        if (length - index >= CAN_ONCEMESSAGE_MAX_SIZE)
;;;356        {
;;;357            txBnDLC = CAN_ONCEMESSAGE_MAX_SIZE;
;;;358        }
;;;359        else
;;;360        {
;;;361            txBnDLC = length - index;
;;;362        }
;;;363        pCB->tx.index += txBnDLC;
;;;364    
;;;365        // 启动下一帧
;;;366        if (pCB->tx.index < length)
;;;367        {
;;;368            // 进入CAN消息下一帧发送状态
;;;369            return TRUE;
;;;370        }
;;;371        else
;;;372        {
;;;373            // 发送完成
;;;374            return FALSE;
;;;375        }
;;;376    }
000026  bd30              POP      {r4,r5,pc}
                  |L16.40|
000028  1ad0              SUBS     r0,r2,r3              ;355
00002a  2808              CMP      r0,#8                 ;355
00002c  db01              BLT      |L16.50|
00002e  2408              MOVS     r4,#8                 ;357
000030  e001              B        |L16.54|
                  |L16.50|
000032  1ad0              SUBS     r0,r2,r3              ;361
000034  b2c4              UXTB     r4,r0                 ;361
                  |L16.54|
000036  f8b10d70          LDRH     r0,[r1,#0xd70]        ;363
00003a  4420              ADD      r0,r0,r4              ;363
00003c  f8a10d70          STRH     r0,[r1,#0xd70]        ;363
000040  f8b10d70          LDRH     r0,[r1,#0xd70]        ;366
000044  4290              CMP      r0,r2                 ;366
000046  da01              BGE      |L16.76|
000048  2001              MOVS     r0,#1                 ;369
00004a  e7ec              B        |L16.38|
                  |L16.76|
00004c  2000              MOVS     r0,#0                 ;374
00004e  e7ea              B        |L16.38|
;;;377    
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_Init||, CODE, READONLY, ALIGN=2

                  IAP_CTRL_CAN_Init PROC
;;;96     // CAN 初始化
;;;97     void IAP_CTRL_CAN_Init(uint16 bund)
000000  b510              PUSH     {r4,lr}
;;;98     {
000002  4604              MOV      r4,r0
;;;99         // 初始化硬件配置
;;;100        CAN_HW_Init(bund);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       CAN_HW_Init
;;;101    
;;;102        // 初始化结构体
;;;103        CAN_DataStructureInit(&sysCanCB);
00000a  4803              LDR      r0,|L17.24|
00000c  f7fffffe          BL       CAN_DataStructureInit
;;;104    
;;;105        // CAN发送状态机初始化
;;;106        CAN_TxStateInit();
000010  f7fffffe          BL       CAN_TxStateInit
;;;107    }
000014  bd10              POP      {r4,pc}
;;;108    
                          ENDP

000016  0000              DCW      0x0000
                  |L17.24|
                          DCD      sysCanCB

                          AREA ||i.IAP_CTRL_CAN_SendCmdCheckFlashBlankResult||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdCheckFlashBlankResult PROC
;;;1583   // 查空结果上报
;;;1584   void IAP_CTRL_CAN_SendCmdCheckFlashBlankResult(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1585   {
000002  4604              MOV      r4,r0
;;;1586       IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1587       IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_CHECK_FLASH_BLANK_RESULT);
00000a  2029              MOVS     r0,#0x29
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1588       IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1589       IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1590       IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1591   }
000020  bd10              POP      {r4,pc}
;;;1592   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdEraseFlashResult||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdEraseFlashResult PROC
;;;1563   // 擦除FLASH结果上报
;;;1564   void IAP_CTRL_CAN_SendCmdEraseFlashResult(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1565   {
000002  4604              MOV      r4,r0
;;;1566       IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1567       IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_IAP_ERASE_FLASH_RESULT);
00000a  2025              MOVS     r0,#0x25
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1568       IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1569       IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1570       IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1571   }
000020  bd10              POP      {r4,pc}
;;;1572   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdNoAck||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdNoAck PROC
;;;1467   // 发送命令不带应答
;;;1468   void IAP_CTRL_CAN_SendCmdNoAck(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1469   {
000002  4604              MOV      r4,r0
;;;1470       IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1471       IAP_CTRL_CAN_TxAddData(param);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1472       IAP_CTRL_CAN_TxAddData(0);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1473       IAP_CTRL_CAN_TxAddData(1); // 段码屏工程允许
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1474       IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1475   }
000020  bd10              POP      {r4,pc}
;;;1476   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdProjectApply||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdProjectApply PROC
;;;1535   // 工程模式启用
;;;1536   void IAP_CTRL_CAN_SendCmdProjectApply(uint8 *param)
000000  b570              PUSH     {r4-r6,lr}
;;;1537   {
000002  4605              MOV      r5,r0
;;;1538       uint8 len = strlen((char *)param);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       strlen
00000a  b2c6              UXTB     r6,r0
;;;1539       uint8 i;
;;;1540   
;;;1541       IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
00000c  2055              MOVS     r0,#0x55
00000e  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1542       IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_PROJECT_APPLY);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1543       IAP_CTRL_CAN_TxAddData(len); // 数据长度
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1544   
;;;1545       for (i = 0; i < len; i++)
00001e  2400              MOVS     r4,#0
000020  e004              B        |L21.44|
                  |L21.34|
;;;1546       {
;;;1547           IAP_CTRL_CAN_TxAddData(param[i]);
000022  5d28              LDRB     r0,[r5,r4]
000024  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
000028  1c60              ADDS     r0,r4,#1              ;1545
00002a  b2c4              UXTB     r4,r0                 ;1545
                  |L21.44|
00002c  42b4              CMP      r4,r6                 ;1545
00002e  dbf8              BLT      |L21.34|
;;;1548       }
;;;1549   
;;;1550       IAP_CTRL_CAN_TxAddFrame();
000030  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1551   }
000034  bd70              POP      {r4-r6,pc}
;;;1552   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdProjectReady||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdProjectReady PROC
;;;1553   // 工程模式准备就绪报告
;;;1554   void IAP_CTRL_CAN_SendCmdProjectReady(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1555   {
000002  4604              MOV      r4,r0
;;;1556       IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1557       IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_PROJECT_READY);
00000a  2003              MOVS     r0,#3
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1558       IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1559       IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1560       IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1561   }
000020  bd10              POP      {r4,pc}
;;;1562   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdUIEraseResultReport||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdUIEraseResultReport PROC
;;;1602   // 发送UI数据擦除结果
;;;1603   void IAP_CTRL_CAN_SendCmdUIEraseResultReport(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1604   {
000002  4604              MOV      r4,r0
;;;1605       IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1606       IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_UI_DATA_ERASE_ACK);
00000a  2013              MOVS     r0,#0x13
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1607       IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1608       IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1609       IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1610   }
000020  bd10              POP      {r4,pc}
;;;1611   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdUIWriteDataResultReport||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdUIWriteDataResultReport PROC
;;;1612   // 发送UI数据写入结果
;;;1613   void IAP_CTRL_CAN_SendCmdUIWriteDataResultReport(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1614   {
000002  4604              MOV      r4,r0
;;;1615       IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1616       IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_UI_DATA_WRITE_RESULT);
00000a  2015              MOVS     r0,#0x15
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1617       IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1618       IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1619       IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1620   }
000020  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdUpdataFinishResult||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdUpdataFinishResult PROC
;;;1593   // 系统升级结束确认
;;;1594   void IAP_CTRL_CAN_SendCmdUpdataFinishResult(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1595   {
000002  4604              MOV      r4,r0
;;;1596       IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1597       IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_UPDATA_FINISH_RESULT);
00000a  202b              MOVS     r0,#0x2b
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1598       IAP_CTRL_CAN_TxAddData(0); // 数据长度
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1599       IAP_CTRL_CAN_TxAddFrame();
000016  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1600   }
00001a  bd10              POP      {r4,pc}
;;;1601   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendCmdWriteFlashResult||, CODE, READONLY, ALIGN=1

                  IAP_CTRL_CAN_SendCmdWriteFlashResult PROC
;;;1573   // IAP数据写入结果上报
;;;1574   void IAP_CTRL_CAN_SendCmdWriteFlashResult(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1575   {
000002  4604              MOV      r4,r0
;;;1576       IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1577       IAP_CTRL_CAN_TxAddData(IAP_CTRL_CAN_CMD_UP_IAP_WRITE_FLASH_RESULT);
00000a  2027              MOVS     r0,#0x27
00000c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1578       IAP_CTRL_CAN_TxAddData(1); // 数据长度
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1579       IAP_CTRL_CAN_TxAddData(param);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1580       IAP_CTRL_CAN_TxAddFrame();
00001c  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1581   }
000020  bd10              POP      {r4,pc}
;;;1582   
                          ENDP


                          AREA ||i.IAP_CTRL_CAN_SendUpDataPacket||, CODE, READONLY, ALIGN=2

                  IAP_CTRL_CAN_SendUpDataPacket PROC
;;;1477   // 发送升级数据
;;;1478   void IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE upDataType, CAN_CMD cmd, uint32 flashAddr, uint32 addr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1479   {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;1480       uint8 i = 0;
00000c  2400              MOVS     r4,#0
;;;1481       switch (upDataType)
00000e  f1b80f01          CMP      r8,#1
000012  d028              BEQ      |L27.102|
000014  f1b80f02          CMP      r8,#2
000018  d04f              BEQ      |L27.186|
00001a  f1b80f05          CMP      r8,#5
00001e  d16b              BNE      |L27.248|
;;;1482       {
;;;1483       case DUT_FILE_TYPE_HEX:                          // hex
;;;1484           dut_info.reconnectionRepeatContent[0] = 121; // 总长度
000020  2079              MOVS     r0,#0x79
000022  4938              LDR      r1,|L27.260|
000024  f881004c          STRB     r0,[r1,#0x4c]
;;;1485           dut_info.reconnectionRepeatContent[1] = CAN_CMD_HEAD;
000028  2155              MOVS     r1,#0x55
00002a  4836              LDR      r0,|L27.260|
00002c  f880104d          STRB     r1,[r0,#0x4d]
;;;1486           dut_info.reconnectionRepeatContent[2] = cmd;
000030  f880604e          STRB     r6,[r0,#0x4e]
;;;1487           dut_info.reconnectionRepeatContent[3] = 0;                                            // 数据长度
000034  2100              MOVS     r1,#0
000036  f880104f          STRB     r1,[r0,#0x4f]
;;;1488           dut_info.reconnectionRepeatContent[4] = 0;                                            // 添加是否加密
00003a  f8801050          STRB     r1,[r0,#0x50]
;;;1489           dut_info.reconnectionRepeatContent[5] = 0;                                            // 添加密钥
00003e  f8801051          STRB     r1,[r0,#0x51]
;;;1490           SPI_FLASH_ReadArray(&dut_info.reconnectionRepeatContent[6], flashAddr + (addr), 116); // 工具读取 4+112 个字节
000042  1979              ADDS     r1,r7,r5
000044  2274              MOVS     r2,#0x74
000046  3052              ADDS     r0,r0,#0x52
000048  f7fffffe          BL       SPI_FLASH_ReadArray
;;;1491           for (i = 0; i < 121; i++)                                                             // 添加数据
00004c  bf00              NOP      
00004e  e007              B        |L27.96|
                  |L27.80|
;;;1492           {
;;;1493               IAP_CTRL_CAN_TxAddData(dut_info.reconnectionRepeatContent[i + 1]);
000050  492c              LDR      r1,|L27.260|
000052  314c              ADDS     r1,r1,#0x4c
000054  1c62              ADDS     r2,r4,#1
000056  5c88              LDRB     r0,[r1,r2]
000058  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
00005c  1c60              ADDS     r0,r4,#1              ;1491
00005e  b2c4              UXTB     r4,r0                 ;1491
                  |L27.96|
000060  2c79              CMP      r4,#0x79              ;1491
000062  dbf5              BLT      |L27.80|
;;;1494           }
;;;1495           break;
000064  e049              B        |L27.250|
                  |L27.102|
;;;1496   
;;;1497       case DUT_FILE_TYPE_BIN:                          // bin
;;;1498           dut_info.reconnectionRepeatContent[0] = 135; // 总长度
000066  2087              MOVS     r0,#0x87
000068  4926              LDR      r1,|L27.260|
00006a  f881004c          STRB     r0,[r1,#0x4c]
;;;1499           dut_info.reconnectionRepeatContent[1] = CAN_CMD_HEAD;
00006e  2155              MOVS     r1,#0x55
000070  4824              LDR      r0,|L27.260|
000072  f880104d          STRB     r1,[r0,#0x4d]
;;;1500           dut_info.reconnectionRepeatContent[2] = cmd;
000076  f880604e          STRB     r6,[r0,#0x4e]
;;;1501           dut_info.reconnectionRepeatContent[3] = 0;                                            // 数据长度
00007a  2100              MOVS     r1,#0
00007c  f880104f          STRB     r1,[r0,#0x4f]
;;;1502           dut_info.reconnectionRepeatContent[4] = ((addr) & 0xFF000000) >> 24;                  // 数据长度
000080  0e29              LSRS     r1,r5,#24
000082  f8801050          STRB     r1,[r0,#0x50]
;;;1503           dut_info.reconnectionRepeatContent[5] = ((addr) & 0x00FF0000) >> 16;                  // 数据长度
000086  0c29              LSRS     r1,r5,#16
000088  f8801051          STRB     r1,[r0,#0x51]
;;;1504           dut_info.reconnectionRepeatContent[6] = ((addr) & 0x0000FF00) >> 8;                   // 数据长度
00008c  0a29              LSRS     r1,r5,#8
00008e  f8801052          STRB     r1,[r0,#0x52]
;;;1505           dut_info.reconnectionRepeatContent[7] = ((addr) & 0x000000FF);                        // 数据长度
000092  f8805053          STRB     r5,[r0,#0x53]
;;;1506           SPI_FLASH_ReadArray(&dut_info.reconnectionRepeatContent[8], flashAddr + (addr), 128); // 工具读取128字节
000096  1979              ADDS     r1,r7,r5
000098  2280              MOVS     r2,#0x80
00009a  3054              ADDS     r0,r0,#0x54
00009c  f7fffffe          BL       SPI_FLASH_ReadArray
;;;1507           for (i = 0; i < 135; i++)                                                             // 添加数据
0000a0  2400              MOVS     r4,#0
0000a2  e007              B        |L27.180|
                  |L27.164|
;;;1508           {
;;;1509               IAP_CTRL_CAN_TxAddData(dut_info.reconnectionRepeatContent[i + 1]);
0000a4  4917              LDR      r1,|L27.260|
0000a6  314c              ADDS     r1,r1,#0x4c
0000a8  1c62              ADDS     r2,r4,#1
0000aa  5c88              LDRB     r0,[r1,r2]
0000ac  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
0000b0  1c60              ADDS     r0,r4,#1              ;1507
0000b2  b2c4              UXTB     r4,r0                 ;1507
                  |L27.180|
0000b4  2c87              CMP      r4,#0x87              ;1507
0000b6  dbf5              BLT      |L27.164|
;;;1510           }
;;;1511           break;
0000b8  e01f              B        |L27.250|
                  |L27.186|
;;;1512   
;;;1513       case DUT_FILE_TYPE_UI_BIN:
;;;1514           dut_info.reconnectionRepeatContent[0] = 135; // 总长度
0000ba  2087              MOVS     r0,#0x87
0000bc  4911              LDR      r1,|L27.260|
0000be  f881004c          STRB     r0,[r1,#0x4c]
;;;1515           dut_info.reconnectionRepeatContent[1] = CAN_CMD_HEAD;
0000c2  2155              MOVS     r1,#0x55
0000c4  480f              LDR      r0,|L27.260|
0000c6  f880104d          STRB     r1,[r0,#0x4d]
;;;1516           dut_info.reconnectionRepeatContent[2] = cmd;
0000ca  f880604e          STRB     r6,[r0,#0x4e]
;;;1517           dut_info.reconnectionRepeatContent[3] = 0;                                            // 数据长度
0000ce  2100              MOVS     r1,#0
0000d0  f880104f          STRB     r1,[r0,#0x4f]
;;;1518   //        dut_info.reconnectionRepeatContent[4] = ((addr) & 0xFF000000) >> 24;                  // 数据长度
;;;1519   //        dut_info.reconnectionRepeatContent[5] = ((addr) & 0x00FF0000) >> 16;                  // 数据长度
;;;1520   //        dut_info.reconnectionRepeatContent[6] = ((addr) & 0x0000FF00) >> 8;                   // 数据长度
;;;1521   //        dut_info.reconnectionRepeatContent[7] = ((addr) & 0x000000FF);                        // 数据长度
;;;1522           SPI_FLASH_ReadArray(&dut_info.reconnectionRepeatContent[4], flashAddr + (addr), 132); // 工具读取128字节
0000d4  1979              ADDS     r1,r7,r5
0000d6  2284              MOVS     r2,#0x84
0000d8  3050              ADDS     r0,r0,#0x50
0000da  f7fffffe          BL       SPI_FLASH_ReadArray
;;;1523           for (i = 0; i < 135; i++)                                                             // 添加数据
0000de  2400              MOVS     r4,#0
0000e0  e007              B        |L27.242|
                  |L27.226|
;;;1524           {
;;;1525               IAP_CTRL_CAN_TxAddData(dut_info.reconnectionRepeatContent[i + 1]);
0000e2  4908              LDR      r1,|L27.260|
0000e4  314c              ADDS     r1,r1,#0x4c
0000e6  1c62              ADDS     r2,r4,#1
0000e8  5c88              LDRB     r0,[r1,r2]
0000ea  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
0000ee  1c60              ADDS     r0,r4,#1              ;1523
0000f0  b2c4              UXTB     r4,r0                 ;1523
                  |L27.242|
0000f2  2c87              CMP      r4,#0x87              ;1523
0000f4  dbf5              BLT      |L27.226|
;;;1526           }    
;;;1527            break;   
0000f6  e000              B        |L27.250|
                  |L27.248|
;;;1528       
;;;1529       default:
;;;1530           break;
0000f8  bf00              NOP      
                  |L27.250|
0000fa  bf00              NOP                            ;1495
;;;1531       }
;;;1532       IAP_CTRL_CAN_TxAddFrame(); // 调整帧格式,修改长度和添加校验
0000fc  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1533   }
000100  e8bd81f0          POP      {r4-r8,pc}
;;;1534   
                          ENDP

                  |L27.260|
                          DCD      dut_info

                          AREA ||i.IAP_CTRL_CAN_TxAddData||, CODE, READONLY, ALIGN=2

                  IAP_CTRL_CAN_TxAddData PROC
;;;148    // 向发送命令帧队列中添加数据
;;;149    void IAP_CTRL_CAN_TxAddData(uint8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;150    {
000002  4601              MOV      r1,r0
;;;151        uint16 head = sysCanCB.tx.head;
000004  4c13              LDR      r4,|L28.84|
000006  f8b42d6c          LDRH     r2,[r4,#0xd6c]
;;;152        uint16 end = sysCanCB.tx.end;
00000a  f8b43d6e          LDRH     r3,[r4,#0xd6e]
;;;153        CAN_CMD_FRAME *pCmdFrame = &sysCanCB.tx.cmdQueue[sysCanCB.tx.end];
00000e  f8b44d6e          LDRH     r4,[r4,#0xd6e]
000012  ebc405c4          RSB      r5,r4,r4,LSL #3
000016  eb051544          ADD      r5,r5,r4,LSL #5
00001a  4c0f              LDR      r4,|L28.88|
00001c  eb040085          ADD      r0,r4,r5,LSL #2
;;;154    
;;;155        // 发送缓冲区已满，不予接收
;;;156        if ((end + 1) % CAN_TX_QUEUE_SIZE == head)
000020  1c5c              ADDS     r4,r3,#1
000022  250a              MOVS     r5,#0xa
000024  fb94f6f5          SDIV     r6,r4,r5
000028  fb054416          MLS      r4,r5,r6,r4
00002c  4294              CMP      r4,r2
00002e  d100              BNE      |L28.50|
                  |L28.48|
;;;157        {
;;;158            return;
;;;159        }
;;;160    
;;;161        // 队尾命令帧已满，退出
;;;162        if (pCmdFrame->length >= CAN_CMD_FRAME_LENGTH_MAX)
;;;163        {
;;;164            return;
;;;165        }
;;;166    
;;;167        // 数据添加到帧末尾，并更新帧长度
;;;168        pCmdFrame->buff[pCmdFrame->length] = data;
;;;169        pCmdFrame->length++;
;;;170    }
000030  bd70              POP      {r4-r6,pc}
                  |L28.50|
000032  f8b0409a          LDRH     r4,[r0,#0x9a]         ;162
000036  2c96              CMP      r4,#0x96              ;162
000038  db00              BLT      |L28.60|
00003a  e7f9              B        |L28.48|
                  |L28.60|
00003c  f8b0509a          LDRH     r5,[r0,#0x9a]         ;168
000040  1d04              ADDS     r4,r0,#4              ;168
000042  5561              STRB     r1,[r4,r5]            ;168
000044  f8b0409a          LDRH     r4,[r0,#0x9a]         ;169
000048  1c64              ADDS     r4,r4,#1              ;169
00004a  f8a0409a          STRH     r4,[r0,#0x9a]         ;169
00004e  bf00              NOP      
000050  e7ee              B        |L28.48|
;;;171    
                          ENDP

000052  0000              DCW      0x0000
                  |L28.84|
                          DCD      sysCanCB
                  |L28.88|
                          DCD      sysCanCB+0x754

                          AREA ||i.IAP_CTRL_CAN_TxAddFrame||, CODE, READONLY, ALIGN=2

                  IAP_CTRL_CAN_TxAddFrame PROC
;;;172    // 发送命令帧处理,自动扶正帧长度以及检验码
;;;173    void IAP_CTRL_CAN_TxAddFrame(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;174    {
;;;175        uint16 head = sysCanCB.tx.head;
000004  4839              LDR      r0,|L29.236|
000006  f8b07d6c          LDRH     r7,[r0,#0xd6c]
;;;176        uint16 end = sysCanCB.tx.end;
00000a  f8b04d6e          LDRH     r4,[r0,#0xd6e]
;;;177        uint8 *buff = sysCanCB.tx.cmdQueue[end].buff;
00000e  ebc400c4          RSB      r0,r4,r4,LSL #3
000012  eb001144          ADD      r1,r0,r4,LSL #5
000016  4836              LDR      r0,|L29.240|
000018  eb000081          ADD      r0,r0,r1,LSL #2
00001c  1d06              ADDS     r6,r0,#4
;;;178        uint16 length = sysCanCB.tx.cmdQueue[end].length;
00001e  ebc400c4          RSB      r0,r4,r4,LSL #3
000022  eb001144          ADD      r1,r0,r4,LSL #5
000026  4832              LDR      r0,|L29.240|
000028  eb000081          ADD      r0,r0,r1,LSL #2
00002c  f8b0509a          LDRH     r5,[r0,#0x9a]
;;;179        uint8 cmdHead = buff[CAN_CMD_HEAD_INDEX]; // 帧头
000030  f8968000          LDRB     r8,[r6,#0]
;;;180    
;;;181        // 发送缓冲区已满，不予接收
;;;182        if ((end + 1) % CAN_TX_QUEUE_SIZE == head)
000034  1c60              ADDS     r0,r4,#1
000036  210a              MOVS     r1,#0xa
000038  fb90f2f1          SDIV     r2,r0,r1
00003c  fb010012          MLS      r0,r1,r2,r0
000040  42b8              CMP      r0,r7
000042  d101              BNE      |L29.72|
                  |L29.68|
;;;183        {
;;;184            return;
;;;185        }
;;;186    
;;;187        // 命令头错误
;;;188        if (CAN_CMD_HEAD != cmdHead)
;;;189        {
;;;190            // 把帧数据索引放在最开始位置
;;;191            sysCanCB.tx.cmdQueue[end].length = 0;
;;;192            return;
;;;193        }
;;;194    
;;;195        // 命令头正确，但数据长度不对(数据长度减去CRC的长度)
;;;196        if ((CAN_CMD_FRAME_LENGTH_MAX - CAN_CHECK_BYTE_SIZE < length) || (CAN_CMD_FRAME_LENGTH_MIN - CAN_CHECK_BYTE_SIZE > length))
;;;197        {
;;;198            // 把帧数据索引放在最开始位置
;;;199            sysCanCB.tx.cmdQueue[end].length = 0;
;;;200            buff[CAN_CMD_HEAD_INDEX] = CAN_CMD_NONHEAD; // 避免数据没更新时，再次进入
;;;201            return;
;;;202        }
;;;203    
;;;204        // 执行到此，命令头正确，数据长度正确,发送缓冲区未满
;;;205        // 长度扶正
;;;206        buff[CAN_CMD_LENGTH_INDEX] = length - CAN_CMD_FRAME_LENGTH_MIN + CAN_CHECK_BYTE_SIZE;
;;;207    
;;;208        // 填充CRC校验码
;;;209        CAN_AddSum(buff, length);
;;;210    
;;;211        // 将数据长度填到待发送缓冲器
;;;212        sysCanCB.tx.cmdQueue[end].length = length + CAN_CHECK_BYTE_SIZE;
;;;213    
;;;214        // 发送环形队列更新位置
;;;215        sysCanCB.tx.end++;
;;;216        sysCanCB.tx.end %= CAN_TX_QUEUE_SIZE;
;;;217        sysCanCB.tx.cmdQueue[sysCanCB.tx.end].length = 0; // 2015.12.2修改
;;;218    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L29.72|
000048  f1b80f55          CMP      r8,#0x55              ;188
00004c  d00a              BEQ      |L29.100|
00004e  2100              MOVS     r1,#0                 ;191
000050  ebc400c4          RSB      r0,r4,r4,LSL #3       ;191
000054  eb001244          ADD      r2,r0,r4,LSL #5       ;191
000058  4825              LDR      r0,|L29.240|
00005a  eb000082          ADD      r0,r0,r2,LSL #2       ;191
00005e  f8a0109a          STRH     r1,[r0,#0x9a]         ;191
000062  e7ef              B        |L29.68|
                  |L29.100|
000064  2d95              CMP      r5,#0x95              ;196
000066  dc01              BGT      |L29.108|
000068  2d03              CMP      r5,#3                 ;196
00006a  da0c              BGE      |L29.134|
                  |L29.108|
00006c  2100              MOVS     r1,#0                 ;199
00006e  ebc400c4          RSB      r0,r4,r4,LSL #3       ;199
000072  eb001244          ADD      r2,r0,r4,LSL #5       ;199
000076  481e              LDR      r0,|L29.240|
000078  eb000082          ADD      r0,r0,r2,LSL #2       ;199
00007c  f8a0109a          STRH     r1,[r0,#0x9a]         ;199
000080  20ff              MOVS     r0,#0xff              ;200
000082  7030              STRB     r0,[r6,#0]            ;200
000084  e7de              B        |L29.68|
                  |L29.134|
000086  1ee8              SUBS     r0,r5,#3              ;206
000088  70b0              STRB     r0,[r6,#2]            ;206
00008a  4629              MOV      r1,r5                 ;209
00008c  4630              MOV      r0,r6                 ;209
00008e  f7fffffe          BL       CAN_AddSum
000092  1c68              ADDS     r0,r5,#1              ;212
000094  b281              UXTH     r1,r0                 ;212
000096  ebc400c4          RSB      r0,r4,r4,LSL #3       ;212
00009a  eb001244          ADD      r2,r0,r4,LSL #5       ;212
00009e  4814              LDR      r0,|L29.240|
0000a0  eb000082          ADD      r0,r0,r2,LSL #2       ;212
0000a4  f8a0109a          STRH     r1,[r0,#0x9a]         ;212
0000a8  4810              LDR      r0,|L29.236|
0000aa  f8b00d6e          LDRH     r0,[r0,#0xd6e]        ;215
0000ae  1c40              ADDS     r0,r0,#1              ;215
0000b0  b281              UXTH     r1,r0                 ;215
0000b2  480e              LDR      r0,|L29.236|
0000b4  f8a01d6e          STRH     r1,[r0,#0xd6e]        ;215
0000b8  f8b00d6e          LDRH     r0,[r0,#0xd6e]        ;216
0000bc  210a              MOVS     r1,#0xa               ;216
0000be  fb90f2f1          SDIV     r2,r0,r1              ;216
0000c2  fb010012          MLS      r0,r1,r2,r0           ;216
0000c6  b281              UXTH     r1,r0                 ;216
0000c8  4808              LDR      r0,|L29.236|
0000ca  f8a01d6e          STRH     r1,[r0,#0xd6e]        ;216
0000ce  2100              MOVS     r1,#0                 ;217
0000d0  f8b00d6e          LDRH     r0,[r0,#0xd6e]        ;217
0000d4  ebc002c0          RSB      r2,r0,r0,LSL #3       ;217
0000d8  eb021240          ADD      r2,r2,r0,LSL #5       ;217
0000dc  4804              LDR      r0,|L29.240|
0000de  eb000082          ADD      r0,r0,r2,LSL #2       ;217
0000e2  f8a0109a          STRH     r1,[r0,#0x9a]         ;217
0000e6  bf00              NOP      
0000e8  e7ac              B        |L29.68|
;;;219    
                          ENDP

0000ea  0000              DCW      0x0000
                  |L29.236|
                          DCD      sysCanCB
                  |L29.240|
                          DCD      sysCanCB+0x754

                          AREA ||i.USBD_HP_CAN0_TX_IRQHandler||, CODE, READONLY, ALIGN=2

                  USBD_HP_CAN0_TX_IRQHandler PROC
;;;1443   // ISR for CAN TX Interrupt
;;;1444   void USBD_HP_CAN0_TX_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1445   {
;;;1446       uint16 head = sysCanCB.tx.head;
000002  4809              LDR      r0,|L30.40|
000004  f8b04d6c          LDRH     r4,[r0,#0xd6c]
;;;1447       uint16 end = sysCanCB.tx.end;
000008  f8b05d6e          LDRH     r5,[r0,#0xd6e]
;;;1448   
;;;1449       // 清空邮箱空中断标志位
;;;1450       can_interrupt_disable(CAN0, CAN_INT_TME);
00000c  2101              MOVS     r1,#1
00000e  4807              LDR      r0,|L30.44|
000010  f7fffffe          BL       can_interrupt_disable
;;;1451   
;;;1452       // 检测是否有Tx请求
;;;1453       if (head != end)
000014  42ac              CMP      r4,r5
000016  d005              BEQ      |L30.36|
;;;1454       {
;;;1455           // Tx成功，判断是否有下一帧
;;;1456           CAN_Tx_NextFram(&sysCanCB);
000018  4803              LDR      r0,|L30.40|
00001a  f7fffffe          BL       CAN_Tx_NextFram
;;;1457   
;;;1458           // 进入CAN消息下一帧发送状态
;;;1459           CAN_Tx_FillAndSend(&sysCanCB);
00001e  4802              LDR      r0,|L30.40|
000020  f7fffffe          BL       CAN_Tx_FillAndSend
                  |L30.36|
;;;1460       }
;;;1461   }
000024  bd70              POP      {r4-r6,pc}
;;;1462   
                          ENDP

000026  0000              DCW      0x0000
                  |L30.40|
                          DCD      sysCanCB
                  |L30.44|
                          DCD      0x40006400

                          AREA ||i.USBD_LP_CAN0_RX0_IRQHandler||, CODE, READONLY, ALIGN=2

                  USBD_LP_CAN0_RX0_IRQHandler PROC
;;;1414   // ISR for CAN RX Interrupt
;;;1415   void USBD_LP_CAN0_RX0_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;1416   {
000002  b085              SUB      sp,sp,#0x14
;;;1417       can_receive_message_struct rxMessage1;
;;;1418   
;;;1419       // 读出FIFO中所有的数据
;;;1420       while (can_receive_message_length_get(CAN0, CAN_FIFO0))
000004  e045              B        |L31.146|
                  |L31.6|
;;;1421       {
;;;1422           can_message_receive(CAN0, CAN_FIFO0, &rxMessage1);
000006  466a              MOV      r2,sp
000008  2100              MOVS     r1,#0
00000a  4826              LDR      r0,|L31.164|
00000c  f7fffffe          BL       can_message_receive
;;;1423   
;;;1424           switch (dut_info.ID)
000010  4825              LDR      r0,|L31.168|
000012  7d80              LDRB     r0,[r0,#0x16]  ; dut_info
000014  2801              CMP      r0,#1
000016  d11d              BNE      |L31.84|
;;;1425           {
;;;1426           case DUT_TYPE_GB:
;;;1427   			CAN_MacProcess(rxMessage1.rx_efid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);
000018  f89d200a          LDRB     r2,[sp,#0xa]
00001c  9901              LDR      r1,[sp,#4]
00001e  b288              UXTH     r0,r1
000020  f10d010b          ADD      r1,sp,#0xb
000024  f7fffffe          BL       CAN_MacProcess
;;;1428   			CAN_PROTOCOL_MacProcess(rxMessage1.rx_efid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);
000028  f89d200a          LDRB     r2,[sp,#0xa]
00002c  f10d010b          ADD      r1,sp,#0xb
000030  9801              LDR      r0,[sp,#4]
000032  f7fffffe          BL       CAN_PROTOCOL_MacProcess
;;;1429               CAN_TEST_PROTOCOL_MacProcess(rxMessage1.rx_efid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);
000036  f89d200a          LDRB     r2,[sp,#0xa]
00003a  f10d010b          ADD      r1,sp,#0xb
00003e  9801              LDR      r0,[sp,#4]
000040  f7fffffe          BL       CAN_TEST_PROTOCOL_MacProcess
;;;1430               CAN_MD_PROTOCOL_MacProcess(rxMessage1.rx_efid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);
000044  f89d200a          LDRB     r2,[sp,#0xa]
000048  f10d010b          ADD      r1,sp,#0xb
00004c  9801              LDR      r0,[sp,#4]
00004e  f7fffffe          BL       CAN_MD_PROTOCOL_MacProcess
;;;1431               break;
000052  e01d              B        |L31.144|
                  |L31.84|
;;;1432   
;;;1433           default:
;;;1434               CAN_PROTOCOL1_MacProcess(rxMessage1.rx_sfid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen); // 升级config
000054  f89d200a          LDRB     r2,[sp,#0xa]
000058  f10d010b          ADD      r1,sp,#0xb
00005c  9800              LDR      r0,[sp,#0]
00005e  f7fffffe          BL       CAN_PROTOCOL1_MacProcess
;;;1435               CAN_MacProcess(rxMessage1.rx_sfid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);           // 55升级协议
000062  f89d200a          LDRB     r2,[sp,#0xa]
000066  9900              LDR      r1,[sp,#0]
000068  b288              UXTH     r0,r1
00006a  f10d010b          ADD      r1,sp,#0xb
00006e  f7fffffe          BL       CAN_MacProcess
;;;1436               CAN_TEST_PROTOCOL_MacProcess(rxMessage1.rx_efid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);
000072  f89d200a          LDRB     r2,[sp,#0xa]
000076  f10d010b          ADD      r1,sp,#0xb
00007a  9801              LDR      r0,[sp,#4]
00007c  f7fffffe          BL       CAN_TEST_PROTOCOL_MacProcess
;;;1437               CAN_MD_PROTOCOL_MacProcess(rxMessage1.rx_sfid, &rxMessage1.rx_data[0], rxMessage1.rx_dlen);
000080  f89d200a          LDRB     r2,[sp,#0xa]
000084  f10d010b          ADD      r1,sp,#0xb
000088  9800              LDR      r0,[sp,#0]
00008a  f7fffffe          BL       CAN_MD_PROTOCOL_MacProcess
;;;1438               break;
00008e  bf00              NOP      
                  |L31.144|
000090  bf00              NOP                            ;1431
                  |L31.146|
000092  2100              MOVS     r1,#0                 ;1420
000094  4803              LDR      r0,|L31.164|
000096  f7fffffe          BL       can_receive_message_length_get
00009a  2800              CMP      r0,#0                 ;1420
00009c  d1b3              BNE      |L31.6|
;;;1439           }
;;;1440       }
;;;1441   }
00009e  b005              ADD      sp,sp,#0x14
0000a0  bd00              POP      {pc}
;;;1442   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L31.164|
                          DCD      0x40006400
                  |L31.168|
                          DCD      dut_info

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  sysCanCB
                          %        3444

                          AREA ||.data||, DATA, ALIGN=0

                  canTxStateCB
                          DCDU     0x00000000
000004  000000            DCB      0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "User\\CanProtocolUpDT.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_CanProtocolUpDT_c_CAN_TEST____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___17_CanProtocolUpDT_c_CAN_TEST____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_CanProtocolUpDT_c_CAN_TEST____REVSH|
#line 128
|__asm___17_CanProtocolUpDT_c_CAN_TEST____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
