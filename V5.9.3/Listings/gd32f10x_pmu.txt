; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_pmu.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_pmu.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_pmu.crf Libraries\src\gd32f10x_pmu.c]
                          THUMB

                          AREA ||i.pmu_backup_write_disable||, CODE, READONLY, ALIGN=2

                  pmu_backup_write_disable PROC
;;;235    */
;;;236    void pmu_backup_write_disable(void)
000000  4803              LDR      r0,|L1.16|
;;;237    {
;;;238        PMU_CTL &= ~PMU_CTL_BKPWEN;
000002  6800              LDR      r0,[r0,#0]
000004  f4207080          BIC      r0,r0,#0x100
000008  4901              LDR      r1,|L1.16|
00000a  6008              STR      r0,[r1,#0]
;;;239    }
00000c  4770              BX       lr
;;;240    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40007000

                          AREA ||i.pmu_backup_write_enable||, CODE, READONLY, ALIGN=2

                  pmu_backup_write_enable PROC
;;;224    */
;;;225    void pmu_backup_write_enable(void)
000000  4803              LDR      r0,|L2.16|
;;;226    {
;;;227        PMU_CTL |= PMU_CTL_BKPWEN;
000002  6800              LDR      r0,[r0,#0]
000004  f4407080          ORR      r0,r0,#0x100
000008  4901              LDR      r1,|L2.16|
00000a  6008              STR      r0,[r1,#0]
;;;228    }
00000c  4770              BX       lr
;;;229    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40007000

                          AREA ||i.pmu_deinit||, CODE, READONLY, ALIGN=1

                  pmu_deinit PROC
;;;47     */
;;;48     void pmu_deinit(void)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50         /* reset PMU */
;;;51         rcu_periph_reset_enable(RCU_PMURST);
000002  f240401c          MOV      r0,#0x41c
000006  f7fffffe          BL       rcu_periph_reset_enable
;;;52         rcu_periph_reset_disable(RCU_PMURST);
00000a  f240401c          MOV      r0,#0x41c
00000e  f7fffffe          BL       rcu_periph_reset_disable
;;;53     }
000012  bd10              POP      {r4,pc}
;;;54     
                          ENDP


                          AREA ||i.pmu_flag_clear||, CODE, READONLY, ALIGN=2

                  pmu_flag_clear PROC
;;;268    */
;;;269    void pmu_flag_clear(uint32_t flag_reset)
000000  b110              CBZ      r0,|L4.8|
;;;270    {
;;;271        switch(flag_reset){
000002  2801              CMP      r0,#1
000004  d10e              BNE      |L4.36|
000006  e006              B        |L4.22|
                  |L4.8|
;;;272        case PMU_FLAG_RESET_WAKEUP:
;;;273            /* reset wakeup flag */
;;;274            PMU_CTL |= PMU_CTL_WURST;
000008  4908              LDR      r1,|L4.44|
00000a  6809              LDR      r1,[r1,#0]
00000c  f0410104          ORR      r1,r1,#4
000010  4a06              LDR      r2,|L4.44|
000012  6011              STR      r1,[r2,#0]
;;;275            break;
000014  e007              B        |L4.38|
                  |L4.22|
;;;276        case PMU_FLAG_RESET_STANDBY:
;;;277            /* reset standby flag */
;;;278            PMU_CTL |= PMU_CTL_STBRST;
000016  4905              LDR      r1,|L4.44|
000018  6809              LDR      r1,[r1,#0]
00001a  f0410108          ORR      r1,r1,#8
00001e  4a03              LDR      r2,|L4.44|
000020  6011              STR      r1,[r2,#0]
;;;279            break;
000022  e000              B        |L4.38|
                  |L4.36|
;;;280        default :
;;;281            break;
000024  bf00              NOP      
                  |L4.38|
000026  bf00              NOP                            ;275
;;;282        }
;;;283    }
000028  4770              BX       lr
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x40007000

                          AREA ||i.pmu_flag_get||, CODE, READONLY, ALIGN=2

                  pmu_flag_get PROC
;;;250    */
;;;251    FlagStatus pmu_flag_get(uint32_t flag)
000000  4601              MOV      r1,r0
;;;252    {
;;;253        if(PMU_CS & flag){
000002  4804              LDR      r0,|L5.20|
000004  6840              LDR      r0,[r0,#4]
000006  4008              ANDS     r0,r0,r1
000008  b108              CBZ      r0,|L5.14|
;;;254            return  SET;
00000a  2001              MOVS     r0,#1
                  |L5.12|
;;;255        }else{
;;;256            return  RESET;
;;;257        }
;;;258    }
00000c  4770              BX       lr
                  |L5.14|
00000e  2000              MOVS     r0,#0                 ;256
000010  e7fc              B        |L5.12|
;;;259    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40007000

                          AREA ||i.pmu_lvd_disable||, CODE, READONLY, ALIGN=2

                  pmu_lvd_disable PROC
;;;87     */
;;;88     void pmu_lvd_disable(void)
000000  4803              LDR      r0,|L6.16|
;;;89     {
;;;90         /* disable LVD */
;;;91         PMU_CTL &= ~PMU_CTL_LVDEN;
000002  6800              LDR      r0,[r0,#0]
000004  f0200010          BIC      r0,r0,#0x10
000008  4901              LDR      r1,|L6.16|
00000a  6008              STR      r0,[r1,#0]
;;;92     }
00000c  4770              BX       lr
;;;93     
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x40007000

                          AREA ||i.pmu_lvd_select||, CODE, READONLY, ALIGN=2

                  pmu_lvd_select PROC
;;;69     */
;;;70     void pmu_lvd_select(uint32_t lvdt_n)
000000  490a              LDR      r1,|L7.44|
;;;71     {
;;;72         /* disable LVD */
;;;73         PMU_CTL &= ~PMU_CTL_LVDEN;
000002  6809              LDR      r1,[r1,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  4a08              LDR      r2,|L7.44|
00000a  6011              STR      r1,[r2,#0]
;;;74         /* clear LVDT bits */
;;;75         PMU_CTL &= ~PMU_CTL_LVDT;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  f02101e0          BIC      r1,r1,#0xe0
000014  6011              STR      r1,[r2,#0]
;;;76         /* set LVDT bits according to lvdt_n */
;;;77         PMU_CTL |= lvdt_n;
000016  4611              MOV      r1,r2
000018  6809              LDR      r1,[r1,#0]
00001a  4301              ORRS     r1,r1,r0
00001c  6011              STR      r1,[r2,#0]
;;;78         /* enable LVD */
;;;79         PMU_CTL |= PMU_CTL_LVDEN;
00001e  4611              MOV      r1,r2
000020  6809              LDR      r1,[r1,#0]
000022  f0410110          ORR      r1,r1,#0x10
000026  6011              STR      r1,[r2,#0]
;;;80     }
000028  4770              BX       lr
;;;81     
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x40007000

                          AREA ||i.pmu_to_deepsleepmode||, CODE, READONLY, ALIGN=2

                  pmu_to_deepsleepmode PROC
;;;128    */
;;;129    void pmu_to_deepsleepmode(uint32_t ldo,uint8_t deepsleepmodecmd)
000000  4a29              LDR      r2,|L8.168|
;;;130    {
;;;131        static uint32_t reg_snap[ 4 ];   
;;;132        /* clear stbmod and ldolp bits */
;;;133        PMU_CTL &= ~((uint32_t)(PMU_CTL_STBMOD | PMU_CTL_LDOLP));
000002  6812              LDR      r2,[r2,#0]
000004  f0220203          BIC      r2,r2,#3
000008  4b27              LDR      r3,|L8.168|
00000a  601a              STR      r2,[r3,#0]
;;;134        
;;;135        /* set ldolp bit according to pmu_ldo */
;;;136        PMU_CTL |= ldo;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  4302              ORRS     r2,r2,r0
000012  601a              STR      r2,[r3,#0]
;;;137        
;;;138        /* set sleepdeep bit of Cortex-M3 system control register */
;;;139        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000014  4a25              LDR      r2,|L8.172|
000016  6812              LDR      r2,[r2,#0]
000018  f0420204          ORR      r2,r2,#4
00001c  4b23              LDR      r3,|L8.172|
00001e  601a              STR      r2,[r3,#0]
;;;140    
;;;141        reg_snap[0] = REG32(0xE000E010U);
000020  f04f22e0          MOV      r2,#0xe000e000
000024  6912              LDR      r2,[r2,#0x10]
000026  4b22              LDR      r3,|L8.176|
000028  601a              STR      r2,[r3,#0]  ; reg_snap
;;;142        reg_snap[1] = REG32(0xE000E100U);
00002a  4a22              LDR      r2,|L8.180|
00002c  6812              LDR      r2,[r2,#0]
00002e  605a              STR      r2,[r3,#4]  ; reg_snap
;;;143        reg_snap[2] = REG32(0xE000E104U);
000030  4a20              LDR      r2,|L8.180|
000032  1d12              ADDS     r2,r2,#4
000034  6812              LDR      r2,[r2,#0]
000036  609a              STR      r2,[r3,#8]  ; reg_snap
;;;144        reg_snap[3] = REG32(0xE000E108U);
000038  4a1e              LDR      r2,|L8.180|
00003a  3208              ADDS     r2,r2,#8
00003c  6812              LDR      r2,[r2,#0]
00003e  60da              STR      r2,[r3,#0xc]  ; reg_snap
;;;145        
;;;146        REG32( 0xE000E010U ) &= 0x00010004U;
000040  f04f22e0          MOV      r2,#0xe000e000
000044  6912              LDR      r2,[r2,#0x10]
000046  4b1c              LDR      r3,|L8.184|
000048  401a              ANDS     r2,r2,r3
00004a  f04f23e0          MOV      r3,#0xe000e000
00004e  611a              STR      r2,[r3,#0x10]
;;;147        REG32( 0xE000E180U )  = 0XFF7FF83DU;
000050  4a1a              LDR      r2,|L8.188|
000052  4b18              LDR      r3,|L8.180|
000054  3380              ADDS     r3,r3,#0x80
000056  601a              STR      r2,[r3,#0]
;;;148        REG32( 0xE000E184U )  = 0XBFFFF8FFU;
000058  4a19              LDR      r2,|L8.192|
00005a  1d1b              ADDS     r3,r3,#4
00005c  601a              STR      r2,[r3,#0]
;;;149        REG32( 0xE000E188U )  = 0xFFFFFFFFU;
00005e  17d2              ASRS     r2,r2,#31
000060  f04f23e0          MOV      r3,#0xe000e000
000064  f8c32188          STR      r2,[r3,#0x188]
;;;150        
;;;151        /* select WFI or WFE command to enter deepsleep mode */
;;;152        if(WFI_CMD == deepsleepmodecmd){
000068  b909              CBNZ     r1,|L8.110|
;;;153            __WFI();
00006a  bf30              WFI      
00006c  e002              B        |L8.116|
                  |L8.110|
;;;154        }else{
;;;155            __SEV();
00006e  bf40              SEV      
;;;156            __WFE();
000070  bf20              WFE      
;;;157            __WFE();
000072  bf20              WFE      
                  |L8.116|
;;;158        }
;;;159    
;;;160        REG32(0xE000E010U) = reg_snap[0] ; 
000074  4a0e              LDR      r2,|L8.176|
000076  6812              LDR      r2,[r2,#0]  ; reg_snap
000078  f04f23e0          MOV      r3,#0xe000e000
00007c  611a              STR      r2,[r3,#0x10]
;;;161        REG32(0xE000E100U) = reg_snap[1] ;
00007e  4a0c              LDR      r2,|L8.176|
000080  6852              LDR      r2,[r2,#4]  ; reg_snap
000082  4b0c              LDR      r3,|L8.180|
000084  601a              STR      r2,[r3,#0]
;;;162        REG32(0xE000E104U) = reg_snap[2] ;
000086  4a0a              LDR      r2,|L8.176|
000088  6892              LDR      r2,[r2,#8]  ; reg_snap
00008a  f04f23e0          MOV      r3,#0xe000e000
00008e  f8c32104          STR      r2,[r3,#0x104]
;;;163        REG32(0xE000E108U) = reg_snap[3] ;  
000092  4a07              LDR      r2,|L8.176|
000094  68d2              LDR      r2,[r2,#0xc]  ; reg_snap
000096  f8c32108          STR      r2,[r3,#0x108]
;;;164    
;;;165        /* reset sleepdeep bit of Cortex-M3 system control register */
;;;166        SCB->SCR &= ~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
00009a  4a04              LDR      r2,|L8.172|
00009c  6812              LDR      r2,[r2,#0]
00009e  f0220204          BIC      r2,r2,#4
0000a2  4b02              LDR      r3,|L8.172|
0000a4  601a              STR      r2,[r3,#0]
;;;167    }
0000a6  4770              BX       lr
;;;168    
                          ENDP

                  |L8.168|
                          DCD      0x40007000
                  |L8.172|
                          DCD      0xe000ed10
                  |L8.176|
                          DCD      reg_snap
                  |L8.180|
                          DCD      0xe000e100
                  |L8.184|
                          DCD      0x00010004
                  |L8.188|
                          DCD      0xff7ff83d
                  |L8.192|
                          DCD      0xbffff8ff

                          AREA ||i.pmu_to_sleepmode||, CODE, READONLY, ALIGN=2

                  pmu_to_sleepmode PROC
;;;102    */
;;;103    void pmu_to_sleepmode(uint8_t sleepmodecmd)
000000  4905              LDR      r1,|L9.24|
;;;104    {
;;;105        /* clear sleepdeep bit of Cortex-M3 system control register */
;;;106        SCB->SCR &= ~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
000002  6809              LDR      r1,[r1,#0]
000004  f0210104          BIC      r1,r1,#4
000008  4a03              LDR      r2,|L9.24|
00000a  6011              STR      r1,[r2,#0]
;;;107        
;;;108        /* select WFI or WFE command to enter sleep mode */
;;;109        if(WFI_CMD == sleepmodecmd){
00000c  b908              CBNZ     r0,|L9.18|
;;;110            __WFI();
00000e  bf30              WFI      
000010  e000              B        |L9.20|
                  |L9.18|
;;;111        }else{
;;;112            __WFE();
000012  bf20              WFE      
                  |L9.20|
;;;113        }
;;;114    }
000014  4770              BX       lr
;;;115    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0xe000ed10

                          AREA ||i.pmu_to_standbymode||, CODE, READONLY, ALIGN=2

                  pmu_to_standbymode PROC
;;;177    */
;;;178    void pmu_to_standbymode(uint8_t standbymodecmd)
000000  490a              LDR      r1,|L10.44|
;;;179    {
;;;180        /* set sleepdeep bit of Cortex-M3 system control register */
;;;181        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000002  6809              LDR      r1,[r1,#0]
000004  f0410104          ORR      r1,r1,#4
000008  4a08              LDR      r2,|L10.44|
00000a  6011              STR      r1,[r2,#0]
;;;182    
;;;183        /* set stbmod bit */
;;;184        PMU_CTL |= PMU_CTL_STBMOD;
00000c  4908              LDR      r1,|L10.48|
00000e  6809              LDR      r1,[r1,#0]
000010  f0410102          ORR      r1,r1,#2
000014  4a06              LDR      r2,|L10.48|
000016  6011              STR      r1,[r2,#0]
;;;185            
;;;186        /* reset wakeup flag */
;;;187        PMU_CTL |= PMU_CTL_WURST;
000018  4611              MOV      r1,r2
00001a  6809              LDR      r1,[r1,#0]
00001c  f0410104          ORR      r1,r1,#4
000020  6011              STR      r1,[r2,#0]
;;;188        
;;;189        /* select WFI or WFE command to enter standby mode */
;;;190        if(WFI_CMD == standbymodecmd){
000022  b908              CBNZ     r0,|L10.40|
;;;191            __WFI();
000024  bf30              WFI      
000026  e000              B        |L10.42|
                  |L10.40|
;;;192        }else{
;;;193            __WFE();
000028  bf20              WFE      
                  |L10.42|
;;;194        }
;;;195    }
00002a  4770              BX       lr
;;;196    
                          ENDP

                  |L10.44|
                          DCD      0xe000ed10
                  |L10.48|
                          DCD      0x40007000

                          AREA ||i.pmu_wakeup_pin_disable||, CODE, READONLY, ALIGN=2

                  pmu_wakeup_pin_disable PROC
;;;213    */
;;;214    void pmu_wakeup_pin_disable(void)
000000  4803              LDR      r0,|L11.16|
;;;215    {
;;;216        PMU_CS &= ~PMU_CS_WUPEN;
000002  6840              LDR      r0,[r0,#4]
000004  f4207080          BIC      r0,r0,#0x100
000008  4901              LDR      r1,|L11.16|
00000a  6048              STR      r0,[r1,#4]
;;;217    }
00000c  4770              BX       lr
;;;218    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0x40007000

                          AREA ||i.pmu_wakeup_pin_enable||, CODE, READONLY, ALIGN=2

                  pmu_wakeup_pin_enable PROC
;;;202    */
;;;203    void pmu_wakeup_pin_enable(void)
000000  4803              LDR      r0,|L12.16|
;;;204    {
;;;205        PMU_CS |= PMU_CS_WUPEN;
000002  6840              LDR      r0,[r0,#4]
000004  f4407080          ORR      r0,r0,#0x100
000008  4901              LDR      r1,|L12.16|
00000a  6048              STR      r0,[r1,#4]
;;;206    }
00000c  4770              BX       lr
;;;207    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x40007000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  reg_snap
                          %        16

;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_pmu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_pmu_c_ac4503ae____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_pmu_c_ac4503ae____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_pmu_c_ac4503ae____REVSH|
#line 128
|__asm___14_gd32f10x_pmu_c_ac4503ae____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
