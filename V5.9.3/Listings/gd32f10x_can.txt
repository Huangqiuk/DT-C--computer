; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_can.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_can.crf Libraries\src\gd32f10x_can.c]
                          THUMB

                          AREA ||i.can1_filter_start_bank||, CODE, READONLY, ALIGN=2

                  can1_filter_start_bank PROC
;;;327    */
;;;328    void can1_filter_start_bank(uint8_t start_bank)
000000  490c              LDR      r1,|L1.52|
;;;329    {
;;;330        /* filter lock disable */
;;;331        CAN_FCTL(CAN0) |= CAN_FCTL_FLD;
000002  6809              LDR      r1,[r1,#0]
000004  f0410101          ORR      r1,r1,#1
000008  4a0a              LDR      r2,|L1.52|
00000a  6011              STR      r1,[r2,#0]
;;;332        /* set CAN1 filter start number */
;;;333        CAN_FCTL(CAN0) &= ~(uint32_t)CAN_FCTL_HBC1F;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  f421517c          BIC      r1,r1,#0x3f00
000014  6011              STR      r1,[r2,#0]
;;;334        CAN_FCTL(CAN0) |= FCTL_HBC1F(start_bank);
000016  4611              MOV      r1,r2
000018  6809              LDR      r1,[r1,#0]
00001a  f44f527c          MOV      r2,#0x3f00
00001e  ea022200          AND      r2,r2,r0,LSL #8
000022  4311              ORRS     r1,r1,r2
000024  4a03              LDR      r2,|L1.52|
000026  6011              STR      r1,[r2,#0]
;;;335        /* filter lock enaable */
;;;336        CAN_FCTL(CAN0) &= ~CAN_FCTL_FLD;
000028  4611              MOV      r1,r2
00002a  6809              LDR      r1,[r1,#0]
00002c  f0210101          BIC      r1,r1,#1
000030  6011              STR      r1,[r2,#0]
;;;337    }
000032  4770              BX       lr
;;;338    
                          ENDP

                  |L1.52|
                          DCD      0x40006600

                          AREA ||i.can_debug_freeze_disable||, CODE, READONLY, ALIGN=2

                  can_debug_freeze_disable PROC
;;;369    */
;;;370    void can_debug_freeze_disable(uint32_t can_periph)
000000  b510              PUSH     {r4,lr}
;;;371    {
000002  4604              MOV      r4,r0
;;;372        /* set DFZ bit */
;;;373        CAN_CTL(can_periph) &= ~CAN_CTL_DFZ;
000004  6820              LDR      r0,[r4,#0]
000006  f4203080          BIC      r0,r0,#0x10000
00000a  6020              STR      r0,[r4,#0]
;;;374    #ifdef GD32F10x_CL
;;;375        if(CAN0 == can_periph){
;;;376            dbg_periph_disable(DBG_CAN0_HOLD);
;;;377        }else{
;;;378            dbg_periph_disable(DBG_CAN1_HOLD);
;;;379        }
;;;380    #else
;;;381        if(CAN0 == can_periph){
00000c  4803              LDR      r0,|L2.28|
00000e  4284              CMP      r4,r0
000010  d102              BNE      |L2.24|
;;;382            dbg_periph_enable(DBG_CAN0_HOLD);
000012  1400              ASRS     r0,r0,#16
000014  f7fffffe          BL       dbg_periph_enable
                  |L2.24|
;;;383        }
;;;384    #endif
;;;385    }
000018  bd10              POP      {r4,pc}
;;;386    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40006400

                          AREA ||i.can_debug_freeze_enable||, CODE, READONLY, ALIGN=2

                  can_debug_freeze_enable PROC
;;;345    */
;;;346    void can_debug_freeze_enable(uint32_t can_periph)
000000  b510              PUSH     {r4,lr}
;;;347    {
000002  4604              MOV      r4,r0
;;;348        /* set DFZ bit */
;;;349        CAN_CTL(can_periph) |= CAN_CTL_DFZ;
000004  6820              LDR      r0,[r4,#0]
000006  f4403080          ORR      r0,r0,#0x10000
00000a  6020              STR      r0,[r4,#0]
;;;350    #ifdef GD32F10x_CL
;;;351        if(CAN0 == can_periph){
;;;352            dbg_periph_enable(DBG_CAN0_HOLD);
;;;353        }else{
;;;354            dbg_periph_enable(DBG_CAN1_HOLD);
;;;355        }
;;;356    #else
;;;357        if(CAN0 == can_periph){
00000c  4803              LDR      r0,|L3.28|
00000e  4284              CMP      r4,r0
000010  d102              BNE      |L3.24|
;;;358            dbg_periph_enable(DBG_CAN0_HOLD);
000012  1400              ASRS     r0,r0,#16
000014  f7fffffe          BL       dbg_periph_enable
                  |L3.24|
;;;359        }
;;;360    #endif
;;;361    }
000018  bd10              POP      {r4,pc}
;;;362    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40006400

                          AREA ||i.can_deinit||, CODE, READONLY, ALIGN=2

                  can_deinit PROC
;;;48     */
;;;49     void can_deinit(uint32_t can_periph)
000000  b510              PUSH     {r4,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51     #ifdef GD32F10x_CL
;;;52         if(CAN0 == can_periph){
;;;53             rcu_periph_reset_enable(RCU_CAN0RST);
;;;54             rcu_periph_reset_disable(RCU_CAN0RST);
;;;55         }else{
;;;56             rcu_periph_reset_enable(RCU_CAN1RST);
;;;57             rcu_periph_reset_disable(RCU_CAN1RST);
;;;58         }
;;;59     #else
;;;60         if(CAN0 == can_periph){
000004  4805              LDR      r0,|L4.28|
000006  4284              CMP      r4,r0
000008  d107              BNE      |L4.26|
;;;61             rcu_periph_reset_enable(RCU_CAN0RST);
00000a  f2404019          MOV      r0,#0x419
00000e  f7fffffe          BL       rcu_periph_reset_enable
;;;62             rcu_periph_reset_disable(RCU_CAN0RST);
000012  f2404019          MOV      r0,#0x419
000016  f7fffffe          BL       rcu_periph_reset_disable
                  |L4.26|
;;;63         }
;;;64     #endif
;;;65     }
00001a  bd10              POP      {r4,pc}
;;;66     
                          ENDP

                  |L4.28|
                          DCD      0x40006400

                          AREA ||i.can_error_get||, CODE, READONLY, ALIGN=1

                  can_error_get PROC
;;;781    */
;;;782    can_error_enum can_error_get(uint32_t can_periph)
000000  4601              MOV      r1,r0
;;;783    {
;;;784        can_error_enum error;
;;;785        error = CAN_ERROR_NONE;
000002  2000              MOVS     r0,#0
;;;786        
;;;787        /* get error type */
;;;788        error = (can_error_enum)(GET_ERR_ERRN(CAN_ERR(can_periph)));
000004  698a              LDR      r2,[r1,#0x18]
000006  f3c21002          UBFX     r0,r2,#4,#3
;;;789        return error;
;;;790    }
00000a  4770              BX       lr
;;;791    
                          ENDP


                          AREA ||i.can_fifo_release||, CODE, READONLY, ALIGN=1

                  can_fifo_release PROC
;;;637    */
;;;638    void can_fifo_release(uint32_t can_periph, uint8_t fifo_number)
000000  b921              CBNZ     r1,|L6.12|
;;;639    {
;;;640        if(CAN_FIFO0 == fifo_number){
;;;641            CAN_RFIFO0(can_periph) |= CAN_RFIFO0_RFD0;
000002  68c2              LDR      r2,[r0,#0xc]
000004  f0420220          ORR      r2,r2,#0x20
000008  60c2              STR      r2,[r0,#0xc]
00000a  e008              B        |L6.30|
                  |L6.12|
;;;642        }else if(CAN_FIFO1 == fifo_number){
00000c  2901              CMP      r1,#1
00000e  d104              BNE      |L6.26|
;;;643            CAN_RFIFO1(can_periph) |= CAN_RFIFO1_RFD1;
000010  6902              LDR      r2,[r0,#0x10]
000012  f0420220          ORR      r2,r2,#0x20
000016  6102              STR      r2,[r0,#0x10]
000018  e001              B        |L6.30|
                  |L6.26|
;;;644        }else{
;;;645            /* illegal parameters */
;;;646            CAN_ERROR_HANDLE("CAN FIFO NUM is invalid \r\n");
00001a  bf00              NOP      
                  |L6.28|
00001c  e7fe              B        |L6.28|
                  |L6.30|
;;;647        }
;;;648    }
00001e  4770              BX       lr
;;;649    
                          ENDP


                          AREA ||i.can_filter_init||, CODE, READONLY, ALIGN=2

                  can_filter_init PROC
;;;254    */
;;;255    void can_filter_init(can_filter_parameter_struct* can_filter_parameter_init)
000000  b510              PUSH     {r4,lr}
;;;256    {
;;;257        uint32_t val = 0U;
000002  2100              MOVS     r1,#0
;;;258        
;;;259        val = ((uint32_t)1) << (can_filter_parameter_init->filter_number);
000004  7a83              LDRB     r3,[r0,#0xa]
000006  2201              MOVS     r2,#1
000008  fa02f103          LSL      r1,r2,r3
;;;260        /* filter lock disable */
;;;261        CAN_FCTL(CAN0) |= CAN_FCTL_FLD;
00000c  4a3e              LDR      r2,|L7.264|
00000e  6812              LDR      r2,[r2,#0]
000010  f0420201          ORR      r2,r2,#1
000014  4b3c              LDR      r3,|L7.264|
000016  601a              STR      r2,[r3,#0]
;;;262        /* disable filter */
;;;263        CAN_FW(CAN0) &= ~(uint32_t)val;
000018  4a3b              LDR      r2,|L7.264|
00001a  321c              ADDS     r2,r2,#0x1c
00001c  6812              LDR      r2,[r2,#0]
00001e  438a              BICS     r2,r2,r1
000020  4b39              LDR      r3,|L7.264|
000022  331c              ADDS     r3,r3,#0x1c
000024  601a              STR      r2,[r3,#0]
;;;264        
;;;265        /* filter 16 bits */
;;;266        if(CAN_FILTERBITS_16BIT == can_filter_parameter_init->filter_bits){
000026  89c2              LDRH     r2,[r0,#0xe]
000028  b9da              CBNZ     r2,|L7.98|
;;;267            /* set filter 16 bits */
;;;268            CAN_FSCFG(CAN0) &= ~(uint32_t)val;
00002a  4a37              LDR      r2,|L7.264|
00002c  320c              ADDS     r2,r2,#0xc
00002e  6812              LDR      r2,[r2,#0]
000030  438a              BICS     r2,r2,r1
000032  4b35              LDR      r3,|L7.264|
000034  330c              ADDS     r3,r3,#0xc
000036  601a              STR      r2,[r3,#0]
;;;269            /* first 16 bits list and first 16 bits mask or first 16 bits list and second 16 bits list */
;;;270            CAN_FDATA0(CAN0, can_filter_parameter_init->filter_number) = \
000038  88c2              LDRH     r2,[r0,#6]
00003a  4b34              LDR      r3,|L7.268|
00003c  ea034202          AND      r2,r3,r2,LSL #16
000040  8843              LDRH     r3,[r0,#2]
000042  431a              ORRS     r2,r2,r3
000044  8943              LDRH     r3,[r0,#0xa]
000046  4c30              LDR      r4,|L7.264|
000048  3440              ADDS     r4,r4,#0x40
00004a  f8442033          STR      r2,[r4,r3,LSL #3]
;;;271                                    FDATA_MASK_HIGH((can_filter_parameter_init->filter_mask_low) & CAN_FILTER_MASK_16BITS) | \
;;;272                                    FDATA_MASK_LOW((can_filter_parameter_init->filter_list_low) & CAN_FILTER_MASK_16BITS);
;;;273            /* second 16 bits list and second 16 bits mask or third 16 bits list and fourth 16 bits list */
;;;274            CAN_FDATA1(CAN0, can_filter_parameter_init->filter_number) = \
00004e  8882              LDRH     r2,[r0,#4]
000050  4b2e              LDR      r3,|L7.268|
000052  ea034202          AND      r2,r3,r2,LSL #16
000056  8803              LDRH     r3,[r0,#0]
000058  431a              ORRS     r2,r2,r3
00005a  8943              LDRH     r3,[r0,#0xa]
00005c  eb0403c3          ADD      r3,r4,r3,LSL #3
000060  605a              STR      r2,[r3,#4]
                  |L7.98|
;;;275                                    FDATA_MASK_HIGH((can_filter_parameter_init->filter_mask_high) & CAN_FILTER_MASK_16BITS) | \
;;;276                                    FDATA_MASK_LOW((can_filter_parameter_init->filter_list_high) & CAN_FILTER_MASK_16BITS);
;;;277        }
;;;278        /* filter 32 bits */
;;;279        if(CAN_FILTERBITS_32BIT == can_filter_parameter_init->filter_bits){
000062  89c2              LDRH     r2,[r0,#0xe]
000064  2a01              CMP      r2,#1
000066  d11b              BNE      |L7.160|
;;;280            /* set filter 32 bits */
;;;281            CAN_FSCFG(CAN0) |= (uint32_t)val;
000068  4a27              LDR      r2,|L7.264|
00006a  320c              ADDS     r2,r2,#0xc
00006c  6812              LDR      r2,[r2,#0]
00006e  430a              ORRS     r2,r2,r1
000070  4b25              LDR      r3,|L7.264|
000072  330c              ADDS     r3,r3,#0xc
000074  601a              STR      r2,[r3,#0]
;;;282            /* 32 bits list or first 32 bits list */
;;;283            CAN_FDATA0(CAN0, can_filter_parameter_init->filter_number) = \
000076  8802              LDRH     r2,[r0,#0]
000078  4b24              LDR      r3,|L7.268|
00007a  ea034202          AND      r2,r3,r2,LSL #16
00007e  8843              LDRH     r3,[r0,#2]
000080  431a              ORRS     r2,r2,r3
000082  8943              LDRH     r3,[r0,#0xa]
000084  4c20              LDR      r4,|L7.264|
000086  3440              ADDS     r4,r4,#0x40
000088  f8442033          STR      r2,[r4,r3,LSL #3]
;;;284                                    FDATA_MASK_HIGH((can_filter_parameter_init->filter_list_high) & CAN_FILTER_MASK_16BITS) |
;;;285                                    FDATA_MASK_LOW((can_filter_parameter_init->filter_list_low) & CAN_FILTER_MASK_16BITS);
;;;286            /* 32 bits mask or second 32 bits list */
;;;287            CAN_FDATA1(CAN0, can_filter_parameter_init->filter_number) = \
00008c  8882              LDRH     r2,[r0,#4]
00008e  4b1f              LDR      r3,|L7.268|
000090  ea034202          AND      r2,r3,r2,LSL #16
000094  88c3              LDRH     r3,[r0,#6]
000096  431a              ORRS     r2,r2,r3
000098  8943              LDRH     r3,[r0,#0xa]
00009a  eb0403c3          ADD      r3,r4,r3,LSL #3
00009e  605a              STR      r2,[r3,#4]
                  |L7.160|
;;;288                                    FDATA_MASK_HIGH((can_filter_parameter_init->filter_mask_high) & CAN_FILTER_MASK_16BITS) |
;;;289                                    FDATA_MASK_LOW((can_filter_parameter_init->filter_mask_low) & CAN_FILTER_MASK_16BITS);
;;;290        }
;;;291        
;;;292        /* filter mode */
;;;293        if(CAN_FILTERMODE_MASK == can_filter_parameter_init->filter_mode){
0000a0  8982              LDRH     r2,[r0,#0xc]
0000a2  b93a              CBNZ     r2,|L7.180|
;;;294            /* mask mode */
;;;295            CAN_FMCFG(CAN0) &= ~(uint32_t)val;
0000a4  4a18              LDR      r2,|L7.264|
0000a6  1d12              ADDS     r2,r2,#4
0000a8  6812              LDR      r2,[r2,#0]
0000aa  438a              BICS     r2,r2,r1
0000ac  4b16              LDR      r3,|L7.264|
0000ae  1d1b              ADDS     r3,r3,#4
0000b0  601a              STR      r2,[r3,#0]
0000b2  e006              B        |L7.194|
                  |L7.180|
;;;296        }else{
;;;297            /* list mode */
;;;298            CAN_FMCFG(CAN0) |= (uint32_t)val;
0000b4  4a14              LDR      r2,|L7.264|
0000b6  1d12              ADDS     r2,r2,#4
0000b8  6812              LDR      r2,[r2,#0]
0000ba  430a              ORRS     r2,r2,r1
0000bc  4b12              LDR      r3,|L7.264|
0000be  1d1b              ADDS     r3,r3,#4
0000c0  601a              STR      r2,[r3,#0]
                  |L7.194|
;;;299        }
;;;300        
;;;301        /* filter FIFO */
;;;302        if(CAN_FIFO0 == (can_filter_parameter_init->filter_fifo_number)){
0000c2  8902              LDRH     r2,[r0,#8]
0000c4  b93a              CBNZ     r2,|L7.214|
;;;303            /* FIFO0 */
;;;304            CAN_FAFIFO(CAN0) &= ~(uint32_t)val;
0000c6  4a10              LDR      r2,|L7.264|
0000c8  3214              ADDS     r2,r2,#0x14
0000ca  6812              LDR      r2,[r2,#0]
0000cc  438a              BICS     r2,r2,r1
0000ce  4b0e              LDR      r3,|L7.264|
0000d0  3314              ADDS     r3,r3,#0x14
0000d2  601a              STR      r2,[r3,#0]
0000d4  e006              B        |L7.228|
                  |L7.214|
;;;305        }else{
;;;306            /* FIFO1 */
;;;307            CAN_FAFIFO(CAN0) |= (uint32_t)val;
0000d6  4a0c              LDR      r2,|L7.264|
0000d8  3214              ADDS     r2,r2,#0x14
0000da  6812              LDR      r2,[r2,#0]
0000dc  430a              ORRS     r2,r2,r1
0000de  4b0a              LDR      r3,|L7.264|
0000e0  3314              ADDS     r3,r3,#0x14
0000e2  601a              STR      r2,[r3,#0]
                  |L7.228|
;;;308        }
;;;309        
;;;310        /* filter working */
;;;311        if(ENABLE == can_filter_parameter_init->filter_enable){
0000e4  7c02              LDRB     r2,[r0,#0x10]
0000e6  2a01              CMP      r2,#1
0000e8  d106              BNE      |L7.248|
;;;312            
;;;313            CAN_FW(CAN0) |= (uint32_t)val;
0000ea  4a07              LDR      r2,|L7.264|
0000ec  321c              ADDS     r2,r2,#0x1c
0000ee  6812              LDR      r2,[r2,#0]
0000f0  430a              ORRS     r2,r2,r1
0000f2  4b05              LDR      r3,|L7.264|
0000f4  331c              ADDS     r3,r3,#0x1c
0000f6  601a              STR      r2,[r3,#0]
                  |L7.248|
;;;314        }
;;;315        
;;;316        /* filter lock enable */
;;;317        CAN_FCTL(CAN0) &= ~CAN_FCTL_FLD;
0000f8  4a03              LDR      r2,|L7.264|
0000fa  6812              LDR      r2,[r2,#0]
0000fc  f0220201          BIC      r2,r2,#1
000100  4b01              LDR      r3,|L7.264|
000102  601a              STR      r2,[r3,#0]
;;;318    }
000104  bd10              POP      {r4,pc}
;;;319    
                          ENDP

000106  0000              DCW      0x0000
                  |L7.264|
                          DCD      0x40006600
                  |L7.268|
                          DCD      0xffff0000

                          AREA ||i.can_flag_clear||, CODE, READONLY, ALIGN=1

                  can_flag_clear PROC
;;;959    */
;;;960    void can_flag_clear(uint32_t can_periph, can_flag_enum flag)
000000  b510              PUSH     {r4,lr}
;;;961    {
;;;962        if (flag == CAN_FLAG_RFO1){
000002  f2404204          MOV      r2,#0x404
000006  4291              CMP      r1,r2
000008  d10b              BNE      |L8.34|
;;;963            CAN_REG_VAL(can_periph, flag) &= ~BIT(CAN_BIT_POS(flag));
00000a  eb001291          ADD      r2,r0,r1,LSR #6
00000e  6812              LDR      r2,[r2,#0]
000010  f001041f          AND      r4,r1,#0x1f
000014  2301              MOVS     r3,#1
000016  40a3              LSLS     r3,r3,r4
000018  439a              BICS     r2,r2,r3
00001a  eb001391          ADD      r3,r0,r1,LSR #6
00001e  601a              STR      r2,[r3,#0]
000020  e00a              B        |L8.56|
                  |L8.34|
;;;964        } else {
;;;965            CAN_REG_VAL(can_periph, flag) |= BIT(CAN_BIT_POS(flag));
000022  eb001291          ADD      r2,r0,r1,LSR #6
000026  6812              LDR      r2,[r2,#0]
000028  f001041f          AND      r4,r1,#0x1f
00002c  2301              MOVS     r3,#1
00002e  40a3              LSLS     r3,r3,r4
000030  431a              ORRS     r2,r2,r3
000032  eb001391          ADD      r3,r0,r1,LSR #6
000036  601a              STR      r2,[r3,#0]
                  |L8.56|
;;;966        }
;;;967    }
000038  bd10              POP      {r4,pc}
;;;968    
                          ENDP


                          AREA ||i.can_flag_get||, CODE, READONLY, ALIGN=1

                  can_flag_get PROC
;;;921    */
;;;922    FlagStatus can_flag_get(uint32_t can_periph, can_flag_enum flag)
000000  b510              PUSH     {r4,lr}
;;;923    {  
000002  4602              MOV      r2,r0
;;;924        /* get flag and interrupt enable state */
;;;925        if(RESET != (CAN_REG_VAL(can_periph, flag) & BIT(CAN_BIT_POS(flag)))){
000004  eb021091          ADD      r0,r2,r1,LSR #6
000008  6800              LDR      r0,[r0,#0]
00000a  f001041f          AND      r4,r1,#0x1f
00000e  2301              MOVS     r3,#1
000010  40a3              LSLS     r3,r3,r4
000012  4018              ANDS     r0,r0,r3
000014  b108              CBZ      r0,|L9.26|
;;;926            return SET;
000016  2001              MOVS     r0,#1
                  |L9.24|
;;;927        }else{
;;;928            return RESET;
;;;929        }
;;;930    }
000018  bd10              POP      {r4,pc}
                  |L9.26|
00001a  2000              MOVS     r0,#0                 ;928
00001c  e7fc              B        |L9.24|
;;;931    
                          ENDP


                          AREA ||i.can_init||, CODE, READONLY, ALIGN=1

                  can_init PROC
;;;164    */
;;;165    ErrStatus can_init(uint32_t can_periph, can_parameter_struct* can_parameter_init)
000000  b570              PUSH     {r4-r6,lr}
;;;166    {
000002  4602              MOV      r2,r0
;;;167        uint32_t timeout = CAN_TIMEOUT;
000004  f64f73ff          MOV      r3,#0xffff
;;;168        ErrStatus flag = ERROR;
000008  2000              MOVS     r0,#0
;;;169        
;;;170        /* disable sleep mode */
;;;171        CAN_CTL(can_periph) &= ~CAN_CTL_SLPWMOD;
00000a  6814              LDR      r4,[r2,#0]
00000c  f0240402          BIC      r4,r4,#2
000010  6014              STR      r4,[r2,#0]
;;;172        /* enable initialize mode */
;;;173        CAN_CTL(can_periph) |= CAN_CTL_IWMOD;
000012  6814              LDR      r4,[r2,#0]
000014  f0440401          ORR      r4,r4,#1
000018  6014              STR      r4,[r2,#0]
;;;174        /* wait ACK */
;;;175        while((CAN_STAT_IWS != (CAN_STAT(can_periph) & CAN_STAT_IWS)) && (0U != timeout)){
00001a  e000              B        |L10.30|
                  |L10.28|
;;;176            timeout--;
00001c  1e5b              SUBS     r3,r3,#1
                  |L10.30|
00001e  6854              LDR      r4,[r2,#4]            ;175
000020  f0040401          AND      r4,r4,#1              ;175
000024  b90c              CBNZ     r4,|L10.42|
000026  2b00              CMP      r3,#0                 ;175
000028  d1f8              BNE      |L10.28|
                  |L10.42|
;;;177        }
;;;178        /* check initialize working success */
;;;179        if(CAN_STAT_IWS != (CAN_STAT(can_periph) & CAN_STAT_IWS)){
00002a  6854              LDR      r4,[r2,#4]
00002c  f0040401          AND      r4,r4,#1
000030  b90c              CBNZ     r4,|L10.54|
;;;180            flag = ERROR;
000032  2000              MOVS     r0,#0
000034  e074              B        |L10.288|
                  |L10.54|
;;;181        }else{
;;;182            /* set the bit timing register */
;;;183            CAN_BT(can_periph) = (BT_MODE((uint32_t)can_parameter_init->working_mode) | \
000036  780c              LDRB     r4,[r1,#0]
000038  f04f4540          MOV      r5,#0xc0000000
00003c  ea057484          AND      r4,r5,r4,LSL #30
000040  784d              LDRB     r5,[r1,#1]
000042  f04f7640          MOV      r6,#0x3000000
000046  ea066505          AND      r5,r6,r5,LSL #24
00004a  432c              ORRS     r4,r4,r5
00004c  788d              LDRB     r5,[r1,#2]
00004e  f44f2670          MOV      r6,#0xf0000
000052  ea064505          AND      r5,r6,r5,LSL #16
000056  432c              ORRS     r4,r4,r5
000058  78cd              LDRB     r5,[r1,#3]
00005a  f44f06e0          MOV      r6,#0x700000
00005e  ea065505          AND      r5,r6,r5,LSL #20
000062  432c              ORRS     r4,r4,r5
000064  894d              LDRH     r5,[r1,#0xa]
000066  1e6d              SUBS     r5,r5,#1
000068  f3c50509          UBFX     r5,r5,#0,#10
00006c  432c              ORRS     r4,r4,r5
00006e  61d4              STR      r4,[r2,#0x1c]
;;;184                                  BT_SJW((uint32_t)can_parameter_init->resync_jump_width) | \
;;;185                                  BT_BS1((uint32_t)can_parameter_init->time_segment_1) | \
;;;186                                  BT_BS2((uint32_t)can_parameter_init->time_segment_2) | \
;;;187                                  BT_BAUDPSC(((uint32_t)(can_parameter_init->prescaler) - 1U)));
;;;188    
;;;189            /* time trigger communication mode */
;;;190            if(ENABLE == can_parameter_init->time_triggered){
000070  790c              LDRB     r4,[r1,#4]
000072  2c01              CMP      r4,#1
000074  d104              BNE      |L10.128|
;;;191                CAN_CTL(can_periph) |= CAN_CTL_TTC;
000076  6814              LDR      r4,[r2,#0]
000078  f0440480          ORR      r4,r4,#0x80
00007c  6014              STR      r4,[r2,#0]
00007e  e003              B        |L10.136|
                  |L10.128|
;;;192            }else{
;;;193                CAN_CTL(can_periph) &= ~CAN_CTL_TTC;
000080  6814              LDR      r4,[r2,#0]
000082  f0240480          BIC      r4,r4,#0x80
000086  6014              STR      r4,[r2,#0]
                  |L10.136|
;;;194            }
;;;195            /* automatic bus-off managment */
;;;196            if(ENABLE == can_parameter_init->auto_bus_off_recovery){
000088  794c              LDRB     r4,[r1,#5]
00008a  2c01              CMP      r4,#1
00008c  d104              BNE      |L10.152|
;;;197                CAN_CTL(can_periph) |= CAN_CTL_ABOR;
00008e  6814              LDR      r4,[r2,#0]
000090  f0440440          ORR      r4,r4,#0x40
000094  6014              STR      r4,[r2,#0]
000096  e003              B        |L10.160|
                  |L10.152|
;;;198            }else{
;;;199                CAN_CTL(can_periph) &= ~CAN_CTL_ABOR;
000098  6814              LDR      r4,[r2,#0]
00009a  f0240440          BIC      r4,r4,#0x40
00009e  6014              STR      r4,[r2,#0]
                  |L10.160|
;;;200            }
;;;201            /* automatic wakeup mode */
;;;202            if(ENABLE == can_parameter_init->auto_wake_up){
0000a0  798c              LDRB     r4,[r1,#6]
0000a2  2c01              CMP      r4,#1
0000a4  d104              BNE      |L10.176|
;;;203                CAN_CTL(can_periph) |= CAN_CTL_AWU;
0000a6  6814              LDR      r4,[r2,#0]
0000a8  f0440420          ORR      r4,r4,#0x20
0000ac  6014              STR      r4,[r2,#0]
0000ae  e003              B        |L10.184|
                  |L10.176|
;;;204            }else{
;;;205                CAN_CTL(can_periph) &= ~CAN_CTL_AWU;
0000b0  6814              LDR      r4,[r2,#0]
0000b2  f0240420          BIC      r4,r4,#0x20
0000b6  6014              STR      r4,[r2,#0]
                  |L10.184|
;;;206            }
;;;207            /* automatic retransmission mode disable */
;;;208            if(ENABLE == can_parameter_init->no_auto_retrans){
0000b8  79cc              LDRB     r4,[r1,#7]
0000ba  2c01              CMP      r4,#1
0000bc  d104              BNE      |L10.200|
;;;209                CAN_CTL(can_periph) |= CAN_CTL_ARD;
0000be  6814              LDR      r4,[r2,#0]
0000c0  f0440410          ORR      r4,r4,#0x10
0000c4  6014              STR      r4,[r2,#0]
0000c6  e003              B        |L10.208|
                  |L10.200|
;;;210            }else{
;;;211                CAN_CTL(can_periph) &= ~CAN_CTL_ARD;
0000c8  6814              LDR      r4,[r2,#0]
0000ca  f0240410          BIC      r4,r4,#0x10
0000ce  6014              STR      r4,[r2,#0]
                  |L10.208|
;;;212            }
;;;213            /* receive fifo overwrite mode */        
;;;214            if(ENABLE == can_parameter_init->rec_fifo_overwrite){
0000d0  7a0c              LDRB     r4,[r1,#8]
0000d2  2c01              CMP      r4,#1
0000d4  d104              BNE      |L10.224|
;;;215                CAN_CTL(can_periph) |= CAN_CTL_RFOD;
0000d6  6814              LDR      r4,[r2,#0]
0000d8  f0440408          ORR      r4,r4,#8
0000dc  6014              STR      r4,[r2,#0]
0000de  e003              B        |L10.232|
                  |L10.224|
;;;216            }else{
;;;217                CAN_CTL(can_periph) &= ~CAN_CTL_RFOD;
0000e0  6814              LDR      r4,[r2,#0]
0000e2  f0240408          BIC      r4,r4,#8
0000e6  6014              STR      r4,[r2,#0]
                  |L10.232|
;;;218            } 
;;;219            /* transmit fifo order */
;;;220            if(ENABLE == can_parameter_init->trans_fifo_order){
0000e8  7a4c              LDRB     r4,[r1,#9]
0000ea  2c01              CMP      r4,#1
0000ec  d104              BNE      |L10.248|
;;;221                CAN_CTL(can_periph) |= CAN_CTL_TFO;
0000ee  6814              LDR      r4,[r2,#0]
0000f0  f0440404          ORR      r4,r4,#4
0000f4  6014              STR      r4,[r2,#0]
0000f6  e003              B        |L10.256|
                  |L10.248|
;;;222            }else{
;;;223                CAN_CTL(can_periph) &= ~CAN_CTL_TFO;
0000f8  6814              LDR      r4,[r2,#0]
0000fa  f0240404          BIC      r4,r4,#4
0000fe  6014              STR      r4,[r2,#0]
                  |L10.256|
;;;224            }  
;;;225            /* disable initialize mode */
;;;226            CAN_CTL(can_periph) &= ~CAN_CTL_IWMOD;
000100  6814              LDR      r4,[r2,#0]
000102  f0240401          BIC      r4,r4,#1
000106  6014              STR      r4,[r2,#0]
;;;227            timeout = CAN_TIMEOUT;
000108  f64f73ff          MOV      r3,#0xffff
;;;228            /* wait the ACK */
;;;229            while((CAN_STAT_IWS == (CAN_STAT(can_periph) & CAN_STAT_IWS)) && (0U != timeout)){
00010c  e000              B        |L10.272|
                  |L10.270|
;;;230                timeout--;
00010e  1e5b              SUBS     r3,r3,#1
                  |L10.272|
000110  6854              LDR      r4,[r2,#4]            ;229
000112  f0040401          AND      r4,r4,#1              ;229
000116  b10c              CBZ      r4,|L10.284|
000118  2b00              CMP      r3,#0                 ;229
00011a  d1f8              BNE      |L10.270|
                  |L10.284|
;;;231            }
;;;232            /* check exit initialize mode */
;;;233            if(0U != timeout){
00011c  b103              CBZ      r3,|L10.288|
;;;234                flag = SUCCESS;
00011e  2001              MOVS     r0,#1
                  |L10.288|
;;;235            }
;;;236        }  
;;;237        return flag;
;;;238    }
000120  bd70              POP      {r4-r6,pc}
;;;239    
                          ENDP


                          AREA ||i.can_interrupt_disable||, CODE, READONLY, ALIGN=1

                  can_interrupt_disable PROC
;;;873    */
;;;874    void can_interrupt_disable(uint32_t can_periph, uint32_t interrupt)
000000  6942              LDR      r2,[r0,#0x14]
;;;875    {
;;;876        CAN_INTEN(can_periph) &= ~interrupt;
000002  438a              BICS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;877    }
000006  4770              BX       lr
;;;878    
                          ENDP


                          AREA ||i.can_interrupt_enable||, CODE, READONLY, ALIGN=1

                  can_interrupt_enable PROC
;;;845    */
;;;846    void can_interrupt_enable(uint32_t can_periph, uint32_t interrupt)
000000  6942              LDR      r2,[r0,#0x14]
;;;847    {
;;;848        CAN_INTEN(can_periph) |= interrupt;
000002  430a              ORRS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;849    }
000006  4770              BX       lr
;;;850    
                          ENDP


                          AREA ||i.can_interrupt_flag_clear||, CODE, READONLY, ALIGN=2

                  can_interrupt_flag_clear PROC
;;;1036   */
;;;1037   void can_interrupt_flag_clear(uint32_t can_periph, can_interrupt_flag_enum flag)
000000  b510              PUSH     {r4,lr}
;;;1038   {
;;;1039       if (flag == CAN_INT_FLAG_RFO1){
000002  4a0d              LDR      r2,|L13.56|
000004  4291              CMP      r1,r2
000006  d10b              BNE      |L13.32|
;;;1040           CAN_REG_VALS(can_periph, flag) &= ~BIT(CAN_BIT_POS0(flag));
000008  eb003211          ADD      r2,r0,r1,LSR #12
00000c  6812              LDR      r2,[r2,#0]
00000e  f3c11484          UBFX     r4,r1,#6,#5
000012  2301              MOVS     r3,#1
000014  40a3              LSLS     r3,r3,r4
000016  439a              BICS     r2,r2,r3
000018  eb003311          ADD      r3,r0,r1,LSR #12
00001c  601a              STR      r2,[r3,#0]
00001e  e00a              B        |L13.54|
                  |L13.32|
;;;1041       } else {
;;;1042           CAN_REG_VALS(can_periph, flag) |= BIT(CAN_BIT_POS0(flag));
000020  eb003211          ADD      r2,r0,r1,LSR #12
000024  6812              LDR      r2,[r2,#0]
000026  f3c11484          UBFX     r4,r1,#6,#5
00002a  2301              MOVS     r3,#1
00002c  40a3              LSLS     r3,r3,r4
00002e  431a              ORRS     r2,r2,r3
000030  eb003311          ADD      r3,r0,r1,LSR #12
000034  601a              STR      r2,[r3,#0]
                  |L13.54|
;;;1043       }
;;;1044   }
000036  bd10              POP      {r4,pc}
                          ENDP

                  |L13.56|
                          DCD      0x00010106

                          AREA ||i.can_interrupt_flag_get||, CODE, READONLY, ALIGN=2

                  can_interrupt_flag_get PROC
;;;993    */
;;;994    FlagStatus can_interrupt_flag_get(uint32_t can_periph, can_interrupt_flag_enum flag)
000000  b5f0              PUSH     {r4-r7,lr}
;;;995    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;996        uint32_t ret1 = RESET;
000006  2600              MOVS     r6,#0
;;;997        uint32_t ret2 = RESET;
000008  2700              MOVS     r7,#0
;;;998        
;;;999        /* get the staus of interrupt flag */
;;;1000       if (flag == CAN_INT_FLAG_RFF0) {
00000a  f24c00c2          MOV      r0,#0xc0c2
00000e  4284              CMP      r4,r0
000010  d105              BNE      |L14.30|
;;;1001           ret1 = can_receive_message_length_get(can_periph, CAN_FIFO0);
000012  2100              MOVS     r1,#0
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       can_receive_message_length_get
00001a  4606              MOV      r6,r0
00001c  e019              B        |L14.82|
                  |L14.30|
;;;1002       } else if (flag == CAN_INT_FLAG_RFF1) {
00001e  4813              LDR      r0,|L14.108|
000020  4284              CMP      r4,r0
000022  d105              BNE      |L14.48|
;;;1003           ret1 = can_receive_message_length_get(can_periph, CAN_FIFO1);
000024  2101              MOVS     r1,#1
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       can_receive_message_length_get
00002c  4606              MOV      r6,r0
00002e  e010              B        |L14.82|
                  |L14.48|
;;;1004       } else if (flag == CAN_INT_FLAG_ERRN) {
000030  480f              LDR      r0,|L14.112|
000032  4284              CMP      r4,r0
000034  d104              BNE      |L14.64|
;;;1005           ret1 = can_error_get(can_periph);
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       can_error_get
00003c  4606              MOV      r6,r0
00003e  e008              B        |L14.82|
                  |L14.64|
;;;1006       } else {
;;;1007           ret1 = CAN_REG_VALS(can_periph, flag) & BIT(CAN_BIT_POS0(flag));
000040  eb053014          ADD      r0,r5,r4,LSR #12
000044  6800              LDR      r0,[r0,#0]
000046  f3c41284          UBFX     r2,r4,#6,#5
00004a  2101              MOVS     r1,#1
00004c  4091              LSLS     r1,r1,r2
00004e  ea000601          AND      r6,r0,r1
                  |L14.82|
;;;1008       }
;;;1009       /* get the staus of interrupt enale bit */
;;;1010       ret2 = CAN_INTEN(can_periph) & BIT(CAN_BIT_POS1(flag));
000052  6968              LDR      r0,[r5,#0x14]
000054  f004021f          AND      r2,r4,#0x1f
000058  2101              MOVS     r1,#1
00005a  4091              LSLS     r1,r1,r2
00005c  ea000701          AND      r7,r0,r1
;;;1011       if(ret1 && ret2){
000060  b116              CBZ      r6,|L14.104|
000062  b10f              CBZ      r7,|L14.104|
;;;1012           return SET;
000064  2001              MOVS     r0,#1
                  |L14.102|
;;;1013       }else{
;;;1014           return RESET;
;;;1015       }
;;;1016   }
000066  bdf0              POP      {r4-r7,pc}
                  |L14.104|
000068  2000              MOVS     r0,#0                 ;1014
00006a  e7fc              B        |L14.102|
;;;1017   
                          ENDP

                  |L14.108|
                          DCD      0x000100c5
                  |L14.112|
                          DCD      0x000180cb

                          AREA ||i.can_message_receive||, CODE, READONLY, ALIGN=1

                  can_message_receive PROC
;;;590    */
;;;591    void can_message_receive(uint32_t can_periph, uint8_t fifo_number, can_receive_message_struct* receive_message)
000000  b510              PUSH     {r4,lr}
;;;592    {
;;;593        /* get the frame format */
;;;594        receive_message->rx_ff = (uint8_t)(CAN_RFIFOMI_FF & CAN_RFIFOMI(can_periph, fifo_number));
000002  f50073d8          ADD      r3,r0,#0x1b0
000006  eb031301          ADD      r3,r3,r1,LSL #4
00000a  681b              LDR      r3,[r3,#0]
00000c  f0030304          AND      r3,r3,#4
000010  7213              STRB     r3,[r2,#8]
;;;595        if(CAN_FF_STANDARD == receive_message->rx_ff){
000012  7a13              LDRB     r3,[r2,#8]
000014  b93b              CBNZ     r3,|L15.38|
;;;596            /* get standard identifier */
;;;597            receive_message->rx_sfid = (uint32_t)(GET_RFIFOMI_SFID(CAN_RFIFOMI(can_periph, fifo_number)));
000016  f50073d8          ADD      r3,r0,#0x1b0
00001a  eb031301          ADD      r3,r3,r1,LSL #4
00001e  681b              LDR      r3,[r3,#0]
000020  0d5b              LSRS     r3,r3,#21
000022  6013              STR      r3,[r2,#0]
000024  e006              B        |L15.52|
                  |L15.38|
;;;598        }else{
;;;599            /* get extended identifier */
;;;600            receive_message->rx_efid = (uint32_t)(GET_RFIFOMI_EFID(CAN_RFIFOMI(can_periph, fifo_number)));
000026  f50073d8          ADD      r3,r0,#0x1b0
00002a  eb031301          ADD      r3,r3,r1,LSL #4
00002e  681b              LDR      r3,[r3,#0]
000030  08db              LSRS     r3,r3,#3
000032  6053              STR      r3,[r2,#4]
                  |L15.52|
;;;601        }
;;;602        
;;;603        /* get frame type */
;;;604        receive_message->rx_ft = (uint8_t)(CAN_RFIFOMI_FT & CAN_RFIFOMI(can_periph, fifo_number));        
000034  f50073d8          ADD      r3,r0,#0x1b0
000038  eb031301          ADD      r3,r3,r1,LSL #4
00003c  681b              LDR      r3,[r3,#0]
00003e  f0030302          AND      r3,r3,#2
000042  7253              STRB     r3,[r2,#9]
;;;605        /* filtering index */
;;;606        receive_message->rx_fi = (uint8_t)(GET_RFIFOMP_FI(CAN_RFIFOMP(can_periph, fifo_number)));
000044  f50073da          ADD      r3,r0,#0x1b4
000048  eb031301          ADD      r3,r3,r1,LSL #4
00004c  681b              LDR      r3,[r3,#0]
00004e  0a1b              LSRS     r3,r3,#8
000050  74d3              STRB     r3,[r2,#0x13]
;;;607        /* get recevie data length */
;;;608        receive_message->rx_dlen = (uint8_t)(GET_RFIFOMP_DLENC(CAN_RFIFOMP(can_periph, fifo_number)));
000052  f50073da          ADD      r3,r0,#0x1b4
000056  eb031301          ADD      r3,r3,r1,LSL #4
00005a  681b              LDR      r3,[r3,#0]
00005c  f003030f          AND      r3,r3,#0xf
000060  7293              STRB     r3,[r2,#0xa]
;;;609        
;;;610        /* receive data */
;;;611        receive_message -> rx_data[0] = (uint8_t)(GET_RFIFOMDATA0_DB0(CAN_RFIFOMDATA0(can_periph, fifo_number)));
000062  f50073dc          ADD      r3,r0,#0x1b8
000066  eb031301          ADD      r3,r3,r1,LSL #4
00006a  681b              LDR      r3,[r3,#0]
00006c  72d3              STRB     r3,[r2,#0xb]
;;;612        receive_message -> rx_data[1] = (uint8_t)(GET_RFIFOMDATA0_DB1(CAN_RFIFOMDATA0(can_periph, fifo_number)));
00006e  f50073dc          ADD      r3,r0,#0x1b8
000072  eb031301          ADD      r3,r3,r1,LSL #4
000076  681b              LDR      r3,[r3,#0]
000078  0a1c              LSRS     r4,r3,#8
00007a  7314              STRB     r4,[r2,#0xc]
;;;613        receive_message -> rx_data[2] = (uint8_t)(GET_RFIFOMDATA0_DB2(CAN_RFIFOMDATA0(can_periph, fifo_number)));
00007c  f50073dc          ADD      r3,r0,#0x1b8
000080  eb031301          ADD      r3,r3,r1,LSL #4
000084  681b              LDR      r3,[r3,#0]
000086  0c1c              LSRS     r4,r3,#16
000088  7354              STRB     r4,[r2,#0xd]
;;;614        receive_message -> rx_data[3] = (uint8_t)(GET_RFIFOMDATA0_DB3(CAN_RFIFOMDATA0(can_periph, fifo_number)));
00008a  f50073dc          ADD      r3,r0,#0x1b8
00008e  eb031301          ADD      r3,r3,r1,LSL #4
000092  681b              LDR      r3,[r3,#0]
000094  0e1c              LSRS     r4,r3,#24
000096  7394              STRB     r4,[r2,#0xe]
;;;615        receive_message -> rx_data[4] = (uint8_t)(GET_RFIFOMDATA1_DB4(CAN_RFIFOMDATA1(can_periph, fifo_number)));
000098  f50073de          ADD      r3,r0,#0x1bc
00009c  eb031301          ADD      r3,r3,r1,LSL #4
0000a0  681b              LDR      r3,[r3,#0]
0000a2  73d3              STRB     r3,[r2,#0xf]
;;;616        receive_message -> rx_data[5] = (uint8_t)(GET_RFIFOMDATA1_DB5(CAN_RFIFOMDATA1(can_periph, fifo_number)));
0000a4  f50073de          ADD      r3,r0,#0x1bc
0000a8  eb031301          ADD      r3,r3,r1,LSL #4
0000ac  681b              LDR      r3,[r3,#0]
0000ae  0a1c              LSRS     r4,r3,#8
0000b0  7414              STRB     r4,[r2,#0x10]
;;;617        receive_message -> rx_data[6] = (uint8_t)(GET_RFIFOMDATA1_DB6(CAN_RFIFOMDATA1(can_periph, fifo_number)));
0000b2  f50073de          ADD      r3,r0,#0x1bc
0000b6  eb031301          ADD      r3,r3,r1,LSL #4
0000ba  681b              LDR      r3,[r3,#0]
0000bc  0c1c              LSRS     r4,r3,#16
0000be  7454              STRB     r4,[r2,#0x11]
;;;618        receive_message -> rx_data[7] = (uint8_t)(GET_RFIFOMDATA1_DB7(CAN_RFIFOMDATA1(can_periph, fifo_number)));
0000c0  f50073de          ADD      r3,r0,#0x1bc
0000c4  eb031301          ADD      r3,r3,r1,LSL #4
0000c8  681b              LDR      r3,[r3,#0]
0000ca  0e1c              LSRS     r4,r3,#24
0000cc  7494              STRB     r4,[r2,#0x12]
;;;619        
;;;620        /* release FIFO */
;;;621        if(CAN_FIFO0 == fifo_number){
0000ce  b921              CBNZ     r1,|L15.218|
;;;622            CAN_RFIFO0(can_periph) |= CAN_RFIFO0_RFD0;
0000d0  68c3              LDR      r3,[r0,#0xc]
0000d2  f0430320          ORR      r3,r3,#0x20
0000d6  60c3              STR      r3,[r0,#0xc]
0000d8  e003              B        |L15.226|
                  |L15.218|
;;;623        }else{
;;;624            CAN_RFIFO1(can_periph) |= CAN_RFIFO1_RFD1;
0000da  6903              LDR      r3,[r0,#0x10]
0000dc  f0430320          ORR      r3,r3,#0x20
0000e0  6103              STR      r3,[r0,#0x10]
                  |L15.226|
;;;625        }
;;;626    }
0000e2  bd10              POP      {r4,pc}
;;;627    
                          ENDP


                          AREA ||i.can_message_transmit||, CODE, READONLY, ALIGN=2

                  can_message_transmit PROC
;;;438    */
;;;439    uint8_t can_message_transmit(uint32_t can_periph, can_trasnmit_message_struct* transmit_message)
000000  b530              PUSH     {r4,r5,lr}
;;;440    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;441        uint8_t mailbox_number = CAN_MAILBOX0;
000006  2100              MOVS     r1,#0
;;;442    
;;;443        /* select one empty mailbox */
;;;444        if(CAN_TSTAT_TME0 == (CAN_TSTAT(can_periph)&CAN_TSTAT_TME0)){
000008  6890              LDR      r0,[r2,#8]
00000a  f0006080          AND      r0,r0,#0x4000000
00000e  f1b06f80          CMP      r0,#0x4000000
000012  d100              BNE      |L16.22|
;;;445            mailbox_number = CAN_MAILBOX0;
000014  e010              B        |L16.56|
                  |L16.22|
;;;446        }else if(CAN_TSTAT_TME1 == (CAN_TSTAT(can_periph)&CAN_TSTAT_TME1)){
000016  6890              LDR      r0,[r2,#8]
000018  f0006000          AND      r0,r0,#0x8000000
00001c  f1b06f00          CMP      r0,#0x8000000
000020  d101              BNE      |L16.38|
;;;447            mailbox_number = CAN_MAILBOX1;
000022  2101              MOVS     r1,#1
000024  e008              B        |L16.56|
                  |L16.38|
;;;448        }else if(CAN_TSTAT_TME2 == (CAN_TSTAT(can_periph)&CAN_TSTAT_TME2)){
000026  6890              LDR      r0,[r2,#8]
000028  f0005080          AND      r0,r0,#0x10000000
00002c  f1b05f80          CMP      r0,#0x10000000
000030  d101              BNE      |L16.54|
;;;449            mailbox_number = CAN_MAILBOX2;
000032  2102              MOVS     r1,#2
000034  e000              B        |L16.56|
                  |L16.54|
;;;450        }else{
;;;451            mailbox_number = CAN_NOMAILBOX;
000036  2103              MOVS     r1,#3
                  |L16.56|
;;;452        }
;;;453        /* return no mailbox empty */
;;;454        if(CAN_NOMAILBOX == mailbox_number){
000038  2903              CMP      r1,#3
00003a  d101              BNE      |L16.64|
;;;455            return CAN_NOMAILBOX;
00003c  2003              MOVS     r0,#3
                  |L16.62|
;;;456        }
;;;457        
;;;458        CAN_TMI(can_periph, mailbox_number) &= CAN_TMI_TEN;
;;;459        if(CAN_FF_STANDARD == transmit_message->tx_ff){
;;;460            /* set transmit mailbox standard identifier */
;;;461            CAN_TMI(can_periph, mailbox_number) |= (uint32_t)(TMI_SFID(transmit_message->tx_sfid) | \
;;;462                                                    transmit_message->tx_ft);
;;;463        }else{
;;;464            /* set transmit mailbox extended identifier */
;;;465            CAN_TMI(can_periph, mailbox_number) |= (uint32_t)(TMI_EFID(transmit_message->tx_efid) | \
;;;466                                                    transmit_message->tx_ff | \
;;;467                                                    transmit_message->tx_ft);
;;;468        }
;;;469        /* set the data length */
;;;470        CAN_TMP(can_periph, mailbox_number) &= ~CAN_TMP_DLENC;
;;;471        CAN_TMP(can_periph, mailbox_number) |= transmit_message->tx_dlen;
;;;472        /* set the data */
;;;473        CAN_TMDATA0(can_periph, mailbox_number) = TMDATA0_DB3(transmit_message->tx_data[3]) | \
;;;474                                                  TMDATA0_DB2(transmit_message->tx_data[2]) | \
;;;475                                                  TMDATA0_DB1(transmit_message->tx_data[1]) | \
;;;476                                                  TMDATA0_DB0(transmit_message->tx_data[0]);
;;;477        CAN_TMDATA1(can_periph, mailbox_number) = TMDATA1_DB7(transmit_message->tx_data[7]) | \
;;;478                                                  TMDATA1_DB6(transmit_message->tx_data[6]) | \
;;;479                                                  TMDATA1_DB5(transmit_message->tx_data[5]) | \
;;;480                                                  TMDATA1_DB4(transmit_message->tx_data[4]);
;;;481        /* enable transmission */
;;;482        CAN_TMI(can_periph, mailbox_number) |= CAN_TMI_TEN;
;;;483    
;;;484        return mailbox_number;
;;;485    }
00003e  bd30              POP      {r4,r5,pc}
                  |L16.64|
000040  f50270c0          ADD      r0,r2,#0x180          ;458
000044  eb001001          ADD      r0,r0,r1,LSL #4       ;458
000048  6800              LDR      r0,[r0,#0]            ;458
00004a  f0000401          AND      r4,r0,#1              ;458
00004e  f50270c0          ADD      r0,r2,#0x180          ;458
000052  eb001001          ADD      r0,r0,r1,LSL #4       ;458
000056  6004              STR      r4,[r0,#0]            ;458
000058  7a18              LDRB     r0,[r3,#8]            ;459
00005a  b988              CBNZ     r0,|L16.128|
00005c  8818              LDRH     r0,[r3,#0]            ;461
00005e  4c3b              LDR      r4,|L16.332|
000060  ea045040          AND      r0,r4,r0,LSL #21      ;461
000064  7a5c              LDRB     r4,[r3,#9]            ;461
000066  4320              ORRS     r0,r0,r4              ;461
000068  f50274c0          ADD      r4,r2,#0x180          ;461
00006c  eb041401          ADD      r4,r4,r1,LSL #4       ;461
000070  6824              LDR      r4,[r4,#0]            ;461
000072  4320              ORRS     r0,r0,r4              ;461
000074  f50274c0          ADD      r4,r2,#0x180          ;461
000078  eb041401          ADD      r4,r4,r1,LSL #4       ;461
00007c  6020              STR      r0,[r4,#0]            ;461
00007e  e013              B        |L16.168|
                  |L16.128|
000080  f06f0407          MVN      r4,#7                 ;465
000084  6858              LDR      r0,[r3,#4]            ;465
000086  ea0400c0          AND      r0,r4,r0,LSL #3       ;465
00008a  7a1c              LDRB     r4,[r3,#8]            ;465
00008c  4320              ORRS     r0,r0,r4              ;465
00008e  7a5c              LDRB     r4,[r3,#9]            ;465
000090  4320              ORRS     r0,r0,r4              ;465
000092  f50274c0          ADD      r4,r2,#0x180          ;465
000096  eb041401          ADD      r4,r4,r1,LSL #4       ;465
00009a  6824              LDR      r4,[r4,#0]            ;465
00009c  4320              ORRS     r0,r0,r4              ;465
00009e  f50274c0          ADD      r4,r2,#0x180          ;465
0000a2  eb041401          ADD      r4,r4,r1,LSL #4       ;465
0000a6  6020              STR      r0,[r4,#0]            ;465
                  |L16.168|
0000a8  f50270c2          ADD      r0,r2,#0x184          ;470
0000ac  eb001001          ADD      r0,r0,r1,LSL #4       ;470
0000b0  6800              LDR      r0,[r0,#0]            ;470
0000b2  f020040f          BIC      r4,r0,#0xf            ;470
0000b6  f50270c2          ADD      r0,r2,#0x184          ;470
0000ba  eb001001          ADD      r0,r0,r1,LSL #4       ;470
0000be  6004              STR      r4,[r0,#0]            ;470
0000c0  f50270c2          ADD      r0,r2,#0x184          ;471
0000c4  eb001001          ADD      r0,r0,r1,LSL #4       ;471
0000c8  6800              LDR      r0,[r0,#0]            ;471
0000ca  7a9c              LDRB     r4,[r3,#0xa]          ;471
0000cc  4320              ORRS     r0,r0,r4              ;471
0000ce  f50274c2          ADD      r4,r2,#0x184          ;471
0000d2  eb041401          ADD      r4,r4,r1,LSL #4       ;471
0000d6  6020              STR      r0,[r4,#0]            ;471
0000d8  7b98              LDRB     r0,[r3,#0xe]          ;473
0000da  f04f447f          MOV      r4,#0xff000000        ;473
0000de  ea046000          AND      r0,r4,r0,LSL #24      ;473
0000e2  7b5c              LDRB     r4,[r3,#0xd]          ;473
0000e4  f44f057f          MOV      r5,#0xff0000          ;473
0000e8  ea054404          AND      r4,r5,r4,LSL #16      ;473
0000ec  4320              ORRS     r0,r0,r4              ;473
0000ee  7b1c              LDRB     r4,[r3,#0xc]          ;473
0000f0  122d              ASRS     r5,r5,#8              ;473
0000f2  ea052404          AND      r4,r5,r4,LSL #8       ;473
0000f6  4320              ORRS     r0,r0,r4              ;473
0000f8  7adc              LDRB     r4,[r3,#0xb]          ;473
0000fa  4320              ORRS     r0,r0,r4              ;473
0000fc  f50274c4          ADD      r4,r2,#0x188          ;473
000100  eb041401          ADD      r4,r4,r1,LSL #4       ;473
000104  6020              STR      r0,[r4,#0]            ;473
000106  7c98              LDRB     r0,[r3,#0x12]         ;477
000108  042c              LSLS     r4,r5,#16             ;477
00010a  ea046000          AND      r0,r4,r0,LSL #24      ;477
00010e  7c5c              LDRB     r4,[r3,#0x11]         ;477
000110  022d              LSLS     r5,r5,#8              ;477
000112  ea054404          AND      r4,r5,r4,LSL #16      ;477
000116  4320              ORRS     r0,r0,r4              ;477
000118  7c1c              LDRB     r4,[r3,#0x10]         ;477
00011a  122d              ASRS     r5,r5,#8              ;477
00011c  ea052404          AND      r4,r5,r4,LSL #8       ;477
000120  4320              ORRS     r0,r0,r4              ;477
000122  7bdc              LDRB     r4,[r3,#0xf]          ;477
000124  4320              ORRS     r0,r0,r4              ;477
000126  f50274c6          ADD      r4,r2,#0x18c          ;477
00012a  eb041401          ADD      r4,r4,r1,LSL #4       ;477
00012e  6020              STR      r0,[r4,#0]            ;477
000130  f50270c0          ADD      r0,r2,#0x180          ;482
000134  eb001001          ADD      r0,r0,r1,LSL #4       ;482
000138  6800              LDR      r0,[r0,#0]            ;482
00013a  f0400401          ORR      r4,r0,#1              ;482
00013e  f50270c0          ADD      r0,r2,#0x180          ;482
000142  eb001001          ADD      r0,r0,r1,LSL #4       ;482
000146  6004              STR      r4,[r0,#0]            ;482
000148  4608              MOV      r0,r1                 ;484
00014a  e778              B        |L16.62|
;;;486    
                          ENDP

                  |L16.332|
                          DCD      0xffe00000

                          AREA ||i.can_receive_error_number_get||, CODE, READONLY, ALIGN=1

                  can_receive_error_number_get PROC
;;;798    */
;;;799    uint8_t can_receive_error_number_get(uint32_t can_periph)
000000  4601              MOV      r1,r0
;;;800    {
;;;801        uint8_t val;
;;;802        
;;;803        /* get error count */
;;;804        val = (uint8_t)(GET_ERR_RECNT(CAN_ERR(can_periph)));
000002  698a              LDR      r2,[r1,#0x18]
000004  0e10              LSRS     r0,r2,#24
;;;805        return val;
;;;806    }
000006  4770              BX       lr
;;;807    
                          ENDP


                          AREA ||i.can_receive_message_length_get||, CODE, READONLY, ALIGN=1

                  can_receive_message_length_get PROC
;;;659    */
;;;660    uint8_t can_receive_message_length_get(uint32_t can_periph, uint8_t fifo_number)
000000  4602              MOV      r2,r0
;;;661    {
;;;662        uint8_t val = 0U;
000002  2000              MOVS     r0,#0
;;;663        
;;;664        if(CAN_FIFO0 == fifo_number){
000004  b919              CBNZ     r1,|L18.14|
;;;665            /* FIFO0 */
;;;666            val = (uint8_t)(CAN_RFIFO0(can_periph) & CAN_RFIF_RFL_MASK);
000006  68d3              LDR      r3,[r2,#0xc]
000008  f0030003          AND      r0,r3,#3
00000c  e004              B        |L18.24|
                  |L18.14|
;;;667        }else if(CAN_FIFO1 == fifo_number){
00000e  2901              CMP      r1,#1
000010  d102              BNE      |L18.24|
;;;668            /* FIFO1 */
;;;669            val = (uint8_t)(CAN_RFIFO1(can_periph) & CAN_RFIF_RFL_MASK);
000012  6913              LDR      r3,[r2,#0x10]
000014  f0030003          AND      r0,r3,#3
                  |L18.24|
;;;670        }else{
;;;671            /* illegal parameters */
;;;672        }
;;;673        return val;
;;;674    }
000018  4770              BX       lr
;;;675    
                          ENDP


                          AREA ||i.can_struct_para_init||, CODE, READONLY, ALIGN=1

                  can_struct_para_init PROC
;;;78     */
;;;79     void can_struct_para_init(can_struct_type_enum type, void* p_struct)
000000  b510              PUSH     {r4,lr}
;;;80     {
000002  4602              MOV      r2,r0
;;;81         uint8_t i;
;;;82         
;;;83         /* get type of the struct */
;;;84         switch(type){
000004  b132              CBZ      r2,|L19.20|
000006  2a01              CMP      r2,#1
000008  d016              BEQ      |L19.56|
00000a  2a02              CMP      r2,#2
00000c  d020              BEQ      |L19.80|
00000e  2a03              CMP      r2,#3
000010  d141              BNE      |L19.150|
000012  e02e              B        |L19.114|
                  |L19.20|
;;;85             /* used for can_init() */
;;;86             case CAN_INIT_STRUCT:
;;;87                 ((can_parameter_struct*)p_struct)->auto_bus_off_recovery = DISABLE;
000014  2300              MOVS     r3,#0
000016  714b              STRB     r3,[r1,#5]
;;;88                 ((can_parameter_struct*)p_struct)->no_auto_retrans = DISABLE;
000018  71cb              STRB     r3,[r1,#7]
;;;89                 ((can_parameter_struct*)p_struct)->auto_wake_up = DISABLE;
00001a  718b              STRB     r3,[r1,#6]
;;;90                 ((can_parameter_struct*)p_struct)->prescaler = 0x03FFU; 
00001c  f24033ff          MOV      r3,#0x3ff
000020  814b              STRH     r3,[r1,#0xa]
;;;91                 ((can_parameter_struct*)p_struct)->rec_fifo_overwrite = DISABLE; 
000022  2300              MOVS     r3,#0
000024  720b              STRB     r3,[r1,#8]
;;;92                 ((can_parameter_struct*)p_struct)->resync_jump_width = CAN_BT_SJW_1TQ;
000026  704b              STRB     r3,[r1,#1]
;;;93                 ((can_parameter_struct*)p_struct)->time_segment_1 = CAN_BT_BS1_3TQ;
000028  2302              MOVS     r3,#2
00002a  708b              STRB     r3,[r1,#2]
;;;94                 ((can_parameter_struct*)p_struct)->time_segment_2 = CAN_BT_BS2_1TQ;
00002c  2300              MOVS     r3,#0
00002e  70cb              STRB     r3,[r1,#3]
;;;95                 ((can_parameter_struct*)p_struct)->time_triggered = DISABLE;
000030  710b              STRB     r3,[r1,#4]
;;;96                 ((can_parameter_struct*)p_struct)->trans_fifo_order = DISABLE;
000032  724b              STRB     r3,[r1,#9]
;;;97                 ((can_parameter_struct*)p_struct)->working_mode = CAN_NORMAL_MODE;
000034  700b              STRB     r3,[r1,#0]
;;;98                 
;;;99                 break;
000036  e030              B        |L19.154|
                  |L19.56|
;;;100            /* used for can_filter_init() */
;;;101            case CAN_FILTER_STRUCT:
;;;102                ((can_filter_parameter_struct*)p_struct)->filter_bits = CAN_FILTERBITS_32BIT;
000038  2301              MOVS     r3,#1
00003a  81cb              STRH     r3,[r1,#0xe]
;;;103                ((can_filter_parameter_struct*)p_struct)->filter_enable = DISABLE;
00003c  2300              MOVS     r3,#0
00003e  740b              STRB     r3,[r1,#0x10]
;;;104                ((can_filter_parameter_struct*)p_struct)->filter_fifo_number = CAN_FIFO0;
000040  810b              STRH     r3,[r1,#8]
;;;105                ((can_filter_parameter_struct*)p_struct)->filter_list_high = 0x0000U;
000042  800b              STRH     r3,[r1,#0]
;;;106                ((can_filter_parameter_struct*)p_struct)->filter_list_low = 0x0000U;
000044  804b              STRH     r3,[r1,#2]
;;;107                ((can_filter_parameter_struct*)p_struct)->filter_mask_high = 0x0000U;
000046  808b              STRH     r3,[r1,#4]
;;;108                ((can_filter_parameter_struct*)p_struct)->filter_mask_low = 0x0000U;
000048  80cb              STRH     r3,[r1,#6]
;;;109                ((can_filter_parameter_struct*)p_struct)->filter_mode = CAN_FILTERMODE_MASK;
00004a  818b              STRH     r3,[r1,#0xc]
;;;110                ((can_filter_parameter_struct*)p_struct)->filter_number = 0U;
00004c  814b              STRH     r3,[r1,#0xa]
;;;111    
;;;112                break;
00004e  e024              B        |L19.154|
                  |L19.80|
;;;113            /* used for can_message_transmit() */
;;;114            case CAN_TX_MESSAGE_STRUCT:
;;;115                for(i = 0U; i < 8U; i++){
000050  2000              MOVS     r0,#0
000052  e005              B        |L19.96|
                  |L19.84|
;;;116                    ((can_trasnmit_message_struct*)p_struct)->tx_data[i] = 0U;
000054  2400              MOVS     r4,#0
000056  f101030b          ADD      r3,r1,#0xb
00005a  541c              STRB     r4,[r3,r0]
00005c  1c43              ADDS     r3,r0,#1              ;115
00005e  b2d8              UXTB     r0,r3                 ;115
                  |L19.96|
000060  2808              CMP      r0,#8                 ;115
000062  d3f7              BCC      |L19.84|
;;;117                }
;;;118                
;;;119                ((can_trasnmit_message_struct*)p_struct)->tx_dlen = 0u;
000064  2300              MOVS     r3,#0
000066  728b              STRB     r3,[r1,#0xa]
;;;120                ((can_trasnmit_message_struct*)p_struct)->tx_efid = 0U;
000068  604b              STR      r3,[r1,#4]
;;;121                ((can_trasnmit_message_struct*)p_struct)->tx_ff = (uint8_t)CAN_FF_STANDARD;
00006a  720b              STRB     r3,[r1,#8]
;;;122                ((can_trasnmit_message_struct*)p_struct)->tx_ft = (uint8_t)CAN_FT_DATA;
00006c  724b              STRB     r3,[r1,#9]
;;;123                ((can_trasnmit_message_struct*)p_struct)->tx_sfid = 0U;
00006e  600b              STR      r3,[r1,#0]
;;;124                
;;;125                break;
000070  e013              B        |L19.154|
                  |L19.114|
;;;126            /* used for can_message_receive() */
;;;127            case CAN_RX_MESSAGE_STRUCT:
;;;128                for(i = 0U; i < 8U; i++){
000072  2000              MOVS     r0,#0
000074  e005              B        |L19.130|
                  |L19.118|
;;;129                    ((can_receive_message_struct*)p_struct)->rx_data[i] = 0U;
000076  2400              MOVS     r4,#0
000078  f101030b          ADD      r3,r1,#0xb
00007c  541c              STRB     r4,[r3,r0]
00007e  1c43              ADDS     r3,r0,#1              ;128
000080  b2d8              UXTB     r0,r3                 ;128
                  |L19.130|
000082  2808              CMP      r0,#8                 ;128
000084  d3f7              BCC      |L19.118|
;;;130                }
;;;131                
;;;132                ((can_receive_message_struct*)p_struct)->rx_dlen = 0U;
000086  2300              MOVS     r3,#0
000088  728b              STRB     r3,[r1,#0xa]
;;;133                ((can_receive_message_struct*)p_struct)->rx_efid = 0U;
00008a  604b              STR      r3,[r1,#4]
;;;134                ((can_receive_message_struct*)p_struct)->rx_ff = (uint8_t)CAN_FF_STANDARD;
00008c  720b              STRB     r3,[r1,#8]
;;;135                ((can_receive_message_struct*)p_struct)->rx_fi = 0U;
00008e  74cb              STRB     r3,[r1,#0x13]
;;;136                ((can_receive_message_struct*)p_struct)->rx_ft = (uint8_t)CAN_FT_DATA;
000090  724b              STRB     r3,[r1,#9]
;;;137                ((can_receive_message_struct*)p_struct)->rx_sfid = 0U;
000092  600b              STR      r3,[r1,#0]
;;;138                
;;;139                break;
000094  e001              B        |L19.154|
                  |L19.150|
;;;140    
;;;141            default:
;;;142                CAN_ERROR_HANDLE("parameter is invalid \r\n");
000096  bf00              NOP      
                  |L19.152|
000098  e7fe              B        |L19.152|
                  |L19.154|
00009a  bf00              NOP                            ;99
;;;143        }
;;;144    }
00009c  bd10              POP      {r4,pc}
;;;145    
                          ENDP


                          AREA ||i.can_time_trigger_mode_disable||, CODE, READONLY, ALIGN=1

                  can_time_trigger_mode_disable PROC
;;;412    */
;;;413    void can_time_trigger_mode_disable(uint32_t can_periph)
000000  4601              MOV      r1,r0
;;;414    {
;;;415        uint8_t mailbox_number; 
;;;416        
;;;417        /* disable the TCC mode */
;;;418        CAN_CTL(can_periph) &= ~CAN_CTL_TTC;
000002  680a              LDR      r2,[r1,#0]
000004  f0220280          BIC      r2,r2,#0x80
000008  600a              STR      r2,[r1,#0]
;;;419        /* reset TSEN bits */
;;;420        for(mailbox_number = 0U; mailbox_number < 3U; mailbox_number++){
00000a  2000              MOVS     r0,#0
00000c  e00d              B        |L20.42|
                  |L20.14|
;;;421            CAN_TMP(can_periph, mailbox_number) &= ~CAN_TMP_TSEN;
00000e  f50172c2          ADD      r2,r1,#0x184
000012  eb021200          ADD      r2,r2,r0,LSL #4
000016  6812              LDR      r2,[r2,#0]
000018  f4227380          BIC      r3,r2,#0x100
00001c  f50172c2          ADD      r2,r1,#0x184
000020  eb021200          ADD      r2,r2,r0,LSL #4
000024  6013              STR      r3,[r2,#0]
000026  1c42              ADDS     r2,r0,#1              ;420
000028  b2d0              UXTB     r0,r2                 ;420
                  |L20.42|
00002a  2803              CMP      r0,#3                 ;420
00002c  d3ef              BCC      |L20.14|
;;;422        }
;;;423    }
00002e  4770              BX       lr
;;;424    
                          ENDP


                          AREA ||i.can_time_trigger_mode_enable||, CODE, READONLY, ALIGN=1

                  can_time_trigger_mode_enable PROC
;;;393    */
;;;394    void can_time_trigger_mode_enable(uint32_t can_periph)
000000  4601              MOV      r1,r0
;;;395    {
;;;396        uint8_t mailbox_number;
;;;397        
;;;398        /* enable the tcc mode */
;;;399        CAN_CTL(can_periph) |= CAN_CTL_TTC;
000002  680a              LDR      r2,[r1,#0]
000004  f0420280          ORR      r2,r2,#0x80
000008  600a              STR      r2,[r1,#0]
;;;400        /* enable time stamp */
;;;401        for(mailbox_number = 0U; mailbox_number < 3U; mailbox_number++){
00000a  2000              MOVS     r0,#0
00000c  e00d              B        |L21.42|
                  |L21.14|
;;;402            CAN_TMP(can_periph, mailbox_number) |= CAN_TMP_TSEN;
00000e  f50172c2          ADD      r2,r1,#0x184
000012  eb021200          ADD      r2,r2,r0,LSL #4
000016  6812              LDR      r2,[r2,#0]
000018  f4427380          ORR      r3,r2,#0x100
00001c  f50172c2          ADD      r2,r1,#0x184
000020  eb021200          ADD      r2,r2,r0,LSL #4
000024  6013              STR      r3,[r2,#0]
000026  1c42              ADDS     r2,r0,#1              ;401
000028  b2d0              UXTB     r0,r2                 ;401
                  |L21.42|
00002a  2803              CMP      r0,#3                 ;401
00002c  d3ef              BCC      |L21.14|
;;;403        }
;;;404    }
00002e  4770              BX       lr
;;;405    
                          ENDP


                          AREA ||i.can_transmission_stop||, CODE, READONLY, ALIGN=1

                  can_transmission_stop PROC
;;;555    */
;;;556    void can_transmission_stop(uint32_t can_periph, uint8_t mailbox_number)
000000  b951              CBNZ     r1,|L22.24|
;;;557    {
;;;558        if(CAN_MAILBOX0 == mailbox_number){
;;;559            CAN_TSTAT(can_periph) |= CAN_TSTAT_MST0;
000002  6882              LDR      r2,[r0,#8]
000004  f0420280          ORR      r2,r2,#0x80
000008  6082              STR      r2,[r0,#8]
;;;560            while(CAN_TSTAT_MST0 == (CAN_TSTAT(can_periph) & CAN_TSTAT_MST0)){
00000a  bf00              NOP      
                  |L22.12|
00000c  6882              LDR      r2,[r0,#8]
00000e  f0020280          AND      r2,r2,#0x80
000012  2a80              CMP      r2,#0x80
000014  d0fa              BEQ      |L22.12|
000016  e01a              B        |L22.78|
                  |L22.24|
;;;561            }
;;;562        }else if(CAN_MAILBOX1 == mailbox_number){
000018  2901              CMP      r1,#1
00001a  d10b              BNE      |L22.52|
;;;563            CAN_TSTAT(can_periph) |= CAN_TSTAT_MST1;
00001c  6882              LDR      r2,[r0,#8]
00001e  f4424200          ORR      r2,r2,#0x8000
000022  6082              STR      r2,[r0,#8]
;;;564            while(CAN_TSTAT_MST1 == (CAN_TSTAT(can_periph) & CAN_TSTAT_MST1)){
000024  bf00              NOP      
                  |L22.38|
000026  6882              LDR      r2,[r0,#8]
000028  f4024200          AND      r2,r2,#0x8000
00002c  f5b24f00          CMP      r2,#0x8000
000030  d0f9              BEQ      |L22.38|
000032  e00c              B        |L22.78|
                  |L22.52|
;;;565            }
;;;566        }else if(CAN_MAILBOX2 == mailbox_number){
000034  2902              CMP      r1,#2
000036  d10a              BNE      |L22.78|
;;;567            CAN_TSTAT(can_periph) |= CAN_TSTAT_MST2;
000038  6882              LDR      r2,[r0,#8]
00003a  f4420200          ORR      r2,r2,#0x800000
00003e  6082              STR      r2,[r0,#8]
;;;568            while(CAN_TSTAT_MST2 == (CAN_TSTAT(can_periph) & CAN_TSTAT_MST2)){
000040  bf00              NOP      
                  |L22.66|
000042  6882              LDR      r2,[r0,#8]
000044  f4020200          AND      r2,r2,#0x800000
000048  f5b20f00          CMP      r2,#0x800000
00004c  d0f9              BEQ      |L22.66|
                  |L22.78|
;;;569            }
;;;570        }else{
;;;571            /* illegal parameters */
;;;572        }
;;;573    }
00004e  4770              BX       lr
;;;574    
                          ENDP


                          AREA ||i.can_transmit_error_number_get||, CODE, READONLY, ALIGN=1

                  can_transmit_error_number_get PROC
;;;814    */
;;;815    uint8_t can_transmit_error_number_get(uint32_t can_periph)
000000  4601              MOV      r1,r0
;;;816    {
;;;817        uint8_t val;
;;;818        
;;;819        val = (uint8_t)(GET_ERR_TECNT(CAN_ERR(can_periph)));
000002  698a              LDR      r2,[r1,#0x18]
000004  f3c24007          UBFX     r0,r2,#16,#8
;;;820        return val;
;;;821    }
000008  4770              BX       lr
;;;822    
                          ENDP


                          AREA ||i.can_transmit_states||, CODE, READONLY, ALIGN=2

                  can_transmit_states PROC
;;;496    */
;;;497    can_transmit_state_enum can_transmit_states(uint32_t can_periph, uint8_t mailbox_number)
000000  b530              PUSH     {r4,r5,lr}
;;;498    {
000002  4602              MOV      r2,r0
;;;499        can_transmit_state_enum state = CAN_TRANSMIT_FAILED;
000004  2000              MOVS     r0,#0
;;;500        uint32_t val = 0U;
000006  2300              MOVS     r3,#0
;;;501        
;;;502        /* check selected mailbox state */    
;;;503        switch(mailbox_number){
000008  b121              CBZ      r1,|L24.20|
00000a  2901              CMP      r1,#1
00000c  d007              BEQ      |L24.30|
00000e  2902              CMP      r1,#2
000010  d10f              BNE      |L24.50|
000012  e009              B        |L24.40|
                  |L24.20|
;;;504        /* mailbox0 */
;;;505        case CAN_MAILBOX0:
;;;506            val = CAN_TSTAT(can_periph) & (CAN_TSTAT_MTF0 | CAN_TSTAT_MTFNERR0 | CAN_TSTAT_TME0);
000014  6894              LDR      r4,[r2,#8]
000016  4d14              LDR      r5,|L24.104|
000018  ea040305          AND      r3,r4,r5
;;;507            break;
00001c  e00b              B        |L24.54|
                  |L24.30|
;;;508        /* mailbox1 */
;;;509        case CAN_MAILBOX1:
;;;510            val = CAN_TSTAT(can_periph) & (CAN_TSTAT_MTF1 | CAN_TSTAT_MTFNERR1 | CAN_TSTAT_TME1);
00001e  6894              LDR      r4,[r2,#8]
000020  4d12              LDR      r5,|L24.108|
000022  ea040305          AND      r3,r4,r5
;;;511            break;
000026  e006              B        |L24.54|
                  |L24.40|
;;;512        /* mailbox2 */
;;;513        case CAN_MAILBOX2:
;;;514            val = CAN_TSTAT(can_periph) & (CAN_TSTAT_MTF2 | CAN_TSTAT_MTFNERR2 | CAN_TSTAT_TME2);
000028  6894              LDR      r4,[r2,#8]
00002a  4d11              LDR      r5,|L24.112|
00002c  ea040305          AND      r3,r4,r5
;;;515            break;
000030  e001              B        |L24.54|
                  |L24.50|
;;;516        default:
;;;517            val = CAN_TRANSMIT_FAILED;
000032  2300              MOVS     r3,#0
;;;518            break;
000034  bf00              NOP      
                  |L24.54|
000036  bf00              NOP                            ;507
;;;519        }
;;;520        
;;;521        switch(val){
000038  b153              CBZ      r3,|L24.80|
00003a  f1a36480          SUB      r4,r3,#0x4000000
00003e  1ee4              SUBS     r4,r4,#3
000040  b144              CBZ      r4,|L24.84|
000042  4d0c              LDR      r5,|L24.116|
000044  442c              ADD      r4,r4,r5
000046  b13c              CBZ      r4,|L24.88|
000048  4d0b              LDR      r5,|L24.120|
00004a  442c              ADD      r4,r4,r5
00004c  b944              CBNZ     r4,|L24.96|
00004e  e005              B        |L24.92|
                  |L24.80|
;;;522            /* transmit pending */
;;;523        case (CAN_STATE_PENDING): 
;;;524            state = CAN_TRANSMIT_PENDING;
000050  2002              MOVS     r0,#2
;;;525            break;
000052  e007              B        |L24.100|
                  |L24.84|
;;;526            /* mailbox0 transmit succeeded */
;;;527        case (CAN_TSTAT_MTF0 | CAN_TSTAT_MTFNERR0 | CAN_TSTAT_TME0):
;;;528            state = CAN_TRANSMIT_OK;
000054  2001              MOVS     r0,#1
;;;529            break;
000056  e005              B        |L24.100|
                  |L24.88|
;;;530            /* mailbox1 transmit succeeded */
;;;531        case (CAN_TSTAT_MTF1 | CAN_TSTAT_MTFNERR1 | CAN_TSTAT_TME1):
;;;532            state = CAN_TRANSMIT_OK;
000058  2001              MOVS     r0,#1
;;;533            break;
00005a  e003              B        |L24.100|
                  |L24.92|
;;;534            /* mailbox2 transmit succeeded */
;;;535        case (CAN_TSTAT_MTF2 | CAN_TSTAT_MTFNERR2 | CAN_TSTAT_TME2):
;;;536            state = CAN_TRANSMIT_OK;
00005c  2001              MOVS     r0,#1
;;;537            break;
00005e  e001              B        |L24.100|
                  |L24.96|
;;;538            /* transmit failed */
;;;539        default: 
;;;540            state = CAN_TRANSMIT_FAILED;
000060  2000              MOVS     r0,#0
;;;541            break;
000062  bf00              NOP      
                  |L24.100|
000064  bf00              NOP                            ;525
;;;542        }
;;;543        return state;
;;;544    }
000066  bd30              POP      {r4,r5,pc}
;;;545    
                          ENDP

                  |L24.104|
                          DCD      0x04000003
                  |L24.108|
                          DCD      0x08000300
                  |L24.112|
                          DCD      0x10030000
                  |L24.116|
                          DCD      0xfbfffd03
                  |L24.120|
                          DCD      0xf7fd0300

                          AREA ||i.can_wakeup||, CODE, READONLY, ALIGN=1

                  can_wakeup PROC
;;;746    */
;;;747    ErrStatus can_wakeup(uint32_t can_periph)
000000  4601              MOV      r1,r0
;;;748    {
;;;749        ErrStatus flag = ERROR;
000002  2000              MOVS     r0,#0
;;;750        uint32_t timeout = CAN_TIMEOUT;
000004  f64f72ff          MOV      r2,#0xffff
;;;751        
;;;752        /* wakeup */
;;;753        CAN_CTL(can_periph) &= ~CAN_CTL_SLPWMOD;
000008  680b              LDR      r3,[r1,#0]
00000a  f0230302          BIC      r3,r3,#2
00000e  600b              STR      r3,[r1,#0]
;;;754        
;;;755        while((0U != (CAN_STAT(can_periph) & CAN_STAT_SLPWS)) && (0x00U != timeout)){
000010  e000              B        |L25.20|
                  |L25.18|
;;;756            timeout--;
000012  1e52              SUBS     r2,r2,#1
                  |L25.20|
000014  684b              LDR      r3,[r1,#4]            ;755
000016  f0030302          AND      r3,r3,#2              ;755
00001a  b10b              CBZ      r3,|L25.32|
00001c  2a00              CMP      r2,#0                 ;755
00001e  d1f8              BNE      |L25.18|
                  |L25.32|
;;;757        }
;;;758        /* check state */
;;;759        if(0U != (CAN_STAT(can_periph) & CAN_STAT_SLPWS)){
000020  684b              LDR      r3,[r1,#4]
000022  f0030302          AND      r3,r3,#2
000026  b10b              CBZ      r3,|L25.44|
;;;760            flag = ERROR;
000028  2000              MOVS     r0,#0
00002a  e000              B        |L25.46|
                  |L25.44|
;;;761        }else{
;;;762            flag = SUCCESS;
00002c  2001              MOVS     r0,#1
                  |L25.46|
;;;763        }
;;;764        return flag;
;;;765    }
00002e  4770              BX       lr
;;;766    
                          ENDP


                          AREA ||i.can_working_mode_set||, CODE, READONLY, ALIGN=1

                  can_working_mode_set PROC
;;;687    */
;;;688    ErrStatus can_working_mode_set(uint32_t can_periph, uint8_t working_mode)
000000  b510              PUSH     {r4,lr}
;;;689    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;690        ErrStatus flag = ERROR;
000006  2000              MOVS     r0,#0
;;;691        /* timeout for IWS or also for SLPWS bits */
;;;692        uint32_t timeout = CAN_TIMEOUT; 
000008  f64f71ff          MOV      r1,#0xffff
;;;693        
;;;694        if(CAN_MODE_INITIALIZE == working_mode){
00000c  2b01              CMP      r3,#1
00000e  d117              BNE      |L26.64|
;;;695            /* disable sleep mode */
;;;696            CAN_CTL(can_periph) &= (~(uint32_t)CAN_CTL_SLPWMOD);
000010  6814              LDR      r4,[r2,#0]
000012  f0240402          BIC      r4,r4,#2
000016  6014              STR      r4,[r2,#0]
;;;697            /* set initialize mode */
;;;698            CAN_CTL(can_periph) |= (uint8_t)CAN_CTL_IWMOD;
000018  6814              LDR      r4,[r2,#0]
00001a  f0440401          ORR      r4,r4,#1
00001e  6014              STR      r4,[r2,#0]
;;;699            /* wait the acknowledge */
;;;700            while((CAN_STAT_IWS != (CAN_STAT(can_periph) & CAN_STAT_IWS)) && (0U != timeout)){
000020  e000              B        |L26.36|
                  |L26.34|
;;;701                timeout--;
000022  1e49              SUBS     r1,r1,#1
                  |L26.36|
000024  6854              LDR      r4,[r2,#4]            ;700
000026  f0040401          AND      r4,r4,#1              ;700
00002a  b90c              CBNZ     r4,|L26.48|
00002c  2900              CMP      r1,#0                 ;700
00002e  d1f8              BNE      |L26.34|
                  |L26.48|
;;;702            }
;;;703            if(CAN_STAT_IWS != (CAN_STAT(can_periph) & CAN_STAT_IWS)){
000030  6854              LDR      r4,[r2,#4]
000032  f0040401          AND      r4,r4,#1
000036  b90c              CBNZ     r4,|L26.60|
;;;704                flag = ERROR;
000038  2000              MOVS     r0,#0
00003a  e034              B        |L26.166|
                  |L26.60|
;;;705            }else{
;;;706                flag = SUCCESS;
00003c  2001              MOVS     r0,#1
00003e  e032              B        |L26.166|
                  |L26.64|
;;;707            }
;;;708        }else if(CAN_MODE_NORMAL == working_mode){
000040  2b02              CMP      r3,#2
000042  d113              BNE      |L26.108|
;;;709            /* enter normal mode */
;;;710            CAN_CTL(can_periph) &= ~(uint32_t)(CAN_CTL_SLPWMOD | CAN_CTL_IWMOD);
000044  6814              LDR      r4,[r2,#0]
000046  f0240403          BIC      r4,r4,#3
00004a  6014              STR      r4,[r2,#0]
;;;711            /* wait the acknowledge */
;;;712            while((0U != (CAN_STAT(can_periph) & (CAN_STAT_IWS | CAN_STAT_SLPWS))) && (0U != timeout)){
00004c  e000              B        |L26.80|
                  |L26.78|
;;;713                timeout--;
00004e  1e49              SUBS     r1,r1,#1
                  |L26.80|
000050  6854              LDR      r4,[r2,#4]            ;712
000052  f0040403          AND      r4,r4,#3              ;712
000056  b10c              CBZ      r4,|L26.92|
000058  2900              CMP      r1,#0                 ;712
00005a  d1f8              BNE      |L26.78|
                  |L26.92|
;;;714            }
;;;715            if(0U != (CAN_STAT(can_periph) & (CAN_STAT_IWS | CAN_STAT_SLPWS))){
00005c  6854              LDR      r4,[r2,#4]
00005e  f0040403          AND      r4,r4,#3
000062  b10c              CBZ      r4,|L26.104|
;;;716                flag = ERROR;
000064  2000              MOVS     r0,#0
000066  e01e              B        |L26.166|
                  |L26.104|
;;;717            }else{
;;;718                flag = SUCCESS;
000068  2001              MOVS     r0,#1
00006a  e01c              B        |L26.166|
                  |L26.108|
;;;719            }
;;;720        }else if(CAN_MODE_SLEEP == working_mode){
00006c  2b04              CMP      r3,#4
00006e  d119              BNE      |L26.164|
;;;721            /* disable initialize mode */
;;;722            CAN_CTL(can_periph) &= (~(uint32_t)CAN_CTL_IWMOD);
000070  6814              LDR      r4,[r2,#0]
000072  f0240401          BIC      r4,r4,#1
000076  6014              STR      r4,[r2,#0]
;;;723            /* set sleep mode */
;;;724            CAN_CTL(can_periph) |= (uint8_t)CAN_CTL_SLPWMOD;
000078  6814              LDR      r4,[r2,#0]
00007a  f0440402          ORR      r4,r4,#2
00007e  6014              STR      r4,[r2,#0]
;;;725            /* wait the acknowledge */
;;;726            while((CAN_STAT_SLPWS != (CAN_STAT(can_periph) & CAN_STAT_SLPWS)) && (0U != timeout)){
000080  e000              B        |L26.132|
                  |L26.130|
;;;727                timeout--;
000082  1e49              SUBS     r1,r1,#1
                  |L26.132|
000084  6854              LDR      r4,[r2,#4]            ;726
000086  f0040402          AND      r4,r4,#2              ;726
00008a  2c02              CMP      r4,#2                 ;726
00008c  d001              BEQ      |L26.146|
00008e  2900              CMP      r1,#0                 ;726
000090  d1f7              BNE      |L26.130|
                  |L26.146|
;;;728            }
;;;729            if(CAN_STAT_SLPWS != (CAN_STAT(can_periph) & CAN_STAT_SLPWS)){
000092  6854              LDR      r4,[r2,#4]
000094  f0040402          AND      r4,r4,#2
000098  2c02              CMP      r4,#2
00009a  d001              BEQ      |L26.160|
;;;730                flag = ERROR;
00009c  2000              MOVS     r0,#0
00009e  e002              B        |L26.166|
                  |L26.160|
;;;731            }else{
;;;732                flag = SUCCESS;
0000a0  2001              MOVS     r0,#1
0000a2  e000              B        |L26.166|
                  |L26.164|
;;;733            }
;;;734        }else{
;;;735            flag = ERROR;
0000a4  2000              MOVS     r0,#0
                  |L26.166|
;;;736        }
;;;737        return flag;
;;;738    }
0000a6  bd10              POP      {r4,pc}
;;;739    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_can.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_can_c_a739e72c____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_can_c_a739e72c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_can_c_a739e72c____REVSH|
#line 128
|__asm___14_gd32f10x_can_c_a739e72c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
