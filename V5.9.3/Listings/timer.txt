; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\timer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\timer.crf User\timer.c]
                          THUMB

                          AREA ||i.TIMER1_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIMER1_IRQHandler PROC
;;;28     // 定时器x中断服务程序
;;;29     void TIMER1_IRQHandler(void) // TIMx硬件定时器中断矢量入口
000000  b510              PUSH     {r4,lr}
;;;30     {
;;;31     	if (timer_interrupt_flag_get(STM32_TIMERx_NUM_DEF, TIMER_INT_FLAG_UP) != RESET) // 检查TIMx更新中断发生与否
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       timer_interrupt_flag_get
00000a  b128              CBZ      r0,|L1.24|
;;;32     	{
;;;33     		// 清除TIMx更新中断标志
;;;34     		timer_interrupt_flag_clear(STM32_TIMERx_NUM_DEF, TIMER_INT_FLAG_UP);
00000c  2101              MOVS     r1,#1
00000e  0788              LSLS     r0,r1,#30
000010  f7fffffe          BL       timer_interrupt_flag_clear
;;;35     
;;;36     		// 定时器回调函数
;;;37     		TIMER_CALLBACK_OnTimer();
000014  f7fffffe          BL       TIMER_CALLBACK_OnTimer
                  |L1.24|
;;;38     	}
;;;39     }
000018  bd10              POP      {r4,pc}
;;;40     
                          ENDP


                          AREA ||i.TIMER_AddTask||, CODE, READONLY, ALIGN=2

                  TIMER_AddTask PROC
;;;86     
;;;87     BOOL TIMER_AddTask(TIMER_ID id, uint32 time, void (*action)(uint32 param), uint32 param, int32 actionTime, ACTION_MODE_E actionMode)
000000  b5f0              PUSH     {r4-r7,lr}
;;;88     {
000002  4604              MOV      r4,r0
000004  e9dd5605          LDRD     r5,r6,[sp,#0x14]
;;;89     	// 执行次数为0，不添加
;;;90     	if (0 == actionTime)
000008  b90d              CBNZ     r5,|L2.14|
;;;91     	{
;;;92     		return FALSE;
00000a  2000              MOVS     r0,#0
                  |L2.12|
;;;93     	}
;;;94     
;;;95     	timerCB.top[id] = time / TIMER_TIME;
;;;96     	timerCB.action[id] = action;
;;;97     	timerCB.param[id] = param;
;;;98     	timerCB.loopCount[id] = actionTime - 1; // 动作次数减1，即为重复次数
;;;99     	timerCB.count[id] = time / TIMER_TIME;	// 这条赋值语句放到最后，可以保证在前面参数设置OK以后才启动软件定时器
;;;100    	timerCB.actionMode[id] = actionMode;
;;;101    	timerCB.active[id] = TRUE;
;;;102    
;;;103    	return TRUE;
;;;104    }
00000c  bdf0              POP      {r4-r7,pc}
                  |L2.14|
00000e  2005              MOVS     r0,#5                 ;95
000010  fbb1f0f0          UDIV     r0,r1,r0              ;95
000014  4f0e              LDR      r7,|L2.80|
000016  f8470024          STR      r0,[r7,r4,LSL #2]     ;95
00001a  f1070090          ADD      r0,r7,#0x90           ;96
00001e  f8402024          STR      r2,[r0,r4,LSL #2]     ;96
000022  3048              ADDS     r0,r0,#0x48           ;97
000024  f8403024          STR      r3,[r0,r4,LSL #2]     ;97
000028  1e6f              SUBS     r7,r5,#1              ;98
00002a  3048              ADDS     r0,r0,#0x48           ;98
00002c  f8407024          STR      r7,[r0,r4,LSL #2]     ;98
000030  2005              MOVS     r0,#5                 ;99
000032  fbb1f7f0          UDIV     r7,r1,r0              ;99
000036  4806              LDR      r0,|L2.80|
000038  3048              ADDS     r0,r0,#0x48           ;99
00003a  f8407024          STR      r7,[r0,r4,LSL #2]     ;99
00003e  f5007090          ADD      r0,r0,#0x120          ;100
000042  5506              STRB     r6,[r0,r4]            ;100
000044  2701              MOVS     r7,#1                 ;101
000046  3012              ADDS     r0,r0,#0x12           ;101
000048  5507              STRB     r7,[r0,r4]            ;101
00004a  2001              MOVS     r0,#1                 ;103
00004c  e7de              B        |L2.12|
;;;105    
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      timerCB

                          AREA ||i.TIMER_AddToQueue||, CODE, READONLY, ALIGN=2

                  TIMER_AddToQueue PROC
;;;135    // 向定时器任务队列中添加一个任务
;;;136    BOOL TIMER_AddToQueue(void (*action)(uint32 param), uint32 param)
000000  b510              PUSH     {r4,lr}
;;;137    {
000002  4602              MOV      r2,r0
;;;138    	// 队列满，返回失败信息
;;;139    	if ((timerCB.queue.end + 1) % TIMER_TASK_QUEUE_SIZE == timerCB.queue.head)
000004  4819              LDR      r0,|L3.108|
000006  f8900205          LDRB     r0,[r0,#0x205]
00000a  1c40              ADDS     r0,r0,#1
00000c  230f              MOVS     r3,#0xf
00000e  fb90f4f3          SDIV     r4,r0,r3
000012  fb030314          MLS      r3,r3,r4,r0
000016  4815              LDR      r0,|L3.108|
000018  f8900204          LDRB     r0,[r0,#0x204]
00001c  4283              CMP      r3,r0
00001e  d101              BNE      |L3.36|
;;;140    	{
;;;141    		return FALSE;
000020  2000              MOVS     r0,#0
                  |L3.34|
;;;142    	}
;;;143    
;;;144    	// 队列未满，添加
;;;145    	timerCB.queue.task[timerCB.queue.end].action = action;
;;;146    	timerCB.queue.task[timerCB.queue.end].param = param;
;;;147    	timerCB.queue.end++;
;;;148    	timerCB.queue.end %= TIMER_TASK_QUEUE_SIZE;
;;;149    
;;;150    	return TRUE;
;;;151    }
000022  bd10              POP      {r4,pc}
                  |L3.36|
000024  4811              LDR      r0,|L3.108|
000026  f8903205          LDRB     r3,[r0,#0x205]        ;145
00002a  f50070c6          ADD      r0,r0,#0x18c          ;145
00002e  f8402033          STR      r2,[r0,r3,LSL #3]     ;145
000032  480e              LDR      r0,|L3.108|
000034  f8903205          LDRB     r3,[r0,#0x205]        ;146
000038  f50070c6          ADD      r0,r0,#0x18c          ;146
00003c  eb0000c3          ADD      r0,r0,r3,LSL #3       ;146
000040  6041              STR      r1,[r0,#4]            ;146
000042  480a              LDR      r0,|L3.108|
000044  f8900205          LDRB     r0,[r0,#0x205]        ;147
000048  1c40              ADDS     r0,r0,#1              ;147
00004a  b2c3              UXTB     r3,r0                 ;147
00004c  4807              LDR      r0,|L3.108|
00004e  f8803205          STRB     r3,[r0,#0x205]        ;147
000052  f8900205          LDRB     r0,[r0,#0x205]        ;148
000056  230f              MOVS     r3,#0xf               ;148
000058  fb90f4f3          SDIV     r4,r0,r3              ;148
00005c  fb030014          MLS      r0,r3,r4,r0           ;148
000060  b2c3              UXTB     r3,r0                 ;148
000062  4802              LDR      r0,|L3.108|
000064  f8803205          STRB     r3,[r0,#0x205]        ;148
000068  2001              MOVS     r0,#1                 ;150
00006a  e7da              B        |L3.34|
;;;152    
                          ENDP

                  |L3.108|
                          DCD      timerCB

                          AREA ||i.TIMER_CALLBACK_OnTimer||, CODE, READONLY, ALIGN=2

                  TIMER_CALLBACK_OnTimer PROC
;;;176    
;;;177    void TIMER_CALLBACK_OnTimer(void)
000000  b510              PUSH     {r4,lr}
;;;178    {
;;;179    	uint8 i;
;;;180    	for (i = 0; i < TIMER_ID_MAX; i++)
000002  2400              MOVS     r4,#0
000004  e04b              B        |L4.158|
                  |L4.6|
;;;181    	{
;;;182    		// 计数值大于0，说明当前定时器处于活动状态，需要进行处理
;;;183    		if (timerCB.count[i] > 0)
000006  4827              LDR      r0,|L4.164|
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  2800              CMP      r0,#0
00000e  d043              BEQ      |L4.152|
;;;184    		{
;;;185    			// 跳过被暂停的定时器
;;;186    			if (!timerCB.active[i])
000010  4825              LDR      r0,|L4.168|
000012  5d00              LDRB     r0,[r0,r4]
000014  b900              CBNZ     r0,|L4.24|
;;;187    			{
;;;188    				continue;
000016  e040              B        |L4.154|
                  |L4.24|
;;;189    			}
;;;190    
;;;191    			// 计数值递减
;;;192    			timerCB.count[i]--;
000018  4822              LDR      r0,|L4.164|
00001a  f8501024          LDR      r1,[r0,r4,LSL #2]
00001e  1e49              SUBS     r1,r1,#1
000020  f8401024          STR      r1,[r0,r4,LSL #2]
;;;193    			// 计数值为0，说明软件定时器时间到
;;;194    			if (0 == timerCB.count[i])
000024  f8500024          LDR      r0,[r0,r4,LSL #2]
000028  bb60              CBNZ     r0,|L4.132|
;;;195    			{
;;;196    
;;;197    				// 如果是无限循环，则无条件重新设置计数初值
;;;198    				if (timerCB.loopCount[i] < 0)
00002a  481f              LDR      r0,|L4.168|
00002c  385a              SUBS     r0,r0,#0x5a
00002e  f8500024          LDR      r0,[r0,r4,LSL #2]
000032  2800              CMP      r0,#0
000034  da07              BGE      |L4.70|
;;;199    				{
;;;200    					timerCB.count[i] = timerCB.top[i];
000036  481b              LDR      r0,|L4.164|
000038  3848              SUBS     r0,r0,#0x48
00003a  f8501024          LDR      r1,[r0,r4,LSL #2]
00003e  3048              ADDS     r0,r0,#0x48
000040  f8401024          STR      r1,[r0,r4,LSL #2]
000044  e012              B        |L4.108|
                  |L4.70|
;;;201    				}
;;;202    				// 有限循环
;;;203    				else if (timerCB.loopCount[i] > 0)
000046  4818              LDR      r0,|L4.168|
000048  385a              SUBS     r0,r0,#0x5a
00004a  f8500024          LDR      r0,[r0,r4,LSL #2]
00004e  2800              CMP      r0,#0
000050  dd0c              BLE      |L4.108|
;;;204    				{
;;;205    					timerCB.count[i] = timerCB.top[i];
000052  4814              LDR      r0,|L4.164|
000054  3848              SUBS     r0,r0,#0x48
000056  f8501024          LDR      r1,[r0,r4,LSL #2]
00005a  3048              ADDS     r0,r0,#0x48
00005c  f8401024          STR      r1,[r0,r4,LSL #2]
;;;206    
;;;207    					// 剩余循环次数递减
;;;208    					timerCB.loopCount[i]--;
000060  30d8              ADDS     r0,r0,#0xd8
000062  f8501024          LDR      r1,[r0,r4,LSL #2]
000066  1e49              SUBS     r1,r1,#1
000068  f8401024          STR      r1,[r0,r4,LSL #2]
                  |L4.108|
;;;209    				}
;;;210    				// 循环次数为0，不予重复，当前软件定时器资源释放
;;;211    				else
;;;212    				{
;;;213    				}
;;;214    
;;;215    				// 执行模式为立即执行，则在中断中执行动作
;;;216    				if (ACTION_MODE_DO_AT_ONCE == timerCB.actionMode[i])
00006c  480e              LDR      r0,|L4.168|
00006e  3812              SUBS     r0,r0,#0x12
000070  5d00              LDRB     r0,[r0,r4]
000072  b940              CBNZ     r0,|L4.134|
;;;217    				{
;;;218    					(*timerCB.action[i])(timerCB.param[i]);
000074  4a0b              LDR      r2,|L4.164|
000076  3290              ADDS     r2,r2,#0x90
000078  f8520024          LDR      r0,[r2,r4,LSL #2]
00007c  3a48              SUBS     r2,r2,#0x48
00007e  f8521024          LDR      r1,[r2,r4,LSL #2]
000082  4788              BLX      r1
                  |L4.132|
000084  e008              B        |L4.152|
                  |L4.134|
;;;219    				}
;;;220    				// 其它模式，添加到任务队列中，在中断外执行
;;;221    				else
;;;222    				{
;;;223    					TIMER_AddToQueue(timerCB.action[i], timerCB.param[i]);
000086  4a07              LDR      r2,|L4.164|
000088  3290              ADDS     r2,r2,#0x90
00008a  f8521024          LDR      r1,[r2,r4,LSL #2]
00008e  3a48              SUBS     r2,r2,#0x48
000090  f8520024          LDR      r0,[r2,r4,LSL #2]
000094  f7fffffe          BL       TIMER_AddToQueue
                  |L4.152|
000098  bf00              NOP                            ;188
                  |L4.154|
00009a  1c60              ADDS     r0,r4,#1              ;180
00009c  b2c4              UXTB     r4,r0                 ;180
                  |L4.158|
00009e  2c12              CMP      r4,#0x12              ;180
0000a0  dbb1              BLT      |L4.6|
;;;224    				}
;;;225    			}
;;;226    		}
;;;227    	}
;;;228    }
0000a2  bd10              POP      {r4,pc}
;;;229    
                          ENDP

                  |L4.164|
                          DCD      timerCB+0x48
                  |L4.168|
                          DCD      timerCB+0x17a

                          AREA ||i.TIMER_ChangeTime||, CODE, READONLY, ALIGN=2

                  TIMER_ChangeTime PROC
;;;276    // 改变指定定时器定时时间
;;;277    BOOL TIMER_ChangeTime(TIMER_ID id, uint32 time)
000000  4602              MOV      r2,r0
;;;278    {
;;;279    	timerCB.top[id] = time / TIMER_TIME;
000002  2005              MOVS     r0,#5
000004  fbb1f0f0          UDIV     r0,r1,r0
000008  4b05              LDR      r3,|L5.32|
00000a  f8430022          STR      r0,[r3,r2,LSL #2]
;;;280    	timerCB.count[id] = time / TIMER_TIME;
00000e  2005              MOVS     r0,#5
000010  fbb1f3f0          UDIV     r3,r1,r0
000014  4802              LDR      r0,|L5.32|
000016  3048              ADDS     r0,r0,#0x48
000018  f8403022          STR      r3,[r0,r2,LSL #2]
;;;281    
;;;282    	return TRUE;
00001c  2001              MOVS     r0,#1
;;;283    }
00001e  4770              BX       lr
                          ENDP

                  |L5.32|
                          DCD      timerCB

                          AREA ||i.TIMER_DoNothing||, CODE, READONLY, ALIGN=1

                  TIMER_DoNothing PROC
;;;58     
;;;59     void TIMER_DoNothing(uint32 param)
000000  4770              BX       lr
;;;60     {
;;;61     }
;;;62     
                          ENDP


                          AREA ||i.TIMER_Init||, CODE, READONLY, ALIGN=2

                  TIMER_Init PROC
;;;62     
;;;63     void TIMER_Init(void)
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65     	TIMER_ID i;
;;;66     
;;;67     	for (i = (TIMER_ID)0; i < TIMER_ID_MAX; i++)
000002  2400              MOVS     r4,#0
000004  e019              B        |L7.58|
                  |L7.6|
;;;68     	{
;;;69     		timerCB.count[i] = 0;
000006  2100              MOVS     r1,#0
000008  4813              LDR      r0,|L7.88|
00000a  f8401024          STR      r1,[r0,r4,LSL #2]
;;;70     		timerCB.top[i] = 0;
00000e  2000              MOVS     r0,#0
000010  4911              LDR      r1,|L7.88|
000012  3948              SUBS     r1,r1,#0x48
000014  f8410024          STR      r0,[r1,r4,LSL #2]
;;;71     		timerCB.action[i] = TIMER_DoNothing;
000018  4910              LDR      r1,|L7.92|
00001a  480f              LDR      r0,|L7.88|
00001c  3048              ADDS     r0,r0,#0x48
00001e  f8401024          STR      r1,[r0,r4,LSL #2]
;;;72     		timerCB.param[i] = 0;
000022  2100              MOVS     r1,#0
000024  3048              ADDS     r0,r0,#0x48
000026  f8401024          STR      r1,[r0,r4,LSL #2]
;;;73     		timerCB.loopCount[i] = 0;
00002a  3048              ADDS     r0,r0,#0x48
00002c  f8401024          STR      r1,[r0,r4,LSL #2]
;;;74     		timerCB.active[i] = TRUE;
000030  2101              MOVS     r1,#1
000032  305a              ADDS     r0,r0,#0x5a
000034  5501              STRB     r1,[r0,r4]
000036  1c60              ADDS     r0,r4,#1              ;67
000038  b244              SXTB     r4,r0                 ;67
                  |L7.58|
00003a  2c12              CMP      r4,#0x12              ;67
00003c  dbe3              BLT      |L7.6|
;;;75     	}
;;;76     
;;;77     	timerCB.queue.head = 0;
00003e  2100              MOVS     r1,#0
000040  4805              LDR      r0,|L7.88|
000042  3848              SUBS     r0,r0,#0x48
000044  f8801204          STRB     r1,[r0,#0x204]
;;;78     	timerCB.queue.end = 0;
000048  f8801205          STRB     r1,[r0,#0x205]
;;;79     
;;;80     	// 硬件定时器x初始化
;;;81     	TIMER_InitTimerx();
00004c  f7fffffe          BL       TIMER_InitTimerx
;;;82     
;;;83     	// 启动定时器x
;;;84     	TIMER_StartTimerx();
000050  f7fffffe          BL       TIMER_StartTimerx
;;;85     }
000054  bd10              POP      {r4,pc}
;;;86     
                          ENDP

000056  0000              DCW      0x0000
                  |L7.88|
                          DCD      timerCB+0x48
                  |L7.92|
                          DCD      TIMER_DoNothing

                          AREA ||i.TIMER_InitTimerx||, CODE, READONLY, ALIGN=1

                  TIMER_InitTimerx PROC
;;;41     // 初始化定时器
;;;42     void TIMER_InitTimerx(void)
000000  b510              PUSH     {r4,lr}
;;;43     {
;;;44     	TIMx_INT_Init(9, 35999); // (35999+1) / 72MHz * (9+1) =  5ms
000002  f648419f          MOV      r1,#0x8c9f
000006  2009              MOVS     r0,#9
000008  f7fffffe          BL       TIMx_INT_Init
;;;45     }
00000c  bd10              POP      {r4,pc}
;;;46     
                          ENDP


                          AREA ||i.TIMER_KillAllTimer||, CODE, READONLY, ALIGN=2

                  TIMER_KillAllTimer PROC
;;;252    // 注销所有定时器
;;;253    void TIMER_KillAllTimer(void)
000000  2000              MOVS     r0,#0
;;;254    {
;;;255    	TIMER_ID i;
;;;256    
;;;257    	for (i = (TIMER_ID)0; i < TIMER_ID_MAX; i++)
000002  e00c              B        |L9.30|
                  |L9.4|
;;;258    	{
;;;259    		timerCB.count[i] = 0;
000004  2200              MOVS     r2,#0
000006  4907              LDR      r1,|L9.36|
000008  f8412020          STR      r2,[r1,r0,LSL #2]
;;;260    		timerCB.loopCount[i] = 0;
00000c  31d8              ADDS     r1,r1,#0xd8
00000e  f8412020          STR      r2,[r1,r0,LSL #2]
;;;261    		timerCB.queue.task[i].action = TIMER_DoNothing;
000012  4a05              LDR      r2,|L9.40|
000014  316c              ADDS     r1,r1,#0x6c
000016  f8412030          STR      r2,[r1,r0,LSL #3]
00001a  1c41              ADDS     r1,r0,#1              ;257
00001c  b248              SXTB     r0,r1                 ;257
                  |L9.30|
00001e  2812              CMP      r0,#0x12              ;257
000020  dbf0              BLT      |L9.4|
;;;262    	}
;;;263    }
000022  4770              BX       lr
;;;264    
                          ENDP

                  |L9.36|
                          DCD      timerCB+0x48
                  |L9.40|
                          DCD      TIMER_DoNothing

                          AREA ||i.TIMER_KillTask||, CODE, READONLY, ALIGN=2

                  TIMER_KillTask PROC
;;;106    // 销毁定时器任务
;;;107    void TIMER_KillTask(TIMER_ID id)
000000  4601              MOV      r1,r0
;;;108    {
;;;109    	uint8 i;
;;;110    
;;;111    	if ((TIMER_ID_NULL == id) || (id >= TIMER_ID_MAX))
000002  f1b13fff          CMP      r1,#0xffffffff
000006  d001              BEQ      |L10.12|
000008  2912              CMP      r1,#0x12
00000a  db00              BLT      |L10.14|
                  |L10.12|
;;;112    	{
;;;113    		return;
;;;114    	}
;;;115    
;;;116    	// 计数值清零，即可将当前软件定时器释放
;;;117    	timerCB.count[id] = 0; // 这条赋值语句放到最前，可以保证在第一时间停止软件定时器
;;;118    
;;;119    	// 同时要删除已添加入任务队列的任务
;;;120    	i = timerCB.queue.head;
;;;121    	while (i != timerCB.queue.end)
;;;122    	{
;;;123    		// 队列中有当前定时器对应的任务，就删除
;;;124    		if ((timerCB.queue.task[i].action == timerCB.action[id]) &&
;;;125    			(timerCB.queue.task[i].param == timerCB.param[id]))
;;;126    		{
;;;127    			timerCB.queue.task[i].action = TIMER_DoNothing;
;;;128    		}
;;;129    
;;;130    		i++;
;;;131    		i %= TIMER_TASK_QUEUE_SIZE;
;;;132    	}
;;;133    }
00000c  4770              BX       lr
                  |L10.14|
00000e  2300              MOVS     r3,#0                 ;117
000010  4a16              LDR      r2,|L10.108|
000012  f8423021          STR      r3,[r2,r1,LSL #2]     ;117
000016  3a48              SUBS     r2,r2,#0x48           ;120
000018  f8920204          LDRB     r0,[r2,#0x204]        ;120
00001c  e01d              B        |L10.90|
                  |L10.30|
00001e  4a14              LDR      r2,|L10.112|
000020  f8523030          LDR      r3,[r2,r0,LSL #3]     ;124
000024  3afc              SUBS     r2,r2,#0xfc           ;124
000026  f8522021          LDR      r2,[r2,r1,LSL #2]     ;124
00002a  4293              CMP      r3,r2                 ;124
00002c  d10d              BNE      |L10.74|
00002e  4a10              LDR      r2,|L10.112|
000030  eb0202c0          ADD      r2,r2,r0,LSL #3       ;125
000034  6853              LDR      r3,[r2,#4]            ;125
000036  4a0d              LDR      r2,|L10.108|
000038  3290              ADDS     r2,r2,#0x90           ;125
00003a  f8522021          LDR      r2,[r2,r1,LSL #2]     ;125
00003e  4293              CMP      r3,r2                 ;125
000040  d103              BNE      |L10.74|
000042  4b0c              LDR      r3,|L10.116|
000044  4a0a              LDR      r2,|L10.112|
000046  f8423030          STR      r3,[r2,r0,LSL #3]     ;127
                  |L10.74|
00004a  1c42              ADDS     r2,r0,#1              ;130
00004c  b2d0              UXTB     r0,r2                 ;130
00004e  220f              MOVS     r2,#0xf               ;131
000050  fb90f3f2          SDIV     r3,r0,r2              ;131
000054  fb020213          MLS      r2,r2,r3,r0           ;131
000058  b2d0              UXTB     r0,r2                 ;131
                  |L10.90|
00005a  4a04              LDR      r2,|L10.108|
00005c  3a48              SUBS     r2,r2,#0x48           ;121
00005e  f8922205          LDRB     r2,[r2,#0x205]        ;121
000062  4282              CMP      r2,r0                 ;121
000064  d1db              BNE      |L10.30|
000066  bf00              NOP      
000068  e7d0              B        |L10.12|
;;;134    
                          ENDP

00006a  0000              DCW      0x0000
                  |L10.108|
                          DCD      timerCB+0x48
                  |L10.112|
                          DCD      timerCB+0x18c
                  |L10.116|
                          DCD      TIMER_DoNothing

                          AREA ||i.TIMER_Pause||, CODE, READONLY, ALIGN=2

                  TIMER_Pause PROC
;;;230    // 暂停指定的定时器
;;;231    void TIMER_Pause(TIMER_ID id)
000000  f1b03fff          CMP      r0,#0xffffffff
;;;232    {
;;;233    	if ((TIMER_ID_NULL == id) || (id >= TIMER_ID_MAX))
000004  d001              BEQ      |L11.10|
000006  2812              CMP      r0,#0x12
000008  db00              BLT      |L11.12|
                  |L11.10|
;;;234    	{
;;;235    		return;
;;;236    	}
;;;237    
;;;238    	timerCB.active[id] = FALSE;
;;;239    }
00000a  4770              BX       lr
                  |L11.12|
00000c  2200              MOVS     r2,#0                 ;238
00000e  4902              LDR      r1,|L11.24|
000010  540a              STRB     r2,[r1,r0]            ;238
000012  bf00              NOP      
000014  e7f9              B        |L11.10|
;;;240    
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      timerCB+0x17a

                          AREA ||i.TIMER_ResetTimer||, CODE, READONLY, ALIGN=2

                  TIMER_ResetTimer PROC
;;;265    // 复位定时器，重新开始
;;;266    void TIMER_ResetTimer(TIMER_ID id)
000000  f1b03fff          CMP      r0,#0xffffffff
;;;267    {
;;;268    	if ((TIMER_ID_NULL == id) || (id >= TIMER_ID_MAX))
000004  d001              BEQ      |L12.10|
000006  2812              CMP      r0,#0x12
000008  db00              BLT      |L12.12|
                  |L12.10|
;;;269    	{
;;;270    		return;
;;;271    	}
;;;272    
;;;273    	timerCB.count[id] = timerCB.top[id];
;;;274    }
00000a  4770              BX       lr
                  |L12.12|
00000c  4903              LDR      r1,|L12.28|
00000e  f8512020          LDR      r2,[r1,r0,LSL #2]     ;273
000012  3148              ADDS     r1,r1,#0x48           ;273
000014  f8412020          STR      r2,[r1,r0,LSL #2]     ;273
000018  bf00              NOP      
00001a  e7f6              B        |L12.10|
;;;275    
                          ENDP

                  |L12.28|
                          DCD      timerCB

                          AREA ||i.TIMER_Resume||, CODE, READONLY, ALIGN=2

                  TIMER_Resume PROC
;;;241    // 恢复指定的定时器
;;;242    void TIMER_Resume(TIMER_ID id)
000000  f1b03fff          CMP      r0,#0xffffffff
;;;243    {
;;;244    	if ((TIMER_ID_NULL == id) || (id >= TIMER_ID_MAX))
000004  d001              BEQ      |L13.10|
000006  2812              CMP      r0,#0x12
000008  db00              BLT      |L13.12|
                  |L13.10|
;;;245    	{
;;;246    		return;
;;;247    	}
;;;248    
;;;249    	timerCB.active[id] = TRUE;
;;;250    }
00000a  4770              BX       lr
                  |L13.12|
00000c  2201              MOVS     r2,#1                 ;249
00000e  4902              LDR      r1,|L13.24|
000010  540a              STRB     r2,[r1,r0]            ;249
000012  bf00              NOP      
000014  e7f9              B        |L13.10|
;;;251    
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      timerCB+0x17a

                          AREA ||i.TIMER_StartTimerx||, CODE, READONLY, ALIGN=1

                  TIMER_StartTimerx PROC
;;;47     // 启动硬件定时器
;;;48     void TIMER_StartTimerx(void)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50     	timer_enable(STM32_TIMERx_NUM_DEF);
000002  f04f4080          MOV      r0,#0x40000000
000006  f7fffffe          BL       timer_enable
;;;51     }
00000a  bd10              POP      {r4,pc}
;;;52     
                          ENDP


                          AREA ||i.TIMER_StopTimerx||, CODE, READONLY, ALIGN=1

                  TIMER_StopTimerx PROC
;;;53     // 停止硬件定时器
;;;54     void TIMER_StopTimerx(void)
000000  b510              PUSH     {r4,lr}
;;;55     {
;;;56     	timer_disable(STM32_TIMERx_NUM_DEF);
000002  f04f4080          MOV      r0,#0x40000000
000006  f7fffffe          BL       timer_disable
;;;57     }
00000a  bd10              POP      {r4,pc}
;;;58     
                          ENDP


                          AREA ||i.TIMER_TaskQueueProcess||, CODE, READONLY, ALIGN=2

                  TIMER_TaskQueueProcess PROC
;;;153    // 定时器任务队列处理，在main中调用
;;;154    void TIMER_TaskQueueProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;155    {
;;;156    	void (*action)(uint32 param) = NULL;
000002  2600              MOVS     r6,#0
;;;157    	uint32 param;
;;;158    	TIMER_TASK *pTask = NULL;
000004  2500              MOVS     r5,#0
;;;159    
;;;160    	// 队列空，退出
;;;161    	if (timerCB.queue.head == timerCB.queue.end)
000006  4814              LDR      r0,|L16.88|
000008  f8901204          LDRB     r1,[r0,#0x204]
00000c  f8900205          LDRB     r0,[r0,#0x205]
000010  4281              CMP      r1,r0
000012  d100              BNE      |L16.22|
                  |L16.20|
;;;162    	{
;;;163    		return;
;;;164    	}
;;;165    
;;;166    	// 队列非空，取出head处的任务执行之
;;;167    	pTask = &timerCB.queue.task[timerCB.queue.head];
;;;168    	action = pTask->action;
;;;169    	param = pTask->param;
;;;170    	(*action)(param);
;;;171    
;;;172    	// 删除任务
;;;173    	timerCB.queue.head++;
;;;174    	timerCB.queue.head %= TIMER_TASK_QUEUE_SIZE;
;;;175    }
000014  bd70              POP      {r4-r6,pc}
                  |L16.22|
000016  4810              LDR      r0,|L16.88|
000018  f8901204          LDRB     r1,[r0,#0x204]        ;167
00001c  f50070c6          ADD      r0,r0,#0x18c          ;167
000020  eb0005c1          ADD      r5,r0,r1,LSL #3       ;167
000024  682e              LDR      r6,[r5,#0]            ;168
000026  686c              LDR      r4,[r5,#4]            ;169
000028  4620              MOV      r0,r4                 ;170
00002a  47b0              BLX      r6                    ;170
00002c  480a              LDR      r0,|L16.88|
00002e  f8900204          LDRB     r0,[r0,#0x204]        ;173
000032  1c40              ADDS     r0,r0,#1              ;173
000034  b2c1              UXTB     r1,r0                 ;173
000036  4808              LDR      r0,|L16.88|
000038  f8801204          STRB     r1,[r0,#0x204]        ;173
00003c  f8900204          LDRB     r0,[r0,#0x204]        ;174
000040  210f              MOVS     r1,#0xf               ;174
000042  fb90f2f1          SDIV     r2,r0,r1              ;174
000046  fb010012          MLS      r0,r1,r2,r0           ;174
00004a  b2c1              UXTB     r1,r0                 ;174
00004c  4802              LDR      r0,|L16.88|
00004e  f8801204          STRB     r1,[r0,#0x204]        ;174
000052  bf00              NOP      
000054  e7de              B        |L16.20|
;;;176    
                          ENDP

000056  0000              DCW      0x0000
                  |L16.88|
                          DCD      timerCB

                          AREA ||i.TIMx_INT_Init||, CODE, READONLY, ALIGN=1

                  TIMx_INT_Init PROC
;;;6      // 定时器硬件底层初始化
;;;7      void TIMx_INT_Init(uint16 arr, uint16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;8      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;9      	timer_parameter_struct timer_initpara;
;;;10     
;;;11     	rcu_periph_clock_enable(RCU_TIMER1); // 时钟使能
000006  f44f60e0          MOV      r0,#0x700
00000a  f7fffffe          BL       rcu_periph_clock_enable
;;;12     	timer_deinit(STM32_TIMERx_NUM_DEF);
00000e  f04f4080          MOV      r0,#0x40000000
000012  f7fffffe          BL       timer_deinit
;;;13     
;;;14     	timer_initpara.prescaler = psc;
000016  f8ad5000          STRH     r5,[sp,#0]
;;;15     	timer_initpara.alignedmode = TIMER_COUNTER_EDGE;
00001a  2000              MOVS     r0,#0
00001c  f8ad0002          STRH     r0,[sp,#2]
;;;16     	timer_initpara.counterdirection = TIMER_COUNTER_UP;
000020  f8ad0004          STRH     r0,[sp,#4]
;;;17     	timer_initpara.period = arr;
000024  9402              STR      r4,[sp,#8]
;;;18     	timer_initpara.clockdivision = TIMER_CKDIV_DIV1;
000026  f8ad000c          STRH     r0,[sp,#0xc]
;;;19     	timer_initpara.repetitioncounter = 0;
00002a  f88d000e          STRB     r0,[sp,#0xe]
;;;20     	timer_init(STM32_TIMERx_NUM_DEF, &timer_initpara);
00002e  4669              MOV      r1,sp
000030  f04f4080          MOV      r0,#0x40000000
000034  f7fffffe          BL       timer_init
;;;21     
;;;22     	timer_flag_clear(STM32_TIMERx_NUM_DEF, TIMER_FLAG_UP);		// 清除溢出中断标志
000038  2101              MOVS     r1,#1
00003a  0788              LSLS     r0,r1,#30
00003c  f7fffffe          BL       timer_flag_clear
;;;23     	timer_interrupt_enable(STM32_TIMERx_NUM_DEF, TIMER_INT_UP); // 使能指定的TIM1中断,允许更新中断
000040  2101              MOVS     r1,#1
000042  0788              LSLS     r0,r1,#30
000044  f7fffffe          BL       timer_interrupt_enable
;;;24     
;;;25     	nvic_irq_enable(STM32_TIMERx_IRQn_DEF, 2, 2); // 设置中断优先级
000048  2202              MOVS     r2,#2
00004a  4611              MOV      r1,r2
00004c  201c              MOVS     r0,#0x1c
00004e  f7fffffe          BL       nvic_irq_enable
;;;26     }
000052  bd7f              POP      {r0-r6,pc}
;;;27     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  timerCB
                          %        520

;*** Start embedded assembler ***

#line 1 "User\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_769cd868____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___7_timer_c_769cd868____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_769cd868____REVSH|
#line 128
|__asm___7_timer_c_769cd868____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
