; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\armprotocol.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\armprotocol.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\armprotocol.crf User\ArmProtocol.c]
                          THUMB

                          AREA ||i.ARM_PROTOCOL_CheckSUM||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_CheckSUM PROC
;;;435    // 对传入的命令帧进行校验，返回校验结果
;;;436    BOOL ARM_PROTOCOL_CheckSUM(ARM_PROTOCOL_RX_CMD_FRAME *pCmdFrame)
000000  b510              PUSH     {r4,lr}
;;;437    {
000002  4601              MOV      r1,r0
;;;438        uint8 cc = 0;
000004  2200              MOVS     r2,#0
;;;439        uint16 i = 0;
000006  2300              MOVS     r3,#0
;;;440    
;;;441        if (NULL == pCmdFrame)
000008  b909              CBNZ     r1,|L1.14|
;;;442        {
;;;443            return FALSE;
00000a  2000              MOVS     r0,#0
                  |L1.12|
;;;444        }
;;;445    
;;;446        // 从命令头开始，到校验码之前的一个字节，依次进行异或运算
;;;447        for (i = 0; i < pCmdFrame->length - 1; i++)
;;;448        {
;;;449            cc ^= pCmdFrame->buff[i];
;;;450        }
;;;451    
;;;452        cc = ~cc;
;;;453    
;;;454        // 判断计算得到的校验码与命令帧中的校验码是否相同
;;;455        if (pCmdFrame->buff[pCmdFrame->length - 1] != cc)
;;;456        {
;;;457            return FALSE;
;;;458        }
;;;459    
;;;460        return TRUE;
;;;461    }
00000c  bd10              POP      {r4,pc}
                  |L1.14|
00000e  2300              MOVS     r3,#0                 ;447
000010  e004              B        |L1.28|
                  |L1.18|
000012  1c88              ADDS     r0,r1,#2              ;449
000014  5cc0              LDRB     r0,[r0,r3]            ;449
000016  4042              EORS     r2,r2,r0              ;449
000018  1c58              ADDS     r0,r3,#1              ;447
00001a  b283              UXTH     r3,r0                 ;447
                  |L1.28|
00001c  f8b10098          LDRH     r0,[r1,#0x98]         ;447
000020  1e40              SUBS     r0,r0,#1              ;447
000022  4298              CMP      r0,r3                 ;447
000024  dcf5              BGT      |L1.18|
000026  43d0              MVNS     r0,r2                 ;452
000028  b2c2              UXTB     r2,r0                 ;452
00002a  f8b10098          LDRH     r0,[r1,#0x98]         ;455
00002e  1e40              SUBS     r0,r0,#1              ;455
000030  1c8c              ADDS     r4,r1,#2              ;455
000032  5c20              LDRB     r0,[r4,r0]            ;455
000034  4290              CMP      r0,r2                 ;455
000036  d001              BEQ      |L1.60|
000038  2000              MOVS     r0,#0                 ;457
00003a  e7e7              B        |L1.12|
                  |L1.60|
00003c  2001              MOVS     r0,#1                 ;460
00003e  e7e5              B        |L1.12|
;;;462    
                          ENDP


                          AREA ||i.ARM_PROTOCOL_CmdFrameProcess||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_CmdFrameProcess PROC
;;;756     // ARM命令帧缓冲区处理
;;;757    void ARM_PROTOCOL_CmdFrameProcess(ARM_PROTOCOL_CB *pCB)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;758    {
000004  b09b              SUB      sp,sp,#0x6c
000006  4605              MOV      r5,r0
;;;759        ARM_PROTOCOL_CMD cmd = ARM_CMD_MAX;
000008  2036              MOVS     r0,#0x36
00000a  901a              STR      r0,[sp,#0x68]
;;;760        ARM_PROTOCOL_RX_CMD_FRAME *pCmdFrame = NULL;
00000c  2400              MOVS     r4,#0
;;;761    
;;;762        BOOL writeRes;
;;;763    
;;;764        // 我的变量
;;;765        uint8 versionBoot[3] = {0};
00000e  2000              MOVS     r0,#0
000010  9019              STR      r0,[sp,#0x64]
;;;766        uint8 versionApp[3] = {0};
000012  9018              STR      r0,[sp,#0x60]
;;;767    
;;;768        uint8 upItem = 0;
000014  9017              STR      r0,[sp,#0x5c]
;;;769        uint8 clearItem = 0;
000016  9016              STR      r0,[sp,#0x58]
;;;770        uint8 dutAll[50] = {0};
000018  2134              MOVS     r1,#0x34
00001a  a809              ADD      r0,sp,#0x24
00001c  f7fffffe          BL       __aeabi_memclr4
;;;771        uint8 dutName_i = 0;
000020  46a0              MOV      r8,r4
;;;772        uint8 packetSize = 0;
000022  2000              MOVS     r0,#0
000024  9008              STR      r0,[sp,#0x20]
;;;773        uint8 addr1 = 0;
000026  4681              MOV      r9,r0
;;;774        uint8 addr2 = 0;
000028  4682              MOV      r10,r0
;;;775        uint8 addr3 = 0;
00002a  9007              STR      r0,[sp,#0x1c]
;;;776        uint8 addr4 = 0;
00002c  4683              MOV      r11,r0
;;;777        uint32 writeAddr = 0;
00002e  2600              MOVS     r6,#0
;;;778        static uint32 allPacketSize = 0;
;;;779        static uint8 allPacket[4] = {0};
;;;780        uint8 dataLen = 0;
000030  9006              STR      r0,[sp,#0x18]
;;;781        uint8 endItem = 0;
000032  9005              STR      r0,[sp,#0x14]
;;;782        uint8 ctrlState = 0;
000034  9004              STR      r0,[sp,#0x10]
;;;783        uint8 dut_info_len = 0;
000036  9003              STR      r0,[sp,#0xc]
;;;784        uint8 size[4] = {0};
000038  9002              STR      r0,[sp,#8]
;;;785        static uint32 currPacketNum = 0xFFFF;
;;;786    
;;;787        // 参数合法性检验
;;;788        if (NULL == pCB)
00003a  b915              CBNZ     r5,|L2.66|
                  |L2.60|
;;;789        {
;;;790            return;
;;;791        }
;;;792    
;;;793        // 命令帧缓冲区为空，退出
;;;794        if (pCB->rx.head == pCB->rx.end)
;;;795        {
;;;796            return;
;;;797        }
;;;798    
;;;799        // 获取当前要处理的命令帧指针
;;;800        pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.head];
;;;801    
;;;802        // 命令头非法，退出
;;;803        if (ARM_PROTOCOL_CMD_HEAD != pCmdFrame->buff[ARM_PROTOCOL_CMD_HEAD_INDEX])
;;;804        {
;;;805            // 删除命令帧
;;;806            pCB->rx.head++;
;;;807            pCB->rx.head %= ARM_PROTOCOL_RX_QUEUE_SIZE;
;;;808            return;
;;;809        }
;;;810    
;;;811        // 命令头合法，则提取命令
;;;812        cmd = (ARM_PROTOCOL_CMD)pCmdFrame->buff[ARM_PROTOCOL_CMD_CMD_INDEX];
;;;813    
;;;814        // 执行命令帧
;;;815        switch (cmd)
;;;816        {
;;;817        // 获取烧录器工具信息
;;;818        case UART_ARM_CMD_GET_TOOL_INFO:                                         // 0x10,
;;;819            SPI_FLASH_ReadArray(versionBoot, SPI_FLASH_BOOT_VERSION_ADDEESS, 3); // 获取BOOT版本
;;;820            SPI_FLASH_ReadArray(versionApp, SPI_FLASH_APP_VERSION_ADDEESS, 3);   // 获取APP版本
;;;821            ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);                       // 添加命令头
;;;822            ARM_PROTOCOL_TxAddData(UART_ARM_CMD_GET_TOOL_INFO);                  // 添加命令字
;;;823            ARM_PROTOCOL_TxAddData(0x00);                                        // 数据长度临时为0
;;;824            ARM_PROTOCOL_TxAddData(versionBoot[0]);                              // 添加BOOT版本
;;;825            ARM_PROTOCOL_TxAddData(versionBoot[1]);
;;;826            ARM_PROTOCOL_TxAddData(versionBoot[2]);
;;;827            ARM_PROTOCOL_TxAddData(versionApp[0]); // 添加APP版本
;;;828            ARM_PROTOCOL_TxAddData(versionApp[1]);
;;;829            ARM_PROTOCOL_TxAddData(versionApp[2]);
;;;830            ARM_PROTOCOL_TxAddFrame(); // 设置数据长度和添加校验
;;;831            break;
;;;832    
;;;833        // 烧录器工具升级开始
;;;834        case UART_ARM_CMD_TOOL_UP_BEGIN: // 0x11,
;;;835            // 擦除片外flash，大概要1s钟
;;;836            SPI_FLASH_EraseRoom(SPI_FLASH_TOOL_APP_ADDEESS, 256 * 1024); // 256k
;;;837            // 返回信息给安卓机
;;;838            allPacketSize = 0;
;;;839            ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_UP_BEGIN, TRUE);
;;;840            break;
;;;841    
;;;842        // 烧录器工具数据写入
;;;843        case UART_ARM_CMD_TOOL_WRITE_DATA: // 0x12,
;;;844            // 向片外flash写入安卓机发送的数据
;;;845            packetSize = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;846            addr1 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;847            addr2 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;848            addr3 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX];
;;;849            addr4 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX];
;;;850            writeAddr = (addr1 << 24) | (addr2 << 16) | (addr3 << 8) | (addr4);
;;;851    
;;;852            // 指向要写入的数据缓冲区的指针pBuffer，一个表示写入地址的无符号32位整数WriteAddr，以及一个表示要写入的字节数的无符号16位整数NumByteToWrite。
;;;853            writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_TOOL_APP_ADDEESS + writeAddr, packetSize);
;;;854    
;;;855            // 返回信息给安卓机
;;;856            ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_WRITE_DATA, writeRes);
;;;857            allPacketSize++;
;;;858            break;
;;;859    
;;;860        // 烧录器工具升级结束
;;;861        case UART_ARM_CMD_TOOL_UP_END: // 0x13,
;;;862            // 发送升级成功应答
;;;863            // 设置升级标志位标志
;;;864            allPacket[0] = allPacketSize >> 24;
;;;865            allPacket[1] = allPacketSize >> 16;
;;;866            allPacket[2] = allPacketSize >> 8;
;;;867            allPacket[3] = allPacketSize;
;;;868    
;;;869            SPI_FLASH_EraseSector(SPI_FLASH_TOOL_UPDATA_FLAG_ADDEESS); // 擦除标志位存储区
;;;870            SPI_FLASH_EraseSector(SPI_FLASH_TOOL_APP_DATA_SIZE);       // 擦除大小存储区
;;;871    
;;;872            SPI_FLASH_WriteByte(SPI_FLASH_TOOL_UPDATA_FLAG_ADDEESS, 0xAA);
;;;873            SPI_FLASH_WriteArray(allPacket, SPI_FLASH_TOOL_APP_DATA_SIZE, 4);
;;;874    
;;;875            ARM_PROTOCOL_SendCmdAck(UART_ARM_CMD_TOOL_UP_END);
;;;876    
;;;877            /*100ms后跳转回BOOT，读取标志位，然后替换替换工具APP区*/
;;;878            TIMER_AddTask(TIMER_ID_TOOL_APP_TO_BOOT,
;;;879                          100,
;;;880                          IAP_JumpToAppFun,
;;;881                          IAP_GD32_FLASH_BASE,
;;;882                          1,
;;;883                          ACTION_MODE_ADD_TO_QUEUE);
;;;884            break;
;;;885    
;;;886        // 升级DUT控制命令
;;;887        case UART_ARM_CMD_TOOL_DUT_UP: // 0x14,
;;;888            upItem = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;889            ctrlState = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;890    
;;;891            // 设置要升级的项
;;;892            setUpItem(upItem, ctrlState);
;;;893    
;;;894            // 设置进度上报信息
;;;895            setDutProgressReportInfo();
;;;896    
;;;897            // 根据升级信息，进入不同的状态机
;;;898            enterState();
;;;899    
;;;900            // 应答
;;;901            ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_DUT_UP, TRUE);
;;;902            break;
;;;903    
;;;904        // DUT升级进度上报
;;;905        case UART_ARM_CMD_TOOL_DUT_PROCESS: // 0x15,
;;;906            break;
;;;907    
;;;908        // 清空升级缓冲区
;;;909        case UART_ARM_CMD_TOOL_CLEAR_BUFF: // 0x16,
;;;910    
;;;911            clearItem = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;912    
;;;913            if (0x01 == (clearItem & 0x01))
;;;914            {
;;;915                /*擦除片外的dut_boot区*/
;;;916                dut_info.bootSize = 0;
;;;917                SPI_FLASH_EraseRoom(SPI_FLASH_DUT_BOOT_ADDEESS, 128 * 1024); // 128k
;;;918            }
;;;919            if (0x02 == (clearItem & 0x02))
;;;920            {
;;;921                /*擦除片外的dut_app区*/
;;;922                dut_info.appSize = 0;
;;;923                SPI_FLASH_EraseRoom(SPI_FLASH_DUT_APP_ADDEESS, 1024 * 1024); // 1M
;;;924            }
;;;925            if (0x04 == (clearItem & 0x04))
;;;926            {
;;;927                /*擦除片外的dut_ui区*/
;;;928                dut_info.uiSize = 0;
;;;929                SPI_FLASH_EraseRoom(SPI_FLASH_DUT_UI_ADDEESS, 14 * 1024 * 1024); // 14M
;;;930            }
;;;931            if (0x08 == (clearItem & 0x08))
;;;932            {
;;;933                /*擦除片外的dut_config区*/
;;;934                SPI_FLASH_EraseSector(SPI_FLASH_DUT_CONFIG_ADDEESS); // 4k
;;;935            }
;;;936            SPI_FLASH_EraseSector(SPI_FLASH_DUT_INFO); // 擦除dut机型信息
;;;937            ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_CLEAR_BUFF, TRUE);
;;;938            break;
;;;939    
;;;940        // 烧录器写入DUT机型信息
;;;941        case UART_ARM_CMD_TOOL_SET_DUT_INFO: // 0x17,
;;;942            dut_info_len = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 6;
;;;943    
;;;944            for (dutName_i = 0; dutName_i < dut_info_len; dutName_i++)
;;;945            {
;;;946                dutAll[dutName_i] = pCmdFrame->buff[dutName_i + 6 + 3];
;;;947            }
;;;948            dutAll[20] = dut_info_len;                                  // 长度
;;;949            dutAll[21] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX]; // 电压
;;;950            dutAll[22] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX]; // 通讯类型
;;;951            dutAll[23] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX]; // bootType
;;;952            dutAll[24] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX]; // appType
;;;953            dutAll[25] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX]; // uiType
;;;954            dutAll[26] = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA6_INDEX]; // configType
;;;955    
;;;956            /* 将机型信息写入到片外flash */
;;;957            SPI_FLASH_EraseSector(SPI_FLASH_DUT_INFO);
;;;958            writeRes = SPI_FLASH_WriteWithCheck(dutAll, SPI_FLASH_DUT_INFO, 30);
;;;959    
;;;960            if (writeRes)
;;;961            {
;;;962                DutInfoUpdata(); // 更新dutinfo数据
;;;963                if (dut_info.voltage)// 更新电压数据
;;;964                {
;;;965                    DutVol_24();
;;;966                }
;;;967                else
;;;968                {
;;;969                    DutVol_12();
;;;970                }
;;;971            }
;;;972            /* 返回信息给安卓机 */
;;;973            ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_SET_DUT_INFO, writeRes);
;;;974            break;
;;;975    
;;;976        // 获取烧录器记录的DUT机型信息
;;;977        case UART_ARM_CMD_TOOL_GET_DUT_INFO: // 0x18
;;;978            SPI_FLASH_ReadArray(dutAll, SPI_FLASH_DUT_INFO, 30);
;;;979            if (0xFF == dutAll[20]) // 机型为空
;;;980            {
;;;981                dutAll[20] = 10;
;;;982            }
;;;983            ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);           // 添加命令头
;;;984            ARM_PROTOCOL_TxAddData(UART_ARM_CMD_TOOL_GET_DUT_INFO);  // 添加命令字
;;;985            ARM_PROTOCOL_TxAddData(0x00);                            // 数据长度临时为0
;;;986            ARM_PROTOCOL_TxAddData(dutAll[21]);                      // 添加电压
;;;987            ARM_PROTOCOL_TxAddData(dutAll[22]);                      // 添加通讯类型
;;;988            ARM_PROTOCOL_TxAddData(dutAll[23]);                      // bootType
;;;989            ARM_PROTOCOL_TxAddData(dutAll[24]);                      // appType
;;;990            ARM_PROTOCOL_TxAddData(dutAll[25]);                      // uiType
;;;991            ARM_PROTOCOL_TxAddData(dutAll[26]);                      // configType
;;;992            for (dutName_i = 0; dutName_i < dutAll[20]; dutName_i++) // 添加机型信息
;;;993            {
;;;994                ARM_PROTOCOL_TxAddData(dutAll[dutName_i]);
;;;995            }
;;;996            ARM_PROTOCOL_TxAddFrame(); // 设置数据长度和添加校验
;;;997            break;
;;;998    
;;;999        // 0x19:设置工具序列号
;;;1000       case UART_ARM_CMD_SET_TOOL_RANK:
;;;1001           SPI_FLASH_EraseSector(SPI_FLASH_TOOL_RANK_ADDEESS); // 擦除序号存储区
;;;1002           dut_info.toolRank = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;1003           SPI_FLASH_WriteByte(SPI_FLASH_TOOL_RANK_ADDEESS, dut_info.toolRank); // 写入序号
;;;1004           ARM_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_SET_TOOL_RANK, 0x01);      // 设置数据长度和添加校验
;;;1005           break;
;;;1006   
;;;1007       // 0x20:获取工具序列号
;;;1008       case UART_ARM_CMD_GET_TOOL_RANK:
;;;1009           dut_info.toolRank = SPI_FLASH_ReadByte(SPI_FLASH_TOOL_RANK_ADDEESS);
;;;1010           ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);      // 添加命令头
;;;1011           ARM_PROTOCOL_TxAddData(UART_ARM_CMD_GET_TOOL_RANK); // 添加命令字
;;;1012           ARM_PROTOCOL_TxAddData(0x00);                       // 添加临时长度
;;;1013           ARM_PROTOCOL_TxAddData(dut_info.toolRank);
;;;1014           ARM_PROTOCOL_TxAddFrame();
;;;1015           break;
;;;1016   
;;;1017       // 写入DUT参数（命令字=0x30
;;;1018       case UART_DUT_CMD_UP_CONFIG:
;;;1019           // 读取配置信息的flash区，然后写入DUT
;;;1020           dataLen = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX];
;;;1021           writeRes = SPI_FLASH_WriteWithCheck(&(pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX]), SPI_FLASH_DUT_CONFIG_ADDEESS, dataLen);
;;;1022           // 返回信息给安卓机
;;;1023           ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_CONFIG, writeRes);
;;;1024           break;
;;;1025   
;;;1026       case UART_DUT_CMD_UP_UI: // UI数据写入（命令字=0x31）
;;;1027               
;;;1028           // 适配BC281维乐高 UI数据分区
;;;1029           if(DUT_NAME_BC281EVL == dut_info.nam)
;;;1030           {
;;;1031               // 读取UI的flash区，然后写入DUT  4 + 128
;;;1032               packetSize = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX];
;;;1033               addr1 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;1034               addr2 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;1035               addr3 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX];
;;;1036               addr4 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX];
;;;1037               writeAddr = (addr1 << 24) | (addr2 << 16) | (addr3 << 8) | (addr4);
;;;1038               if (currPacketNum != writeAddr)
;;;1039               {
;;;1040                   dut_info.uiSize++;
;;;1041                   currPacketNum = writeAddr;
;;;1042               }
;;;1043               
;;;1044               uint16 i = 0;
;;;1045               if(packetSize != 132)
;;;1046               {
;;;1047                   for(i = (pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] + 2) ; i < 135 ;i++)
;;;1048                   {
;;;1049                     pCmdFrame->buff[i + 1] = 0xFF;
;;;1050                   }
;;;1051               }
;;;1052               
;;;1053               // 写入4 + 128 减1 从基地址开始写
;;;1054               writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX], SPI_FLASH_DUT_UI_ADDEESS + ((dut_info.uiSize - 1) * 132), 132);        
;;;1055                
;;;1056   //            if((writeAddr == 0x002F9100) || (writeAddr == 0x00000000))
;;;1057   //            {            
;;;1058   //                // 读取验证
;;;1059   //                   SPI_FLASH_ReadArray(uiBuff, SPI_FLASH_DUT_UI_ADDEESS + ((dut_info.uiSize - 1) * 132), 132);
;;;1060   //            }
;;;1061           }
;;;1062           else
;;;1063           {
;;;1064               // 读取UI的flash区，然后写入DUT
;;;1065               packetSize = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;1066               addr1 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;1067               addr2 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;1068               addr3 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX];
;;;1069               addr4 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX];
;;;1070               writeAddr = (addr1 << 24) | (addr2 << 16) | (addr3 << 8) | (addr4);
;;;1071               if (currPacketNum != writeAddr)
;;;1072               {
;;;1073                   dut_info.uiSize++;
;;;1074                   currPacketNum = writeAddr;
;;;1075               }
;;;1076               writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_DUT_UI_ADDEESS + writeAddr, packetSize);
;;;1077           }
;;;1078           
;;;1079           // 返回信息给安卓机
;;;1080           ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_UI, writeRes);
;;;1081           break;
;;;1082   
;;;1083       // BOOT数据写入（命令字=0x32）
;;;1084       case UART_DUT_CMD_UP_BOOT:
;;;1085   
;;;1086           // 读取BOOT的flash区，然后写入DUT
;;;1087           packetSize = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;1088           addr1 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;1089           addr2 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;1090           addr3 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX];
;;;1091           addr4 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX];
;;;1092           writeAddr = (addr1 << 24) | (addr2 << 16) | (addr3 << 8) | (addr4);
;;;1093   
;;;1094           if (currPacketNum != writeAddr)
;;;1095           {
;;;1096               dut_info.bootSize++;
;;;1097               currPacketNum = writeAddr;
;;;1098           }
;;;1099           writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_DUT_BOOT_ADDEESS + writeAddr, packetSize);
;;;1100   
;;;1101           // 返回信息给安卓机
;;;1102           ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_BOOT, writeRes);
;;;1103           break;
;;;1104   
;;;1105       // APP数据写入（命令字=0x33）
;;;1106       case UART_DUT_CMD_UP_APP:
;;;1107           packetSize = pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;1108           dut_info.iotLastPackDateLen = packetSize;
;;;1109           addr1 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;1110           addr2 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA2_INDEX];
;;;1111           addr3 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA3_INDEX];
;;;1112           addr4 = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA4_INDEX];
;;;1113           writeAddr = (addr1 << 24) | (addr2 << 16) | (addr3 << 8) | (addr4);
;;;1114           if (currPacketNum != writeAddr)
;;;1115           {
;;;1116               dut_info.appSize++;
;;;1117               currPacketNum = writeAddr;
;;;1118           }
;;;1119           writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_DUT_APP_ADDEESS + writeAddr, packetSize);
;;;1120           ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_APP, writeRes);
;;;1121           break;
;;;1122   
;;;1123       // 升级项结束（命令字=0x34）
;;;1124       case UART_DUT_CMD_UP_END:
;;;1125           endItem = pCmdFrame->buff[ARM_PROTOCOL_CMD_DATA1_INDEX];
;;;1126   
;;;1127           switch (endItem)
;;;1128           {
;;;1129           case 0:
;;;1130               SPI_FLASH_EraseSector(SPI_FLASH_DUT_BOOT_SIZE_ADDEESS);
;;;1131               size[0] = dut_info.bootSize >> 24;
;;;1132               size[1] = dut_info.bootSize >> 16;
;;;1133               size[2] = dut_info.bootSize >> 8;
;;;1134               size[3] = dut_info.bootSize;
;;;1135               SPI_FLASH_WriteArray(size, SPI_FLASH_DUT_BOOT_SIZE_ADDEESS, 4);
;;;1136               break;
;;;1137   
;;;1138           case 1:
;;;1139               SPI_FLASH_EraseSector(SPI_FLASH_DUT_APP_SIZE_ADDEESS);
;;;1140               size[0] = dut_info.appSize >> 24;
;;;1141               size[1] = dut_info.appSize >> 16;
;;;1142               size[2] = dut_info.appSize >> 8;
;;;1143               size[3] = dut_info.appSize;
;;;1144               SPI_FLASH_WriteArray(size, SPI_FLASH_DUT_APP_SIZE_ADDEESS, 4);
;;;1145               break;
;;;1146   
;;;1147           case 2:
;;;1148               SPI_FLASH_EraseSector(SPI_FLASH_DUT_UI_SIZE_ADDEESS);
;;;1149               size[0] = dut_info.uiSize >> 24;
;;;1150               size[1] = dut_info.uiSize >> 16;
;;;1151               size[2] = dut_info.uiSize >> 8;
;;;1152               size[3] = dut_info.uiSize;
;;;1153               SPI_FLASH_WriteArray(size, SPI_FLASH_DUT_UI_SIZE_ADDEESS, 4);
;;;1154               break;
;;;1155           }
;;;1156           currPacketNum = 0xFFFF;
;;;1157           
;;;1158           // 适配IOT
;;;1159           if(DUT_TYPE_IOT == dut_info.ID)
;;;1160           {
;;;1161               // BC550iot升级用
;;;1162               dut_info.iotAppUpDataLen = ((dut_info.appSize - 1) * 128) + dut_info.iotLastPackDateLen;
;;;1163               dut_info.iotCrc8 = SPI_FlashReadForCrc8(((dut_info.appSize - 1) * 128) + dut_info.iotLastPackDateLen);
;;;1164               SPI_FLASH_EraseSector(SPI_FLASH_IOT_APP_UP_DATA_LEN);
;;;1165               SPI_FLASH_WriteWord(SPI_FLASH_IOT_APP_UP_DATA_LEN, dut_info.iotAppUpDataLen);
;;;1166               SPI_FLASH_EraseSector(SPI_FLASH_IOT_CRC8);
;;;1167               SPI_FLASH_WriteWord(SPI_FLASH_IOT_CRC8, dut_info.iotCrc8);  
;;;1168           }
;;;1169           
;;;1170           // 返回信息给安卓机
;;;1171           ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_END, endItem);
;;;1172           break;
;;;1173   
;;;1174       // UI版本号写入
;;;1175       case UART_DUT_CMD_UP_UI_VER:
;;;1176           SPI_FLASH_EraseSector(SPI_FLASH_UI_VERSION_ADDEESS);
;;;1177           writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX], SPI_FLASH_UI_VERSION_ADDEESS, pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] + 1);
;;;1178   
;;;1179           // 返回信息给安卓机
;;;1180           ARM_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_UI_VER, writeRes);
;;;1181           break;
;;;1182   
;;;1183       default:
;;;1184           break;
;;;1185       }
;;;1186   
;;;1187       // 删除命令帧
;;;1188       pCB->rx.head++;
;;;1189       pCB->rx.head %= ARM_PROTOCOL_RX_QUEUE_SIZE;
;;;1190   }
00003c  b01b              ADD      sp,sp,#0x6c
00003e  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.66|
000042  f8b51434          LDRH     r1,[r5,#0x434]        ;794
000046  f8b50436          LDRH     r0,[r5,#0x436]        ;794
00004a  4281              CMP      r1,r0                 ;794
00004c  d100              BNE      |L2.80|
00004e  e7f5              B        |L2.60|
                  |L2.80|
000050  f8b50434          LDRH     r0,[r5,#0x434]        ;800
000054  214d              MOVS     r1,#0x4d              ;800
000056  4348              MULS     r0,r1,r0              ;800
000058  f5057199          ADD      r1,r5,#0x132          ;800
00005c  eb010440          ADD      r4,r1,r0,LSL #1       ;800
000060  78a0              LDRB     r0,[r4,#2]            ;803
000062  2855              CMP      r0,#0x55              ;803
000064  d00e              BEQ      |L2.132|
000066  f8b50434          LDRH     r0,[r5,#0x434]        ;806
00006a  1c40              ADDS     r0,r0,#1              ;806
00006c  f8a50434          STRH     r0,[r5,#0x434]        ;806
000070  f8b50434          LDRH     r0,[r5,#0x434]        ;807
000074  2105              MOVS     r1,#5                 ;807
000076  fb90f2f1          SDIV     r2,r0,r1              ;807
00007a  fb010012          MLS      r0,r1,r2,r0           ;807
00007e  f8a50434          STRH     r0,[r5,#0x434]        ;807
000082  e7db              B        |L2.60|
                  |L2.132|
000084  78e0              LDRB     r0,[r4,#3]            ;812
000086  901a              STR      r0,[sp,#0x68]         ;812
000088  981a              LDR      r0,[sp,#0x68]         ;815
00008a  2818              CMP      r0,#0x18              ;815
00008c  d07e              BEQ      |L2.396|
00008e  dc09              BGT      |L2.164|
000090  f1a00010          SUB      r0,r0,#0x10           ;815
000094  2808              CMP      r0,#8                 ;815
000096  d27a              BCS      |L2.398|
000098  e8dff000          TBB      [pc,r0]               ;815
00009c  17465382          DCB      0x17,0x46,0x53,0x82
0000a0  afc0c1fd          DCB      0xaf,0xc0,0xc1,0xfd
                  |L2.164|
0000a4  2832              CMP      r0,#0x32              ;815
0000a6  d073              BEQ      |L2.400|
0000a8  dc08              BGT      |L2.188|
0000aa  2819              CMP      r0,#0x19              ;815
0000ac  d071              BEQ      |L2.402|
0000ae  281a              CMP      r0,#0x1a              ;815
0000b0  d070              BEQ      |L2.404|
0000b2  2830              CMP      r0,#0x30              ;815
0000b4  d06f              BEQ      |L2.406|
0000b6  2831              CMP      r0,#0x31              ;815
                  |L2.184|
0000b8  d169              BNE      |L2.398|
0000ba  e1ac              B        |L2.1046|
                  |L2.188|
0000bc  2833              CMP      r0,#0x33              ;815
0000be  d06b              BEQ      |L2.408|
0000c0  2834              CMP      r0,#0x34              ;815
0000c2  d06a              BEQ      |L2.410|
0000c4  2835              CMP      r0,#0x35              ;815
0000c6  d1f7              BNE      |L2.184|
0000c8  e326              B        |L2.1816|
0000ca  2203              MOVS     r2,#3                 ;819
0000cc  f44f11b2          MOV      r1,#0x164000          ;819
0000d0  a819              ADD      r0,sp,#0x64           ;819
0000d2  f7fffffe          BL       SPI_FLASH_ReadArray
0000d6  2203              MOVS     r2,#3                 ;820
0000d8  49fe              LDR      r1,|L2.1236|
0000da  a818              ADD      r0,sp,#0x60           ;820
0000dc  f7fffffe          BL       SPI_FLASH_ReadArray
0000e0  2055              MOVS     r0,#0x55              ;821
0000e2  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0000e6  2010              MOVS     r0,#0x10              ;822
0000e8  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0000ec  2000              MOVS     r0,#0                 ;823
0000ee  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0000f2  f89d0064          LDRB     r0,[sp,#0x64]         ;824
0000f6  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0000fa  f89d0065          LDRB     r0,[sp,#0x65]         ;825
0000fe  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000102  f89d0066          LDRB     r0,[sp,#0x66]         ;826
000106  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00010a  f89d0060          LDRB     r0,[sp,#0x60]         ;827
00010e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000112  f89d0061          LDRB     r0,[sp,#0x61]         ;828
000116  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00011a  f89d0062          LDRB     r0,[sp,#0x62]         ;829
00011e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000122  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
000126  e309              B        |L2.1852|
000128  f44f2180          MOV      r1,#0x40000           ;836
00012c  2000              MOVS     r0,#0                 ;836
00012e  f7fffffe          BL       SPI_FLASH_EraseRoom
000132  2000              MOVS     r0,#0                 ;838
000134  49e8              LDR      r1,|L2.1240|
000136  6008              STR      r0,[r1,#0]            ;838  ; allPacketSize
000138  2101              MOVS     r1,#1                 ;839
00013a  2011              MOVS     r0,#0x11              ;839
00013c  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000140  e2fc              B        |L2.1852|
000142  7920              LDRB     r0,[r4,#4]            ;845
000144  1f00              SUBS     r0,r0,#4              ;845
000146  b2c0              UXTB     r0,r0                 ;845
000148  9008              STR      r0,[sp,#0x20]         ;845
00014a  f8949005          LDRB     r9,[r4,#5]            ;846
00014e  f894a006          LDRB     r10,[r4,#6]           ;847
000152  79e0              LDRB     r0,[r4,#7]            ;848
000154  9007              STR      r0,[sp,#0x1c]         ;848
000156  f894b008          LDRB     r11,[r4,#8]           ;849
00015a  ea4f6009          LSL      r0,r9,#24             ;850
00015e  ea40410a          ORR      r1,r0,r10,LSL #16     ;850
000162  9807              LDR      r0,[sp,#0x1c]         ;850
000164  ea412000          ORR      r0,r1,r0,LSL #8       ;850
000168  ea40060b          ORR      r6,r0,r11             ;850
00016c  4631              MOV      r1,r6                 ;853
00016e  f1040009          ADD      r0,r4,#9              ;853
000172  9a08              LDR      r2,[sp,#0x20]         ;853
000174  f7fffffe          BL       SPI_FLASH_WriteWithCheck
000178  4607              MOV      r7,r0                 ;853
00017a  4639              MOV      r1,r7                 ;856
00017c  2012              MOVS     r0,#0x12              ;856
00017e  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000182  48d5              LDR      r0,|L2.1240|
000184  6800              LDR      r0,[r0,#0]            ;857  ; allPacketSize
000186  1c40              ADDS     r0,r0,#1              ;857
000188  49d3              LDR      r1,|L2.1240|
00018a  e007              B        |L2.412|
                  |L2.396|
00018c  e0cc              B        |L2.808|
                  |L2.398|
00018e  e2d4              B        |L2.1850|
                  |L2.400|
000190  e1c9              B        |L2.1318|
                  |L2.402|
000192  e109              B        |L2.936|
                  |L2.404|
000194  e11a              B        |L2.972|
                  |L2.406|
000196  e130              B        |L2.1018|
                  |L2.408|
000198  e1f2              B        |L2.1408|
                  |L2.410|
00019a  e222              B        |L2.1506|
                  |L2.412|
00019c  6008              STR      r0,[r1,#0]            ;857  ; allPacketSize
00019e  e2cd              B        |L2.1852|
0001a0  48cd              LDR      r0,|L2.1240|
0001a2  6800              LDR      r0,[r0,#0]            ;864  ; allPacketSize
0001a4  0e00              LSRS     r0,r0,#24             ;864
0001a6  49cd              LDR      r1,|L2.1244|
0001a8  7008              STRB     r0,[r1,#0]            ;864
0001aa  48cb              LDR      r0,|L2.1240|
0001ac  6800              LDR      r0,[r0,#0]            ;865  ; allPacketSize
0001ae  0c00              LSRS     r0,r0,#16             ;865
0001b0  7048              STRB     r0,[r1,#1]            ;865
0001b2  48c9              LDR      r0,|L2.1240|
0001b4  8800              LDRH     r0,[r0,#0]            ;866  ; allPacketSize
0001b6  0a00              LSRS     r0,r0,#8              ;866
0001b8  7088              STRB     r0,[r1,#2]            ;866
0001ba  48c7              LDR      r0,|L2.1240|
0001bc  7800              LDRB     r0,[r0,#0]            ;867  ; allPacketSize
0001be  70c8              STRB     r0,[r1,#3]            ;867
0001c0  48c7              LDR      r0,|L2.1248|
0001c2  f7fffffe          BL       SPI_FLASH_EraseSector
0001c6  f44f10b1          MOV      r0,#0x162000          ;870
0001ca  f7fffffe          BL       SPI_FLASH_EraseSector
0001ce  21aa              MOVS     r1,#0xaa              ;872
0001d0  48c3              LDR      r0,|L2.1248|
0001d2  f7fffffe          BL       SPI_FLASH_WriteByte
0001d6  2204              MOVS     r2,#4                 ;873
0001d8  f44f11b1          MOV      r1,#0x162000          ;873
0001dc  48bf              LDR      r0,|L2.1244|
0001de  f7fffffe          BL       SPI_FLASH_WriteArray
0001e2  2013              MOVS     r0,#0x13              ;875
0001e4  f7fffffe          BL       ARM_PROTOCOL_SendCmdAck
0001e8  2001              MOVS     r0,#1                 ;878
0001ea  9000              STR      r0,[sp,#0]            ;878
0001ec  06c3              LSLS     r3,r0,#27             ;878
0001ee  4abd              LDR      r2,|L2.1252|
0001f0  2164              MOVS     r1,#0x64              ;878
0001f2  9001              STR      r0,[sp,#4]            ;878
0001f4  f7fffffe          BL       TIMER_AddTask
0001f8  e2a0              B        |L2.1852|
0001fa  7960              LDRB     r0,[r4,#5]            ;888
0001fc  9017              STR      r0,[sp,#0x5c]         ;888
0001fe  79a0              LDRB     r0,[r4,#6]            ;889
000200  9004              STR      r0,[sp,#0x10]         ;889
000202  9904              LDR      r1,[sp,#0x10]         ;892
000204  9817              LDR      r0,[sp,#0x5c]         ;892
000206  f7fffffe          BL       setUpItem
00020a  f7fffffe          BL       setDutProgressReportInfo
00020e  f7fffffe          BL       enterState
000212  2101              MOVS     r1,#1                 ;901
000214  2014              MOVS     r0,#0x14              ;901
000216  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
00021a  e28f              B        |L2.1852|
00021c  e28e              B        |L2.1852|
00021e  7960              LDRB     r0,[r4,#5]            ;911
000220  9016              STR      r0,[sp,#0x58]         ;911
000222  9816              LDR      r0,[sp,#0x58]         ;913
000224  f0000001          AND      r0,r0,#1              ;913
000228  b138              CBZ      r0,|L2.570|
00022a  2000              MOVS     r0,#0                 ;916
00022c  49ae              LDR      r1,|L2.1256|
00022e  6208              STR      r0,[r1,#0x20]         ;916  ; dut_info
000230  f44f3100          MOV      r1,#0x20000           ;917
000234  0048              LSLS     r0,r1,#1              ;917
000236  f7fffffe          BL       SPI_FLASH_EraseRoom
                  |L2.570|
00023a  9816              LDR      r0,[sp,#0x58]         ;919
00023c  f0000002          AND      r0,r0,#2              ;919
000240  2802              CMP      r0,#2                 ;919
000242  d108              BNE      |L2.598|
000244  2000              MOVS     r0,#0                 ;922
000246  49a8              LDR      r1,|L2.1256|
000248  6248              STR      r0,[r1,#0x24]         ;922  ; dut_info
00024a  f44f1180          MOV      r1,#0x100000          ;923
00024e  f44f20c0          MOV      r0,#0x60000           ;923
000252  f7fffffe          BL       SPI_FLASH_EraseRoom
                  |L2.598|
000256  9816              LDR      r0,[sp,#0x58]         ;925
000258  f0000004          AND      r0,r0,#4              ;925
00025c  2804              CMP      r0,#4                 ;925
00025e  d108              BNE      |L2.626|
000260  2000              MOVS     r0,#0                 ;928
000262  49a1              LDR      r1,|L2.1256|
000264  6288              STR      r0,[r1,#0x28]         ;928  ; dut_info
000266  f44f0160          MOV      r1,#0xe00000          ;929
00026a  f44f1000          MOV      r0,#0x200000          ;929
00026e  f7fffffe          BL       SPI_FLASH_EraseRoom
                  |L2.626|
000272  9816              LDR      r0,[sp,#0x58]         ;931
000274  f0000008          AND      r0,r0,#8              ;931
000278  2808              CMP      r0,#8                 ;931
00027a  d103              BNE      |L2.644|
00027c  f44f10b0          MOV      r0,#0x160000          ;934
000280  f7fffffe          BL       SPI_FLASH_EraseSector
                  |L2.644|
000284  4899              LDR      r0,|L2.1260|
000286  f7fffffe          BL       SPI_FLASH_EraseSector
00028a  2101              MOVS     r1,#1                 ;937
00028c  2016              MOVS     r0,#0x16              ;937
00028e  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000292  e253              B        |L2.1852|
000294  e7ff              B        |L2.662|
                  |L2.662|
000296  7920              LDRB     r0,[r4,#4]            ;942
000298  1f80              SUBS     r0,r0,#6              ;942
00029a  b2c0              UXTB     r0,r0                 ;942
00029c  9003              STR      r0,[sp,#0xc]          ;942
00029e  f04f0800          MOV      r8,#0                 ;944
0002a2  e00a              B        |L2.698|
                  |L2.676|
0002a4  1ca1              ADDS     r1,r4,#2              ;946
0002a6  f1080009          ADD      r0,r8,#9              ;946
0002aa  5c08              LDRB     r0,[r1,r0]            ;946
0002ac  a909              ADD      r1,sp,#0x24           ;946
0002ae  f8010008          STRB     r0,[r1,r8]            ;946
0002b2  f1080001          ADD      r0,r8,#1              ;944
0002b6  f00008ff          AND      r8,r0,#0xff           ;944
                  |L2.698|
0002ba  9803              LDR      r0,[sp,#0xc]          ;944
0002bc  4580              CMP      r8,r0                 ;944
0002be  dbf1              BLT      |L2.676|
0002c0  9803              LDR      r0,[sp,#0xc]          ;948
0002c2  f88d0038          STRB     r0,[sp,#0x38]         ;948
0002c6  7960              LDRB     r0,[r4,#5]            ;949
0002c8  f88d0039          STRB     r0,[sp,#0x39]         ;949
0002cc  79a0              LDRB     r0,[r4,#6]            ;950
0002ce  f88d003a          STRB     r0,[sp,#0x3a]         ;950
0002d2  79e0              LDRB     r0,[r4,#7]            ;951
0002d4  f88d003b          STRB     r0,[sp,#0x3b]         ;951
0002d8  7a20              LDRB     r0,[r4,#8]            ;952
0002da  f88d003c          STRB     r0,[sp,#0x3c]         ;952
0002de  7a60              LDRB     r0,[r4,#9]            ;953
0002e0  f88d003d          STRB     r0,[sp,#0x3d]         ;953
0002e4  7aa0              LDRB     r0,[r4,#0xa]          ;954
0002e6  f88d003e          STRB     r0,[sp,#0x3e]         ;954
0002ea  4880              LDR      r0,|L2.1260|
0002ec  f7fffffe          BL       SPI_FLASH_EraseSector
0002f0  221e              MOVS     r2,#0x1e              ;958
0002f2  497e              LDR      r1,|L2.1260|
0002f4  a809              ADD      r0,sp,#0x24           ;958
0002f6  f7fffffe          BL       SPI_FLASH_WriteWithCheck
0002fa  4607              MOV      r7,r0                 ;958
0002fc  b17f              CBZ      r7,|L2.798|
0002fe  f7fffffe          BL       DutInfoUpdata
000302  4879              LDR      r0,|L2.1256|
000304  7d00              LDRB     r0,[r0,#0x14]         ;963  ; dut_info
000306  b128              CBZ      r0,|L2.788|
000308  f44f5180          MOV      r1,#0x1000            ;965
00030c  4878              LDR      r0,|L2.1264|
00030e  f7fffffe          BL       gpio_bit_set
000312  e004              B        |L2.798|
                  |L2.788|
000314  f44f5180          MOV      r1,#0x1000            ;969
000318  4875              LDR      r0,|L2.1264|
00031a  f7fffffe          BL       gpio_bit_reset
                  |L2.798|
00031e  4639              MOV      r1,r7                 ;973
000320  2017              MOVS     r0,#0x17              ;973
000322  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000326  e209              B        |L2.1852|
                  |L2.808|
000328  221e              MOVS     r2,#0x1e              ;978
00032a  4970              LDR      r1,|L2.1260|
00032c  a809              ADD      r0,sp,#0x24           ;978
00032e  f7fffffe          BL       SPI_FLASH_ReadArray
000332  f89d0038          LDRB     r0,[sp,#0x38]         ;979
000336  28ff              CMP      r0,#0xff              ;979
000338  d102              BNE      |L2.832|
00033a  200a              MOVS     r0,#0xa               ;981
00033c  f88d0038          STRB     r0,[sp,#0x38]         ;981
                  |L2.832|
000340  2055              MOVS     r0,#0x55              ;983
000342  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000346  2018              MOVS     r0,#0x18              ;984
000348  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00034c  2000              MOVS     r0,#0                 ;985
00034e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000352  f89d0039          LDRB     r0,[sp,#0x39]         ;986
000356  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00035a  f89d003a          LDRB     r0,[sp,#0x3a]         ;987
00035e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000362  f89d003b          LDRB     r0,[sp,#0x3b]         ;988
000366  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00036a  f89d003c          LDRB     r0,[sp,#0x3c]         ;989
00036e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000372  f89d003d          LDRB     r0,[sp,#0x3d]         ;990
000376  f7fffffe          BL       ARM_PROTOCOL_TxAddData
00037a  f89d003e          LDRB     r0,[sp,#0x3e]         ;991
00037e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000382  f04f0800          MOV      r8,#0                 ;992
000386  e008              B        |L2.922|
                  |L2.904|
000388  a909              ADD      r1,sp,#0x24           ;994
00038a  f8110008          LDRB     r0,[r1,r8]            ;994
00038e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
000392  f1080001          ADD      r0,r8,#1              ;992
000396  f00008ff          AND      r8,r0,#0xff           ;992
                  |L2.922|
00039a  f89d0038          LDRB     r0,[sp,#0x38]         ;992
00039e  4540              CMP      r0,r8                 ;992
0003a0  dcf2              BGT      |L2.904|
0003a2  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
0003a6  e1c9              B        |L2.1852|
                  |L2.936|
0003a8  4852              LDR      r0,|L2.1268|
0003aa  f7fffffe          BL       SPI_FLASH_EraseSector
0003ae  7960              LDRB     r0,[r4,#5]            ;1002
0003b0  494d              LDR      r1,|L2.1256|
0003b2  f8810049          STRB     r0,[r1,#0x49]         ;1002
0003b6  4608              MOV      r0,r1                 ;1003
0003b8  f8901049          LDRB     r1,[r0,#0x49]         ;1003  ; dut_info
0003bc  484d              LDR      r0,|L2.1268|
0003be  f7fffffe          BL       SPI_FLASH_WriteByte
0003c2  2101              MOVS     r1,#1                 ;1004
0003c4  2019              MOVS     r0,#0x19              ;1004
0003c6  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
0003ca  e1b7              B        |L2.1852|
                  |L2.972|
0003cc  4849              LDR      r0,|L2.1268|
0003ce  f7fffffe          BL       SPI_FLASH_ReadByte
0003d2  4945              LDR      r1,|L2.1256|
0003d4  f8810049          STRB     r0,[r1,#0x49]         ;1009
0003d8  2055              MOVS     r0,#0x55              ;1010
0003da  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0003de  201a              MOVS     r0,#0x1a              ;1011
0003e0  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0003e4  2000              MOVS     r0,#0                 ;1012
0003e6  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0003ea  493f              LDR      r1,|L2.1256|
0003ec  f8910049          LDRB     r0,[r1,#0x49]         ;1013  ; dut_info
0003f0  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0003f4  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
0003f8  e1a0              B        |L2.1852|
                  |L2.1018|
0003fa  7920              LDRB     r0,[r4,#4]            ;1020
0003fc  9006              STR      r0,[sp,#0x18]         ;1020
0003fe  f44f11b0          MOV      r1,#0x160000          ;1021
000402  1d60              ADDS     r0,r4,#5              ;1021
000404  9a06              LDR      r2,[sp,#0x18]         ;1021
000406  f7fffffe          BL       SPI_FLASH_WriteWithCheck
00040a  4607              MOV      r7,r0                 ;1021
00040c  4639              MOV      r1,r7                 ;1023
00040e  2030              MOVS     r0,#0x30              ;1023
000410  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000414  e192              B        |L2.1852|
                  |L2.1046|
000416  4834              LDR      r0,|L2.1256|
000418  7dc0              LDRB     r0,[r0,#0x17]         ;1029  ; dut_info
00041a  2804              CMP      r0,#4                 ;1029
00041c  d141              BNE      |L2.1186|
00041e  7920              LDRB     r0,[r4,#4]            ;1032
000420  9008              STR      r0,[sp,#0x20]         ;1032
000422  f8949005          LDRB     r9,[r4,#5]            ;1033
000426  f894a006          LDRB     r10,[r4,#6]           ;1034
00042a  79e0              LDRB     r0,[r4,#7]            ;1035
00042c  9007              STR      r0,[sp,#0x1c]         ;1035
00042e  f894b008          LDRB     r11,[r4,#8]           ;1036
000432  ea4f6009          LSL      r0,r9,#24             ;1037
000436  ea40410a          ORR      r1,r0,r10,LSL #16     ;1037
00043a  9807              LDR      r0,[sp,#0x1c]         ;1037
00043c  ea412000          ORR      r0,r1,r0,LSL #8       ;1037
000440  ea40060b          ORR      r6,r0,r11             ;1037
000444  482c              LDR      r0,|L2.1272|
000446  6800              LDR      r0,[r0,#0]            ;1038  ; currPacketNum
000448  42b0              CMP      r0,r6                 ;1038
00044a  d006              BEQ      |L2.1114|
00044c  4826              LDR      r0,|L2.1256|
00044e  6a80              LDR      r0,[r0,#0x28]         ;1040  ; dut_info
000450  1c40              ADDS     r0,r0,#1              ;1040
000452  4925              LDR      r1,|L2.1256|
000454  6288              STR      r0,[r1,#0x28]         ;1040  ; dut_info
000456  4828              LDR      r0,|L2.1272|
000458  6006              STR      r6,[r0,#0]            ;1041  ; currPacketNum
                  |L2.1114|
00045a  2000              MOVS     r0,#0                 ;1044
00045c  9001              STR      r0,[sp,#4]            ;1044
00045e  9808              LDR      r0,[sp,#0x20]         ;1045
000460  2884              CMP      r0,#0x84              ;1045
000462  d00f              BEQ      |L2.1156|
000464  7920              LDRB     r0,[r4,#4]            ;1047
000466  1c80              ADDS     r0,r0,#2              ;1047
000468  9001              STR      r0,[sp,#4]            ;1047
00046a  e008              B        |L2.1150|
                  |L2.1132|
00046c  22ff              MOVS     r2,#0xff              ;1049
00046e  1ca1              ADDS     r1,r4,#2              ;1049
000470  9801              LDR      r0,[sp,#4]            ;1049
000472  1c40              ADDS     r0,r0,#1              ;1049
000474  540a              STRB     r2,[r1,r0]            ;1049
000476  9801              LDR      r0,[sp,#4]            ;1047
000478  1c40              ADDS     r0,r0,#1              ;1047
00047a  b280              UXTH     r0,r0                 ;1047
00047c  9001              STR      r0,[sp,#4]            ;1047
                  |L2.1150|
00047e  9801              LDR      r0,[sp,#4]            ;1047
000480  2887              CMP      r0,#0x87              ;1047
000482  dbf3              BLT      |L2.1132|
                  |L2.1156|
000484  4818              LDR      r0,|L2.1256|
000486  6a80              LDR      r0,[r0,#0x28]         ;1054  ; dut_info
000488  1e40              SUBS     r0,r0,#1              ;1054
00048a  eb001040          ADD      r0,r0,r0,LSL #5       ;1054
00048e  f44f1200          MOV      r2,#0x200000          ;1054
000492  eb020180          ADD      r1,r2,r0,LSL #2       ;1054
000496  2284              MOVS     r2,#0x84              ;1054
000498  1d60              ADDS     r0,r4,#5              ;1054
00049a  f7fffffe          BL       SPI_FLASH_WriteWithCheck
00049e  4607              MOV      r7,r0                 ;1054
0004a0  e03c              B        |L2.1308|
                  |L2.1186|
0004a2  7920              LDRB     r0,[r4,#4]            ;1065
0004a4  1f00              SUBS     r0,r0,#4              ;1065
0004a6  b2c0              UXTB     r0,r0                 ;1065
0004a8  9008              STR      r0,[sp,#0x20]         ;1065
0004aa  f8949005          LDRB     r9,[r4,#5]            ;1066
0004ae  f894a006          LDRB     r10,[r4,#6]           ;1067
0004b2  79e0              LDRB     r0,[r4,#7]            ;1068
0004b4  9007              STR      r0,[sp,#0x1c]         ;1068
0004b6  f894b008          LDRB     r11,[r4,#8]           ;1069
0004ba  ea4f6009          LSL      r0,r9,#24             ;1070
0004be  ea40410a          ORR      r1,r0,r10,LSL #16     ;1070
0004c2  9807              LDR      r0,[sp,#0x1c]         ;1070
0004c4  ea412000          ORR      r0,r1,r0,LSL #8       ;1070
0004c8  ea40060b          ORR      r6,r0,r11             ;1070
0004cc  480a              LDR      r0,|L2.1272|
0004ce  6800              LDR      r0,[r0,#0]            ;1071  ; currPacketNum
0004d0  42b0              CMP      r0,r6                 ;1071
0004d2  e013              B        |L2.1276|
                  |L2.1236|
                          DCD      0x00165000
                  |L2.1240|
                          DCD      allPacketSize
                  |L2.1244|
                          DCD      allPacket
                  |L2.1248|
                          DCD      0x00161000
                  |L2.1252|
                          DCD      IAP_JumpToAppFun
                  |L2.1256|
                          DCD      dut_info
                  |L2.1260|
                          DCD      0x00163000
                  |L2.1264|
                          DCD      0x40011800
                  |L2.1268|
                          DCD      0x00169000
                  |L2.1272|
                          DCD      currPacketNum
                  |L2.1276|
0004fc  d006              BEQ      |L2.1292|
0004fe  4898              LDR      r0,|L2.1888|
000500  6a80              LDR      r0,[r0,#0x28]         ;1073  ; dut_info
000502  1c40              ADDS     r0,r0,#1              ;1073
000504  4996              LDR      r1,|L2.1888|
000506  6288              STR      r0,[r1,#0x28]         ;1073  ; dut_info
000508  4896              LDR      r0,|L2.1892|
00050a  6006              STR      r6,[r0,#0]            ;1074  ; currPacketNum
                  |L2.1292|
00050c  f5061100          ADD      r1,r6,#0x200000       ;1076
000510  f1040009          ADD      r0,r4,#9              ;1076
000514  9a08              LDR      r2,[sp,#0x20]         ;1076
000516  f7fffffe          BL       SPI_FLASH_WriteWithCheck
00051a  4607              MOV      r7,r0                 ;1076
                  |L2.1308|
00051c  4639              MOV      r1,r7                 ;1080
00051e  2031              MOVS     r0,#0x31              ;1080
000520  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000524  e10a              B        |L2.1852|
                  |L2.1318|
000526  7920              LDRB     r0,[r4,#4]            ;1087
000528  1f00              SUBS     r0,r0,#4              ;1087
00052a  b2c0              UXTB     r0,r0                 ;1087
00052c  9008              STR      r0,[sp,#0x20]         ;1087
00052e  f8949005          LDRB     r9,[r4,#5]            ;1088
000532  f894a006          LDRB     r10,[r4,#6]           ;1089
000536  79e0              LDRB     r0,[r4,#7]            ;1090
000538  9007              STR      r0,[sp,#0x1c]         ;1090
00053a  f894b008          LDRB     r11,[r4,#8]           ;1091
00053e  ea4f6009          LSL      r0,r9,#24             ;1092
000542  ea40410a          ORR      r1,r0,r10,LSL #16     ;1092
000546  9807              LDR      r0,[sp,#0x1c]         ;1092
000548  ea412000          ORR      r0,r1,r0,LSL #8       ;1092
00054c  ea40060b          ORR      r6,r0,r11             ;1092
000550  4884              LDR      r0,|L2.1892|
000552  6800              LDR      r0,[r0,#0]            ;1094  ; currPacketNum
000554  42b0              CMP      r0,r6                 ;1094
000556  d006              BEQ      |L2.1382|
000558  4881              LDR      r0,|L2.1888|
00055a  6a00              LDR      r0,[r0,#0x20]         ;1096  ; dut_info
00055c  1c40              ADDS     r0,r0,#1              ;1096
00055e  4980              LDR      r1,|L2.1888|
000560  6208              STR      r0,[r1,#0x20]         ;1096  ; dut_info
000562  4880              LDR      r0,|L2.1892|
000564  6006              STR      r6,[r0,#0]            ;1097  ; currPacketNum
                  |L2.1382|
000566  f5062180          ADD      r1,r6,#0x40000        ;1099
00056a  f1040009          ADD      r0,r4,#9              ;1099
00056e  9a08              LDR      r2,[sp,#0x20]         ;1099
000570  f7fffffe          BL       SPI_FLASH_WriteWithCheck
000574  4607              MOV      r7,r0                 ;1099
000576  4639              MOV      r1,r7                 ;1102
000578  2032              MOVS     r0,#0x32              ;1102
00057a  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
00057e  e0dd              B        |L2.1852|
                  |L2.1408|
000580  7920              LDRB     r0,[r4,#4]            ;1107
000582  1f00              SUBS     r0,r0,#4              ;1107
000584  b2c0              UXTB     r0,r0                 ;1107
000586  9008              STR      r0,[sp,#0x20]         ;1107
000588  4975              LDR      r1,|L2.1888|
00058a  9808              LDR      r0,[sp,#0x20]         ;1108
00058c  f88100e3          STRB     r0,[r1,#0xe3]         ;1108
000590  f8949005          LDRB     r9,[r4,#5]            ;1109
000594  f894a006          LDRB     r10,[r4,#6]           ;1110
000598  79e0              LDRB     r0,[r4,#7]            ;1111
00059a  9007              STR      r0,[sp,#0x1c]         ;1111
00059c  f894b008          LDRB     r11,[r4,#8]           ;1112
0005a0  ea4f6009          LSL      r0,r9,#24             ;1113
0005a4  ea40410a          ORR      r1,r0,r10,LSL #16     ;1113
0005a8  9807              LDR      r0,[sp,#0x1c]         ;1113
0005aa  ea412000          ORR      r0,r1,r0,LSL #8       ;1113
0005ae  ea40060b          ORR      r6,r0,r11             ;1113
0005b2  486c              LDR      r0,|L2.1892|
0005b4  6800              LDR      r0,[r0,#0]            ;1114  ; currPacketNum
0005b6  42b0              CMP      r0,r6                 ;1114
0005b8  d006              BEQ      |L2.1480|
0005ba  4869              LDR      r0,|L2.1888|
0005bc  6a40              LDR      r0,[r0,#0x24]         ;1116  ; dut_info
0005be  1c40              ADDS     r0,r0,#1              ;1116
0005c0  4967              LDR      r1,|L2.1888|
0005c2  6248              STR      r0,[r1,#0x24]         ;1116  ; dut_info
0005c4  4867              LDR      r0,|L2.1892|
0005c6  6006              STR      r6,[r0,#0]            ;1117  ; currPacketNum
                  |L2.1480|
0005c8  f50621c0          ADD      r1,r6,#0x60000        ;1119
0005cc  f1040009          ADD      r0,r4,#9              ;1119
0005d0  9a08              LDR      r2,[sp,#0x20]         ;1119
0005d2  f7fffffe          BL       SPI_FLASH_WriteWithCheck
0005d6  4607              MOV      r7,r0                 ;1119
0005d8  4639              MOV      r1,r7                 ;1120
0005da  2033              MOVS     r0,#0x33              ;1120
0005dc  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
0005e0  e0ac              B        |L2.1852|
                  |L2.1506|
0005e2  7960              LDRB     r0,[r4,#5]            ;1125
0005e4  9005              STR      r0,[sp,#0x14]         ;1125
0005e6  9805              LDR      r0,[sp,#0x14]         ;1127
0005e8  b120              CBZ      r0,|L2.1524|
0005ea  2801              CMP      r0,#1                 ;1127
0005ec  d021              BEQ      |L2.1586|
0005ee  2802              CMP      r0,#2                 ;1127
0005f0  d15b              BNE      |L2.1706|
0005f2  e03b              B        |L2.1644|
                  |L2.1524|
0005f4  f44f10b3          MOV      r0,#0x166000          ;1130
0005f8  f7fffffe          BL       SPI_FLASH_EraseSector
0005fc  4858              LDR      r0,|L2.1888|
0005fe  6a00              LDR      r0,[r0,#0x20]         ;1131  ; dut_info
000600  0e00              LSRS     r0,r0,#24             ;1131
000602  f88d0008          STRB     r0,[sp,#8]            ;1131
000606  4856              LDR      r0,|L2.1888|
000608  6a00              LDR      r0,[r0,#0x20]         ;1132  ; dut_info
00060a  0c00              LSRS     r0,r0,#16             ;1132
00060c  f88d0009          STRB     r0,[sp,#9]            ;1132
000610  4853              LDR      r0,|L2.1888|
000612  8c00              LDRH     r0,[r0,#0x20]         ;1133  ; dut_info
000614  0a00              LSRS     r0,r0,#8              ;1133
000616  f88d000a          STRB     r0,[sp,#0xa]          ;1133
00061a  4851              LDR      r0,|L2.1888|
00061c  f8900020          LDRB     r0,[r0,#0x20]         ;1134  ; dut_info
000620  f88d000b          STRB     r0,[sp,#0xb]          ;1134
000624  2204              MOVS     r2,#4                 ;1135
000626  f44f11b3          MOV      r1,#0x166000          ;1135
00062a  a802              ADD      r0,sp,#8              ;1135
00062c  f7fffffe          BL       SPI_FLASH_WriteArray
000630  e03b              B        |L2.1706|
                  |L2.1586|
000632  484d              LDR      r0,|L2.1896|
000634  f7fffffe          BL       SPI_FLASH_EraseSector
000638  4849              LDR      r0,|L2.1888|
00063a  6a40              LDR      r0,[r0,#0x24]         ;1140  ; dut_info
00063c  0e00              LSRS     r0,r0,#24             ;1140
00063e  f88d0008          STRB     r0,[sp,#8]            ;1140
000642  4847              LDR      r0,|L2.1888|
000644  6a40              LDR      r0,[r0,#0x24]         ;1141  ; dut_info
000646  0c00              LSRS     r0,r0,#16             ;1141
000648  f88d0009          STRB     r0,[sp,#9]            ;1141
00064c  4844              LDR      r0,|L2.1888|
00064e  8c80              LDRH     r0,[r0,#0x24]         ;1142  ; dut_info
000650  0a00              LSRS     r0,r0,#8              ;1142
000652  f88d000a          STRB     r0,[sp,#0xa]          ;1142
000656  4842              LDR      r0,|L2.1888|
000658  f8900024          LDRB     r0,[r0,#0x24]         ;1143  ; dut_info
00065c  f88d000b          STRB     r0,[sp,#0xb]          ;1143
000660  2204              MOVS     r2,#4                 ;1144
000662  4941              LDR      r1,|L2.1896|
000664  a802              ADD      r0,sp,#8              ;1144
000666  f7fffffe          BL       SPI_FLASH_WriteArray
00066a  e01e              B        |L2.1706|
                  |L2.1644|
00066c  f44f10b4          MOV      r0,#0x168000          ;1148
000670  f7fffffe          BL       SPI_FLASH_EraseSector
000674  483a              LDR      r0,|L2.1888|
000676  6a80              LDR      r0,[r0,#0x28]         ;1149  ; dut_info
000678  0e00              LSRS     r0,r0,#24             ;1149
00067a  f88d0008          STRB     r0,[sp,#8]            ;1149
00067e  4838              LDR      r0,|L2.1888|
000680  6a80              LDR      r0,[r0,#0x28]         ;1150  ; dut_info
000682  0c00              LSRS     r0,r0,#16             ;1150
000684  f88d0009          STRB     r0,[sp,#9]            ;1150
000688  4835              LDR      r0,|L2.1888|
00068a  8d00              LDRH     r0,[r0,#0x28]         ;1151  ; dut_info
00068c  0a00              LSRS     r0,r0,#8              ;1151
00068e  f88d000a          STRB     r0,[sp,#0xa]          ;1151
000692  4833              LDR      r0,|L2.1888|
000694  f8900028          LDRB     r0,[r0,#0x28]         ;1152  ; dut_info
000698  f88d000b          STRB     r0,[sp,#0xb]          ;1152
00069c  2204              MOVS     r2,#4                 ;1153
00069e  f44f11b4          MOV      r1,#0x168000          ;1153
0006a2  a802              ADD      r0,sp,#8              ;1153
0006a4  f7fffffe          BL       SPI_FLASH_WriteArray
0006a8  bf00              NOP                            ;1154
                  |L2.1706|
0006aa  bf00              NOP                            ;1136
0006ac  f64f70ff          MOV      r0,#0xffff            ;1156
0006b0  492c              LDR      r1,|L2.1892|
0006b2  6008              STR      r0,[r1,#0]            ;1156  ; currPacketNum
0006b4  482a              LDR      r0,|L2.1888|
0006b6  7d80              LDRB     r0,[r0,#0x16]         ;1159  ; dut_info
0006b8  2809              CMP      r0,#9                 ;1159
0006ba  d128              BNE      |L2.1806|
0006bc  4828              LDR      r0,|L2.1888|
0006be  f89010e3          LDRB     r1,[r0,#0xe3]         ;1162  ; dut_info
0006c2  6a40              LDR      r0,[r0,#0x24]         ;1162  ; dut_info
0006c4  1e40              SUBS     r0,r0,#1              ;1162
0006c6  eb0110c0          ADD      r0,r1,r0,LSL #7       ;1162
0006ca  4925              LDR      r1,|L2.1888|
0006cc  f8c100e8          STR      r0,[r1,#0xe8]         ;1162  ; dut_info
0006d0  f89120e3          LDRB     r2,[r1,#0xe3]         ;1163  ; dut_info
0006d4  6a49              LDR      r1,[r1,#0x24]         ;1163  ; dut_info
0006d6  1e49              SUBS     r1,r1,#1              ;1163
0006d8  eb0210c1          ADD      r0,r2,r1,LSL #7       ;1163
0006dc  f7fffffe          BL       SPI_FlashReadForCrc8
0006e0  491f              LDR      r1,|L2.1888|
0006e2  f88100e4          STRB     r0,[r1,#0xe4]         ;1163
0006e6  4821              LDR      r0,|L2.1900|
0006e8  f7fffffe          BL       SPI_FLASH_EraseSector
0006ec  481c              LDR      r0,|L2.1888|
0006ee  f8d010e8          LDR      r1,[r0,#0xe8]         ;1165  ; dut_info
0006f2  481e              LDR      r0,|L2.1900|
0006f4  f7fffffe          BL       SPI_FLASH_WriteWord
0006f8  f44f10b6          MOV      r0,#0x16c000          ;1166
0006fc  f7fffffe          BL       SPI_FLASH_EraseSector
000700  4817              LDR      r0,|L2.1888|
000702  f89010e4          LDRB     r1,[r0,#0xe4]         ;1167  ; dut_info
000706  f44f10b6          MOV      r0,#0x16c000          ;1167
00070a  f7fffffe          BL       SPI_FLASH_WriteWord
                  |L2.1806|
00070e  2034              MOVS     r0,#0x34              ;1171
000710  9905              LDR      r1,[sp,#0x14]         ;1171
000712  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000716  e011              B        |L2.1852|
                  |L2.1816|
000718  f44f10b5          MOV      r0,#0x16a000          ;1176
00071c  f7fffffe          BL       SPI_FLASH_EraseSector
000720  7920              LDRB     r0,[r4,#4]            ;1177
000722  1c42              ADDS     r2,r0,#1              ;1177
000724  f44f11b5          MOV      r1,#0x16a000          ;1177
000728  1d20              ADDS     r0,r4,#4              ;1177
00072a  f7fffffe          BL       SPI_FLASH_WriteWithCheck
00072e  4607              MOV      r7,r0                 ;1177
000730  4639              MOV      r1,r7                 ;1180
000732  2035              MOVS     r0,#0x35              ;1180
000734  f7fffffe          BL       ARM_PROTOCOL_SendCmdParamAck
000738  e000              B        |L2.1852|
                  |L2.1850|
00073a  bf00              NOP                            ;1184
                  |L2.1852|
00073c  bf00              NOP                            ;831
00073e  f8b50434          LDRH     r0,[r5,#0x434]        ;1188
000742  1c40              ADDS     r0,r0,#1              ;1188
000744  f8a50434          STRH     r0,[r5,#0x434]        ;1188
000748  f8b50434          LDRH     r0,[r5,#0x434]        ;1189
00074c  2105              MOVS     r1,#5                 ;1189
00074e  fb90f2f1          SDIV     r2,r0,r1              ;1189
000752  fb010012          MLS      r0,r1,r2,r0           ;1189
000756  f8a50434          STRH     r0,[r5,#0x434]        ;1189
00075a  bf00              NOP      
00075c  e46e              B        |L2.60|
;;;1191   
                          ENDP

00075e  0000              DCW      0x0000
                  |L2.1888|
                          DCD      dut_info
                  |L2.1892|
                          DCD      currPacketNum
                  |L2.1896|
                          DCD      0x00167000
                  |L2.1900|
                          DCD      0x0016b000

                          AREA ||i.ARM_PROTOCOL_ConfirmTempCmdFrameBuff||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_ConfirmTempCmdFrameBuff PROC
;;;217    // 将临时缓冲区添加到命令帧缓冲区中，其本质操作是承认临时缓冲区数据有效
;;;218    BOOL ARM_PROTOCOL_ConfirmTempCmdFrameBuff(ARM_PROTOCOL_CB *pCB)
000000  b510              PUSH     {r4,lr}
;;;219    {
000002  4601              MOV      r1,r0
;;;220        ARM_PROTOCOL_RX_CMD_FRAME *pCmdFrame = NULL;
000004  2200              MOVS     r2,#0
;;;221    
;;;222        // 参数合法性检验
;;;223        if (NULL == pCB)
000006  b909              CBNZ     r1,|L3.12|
;;;224        {
;;;225            return FALSE;
000008  2000              MOVS     r0,#0
                  |L3.10|
;;;226        }
;;;227    
;;;228        // 临时缓冲区为空，不予添加
;;;229        pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
;;;230        if (0 == pCmdFrame->length)
;;;231        {
;;;232            return FALSE;
;;;233        }
;;;234    
;;;235        // 添加
;;;236        pCB->rx.end++;
;;;237        pCB->rx.end %= ARM_PROTOCOL_RX_QUEUE_SIZE;
;;;238        pCB->rx.cmdQueue[pCB->rx.end].length = 0; // 该行的作用是将新的添加位置有效数据个数清零，以便将这个位置当做临时帧缓冲区
;;;239    
;;;240        return TRUE;
;;;241    }
00000a  bd10              POP      {r4,pc}
                  |L3.12|
00000c  f8b10436          LDRH     r0,[r1,#0x436]        ;229
000010  234d              MOVS     r3,#0x4d              ;229
000012  4358              MULS     r0,r3,r0              ;229
000014  f5017399          ADD      r3,r1,#0x132          ;229
000018  eb030240          ADD      r2,r3,r0,LSL #1       ;229
00001c  f8b20098          LDRH     r0,[r2,#0x98]         ;230
000020  b908              CBNZ     r0,|L3.38|
000022  2000              MOVS     r0,#0                 ;232
000024  e7f1              B        |L3.10|
                  |L3.38|
000026  f8b10436          LDRH     r0,[r1,#0x436]        ;236
00002a  1c40              ADDS     r0,r0,#1              ;236
00002c  f8a10436          STRH     r0,[r1,#0x436]        ;236
000030  f8b10436          LDRH     r0,[r1,#0x436]        ;237
000034  2305              MOVS     r3,#5                 ;237
000036  fb90f4f3          SDIV     r4,r0,r3              ;237
00003a  fb030014          MLS      r0,r3,r4,r0           ;237
00003e  f8a10436          STRH     r0,[r1,#0x436]        ;237
000042  2400              MOVS     r4,#0                 ;238
000044  f8b10436          LDRH     r0,[r1,#0x436]        ;238
000048  234d              MOVS     r3,#0x4d              ;238
00004a  4358              MULS     r0,r3,r0              ;238
00004c  f5017399          ADD      r3,r1,#0x132          ;238
000050  eb030040          ADD      r0,r3,r0,LSL #1       ;238
000054  f8a04098          STRH     r4,[r0,#0x98]         ;238
000058  2001              MOVS     r0,#1                 ;240
00005a  e7d6              B        |L3.10|
;;;242    
                          ENDP


                          AREA ||i.ARM_PROTOCOL_DataStructInit||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_DataStructInit PROC
;;;152    // 数据结构初始化
;;;153    void ARM_PROTOCOL_DataStructInit(ARM_PROTOCOL_CB *pCB)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155        uint16 i;
;;;156    
;;;157        // 参数合法性检验
;;;158        if (NULL == pCB)
000002  b900              CBNZ     r0,|L4.6|
                  |L4.4|
;;;159        {
;;;160            return;
;;;161        }
;;;162    
;;;163        pCB->tx.txBusy = FALSE;
;;;164        pCB->tx.index = 0;
;;;165        pCB->tx.head = 0;
;;;166        pCB->tx.end = 0;
;;;167        for (i = 0; i < ARM_PROTOCOL_TX_QUEUE_SIZE; i++)
;;;168        {
;;;169            pCB->tx.cmdQueue[i].length = 0;
;;;170        }
;;;171    
;;;172        pCB->rxFIFO.head = 0;
;;;173        pCB->rxFIFO.end = 0;
;;;174        pCB->rxFIFO.currentProcessIndex = 0;
;;;175    
;;;176        pCB->rx.head = 0;
;;;177        pCB->rx.end = 0;
;;;178        for (i = 0; i < ARM_PROTOCOL_RX_QUEUE_SIZE; i++)
;;;179        {
;;;180            pCB->rx.cmdQueue[i].length = 0;
;;;181        }
;;;182    
;;;183        pCB->isTimeCheck = FALSE;
;;;184    }
000004  bd10              POP      {r4,pc}
                  |L4.6|
000006  2300              MOVS     r3,#0                 ;163
000008  f8803740          STRB     r3,[r0,#0x740]        ;163
00000c  f8a0373e          STRH     r3,[r0,#0x73e]        ;164
000010  f8a0373a          STRH     r3,[r0,#0x73a]        ;165
000014  f8a0373c          STRH     r3,[r0,#0x73c]        ;166
000018  2100              MOVS     r1,#0                 ;167
00001a  e00a              B        |L4.50|
                  |L4.28|
00001c  2400              MOVS     r4,#0                 ;169
00001e  224d              MOVS     r2,#0x4d              ;169
000020  434a              MULS     r2,r1,r2              ;169
000022  f5006387          ADD      r3,r0,#0x438          ;169
000026  eb030242          ADD      r2,r3,r2,LSL #1       ;169
00002a  f8a24098          STRH     r4,[r2,#0x98]         ;169
00002e  1c4a              ADDS     r2,r1,#1              ;167
000030  b291              UXTH     r1,r2                 ;167
                  |L4.50|
000032  2905              CMP      r1,#5                 ;167
000034  dbf2              BLT      |L4.28|
000036  2200              MOVS     r2,#0                 ;172
000038  f8a0212c          STRH     r2,[r0,#0x12c]        ;172
00003c  f8a0212e          STRH     r2,[r0,#0x12e]        ;173
000040  f8a02130          STRH     r2,[r0,#0x130]        ;174
000044  2300              MOVS     r3,#0                 ;176
000046  f8a03434          STRH     r3,[r0,#0x434]        ;176
00004a  f8a03436          STRH     r3,[r0,#0x436]        ;177
00004e  2100              MOVS     r1,#0                 ;178
000050  e00a              B        |L4.104|
                  |L4.82|
000052  2400              MOVS     r4,#0                 ;180
000054  224d              MOVS     r2,#0x4d              ;180
000056  434a              MULS     r2,r1,r2              ;180
000058  f5007399          ADD      r3,r0,#0x132          ;180
00005c  eb030242          ADD      r2,r3,r2,LSL #1       ;180
000060  f8a24098          STRH     r4,[r2,#0x98]         ;180
000064  1c4a              ADDS     r2,r1,#1              ;178
000066  b291              UXTH     r1,r2                 ;178
                  |L4.104|
000068  2905              CMP      r1,#5                 ;178
00006a  dbf2              BLT      |L4.82|
00006c  2200              MOVS     r2,#0                 ;183
00006e  f880274c          STRB     r2,[r0,#0x74c]        ;183
000072  bf00              NOP      
000074  e7c6              B        |L4.4|
;;;185    
                          ENDP


                          AREA ||i.ARM_PROTOCOL_Init||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_Init PROC
;;;58     // 协议初始化
;;;59     void ARM_PROTOCOL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;60     {
;;;61         // 协议层数据结构初始化
;;;62         ARM_PROTOCOL_DataStructInit(&armProtocolCB);
000002  4805              LDR      r0,|L5.24|
000004  f7fffffe          BL       ARM_PROTOCOL_DataStructInit
;;;63     
;;;64         // 向驱动层注册数据接收接口
;;;65         ARM_UART_RegisterDataSendService(ARM_PROTOCOL_MacProcess);
000008  4804              LDR      r0,|L5.28|
00000a  f7fffffe          BL       ARM_UART_RegisterDataSendService
;;;66     
;;;67         // 向驱动层注册数据发送接口
;;;68         ARM_PROTOCOL_RegisterDataSendService(ARM_UART_AddTxArray);
00000e  4804              LDR      r0,|L5.32|
000010  f7fffffe          BL       ARM_PROTOCOL_RegisterDataSendService
;;;69     }
000014  bd10              POP      {r4,pc}
;;;70     
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      armProtocolCB
                  |L5.28|
                          DCD      ARM_PROTOCOL_MacProcess
                  |L5.32|
                          DCD      ARM_UART_AddTxArray

                          AREA ||i.ARM_PROTOCOL_MacProcess||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_MacProcess PROC
;;;186    // UART报文接收处理函数(注意根据具体模块修改)
;;;187    void ARM_PROTOCOL_MacProcess(uint16 standarID, uint8 *pData, uint16 length)
000000  b5f0              PUSH     {r4-r7,lr}
;;;188    {
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
;;;189        uint16 end = armProtocolCB.rxFIFO.end;
000006  4e13              LDR      r6,|L6.84|
000008  f8b6012e          LDRH     r0,[r6,#0x12e]  ; armProtocolCB
;;;190        uint16 head = armProtocolCB.rxFIFO.head;
00000c  f8b6212c          LDRH     r2,[r6,#0x12c]  ; armProtocolCB
;;;191        uint8 rxdata = 0x00;
000010  2300              MOVS     r3,#0
;;;192    
;;;193        // 接收数据
;;;194        rxdata = *pData;
000012  780b              LDRB     r3,[r1,#0]
;;;195    
;;;196        // 一级缓冲区已满，不予接收
;;;197        if ((end + 1) % ARM_PROTOCOL_RX_FIFO_SIZE == head)
000014  1c46              ADDS     r6,r0,#1
000016  f44f7796          MOV      r7,#0x12c
00001a  fb96fcf7          SDIV     r12,r6,r7
00001e  fb07661c          MLS      r6,r7,r12,r6
000022  4296              CMP      r6,r2
000024  d100              BNE      |L6.40|
                  |L6.38|
;;;198        {
;;;199            return;
;;;200        }
;;;201        // 一级缓冲区未满，接收
;;;202        else
;;;203        {
;;;204            // 将接收到的数据放到临时缓冲区中
;;;205            armProtocolCB.rxFIFO.buff[end] = rxdata;
;;;206            armProtocolCB.rxFIFO.end++;
;;;207            armProtocolCB.rxFIFO.end %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;208        }
;;;209    }
000026  bdf0              POP      {r4-r7,pc}
                  |L6.40|
000028  4e0a              LDR      r6,|L6.84|
00002a  5433              STRB     r3,[r6,r0]            ;205
00002c  f8b6612e          LDRH     r6,[r6,#0x12e]        ;206  ; armProtocolCB
000030  1c76              ADDS     r6,r6,#1              ;206
000032  4f08              LDR      r7,|L6.84|
000034  f8a7612e          STRH     r6,[r7,#0x12e]        ;206
000038  463e              MOV      r6,r7                 ;207
00003a  f8b6612e          LDRH     r6,[r6,#0x12e]        ;207  ; armProtocolCB
00003e  f44f7796          MOV      r7,#0x12c             ;207
000042  fb96fcf7          SDIV     r12,r6,r7             ;207
000046  fb07661c          MLS      r6,r7,r12,r6          ;207
00004a  4f02              LDR      r7,|L6.84|
00004c  f8a7612e          STRH     r6,[r7,#0x12e]        ;207
000050  bf00              NOP      
000052  e7e8              B        |L6.38|
;;;210    
                          ENDP

                  |L6.84|
                          DCD      armProtocolCB

                          AREA ||i.ARM_PROTOCOL_Process||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_Process PROC
;;;71     // ARM协议层过程处理
;;;72     void ARM_PROTOCOL_Process(void)
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74         // ARM接收FIFO缓冲区处理
;;;75         ARM_PROTOCOL_RxFIFOProcess(&armProtocolCB);
000002  4804              LDR      r0,|L7.20|
000004  f7fffffe          BL       ARM_PROTOCOL_RxFIFOProcess
;;;76     
;;;77         // ARM接收命令缓冲区处理
;;;78         ARM_PROTOCOL_CmdFrameProcess(&armProtocolCB);
000008  4802              LDR      r0,|L7.20|
00000a  f7fffffe          BL       ARM_PROTOCOL_CmdFrameProcess
;;;79     
;;;80         // ARM协议层发送处理过程
;;;81         ARM_PROTOCOL_TxStateProcess();
00000e  f7fffffe          BL       ARM_PROTOCOL_TxStateProcess
;;;82     }
000012  bd10              POP      {r4,pc}
;;;83     
                          ENDP

                  |L7.20|
                          DCD      armProtocolCB

                          AREA ||i.ARM_PROTOCOL_RegisterDataSendService||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_RegisterDataSendService PROC
;;;211    // UART协议层向驱动层注册数据发送接口
;;;212    void ARM_PROTOCOL_RegisterDataSendService(BOOL (*service)(uint16 id, uint8 *pData, uint16 length))
000000  4901              LDR      r1,|L8.8|
;;;213    {
;;;214        armProtocolCB.sendDataThrowService = service;
000002  f8c10744          STR      r0,[r1,#0x744]  ; armProtocolCB
;;;215    }
000006  4770              BX       lr
;;;216    
                          ENDP

                  |L8.8|
                          DCD      armProtocolCB

                          AREA ||i.ARM_PROTOCOL_RxFIFOProcess||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_RxFIFOProcess PROC
;;;276    // 一级接收缓冲区处理，从一级接收缓冲区中取出一个字节添加到命令帧缓冲区中
;;;277    void ARM_PROTOCOL_RxFIFOProcess(ARM_PROTOCOL_CB *pCB)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;278    {
000004  4604              MOV      r4,r0
;;;279        uint16 end = pCB->rxFIFO.end;
000006  f8b4712e          LDRH     r7,[r4,#0x12e]
;;;280        uint16 head = pCB->rxFIFO.head;
00000a  f8b4912c          LDRH     r9,[r4,#0x12c]
;;;281        ARM_PROTOCOL_RX_CMD_FRAME *pCmdFrame = NULL;
00000e  2500              MOVS     r5,#0
;;;282        uint16 length = 0;
000010  46a8              MOV      r8,r5
;;;283        uint8 currentData = 0;
000012  2600              MOVS     r6,#0
;;;284    
;;;285        // 参数合法性检验
;;;286        if (NULL == pCB)
000014  b90c              CBNZ     r4,|L9.26|
                  |L9.22|
;;;287        {
;;;288            return;
;;;289        }
;;;290    
;;;291        // 一级缓冲区为空，退出
;;;292        if (head == end)
;;;293        {
;;;294            return;
;;;295        }
;;;296    
;;;297        // 获取临时缓冲区指针
;;;298        pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
;;;299        // 取出当前要处理的字节
;;;300        currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
;;;301    
;;;302        // 临时缓冲区长度为0时，搜索首字节
;;;303        if (0 == pCmdFrame->length)
;;;304        {
;;;305            // 命令头错误，删除当前字节并退出
;;;306            if (ARM_PROTOCOL_CMD_HEAD != currentData)
;;;307            {
;;;308                pCB->rxFIFO.head++;
;;;309                pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;310                pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;311    
;;;312                return;
;;;313            }
;;;314    
;;;315            // 命令头正确，但无临时缓冲区可用，退出
;;;316            if ((pCB->rx.end + 1) % ARM_PROTOCOL_RX_QUEUE_SIZE == pCB->rx.head)
;;;317            {
;;;318                return;
;;;319            }
;;;320    
;;;321            // 添加UART通讯超时时间设置-2016.1.5增加
;;;322    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;323            TIMER_AddTask(TIMER_ID_UART_RX_TIME_OUT_CONTROL,
;;;324                          BLE_PROTOCOL_BUS_UNIDIRECTIONAL_TIME_OUT,
;;;325                          BLE_PROTOCOL_CALLBACK_RxTimeOut,
;;;326                          0,
;;;327                          1,
;;;328                          ACTION_MODE_ADD_TO_QUEUE);
;;;329    #endif
;;;330    
;;;331            // 命令头正确，有临时缓冲区可用，则将其添加到命令帧临时缓冲区中
;;;332            pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;333            pCB->rxFIFO.currentProcessIndex++;
;;;334            pCB->rxFIFO.currentProcessIndex %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;335        }
;;;336        // 非首字节，将数据添加到命令帧临时缓冲区中，但暂不删除当前数据
;;;337        else
;;;338        {
;;;339            // 临时缓冲区溢出，说明当前正在接收的命令帧是错误的，正确的命令帧不会出现长度溢出的情况
;;;340            if (pCmdFrame->length >= ARM_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX)
;;;341            {
;;;342    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;343                // 停止RX通讯超时检测
;;;344                BLE_PROTOCOL_StopRxTimeOutCheck();
;;;345    #endif
;;;346    
;;;347                // 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;348                pCmdFrame->length = 0; // 2016.1.5增加
;;;349                // 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;350                pCB->rxFIFO.head++;
;;;351                pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;352                pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;353    
;;;354                return;
;;;355            }
;;;356    
;;;357            // 一直取到末尾
;;;358            while (end != pCB->rxFIFO.currentProcessIndex)
;;;359            {
;;;360                // 取出当前要处理的字节
;;;361                currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
;;;362                // 缓冲区未溢出，正常接收，将数据添加到临时缓冲区中
;;;363                pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;364                pCB->rxFIFO.currentProcessIndex++;
;;;365                pCB->rxFIFO.currentProcessIndex %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;366    
;;;367                // ■■接下来，需要检查命令帧是否完整，如果完整，则将命令帧临时缓冲区扶正 ■■
;;;368    
;;;369                // 首先判断命令帧最小长度，一个完整的命令字至少包括4个字节: 命令帧最小长度，包含:命令头、命令字、数据长度、校验和，因此不足4个字节的必定不完整
;;;370                if (pCmdFrame->length < ARM_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;371                {
;;;372                    // 继续接收
;;;373                    continue;
;;;374                }
;;;375    
;;;376                // 命令帧长度数值越界，说明当前命令帧错误，停止接收
;;;377                if (pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] > (ARM_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX - ARM_PROTOCOL_CMD_FRAME_LENGTH_MIN))
;;;378                {
;;;379    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;380                    // 停止RX通讯超时检测
;;;381                    BLE_PROTOCOL_StopRxTimeOutCheck();
;;;382    #endif
;;;383    
;;;384                    // 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;385                    pCmdFrame->length = 0;
;;;386                    // 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;387                    pCB->rxFIFO.head++;
;;;388                    pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;389                    pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;390    
;;;391                    return;
;;;392                }
;;;393    
;;;394                // 命令帧长度校验
;;;395                length = pCmdFrame->length;
;;;396                if (length < pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] + ARM_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;397                {
;;;398                    // 长度要求不一致，说明未接收完毕，退出继续
;;;399                    continue;
;;;400                }
;;;401    
;;;402                // 命令帧长度OK，则进行校验，失败时删除命令头
;;;403                if (!ARM_PROTOCOL_CheckSUM(pCmdFrame))
;;;404                {
;;;405    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;406                    // 停止RX通讯超时检测
;;;407                    BLE_PROTOCOL_StopRxTimeOutCheck();
;;;408    #endif
;;;409    
;;;410                    // 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;411                    pCmdFrame->length = 0;
;;;412                    // 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;413                    pCB->rxFIFO.head++;
;;;414                    pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;415                    pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;416    
;;;417                    return;
;;;418                }
;;;419    
;;;420    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;421                // 停止RX通讯超时检测
;;;422                BLE_PROTOCOL_StopRxTimeOutCheck();
;;;423    #endif
;;;424                // 执行到这里，即说明接收到了一个完整并且正确的命令帧，此时需将处理过的数据从一级缓冲区中删除，并将该命令帧扶正
;;;425                pCB->rxFIFO.head += length;
;;;426                pCB->rxFIFO.head %= ARM_PROTOCOL_RX_FIFO_SIZE;
;;;427                pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;428                ARM_PROTOCOL_ConfirmTempCmdFrameBuff(pCB);
;;;429    
;;;430                return;
;;;431            }
;;;432        }
;;;433    }
000016  e8bd83f0          POP      {r4-r9,pc}
                  |L9.26|
00001a  45b9              CMP      r9,r7                 ;292
00001c  d100              BNE      |L9.32|
00001e  e7fa              B        |L9.22|
                  |L9.32|
000020  f8b40436          LDRH     r0,[r4,#0x436]        ;298
000024  214d              MOVS     r1,#0x4d              ;298
000026  4348              MULS     r0,r1,r0              ;298
000028  f5047199          ADD      r1,r4,#0x132          ;298
00002c  eb010540          ADD      r5,r1,r0,LSL #1       ;298
000030  f8b40130          LDRH     r0,[r4,#0x130]        ;300
000034  5c26              LDRB     r6,[r4,r0]            ;300
000036  f8b50098          LDRH     r0,[r5,#0x98]         ;303
00003a  bbb8              CBNZ     r0,|L9.172|
00003c  2e55              CMP      r6,#0x55              ;306
00003e  d010              BEQ      |L9.98|
000040  1f8c              SUBS     r4,r1,#6              ;308
000042  8820              LDRH     r0,[r4,#0]            ;308
000044  1c40              ADDS     r0,r0,#1              ;308
000046  8020              STRH     r0,[r4,#0]            ;308
000048  8820              LDRH     r0,[r4,#0]            ;309
00004a  f44f7196          MOV      r1,#0x12c             ;309
00004e  fb90f2f1          SDIV     r2,r0,r1              ;309
000052  fb010012          MLS      r0,r1,r2,r0           ;309
000056  8020              STRH     r0,[r4,#0]            ;309
000058  8820              LDRH     r0,[r4,#0]            ;310
00005a  80a0              STRH     r0,[r4,#4]            ;310
00005c  f5a47496          SUB      r4,r4,#0x12c          ;310
000060  e7d9              B        |L9.22|
                  |L9.98|
000062  f8b40436          LDRH     r0,[r4,#0x436]        ;316
000066  1c40              ADDS     r0,r0,#1              ;316
000068  2105              MOVS     r1,#5                 ;316
00006a  fb90f2f1          SDIV     r2,r0,r1              ;316
00006e  fb010112          MLS      r1,r1,r2,r0           ;316
000072  f8b40434          LDRH     r0,[r4,#0x434]        ;316
000076  4281              CMP      r1,r0                 ;316
000078  d100              BNE      |L9.124|
00007a  e7cc              B        |L9.22|
                  |L9.124|
00007c  f8351f98          LDRH     r1,[r5,#0x98]!        ;332
000080  8828              LDRH     r0,[r5,#0]            ;332
000082  1c40              ADDS     r0,r0,#1              ;332
000084  f8250998          STRH     r0,[r5],#-0x98        ;332
000088  1ca8              ADDS     r0,r5,#2              ;332
00008a  5446              STRB     r6,[r0,r1]            ;332
00008c  f8b40130          LDRH     r0,[r4,#0x130]        ;333
000090  1c40              ADDS     r0,r0,#1              ;333
000092  f8a40130          STRH     r0,[r4,#0x130]        ;333
000096  f8b40130          LDRH     r0,[r4,#0x130]        ;334
00009a  f44f7196          MOV      r1,#0x12c             ;334
00009e  fb90f2f1          SDIV     r2,r0,r1              ;334
0000a2  fb010012          MLS      r0,r1,r2,r0           ;334
0000a6  f8a40130          STRH     r0,[r4,#0x130]        ;334
0000aa  e08a              B        |L9.450|
                  |L9.172|
0000ac  e7ff              B        |L9.174|
                  |L9.174|
0000ae  f8b50098          LDRH     r0,[r5,#0x98]         ;340
0000b2  2896              CMP      r0,#0x96              ;340
0000b4  db14              BLT      |L9.224|
0000b6  2000              MOVS     r0,#0                 ;348
0000b8  f8a50098          STRH     r0,[r5,#0x98]         ;348
0000bc  f5047496          ADD      r4,r4,#0x12c          ;350
0000c0  8820              LDRH     r0,[r4,#0]            ;350
0000c2  1c40              ADDS     r0,r0,#1              ;350
0000c4  8020              STRH     r0,[r4,#0]            ;350
0000c6  8820              LDRH     r0,[r4,#0]            ;351
0000c8  f44f7196          MOV      r1,#0x12c             ;351
0000cc  fb90f2f1          SDIV     r2,r0,r1              ;351
0000d0  fb010012          MLS      r0,r1,r2,r0           ;351
0000d4  8020              STRH     r0,[r4,#0]            ;351
0000d6  8820              LDRH     r0,[r4,#0]            ;352
0000d8  80a0              STRH     r0,[r4,#4]            ;352
0000da  f5a47496          SUB      r4,r4,#0x12c          ;352
0000de  e79a              B        |L9.22|
                  |L9.224|
0000e0  e06b              B        |L9.442|
                  |L9.226|
0000e2  f8b40130          LDRH     r0,[r4,#0x130]        ;361
0000e6  5c26              LDRB     r6,[r4,r0]            ;361
0000e8  f8351f98          LDRH     r1,[r5,#0x98]!        ;363
0000ec  8828              LDRH     r0,[r5,#0]            ;363
0000ee  1c40              ADDS     r0,r0,#1              ;363
0000f0  f8250998          STRH     r0,[r5],#-0x98        ;363
0000f4  1ca8              ADDS     r0,r5,#2              ;363
0000f6  5446              STRB     r6,[r0,r1]            ;363
0000f8  f8b40130          LDRH     r0,[r4,#0x130]        ;364
0000fc  1c40              ADDS     r0,r0,#1              ;364
0000fe  f8a40130          STRH     r0,[r4,#0x130]        ;364
000102  f8b40130          LDRH     r0,[r4,#0x130]        ;365
000106  f44f7196          MOV      r1,#0x12c             ;365
00010a  fb90f2f1          SDIV     r2,r0,r1              ;365
00010e  fb010012          MLS      r0,r1,r2,r0           ;365
000112  f8a40130          STRH     r0,[r4,#0x130]        ;365
000116  f8b50098          LDRH     r0,[r5,#0x98]         ;370
00011a  2804              CMP      r0,#4                 ;370
00011c  da00              BGE      |L9.288|
00011e  e04c              B        |L9.442|
                  |L9.288|
000120  7928              LDRB     r0,[r5,#4]            ;377
000122  2892              CMP      r0,#0x92              ;377
000124  dd14              BLE      |L9.336|
000126  2000              MOVS     r0,#0                 ;385
000128  f8a50098          STRH     r0,[r5,#0x98]         ;385
00012c  f5047496          ADD      r4,r4,#0x12c          ;387
000130  8820              LDRH     r0,[r4,#0]            ;387
000132  1c40              ADDS     r0,r0,#1              ;387
000134  8020              STRH     r0,[r4,#0]            ;387
000136  8820              LDRH     r0,[r4,#0]            ;388
000138  f44f7196          MOV      r1,#0x12c             ;388
00013c  fb90f2f1          SDIV     r2,r0,r1              ;388
000140  fb010012          MLS      r0,r1,r2,r0           ;388
000144  8020              STRH     r0,[r4,#0]            ;388
000146  8820              LDRH     r0,[r4,#0]            ;389
000148  80a0              STRH     r0,[r4,#4]            ;389
00014a  f5a47496          SUB      r4,r4,#0x12c          ;389
00014e  e762              B        |L9.22|
                  |L9.336|
000150  f8b58098          LDRH     r8,[r5,#0x98]         ;395
000154  7928              LDRB     r0,[r5,#4]            ;396
000156  1d00              ADDS     r0,r0,#4              ;396
000158  4540              CMP      r0,r8                 ;396
00015a  dd00              BLE      |L9.350|
00015c  e02d              B        |L9.442|
                  |L9.350|
00015e  4628              MOV      r0,r5                 ;403
000160  f7fffffe          BL       ARM_PROTOCOL_CheckSUM
000164  b9a0              CBNZ     r0,|L9.400|
000166  2000              MOVS     r0,#0                 ;411
000168  f8a50098          STRH     r0,[r5,#0x98]         ;411
00016c  f5047496          ADD      r4,r4,#0x12c          ;413
000170  8820              LDRH     r0,[r4,#0]            ;413
000172  1c40              ADDS     r0,r0,#1              ;413
000174  8020              STRH     r0,[r4,#0]            ;413
000176  8820              LDRH     r0,[r4,#0]            ;414
000178  f44f7196          MOV      r1,#0x12c             ;414
00017c  fb90f2f1          SDIV     r2,r0,r1              ;414
000180  fb010012          MLS      r0,r1,r2,r0           ;414
000184  8020              STRH     r0,[r4,#0]            ;414
000186  8820              LDRH     r0,[r4,#0]            ;415
000188  80a0              STRH     r0,[r4,#4]            ;415
00018a  f5a47496          SUB      r4,r4,#0x12c          ;415
00018e  e742              B        |L9.22|
                  |L9.400|
000190  f5047496          ADD      r4,r4,#0x12c          ;425
000194  8820              LDRH     r0,[r4,#0]            ;425
000196  4440              ADD      r0,r0,r8              ;425
000198  8020              STRH     r0,[r4,#0]            ;425
00019a  8820              LDRH     r0,[r4,#0]            ;426
00019c  f44f7196          MOV      r1,#0x12c             ;426
0001a0  fb90f2f1          SDIV     r2,r0,r1              ;426
0001a4  fb010012          MLS      r0,r1,r2,r0           ;426
0001a8  8020              STRH     r0,[r4,#0]            ;426
0001aa  8820              LDRH     r0,[r4,#0]            ;427
0001ac  80a0              STRH     r0,[r4,#4]            ;427
0001ae  f5a47496          SUB      r4,r4,#0x12c          ;427
0001b2  4620              MOV      r0,r4                 ;428
0001b4  f7fffffe          BL       ARM_PROTOCOL_ConfirmTempCmdFrameBuff
0001b8  e72d              B        |L9.22|
                  |L9.442|
0001ba  f8b40130          LDRH     r0,[r4,#0x130]        ;358
0001be  42b8              CMP      r0,r7                 ;358
0001c0  d18f              BNE      |L9.226|
                  |L9.450|
0001c2  bf00              NOP      
0001c4  e727              B        |L9.22|
;;;434    uint8 CRC32 = 0;
                          ENDP


                          AREA ||i.ARM_PROTOCOL_SendCmdAck||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_SendCmdAck PROC
;;;1228   // 发送命令回复
;;;1229   void ARM_PROTOCOL_SendCmdAck(uint8 ackCmd)
000000  b510              PUSH     {r4,lr}
;;;1230   {
000002  4604              MOV      r4,r0
;;;1231       ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1232       ARM_PROTOCOL_TxAddData(ackCmd);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1233       ARM_PROTOCOL_TxAddData(0x00);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1234       ARM_PROTOCOL_TxAddFrame();
000016  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
;;;1235   }
00001a  bd10              POP      {r4,pc}
;;;1236   
                          ENDP


                          AREA ||i.ARM_PROTOCOL_SendCmdParamAck||, CODE, READONLY, ALIGN=1

                  ARM_PROTOCOL_SendCmdParamAck PROC
;;;1237   // 发送命令回复，带一个参数
;;;1238   void ARM_PROTOCOL_SendCmdParamAck(uint8 ackCmd, uint8 ackParam)
000000  b530              PUSH     {r4,r5,lr}
;;;1239   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1240   
;;;1241       ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);
000006  2055              MOVS     r0,#0x55
000008  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1242       ARM_PROTOCOL_TxAddData(ackCmd);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1243       ARM_PROTOCOL_TxAddData(0x01);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1244   
;;;1245       ARM_PROTOCOL_TxAddData(ackParam);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;1246       ARM_PROTOCOL_TxAddFrame();
00001e  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
;;;1247   }
000022  bd30              POP      {r4,r5,pc}
;;;1248   
                          ENDP


                          AREA ||i.ARM_PROTOCOL_SendGetMacAddr||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_SendGetMacAddr PROC
;;;1249   // 发送获取MAC地址
;;;1250   void ARM_PROTOCOL_SendGetMacAddr(uint32 param)
000000  b53e              PUSH     {r1-r5,lr}
;;;1251   {
000002  4604              MOV      r4,r0
;;;1252       uint8 bleMacStr[] = "TTM:MAC-?";
000004  a205              ADR      r2,|L12.28|
000006  ca07              LDM      r2,{r0-r2}
000008  e88d0007          STM      sp,{r0-r2}
;;;1253   
;;;1254       // 使能BLE发送
;;;1255       ARM_BRTS_TX_REQUEST();
;;;1256   
;;;1257       // 将待发送命令添加到物理层缓冲区
;;;1258       ARM_UART_AddTxArray(0xFFFF, bleMacStr, sizeof(bleMacStr));
00000c  220a              MOVS     r2,#0xa
00000e  4669              MOV      r1,sp
000010  f64f70ff          MOV      r0,#0xffff
000014  f7fffffe          BL       ARM_UART_AddTxArray
;;;1259   }
000018  bd3e              POP      {r1-r5,pc}
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
00001c  54544d3a          DCB      "TTM:MAC-?",0
000020  4d41432d
000024  3f00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.ARM_PROTOCOL_TxAddData||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_TxAddData PROC
;;;84     // 向发送命令帧队列中添加数据
;;;85     void ARM_PROTOCOL_TxAddData(uint8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;86     {
000002  4601              MOV      r1,r0
;;;87         uint16 head = armProtocolCB.tx.head;
000004  4c12              LDR      r4,|L13.80|
000006  f8b4273a          LDRH     r2,[r4,#0x73a]
;;;88         uint16 end = armProtocolCB.tx.end;
00000a  f8b4373c          LDRH     r3,[r4,#0x73c]
;;;89         ARM_PROTOCOL_TX_CMD_FRAME *pCmdFrame = &armProtocolCB.tx.cmdQueue[armProtocolCB.tx.end];
00000e  f8b4473c          LDRH     r4,[r4,#0x73c]
000012  254d              MOVS     r5,#0x4d
000014  436c              MULS     r4,r5,r4
000016  4d0f              LDR      r5,|L13.84|
000018  eb050044          ADD      r0,r5,r4,LSL #1
;;;90     
;;;91         // 发送缓冲区已满，不予接收
;;;92         if ((end + 1) % ARM_PROTOCOL_TX_QUEUE_SIZE == head)
00001c  1c5c              ADDS     r4,r3,#1
00001e  2505              MOVS     r5,#5
000020  fb94f6f5          SDIV     r6,r4,r5
000024  fb054416          MLS      r4,r5,r6,r4
000028  4294              CMP      r4,r2
00002a  d100              BNE      |L13.46|
                  |L13.44|
;;;93         {
;;;94             return;
;;;95         }
;;;96     
;;;97         // 队尾命令帧已满，退出
;;;98         if (pCmdFrame->length >= ARM_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX)
;;;99         {
;;;100            return;
;;;101        }
;;;102    
;;;103        // 数据添加到帧末尾，并更新帧长度
;;;104        pCmdFrame->buff[pCmdFrame->length] = data;
;;;105        pCmdFrame->length++;
;;;106    }
00002c  bd70              POP      {r4-r6,pc}
                  |L13.46|
00002e  f8b04098          LDRH     r4,[r0,#0x98]         ;98
000032  2c96              CMP      r4,#0x96              ;98
000034  db00              BLT      |L13.56|
000036  e7f9              B        |L13.44|
                  |L13.56|
000038  f8b05098          LDRH     r5,[r0,#0x98]         ;104
00003c  1c84              ADDS     r4,r0,#2              ;104
00003e  5561              STRB     r1,[r4,r5]            ;104
000040  f8b04098          LDRH     r4,[r0,#0x98]         ;105
000044  1c64              ADDS     r4,r4,#1              ;105
000046  f8a04098          STRH     r4,[r0,#0x98]         ;105
00004a  bf00              NOP      
00004c  e7ee              B        |L13.44|
;;;107    
                          ENDP

00004e  0000              DCW      0x0000
                  |L13.80|
                          DCD      armProtocolCB
                  |L13.84|
                          DCD      armProtocolCB+0x438

                          AREA ||i.ARM_PROTOCOL_TxAddFrame||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_TxAddFrame PROC
;;;108    // 确认添加命令帧，即承认之前填充的数据为命令帧，将其添加到发送队列中，由main进行调度发送，本函数内会自动校正命令长度，并添加校验码
;;;109    void ARM_PROTOCOL_TxAddFrame(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;110    {
;;;111        uint16 cc = 0;
000002  2300              MOVS     r3,#0
;;;112        uint16 i = 0;
000004  2200              MOVS     r2,#0
;;;113        uint16 head = armProtocolCB.tx.head;
000006  4e25              LDR      r6,|L14.156|
000008  f8b6473a          LDRH     r4,[r6,#0x73a]
;;;114        uint16 end = armProtocolCB.tx.end;
00000c  f8b6573c          LDRH     r5,[r6,#0x73c]
;;;115        ARM_PROTOCOL_TX_CMD_FRAME *pCmdFrame = &armProtocolCB.tx.cmdQueue[armProtocolCB.tx.end];
000010  f8b6673c          LDRH     r6,[r6,#0x73c]
000014  274d              MOVS     r7,#0x4d
000016  437e              MULS     r6,r7,r6
000018  4f21              LDR      r7,|L14.160|
00001a  eb070046          ADD      r0,r7,r6,LSL #1
;;;116        uint16 length = pCmdFrame->length;
00001e  f8b01098          LDRH     r1,[r0,#0x98]
;;;117    
;;;118        // 发送缓冲区已满，不予接收
;;;119        if ((end + 1) % ARM_PROTOCOL_TX_QUEUE_SIZE == head)
000022  1c6e              ADDS     r6,r5,#1
000024  2705              MOVS     r7,#5
000026  fb96fcf7          SDIV     r12,r6,r7
00002a  fb07661c          MLS      r6,r7,r12,r6
00002e  42a6              CMP      r6,r4
000030  d100              BNE      |L14.52|
                  |L14.50|
;;;120        {
;;;121            return;
;;;122        }
;;;123    
;;;124        // 命令帧长度不足，清除已填充的数据，退出
;;;125        if (ARM_PROTOCOL_CMD_FRAME_LENGTH_MIN - 1 > length) // 减去"校验和"1个字节
;;;126        {
;;;127            pCmdFrame->length = 0;
;;;128    
;;;129            return;
;;;130        }
;;;131    
;;;132        // 队尾命令帧已满，退出
;;;133        if (length >= ARM_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX)
;;;134        {
;;;135            return;
;;;136        }
;;;137    
;;;138        // 重新设置数据长度，系统在准备数据时，填充的"数据长度"可以为任意值，并且不需要添加校验码，在这里重新设置为正确的值
;;;139        pCmdFrame->buff[ARM_PROTOCOL_CMD_LENGTH_INDEX] = length - 3; // 重设数据长度
;;;140    
;;;141        for (i = 0; i < length; i++)
;;;142        {
;;;143            cc ^= pCmdFrame->buff[i];
;;;144        }
;;;145        pCmdFrame->buff[pCmdFrame->length++] = ~cc;
;;;146    
;;;147        armProtocolCB.tx.end++;
;;;148        armProtocolCB.tx.end %= ARM_PROTOCOL_TX_QUEUE_SIZE;
;;;149        // pCB->tx.cmdQueue[pCB->tx.end].length = 0;   //2015.12.2修改
;;;150    }
000032  bdf0              POP      {r4-r7,pc}
                  |L14.52|
000034  2903              CMP      r1,#3                 ;125
000036  da03              BGE      |L14.64|
000038  2600              MOVS     r6,#0                 ;127
00003a  f8a06098          STRH     r6,[r0,#0x98]         ;127
00003e  e7f8              B        |L14.50|
                  |L14.64|
000040  2996              CMP      r1,#0x96              ;133
000042  db00              BLT      |L14.70|
000044  e7f5              B        |L14.50|
                  |L14.70|
000046  1ece              SUBS     r6,r1,#3              ;139
000048  7106              STRB     r6,[r0,#4]            ;139
00004a  2200              MOVS     r2,#0                 ;141
00004c  e004              B        |L14.88|
                  |L14.78|
00004e  1c86              ADDS     r6,r0,#2              ;143
000050  5cb6              LDRB     r6,[r6,r2]            ;143
000052  4073              EORS     r3,r3,r6              ;143
000054  1c56              ADDS     r6,r2,#1              ;141
000056  b2b2              UXTH     r2,r6                 ;141
                  |L14.88|
000058  428a              CMP      r2,r1                 ;141
00005a  dbf8              BLT      |L14.78|
00005c  43de              MVNS     r6,r3                 ;145
00005e  b2f7              UXTB     r7,r6                 ;145
000060  f8b0c098          LDRH     r12,[r0,#0x98]        ;145
000064  f10c0601          ADD      r6,r12,#1             ;145
000068  f8a06098          STRH     r6,[r0,#0x98]         ;145
00006c  1c86              ADDS     r6,r0,#2              ;145
00006e  f806700c          STRB     r7,[r6,r12]           ;145
000072  4e0a              LDR      r6,|L14.156|
000074  f8b6673c          LDRH     r6,[r6,#0x73c]        ;147
000078  1c76              ADDS     r6,r6,#1              ;147
00007a  b2b7              UXTH     r7,r6                 ;147
00007c  4e07              LDR      r6,|L14.156|
00007e  f8a6773c          STRH     r7,[r6,#0x73c]        ;147
000082  f8b6673c          LDRH     r6,[r6,#0x73c]        ;148
000086  2705              MOVS     r7,#5                 ;148
000088  fb96fcf7          SDIV     r12,r6,r7             ;148
00008c  fb07661c          MLS      r6,r7,r12,r6          ;148
000090  b2b7              UXTH     r7,r6                 ;148
000092  4e02              LDR      r6,|L14.156|
000094  f8a6773c          STRH     r7,[r6,#0x73c]        ;148
000098  bf00              NOP      
00009a  e7ca              B        |L14.50|
;;;151    
                          ENDP

                  |L14.156|
                          DCD      armProtocolCB
                  |L14.160|
                          DCD      armProtocolCB+0x438

                          AREA ||i.ARM_PROTOCOL_TxStateProcess||, CODE, READONLY, ALIGN=2

                  ARM_PROTOCOL_TxStateProcess PROC
;;;243    // 协议层发送处理过程
;;;244    void ARM_PROTOCOL_TxStateProcess(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;245    {
;;;246        uint16 head = armProtocolCB.tx.head;
000004  4821              LDR      r0,|L15.140|
000006  f8b0473a          LDRH     r4,[r0,#0x73a]
;;;247        uint16 end = armProtocolCB.tx.end;
00000a  f8b0573c          LDRH     r5,[r0,#0x73c]
;;;248        uint16 length = armProtocolCB.tx.cmdQueue[head].length;
00000e  204d              MOVS     r0,#0x4d
000010  4360              MULS     r0,r4,r0
000012  491f              LDR      r1,|L15.144|
000014  eb010040          ADD      r0,r1,r0,LSL #1
000018  f8b06098          LDRH     r6,[r0,#0x98]
;;;249        uint8 *pCmd = armProtocolCB.tx.cmdQueue[head].buff;
00001c  204d              MOVS     r0,#0x4d
00001e  4360              MULS     r0,r4,r0
000020  eb010040          ADD      r0,r1,r0,LSL #1
000024  1c87              ADDS     r7,r0,#2
;;;250        uint16 localDeviceID = armProtocolCB.tx.cmdQueue[head].deviceID;
000026  204d              MOVS     r0,#0x4d
000028  4360              MULS     r0,r4,r0
00002a  f8318010          LDRH     r8,[r1,r0,LSL #1]
;;;251    
;;;252        // 发送缓冲区为空，说明无数据
;;;253        if (head == end)
00002e  42ac              CMP      r4,r5
000030  d101              BNE      |L15.54|
                  |L15.50|
;;;254        {
;;;255            return;
;;;256        }
;;;257    
;;;258        // 发送函数没有注册直接返回
;;;259        if (NULL == armProtocolCB.sendDataThrowService)
;;;260        {
;;;261            return;
;;;262        }
;;;263    
;;;264        // 协议层有数据需要发送到驱动层
;;;265        if (!(*armProtocolCB.sendDataThrowService)(localDeviceID, pCmd, length))
;;;266        {
;;;267            return;
;;;268        }
;;;269    
;;;270        // 发送环形队列更新位置
;;;271        armProtocolCB.tx.cmdQueue[head].length = 0;
;;;272        armProtocolCB.tx.head++;
;;;273        armProtocolCB.tx.head %= ARM_PROTOCOL_TX_QUEUE_SIZE;
;;;274    }
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L15.54|
000036  4815              LDR      r0,|L15.140|
000038  f8d00744          LDR      r0,[r0,#0x744]        ;259  ; armProtocolCB
00003c  b900              CBNZ     r0,|L15.64|
00003e  e7f8              B        |L15.50|
                  |L15.64|
000040  4812              LDR      r0,|L15.140|
000042  4632              MOV      r2,r6                 ;265
000044  4639              MOV      r1,r7                 ;265
000046  f8d03744          LDR      r3,[r0,#0x744]        ;265  ; armProtocolCB
00004a  4640              MOV      r0,r8                 ;265
00004c  4798              BLX      r3                    ;265
00004e  b900              CBNZ     r0,|L15.82|
000050  e7ef              B        |L15.50|
                  |L15.82|
000052  2200              MOVS     r2,#0                 ;271
000054  204d              MOVS     r0,#0x4d              ;271
000056  4360              MULS     r0,r4,r0              ;271
000058  490d              LDR      r1,|L15.144|
00005a  eb010040          ADD      r0,r1,r0,LSL #1       ;271
00005e  f8a02098          STRH     r2,[r0,#0x98]         ;271
000062  480a              LDR      r0,|L15.140|
000064  f8b0073a          LDRH     r0,[r0,#0x73a]        ;272
000068  1c40              ADDS     r0,r0,#1              ;272
00006a  b281              UXTH     r1,r0                 ;272
00006c  4807              LDR      r0,|L15.140|
00006e  f8a0173a          STRH     r1,[r0,#0x73a]        ;272
000072  f8b0073a          LDRH     r0,[r0,#0x73a]        ;273
000076  2105              MOVS     r1,#5                 ;273
000078  fb90f2f1          SDIV     r2,r0,r1              ;273
00007c  fb010012          MLS      r0,r1,r2,r0           ;273
000080  b281              UXTH     r1,r0                 ;273
000082  4802              LDR      r0,|L15.140|
000084  f8a0173a          STRH     r1,[r0,#0x73a]        ;273
000088  bf00              NOP      
00008a  e7d2              B        |L15.50|
;;;275    
                          ENDP

                  |L15.140|
                          DCD      armProtocolCB
                  |L15.144|
                          DCD      armProtocolCB+0x438

                          AREA ||i.dutProgressReport||, CODE, READONLY, ALIGN=2

                  dutProgressReport PROC
;;;462    
;;;463    void dutProgressReport(uint32 temp)
000000  b570              PUSH     {r4-r6,lr}
;;;464    {
000002  4605              MOV      r5,r0
;;;465        uint8 i;
;;;466    
;;;467        if (dut_info.bootUpFlag)
000004  486d              LDR      r0,|L16.444|
000006  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
000008  b160              CBZ      r0,|L16.36|
;;;468        {
;;;469            dut_info.dutProgress[1] = (dut_info.currentBootSize * 100) / dut_info.bootSize;
00000a  486c              LDR      r0,|L16.444|
00000c  6ac0              LDR      r0,[r0,#0x2c]  ; dut_info
00000e  2164              MOVS     r1,#0x64
000010  4348              MULS     r0,r1,r0
000012  496a              LDR      r1,|L16.444|
000014  6a09              LDR      r1,[r1,#0x20]  ; dut_info
000016  fbb0f0f1          UDIV     r0,r0,r1
00001a  b2c1              UXTB     r1,r0
00001c  4867              LDR      r0,|L16.444|
00001e  f8801042          STRB     r1,[r0,#0x42]
000022  e030              B        |L16.134|
                  |L16.36|
;;;470        }
;;;471        else if (dut_info.appUpFlag)
000024  4865              LDR      r0,|L16.444|
000026  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
000028  b160              CBZ      r0,|L16.68|
;;;472        {
;;;473            dut_info.dutProgress[3] = (dut_info.currentAppSize * 100) / dut_info.appSize;
00002a  4864              LDR      r0,|L16.444|
00002c  6b00              LDR      r0,[r0,#0x30]  ; dut_info
00002e  2164              MOVS     r1,#0x64
000030  4348              MULS     r0,r1,r0
000032  4962              LDR      r1,|L16.444|
000034  6a49              LDR      r1,[r1,#0x24]  ; dut_info
000036  fbb0f0f1          UDIV     r0,r0,r1
00003a  b2c1              UXTB     r1,r0
00003c  485f              LDR      r0,|L16.444|
00003e  f8801044          STRB     r1,[r0,#0x44]
000042  e020              B        |L16.134|
                  |L16.68|
;;;474        }
;;;475        else if (dut_info.uiUpFlag)
000044  485d              LDR      r0,|L16.444|
000046  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000048  b160              CBZ      r0,|L16.100|
;;;476        {
;;;477            dut_info.dutProgress[5] = (dut_info.currentUiSize * 100) / dut_info.uiSize;
00004a  485c              LDR      r0,|L16.444|
00004c  6b40              LDR      r0,[r0,#0x34]  ; dut_info
00004e  2164              MOVS     r1,#0x64
000050  4348              MULS     r0,r1,r0
000052  495a              LDR      r1,|L16.444|
000054  6a89              LDR      r1,[r1,#0x28]  ; dut_info
000056  fbb0f0f1          UDIV     r0,r0,r1
00005a  b2c1              UXTB     r1,r0
00005c  4857              LDR      r0,|L16.444|
00005e  f8801046          STRB     r1,[r0,#0x46]
000062  e010              B        |L16.134|
                  |L16.100|
;;;478        }
;;;479    
;;;480        else if (dut_info.configUpFlag)
000064  4855              LDR      r0,|L16.444|
000066  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000068  b968              CBNZ     r0,|L16.134|
;;;481        {
;;;482            // 配置信息进度只有0%和100%。
;;;483        }
;;;484        else
;;;485        {
;;;486            // 所有项升级完毕
;;;487            TIMER_KillTask(TIMER_ID_SET_DUT_PROGRESS_REPORT);
00006a  2004              MOVS     r0,#4
00006c  f7fffffe          BL       TIMER_KillTask
;;;488            TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG);
000070  2002              MOVS     r0,#2
000072  f7fffffe          BL       TIMER_KillTask
;;;489            dut_info.configUpFaile = FALSE;
000076  2000              MOVS     r0,#0
000078  4950              LDR      r1,|L16.444|
00007a  f881003b          STRB     r0,[r1,#0x3b]
;;;490            dut_info.appUpFaile = FALSE;
00007e  f8810039          STRB     r0,[r1,#0x39]
;;;491            dut_info.uiUpFaile = FALSE;
000082  f881003a          STRB     r0,[r1,#0x3a]
                  |L16.134|
;;;492        }
;;;493    
;;;494        if (dut_info.bootUpFaile) // boot升级失败
000086  484d              LDR      r0,|L16.444|
000088  f8900038          LDRB     r0,[r0,#0x38]  ; dut_info
00008c  b180              CBZ      r0,|L16.176|
;;;495        {
;;;496            dut_info.bootUpFaile = FALSE;
00008e  2000              MOVS     r0,#0
000090  494a              LDR      r1,|L16.444|
000092  f8810038          STRB     r0,[r1,#0x38]
;;;497            dut_info.dutProgress[1] = 102;
000096  2166              MOVS     r1,#0x66
000098  4848              LDR      r0,|L16.444|
00009a  f8801042          STRB     r1,[r0,#0x42]
;;;498            dut_info.currentBootSize = 0;
00009e  2000              MOVS     r0,#0
0000a0  4946              LDR      r1,|L16.444|
0000a2  62c8              STR      r0,[r1,#0x2c]  ; dut_info
;;;499            TIMER_KillTask(TIMER_ID_SET_DUT_PROGRESS_REPORT);
0000a4  2004              MOVS     r0,#4
0000a6  f7fffffe          BL       TIMER_KillTask
;;;500            dut_info.bootUpFlag = FALSE;
0000aa  2000              MOVS     r0,#0
0000ac  4943              LDR      r1,|L16.444|
0000ae  7688              STRB     r0,[r1,#0x1a]
                  |L16.176|
;;;501        }
;;;502    
;;;503        if (dut_info.appUpFaile) // app升级失败
0000b0  4842              LDR      r0,|L16.444|
0000b2  f8900039          LDRB     r0,[r0,#0x39]  ; dut_info
0000b6  b180              CBZ      r0,|L16.218|
;;;504        {
;;;505            dut_info.appUpFaile = FALSE;
0000b8  2000              MOVS     r0,#0
0000ba  4940              LDR      r1,|L16.444|
0000bc  f8810039          STRB     r0,[r1,#0x39]
;;;506            dut_info.dutProgress[3] = 102;
0000c0  2166              MOVS     r1,#0x66
0000c2  483e              LDR      r0,|L16.444|
0000c4  f8801044          STRB     r1,[r0,#0x44]
;;;507            dut_info.currentAppSize = 0;
0000c8  2000              MOVS     r0,#0
0000ca  493c              LDR      r1,|L16.444|
0000cc  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;508            TIMER_KillTask(TIMER_ID_SET_DUT_PROGRESS_REPORT);
0000ce  2004              MOVS     r0,#4
0000d0  f7fffffe          BL       TIMER_KillTask
;;;509            dut_info.appUpFlag = FALSE;
0000d4  2000              MOVS     r0,#0
0000d6  4939              LDR      r1,|L16.444|
0000d8  76c8              STRB     r0,[r1,#0x1b]
                  |L16.218|
;;;510        }
;;;511    
;;;512        if (dut_info.uiUpFaile) // ui升级失败
0000da  4838              LDR      r0,|L16.444|
0000dc  f890003a          LDRB     r0,[r0,#0x3a]  ; dut_info
0000e0  b188              CBZ      r0,|L16.262|
;;;513        {
;;;514            dut_info.dutProgress[5] = 102;
0000e2  2166              MOVS     r1,#0x66
0000e4  4835              LDR      r0,|L16.444|
0000e6  f8801046          STRB     r1,[r0,#0x46]
;;;515            dut_info.currentUiSize = 0;
0000ea  2000              MOVS     r0,#0
0000ec  4933              LDR      r1,|L16.444|
0000ee  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;516            TIMER_KillTask(TIMER_ID_SET_DUT_PROGRESS_REPORT);
0000f0  2004              MOVS     r0,#4
0000f2  f7fffffe          BL       TIMER_KillTask
;;;517            TIMER_KillTask(TIMER_ID_TIME_OUT_DETECTION); // 高标的超时检测
0000f6  2005              MOVS     r0,#5
0000f8  f7fffffe          BL       TIMER_KillTask
;;;518            dut_info.uiUpFaile = FALSE;
0000fc  2000              MOVS     r0,#0
0000fe  492f              LDR      r1,|L16.444|
000100  f881003a          STRB     r0,[r1,#0x3a]
;;;519            dut_info.uiUpFlag = FALSE;
000104  7748              STRB     r0,[r1,#0x1d]
                  |L16.262|
;;;520        }
;;;521    
;;;522        if (dut_info.configUpFaile) // config升级失败
000106  482d              LDR      r0,|L16.444|
000108  f890003b          LDRB     r0,[r0,#0x3b]  ; dut_info
00010c  b158              CBZ      r0,|L16.294|
;;;523        {
;;;524            dut_info.dutProgress[7] = 102;
00010e  2166              MOVS     r1,#0x66
000110  482a              LDR      r0,|L16.444|
000112  f8801048          STRB     r1,[r0,#0x48]
;;;525            TIMER_KillTask(TIMER_ID_SET_DUT_PROGRESS_REPORT);
000116  2004              MOVS     r0,#4
000118  f7fffffe          BL       TIMER_KillTask
;;;526            dut_info.configUpFaile = FALSE;
00011c  2000              MOVS     r0,#0
00011e  4927              LDR      r1,|L16.444|
000120  f881003b          STRB     r0,[r1,#0x3b]
;;;527            dut_info.configUpFlag = FALSE;
000124  7708              STRB     r0,[r1,#0x1c]
                  |L16.294|
;;;528        }
;;;529    
;;;530        if (dut_info.bootUpSuccesss)
000126  4825              LDR      r0,|L16.444|
000128  f8900040          LDRB     r0,[r0,#0x40]  ; dut_info
00012c  b140              CBZ      r0,|L16.320|
;;;531        {
;;;532            dut_info.dutProgress[1] = 100;
00012e  2164              MOVS     r1,#0x64
000130  4822              LDR      r0,|L16.444|
000132  f8801042          STRB     r1,[r0,#0x42]
;;;533            dut_info.currentBootSize = 0;
000136  2000              MOVS     r0,#0
000138  4920              LDR      r1,|L16.444|
00013a  62c8              STR      r0,[r1,#0x2c]  ; dut_info
;;;534            dut_info.bootUpSuccesss = FALSE;
00013c  f8810040          STRB     r0,[r1,#0x40]
                  |L16.320|
;;;535        }
;;;536    
;;;537        if (dut_info.appUpSuccesss)
000140  481e              LDR      r0,|L16.444|
000142  f890003f          LDRB     r0,[r0,#0x3f]  ; dut_info
000146  b140              CBZ      r0,|L16.346|
;;;538        {
;;;539            dut_info.dutProgress[3] = 100;
000148  2164              MOVS     r1,#0x64
00014a  481c              LDR      r0,|L16.444|
00014c  f8801044          STRB     r1,[r0,#0x44]
;;;540            dut_info.currentAppSize = 0;
000150  2000              MOVS     r0,#0
000152  491a              LDR      r1,|L16.444|
000154  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;541            dut_info.appUpSuccesss = FALSE;
000156  f881003f          STRB     r0,[r1,#0x3f]
                  |L16.346|
;;;542        }
;;;543    
;;;544        if (dut_info.uiUpSuccesss)
00015a  4818              LDR      r0,|L16.444|
00015c  f890003e          LDRB     r0,[r0,#0x3e]  ; dut_info
000160  b140              CBZ      r0,|L16.372|
;;;545        {
;;;546            dut_info.dutProgress[5] = 100;
000162  2164              MOVS     r1,#0x64
000164  4815              LDR      r0,|L16.444|
000166  f8801046          STRB     r1,[r0,#0x46]
;;;547            dut_info.currentUiSize = 0;
00016a  2000              MOVS     r0,#0
00016c  4913              LDR      r1,|L16.444|
00016e  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;548            dut_info.uiUpSuccesss = FALSE;
000170  f881003e          STRB     r0,[r1,#0x3e]
                  |L16.372|
;;;549        }
;;;550    
;;;551        if (dut_info.configUpSuccesss)
000174  4811              LDR      r0,|L16.444|
000176  f890003d          LDRB     r0,[r0,#0x3d]  ; dut_info
00017a  b138              CBZ      r0,|L16.396|
;;;552        {
;;;553            dut_info.dutProgress[7] = 100;
00017c  2164              MOVS     r1,#0x64
00017e  480f              LDR      r0,|L16.444|
000180  f8801048          STRB     r1,[r0,#0x48]
;;;554            dut_info.configUpSuccesss = FALSE;
000184  2000              MOVS     r0,#0
000186  490d              LDR      r1,|L16.444|
000188  f881003d          STRB     r0,[r1,#0x3d]
                  |L16.396|
;;;555        }
;;;556        ARM_PROTOCOL_TxAddData(ARM_PROTOCOL_CMD_HEAD);         // 添加命令头
00018c  2055              MOVS     r0,#0x55
00018e  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;557        ARM_PROTOCOL_TxAddData(UART_ARM_CMD_TOOL_DUT_PROCESS); // 添加命令字0x15
000192  2015              MOVS     r0,#0x15
000194  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;558        ARM_PROTOCOL_TxAddData(0x00);                          // 数据长度临时为0
000198  2000              MOVS     r0,#0
00019a  f7fffffe          BL       ARM_PROTOCOL_TxAddData
;;;559        for (i = 0; i < 8; i++)
00019e  2400              MOVS     r4,#0
0001a0  e006              B        |L16.432|
                  |L16.418|
;;;560        {
;;;561            ARM_PROTOCOL_TxAddData(dut_info.dutProgress[i]);
0001a2  4906              LDR      r1,|L16.444|
0001a4  3141              ADDS     r1,r1,#0x41
0001a6  5d08              LDRB     r0,[r1,r4]
0001a8  f7fffffe          BL       ARM_PROTOCOL_TxAddData
0001ac  1c60              ADDS     r0,r4,#1              ;559
0001ae  b2c4              UXTB     r4,r0                 ;559
                  |L16.432|
0001b0  2c08              CMP      r4,#8                 ;559
0001b2  dbf6              BLT      |L16.418|
;;;562        }
;;;563        ARM_PROTOCOL_TxAddFrame(); // 设置数据长度和添加校验
0001b4  f7fffffe          BL       ARM_PROTOCOL_TxAddFrame
;;;564    }
0001b8  bd70              POP      {r4-r6,pc}
;;;565    
                          ENDP

0001ba  0000              DCW      0x0000
                  |L16.444|
                          DCD      dut_info

                          AREA ||i.enterState||, CODE, READONLY, ALIGN=2

                  enterState PROC
;;;660    // 根据升级信息进入不同的状态机
;;;661    void enterState()
000000  b510              PUSH     {r4,lr}
;;;662    {
;;;663        if (dut_info.bootUpFlag || dut_info.appUpFlag || dut_info.uiUpFlag || dut_info.configUpFlag)
000002  4836              LDR      r0,|L17.220|
000004  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
000006  b948              CBNZ     r0,|L17.28|
000008  4834              LDR      r0,|L17.220|
00000a  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00000c  b930              CBNZ     r0,|L17.28|
00000e  4833              LDR      r0,|L17.220|
000010  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000012  b918              CBNZ     r0,|L17.28|
000014  4831              LDR      r0,|L17.220|
000016  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000018  2800              CMP      r0,#0
00001a  d05a              BEQ      |L17.210|
                  |L17.28|
;;;664        {
;;;665            switch (dut_info.dutBusType)
00001c  482f              LDR      r0,|L17.220|
00001e  7e40              LDRB     r0,[r0,#0x19]  ; dut_info
000020  b110              CBZ      r0,|L17.40|
000022  2801              CMP      r0,#1
000024  d153              BNE      |L17.206|
000026  e025              B        |L17.116|
                  |L17.40|
;;;666            {
;;;667            case 0: // 串口
;;;668                switch (dut_info.ID)
000028  482c              LDR      r0,|L17.220|
00002a  7d80              LDRB     r0,[r0,#0x16]  ; dut_info
00002c  1e80              SUBS     r0,r0,#2
00002e  2808              CMP      r0,#8
000030  d21d              BCS      |L17.110|
000032  e8dff000          TBB      [pc,r0]
000036  080c              DCB      0x08,0x0c
000038  0410141c          DCB      0x04,0x10,0x14,0x1c
00003c  1c18              DCB      0x1c,0x18
;;;669                {
;;;670                case DUT_TYPE_SEG:
;;;671                    // 进入数码管、段码屏升级
;;;672                    STATE_EnterState(STATE_CM_UART_SEG_UPGRADE);
00003e  2009              MOVS     r0,#9
000040  f7fffffe          BL       STATE_EnterState
;;;673                    break;
000044  e014              B        |L17.112|
;;;674                case DUT_TYPE_CM:
;;;675                    // 进入通用彩屏升级
;;;676                    STATE_EnterState(STATE_CM_UART_BC_UPGRADE);
000046  200a              MOVS     r0,#0xa
000048  f7fffffe          BL       STATE_EnterState
;;;677                    break;
00004c  e010              B        |L17.112|
;;;678                case DUT_TYPE_HUAXIN:
;;;679                    // 进入华芯微特升级
;;;680                    STATE_EnterState(STATE_HUAXIN_UART_BC_UPGRADE);
00004e  200b              MOVS     r0,#0xb
000050  f7fffffe          BL       STATE_EnterState
;;;681                    break;
000054  e00c              B        |L17.112|
;;;682                case DUT_TYPE_KAIYANG:
;;;683                    // 进入开阳升级
;;;684                    STATE_EnterState(STATE_KAIYANG_UART_BC_UPGRADE);
000056  200c              MOVS     r0,#0xc
000058  f7fffffe          BL       STATE_EnterState
;;;685                    break;
00005c  e008              B        |L17.112|
;;;686                case DUT_TYPE_LIME:
;;;687                    // 进入LIME升级
;;;688                    STATE_EnterState(STATE_LIME_UART_BC_UPGRADE);
00005e  200d              MOVS     r0,#0xd
000060  f7fffffe          BL       STATE_EnterState
;;;689                    break;
000064  e004              B        |L17.112|
;;;690                    
;;;691                case DUT_TYPE_IOT:
;;;692                    // 进入IOT升级
;;;693                    STATE_EnterState(STATE_IOT_UART_UPGRADE);
000066  200e              MOVS     r0,#0xe
000068  f7fffffe          BL       STATE_EnterState
;;;694                    break;    
00006c  e000              B        |L17.112|
                  |L17.110|
;;;695                    
;;;696                default:
;;;697                    break;
00006e  bf00              NOP      
                  |L17.112|
000070  bf00              NOP                            ;673
;;;698                }
;;;699                break;
000072  e02d              B        |L17.208|
                  |L17.116|
;;;700    
;;;701            case 1: // can
;;;702                switch (dut_info.ID)
000074  4819              LDR      r0,|L17.220|
000076  7d80              LDRB     r0,[r0,#0x16]  ; dut_info
000078  280a              CMP      r0,#0xa
00007a  d222              BCS      |L17.194|
00007c  e8dff000          TBB      [pc,r0]
000080  2105210d          DCB      0x21,0x05,0x21,0x0d
000084  09112115          DCB      0x09,0x11,0x21,0x15
000088  191d              DCB      0x19,0x1d
;;;703                {
;;;704                case DUT_TYPE_GB:
;;;705                    // 进入高标升级
;;;706                    STATE_EnterState(STATE_GAOBIAO_CAN_UPGRADE);
00008a  2002              MOVS     r0,#2
00008c  f7fffffe          BL       STATE_EnterState
;;;707                    break;
000090  e01b              B        |L17.202|
;;;708    
;;;709                case DUT_TYPE_SEG:
;;;710                    // 进入数码管、段码屏升级
;;;711                    STATE_EnterState(STATE_SEG_CAN_UPGRADE);
000092  2005              MOVS     r0,#5
000094  f7fffffe          BL       STATE_EnterState
;;;712                    break;
000098  e017              B        |L17.202|
;;;713    
;;;714                case DUT_TYPE_HUAXIN:
;;;715                    // 华芯微特升级
;;;716                    STATE_EnterState(STATE_HUAXIN_CAN_UPGRADE);
00009a  2004              MOVS     r0,#4
00009c  f7fffffe          BL       STATE_EnterState
;;;717                    break;
0000a0  e013              B        |L17.202|
;;;718    
;;;719                case DUT_TYPE_KAIYANG:
;;;720                    // 进入开阳升级
;;;721                    STATE_EnterState(STATE_KAIYANG_CAN_UPGRADE);
0000a2  2006              MOVS     r0,#6
0000a4  f7fffffe          BL       STATE_EnterState
;;;722                    break;
0000a8  e00f              B        |L17.202|
;;;723    
;;;724                case DUT_TYPE_SPARROW:
;;;725                    // 进入sparrow升级
;;;726                    STATE_EnterState(STATE_SPARROW_CAN_UPGRADE);
0000aa  2007              MOVS     r0,#7
0000ac  f7fffffe          BL       STATE_EnterState
;;;727                    break;
0000b0  e00b              B        |L17.202|
;;;728    
;;;729                case DUT_TYPE_MEIDI:
;;;730                    // 进入MEIDI升级
;;;731                    STATE_EnterState(STATE_MEIDI_CAN_UPGRADE);
0000b2  2008              MOVS     r0,#8
0000b4  f7fffffe          BL       STATE_EnterState
;;;732                    break;
0000b8  e007              B        |L17.202|
;;;733    
;;;734                case DUT_TYPE_IOT:
;;;735                    // 进入IOT升级
;;;736                    STATE_EnterState(STATE_IOT_CAN_UPGRADE);
0000ba  200f              MOVS     r0,#0xf
0000bc  f7fffffe          BL       STATE_EnterState
;;;737                    break;    
0000c0  e003              B        |L17.202|
                  |L17.194|
;;;738                    
;;;739                default:
;;;740                    // 进入通用can升级
;;;741                    STATE_EnterState(STATE_CM_CAN_UPGRADE);
0000c2  2003              MOVS     r0,#3
0000c4  f7fffffe          BL       STATE_EnterState
;;;742                    break;
0000c8  bf00              NOP      
                  |L17.202|
0000ca  bf00              NOP                            ;707
;;;743                }
;;;744                break;
0000cc  e000              B        |L17.208|
                  |L17.206|
;;;745    
;;;746            default:
;;;747                break;
0000ce  bf00              NOP      
                  |L17.208|
0000d0  e002              B        |L17.216|
                  |L17.210|
;;;748            }
;;;749        }
;;;750        else
;;;751        {
;;;752            STATE_EnterState(STATE_STANDBY);
0000d2  2001              MOVS     r0,#1
0000d4  f7fffffe          BL       STATE_EnterState
                  |L17.216|
;;;753        }
;;;754    }
0000d8  bd10              POP      {r4,pc}
;;;755                
                          ENDP

0000da  0000              DCW      0x0000
                  |L17.220|
                          DCD      dut_info

                          AREA ||i.setDutProgressReportInfo||, CODE, READONLY, ALIGN=2

                  setDutProgressReportInfo PROC
;;;606    // 设置进度上报信息
;;;607    void setDutProgressReportInfo()
000000  b51c              PUSH     {r2-r4,lr}
;;;608    {
;;;609        dut_info.dutProgress[0] = 0;   // boot
000002  2000              MOVS     r0,#0
000004  4923              LDR      r1,|L18.148|
000006  f8810041          STRB     r0,[r1,#0x41]
;;;610    //  dut_info.dutProgress[1] = 101; // boot
;;;611        dut_info.dutProgress[2] = 1;   // app
00000a  2101              MOVS     r1,#1
00000c  4821              LDR      r0,|L18.148|
00000e  f8801043          STRB     r1,[r0,#0x43]
;;;612        dut_info.dutProgress[4] = 2;   // ui
000012  2102              MOVS     r1,#2
000014  f8801045          STRB     r1,[r0,#0x45]
;;;613        dut_info.dutProgress[6] = 3;   // config
000018  2103              MOVS     r1,#3
00001a  f8801047          STRB     r1,[r0,#0x47]
;;;614    
;;;615        if (!dut_info.bootUpFlag)
00001e  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
000020  b920              CBNZ     r0,|L18.44|
;;;616        {
;;;617            dut_info.dutProgress[1] = 101;
000022  2165              MOVS     r1,#0x65
000024  481b              LDR      r0,|L18.148|
000026  f8801042          STRB     r1,[r0,#0x42]
00002a  e003              B        |L18.52|
                  |L18.44|
;;;618        }
;;;619        else
;;;620        {
;;;621            dut_info.dutProgress[1] = 0;
00002c  2100              MOVS     r1,#0
00002e  4819              LDR      r0,|L18.148|
000030  f8801042          STRB     r1,[r0,#0x42]
                  |L18.52|
;;;622        }
;;;623    
;;;624        if (!dut_info.appUpFlag)
000034  4817              LDR      r0,|L18.148|
000036  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
000038  b920              CBNZ     r0,|L18.68|
;;;625        {
;;;626            dut_info.dutProgress[3] = 101;
00003a  2165              MOVS     r1,#0x65
00003c  4815              LDR      r0,|L18.148|
00003e  f8801044          STRB     r1,[r0,#0x44]
000042  e003              B        |L18.76|
                  |L18.68|
;;;627        }
;;;628        else
;;;629        {
;;;630            dut_info.dutProgress[3] = 0;
000044  2100              MOVS     r1,#0
000046  4813              LDR      r0,|L18.148|
000048  f8801044          STRB     r1,[r0,#0x44]
                  |L18.76|
;;;631        }
;;;632    
;;;633        if (!dut_info.uiUpFlag)
00004c  4811              LDR      r0,|L18.148|
00004e  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000050  b920              CBNZ     r0,|L18.92|
;;;634        {
;;;635            dut_info.dutProgress[5] = 101;
000052  2165              MOVS     r1,#0x65
000054  480f              LDR      r0,|L18.148|
000056  f8801046          STRB     r1,[r0,#0x46]
00005a  e003              B        |L18.100|
                  |L18.92|
;;;636        }
;;;637        else
;;;638        {
;;;639            dut_info.dutProgress[5] = 0;
00005c  2100              MOVS     r1,#0
00005e  480d              LDR      r0,|L18.148|
000060  f8801046          STRB     r1,[r0,#0x46]
                  |L18.100|
;;;640        }
;;;641    
;;;642        if (!dut_info.configUpFlag)
000064  480b              LDR      r0,|L18.148|
000066  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000068  b920              CBNZ     r0,|L18.116|
;;;643        {
;;;644            dut_info.dutProgress[7] = 101;
00006a  2165              MOVS     r1,#0x65
00006c  4809              LDR      r0,|L18.148|
00006e  f8801048          STRB     r1,[r0,#0x48]
000072  e003              B        |L18.124|
                  |L18.116|
;;;645        }
;;;646        else
;;;647        {
;;;648            dut_info.dutProgress[7] = 0;
000074  2100              MOVS     r1,#0
000076  4807              LDR      r0,|L18.148|
000078  f8801048          STRB     r1,[r0,#0x48]
                  |L18.124|
;;;649        }
;;;650    
;;;651        // 进度上报
;;;652        TIMER_AddTask(TIMER_ID_SET_DUT_PROGRESS_REPORT,
00007c  2001              MOVS     r0,#1
00007e  1e81              SUBS     r1,r0,#2
000080  4603              MOV      r3,r0
000082  4a05              LDR      r2,|L18.152|
000084  e9cd1000          STRD     r1,r0,[sp,#0]
000088  f44f7196          MOV      r1,#0x12c
00008c  2004              MOVS     r0,#4
00008e  f7fffffe          BL       TIMER_AddTask
;;;653                      300,
;;;654                      dutProgressReport,
;;;655                      TRUE,
;;;656                      TIMER_LOOP_FOREVER,
;;;657                      ACTION_MODE_ADD_TO_QUEUE);
;;;658    }
000092  bd1c              POP      {r2-r4,pc}
;;;659    
                          ENDP

                  |L18.148|
                          DCD      dut_info
                  |L18.152|
                          DCD      dutProgressReport

                          AREA ||i.setUpItem||, CODE, READONLY, ALIGN=2

                  setUpItem PROC
;;;566    // 升级项控制
;;;567    void setUpItem(uint8 upItem, uint8 ctrlState)
000000  2200              MOVS     r2,#0
;;;568    {
;;;569        dut_info.appUpFlag = FALSE;
000002  4b15              LDR      r3,|L19.88|
000004  76da              STRB     r2,[r3,#0x1b]
;;;570        dut_info.uiUpFlag = FALSE;
000006  775a              STRB     r2,[r3,#0x1d]
;;;571        dut_info.configUpFlag = FALSE;
000008  771a              STRB     r2,[r3,#0x1c]
;;;572        dut_info.bootUpFlag = FALSE;
00000a  769a              STRB     r2,[r3,#0x1a]
;;;573    
;;;574        // 清除状态
;;;575        dut_info.currentAppSize = 0;
00000c  631a              STR      r2,[r3,#0x30]  ; dut_info
;;;576        dut_info.currentUiSize = 0;
00000e  635a              STR      r2,[r3,#0x34]  ; dut_info
;;;577        dut_info.currentBootSize = 0;
000010  62da              STR      r2,[r3,#0x2c]  ; dut_info
;;;578    
;;;579        if (1 == ctrlState)
000012  2901              CMP      r1,#1
000014  d11f              BNE      |L19.86|
;;;580        {
;;;581            if (0x01 == (upItem & 0x01)) // 升级boot
000016  f0000201          AND      r2,r0,#1
00001a  b11a              CBZ      r2,|L19.36|
;;;582            {
;;;583                dut_info.bootUpFlag = TRUE;
00001c  2201              MOVS     r2,#1
00001e  769a              STRB     r2,[r3,#0x1a]
;;;584                dut_info.currentBootSize = 0;
000020  2200              MOVS     r2,#0
000022  62da              STR      r2,[r3,#0x2c]  ; dut_info
                  |L19.36|
;;;585            }
;;;586    
;;;587            if (0x02 == (upItem & 0x02)) // 升级app
000024  f0000202          AND      r2,r0,#2
000028  2a02              CMP      r2,#2
00002a  d104              BNE      |L19.54|
;;;588            {
;;;589                dut_info.appUpFlag = TRUE;
00002c  2201              MOVS     r2,#1
00002e  4b0a              LDR      r3,|L19.88|
000030  76da              STRB     r2,[r3,#0x1b]
;;;590                dut_info.currentAppSize = 0;
000032  2200              MOVS     r2,#0
000034  631a              STR      r2,[r3,#0x30]  ; dut_info
                  |L19.54|
;;;591            }
;;;592    
;;;593            if (0x04 == (upItem & 0x04)) // 升级ui
000036  f0000204          AND      r2,r0,#4
00003a  2a04              CMP      r2,#4
00003c  d104              BNE      |L19.72|
;;;594            {
;;;595                dut_info.uiUpFlag = TRUE;
00003e  2201              MOVS     r2,#1
000040  4b05              LDR      r3,|L19.88|
000042  775a              STRB     r2,[r3,#0x1d]
;;;596                dut_info.currentUiSize = 0;
000044  2200              MOVS     r2,#0
000046  635a              STR      r2,[r3,#0x34]  ; dut_info
                  |L19.72|
;;;597            }
;;;598    
;;;599            if (0x08 == (upItem & 0x08)) // 升级config
000048  f0000208          AND      r2,r0,#8
00004c  2a08              CMP      r2,#8
00004e  d102              BNE      |L19.86|
;;;600            {
;;;601                dut_info.configUpFlag = TRUE;
000050  2201              MOVS     r2,#1
000052  4b01              LDR      r3,|L19.88|
000054  771a              STRB     r2,[r3,#0x1c]
                  |L19.86|
;;;602            }
;;;603        }
;;;604    }
000056  4770              BX       lr
;;;605    
                          ENDP

                  |L19.88|
                          DCD      dut_info

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  armProtocolCB
                          %        1872
                  uiBuff
                          %        200

                          AREA ||.data||, DATA, ALIGN=2

                  CRC32
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  allPacketSize
                          DCD      0x00000000
                  allPacket
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  currPacketNum
                          DCD      0x0000ffff

;*** Start embedded assembler ***

#line 1 "User\\ArmProtocol.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_ArmProtocol_c_uiBuff____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___13_ArmProtocol_c_uiBuff____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_ArmProtocol_c_uiBuff____REVSH|
#line 128
|__asm___13_ArmProtocol_c_uiBuff____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
