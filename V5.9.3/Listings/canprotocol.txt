; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\canprotocol.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\canprotocol.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\canprotocol.crf User\CanProtocol.c]
                          THUMB

                          AREA ||i.CAN_PGN_RequestGetData||, CODE, READONLY, ALIGN=2

                  CAN_PGN_RequestGetData PROC
;;;552    // state : 当前状态   DestAddress:目的地址   SourceAddress:源地址
;;;553    void CAN_PGN_RequestGetData(STATE_PGN state, uint8 PGN, uint8 DestAddress, uint8 SourceAddress)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;554    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;555    	uint16 dataLength = 0, dataNumber = 0;
00000c  2400              MOVS     r4,#0
00000e  2700              MOVS     r7,#0
;;;556    
;;;557    	canProtocolCB.preState = canProtocolCB.state;
000010  484c              LDR      r0,|L1.324|
000012  f8901044          LDRB     r1,[r0,#0x44]  ; canProtocolCB
000016  f8801045          STRB     r1,[r0,#0x45]
;;;558    	canProtocolCB.state = state;
00001a  f8805044          STRB     r5,[r0,#0x44]
;;;559    
;;;560    	switch (PGN)
00001e  f1a60050          SUB      r0,r6,#0x50
000022  2806              CMP      r0,#6
000024  d22b              BCS      |L1.126|
000026  e8dff000          TBB      [pc,r0]
00002a  032a              DCB      0x03,0x2a
00002c  15161718          DCB      0x15,0x16,0x17,0x18
;;;561    	{
;;;562    	// 升级数据包大小下发
;;;563    	case 0x50:
;;;564    		// 发送的字节数
;;;565    		dataLength = 28;
000030  241c              MOVS     r4,#0x1c
;;;566    
;;;567    		// 发送的总包数
;;;568    		if (dataLength % 7)
000032  2007              MOVS     r0,#7
000034  fb94f1f0          SDIV     r1,r4,r0
000038  fb004011          MLS      r0,r0,r1,r4
00003c  b128              CBZ      r0,|L1.74|
;;;569    		{
;;;570    			dataNumber = (dataLength / 7) + 1;
00003e  2007              MOVS     r0,#7
000040  fb94f0f0          SDIV     r0,r4,r0
000044  1c40              ADDS     r0,r0,#1
000046  b287              UXTH     r7,r0
000048  e003              B        |L1.82|
                  |L1.74|
;;;571    		}
;;;572    		else
;;;573    		{
;;;574    			dataNumber = dataLength / 7;
00004a  2007              MOVS     r0,#7
00004c  fb94f0f0          SDIV     r0,r4,r0
000050  b287              UXTH     r7,r0
                  |L1.82|
;;;575    		}
;;;576    
;;;577    		break;
000052  e015              B        |L1.128|
;;;578    
;;;579    	case 0x52:
;;;580    	case 0x53:
000054  bf00              NOP      
;;;581    	case 0x54:
000056  bf00              NOP      
;;;582    	case 0x55:
000058  bf00              NOP      
;;;583    		// 发送的字节数
;;;584    		dataLength = 23;
00005a  2417              MOVS     r4,#0x17
;;;585    
;;;586    		// 发送的总包数
;;;587    		if (dataLength % 7)
00005c  2007              MOVS     r0,#7
00005e  fb94f1f0          SDIV     r1,r4,r0
000062  fb004011          MLS      r0,r0,r1,r4
000066  b128              CBZ      r0,|L1.116|
;;;588    		{
;;;589    			dataNumber = (dataLength / 7) + 1;
000068  2007              MOVS     r0,#7
00006a  fb94f0f0          SDIV     r0,r4,r0
00006e  1c40              ADDS     r0,r0,#1
000070  b287              UXTH     r7,r0
000072  e003              B        |L1.124|
                  |L1.116|
;;;590    		}
;;;591    		else
;;;592    		{
;;;593    			dataNumber = dataLength / 7;
000074  2007              MOVS     r0,#7
000076  fb94f0f0          SDIV     r0,r4,r0
00007a  b287              UXTH     r7,r0
                  |L1.124|
;;;594    		}
;;;595    		break;
00007c  e000              B        |L1.128|
                  |L1.126|
;;;596    
;;;597    	default:
;;;598    		break;
00007e  bf00              NOP      
                  |L1.128|
000080  bf00              NOP                            ;577
;;;599    	}
;;;600    
;;;601    	switch (state)
000082  b135              CBZ      r5,|L1.146|
000084  2d05              CMP      r5,#5
000086  d005              BEQ      |L1.148|
000088  2d06              CMP      r5,#6
00008a  d015              BEQ      |L1.184|
00008c  2d07              CMP      r5,#7
00008e  d155              BNE      |L1.316|
000090  e033              B        |L1.250|
                  |L1.146|
;;;602    	{
;;;603    	case STATE_PGN_NULL:
;;;604    
;;;605    		break;
000092  e054              B        |L1.318|
                  |L1.148|
;;;606    
;;;607    	// 请求PGN数据 第一步:发送请求PGN  EA00
;;;608    	case STATE_PGN_GET_1:
;;;609    
;;;610    		CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEA, DestAddress, SourceAddress);
000094  464b              MOV      r3,r9
000096  4642              MOV      r2,r8
000098  21ea              MOVS     r1,#0xea
00009a  2006              MOVS     r0,#6
00009c  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;611    
;;;612    		CAN_PROTOCOL_TxAddData(0x00);
0000a0  2000              MOVS     r0,#0
0000a2  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;613    
;;;614    		CAN_PROTOCOL_TxAddData(PGN);
0000a6  4630              MOV      r0,r6
0000a8  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;615    
;;;616    		CAN_PROTOCOL_TxAddData(0x00);
0000ac  2000              MOVS     r0,#0
0000ae  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;617    
;;;618    		CAN_PROTOCOL_TxAddFrame();
0000b2  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
;;;619    		break;
0000b6  e042              B        |L1.318|
                  |L1.184|
;;;620    
;;;621    	// 请求PGN数据 第二步:发送请求PGN  EC00
;;;622    	case STATE_PGN_GET_2:
;;;623    
;;;624    		CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEC, DestAddress, SourceAddress);
0000b8  464b              MOV      r3,r9
0000ba  4642              MOV      r2,r8
0000bc  21ec              MOVS     r1,#0xec
0000be  2006              MOVS     r0,#6
0000c0  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;625    
;;;626    		CAN_PROTOCOL_TxAddData(0x11); // 准许发送
0000c4  2011              MOVS     r0,#0x11
0000c6  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;627    
;;;628    		CAN_PROTOCOL_TxAddData(dataNumber);
0000ca  b2f8              UXTB     r0,r7
0000cc  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;629    
;;;630    		CAN_PROTOCOL_TxAddData(0x01);
0000d0  2001              MOVS     r0,#1
0000d2  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;631    
;;;632    		CAN_PROTOCOL_TxAddData(0xFF);
0000d6  20ff              MOVS     r0,#0xff
0000d8  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;633    
;;;634    		CAN_PROTOCOL_TxAddData(0xFF);
0000dc  20ff              MOVS     r0,#0xff
0000de  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;635    
;;;636    		CAN_PROTOCOL_TxAddData(0);
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;637    
;;;638    		CAN_PROTOCOL_TxAddData(PGN);
0000e8  4630              MOV      r0,r6
0000ea  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;639    
;;;640    		CAN_PROTOCOL_TxAddData(0);
0000ee  2000              MOVS     r0,#0
0000f0  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;641    
;;;642    		CAN_PROTOCOL_TxAddFrame();
0000f4  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
;;;643    		break;
0000f8  e021              B        |L1.318|
                  |L1.250|
;;;644    
;;;645    	// 请求PGN数据 第三步:发送请求PGN  EC00
;;;646    	case STATE_PGN_GET_3:
;;;647    
;;;648    		CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEC, DestAddress, SourceAddress);
0000fa  464b              MOV      r3,r9
0000fc  4642              MOV      r2,r8
0000fe  21ec              MOVS     r1,#0xec
000100  2006              MOVS     r0,#6
000102  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;649    
;;;650    		CAN_PROTOCOL_TxAddData(0x13); // 结束应答
000106  2013              MOVS     r0,#0x13
000108  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;651    
;;;652    		CAN_PROTOCOL_TxAddData(dataLength & 0xFF); // 	字节数
00010c  b2e0              UXTB     r0,r4
00010e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;653    
;;;654    		CAN_PROTOCOL_TxAddData((dataLength >> 8) & 0xFF);
000112  0a20              LSRS     r0,r4,#8
000114  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;655    
;;;656    		CAN_PROTOCOL_TxAddData(dataNumber); // 	包数
000118  b2f8              UXTB     r0,r7
00011a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;657    
;;;658    		CAN_PROTOCOL_TxAddData(0x01); // 数据校验成功
00011e  2001              MOVS     r0,#1
000120  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;659    
;;;660    		CAN_PROTOCOL_TxAddData(0);
000124  2000              MOVS     r0,#0
000126  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;661    
;;;662    		CAN_PROTOCOL_TxAddData(PGN);
00012a  4630              MOV      r0,r6
00012c  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;663    
;;;664    		CAN_PROTOCOL_TxAddData(0);
000130  2000              MOVS     r0,#0
000132  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;665    
;;;666    		CAN_PROTOCOL_TxAddFrame();
000136  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
;;;667    		break;
00013a  e000              B        |L1.318|
                  |L1.316|
;;;668    
;;;669    	default:
;;;670    		break;
00013c  bf00              NOP      
                  |L1.318|
00013e  bf00              NOP                            ;605
;;;671    	}
;;;672    }
000140  e8bd83f0          POP      {r4-r9,pc}
;;;673    
                          ENDP

                  |L1.324|
                          DCD      canProtocolCB+0x2000

                          AREA ||i.CAN_PGN_RequestSendData||, CODE, READONLY, ALIGN=2

                  CAN_PGN_RequestSendData PROC
;;;444    // state : 当前状态   DestAddress:目的地址   SourceAddress:源地址
;;;445    void CAN_PGN_RequestSendData(STATE_PGN state, uint8 PGN, uint8 DestAddress, uint8 SourceAddress)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;446    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;447    	uint16 dataLength = 0, dataNumber = 0;
00000c  2700              MOVS     r7,#0
00000e  46b8              MOV      r8,r7
;;;448    	uint8 number = 1;
000010  2401              MOVS     r4,#1
;;;449    
;;;450    	canProtocolCB.preState = canProtocolCB.state;
000012  4852              LDR      r0,|L2.348|
000014  f8901044          LDRB     r1,[r0,#0x44]  ; canProtocolCB
000018  f8801045          STRB     r1,[r0,#0x45]
;;;451    	canProtocolCB.state = state;
00001c  f8805044          STRB     r5,[r0,#0x44]
;;;452    
;;;453    	switch (PGN)
000020  2e55              CMP      r6,#0x55
000022  d016              BEQ      |L2.82|
000024  dc06              BGT      |L2.52|
000026  2e52              CMP      r6,#0x52
000028  d010              BEQ      |L2.76|
00002a  2e53              CMP      r6,#0x53
00002c  d00f              BEQ      |L2.78|
00002e  2e54              CMP      r6,#0x54
000030  d113              BNE      |L2.90|
000032  e00d              B        |L2.80|
                  |L2.52|
000034  2eed              CMP      r6,#0xed
000036  d005              BEQ      |L2.68|
000038  2eef              CMP      r6,#0xef
00003a  d10e              BNE      |L2.90|
;;;454    	{
;;;455    	// 升级包数据大小
;;;456    	case 0xEF:
;;;457    
;;;458    		// 发送的字节数
;;;459    		dataLength = 132;
00003c  2784              MOVS     r7,#0x84
;;;460    
;;;461    		// 发送的总包数
;;;462    		dataNumber = 19;
00003e  f04f0813          MOV      r8,#0x13
;;;463    
;;;464    		break;
000042  e00b              B        |L2.92|
                  |L2.68|
;;;465    
;;;466    	// 下发总成编码
;;;467    	case 0xED:
;;;468    
;;;469    		// 发送的字节数
;;;470    		dataLength = 43;
000044  272b              MOVS     r7,#0x2b
;;;471    
;;;472    		// 发送的总包数
;;;473    		dataNumber = 7;
000046  f04f0807          MOV      r8,#7
;;;474    		break;
00004a  e007              B        |L2.92|
                  |L2.76|
;;;475    
;;;476    	case 0x52:
;;;477    	case 0x53:
00004c  bf00              NOP      
                  |L2.78|
;;;478    	case 0x54:
00004e  bf00              NOP      
                  |L2.80|
;;;479    	case 0x55:
000050  bf00              NOP      
                  |L2.82|
;;;480    		// 发送的字节数
;;;481    		dataLength = 23;
000052  2717              MOVS     r7,#0x17
;;;482    
;;;483    		// 发送的总包数
;;;484    		dataNumber = 4;
000054  f04f0804          MOV      r8,#4
;;;485    		break;
000058  e000              B        |L2.92|
                  |L2.90|
;;;486    	default:
;;;487    		break;
00005a  bf00              NOP      
                  |L2.92|
00005c  bf00              NOP                            ;464
;;;488    	}
;;;489    
;;;490    	switch (state)
00005e  b125              CBZ      r5,|L2.106|
000060  2d01              CMP      r5,#1
000062  d003              BEQ      |L2.108|
000064  2d02              CMP      r5,#2
000066  d174              BNE      |L2.338|
000068  e022              B        |L2.176|
                  |L2.106|
;;;491    	{
;;;492    	case STATE_PGN_NULL:
;;;493    
;;;494    		break;
00006a  e073              B        |L2.340|
                  |L2.108|
;;;495    
;;;496    	// 发送PGN数据第一步:请求发送
;;;497    	case STATE_PGN_SEND_1:
;;;498    
;;;499    		CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEC, DestAddress, SourceAddress);
00006c  4653              MOV      r3,r10
00006e  464a              MOV      r2,r9
000070  21ec              MOVS     r1,#0xec
000072  2006              MOVS     r0,#6
000074  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;500    
;;;501    		CAN_PROTOCOL_TxAddData(0x10);
000078  2010              MOVS     r0,#0x10
00007a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;502    
;;;503    		CAN_PROTOCOL_TxAddData(dataLength & 0xFF);
00007e  b2f8              UXTB     r0,r7
000080  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;504    
;;;505    		CAN_PROTOCOL_TxAddData((dataLength >> 8) & 0xFF);
000084  0a38              LSRS     r0,r7,#8
000086  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;506    
;;;507    		CAN_PROTOCOL_TxAddData(dataNumber);
00008a  f00800ff          AND      r0,r8,#0xff
00008e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;508    
;;;509    		CAN_PROTOCOL_TxAddData(0xFF);
000092  20ff              MOVS     r0,#0xff
000094  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;510    
;;;511    		CAN_PROTOCOL_TxAddData(0);
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;512    
;;;513    		CAN_PROTOCOL_TxAddData(PGN);
00009e  4630              MOV      r0,r6
0000a0  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;514    
;;;515    		CAN_PROTOCOL_TxAddData(0);
0000a4  2000              MOVS     r0,#0
0000a6  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;516    
;;;517    		CAN_PROTOCOL_TxAddFrame();
0000aa  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
;;;518    		break;
0000ae  e051              B        |L2.340|
                  |L2.176|
;;;519    
;;;520    	// 发送PGN数据第二步:目的地址回应允许后下发对应的数据
;;;521    	case STATE_PGN_SEND_2:
;;;522    
;;;523    		for (number = 1; number <= dataNumber; number++)
0000b0  2401              MOVS     r4,#1
0000b2  e04a              B        |L2.330|
                  |L2.180|
;;;524    		{
;;;525    			CAN_PROTOCOL_TxAddNewFrame(0x06, 0xEB, DestAddress, SourceAddress);
0000b4  4653              MOV      r3,r10
0000b6  464a              MOV      r2,r9
0000b8  21eb              MOVS     r1,#0xeb
0000ba  2006              MOVS     r0,#6
0000bc  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;526    
;;;527    			CAN_PROTOCOL_TxAddData(number);
0000c0  4620              MOV      r0,r4
0000c2  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;528    
;;;529    			CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 0]);
0000c6  1e61              SUBS     r1,r4,#1
0000c8  ebc101c1          RSB      r1,r1,r1,LSL #3
0000cc  4a23              LDR      r2,|L2.348|
0000ce  3246              ADDS     r2,r2,#0x46
0000d0  5c50              LDRB     r0,[r2,r1]
0000d2  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;530    
;;;531    			CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 1]);
0000d6  1e61              SUBS     r1,r4,#1
0000d8  ebc101c1          RSB      r1,r1,r1,LSL #3
0000dc  1c49              ADDS     r1,r1,#1
0000de  4a1f              LDR      r2,|L2.348|
0000e0  3246              ADDS     r2,r2,#0x46
0000e2  5c50              LDRB     r0,[r2,r1]
0000e4  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;532    
;;;533    			CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 2]);
0000e8  1e61              SUBS     r1,r4,#1
0000ea  ebc101c1          RSB      r1,r1,r1,LSL #3
0000ee  1c89              ADDS     r1,r1,#2
0000f0  4a1a              LDR      r2,|L2.348|
0000f2  3246              ADDS     r2,r2,#0x46
0000f4  5c50              LDRB     r0,[r2,r1]
0000f6  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;534    
;;;535    			CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 3]);
0000fa  1e61              SUBS     r1,r4,#1
0000fc  ebc101c1          RSB      r1,r1,r1,LSL #3
000100  1cc9              ADDS     r1,r1,#3
000102  4a16              LDR      r2,|L2.348|
000104  3246              ADDS     r2,r2,#0x46
000106  5c50              LDRB     r0,[r2,r1]
000108  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;536    
;;;537    			CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 4]);
00010c  1e61              SUBS     r1,r4,#1
00010e  ebc101c1          RSB      r1,r1,r1,LSL #3
000112  1d09              ADDS     r1,r1,#4
000114  4a11              LDR      r2,|L2.348|
000116  3246              ADDS     r2,r2,#0x46
000118  5c50              LDRB     r0,[r2,r1]
00011a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;538    
;;;539    			CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 5]);
00011e  1e61              SUBS     r1,r4,#1
000120  ebc101c1          RSB      r1,r1,r1,LSL #3
000124  1d49              ADDS     r1,r1,#5
000126  4a0d              LDR      r2,|L2.348|
000128  3246              ADDS     r2,r2,#0x46
00012a  5c50              LDRB     r0,[r2,r1]
00012c  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;540    
;;;541    			CAN_PROTOCOL_TxAddData(canProtocolCB.sendBuff[((number - 1) * 7) + 6]);
000130  1e61              SUBS     r1,r4,#1
000132  ebc101c1          RSB      r1,r1,r1,LSL #3
000136  1d89              ADDS     r1,r1,#6
000138  4a08              LDR      r2,|L2.348|
00013a  3246              ADDS     r2,r2,#0x46
00013c  5c50              LDRB     r0,[r2,r1]
00013e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;542    
;;;543    			CAN_PROTOCOL_TxAddFrame();
000142  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
000146  1c60              ADDS     r0,r4,#1              ;523
000148  b2c4              UXTB     r4,r0                 ;523
                  |L2.330|
00014a  4544              CMP      r4,r8                 ;523
00014c  ddb2              BLE      |L2.180|
;;;544    		}
;;;545    
;;;546    		break;
00014e  e001              B        |L2.340|
000150  e7ff              B        |L2.338|
                  |L2.338|
;;;547    	default:
;;;548    		break;
000152  bf00              NOP      
                  |L2.340|
000154  bf00              NOP                            ;494
;;;549    	}
;;;550    }
000156  e8bd87f0          POP      {r4-r10,pc}
;;;551    
                          ENDP

00015a  0000              DCW      0x0000
                  |L2.348|
                          DCD      canProtocolCB+0x2000

                          AREA ||i.CAN_PROTOCOL_AddSum||, CODE, READONLY, ALIGN=1

                  CAN_PROTOCOL_AddSum PROC
;;;354    // 对传入的命令帧进行校验，返回校验结果
;;;355    BOOL CAN_PROTOCOL_AddSum(uint8 *buff, uint32 len)
000000  b510              PUSH     {r4,lr}
;;;356    {
000002  4602              MOV      r2,r0
;;;357    	uint8 cc = 0;
000004  2400              MOVS     r4,#0
;;;358    	uint16 i = 0;
000006  2300              MOVS     r3,#0
;;;359    
;;;360    	if (NULL == buff)
000008  b90a              CBNZ     r2,|L3.14|
;;;361    	{
;;;362    		return FALSE;
00000a  2000              MOVS     r0,#0
                  |L3.12|
;;;363    	}
;;;364    
;;;365    	// 从命令段长度开始(节点ID已经单独发送了，所以i为3)，到校验码之前的一个字节，依次进行异或运算
;;;366    	for (i = CAN_PROTOCOL_TX_CMD_LENGTH_INDEX; i < len; i++)
;;;367    	{
;;;368    		cc ^= buff[i];
;;;369    	}
;;;370    
;;;371    	// 添加校验码
;;;372    	buff[len] = cc;
;;;373    
;;;374    	return TRUE;
;;;375    }
00000c  bd10              POP      {r4,pc}
                  |L3.14|
00000e  2303              MOVS     r3,#3                 ;366
000010  e003              B        |L3.26|
                  |L3.18|
000012  5cd0              LDRB     r0,[r2,r3]            ;368
000014  4044              EORS     r4,r4,r0              ;368
000016  1c58              ADDS     r0,r3,#1              ;366
000018  b283              UXTH     r3,r0                 ;366
                  |L3.26|
00001a  428b              CMP      r3,r1                 ;366
00001c  d3f9              BCC      |L3.18|
00001e  5454              STRB     r4,[r2,r1]            ;372
000020  2001              MOVS     r0,#1                 ;374
000022  e7f3              B        |L3.12|
;;;376    
                          ENDP


                          AREA ||i.CAN_PROTOCOL_CheckSum||, CODE, READONLY, ALIGN=1

                  CAN_PROTOCOL_CheckSum PROC
;;;328    // 对传入的命令帧进行校验，返回校验结果
;;;329    BOOL CAN_PROTOCOL_CheckSum(uint8 *buff, uint32 len)
000000  b510              PUSH     {r4,lr}
;;;330    {
000002  4602              MOV      r2,r0
;;;331    	uint8 cc = 0;
000004  2400              MOVS     r4,#0
;;;332    	uint16 i = 0;
000006  2300              MOVS     r3,#0
;;;333    
;;;334    	if (NULL == buff)
000008  b90a              CBNZ     r2,|L4.14|
;;;335    	{
;;;336    		return FALSE;
00000a  2000              MOVS     r0,#0
                  |L4.12|
;;;337    	}
;;;338    
;;;339    	// 从命令段长度开始(节点ID已经在解析前去掉了，所以i为3)，到校验码之前的一个字节，依次进行异或运算
;;;340    	for (i = CAN_PROTOCOL_RX_CMD_LENGTH_INDEX; i < (len - CAN_PROTOCOL_CHECK_BYTE - CAN_PROTOCOL_TAIL_BYTE); i++)
;;;341    	{
;;;342    		cc ^= buff[i];
;;;343    	}
;;;344    
;;;345    	// 判断计算得到的校验码与命令帧中的校验码是否相同
;;;346    	if (buff[len - 2] != cc)
;;;347    	{
;;;348    		return FALSE;
;;;349    	}
;;;350    
;;;351    	return TRUE;
;;;352    }
00000c  bd10              POP      {r4,pc}
                  |L4.14|
00000e  2303              MOVS     r3,#3                 ;340
000010  e003              B        |L4.26|
                  |L4.18|
000012  5cd0              LDRB     r0,[r2,r3]            ;342
000014  4044              EORS     r4,r4,r0              ;342
000016  1c58              ADDS     r0,r3,#1              ;340
000018  b283              UXTH     r3,r0                 ;340
                  |L4.26|
00001a  1e88              SUBS     r0,r1,#2              ;340
00001c  4298              CMP      r0,r3                 ;340
00001e  d8f8              BHI      |L4.18|
000020  5c10              LDRB     r0,[r2,r0]            ;346
000022  42a0              CMP      r0,r4                 ;346
000024  d001              BEQ      |L4.42|
000026  2000              MOVS     r0,#0                 ;348
000028  e7f0              B        |L4.12|
                  |L4.42|
00002a  2001              MOVS     r0,#1                 ;351
00002c  e7ee              B        |L4.12|
;;;353    
                          ENDP


                          AREA ||i.CAN_PROTOCOL_CmdFrameProcess||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_CmdFrameProcess PROC
;;;261    // CAN命令帧缓冲区处理
;;;262    void CAN_PROTOCOL_CmdFrameProcess(CAN_PROTOCOL_RX *pCB)
000000  b510              PUSH     {r4,lr}
;;;263    {
000002  4604              MOV      r4,r0
;;;264    	if (pCB->head == pCB->end)
000004  f8b407d0          LDRH     r0,[r4,#0x7d0]
000008  f8b417d2          LDRH     r1,[r4,#0x7d2]
00000c  4288              CMP      r0,r1
00000e  d100              BNE      |L5.18|
                  |L5.16|
;;;265    	{
;;;266    		return;
;;;267    	}
;;;268    
;;;269    	switch (pCB->cmdQueue[pCB->head].uExtId.ExtId)
;;;270    	{
;;;271    	case 0x1801FF28: // 仪表的状态
;;;272    		// 升级流程是从app跳入boot开始升级
;;;273    		if (!canProtocolCB.UPDATA1) // 升级标志位
;;;274    		{
;;;275    			// 01表示当前在app
;;;276    			if (0x01 == (pCB->cmdQueue[pCB->head].Data[0] & 0x01))
;;;277    			{
;;;278    				// 如果需要升级就跳入boot
;;;279    				if (!canProtocolCB.UPDATA)
;;;280    				{
;;;281    					canProtocolCB.UPDATA = TRUE;
;;;282    					// 切换到跳入boot步骤
;;;283    					STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_SEND_BOOT_CMD);
;;;284    				}
;;;285    			}
;;;286    			else // 在boot中，发送第一包升级的数据包，升级开始
;;;287    			{
;;;288    				canProtocolCB.UPDATA1 = TRUE;
;;;289    				STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_ARE_YOU_READY);
;;;290    			}
;;;291    		}
;;;292    		break;
;;;293    
;;;294    	case 0x18ECF927: // 发送多包数据
;;;295    					 // 0xEF：一包132Byte数据，4个地址加128个数据。0x13：当前数据包仪表接收完成，
;;;296    		if ((0xEF == pCB->cmdQueue[pCB->head].Data[6]) && (0x13 == pCB->cmdQueue[pCB->head].Data[0]))
;;;297    		{
;;;298    			// 0x01：校验通过，发送下一个数据包
;;;299    			if (0x01 == pCB->cmdQueue[pCB->head].Data[4])
;;;300    			{
;;;301    				//				CAN_UP_DATA(1);
;;;302    				STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_ARE_YOU_READY);
;;;303    			}
;;;304    			else
;;;305    			{
;;;306    				// 校验不通过
;;;307    				STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_WRITE_ERROR);
;;;308    			}
;;;309    		}
;;;310    		// 升级PGN，容许发送升级数据，0x11：仪表允许工具发送数据
;;;311    		else if ((0xEF == pCB->cmdQueue[pCB->head].Data[6]) && (0x11 == pCB->cmdQueue[pCB->head].Data[0]))
;;;312    		{
;;;313    			// STATE_PGN_SEND_2：工具发送数据
;;;314    			STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_SEND_DATA);
;;;315    			// CAN_PGN_RequestSendData(STATE_PGN_SEND_2, pCB->cmdQueue[pCB->head].Data[6], 0x27, 0xF9);
;;;316    		}
;;;317    
;;;318    		break;
;;;319    
;;;320    	default:
;;;321    		break;
;;;322    	}
;;;323    
;;;324    	pCB->head++;
;;;325    	pCB->head %= CAN_PROTOCOL_RX_QUEUE_SIZE;
;;;326    }
000010  bd10              POP      {r4,pc}
                  |L5.18|
000012  f8b407d0          LDRH     r0,[r4,#0x7d0]        ;269
000016  eb000080          ADD      r0,r0,r0,LSL #2       ;269
00001a  eb040080          ADD      r0,r4,r0,LSL #2       ;269
00001e  6840              LDR      r0,[r0,#4]            ;269
000020  493a              LDR      r1,|L5.268|
000022  4408              ADD      r0,r0,r1              ;269
000024  b120              CBZ      r0,|L5.48|
000026  493a              LDR      r1,|L5.272|
000028  4408              ADD      r0,r0,r1              ;269
00002a  2800              CMP      r0,#0                 ;269
00002c  d15b              BNE      |L5.230|
00002e  e021              B        |L5.116|
                  |L5.48|
000030  4838              LDR      r0,|L5.276|
000032  f890021f          LDRB     r0,[r0,#0x21f]        ;273  ; canProtocolCB
000036  b9e0              CBNZ     r0,|L5.114|
000038  f8b407d0          LDRH     r0,[r4,#0x7d0]        ;276
00003c  eb000080          ADD      r0,r0,r0,LSL #2       ;276
000040  eb040080          ADD      r0,r4,r0,LSL #2       ;276
000044  7ac0              LDRB     r0,[r0,#0xb]          ;276
000046  f0000001          AND      r0,r0,#1              ;276
00004a  b158              CBZ      r0,|L5.100|
00004c  4831              LDR      r0,|L5.276|
00004e  f890021e          LDRB     r0,[r0,#0x21e]        ;279  ; canProtocolCB
000052  b970              CBNZ     r0,|L5.114|
000054  2101              MOVS     r1,#1                 ;281
000056  482f              LDR      r0,|L5.276|
000058  f880121e          STRB     r1,[r0,#0x21e]        ;281
00005c  2006              MOVS     r0,#6                 ;283
00005e  f7fffffe          BL       STATE_SwitchStep
000062  e006              B        |L5.114|
                  |L5.100|
000064  2101              MOVS     r1,#1                 ;288
000066  482b              LDR      r0,|L5.276|
000068  f880121f          STRB     r1,[r0,#0x21f]        ;288
00006c  2007              MOVS     r0,#7                 ;289
00006e  f7fffffe          BL       STATE_SwitchStep
                  |L5.114|
000072  e039              B        |L5.232|
                  |L5.116|
000074  f8b407d0          LDRH     r0,[r4,#0x7d0]        ;296
000078  eb000080          ADD      r0,r0,r0,LSL #2       ;296
00007c  eb040080          ADD      r0,r4,r0,LSL #2       ;296
000080  7c40              LDRB     r0,[r0,#0x11]         ;296
000082  28ef              CMP      r0,#0xef              ;296
000084  d119              BNE      |L5.186|
000086  f8b407d0          LDRH     r0,[r4,#0x7d0]        ;296
00008a  eb000080          ADD      r0,r0,r0,LSL #2       ;296
00008e  eb040080          ADD      r0,r4,r0,LSL #2       ;296
000092  7ac0              LDRB     r0,[r0,#0xb]          ;296
000094  2813              CMP      r0,#0x13              ;296
000096  d110              BNE      |L5.186|
000098  f8b407d0          LDRH     r0,[r4,#0x7d0]        ;299
00009c  eb000080          ADD      r0,r0,r0,LSL #2       ;299
0000a0  eb040080          ADD      r0,r4,r0,LSL #2       ;299
0000a4  7bc0              LDRB     r0,[r0,#0xf]          ;299
0000a6  2801              CMP      r0,#1                 ;299
0000a8  d103              BNE      |L5.178|
0000aa  2007              MOVS     r0,#7                 ;302
0000ac  f7fffffe          BL       STATE_SwitchStep
0000b0  e018              B        |L5.228|
                  |L5.178|
0000b2  200a              MOVS     r0,#0xa               ;307
0000b4  f7fffffe          BL       STATE_SwitchStep
0000b8  e014              B        |L5.228|
                  |L5.186|
0000ba  f8b407d0          LDRH     r0,[r4,#0x7d0]        ;311
0000be  eb000080          ADD      r0,r0,r0,LSL #2       ;311
0000c2  eb040080          ADD      r0,r4,r0,LSL #2       ;311
0000c6  7c40              LDRB     r0,[r0,#0x11]         ;311
0000c8  28ef              CMP      r0,#0xef              ;311
0000ca  d10b              BNE      |L5.228|
0000cc  f8b407d0          LDRH     r0,[r4,#0x7d0]        ;311
0000d0  eb000080          ADD      r0,r0,r0,LSL #2       ;311
0000d4  eb040080          ADD      r0,r4,r0,LSL #2       ;311
0000d8  7ac0              LDRB     r0,[r0,#0xb]          ;311
0000da  2811              CMP      r0,#0x11              ;311
0000dc  d102              BNE      |L5.228|
0000de  2009              MOVS     r0,#9                 ;314
0000e0  f7fffffe          BL       STATE_SwitchStep
                  |L5.228|
0000e4  e000              B        |L5.232|
                  |L5.230|
0000e6  bf00              NOP                            ;321
                  |L5.232|
0000e8  bf00              NOP                            ;292
0000ea  f8b407d0          LDRH     r0,[r4,#0x7d0]        ;324
0000ee  1c40              ADDS     r0,r0,#1              ;324
0000f0  f8a407d0          STRH     r0,[r4,#0x7d0]        ;324
0000f4  f8b407d0          LDRH     r0,[r4,#0x7d0]        ;325
0000f8  2164              MOVS     r1,#0x64              ;325
0000fa  fb90f2f1          SDIV     r2,r0,r1              ;325
0000fe  fb010012          MLS      r0,r1,r2,r0           ;325
000102  f8a407d0          STRH     r0,[r4,#0x7d0]        ;325
000106  bf00              NOP      
000108  e782              B        |L5.16|
;;;327    
                          ENDP

00010a  0000              DCW      0x0000
                  |L5.268|
                          DCD      0xe7fe00d8
                  |L5.272|
                          DCD      0xff150601
                  |L5.276|
                          DCD      canProtocolCB+0x2000

                          AREA ||i.CAN_PROTOCOL_ConfirmTempCmdFrameBuff||, CODE, READONLY, ALIGN=1

                  CAN_PROTOCOL_ConfirmTempCmdFrameBuff PROC
;;;377    // 将临时缓冲区添加到命令帧缓冲区中，其本质操作是承认临时缓冲区数据有效
;;;378    BOOL CAN_PROTOCOL_ConfirmTempCmdFrameBuff(CAN_PROTOCOL_CB *pCB, uint8 sourceSelect)
000000  b530              PUSH     {r4,r5,lr}
;;;379    {
000002  4602              MOV      r2,r0
;;;380    	CAN_PROTOCOL_CMD_FRAME *pCmdFrame = NULL;
000004  2300              MOVS     r3,#0
;;;381    
;;;382    	// 参数合法性检验
;;;383    	if (NULL == pCB)
000006  b90a              CBNZ     r2,|L6.12|
;;;384    	{
;;;385    		return FALSE;
000008  2000              MOVS     r0,#0
                  |L6.10|
;;;386    	}
;;;387    
;;;388    	// 临时缓冲区为空，不予添加
;;;389    	//	pCmdFrame = &pCB->rx.rxEachNode[sourceSelect].cmdQueue[pCB->rx.rxEachNode[sourceSelect].end];
;;;390    
;;;391    	if (0 == pCmdFrame->length)
;;;392    	{
;;;393    		return FALSE;
;;;394    	}
;;;395    
;;;396    	// 添加
;;;397    	pCB->rx.rxEachNode[sourceSelect].end++;
;;;398    	pCB->rx.rxEachNode[sourceSelect].end %= CAN_PROTOCOL_RX_QUEUE_SIZE;
;;;399    	// 该行的作用是将新的添加位置有效数据个数清零，以便将这个位置当做临时帧缓冲区
;;;400    	//	pCB->rx.rxEachNode[sourceSelect].cmdQueue[pCB->rx.rxEachNode[sourceSelect].end].length = 0;
;;;401    
;;;402    	return TRUE;
;;;403    }
00000a  bd30              POP      {r4,r5,pc}
                  |L6.12|
00000c  8998              LDRH     r0,[r3,#0xc]          ;391
00000e  b908              CBNZ     r0,|L6.20|
000010  2000              MOVS     r0,#0                 ;393
000012  e7fa              B        |L6.10|
                  |L6.20|
000014  f24010f5          MOV      r0,#0x1f5             ;397
000018  4348              MULS     r0,r1,r0              ;397
00001a  f502741b          ADD      r4,r2,#0x26c          ;397
00001e  eb040080          ADD      r0,r4,r0,LSL #2       ;397
000022  f8b007d2          LDRH     r0,[r0,#0x7d2]        ;397
000026  1c40              ADDS     r0,r0,#1              ;397
000028  b285              UXTH     r5,r0                 ;397
00002a  f24010f5          MOV      r0,#0x1f5             ;397
00002e  4348              MULS     r0,r1,r0              ;397
000030  eb040080          ADD      r0,r4,r0,LSL #2       ;397
000034  f8a057d2          STRH     r5,[r0,#0x7d2]        ;397
000038  f24010f5          MOV      r0,#0x1f5             ;398
00003c  4348              MULS     r0,r1,r0              ;398
00003e  eb040080          ADD      r0,r4,r0,LSL #2       ;398
000042  f8b007d2          LDRH     r0,[r0,#0x7d2]        ;398
000046  2464              MOVS     r4,#0x64              ;398
000048  fb90f5f4          SDIV     r5,r0,r4              ;398
00004c  fb040015          MLS      r0,r4,r5,r0           ;398
000050  b285              UXTH     r5,r0                 ;398
000052  f24010f5          MOV      r0,#0x1f5             ;398
000056  4348              MULS     r0,r1,r0              ;398
000058  f502741b          ADD      r4,r2,#0x26c          ;398
00005c  eb040080          ADD      r0,r4,r0,LSL #2       ;398
000060  f8a057d2          STRH     r5,[r0,#0x7d2]        ;398
000064  2001              MOVS     r0,#1                 ;402
000066  e7d0              B        |L6.10|
;;;404    
                          ENDP


                          AREA ||i.CAN_PROTOCOL_DataStructInit||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_DataStructInit PROC
;;;195    // 数据结构初始化
;;;196    void CAN_PROTOCOL_DataStructInit(CAN_PROTOCOL_CB *pCB)
000000  b570              PUSH     {r4-r6,lr}
;;;197    {
000002  4605              MOV      r5,r0
;;;198    	uint16 i;
;;;199    	uint16 j;
;;;200    
;;;201    	// 参数合法性检验
;;;202    	if (NULL == pCB)
000004  b905              CBNZ     r5,|L7.8|
                  |L7.6|
;;;203    	{
;;;204    		return;
;;;205    	}
;;;206    
;;;207    	pCB->tx.txBusy = FALSE;
;;;208    	pCB->tx.index = 0;
;;;209    	pCB->tx.head = 0;
;;;210    	pCB->tx.end = 0;
;;;211    	for (i = 0; i < CAN_PROTOCOL_TX_QUEUE_SIZE; i++)
;;;212    	{
;;;213    		pCB->tx.cmdQueue[i].length = 0;
;;;214    	}
;;;215    
;;;216    	for (i = 0; i < CAN_PROTOCOL_DEVICE_SOURCE_ID_MAX; i++)
;;;217    	{
;;;218    		pCB->rxFIFO.rxFIFOEachNode[i].head = 0;
;;;219    		pCB->rxFIFO.rxFIFOEachNode[i].end = 0;
;;;220    		pCB->rxFIFO.rxFIFOEachNode[i].currentProcessIndex = 0;
;;;221    	}
;;;222    
;;;223    	for (i = 0; i < CAN_PROTOCOL_DEVICE_SOURCE_ID_MAX; i++)
;;;224    	{
;;;225    		for (j = 0; j < CAN_PROTOCOL_RX_QUEUE_SIZE; j++)
;;;226    		{
;;;227    			//		pCB->rx.rxEachNode[i].cmdQueue[j].length = 0;
;;;228    		}
;;;229    		pCB->rx.rxEachNode[i].head = 0;
;;;230    		pCB->rx.rxEachNode[i].end = 0;
;;;231    	}
;;;232    
;;;233    	memset(canProtocolCB.sendBuff, 0xFF, 128);
;;;234    	canProtocolCB.tripData.distance = 0;
;;;235    	canProtocolCB.tripData.times = 0;
;;;236    	canProtocolCB.hmiState = 0;
;;;237    	canProtocolCB.UPDATA1 = TRUE;
;;;238    	canProtocolCB.UPDATA = TRUE;
;;;239    }
000006  bd70              POP      {r4-r6,pc}
                  |L7.8|
000008  2000              MOVS     r0,#0                 ;207
00000a  f64111e8          MOV      r1,#0x19e8            ;207
00000e  4429              ADD      r1,r1,r5              ;207
000010  f8810646          STRB     r0,[r1,#0x646]        ;207
000014  f64111e8          MOV      r1,#0x19e8            ;208
000018  4429              ADD      r1,r1,r5              ;208
00001a  f8a10644          STRH     r0,[r1,#0x644]        ;208
00001e  f64111e8          MOV      r1,#0x19e8            ;209
000022  4429              ADD      r1,r1,r5              ;209
000024  f8a10640          STRH     r0,[r1,#0x640]        ;209
000028  f64111e8          MOV      r1,#0x19e8            ;210
00002c  4429              ADD      r1,r1,r5              ;210
00002e  f8a10642          STRH     r0,[r1,#0x642]        ;210
000032  2400              MOVS     r4,#0                 ;211
000034  e008              B        |L7.72|
                  |L7.54|
000036  2000              MOVS     r0,#0                 ;213
000038  f64111e8          MOV      r1,#0x19e8            ;213
00003c  4429              ADD      r1,r1,r5              ;213
00003e  eb011104          ADD      r1,r1,r4,LSL #4       ;213
000042  8188              STRH     r0,[r1,#0xc]          ;213
000044  1c60              ADDS     r0,r4,#1              ;211
000046  b284              UXTH     r4,r0                 ;211
                  |L7.72|
000048  2c64              CMP      r4,#0x64              ;211
00004a  dbf4              BLT      |L7.54|
00004c  2400              MOVS     r4,#0                 ;216
00004e  e014              B        |L7.122|
                  |L7.80|
000050  2100              MOVS     r1,#0                 ;218
000052  2067              MOVS     r0,#0x67              ;218
000054  4360              MULS     r0,r4,r0              ;218
000056  eb050040          ADD      r0,r5,r0,LSL #1       ;218
00005a  f8a010c8          STRH     r1,[r0,#0xc8]         ;218
00005e  2067              MOVS     r0,#0x67              ;219
000060  4360              MULS     r0,r4,r0              ;219
000062  eb050040          ADD      r0,r5,r0,LSL #1       ;219
000066  f8a010ca          STRH     r1,[r0,#0xca]         ;219
00006a  2067              MOVS     r0,#0x67              ;220
00006c  4360              MULS     r0,r4,r0              ;220
00006e  eb050040          ADD      r0,r5,r0,LSL #1       ;220
000072  f8a010cc          STRH     r1,[r0,#0xcc]         ;220
000076  1c60              ADDS     r0,r4,#1              ;216
000078  b284              UXTH     r4,r0                 ;216
                  |L7.122|
00007a  2c03              CMP      r4,#3                 ;216
00007c  dbe8              BLT      |L7.80|
00007e  2400              MOVS     r4,#0                 ;223
000080  e018              B        |L7.180|
                  |L7.130|
000082  2600              MOVS     r6,#0                 ;225
000084  e001              B        |L7.138|
                  |L7.134|
000086  1c70              ADDS     r0,r6,#1              ;225
000088  b286              UXTH     r6,r0                 ;225
                  |L7.138|
00008a  2e64              CMP      r6,#0x64              ;225
00008c  dbfb              BLT      |L7.134|
00008e  2200              MOVS     r2,#0                 ;229
000090  f24010f5          MOV      r0,#0x1f5             ;229
000094  4360              MULS     r0,r4,r0              ;229
000096  f505711b          ADD      r1,r5,#0x26c          ;229
00009a  eb010080          ADD      r0,r1,r0,LSL #2       ;229
00009e  f8a027d0          STRH     r2,[r0,#0x7d0]        ;229
0000a2  f24010f5          MOV      r0,#0x1f5             ;230
0000a6  4360              MULS     r0,r4,r0              ;230
0000a8  eb010080          ADD      r0,r1,r0,LSL #2       ;230
0000ac  f8a027d2          STRH     r2,[r0,#0x7d2]        ;230
0000b0  1c60              ADDS     r0,r4,#1              ;223
0000b2  b284              UXTH     r4,r0                 ;223
                  |L7.180|
0000b4  2c03              CMP      r4,#3                 ;223
0000b6  dbe4              BLT      |L7.130|
0000b8  22ff              MOVS     r2,#0xff              ;233
0000ba  2180              MOVS     r1,#0x80              ;233
0000bc  480b              LDR      r0,|L7.236|
0000be  f7fffffe          BL       __aeabi_memset
0000c2  2100              MOVS     r1,#0                 ;234
0000c4  4809              LDR      r0,|L7.236|
0000c6  3846              SUBS     r0,r0,#0x46           ;234
0000c8  63c1              STR      r1,[r0,#0x3c]         ;234  ; canProtocolCB
0000ca  2000              MOVS     r0,#0                 ;235
0000cc  4907              LDR      r1,|L7.236|
0000ce  390a              SUBS     r1,r1,#0xa            ;235
0000d0  6048              STR      r0,[r1,#4]            ;235
0000d2  2100              MOVS     r1,#0                 ;236
0000d4  4805              LDR      r0,|L7.236|
0000d6  3846              SUBS     r0,r0,#0x46           ;236
0000d8  f8801122          STRB     r1,[r0,#0x122]        ;236
0000dc  2101              MOVS     r1,#1                 ;237
0000de  f880121f          STRB     r1,[r0,#0x21f]        ;237
0000e2  f880121e          STRB     r1,[r0,#0x21e]        ;238
0000e6  bf00              NOP      
0000e8  e78d              B        |L7.6|
;;;240    
                          ENDP

0000ea  0000              DCW      0x0000
                  |L7.236|
                          DCD      canProtocolCB+0x2046

                          AREA ||i.CAN_PROTOCOL_Init||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_Init PROC
;;;96     // CAN协议层初始化
;;;97     void CAN_PROTOCOL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;98     {
;;;99     	// 协议层数据结构初始化
;;;100    	CAN_PROTOCOL_DataStructInit(&canProtocolCB);
000002  4806              LDR      r0,|L8.28|
000004  f7fffffe          BL       CAN_PROTOCOL_DataStructInit
;;;101    
;;;102    	// 向驱动层注册数据接收接口
;;;103    	//	CAN_DRIVE_RegisterDataSendService(CAN_PROTOCOL_MacProcess);
;;;104    
;;;105    	// 向驱动层注册数据发送接口
;;;106    	CAN_PROTOCOL_RegisterDataSendService(CAN_DRIVE_AddTxArray);
000008  4805              LDR      r0,|L8.32|
00000a  f7fffffe          BL       CAN_PROTOCOL_RegisterDataSendService
;;;107    
;;;108    	// 发送完毕，清空buff
;;;109    	memset(canProtocolCB.sendBuff, 0xFF, 200);
00000e  22ff              MOVS     r2,#0xff
000010  21c8              MOVS     r1,#0xc8
000012  4804              LDR      r0,|L8.36|
000014  f7fffffe          BL       __aeabi_memset
;;;110    	//	TIMER_AddTask(TIMER_ID_CAN_TEST,
;;;111    	//					100,
;;;112    	//					CAN_UP_RESET,
;;;113    	//					1,
;;;114    	//					TIMER_LOOP_FOREVER,
;;;115    	//					ACTION_MODE_ADD_TO_QUEUE);
;;;116    	//	CAN_UP_RESET(1);
;;;117    }
000018  bd10              POP      {r4,pc}
;;;118    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      canProtocolCB
                  |L8.32|
                          DCD      CAN_DRIVE_AddTxArray
                  |L8.36|
                          DCD      canProtocolCB+0x2046

                          AREA ||i.CAN_PROTOCOL_MacProcess||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_MacProcess PROC
;;;241    // CAN 报文接收处理函数(注意根据具体模块修改)
;;;242    void CAN_PROTOCOL_MacProcess(uint32 standarID, uint8 *pData, uint8 length)
000000  b570              PUSH     {r4-r6,lr}
;;;243    {
000002  4603              MOV      r3,r0
;;;244    	uint8 i = 0;
000004  2000              MOVS     r0,#0
;;;245    
;;;246    	canProtocolRX.cmdQueue[canProtocolRX.end].uExtId.ExtId = standarID;
000006  4c1b              LDR      r4,|L9.116|
000008  f8b447d2          LDRH     r4,[r4,#0x7d2]  ; canProtocolRX
00000c  eb040484          ADD      r4,r4,r4,LSL #2
000010  4d18              LDR      r5,|L9.116|
000012  eb050484          ADD      r4,r5,r4,LSL #2
000016  6063              STR      r3,[r4,#4]
;;;247    	for (i = 0; i < length; i++)
000018  bf00              NOP      
00001a  e00d              B        |L9.56|
                  |L9.28|
;;;248    	{
;;;249    		canProtocolRX.cmdQueue[canProtocolRX.end].Data[i] = *pData++;
00001c  f8115b01          LDRB     r5,[r1],#1
000020  4c14              LDR      r4,|L9.116|
000022  f8b447d2          LDRH     r4,[r4,#0x7d2]  ; canProtocolRX
000026  eb040484          ADD      r4,r4,r4,LSL #2
00002a  4e12              LDR      r6,|L9.116|
00002c  eb060484          ADD      r4,r6,r4,LSL #2
000030  340b              ADDS     r4,r4,#0xb
000032  5425              STRB     r5,[r4,r0]
000034  1c44              ADDS     r4,r0,#1              ;247
000036  b2e0              UXTB     r0,r4                 ;247
                  |L9.56|
000038  4290              CMP      r0,r2                 ;247
00003a  dbef              BLT      |L9.28|
;;;250    	}
;;;251    	canProtocolRX.cmdQueue[canProtocolRX.end].DLC = length;
00003c  4c0d              LDR      r4,|L9.116|
00003e  f8b447d2          LDRH     r4,[r4,#0x7d2]  ; canProtocolRX
000042  eb040484          ADD      r4,r4,r4,LSL #2
000046  4d0b              LDR      r5,|L9.116|
000048  eb050484          ADD      r4,r5,r4,LSL #2
00004c  72a2              STRB     r2,[r4,#0xa]
;;;252    	canProtocolRX.end++;
00004e  462c              MOV      r4,r5
000050  f8b447d2          LDRH     r4,[r4,#0x7d2]  ; canProtocolRX
000054  1c64              ADDS     r4,r4,#1
000056  f8a547d2          STRH     r4,[r5,#0x7d2]
;;;253    	canProtocolRX.end %= CAN_PROTOCOL_RX_QUEUE_SIZE;
00005a  462c              MOV      r4,r5
00005c  f8b447d2          LDRH     r4,[r4,#0x7d2]  ; canProtocolRX
000060  2564              MOVS     r5,#0x64
000062  fb94f6f5          SDIV     r6,r4,r5
000066  fb054416          MLS      r4,r5,r6,r4
00006a  4d02              LDR      r5,|L9.116|
00006c  f8a547d2          STRH     r4,[r5,#0x7d2]
;;;254    }
000070  bd70              POP      {r4-r6,pc}
;;;255    
                          ENDP

000072  0000              DCW      0x0000
                  |L9.116|
                          DCD      canProtocolRX

                          AREA ||i.CAN_PROTOCOL_Process||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_Process PROC
;;;182    // CAN协议层过程处理
;;;183    void CAN_PROTOCOL_Process(void)
000000  b510              PUSH     {r4,lr}
;;;184    {
;;;185    	// CAN接收FIFO缓冲区处理
;;;186    	// CAN_PROTOCOL_RxFIFOProcess(&canProtocolCB);
;;;187    
;;;188    	// CAN接收命令缓冲区处理
;;;189    	CAN_PROTOCOL_CmdFrameProcess(&canProtocolRX);
000002  4803              LDR      r0,|L10.16|
000004  f7fffffe          BL       CAN_PROTOCOL_CmdFrameProcess
;;;190    
;;;191    	// CAN协议层发送处理过程
;;;192    	CAN_PROTOCOL_TxStateProcess();
000008  f7fffffe          BL       CAN_PROTOCOL_TxStateProcess
;;;193    }
00000c  bd10              POP      {r4,pc}
;;;194    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      canProtocolRX

                          AREA ||i.CAN_PROTOCOL_RegisterDataSendService||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_RegisterDataSendService PROC
;;;438    // CAN协议层向驱动层注册数据发送接口
;;;439    void CAN_PROTOCOL_RegisterDataSendService(BOOL (*service)(uint32 id, uint8 *pData, uint8 length))
000000  4901              LDR      r1,|L11.8|
;;;440    {
;;;441    	canProtocolCB.sendDataThrowService = service;
000002  6308              STR      r0,[r1,#0x30]  ; canProtocolCB
;;;442    }
000004  4770              BX       lr
;;;443    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      canProtocolCB+0x2000

                          AREA ||i.CAN_PROTOCOL_RxFIFOProcess||, CODE, READONLY, ALIGN=1

                  CAN_PROTOCOL_RxFIFOProcess PROC
;;;256    // 一级报文接收缓冲区处理，从一级接收缓冲区中取出一个字节添加到命令帧缓冲区中
;;;257    void CAN_PROTOCOL_RxFIFOProcess(CAN_PROTOCOL_CB *pCB)
000000  4770              BX       lr
;;;258    {
;;;259    }
;;;260    
                          ENDP


                          AREA ||i.CAN_PROTOCOL_TxAddData||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_TxAddData PROC
;;;140    // 向发送命令帧队列中添加数据
;;;141    void CAN_PROTOCOL_TxAddData(uint8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;142    {
000002  4601              MOV      r1,r0
;;;143    	uint16 head = canProtocolCB.tx.head;
000004  4c0f              LDR      r4,|L13.68|
000006  f8b42640          LDRH     r2,[r4,#0x640]
;;;144    	uint16 end = canProtocolCB.tx.end;
00000a  f8b43642          LDRH     r3,[r4,#0x642]
;;;145    	CAN_PROTOCOL_CMD_FRAME *pCmdFrame = &canProtocolCB.tx.cmdQueue[canProtocolCB.tx.end];
00000e  f8b44642          LDRH     r4,[r4,#0x642]
000012  4d0c              LDR      r5,|L13.68|
000014  eb051004          ADD      r0,r5,r4,LSL #4
;;;146    
;;;147    	// 发送缓冲区已满，不予接收
;;;148    	if ((end + 1) % CAN_PROTOCOL_TX_QUEUE_SIZE == head)
000018  1c5c              ADDS     r4,r3,#1
00001a  2564              MOVS     r5,#0x64
00001c  fb94f6f5          SDIV     r6,r4,r5
000020  fb054416          MLS      r4,r5,r6,r4
000024  4294              CMP      r4,r2
000026  d100              BNE      |L13.42|
                  |L13.40|
;;;149    	{
;;;150    		return;
;;;151    	}
;;;152    
;;;153    	// 队尾命令帧已满，退出
;;;154    	if (pCmdFrame->length >= CAN_PROTOCOL_CMD_FRAME_LENGTH_MAX)
;;;155    	{
;;;156    		return;
;;;157    	}
;;;158    
;;;159    	// 数据添加到帧末尾，并更新帧长度
;;;160    	pCmdFrame->buff[pCmdFrame->length] = data;
;;;161    	pCmdFrame->length++;
;;;162    }
000028  bd70              POP      {r4-r6,pc}
                  |L13.42|
00002a  8984              LDRH     r4,[r0,#0xc]          ;154
00002c  2c08              CMP      r4,#8                 ;154
00002e  db00              BLT      |L13.50|
000030  e7fa              B        |L13.40|
                  |L13.50|
000032  8985              LDRH     r5,[r0,#0xc]          ;160
000034  1d04              ADDS     r4,r0,#4              ;160
000036  5561              STRB     r1,[r4,r5]            ;160
000038  8984              LDRH     r4,[r0,#0xc]          ;161
00003a  1c64              ADDS     r4,r4,#1              ;161
00003c  8184              STRH     r4,[r0,#0xc]          ;161
00003e  bf00              NOP      
000040  e7f2              B        |L13.40|
;;;163    
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      canProtocolCB+0x19e8

                          AREA ||i.CAN_PROTOCOL_TxAddFrame||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_TxAddFrame PROC
;;;164    // 发送命令帧处理,自动扶正帧长度以及检验码
;;;165    void CAN_PROTOCOL_TxAddFrame(void)
000000  b530              PUSH     {r4,r5,lr}
;;;166    {
;;;167    	uint16 head = canProtocolCB.tx.head;
000002  4a14              LDR      r2,|L14.84|
000004  f8b20640          LDRH     r0,[r2,#0x640]
;;;168    	uint16 end = canProtocolCB.tx.end;
000008  f8b21642          LDRH     r1,[r2,#0x642]
;;;169    
;;;170    	// 发送缓冲区已满，不予接收
;;;171    	if ((end + 1) % CAN_PROTOCOL_TX_QUEUE_SIZE == head)
00000c  1c4a              ADDS     r2,r1,#1
00000e  2364              MOVS     r3,#0x64
000010  fb92f4f3          SDIV     r4,r2,r3
000014  fb032214          MLS      r2,r3,r4,r2
000018  4282              CMP      r2,r0
00001a  d100              BNE      |L14.30|
                  |L14.28|
;;;172    	{
;;;173    		return;
;;;174    	}
;;;175    
;;;176    	// 发送环形队列更新位置
;;;177    	canProtocolCB.tx.end++;
;;;178    	canProtocolCB.tx.end %= CAN_PROTOCOL_TX_QUEUE_SIZE;
;;;179    	canProtocolCB.tx.cmdQueue[canProtocolCB.tx.end].length = 0; // 2015.12.2修改
;;;180    }
00001c  bd30              POP      {r4,r5,pc}
                  |L14.30|
00001e  4a0d              LDR      r2,|L14.84|
000020  f8b22642          LDRH     r2,[r2,#0x642]        ;177
000024  1c52              ADDS     r2,r2,#1              ;177
000026  4b0b              LDR      r3,|L14.84|
000028  f8a32642          STRH     r2,[r3,#0x642]        ;177
00002c  461a              MOV      r2,r3                 ;178
00002e  f8b22642          LDRH     r2,[r2,#0x642]        ;178
000032  2364              MOVS     r3,#0x64              ;178
000034  fb92f4f3          SDIV     r4,r2,r3              ;178
000038  fb032214          MLS      r2,r3,r4,r2           ;178
00003c  4b05              LDR      r3,|L14.84|
00003e  f8a32642          STRH     r2,[r3,#0x642]        ;178
000042  2200              MOVS     r2,#0                 ;179
000044  f8b33642          LDRH     r3,[r3,#0x642]        ;179
000048  4c02              LDR      r4,|L14.84|
00004a  eb041303          ADD      r3,r4,r3,LSL #4       ;179
00004e  819a              STRH     r2,[r3,#0xc]          ;179
000050  bf00              NOP      
000052  e7e3              B        |L14.28|
;;;181    
                          ENDP

                  |L14.84|
                          DCD      canProtocolCB+0x19e8

                          AREA ||i.CAN_PROTOCOL_TxAddNewFrame||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_TxAddNewFrame PROC
;;;119    // 向发送命令帧队列中添加帧源，帧目的
;;;120    void CAN_PROTOCOL_TxAddNewFrame(uint8 priority, uint16 pgn, uint8 destinationID, uint8 sourceID)
000000  b5f0              PUSH     {r4-r7,lr}
;;;121    {
000002  4604              MOV      r4,r0
;;;122    	CAN_PROTOCOL_CMD_FRAME *pCmdFrame = &canProtocolCB.tx.cmdQueue[canProtocolCB.tx.end];
000004  4d10              LDR      r5,|L15.72|
000006  f8b55642          LDRH     r5,[r5,#0x642]
00000a  4e0f              LDR      r6,|L15.72|
00000c  eb061005          ADD      r0,r6,r5,LSL #4
;;;123    
;;;124    	// 帧源和帧目的超出范围
;;;125    	if ((sourceID > 0xFF) || (destinationID > 0xFF))
000010  2bff              CMP      r3,#0xff
000012  dc01              BGT      |L15.24|
000014  2aff              CMP      r2,#0xff
000016  dd00              BLE      |L15.26|
                  |L15.24|
;;;126    	{
;;;127    		return;
;;;128    	}
;;;129    
;;;130    	// 数据添加到帧末尾，并更新帧长度
;;;131    	// pCmdFrame->deviceID = ((sourceID << 4) | destinationID);
;;;132    
;;;133    	pCmdFrame->EXTID.sDet.nHeard = 0;				   // 3bit:000
;;;134    	pCmdFrame->EXTID.sDet.priority = priority;		   // 3bit:优先级
;;;135    	pCmdFrame->EXTID.sDet.pgn = pgn;				   // 10bit:pgn
;;;136    	pCmdFrame->EXTID.sDet.destination = destinationID; // 8bit:目的地址
;;;137    	pCmdFrame->EXTID.sDet.source = sourceID;		   // 8bit:源地址
;;;138    }
000018  bdf0              POP      {r4-r7,pc}
                  |L15.26|
00001a  6805              LDR      r5,[r0,#0]            ;133
00001c  f0254560          BIC      r5,r5,#0xe0000000     ;133
000020  6005              STR      r5,[r0,#0]            ;133
000022  6805              LDR      r5,[r0,#0]            ;134
000024  f364659c          BFI      r5,r4,#26,#3          ;134
000028  6005              STR      r5,[r0,#0]            ;134
00002a  6805              LDR      r5,[r0,#0]            ;135
00002c  f3614519          BFI      r5,r1,#16,#10         ;135
000030  6005              STR      r5,[r0,#0]            ;135
000032  6805              LDR      r5,[r0,#0]            ;136
000034  f362250f          BFI      r5,r2,#8,#8           ;136
000038  6005              STR      r5,[r0,#0]            ;136
00003a  6805              LDR      r5,[r0,#0]            ;137
00003c  f3630507          BFI      r5,r3,#0,#8           ;137
000040  6005              STR      r5,[r0,#0]            ;137
000042  bf00              NOP      
000044  e7e8              B        |L15.24|
;;;139    
                          ENDP

000046  0000              DCW      0x0000
                  |L15.72|
                          DCD      canProtocolCB+0x19e8

                          AREA ||i.CAN_PROTOCOL_TxStateProcess||, CODE, READONLY, ALIGN=2

                  CAN_PROTOCOL_TxStateProcess PROC
;;;405    // 协议层发送处理过程
;;;406    void CAN_PROTOCOL_TxStateProcess(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;407    {
;;;408    	uint16 head = canProtocolCB.tx.head;
000004  481c              LDR      r0,|L16.120|
000006  f8b04640          LDRH     r4,[r0,#0x640]
;;;409    	uint16 end = canProtocolCB.tx.end;
00000a  f8b05642          LDRH     r5,[r0,#0x642]
;;;410    	uint16 length = canProtocolCB.tx.cmdQueue[head].length;
00000e  eb001004          ADD      r0,r0,r4,LSL #4
000012  8986              LDRH     r6,[r0,#0xc]
;;;411    	uint8 *pCmd = canProtocolCB.tx.cmdQueue[head].buff;
000014  4818              LDR      r0,|L16.120|
000016  eb001004          ADD      r0,r0,r4,LSL #4
00001a  1d07              ADDS     r7,r0,#4
;;;412    	uint32 localDeviceID = canProtocolCB.tx.cmdQueue[head].EXTID.deviceID;
00001c  4816              LDR      r0,|L16.120|
00001e  eb001004          ADD      r0,r0,r4,LSL #4
000022  f8d08000          LDR      r8,[r0,#0]
;;;413    
;;;414    	// 发送缓冲区为空，说明无数据
;;;415    	if (head == end)
000026  42ac              CMP      r4,r5
000028  d101              BNE      |L16.46|
                  |L16.42|
;;;416    	{
;;;417    		return;
;;;418    	}
;;;419    
;;;420    	// 发送函数没有注册直接返回
;;;421    	if (NULL == canProtocolCB.sendDataThrowService)
;;;422    	{
;;;423    		return;
;;;424    	}
;;;425    
;;;426    	// 协议层有数据需要发送到驱动层
;;;427    	if (!(*canProtocolCB.sendDataThrowService)(localDeviceID, pCmd, length))
;;;428    	{
;;;429    		return;
;;;430    	}
;;;431    
;;;432    	// 发送环形队列更新位置
;;;433    	canProtocolCB.tx.cmdQueue[head].length = 0;
;;;434    	canProtocolCB.tx.head++;
;;;435    	canProtocolCB.tx.head %= CAN_PROTOCOL_TX_QUEUE_SIZE;
;;;436    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L16.46|
00002e  4813              LDR      r0,|L16.124|
000030  6b00              LDR      r0,[r0,#0x30]         ;421  ; canProtocolCB
000032  b900              CBNZ     r0,|L16.54|
000034  e7f9              B        |L16.42|
                  |L16.54|
000036  b2f2              UXTB     r2,r6                 ;427
000038  4810              LDR      r0,|L16.124|
00003a  4639              MOV      r1,r7                 ;427
00003c  6b03              LDR      r3,[r0,#0x30]         ;427  ; canProtocolCB
00003e  4640              MOV      r0,r8                 ;427
000040  4798              BLX      r3                    ;427
000042  b900              CBNZ     r0,|L16.70|
000044  e7f1              B        |L16.42|
                  |L16.70|
000046  2000              MOVS     r0,#0                 ;433
000048  490b              LDR      r1,|L16.120|
00004a  eb011104          ADD      r1,r1,r4,LSL #4       ;433
00004e  8188              STRH     r0,[r1,#0xc]          ;433
000050  4809              LDR      r0,|L16.120|
000052  f8b00640          LDRH     r0,[r0,#0x640]        ;434
000056  1c40              ADDS     r0,r0,#1              ;434
000058  4907              LDR      r1,|L16.120|
00005a  f8a10640          STRH     r0,[r1,#0x640]        ;434
00005e  4608              MOV      r0,r1                 ;435
000060  f8b00640          LDRH     r0,[r0,#0x640]        ;435
000064  2164              MOVS     r1,#0x64              ;435
000066  fb90f2f1          SDIV     r2,r0,r1              ;435
00006a  fb010012          MLS      r0,r1,r2,r0           ;435
00006e  4902              LDR      r1,|L16.120|
000070  f8a10640          STRH     r0,[r1,#0x640]        ;435
000074  bf00              NOP      
000076  e7d8              B        |L16.42|
;;;437    
                          ENDP

                  |L16.120|
                          DCD      canProtocolCB+0x19e8
                  |L16.124|
                          DCD      canProtocolCB+0x2000

                          AREA ||i.CAN_UP_DATA||, CODE, READONLY, ALIGN=2

                  CAN_UP_DATA PROC
;;;673    
;;;674    void CAN_UP_DATA(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;675    {
000002  4604              MOV      r4,r0
;;;676    	dut_info.currentUiSize++;
000004  481a              LDR      r0,|L17.112|
000006  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000008  1c40              ADDS     r0,r0,#1
00000a  4919              LDR      r1,|L17.112|
00000c  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;677    	// 如果升级完成
;;;678    	if (dut_info.currentUiSize > dut_info.uiSize)
00000e  4608              MOV      r0,r1
000010  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000012  6a49              LDR      r1,[r1,#0x24]  ; dut_info
000014  4288              CMP      r0,r1
000016  d903              BLS      |L17.32|
;;;679    	{
;;;680    		STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_FINISH);
000018  200b              MOVS     r0,#0xb
00001a  f7fffffe          BL       STATE_SwitchStep
                  |L17.30|
;;;681    		return;
;;;682    	}
;;;683    	// 向发送buff添加地址编号
;;;684    	canProtocolCB.sendBuff[0] = ((dut_info.currentUiSize >> 24) & 0xFF);
;;;685    	canProtocolCB.sendBuff[1] = ((dut_info.currentUiSize >> 16) & 0xFF);
;;;686    	canProtocolCB.sendBuff[2] = ((dut_info.currentUiSize >> 8) & 0xFF);
;;;687    	canProtocolCB.sendBuff[3] = (dut_info.currentUiSize & 0xFF);
;;;688    	// 向发送buff添加数据
;;;689    	SPI_FLASH_ReadArray(&canProtocolCB.sendBuff[4], (SPI_FLASH_DUT_UI_ADDEESS + (dut_info.currentUiSize - 1) * 128), 128);
;;;690    	// STATE_PGN_SEND_1：工具请求仪表接收数据
;;;691    	CAN_PGN_RequestSendData(STATE_PGN_SEND_1, 0xEF, 0x27, 0xF9);
;;;692    }
00001e  bd10              POP      {r4,pc}
                  |L17.32|
000020  4813              LDR      r0,|L17.112|
000022  6b00              LDR      r0,[r0,#0x30]         ;684  ; dut_info
000024  0e00              LSRS     r0,r0,#24             ;684
000026  4913              LDR      r1,|L17.116|
000028  f8810046          STRB     r0,[r1,#0x46]         ;684
00002c  4810              LDR      r0,|L17.112|
00002e  6b00              LDR      r0,[r0,#0x30]         ;685  ; dut_info
000030  0c00              LSRS     r0,r0,#16             ;685
000032  3146              ADDS     r1,r1,#0x46           ;685
000034  7048              STRB     r0,[r1,#1]            ;685
000036  480e              LDR      r0,|L17.112|
000038  8e00              LDRH     r0,[r0,#0x30]         ;686  ; dut_info
00003a  0a00              LSRS     r0,r0,#8              ;686
00003c  7088              STRB     r0,[r1,#2]            ;686
00003e  480c              LDR      r0,|L17.112|
000040  f8900030          LDRB     r0,[r0,#0x30]         ;687  ; dut_info
000044  70c8              STRB     r0,[r1,#3]            ;687
000046  480a              LDR      r0,|L17.112|
000048  6b00              LDR      r0,[r0,#0x30]         ;689  ; dut_info
00004a  1e40              SUBS     r0,r0,#1              ;689
00004c  f44f1200          MOV      r2,#0x200000          ;689
000050  eb0211c0          ADD      r1,r2,r0,LSL #7       ;689
000054  2280              MOVS     r2,#0x80              ;689
000056  4807              LDR      r0,|L17.116|
000058  304a              ADDS     r0,r0,#0x4a           ;689
00005a  f7fffffe          BL       SPI_FLASH_ReadArray
00005e  23f9              MOVS     r3,#0xf9              ;691
000060  2227              MOVS     r2,#0x27              ;691
000062  21ef              MOVS     r1,#0xef              ;691
000064  2001              MOVS     r0,#1                 ;691
000066  f7fffffe          BL       CAN_PGN_RequestSendData
00006a  bf00              NOP      
00006c  e7d7              B        |L17.30|
;;;693    
                          ENDP

00006e  0000              DCW      0x0000
                  |L17.112|
                          DCD      dut_info
                  |L17.116|
                          DCD      canProtocolCB+0x2000

                          AREA ||i.CAN_UP_RESET||, CODE, READONLY, ALIGN=1

                  CAN_UP_RESET PROC
;;;693    
;;;694    void CAN_UP_RESET(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;695    {
000002  4604              MOV      r4,r0
;;;696    	if (1 == param)
000004  2c01              CMP      r4,#1
000006  d120              BNE      |L18.74|
;;;697    	{
;;;698    		CAN_PROTOCOL_TxAddNewFrame(0x06, 0x01, 0xFF, 0xF9);
000008  23f9              MOVS     r3,#0xf9
00000a  22ff              MOVS     r2,#0xff
00000c  2101              MOVS     r1,#1
00000e  2006              MOVS     r0,#6
000010  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;699    
;;;700    		CAN_PROTOCOL_TxAddData(0);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;701    
;;;702    		CAN_PROTOCOL_TxAddData(0);
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;703    
;;;704    		CAN_PROTOCOL_TxAddData(0);
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;705    
;;;706    		CAN_PROTOCOL_TxAddData(0);
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;707    
;;;708    		CAN_PROTOCOL_TxAddData(0);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;709    
;;;710    		CAN_PROTOCOL_TxAddData(0);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;711    
;;;712    		CAN_PROTOCOL_TxAddData(0);
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;713    
;;;714    		CAN_PROTOCOL_TxAddData(0);
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;715    
;;;716    		CAN_PROTOCOL_TxAddFrame();
000044  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
000048  e021              B        |L18.142|
                  |L18.74|
;;;717    	}
;;;718    	else if (2 == param)
00004a  2c02              CMP      r4,#2
00004c  d11f              BNE      |L18.142|
;;;719    	{
;;;720    		CAN_PROTOCOL_TxAddNewFrame(0x06, 0x01, 0xFF, 0xF9);
00004e  23f9              MOVS     r3,#0xf9
000050  22ff              MOVS     r2,#0xff
000052  2101              MOVS     r1,#1
000054  2006              MOVS     r0,#6
000056  f7fffffe          BL       CAN_PROTOCOL_TxAddNewFrame
;;;721    
;;;722    		CAN_PROTOCOL_TxAddData(0x40);
00005a  2040              MOVS     r0,#0x40
00005c  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;723    
;;;724    		CAN_PROTOCOL_TxAddData(0);
000060  2000              MOVS     r0,#0
000062  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;725    
;;;726    		CAN_PROTOCOL_TxAddData(0);
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;727    
;;;728    		CAN_PROTOCOL_TxAddData(0x02);
00006c  2002              MOVS     r0,#2
00006e  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;729    
;;;730    		CAN_PROTOCOL_TxAddData(0);
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;731    
;;;732    		CAN_PROTOCOL_TxAddData(0);
000078  2000              MOVS     r0,#0
00007a  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;733    
;;;734    		CAN_PROTOCOL_TxAddData(0);
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;735    
;;;736    		CAN_PROTOCOL_TxAddData(0);
000084  2000              MOVS     r0,#0
000086  f7fffffe          BL       CAN_PROTOCOL_TxAddData
;;;737    
;;;738    		CAN_PROTOCOL_TxAddFrame();
00008a  f7fffffe          BL       CAN_PROTOCOL_TxAddFrame
                  |L18.142|
;;;739    	}
;;;740    }
00008e  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  canRxDriveCB
                          %        16
                  canProtocolCB
                          %        8736
                  canProtocolRX
                          %        2004

;*** Start embedded assembler ***

#line 1 "User\\CanProtocol.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_CanProtocol_c_ac16862f____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___13_CanProtocol_c_ac16862f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_CanProtocol_c_ac16862f____REVSH|
#line 128
|__asm___13_CanProtocol_c_ac16862f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
