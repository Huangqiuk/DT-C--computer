; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\lcd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\lcd.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\lcd.crf User\lcd.c]
                          THUMB

                          AREA ||i.LCD_ColorControl||, CODE, READONLY, ALIGN=2

                  LCD_ColorControl PROC
;;;966    // 串口显示控制
;;;967    void LCD_ColorControl(uint8 lcdCmd)
000000  b510              PUSH     {r4,lr}
;;;968    {
000002  b086              SUB      sp,sp,#0x18
;;;969    	uint16  colorDisplay[] = {LCD_COLOR_RED,
000004  4925              LDR      r1,|L1.156|
000006  e891001c          LDM      r1,{r2-r4}
00000a  68c9              LDR      r1,[r1,#0xc]  ; <Data3>
00000c  e9cd3403          STRD     r3,r4,[sp,#0xc]
000010  9202              STR      r2,[sp,#8]
000012  9105              STR      r1,[sp,#0x14]
;;;970    							LCD_COLOR_RED,
;;;971    							LCD_COLOR_GREEN,
;;;972    							LCD_COLOR_BLUE,
;;;973    							LCD_COLOR_WHITE,
;;;974    							LCD_COLOR_BLACK,
;;;975    							LCD_COLOR_YELLOW};
;;;976    						
;;;977    	switch (lcdCmd)
000014  2808              CMP      r0,#8
000016  d23f              BCS      |L1.152|
000018  e8dff000          TBB      [pc,r0]
00001c  042d2d2d          DCB      0x04,0x2d,0x2d,0x2d
000020  2d2d2d38          DCB      0x2d,0x2d,0x2d,0x38
;;;978    	{
;;;979    		case 0:
;;;980    			LCD_DrawAreaColor(	 0,   0,120,160,LCD_COLOR_RED);
000024  f44f4078          MOV      r0,#0xf800
000028  2100              MOVS     r1,#0
00002a  9000              STR      r0,[sp,#0]
00002c  23a0              MOVS     r3,#0xa0
00002e  2278              MOVS     r2,#0x78
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       LCD_DrawAreaColor
;;;981    			LCD_DrawAreaColor( 120,   0,120,160,LCD_COLOR_GREEN);
000036  f44f60fc          MOV      r0,#0x7e0
00003a  2278              MOVS     r2,#0x78
00003c  9000              STR      r0,[sp,#0]
00003e  23a0              MOVS     r3,#0xa0
000040  2100              MOVS     r1,#0
000042  4610              MOV      r0,r2
000044  f7fffffe          BL       LCD_DrawAreaColor
;;;982    			LCD_DrawAreaColor(	 0, 160,120,160,LCD_COLOR_BLUE);
000048  201f              MOVS     r0,#0x1f
00004a  23a0              MOVS     r3,#0xa0
00004c  9000              STR      r0,[sp,#0]
00004e  2278              MOVS     r2,#0x78
000050  4619              MOV      r1,r3
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       LCD_DrawAreaColor
;;;983    			LCD_DrawAreaColor( 120, 160,120,160,LCD_COLOR_WHITE);
000058  f64f70ff          MOV      r0,#0xffff
00005c  23a0              MOVS     r3,#0xa0
00005e  2278              MOVS     r2,#0x78
000060  9000              STR      r0,[sp,#0]
000062  4619              MOV      r1,r3
000064  4610              MOV      r0,r2
000066  f7fffffe          BL       LCD_DrawAreaColor
;;;984    
;;;985    			BACK_LIGHT_Start(BACK_LIGHT_LEVEL_ON);
00006a  b006              ADD      sp,sp,#0x18
00006c  2005              MOVS     r0,#5
00006e  e8bd4010          POP      {r4,lr}
000072  f7ffbffe          B.W      BACK_LIGHT_Start
;;;986    			break;
;;;987    
;;;988    		case 1:
;;;989    		case 2:
;;;990    		case 3:
;;;991    		case 4:
;;;992    		case 5:
;;;993    		case 6:
;;;994    			LCD_FillColor(colorDisplay[lcdCmd]);
000076  a902              ADD      r1,sp,#8
000078  f8310010          LDRH     r0,[r1,r0,LSL #1]
00007c  f7fffffe          BL       LCD_FillColor
;;;995    
;;;996    			BACK_LIGHT_Start(BACK_LIGHT_LEVEL_ON);
000080  b006              ADD      sp,sp,#0x18
000082  2005              MOVS     r0,#5
000084  e8bd4010          POP      {r4,lr}
000088  f7ffbffe          B.W      BACK_LIGHT_Start
;;;997    			break;
;;;998    
;;;999    		case 7:
;;;1000   			BACK_LIGHT_Start(BACK_LIGHT_LEVEL_OFF);
00008c  b006              ADD      sp,sp,#0x18
00008e  2000              MOVS     r0,#0
000090  e8bd4010          POP      {r4,lr}
000094  f7ffbffe          B.W      BACK_LIGHT_Start
                  |L1.152|
;;;1001   			break;
;;;1002   
;;;1003   		default:		
;;;1004   			break;
;;;1005   	}
;;;1006   }
000098  b006              ADD      sp,sp,#0x18
00009a  bd10              POP      {r4,pc}
;;;1007   
                          ENDP

                  |L1.156|
                          DCD      ||.constdata||

                          AREA ||i.LCD_ColorInverse||, CODE, READONLY, ALIGN=1

                  LCD_ColorInverse PROC
;;;216    // 颜色翻转开关
;;;217    void LCD_ColorInverse(BOOL onoff)
000000  f04f41c0          MOV      r1,#0x60000000
;;;218    {
;;;219    	if(onoff)
000004  2800              CMP      r0,#0
000006  d002              BEQ      |L2.14|
;;;220    	{
;;;221    		LCD_CMD=0x21;
000008  2021              MOVS     r0,#0x21
00000a  8008              STRH     r0,[r1,#0]
;;;222    	}
;;;223    	else
;;;224    	{
;;;225    		LCD_CMD=0x20;
;;;226    	}
;;;227    }
00000c  4770              BX       lr
                  |L2.14|
00000e  2020              MOVS     r0,#0x20              ;225
000010  8008              STRH     r0,[r1,#0]            ;225
000012  4770              BX       lr
;;;228    
                          ENDP


                          AREA ||i.LCD_CtrlPortInit||, CODE, READONLY, ALIGN=2

                  LCD_CtrlPortInit PROC
;;;373    // LCD控制端口初始化
;;;374    void LCD_CtrlPortInit(void)
000000  b510              PUSH     {r4,lr}
;;;375    {
;;;376    	// 使能端口时钟
;;;377    	rcu_periph_clock_enable(RCU_GPIOB);
000002  f2406003          MOV      r0,#0x603
000006  f7fffffe          BL       rcu_periph_clock_enable
;;;378    	rcu_periph_clock_enable(RCU_GPIOD);
00000a  f2406005          MOV      r0,#0x605
00000e  f7fffffe          BL       rcu_periph_clock_enable
;;;379    	rcu_periph_clock_enable(RCU_GPIOE);
000012  f2406006          MOV      r0,#0x606
000016  f7fffffe          BL       rcu_periph_clock_enable
;;;380    	
;;;381    	// LCD复位信号控制端口设置为输出
;;;382    	gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0); 
00001a  2301              MOVS     r3,#1
00001c  2203              MOVS     r2,#3
00001e  2110              MOVS     r1,#0x10
000020  4809              LDR      r0,|L3.72|
000022  f7fffffe          BL       gpio_init
;;;383    
;;;384    	// 设置 PD.00(D2), PD.01(D3), PD.04(NOE-RD), PD.05(NWE-WR), PD.07(NE1-CS)，PD.08(D13), PD.09(D14),
;;;385    	// PD.10(D15), PD.12(A17-RS), PD.14(D0), PD.15(D1) 为复用推挽输出
;;;386    	gpio_init(GPIOD, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | 
000026  f64c73b3          MOV      r3,#0xcfb3
00002a  2203              MOVS     r2,#3
00002c  2118              MOVS     r1,#0x18
00002e  4807              LDR      r0,|L3.76|
000030  f7fffffe          BL       gpio_init
;;;387    														GPIO_PIN_1 |
;;;388    														GPIO_PIN_4 |
;;;389    														GPIO_PIN_5 |
;;;390    														GPIO_PIN_7 |
;;;391    														GPIO_PIN_8 |
;;;392    														GPIO_PIN_9 |
;;;393    														GPIO_PIN_10 |
;;;394    														GPIO_PIN_11 |
;;;395    														GPIO_PIN_14 |
;;;396    														GPIO_PIN_15);
;;;397    
;;;398    	gpio_init(GPIOE, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_7 |
000034  2203              MOVS     r2,#3
000036  e8bd4010          POP      {r4,lr}
00003a  f64f7380          MOV      r3,#0xff80
00003e  2118              MOVS     r1,#0x18
000040  4803              LDR      r0,|L3.80|
000042  f7ffbffe          B.W      gpio_init
;;;399    														GPIO_PIN_8 |
;;;400    														GPIO_PIN_9 |
;;;401    														GPIO_PIN_10 |
;;;402    														GPIO_PIN_11 |
;;;403    														GPIO_PIN_12 |
;;;404    														GPIO_PIN_13 |
;;;405    														GPIO_PIN_14 |
;;;406    														GPIO_PIN_15);
;;;407    }
;;;408    
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      0x40010c00
                  |L3.76|
                          DCD      0x40011400
                  |L3.80|
                          DCD      0x40011800

                          AREA ||i.LCD_DisplayOnOff||, CODE, READONLY, ALIGN=1

                  LCD_DisplayOnOff PROC
;;;229    // 显示开关
;;;230    void LCD_DisplayOnOff(BOOL onoff)
000000  f04f41c0          MOV      r1,#0x60000000
;;;231    {
;;;232    	if(onoff)
000004  2800              CMP      r0,#0
000006  d002              BEQ      |L4.14|
;;;233    	{
;;;234    		LCD_CMD=0x29;
000008  2029              MOVS     r0,#0x29
00000a  8008              STRH     r0,[r1,#0]
;;;235    	}
;;;236    	else
;;;237    	{
;;;238    		LCD_CMD=0x28;
;;;239    	}
;;;240    }
00000c  4770              BX       lr
                  |L4.14|
00000e  2028              MOVS     r0,#0x28              ;238
000010  8008              STRH     r0,[r1,#0]            ;238
000012  4770              BX       lr
;;;241    
                          ENDP


                          AREA ||i.LCD_DrawAreaColor||, CODE, READONLY, ALIGN=2

                  LCD_DrawAreaColor PROC
;;;518    // 在指定区域显示指定的颜色
;;;519    void LCD_DrawAreaColor(uint16 x, uint16 y, uint16 w, uint16 h, uint16 data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;520    {
000002  4607              MOV      r7,r0
000004  4610              MOV      r0,r2
000006  9d05              LDR      r5,[sp,#0x14]
000008  460e              MOV      r6,r1
00000a  461a              MOV      r2,r3
;;;521    	uint32 i;
;;;522    	uint32 size = w * h;	
00000c  fb00f402          MUL      r4,r0,r2
;;;523    
;;;524    	/* 需要添加参数判断 */
;;;525    	CHECK_PARAM_OVER_RETURN(h,LCD_WIDTH);
000010  2aaa              CMP      r2,#0xaa
000012  d80e              BHI      |L5.50|
;;;526    	CHECK_PARAM_OVER_RETURN(w,LCD_HEIGHT);
000014  f5b07fa0          CMP      r0,#0x140
000018  d80b              BHI      |L5.50|
;;;527    	
;;;528    	LCD_SetAreaByPointAndSize(y, x, h, w);
00001a  4603              MOV      r3,r0
00001c  4639              MOV      r1,r7
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;529    
;;;530    	for(i=0; i<size; i++)
000024  2000              MOVS     r0,#0
;;;531    	{
;;;532    		LCD_WriteColor(data);
000026  4903              LDR      r1,|L5.52|
000028  e001              B        |L5.46|
                  |L5.42|
00002a  800d              STRH     r5,[r1,#0]
00002c  1c40              ADDS     r0,r0,#1              ;530
                  |L5.46|
00002e  42a0              CMP      r0,r4                 ;530
000030  d3fb              BCC      |L5.42|
                  |L5.50|
;;;533    	}
;;;534    }
000032  bdf0              POP      {r4-r7,pc}
;;;535    
                          ENDP

                  |L5.52|
                          DCD      0x60020000

                          AREA ||i.LCD_DrawBmpByID||, CODE, READONLY, ALIGN=2

                  LCD_DrawBmpByID PROC
;;;693    // 在指定位置显示指定ID的图片
;;;694    void LCD_DrawBmpByID(uint16 x, uint16 y, PIC_ID_E id, LCD_OPERATOR_MODE_E mode)
000000  b5f8              PUSH     {r3-r7,lr}
;;;695    {
000002  460e              MOV      r6,r1
;;;696    	// 显示背景
;;;697    	uint32 ulDataAddress = 0;
;;;698    	uint16 usBackgroundColor;
;;;699    
;;;700    	if(id >= PIC_ID_MAX)
000004  f2402103          MOV      r1,#0x203
000008  428a              CMP      r2,r1
00000a  d216              BCS      |L6.58|
;;;701    	{
;;;702    		return;
;;;703    	}
;;;704    
;;;705    	// 取出数据的首地址
;;;706    	ulDataAddress = g_PIC_StartAddr[id];
00000c  4926              LDR      r1,|L6.168|
00000e  f8515022          LDR      r5,[r1,r2,LSL #2]
;;;707    
;;;708    	// x,y坐标互相调换，BC201屏幕特殊
;;;709    	switch(mode)
;;;710    	{
;;;711    		// 直接绘制
;;;712    		case LCD_OPERATOR_MODE_DRAW:
;;;713    			LCD_DrawPicFromAddress(y, x, g_PIC_Width[id], g_PIC_Height[id], ulDataAddress);
000012  f601010c          ADD      r1,r1,#0x80c
000016  f2014406          ADD      r4,r1,#0x406
00001a  2b06              CMP      r3,#6                 ;709
00001c  d20d              BCS      |L6.58|
00001e  e8dff003          TBB      [pc,r3]               ;709
000022  030d              DCB      0x03,0x0d
000024  18232d38          DCB      0x18,0x23,0x2d,0x38
000028  9500              STR      r5,[sp,#0]
00002a  f8313012          LDRH     r3,[r1,r2,LSL #1]
00002e  4601              MOV      r1,r0
000030  f8342012          LDRH     r2,[r4,r2,LSL #1]
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       LCD_DrawPicFromAddress
                  |L6.58|
;;;714    			break;
;;;715    
;;;716    		// 背景色
;;;717    		case LCD_OPERATOR_MODE_BACKGROUND:
;;;718    			usBackgroundColor = LCD_COLOR_BACKGROUND;
;;;719    			LCD_DrawAreaColor(x, y, g_PIC_Height[id], g_PIC_Width[id], usBackgroundColor);
;;;720    			break;
;;;721    
;;;722    		// 全白
;;;723    		case LCD_OPERATOR_MODE_ALL_WHITE:
;;;724    			usBackgroundColor = LCD_COLOR_WHITE;
;;;725    			LCD_DrawAreaColor(x, y, g_PIC_Height[id], g_PIC_Width[id], usBackgroundColor);
;;;726    			break;
;;;727    
;;;728    		// 全黑
;;;729    		case LCD_OPERATOR_MODE_ALL_BLACK:
;;;730    			usBackgroundColor = LCD_COLOR_BLACK;
;;;731    			LCD_DrawAreaColor(x, y, g_PIC_Height[id], g_PIC_Width[id], usBackgroundColor);
;;;732    			break;
;;;733    
;;;734    		// 菜单绿色背景
;;;735    		case LCD_OPERATOR_MODE_ADV_MENU:
;;;736    			usBackgroundColor = LCD_COLOR_GREEN_MENU;
;;;737    			LCD_DrawAreaColor(x, y, g_PIC_Height[id], g_PIC_Width[id], usBackgroundColor);
;;;738    			break;
;;;739    		// 菜单绿色背景
;;;740    		case LCD_OPERATOR_MODE_MENU_FACTORY_BACKGROUND:
;;;741    			usBackgroundColor = LCD_COLOR_MENU_FACTIRY_BACKGROUND;
;;;742    			LCD_DrawAreaColor(x, y, g_PIC_Height[id], g_PIC_Width[id], usBackgroundColor);
;;;743    			break;
;;;744    
;;;745    		default:
;;;746    			break;
;;;747    	}
;;;748    }
00003a  bdf8              POP      {r3-r7,pc}
00003c  f64103e4          MOV      r3,#0x18e4            ;718
000040  9300              STR      r3,[sp,#0]            ;719
000042  f8343012          LDRH     r3,[r4,r2,LSL #1]     ;719
000046  f8312012          LDRH     r2,[r1,r2,LSL #1]     ;719
00004a  4631              MOV      r1,r6                 ;719
00004c  f7fffffe          BL       LCD_DrawAreaColor
000050  bdf8              POP      {r3-r7,pc}
000052  f64f73ff          MOV      r3,#0xffff            ;724
000056  9300              STR      r3,[sp,#0]            ;725
000058  f8343012          LDRH     r3,[r4,r2,LSL #1]     ;725
00005c  f8312012          LDRH     r2,[r1,r2,LSL #1]     ;725
000060  4631              MOV      r1,r6                 ;725
000062  f7fffffe          BL       LCD_DrawAreaColor
000066  bdf8              POP      {r3-r7,pc}
000068  2300              MOVS     r3,#0                 ;730
00006a  9300              STR      r3,[sp,#0]            ;731
00006c  f8343012          LDRH     r3,[r4,r2,LSL #1]     ;731
000070  f8312012          LDRH     r2,[r1,r2,LSL #1]     ;731
000074  4631              MOV      r1,r6                 ;731
000076  f7fffffe          BL       LCD_DrawAreaColor
00007a  bdf8              POP      {r3-r7,pc}
00007c  f2435313          MOV      r3,#0x3513            ;736
000080  9300              STR      r3,[sp,#0]            ;737
000082  f8343012          LDRH     r3,[r4,r2,LSL #1]     ;737
000086  f8312012          LDRH     r2,[r1,r2,LSL #1]     ;737
00008a  4631              MOV      r1,r6                 ;737
00008c  f7fffffe          BL       LCD_DrawAreaColor
000090  bdf8              POP      {r3-r7,pc}
000092  f6421346          MOV      r3,#0x2946            ;741
000096  9300              STR      r3,[sp,#0]            ;742
000098  f8343012          LDRH     r3,[r4,r2,LSL #1]     ;742
00009c  f8312012          LDRH     r2,[r1,r2,LSL #1]     ;742
0000a0  4631              MOV      r1,r6                 ;742
0000a2  f7fffffe          BL       LCD_DrawAreaColor
0000a6  bdf8              POP      {r3-r7,pc}
;;;749    
                          ENDP

                  |L6.168|
                          DCD      ||.data||+0x8

                          AREA ||i.LCD_DrawLine||, CODE, READONLY, ALIGN=1

                  LCD_DrawLine PROC
;;;536    // 画直线
;;;537    void LCD_DrawLine(uint16 x1, uint16 y1, uint16 x2, uint16 y2, uint16 usColor, uint16 usLineWidth)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;538    {
;;;539    
;;;540    	uint16 t; 
;;;541    
;;;542    	int xerr=0,yerr=0,delta_x,delta_y,distance; 
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;543    
;;;544    	int incx,incy,uRow,uCol; 
;;;545    
;;;546    	delta_x=x2-x1; //计算坐标增量 
000008  1a17              SUBS     r7,r2,r0
;;;547    
;;;548    	delta_y=y2-y1; 
00000a  eba30801          SUB      r8,r3,r1
;;;549    
;;;550    	uRow=x1; 
00000e  4681              MOV      r9,r0
;;;551    
;;;552    	uCol=y1; 
000010  468a              MOV      r10,r1
;;;553    
;;;554    	if(delta_x>0)
;;;555    	{
;;;556    		incx=1; //设置单步方向 
;;;557    	}
;;;558    	else if(delta_x==0)
;;;559    	{
;;;560    		incx=0;//垂直线 
;;;561    	}
;;;562    	else
;;;563    	{
;;;564    		incx=-1;
000012  1e68              SUBS     r0,r5,#1
000014  2f00              CMP      r7,#0                 ;554
000016  dd03              BLE      |L7.32|
000018  f04f0101          MOV      r1,#1                 ;556
00001c  9102              STR      r1,[sp,#8]            ;556
00001e  e007              B        |L7.48|
                  |L7.32|
000020  d103              BNE      |L7.42|
000022  f04f0100          MOV      r1,#0                 ;560
000026  9102              STR      r1,[sp,#8]            ;560
000028  e002              B        |L7.48|
                  |L7.42|
00002a  9002              STR      r0,[sp,#8]
;;;565    		delta_x=-delta_x;
00002c  f1c70700          RSB      r7,r7,#0
                  |L7.48|
;;;566    	} 
;;;567    
;;;568    	if(delta_y>0)
000030  f1b80f00          CMP      r8,#0
000034  dd03              BLE      |L7.62|
;;;569    	{
;;;570    		incy=1; 
000036  f04f0001          MOV      r0,#1
00003a  9001              STR      r0,[sp,#4]
00003c  e007              B        |L7.78|
                  |L7.62|
;;;571    	}
;;;572    	else if(delta_y==0)
00003e  d103              BNE      |L7.72|
;;;573    	{
;;;574    		incy=0;//水平线 
000040  f04f0000          MOV      r0,#0
000044  9001              STR      r0,[sp,#4]
000046  e002              B        |L7.78|
                  |L7.72|
;;;575    	}
;;;576    	else
;;;577    	{
;;;578    		incy=-1;
000048  9001              STR      r0,[sp,#4]
;;;579    		delta_y=-delta_y;
00004a  f1c80800          RSB      r8,r8,#0
                  |L7.78|
;;;580    	} 
;;;581    
;;;582    	if(delta_x>delta_y)
00004e  4547              CMP      r7,r8
000050  dd01              BLE      |L7.86|
;;;583    	{
;;;584    		distance=delta_x; //选取基本增量坐标轴 
000052  463c              MOV      r4,r7
000054  e000              B        |L7.88|
                  |L7.86|
;;;585    	}
;;;586    	else 
;;;587    	{
;;;588    		distance=delta_y; 
000056  4644              MOV      r4,r8
                  |L7.88|
;;;589    	}
;;;590    
;;;591    	for(t=0;t<=distance+1;t++)//画线输出 
000058  f04f0b00          MOV      r11,#0
00005c  1c60              ADDS     r0,r4,#1
00005e  9003              STR      r0,[sp,#0xc]
000060  e019              B        |L7.150|
                  |L7.98|
;;;592    	{  
;;;593    
;;;594    		LCD_DrawAreaColor(uRow,uCol, 3, 3, usColor);//画点 
000062  980d              LDR      r0,[sp,#0x34]
000064  9000              STR      r0,[sp,#0]
000066  2303              MOVS     r3,#3
000068  fa1ff18a          UXTH     r1,r10
00006c  fa1ff089          UXTH     r0,r9
000070  461a              MOV      r2,r3
000072  f7fffffe          BL       LCD_DrawAreaColor
;;;595    
;;;596    		xerr+=delta_x ; 
000076  443d              ADD      r5,r5,r7
;;;597    
;;;598    		yerr+=delta_y ; 
000078  4446              ADD      r6,r6,r8
;;;599    
;;;600    		if(xerr>distance) 
00007a  42a5              CMP      r5,r4
00007c  dd02              BLE      |L7.132|
;;;601    		{ 
;;;602    
;;;603    			xerr-=distance; 
00007e  1b2d              SUBS     r5,r5,r4
;;;604    
;;;605    			uRow+=incx; 
000080  9802              LDR      r0,[sp,#8]
000082  4481              ADD      r9,r9,r0
                  |L7.132|
;;;606    
;;;607    		} 
;;;608    
;;;609    		if(yerr>distance) 
000084  42a6              CMP      r6,r4
000086  dd02              BLE      |L7.142|
;;;610    		{ 
;;;611    
;;;612    			yerr-=distance; 
000088  1b36              SUBS     r6,r6,r4
;;;613    
;;;614    			uCol+=incy; 
00008a  9801              LDR      r0,[sp,#4]
00008c  4482              ADD      r10,r10,r0
                  |L7.142|
00008e  f10b0b01          ADD      r11,r11,#1            ;591
000092  fa1ffb8b          UXTH     r11,r11               ;591
                  |L7.150|
000096  9803              LDR      r0,[sp,#0xc]          ;591
000098  4583              CMP      r11,r0                ;591
00009a  dde2              BLE      |L7.98|
;;;615    		} 
;;;616    	}  
;;;617    }  
00009c  e8bd8fff          POP      {r0-r11,pc}
;;;618    
                          ENDP


                          AREA ||i.LCD_DrawPic||, CODE, READONLY, ALIGN=2

                  LCD_DrawPic PROC
;;;493    // 在指定位置显示指定的图片
;;;494    void LCD_DrawPic(uint16 x, uint16 y, const uint16* pData)
000000  b530              PUSH     {r4,r5,lr}
;;;495    {
000002  4614              MOV      r4,r2
;;;496    	uint16 width=0, height=0;
;;;497    	uint32 i;
;;;498    	uint32 size;
;;;499    	
;;;500    	if(NULL == pData)
000004  2c00              CMP      r4,#0
000006  d00f              BEQ      |L8.40|
;;;501    	{
;;;502    		return;
;;;503    	}
;;;504    
;;;505    	width = pData[0];
000008  8822              LDRH     r2,[r4,#0]
;;;506    	height = pData[1];
00000a  8863              LDRH     r3,[r4,#2]
;;;507    	size = width;
;;;508    	size *= height;
00000c  fb02f503          MUL      r5,r2,r3
;;;509    
;;;510    	LCD_SetAreaByPointAndSize(x, y, width, height);
000010  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;511    
;;;512    	for(i=0; i<size; i++)
000014  2000              MOVS     r0,#0
;;;513    	{
;;;514    		LCD_WriteColor(pData[2+i]);
000016  4905              LDR      r1,|L8.44|
000018  e004              B        |L8.36|
                  |L8.26|
00001a  1c82              ADDS     r2,r0,#2
00001c  f8342012          LDRH     r2,[r4,r2,LSL #1]
000020  800a              STRH     r2,[r1,#0]
000022  1c40              ADDS     r0,r0,#1              ;512
                  |L8.36|
000024  42a8              CMP      r0,r5                 ;512
000026  d3f8              BCC      |L8.26|
                  |L8.40|
;;;515    	}
;;;516    }
000028  bd30              POP      {r4,r5,pc}
;;;517    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      0x60020000

                          AREA ||i.LCD_DrawPicFromAddress||, CODE, READONLY, ALIGN=2

                  LCD_DrawPicFromAddress PROC
;;;619    // 显示指定位置的图片数据，在参数中给出要显示的图片数据在SPI Flash中的首地址
;;;620    void LCD_DrawPicFromAddress(uint16 x, uint16 y, uint16 w, uint16 h, uint32 addr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;621    {
000004  4607              MOV      r7,r0
000006  9e06              LDR      r6,[sp,#0x18]
000008  460d              MOV      r5,r1
00000a  4614              MOV      r4,r2
00000c  4698              MOV      r8,r3
;;;622    #if 0	// NO DMA
;;;623    	uint32 size		= 0;
;;;624    	uint8  data[2];
;;;625    
;;;626    	/* 设定操作区域 */
;;;627    	LCD_SetAreaByPointAndSize(x, y, w, h);
;;;628    
;;;629    	/* 根据图片尺寸与数据作图 */
;;;630    	size = w * h;	
;;;631    
;;;632    	// 片选
;;;633    	SPI_FLASH_CS_L();
;;;634    
;;;635    	// 发送读取命令
;;;636    	(void)SPI_FLASH_SendByte(CMD_READ_BYTE);
;;;637    
;;;638    	// 发送24位起始地址
;;;639    	(void)SPI_FLASH_SendByte((addr & 0xFF0000) >> 16);
;;;640    	(void)SPI_FLASH_SendByte((addr& 0xFF00) >> 8);
;;;641    	(void)SPI_FLASH_SendByte(addr & 0xFF);
;;;642    
;;;643    	// 一直读取完指定的数量为止
;;;644    	while(size--)
;;;645    	{
;;;646    		// 读取一个字节
;;;647    		data[1] = SPI_FLASH_SendByte(0);
;;;648    		data[0] = SPI_FLASH_SendByte(0);
;;;649    
;;;650    		LCD_WriteColor( *((uint16*)data) );
;;;651    	}
;;;652    
;;;653    	// 释放
;;;654    	SPI_FLASH_CS_H();
;;;655    	
;;;656    #else	// DMA
;;;657    	uint32 size = 0, offset = 0;
;;;658    	uint32 srcAddr = addr;
;;;659    
;;;660    	/* 设定操作区域 */
;;;661    	LCD_SetAreaByPointAndSize( x, y, w, h );
00000e  4643              MOV      r3,r8
000010  4622              MOV      r2,r4
000012  4629              MOV      r1,r5
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;662    
;;;663    	/* 根据图片尺寸与数据作图 */
;;;664    	size = w;
;;;665    	size *= h;
00001a  fb04f408          MUL      r4,r4,r8
;;;666    	offset = y;
;;;667    	offset *= LCD_WIDTH;
00001e  20aa              MOVS     r0,#0xaa
000020  4345              MULS     r5,r0,r5
;;;668    	offset += x;
000022  443d              ADD      r5,r5,r7
;;;669    
;;;670    #define _DMA_MOVE_BYTES_COUNT_TOP_			0xE000
;;;671    	while(size > 0)
;;;672    	{
;;;673    		// 超过搬运上限，分多次
;;;674    		if(size > _DMA_MOVE_BYTES_COUNT_TOP_)
000024  f44f4860          MOV      r8,#0xe000
;;;675    		{
;;;676    			SPIx_DMAy_Read(srcAddr, (LCD_DAT_ADDR+offset), _DMA_MOVE_BYTES_COUNT_TOP_);			
000028  4f0d              LDR      r7,|L9.96|
00002a  e00e              B        |L9.74|
                  |L9.44|
00002c  4642              MOV      r2,r8                 ;674
00002e  4294              CMP      r4,r2                 ;674
000030  d90f              BLS      |L9.82|
000032  19e9              ADDS     r1,r5,r7
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       SPIx_DMAy_Read
;;;677    			srcAddr += _DMA_MOVE_BYTES_COUNT_TOP_;
00003a  f5064660          ADD      r6,r6,#0xe000
;;;678    			srcAddr += _DMA_MOVE_BYTES_COUNT_TOP_;
00003e  f5064660          ADD      r6,r6,#0xe000
;;;679    			size -= _DMA_MOVE_BYTES_COUNT_TOP_;
000042  f5a44460          SUB      r4,r4,#0xe000
;;;680    			offset += _DMA_MOVE_BYTES_COUNT_TOP_;
000046  f5054560          ADD      r5,r5,#0xe000
                  |L9.74|
00004a  2c00              CMP      r4,#0                 ;671
00004c  d1ee              BNE      |L9.44|
;;;681    		}
;;;682    		// 不超过搬运上限，一次完成
;;;683    		else
;;;684    		{
;;;685    			SPIx_DMAy_Read(srcAddr, (LCD_DAT_ADDR+offset), size);
;;;686    			break;
;;;687    		}
;;;688    	}
;;;689    #undef _DMA_MOVE_BYTES_COUNT_TOP_
;;;690    #endif
;;;691    }
00004e  e8bd81f0          POP      {r4-r8,pc}
                  |L9.82|
000052  b2a2              UXTH     r2,r4                 ;685
000054  19e9              ADDS     r1,r5,r7              ;685
000056  4630              MOV      r0,r6                 ;685
000058  e8bd41f0          POP      {r4-r8,lr}            ;685
00005c  f7ffbffe          B.W      SPIx_DMAy_Read
;;;692    
                          ENDP

                  |L9.96|
                          DCD      0x60020000

                          AREA ||i.LCD_DrawPixel||, CODE, READONLY, ALIGN=2

                  LCD_DrawPixel PROC
;;;242    // 绘制一个像素
;;;243    void LCD_DrawPixel(uint16 x, uint16 y, uint16 color)
000000  b510              PUSH     {r4,lr}
;;;244    {	   
000002  4614              MOV      r4,r2
;;;245    	LCD_SetCursor(x, y);
000004  f7fffffe          BL       LCD_SetCursor
;;;246    
;;;247    	LCD_CMD = 0x002C;
000008  202c              MOVS     r0,#0x2c
00000a  06c1              LSLS     r1,r0,#27
00000c  8008              STRH     r0,[r1,#0]
;;;248    	LCD_WriteColor(color);
00000e  4801              LDR      r0,|L10.20|
000010  8004              STRH     r4,[r0,#0]
;;;249    }	
000012  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  |L10.20|
                          DCD      0x60020000

                          AREA ||i.LCD_DrawRect||, CODE, READONLY, ALIGN=2

                  LCD_DrawRect PROC
;;;840    // 在指定位置绘制正方形
;;;841    void LCD_DrawRect(uint16 x, uint16 y, uint8 width, uint16 color)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;842    {
000004  b081              SUB      sp,sp,#4
000006  4617              MOV      r7,r2
000008  469b              MOV      r11,r3
;;;843    	uint8 i, j;
;;;844    	uint8 xPos, yPos;
;;;845    	
;;;846    	for(i=0; i<width; i++)
00000a  2600              MOVS     r6,#0
00000c  e01d              B        |L11.74|
                  |L11.14|
;;;847    	{
;;;848    		xPos = x;
00000e  9801              LDR      r0,[sp,#4]
000010  b2c4              UXTB     r4,r0
;;;849    		yPos = y+i;
000012  9802              LDR      r0,[sp,#8]
000014  4430              ADD      r0,r0,r6
000016  b2c0              UXTB     r0,r0
000018  9000              STR      r0,[sp,#0]
;;;850    		for(j=0; j<width; j++)
00001a  2500              MOVS     r5,#0
;;;851    		{
;;;852    			LCD_SetCursor(xPos++, yPos);
;;;853    
;;;854    			LCD_CMD = 0x002C;
00001c  f04f082c          MOV      r8,#0x2c
000020  f04f49c0          MOV      r9,#0x60000000
;;;855    
;;;856    			LCD_WriteColor(color);
000024  f8dfa02c          LDR      r10,|L11.84|
000028  e00b              B        |L11.66|
                  |L11.42|
00002a  4620              MOV      r0,r4                 ;852
00002c  1c64              ADDS     r4,r4,#1              ;852
00002e  b2e4              UXTB     r4,r4                 ;852
000030  9900              LDR      r1,[sp,#0]            ;852
000032  f7fffffe          BL       LCD_SetCursor
000036  f8a98000          STRH     r8,[r9,#0]            ;854
00003a  f8aab000          STRH     r11,[r10,#0]
00003e  1c6d              ADDS     r5,r5,#1              ;850
000040  b2ed              UXTB     r5,r5                 ;850
                  |L11.66|
000042  42bd              CMP      r5,r7                 ;850
000044  d3f1              BCC      |L11.42|
000046  1c76              ADDS     r6,r6,#1              ;846
000048  b2f6              UXTB     r6,r6                 ;846
                  |L11.74|
00004a  42be              CMP      r6,r7                 ;846
00004c  d3df              BCC      |L11.14|
;;;857    		}
;;;858    	}
;;;859    }
00004e  b005              ADD      sp,sp,#0x14
000050  e8bd8ff0          POP      {r4-r11,pc}
;;;860    
                          ENDP

                  |L11.84|
                          DCD      0x60020000

                          AREA ||i.LCD_DriverInit||, CODE, READONLY, ALIGN=2

                  LCD_DriverInit PROC
;;;269    // LCD驱动芯片初始化
;;;270    void LCD_DriverInit(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;271    {
;;;272    	LCD_RST_H();
000004  2101              MOVS     r1,#1
000006  4857              LDR      r0,|L12.356|
000008  f7fffffe          BL       gpio_bit_set
;;;273    	Delayms(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       Delayms
;;;274    	LCD_RST_L();
000012  2101              MOVS     r1,#1
000014  4853              LDR      r0,|L12.356|
000016  f7fffffe          BL       gpio_bit_reset
;;;275    	Delayms(10);
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       Delayms
;;;276    	LCD_RST_H();
000020  2101              MOVS     r1,#1
000022  4850              LDR      r0,|L12.356|
000024  f7fffffe          BL       gpio_bit_set
;;;277    	Delayms(120);
000028  2078              MOVS     r0,#0x78
00002a  f7fffffe          BL       Delayms
;;;278    	
;;;279    	LCD_CMD = (0x11);     
00002e  f04f41c0          MOV      r1,#0x60000000
000032  2011              MOVS     r0,#0x11
000034  8008              STRH     r0,[r1,#0]
;;;280    
;;;281    	Delayms(120);                //Delay 120ms	
000036  2078              MOVS     r0,#0x78
000038  f7fffffe          BL       Delayms
;;;282    
;;;283    	LCD_CMD = (0x36);     
00003c  2036              MOVS     r0,#0x36
00003e  0701              LSLS     r1,r0,#28
000040  8008              STRH     r0,[r1,#0]
;;;284    	LCD_DAT = (0x40); 
000042  4849              LDR      r0,|L12.360|
000044  2140              MOVS     r1,#0x40
000046  8001              STRH     r1,[r0,#0]
;;;285    //	LCD_DAT = (0x80);  
;;;286    
;;;287    	LCD_CMD = (0x3A);     
000048  f04f42c0          MOV      r2,#0x60000000
00004c  213a              MOVS     r1,#0x3a
00004e  8011              STRH     r1,[r2,#0]
;;;288    	LCD_DAT = (0x05);   //06
000050  2105              MOVS     r1,#5
000052  8001              STRH     r1,[r0,#0]
;;;289    
;;;290    	LCD_CMD = (0xB2);     
000054  21b2              MOVS     r1,#0xb2
000056  8011              STRH     r1,[r2,#0]
;;;291    	LCD_DAT = (0x0C);   
000058  210c              MOVS     r1,#0xc
00005a  8001              STRH     r1,[r0,#0]
;;;292    	LCD_DAT = (0x0C);   
00005c  8001              STRH     r1,[r0,#0]
;;;293    	LCD_DAT = (0x00);   
00005e  2100              MOVS     r1,#0
000060  8001              STRH     r1,[r0,#0]
;;;294    	LCD_DAT = (0x33);   
000062  2233              MOVS     r2,#0x33
000064  8002              STRH     r2,[r0,#0]
;;;295    	LCD_DAT = (0x33);   
000066  8002              STRH     r2,[r0,#0]
;;;296    
;;;297    	LCD_CMD = (0xB7);     
000068  f04f43c0          MOV      r3,#0x60000000
00006c  22b7              MOVS     r2,#0xb7
00006e  801a              STRH     r2,[r3,#0]
;;;298    	LCD_DAT = (0x35);   
000070  2235              MOVS     r2,#0x35
000072  8002              STRH     r2,[r0,#0]
;;;299    
;;;300    	LCD_CMD = (0xBB);     
000074  22bb              MOVS     r2,#0xbb
000076  801a              STRH     r2,[r3,#0]
;;;301    	LCD_DAT = (0x1A);   
000078  221a              MOVS     r2,#0x1a
00007a  8002              STRH     r2,[r0,#0]
;;;302    
;;;303    	LCD_CMD = (0xC0);     
00007c  22c0              MOVS     r2,#0xc0
00007e  801a              STRH     r2,[r3,#0]
;;;304    	LCD_DAT = (0x2C);   
000080  222c              MOVS     r2,#0x2c
000082  8002              STRH     r2,[r0,#0]
;;;305    
;;;306    	LCD_CMD = (0xC2);     
000084  22c2              MOVS     r2,#0xc2
000086  801a              STRH     r2,[r3,#0]
;;;307    	LCD_DAT = (0x01);   
000088  2501              MOVS     r5,#1
00008a  8005              STRH     r5,[r0,#0]
;;;308    
;;;309    	LCD_CMD = (0xC3);     
00008c  22c3              MOVS     r2,#0xc3
00008e  801a              STRH     r2,[r3,#0]
;;;310    	LCD_DAT = (0x0B);   
000090  220b              MOVS     r2,#0xb
000092  8002              STRH     r2,[r0,#0]
;;;311    
;;;312    	LCD_CMD = (0xC4);     
000094  22c4              MOVS     r2,#0xc4
000096  801a              STRH     r2,[r3,#0]
;;;313    	LCD_DAT = (0x20);   
000098  2220              MOVS     r2,#0x20
00009a  8002              STRH     r2,[r0,#0]
;;;314    
;;;315    	LCD_CMD = (0xC6);     
00009c  22c6              MOVS     r2,#0xc6
00009e  801a              STRH     r2,[r3,#0]
;;;316    	LCD_DAT = (0xeF); //  0f
0000a0  22ef              MOVS     r2,#0xef
0000a2  8002              STRH     r2,[r0,#0]
;;;317    
;;;318    	LCD_CMD = (0xD0);     
0000a4  22d0              MOVS     r2,#0xd0
0000a6  801a              STRH     r2,[r3,#0]
;;;319    	LCD_DAT = (0xA4);   
0000a8  22a4              MOVS     r2,#0xa4
0000aa  8002              STRH     r2,[r0,#0]
;;;320    	LCD_DAT = (0xA1);   
0000ac  22a1              MOVS     r2,#0xa1
0000ae  8002              STRH     r2,[r0,#0]
;;;321    
;;;322    	LCD_CMD = (0x21);     
0000b0  2221              MOVS     r2,#0x21
0000b2  801a              STRH     r2,[r3,#0]
;;;323    
;;;324    	LCD_CMD = (0xE0);     
0000b4  22e0              MOVS     r2,#0xe0
0000b6  801a              STRH     r2,[r3,#0]
;;;325    	LCD_DAT = (0x00);   
0000b8  8001              STRH     r1,[r0,#0]
;;;326    	LCD_DAT = (0x03);   
0000ba  f04f0903          MOV      r9,#3
0000be  f8a09000          STRH     r9,[r0,#0]
;;;327    	LCD_DAT = (0x07);   
0000c2  2207              MOVS     r2,#7
0000c4  8002              STRH     r2,[r0,#0]
;;;328    	LCD_DAT = (0x08);   
0000c6  f04f0a08          MOV      r10,#8
0000ca  f8a0a000          STRH     r10,[r0,#0]
;;;329    	LCD_DAT = (0x07);   
0000ce  8002              STRH     r2,[r0,#0]
;;;330    	LCD_DAT = (0x15);   
0000d0  2315              MOVS     r3,#0x15
0000d2  8003              STRH     r3,[r0,#0]
;;;331    	LCD_DAT = (0x2A);   
0000d4  232a              MOVS     r3,#0x2a
0000d6  8003              STRH     r3,[r0,#0]
;;;332    	LCD_DAT = (0x44);   
0000d8  2444              MOVS     r4,#0x44
0000da  8004              STRH     r4,[r0,#0]
;;;333    	LCD_DAT = (0x42);   
0000dc  2642              MOVS     r6,#0x42
0000de  8006              STRH     r6,[r0,#0]
;;;334    	LCD_DAT = (0x0A);   
0000e0  240a              MOVS     r4,#0xa
0000e2  8004              STRH     r4,[r0,#0]
;;;335    	LCD_DAT = (0x17);   
0000e4  2717              MOVS     r7,#0x17
0000e6  8007              STRH     r7,[r0,#0]
;;;336    	LCD_DAT = (0x18);   
0000e8  f04f0c18          MOV      r12,#0x18
0000ec  f8a0c000          STRH     r12,[r0,#0]
;;;337    	LCD_DAT = (0x25);   
0000f0  f04f0825          MOV      r8,#0x25
0000f4  f8a08000          STRH     r8,[r0,#0]
;;;338    	LCD_DAT = (0x27);   
0000f8  2427              MOVS     r4,#0x27
0000fa  8004              STRH     r4,[r0,#0]
;;;339    
;;;340    	LCD_CMD = (0xE1);     
0000fc  f04f4ec0          MOV      lr,#0x60000000
000100  f04f0be1          MOV      r11,#0xe1
000104  f8aeb000          STRH     r11,[lr,#0]
;;;341    	LCD_DAT = (0x00);   
000108  8001              STRH     r1,[r0,#0]
;;;342    	LCD_DAT = (0x03);   
00010a  f8a09000          STRH     r9,[r0,#0]
;;;343    	LCD_DAT = (0x08);   
00010e  f8a0a000          STRH     r10,[r0,#0]
;;;344    	LCD_DAT = (0x07);   
000112  8002              STRH     r2,[r0,#0]
;;;345    	LCD_DAT = (0x07);   
000114  8002              STRH     r2,[r0,#0]
;;;346    	LCD_DAT = (0x23);   
000116  2223              MOVS     r2,#0x23
000118  8002              STRH     r2,[r0,#0]
;;;347    	LCD_DAT = (0x2A);   
00011a  8003              STRH     r3,[r0,#0]
;;;348    	LCD_DAT = (0x43);   
00011c  f04f0943          MOV      r9,#0x43
000120  f8a09000          STRH     r9,[r0,#0]
;;;349    	LCD_DAT = (0x42);   
000124  8006              STRH     r6,[r0,#0]
;;;350    	LCD_DAT = (0x09);   
000126  2609              MOVS     r6,#9
000128  8006              STRH     r6,[r0,#0]
;;;351    	LCD_DAT = (0x18);   
00012a  f8a0c000          STRH     r12,[r0,#0]
;;;352    	LCD_DAT = (0x17);   
00012e  8007              STRH     r7,[r0,#0]
;;;353    	LCD_DAT = (0x25);   
000130  f8a08000          STRH     r8,[r0,#0]
;;;354    	LCD_DAT = (0x27);   
000134  8004              STRH     r4,[r0,#0]
;;;355    
;;;356    	LCD_CMD = (0x29);     
000136  2429              MOVS     r4,#0x29
000138  0756              LSLS     r6,r2,#29
00013a  8034              STRH     r4,[r6,#0]
;;;357    
;;;358    	LCD_CMD = (0x2A);     
00013c  0754              LSLS     r4,r2,#29
00013e  8023              STRH     r3,[r4,#0]
;;;359    	LCD_DAT = (0x00);   
000140  8001              STRH     r1,[r0,#0]
;;;360    	LCD_DAT = (0x23);   
000142  8002              STRH     r2,[r0,#0]
;;;361    	LCD_DAT = (0x00);   
000144  8001              STRH     r1,[r0,#0]
;;;362    	LCD_DAT = (0xCC);
000146  22cc              MOVS     r2,#0xcc
000148  8002              STRH     r2,[r0,#0]
;;;363    
;;;364    	LCD_CMD = (0x2B);     
00014a  222b              MOVS     r2,#0x2b
00014c  0753              LSLS     r3,r2,#29
00014e  801a              STRH     r2,[r3,#0]
;;;365    	LCD_DAT = (0x00);   
000150  8001              STRH     r1,[r0,#0]
;;;366    	LCD_DAT = (0x00);   
000152  8001              STRH     r1,[r0,#0]
;;;367    	LCD_DAT = (0x01);   
000154  8005              STRH     r5,[r0,#0]
;;;368    	LCD_DAT = (0x3F);
000156  213f              MOVS     r1,#0x3f
000158  8001              STRH     r1,[r0,#0]
;;;369    
;;;370    	LCD_CMD = (0x2C);
00015a  202c              MOVS     r0,#0x2c
00015c  06c1              LSLS     r1,r0,#27
00015e  8008              STRH     r0,[r1,#0]
;;;371    }
000160  e8bd9ff0          POP      {r4-r12,pc}
;;;372    
                          ENDP

                  |L12.356|
                          DCD      0x40010c00
                  |L12.360|
                          DCD      0x60020000

                          AREA ||i.LCD_FSMCInit||, CODE, READONLY, ALIGN=1

                  LCD_FSMCInit PROC
;;;414    ********************************************************************************/ 
;;;415    void LCD_FSMCInit(void)
000000  b500              PUSH     {lr}
;;;416    {
000002  b097              SUB      sp,sp,#0x5c
;;;417    	// GD32
;;;418        exmc_norsram_parameter_struct lcd_init_struct;
;;;419        exmc_norsram_timing_parameter_struct lcd_timing_init_struct;	
;;;420    
;;;421    	// 使能FSMC时钟
;;;422    	rcu_periph_clock_enable(RCU_EXMC);
000004  f44f60a1          MOV      r0,#0x508
000008  f7fffffe          BL       rcu_periph_clock_enable
;;;423    	exmc_norsram_deinit(EXMC_BANK0_NORSRAM_REGION0);
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       exmc_norsram_deinit
;;;424    
;;;425        /*-- FSMC Configuration ------------------------------------------------------*/
;;;426        /* FSMC_Bank1_NORSRAM1 configuration */
;;;427    	lcd_timing_init_struct.asyn_address_setuptime = 1;
000012  2101              MOVS     r1,#1
000014  9107              STR      r1,[sp,#0x1c]
;;;428    	lcd_timing_init_struct.asyn_address_holdtime = 0;
000016  2000              MOVS     r0,#0
000018  9006              STR      r0,[sp,#0x18]
;;;429    	lcd_timing_init_struct.asyn_data_setuptime = 2;
00001a  2202              MOVS     r2,#2
00001c  9205              STR      r2,[sp,#0x14]
;;;430    	lcd_timing_init_struct.bus_latency = 0;
00001e  9004              STR      r0,[sp,#0x10]
;;;431    	lcd_timing_init_struct.syn_clk_division = EXMC_SYN_CLOCK_RATIO_DISABLE;
000020  9003              STR      r0,[sp,#0xc]
;;;432    	lcd_timing_init_struct.syn_data_latency = EXMC_DATALAT_2_CLK;
000022  9002              STR      r0,[sp,#8]
;;;433    	lcd_timing_init_struct.asyn_access_mode = EXMC_ACCESS_MODE_B;
000024  070a              LSLS     r2,r1,#28
000026  9201              STR      r2,[sp,#4]
;;;434    
;;;435        /* Color LCD configuration ------------------------------------
;;;436         LCD configured as follow:
;;;437            - Data/Address MUX = Disable
;;;438            - Memory Type = SRAM
;;;439            - Data Width = 16bit
;;;440            - Write Operation = Enable
;;;441            - Extended Mode = Enable
;;;442            - Asynchronous Wait = Disable */
;;;443    	lcd_init_struct.norsram_region = EXMC_BANK0_NORSRAM_REGION0;
000028  9008              STR      r0,[sp,#0x20]
;;;444    	lcd_init_struct.address_data_mux = DISABLE;
00002a  9014              STR      r0,[sp,#0x50]
;;;445       	lcd_init_struct.memory_type = EXMC_MEMORY_TYPE_PSRAM;	
00002c  2204              MOVS     r2,#4
00002e  9213              STR      r2,[sp,#0x4c]
;;;446    	lcd_init_struct.asyn_wait = DISABLE;
000030  900b              STR      r0,[sp,#0x2c]
;;;447    	lcd_init_struct.databus_width = EXMC_NOR_DATABUS_WIDTH_16B;
000032  2210              MOVS     r2,#0x10
000034  9212              STR      r2,[sp,#0x48]
;;;448    	lcd_init_struct.burst_mode = DISABLE;
000036  9011              STR      r0,[sp,#0x44]
;;;449    	lcd_init_struct.nwait_polarity = EXMC_NWAIT_POLARITY_LOW;
000038  9010              STR      r0,[sp,#0x40]
;;;450    	lcd_init_struct.wrap_burst_mode = DISABLE;	
00003a  900f              STR      r0,[sp,#0x3c]
;;;451    	lcd_init_struct.nwait_config = EXMC_NWAIT_CONFIG_BEFORE;	
00003c  900e              STR      r0,[sp,#0x38]
;;;452    	lcd_init_struct.memory_write = ENABLE;
00003e  910d              STR      r1,[sp,#0x34]
;;;453        lcd_init_struct.nwait_signal = DISABLE;
000040  900c              STR      r0,[sp,#0x30]
;;;454    	lcd_init_struct.extended_mode = DISABLE;
000042  900a              STR      r0,[sp,#0x28]
;;;455    	lcd_init_struct.write_mode = EXMC_ASYN_WRITE;								// 异步写
000044  9009              STR      r0,[sp,#0x24]
;;;456        lcd_init_struct.read_write_timing = &lcd_timing_init_struct;
000046  a801              ADD      r0,sp,#4
000048  9015              STR      r0,[sp,#0x54]
;;;457        lcd_init_struct.write_timing = &lcd_timing_init_struct;
00004a  9016              STR      r0,[sp,#0x58]
;;;458    	exmc_norsram_init(&lcd_init_struct);
00004c  a808              ADD      r0,sp,#0x20
00004e  f7fffffe          BL       exmc_norsram_init
;;;459    
;;;460    	/* - BANK 1 (of NOR/SRAM Bank 0~3) is enabled */
;;;461        exmc_norsram_enable(EXMC_BANK0_NORSRAM_REGION0);
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       exmc_norsram_enable
;;;462    }
000058  b017              ADD      sp,sp,#0x5c
00005a  bd00              POP      {pc}
;;;463    
                          ENDP


                          AREA ||i.LCD_FillColor||, CODE, READONLY, ALIGN=2

                  LCD_FillColor PROC
;;;251    // 填充指定的颜色
;;;252    void LCD_FillColor(uint16 color)
000000  b570              PUSH     {r4-r6,lr}
;;;253    {
000002  4604              MOV      r4,r0
;;;254    	uint16 i,j;
;;;255    
;;;256    	// 从原点开始扫描
;;;257    	LCD_SetAreaByPointAndSize(0, 0, LCD_WIDTH, LCD_HEIGHT);
000004  f44f76a0          MOV      r6,#0x140
000008  2100              MOVS     r1,#0
00000a  4633              MOV      r3,r6
00000c  22aa              MOVS     r2,#0xaa
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;258    
;;;259    	for (i=0;i<LCD_HEIGHT;i++)
000014  2200              MOVS     r2,#0
;;;260    	{
;;;261    		for (j=0;j<LCD_WIDTH;j++)
;;;262    		{
;;;263    			LCD_WriteColor(color);
000016  4d06              LDR      r5,|L14.48|
                  |L14.24|
000018  2100              MOVS     r1,#0                 ;261
                  |L14.26|
00001a  802c              STRH     r4,[r5,#0]
00001c  1c49              ADDS     r1,r1,#1              ;261
00001e  b289              UXTH     r1,r1                 ;261
000020  29aa              CMP      r1,#0xaa              ;261
000022  d3fa              BCC      |L14.26|
000024  1c52              ADDS     r2,r2,#1              ;259
000026  b292              UXTH     r2,r2                 ;259
000028  42b2              CMP      r2,r6                 ;259
00002a  d3f5              BCC      |L14.24|
;;;264    		}
;;;265    	}
;;;266    }
00002c  bd70              POP      {r4-r6,pc}
;;;267    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      0x60020000

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=1

                  LCD_Init PROC
;;;465    // LCD驱动模块初始化
;;;466    void LCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;467    {
;;;468    	LCD_CtrlPortInit();
000002  f7fffffe          BL       LCD_CtrlPortInit
;;;469    
;;;470    	LCD_FSMCInit();
000006  f7fffffe          BL       LCD_FSMCInit
;;;471    
;;;472    	LCD_DriverInit();
00000a  f7fffffe          BL       LCD_DriverInit
;;;473     
;;;474    	LCD_FillColor(LCD_COLOR_BLACK);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       LCD_FillColor
;;;475    
;;;476    	// LCD背光PWM控制初始化
;;;477    	BACK_LIGHT_Init();
000014  e8bd4010          POP      {r4,lr}
000018  f7ffbffe          B.W      BACK_LIGHT_Init
;;;478    	
;;;479    //	// 调试时开启:打开开关屏默认点亮
;;;480    //	BACK_LIGHT_Start(BACK_LIGHT_LEVEL_ON);
;;;481    //	
;;;482    //	LCD_DrawPic(0, 0, pic_1);
;;;483    ////	LCD_DrawBmpByID(0, 0, 0, LCD_OPERATOR_MODE_DRAW);
;;;484    //	while(1);
;;;485    
;;;486    }
;;;487    
                          ENDP


                          AREA ||i.LCD_PrintChar||, CODE, READONLY, ALIGN=2

                  LCD_PrintChar PROC
;;;750    // 在指定坐标位置打印一个字符
;;;751    void LCD_PrintChar(uint16 x, uint16 y, uint8 ch, uint16 color, LCD_OPERATOR_MODE_E mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;752    {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4610              MOV      r0,r2
00000a  4698              MOV      r8,r3
;;;753    	uint16 width=0, height=0;
;;;754    	uint32 i, j;
;;;755    	uint32 size;
;;;756    	uint16* pData = FONT_GetAsciiDataPtr(ch);
00000c  f7fffffe          BL       FONT_GetAsciiDataPtr
000010  4607              MOV      r7,r0
;;;757    	uint16 mask=0x0001;
000012  2401              MOVS     r4,#1
;;;758    	
;;;759    	width = 6;//FONT_WIDTH();
000014  2506              MOVS     r5,#6
;;;760    	height = 16;//FONT_HEIGHT();
000016  2610              MOVS     r6,#0x10
;;;761    
;;;762    	size = width;
;;;763    	size *= height;
;;;764    
;;;765    	LCD_SetAreaByPointAndSize(x, y, width, height);
000018  4633              MOV      r3,r6
00001a  462a              MOV      r2,r5
00001c  4651              MOV      r1,r10
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       LCD_SetAreaByPointAndSize
;;;766    
;;;767    	for(i=0; i<height; i++)
000024  2100              MOVS     r1,#0
;;;768    	{
;;;769    		for(j=0; j<width; j++)
;;;770    		{
;;;771    			if((*(pData+j)) & mask)
;;;772    			{
;;;773    				LCD_WriteColor(color);
000026  4a0d              LDR      r2,|L16.92|
000028  2300              MOVS     r3,#0
;;;774    			}
;;;775    			else
;;;776    			{
;;;777    				LCD_WriteColor(0);
;;;778    			}
;;;779    		}
;;;780    
;;;781    		mask <<= 1;
00002a  f64f7cff          MOV      r12,#0xffff
00002e  e010              B        |L16.82|
                  |L16.48|
000030  2000              MOVS     r0,#0                 ;769
000032  e009              B        |L16.72|
                  |L16.52|
000034  f8379010          LDRH     r9,[r7,r0,LSL #1]     ;771
000038  ea190f04          TST      r9,r4                 ;771
00003c  d002              BEQ      |L16.68|
00003e  f8a28000          STRH     r8,[r2,#0]            ;773
000042  e000              B        |L16.70|
                  |L16.68|
000044  8013              STRH     r3,[r2,#0]            ;777
                  |L16.70|
000046  1c40              ADDS     r0,r0,#1              ;769
                  |L16.72|
000048  42a8              CMP      r0,r5                 ;769
00004a  d3f3              BCC      |L16.52|
00004c  ea0c0444          AND      r4,r12,r4,LSL #1
000050  1c49              ADDS     r1,r1,#1              ;767
                  |L16.82|
000052  42b1              CMP      r1,r6                 ;767
000054  d3ec              BCC      |L16.48|
;;;782    	}
;;;783    }
000056  e8bd87f0          POP      {r4-r10,pc}
;;;784    
                          ENDP

00005a  0000              DCW      0x0000
                  |L16.92|
                          DCD      0x60020000

                          AREA ||i.LCD_PrintQR||, CODE, READONLY, ALIGN=2

                  LCD_PrintQR PROC
;;;863    // 将字符串转换成二维码并显示到指定的位置
;;;864    void LCD_PrintQR(uint16 x, uint16 y)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;865    {
000004  b091              SUB      sp,sp,#0x44
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
;;;866    	uint8 i, j;
;;;867    	uint8 QR[PARAM_NVM_QR_SIZE+1] = {0};
00000a  2124              MOVS     r1,#0x24
00000c  a808              ADD      r0,sp,#0x20
00000e  f7fffffe          BL       __aeabi_memclr4
;;;868    	uint8 temp[18] = {0};
000012  2114              MOVS     r1,#0x14
000014  a803              ADD      r0,sp,#0xc
000016  f7fffffe          BL       __aeabi_memclr4
;;;869    	uint8 md_temp[8] = {0};
00001a  2000              MOVS     r0,#0
00001c  9001              STR      r0,[sp,#4]
00001e  9002              STR      r0,[sp,#8]
;;;870    	uint8 dotSize = 2;
000020  2602              MOVS     r6,#2
;;;871    
;;;872    	// 绘制背景
;;;873    	LCD_DrawRect(x-2, y-2, 70, LCD_COLOR_WHITE);
000022  f1a80002          SUB      r0,r8,#2
000026  b281              UXTH     r1,r0
000028  1eb8              SUBS     r0,r7,#2
00002a  b280              UXTH     r0,r0
00002c  f64f73ff          MOV      r3,#0xffff
000030  2246              MOVS     r2,#0x46
000032  f7fffffe          BL       LCD_DrawRect
;;;874    
;;;875    	// 头
;;;876    	QR[0] = '@';
000036  2440              MOVS     r4,#0x40
000038  f88d4020          STRB     r4,[sp,#0x20]
;;;877    	QR[1] = 'd';
00003c  2064              MOVS     r0,#0x64
00003e  f88d0021          STRB     r0,[sp,#0x21]
;;;878    	QR[2] = 't';
000042  2074              MOVS     r0,#0x74
000044  f88d0022          STRB     r0,[sp,#0x22]
;;;879    	
;;;880    	// 随机盐
;;;881    	QR[3] = '1';
000048  2531              MOVS     r5,#0x31
00004a  f88d5023          STRB     r5,[sp,#0x23]
;;;882    	QR[4] = '2';
00004e  f04f0932          MOV      r9,#0x32
000052  f88d9024          STRB     r9,[sp,#0x24]
;;;883    	QR[5] = '3';
000056  f04f0a33          MOV      r10,#0x33
00005a  f88da025          STRB     r10,[sp,#0x25]
;;;884    	QR[6] = '4';
00005e  f04f0b34          MOV      r11,#0x34
000062  f88db026          STRB     r11,[sp,#0x26]
;;;885    	QR[7] = '5';
;;;886    	
;;;887    	// 车型标识
;;;888    	QR[8] = paramCB.nvm.param.protocol.carModel[0];//A0 :欧洲送样 A1 :Aventure A4 :Level
000066  485a              LDR      r0,|L17.464|
000068  f89012c3          LDRB     r1,[r0,#0x2c3]  ; paramCB
00006c  f88d1028          STRB     r1,[sp,#0x28]
;;;889    	QR[9] = paramCB.nvm.param.protocol.carModel[1];
000070  f89002c4          LDRB     r0,[r0,#0x2c4]  ; paramCB
000074  f88d0029          STRB     r0,[sp,#0x29]
;;;890    	
;;;891    	// 蓝牙MAC地址
;;;892    	QR[10] = bleUartCB.rx.macBuff[0];
000078  4856              LDR      r0,|L17.468|
00007a  7801              LDRB     r1,[r0,#0]  ; bleUartCB
00007c  f88d102a          STRB     r1,[sp,#0x2a]
;;;893    	QR[11] = bleUartCB.rx.macBuff[1];
000080  7841              LDRB     r1,[r0,#1]  ; bleUartCB
000082  f88d102b          STRB     r1,[sp,#0x2b]
;;;894    	
;;;895    	QR[12] = bleUartCB.rx.macBuff[3];
000086  78c1              LDRB     r1,[r0,#3]  ; bleUartCB
000088  f88d102c          STRB     r1,[sp,#0x2c]
;;;896    	QR[13] = bleUartCB.rx.macBuff[4];
00008c  7901              LDRB     r1,[r0,#4]  ; bleUartCB
00008e  f88d102d          STRB     r1,[sp,#0x2d]
;;;897    	
;;;898    	QR[14] = bleUartCB.rx.macBuff[6];
000092  7981              LDRB     r1,[r0,#6]  ; bleUartCB
000094  f88d102e          STRB     r1,[sp,#0x2e]
;;;899    	QR[15] = bleUartCB.rx.macBuff[7];
000098  79c1              LDRB     r1,[r0,#7]  ; bleUartCB
00009a  f88d102f          STRB     r1,[sp,#0x2f]
;;;900    	
;;;901    	QR[16] = bleUartCB.rx.macBuff[9];
00009e  7a41              LDRB     r1,[r0,#9]  ; bleUartCB
0000a0  f88d1030          STRB     r1,[sp,#0x30]
;;;902    	QR[17] = bleUartCB.rx.macBuff[10];
0000a4  7a81              LDRB     r1,[r0,#0xa]  ; bleUartCB
0000a6  f88d1031          STRB     r1,[sp,#0x31]
;;;903    	
;;;904    	QR[18] = bleUartCB.rx.macBuff[12];
0000aa  7b01              LDRB     r1,[r0,#0xc]  ; bleUartCB
0000ac  f88d1032          STRB     r1,[sp,#0x32]
;;;905    	QR[19] = bleUartCB.rx.macBuff[13];
0000b0  7b41              LDRB     r1,[r0,#0xd]  ; bleUartCB
0000b2  f88d1033          STRB     r1,[sp,#0x33]
;;;906    	
;;;907    	QR[20] = bleUartCB.rx.macBuff[15];
0000b6  7bc1              LDRB     r1,[r0,#0xf]  ; bleUartCB
0000b8  f88d1034          STRB     r1,[sp,#0x34]
;;;908    	QR[21] = bleUartCB.rx.macBuff[16];
0000bc  7c00              LDRB     r0,[r0,#0x10]  ; bleUartCB
0000be  f88d0035          STRB     r0,[sp,#0x35]
;;;909    	
;;;910    	// UUID
;;;911    	QR[22] = '0';
0000c2  2030              MOVS     r0,#0x30
0000c4  f88d0036          STRB     r0,[sp,#0x36]
;;;912    
;;;913    	// (UUID + 车型标识 + 蓝牙MAC地址)截取6-18位
;;;914    	QR[7] = '0';
0000c8  f88d0027          STRB     r0,[sp,#0x27]
;;;915    	getMd5CatSign(&QR[7], 15, 6, 18, temp);
0000cc  a803              ADD      r0,sp,#0xc
0000ce  9000              STR      r0,[sp,#0]
0000d0  2312              MOVS     r3,#0x12
0000d2  2206              MOVS     r2,#6
0000d4  210f              MOVS     r1,#0xf
0000d6  301b              ADDS     r0,r0,#0x1b
0000d8  f7fffffe          BL       getMd5CatSign
;;;916    	QR[7] = '5';
0000dc  2035              MOVS     r0,#0x35
0000de  f88d0027          STRB     r0,[sp,#0x27]
;;;917    	
;;;918    	// 随机盐
;;;919    	temp[12] = '1';
0000e2  f88d5018          STRB     r5,[sp,#0x18]
;;;920    	temp[13] = '2';
0000e6  f88d9019          STRB     r9,[sp,#0x19]
;;;921    	temp[14] = '3';
0000ea  f88da01a          STRB     r10,[sp,#0x1a]
;;;922    	temp[15] = '4';
0000ee  f88db01b          STRB     r11,[sp,#0x1b]
;;;923    	temp[16] = '5';
0000f2  f88d001c          STRB     r0,[sp,#0x1c]
;;;924    	getMd5CatSign(temp, 17, 1, 9, md_temp);
0000f6  a801              ADD      r0,sp,#4
0000f8  9000              STR      r0,[sp,#0]
0000fa  2309              MOVS     r3,#9
0000fc  2201              MOVS     r2,#1
0000fe  2111              MOVS     r1,#0x11
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       getMd5CatSign
;;;925    	
;;;926    	// 秘钥
;;;927    	QR[23] = md_temp[0];
000106  f89d0004          LDRB     r0,[sp,#4]
00010a  f88d0037          STRB     r0,[sp,#0x37]
;;;928    	QR[24] = md_temp[1];
00010e  f89d0005          LDRB     r0,[sp,#5]
000112  f88d0038          STRB     r0,[sp,#0x38]
;;;929    	QR[25] = md_temp[2];
000116  f89d0006          LDRB     r0,[sp,#6]
00011a  f88d0039          STRB     r0,[sp,#0x39]
;;;930    	QR[26] = md_temp[3];
00011e  f89d0007          LDRB     r0,[sp,#7]
000122  f88d003a          STRB     r0,[sp,#0x3a]
;;;931    	QR[27] = md_temp[4];
000126  f89d0008          LDRB     r0,[sp,#8]
00012a  f88d003b          STRB     r0,[sp,#0x3b]
;;;932    	QR[28] = md_temp[5];
00012e  f89d0009          LDRB     r0,[sp,#9]
000132  f88d003c          STRB     r0,[sp,#0x3c]
;;;933    	QR[29] = md_temp[6];
000136  f89d000a          LDRB     r0,[sp,#0xa]
00013a  f88d003d          STRB     r0,[sp,#0x3d]
;;;934    	QR[30] = md_temp[7];
00013e  f89d000b          LDRB     r0,[sp,#0xb]
000142  f88d003e          STRB     r0,[sp,#0x3e]
;;;935    	
;;;936    	// 尾
;;;937    	QR[31] = '@';
000146  f88d403f          STRB     r4,[sp,#0x3f]
;;;938    
;;;939    	// 生成二维码，不需要重复生成
;;;940    	if(NULL == qrcode)
00014a  f8df908c          LDR      r9,|L17.472|
00014e  f8d90000          LDR      r0,[r9,#0]  ; qrcode
000152  b958              CBNZ     r0,|L17.364|
;;;941    	{
;;;942    		qrcode = QRcode_encodeString((const char *)QR, 2, QR_ECLEVEL_H, QR_MODE_8, 1);
000154  2001              MOVS     r0,#1
000156  2302              MOVS     r3,#2
000158  9000              STR      r0,[sp,#0]
00015a  2203              MOVS     r2,#3
00015c  4619              MOV      r1,r3
00015e  a808              ADD      r0,sp,#0x20
000160  f7fffffe          BL       QRcode_encodeString
000164  f8c90000          STR      r0,[r9,#0]  ; qrcode
;;;943    		if (NULL == qrcode)
000168  2800              CMP      r0,#0
00016a  d02d              BEQ      |L17.456|
                  |L17.364|
;;;944    		{
;;;945    			return;
;;;946    		}
;;;947    	}
;;;948    
;;;949    	// 显示二维码
;;;950    	for(j=0; j<qrcode->width; j++)
00016c  2500              MOVS     r5,#0
00016e  e026              B        |L17.446|
                  |L17.368|
;;;951    	{
;;;952    		for(i=0; i<qrcode->width; i++)
000170  2400              MOVS     r4,#0
000172  e01d              B        |L17.432|
                  |L17.372|
;;;953    		{
;;;954    			if(qrcode->data[j*qrcode->width+i]&0x01)
000174  6890              LDR      r0,[r2,#8]
000176  fb050003          MLA      r0,r5,r3,r0
00017a  5c20              LDRB     r0,[r4,r0]
00017c  07c0              LSLS     r0,r0,#31
00017e  d00a              BEQ      |L17.406|
;;;955    			{
;;;956    				LCD_DrawRect(x+i*dotSize, y+j*dotSize, dotSize, LCD_COLOR_BLACK);
000180  fb058006          MLA      r0,r5,r6,r8
000184  b281              UXTH     r1,r0
000186  fb047006          MLA      r0,r4,r6,r7
00018a  b280              UXTH     r0,r0
00018c  2300              MOVS     r3,#0
00018e  4632              MOV      r2,r6
000190  f7fffffe          BL       LCD_DrawRect
000194  e00a              B        |L17.428|
                  |L17.406|
;;;957    			}
;;;958    			else
;;;959    			{
;;;960    				LCD_DrawRect(x+i*dotSize, y+j*dotSize, dotSize, LCD_COLOR_WHITE);
000196  fb058006          MLA      r0,r5,r6,r8
00019a  b281              UXTH     r1,r0
00019c  fb047006          MLA      r0,r4,r6,r7
0001a0  b280              UXTH     r0,r0
0001a2  f64f73ff          MOV      r3,#0xffff
0001a6  4632              MOV      r2,r6
0001a8  f7fffffe          BL       LCD_DrawRect
                  |L17.428|
0001ac  1c64              ADDS     r4,r4,#1              ;952
0001ae  b2e4              UXTB     r4,r4                 ;952
                  |L17.432|
0001b0  f8d92000          LDR      r2,[r9,#0]            ;952  ; qrcode
0001b4  6853              LDR      r3,[r2,#4]            ;952
0001b6  42a3              CMP      r3,r4                 ;952
0001b8  dcdc              BGT      |L17.372|
0001ba  1c6d              ADDS     r5,r5,#1              ;950
0001bc  b2ed              UXTB     r5,r5                 ;950
                  |L17.446|
0001be  f8d90000          LDR      r0,[r9,#0]            ;950  ; qrcode
0001c2  6840              LDR      r0,[r0,#4]            ;950
0001c4  42a8              CMP      r0,r5                 ;950
0001c6  dcd3              BGT      |L17.368|
                  |L17.456|
;;;961    			}
;;;962    		}
;;;963    	}
;;;964    }
0001c8  b011              ADD      sp,sp,#0x44
0001ca  e8bd8ff0          POP      {r4-r11,pc}
;;;965    
                          ENDP

0001ce  0000              DCW      0x0000
                  |L17.464|
                          DCD      paramCB
                  |L17.468|
                          DCD      bleUartCB+0x50f
                  |L17.472|
                          DCD      ||.data||

                          AREA ||i.LCD_PrintString||, CODE, READONLY, ALIGN=1

                  LCD_PrintString PROC
;;;785    // 从指定位置开始，打印一个字符串
;;;786    void LCD_PrintString(uint16 x, uint16 y, char* pStr, uint16 color, LCD_OPERATOR_MODE_E mode)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;787    {
000004  4614              MOV      r4,r2
000006  9e08              LDR      r6,[sp,#0x20]
000008  4698              MOV      r8,r3
;;;788    	uint16 xPos=x, yPos=y;
00000a  4605              MOV      r5,r0
00000c  460f              MOV      r7,r1
;;;789    	
;;;790    	if(NULL == pStr)
00000e  2c00              CMP      r4,#0
000010  d011              BEQ      |L18.54|
;;;791    	{
;;;792    		return;
;;;793    	}
;;;794    
;;;795    	if((x >= LCD_WIDTH)||(y >= LCD_HEIGHT))
000012  28aa              CMP      r0,#0xaa
000014  d20f              BCS      |L18.54|
000016  f5b17fa0          CMP      r1,#0x140
00001a  d20c              BCS      |L18.54|
00001c  e008              B        |L18.48|
                  |L18.30|
;;;796    	{
;;;797    		return;
;;;798    	}
;;;799    
;;;800    	while(0 != *pStr)
;;;801    	{
;;;802    		LCD_PrintChar(xPos, yPos, *pStr, color, mode);
00001e  4643              MOV      r3,r8
000020  4639              MOV      r1,r7
000022  4628              MOV      r0,r5
000024  9600              STR      r6,[sp,#0]
000026  f7fffffe          BL       LCD_PrintChar
;;;803    
;;;804    		xPos += FONT_WIDTH();
00002a  1dad              ADDS     r5,r5,#6
00002c  b2ad              UXTH     r5,r5
;;;805    		pStr ++;
00002e  1c64              ADDS     r4,r4,#1
                  |L18.48|
000030  7822              LDRB     r2,[r4,#0]            ;800
000032  2a00              CMP      r2,#0                 ;800
000034  d1f3              BNE      |L18.30|
                  |L18.54|
;;;806    	}
;;;807    }
000036  e8bd83f8          POP      {r3-r9,pc}
;;;808    
                          ENDP


                          AREA ||i.LCD_PrintStringNum||, CODE, READONLY, ALIGN=2

                  LCD_PrintStringNum PROC
;;;830    // 从指定位置开始，打印数字
;;;831    void LCD_PrintStringNum(uint16 x, uint16 y, uint32 u8Num, uint16 color, LCD_OPERATOR_MODE_E mode)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;832    {
000004  4605              MOV      r5,r0
000006  9c0a              LDR      r4,[sp,#0x28]
000008  460e              MOV      r6,r1
00000a  4610              MOV      r0,r2
00000c  461f              MOV      r7,r3
;;;833    	char outStr[10];
;;;834    	
;;;835    	itoa(u8Num,outStr);
00000e  a901              ADD      r1,sp,#4
000010  f7fffffe          BL       itoa
;;;836    	LCD_PrintString(x, y, "             ",color , mode);
000014  463b              MOV      r3,r7
000016  a207              ADR      r2,|L19.52|
000018  4631              MOV      r1,r6
00001a  4628              MOV      r0,r5
00001c  9400              STR      r4,[sp,#0]
00001e  f7fffffe          BL       LCD_PrintString
;;;837    	LCD_PrintString(x, y, outStr,color , mode);
000022  463b              MOV      r3,r7
000024  aa01              ADD      r2,sp,#4
000026  4631              MOV      r1,r6
000028  4628              MOV      r0,r5
00002a  9400              STR      r4,[sp,#0]
00002c  f7fffffe          BL       LCD_PrintString
;;;838    }
000030  e8bd81ff          POP      {r0-r8,pc}
;;;839    
                          ENDP

                  |L19.52|
000034  20202020          DCB      "             ",0
000038  20202020
00003c  20202020
000040  2000    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.LCD_Process||, CODE, READONLY, ALIGN=1

                  LCD_Process PROC
;;;488    // LCD处理过程函数
;;;489    void LCD_Process(void)
000000  4770              BX       lr
;;;490    {
;;;491    }
;;;492    
                          ENDP


                          AREA ||i.LCD_SetAreaBy2Point||, CODE, READONLY, ALIGN=2

                  LCD_SetAreaBy2Point PROC
;;;178    // 设定操作区域，输入参数为起始x坐标、结束x坐标、起始y坐标、结束y坐标
;;;179    void LCD_SetAreaBy2Point(uint16 startX, uint16 startY, uint16 endX, uint16 endY)
000000  b570              PUSH     {r4-r6,lr}
;;;180    {
;;;181    	LCD_CMD = 0x002A;
000002  f04f45c0          MOV      r5,#0x60000000
000006  242a              MOVS     r4,#0x2a
000008  802c              STRH     r4,[r5,#0]
;;;182    	LCD_DAT = startX>>8;
00000a  4c0b              LDR      r4,|L21.56|
00000c  0a06              LSRS     r6,r0,#8
00000e  8026              STRH     r6,[r4,#0]
;;;183    	LCD_DAT = startX&0XFF;
000010  b2c0              UXTB     r0,r0
000012  8020              STRH     r0,[r4,#0]
;;;184    	LCD_DAT = endX>>8;
000014  0a10              LSRS     r0,r2,#8
000016  8020              STRH     r0,[r4,#0]
;;;185    	LCD_DAT = endX&0XFF;
000018  b2d0              UXTB     r0,r2
00001a  8020              STRH     r0,[r4,#0]
;;;186    
;;;187    	LCD_CMD = 0x002B;
00001c  202b              MOVS     r0,#0x2b
00001e  8028              STRH     r0,[r5,#0]
;;;188    	LCD_DAT = startY>>8;
000020  0a08              LSRS     r0,r1,#8
000022  8020              STRH     r0,[r4,#0]
;;;189    	LCD_DAT = startY&0XFF;
000024  b2c8              UXTB     r0,r1
000026  8020              STRH     r0,[r4,#0]
;;;190    	LCD_DAT = endY>>8;
000028  0a18              LSRS     r0,r3,#8
00002a  8020              STRH     r0,[r4,#0]
;;;191    	LCD_DAT = endY&0XFF;
00002c  b2d8              UXTB     r0,r3
00002e  8020              STRH     r0,[r4,#0]
;;;192    
;;;193    	LCD_WriteGRAM();
000030  202c              MOVS     r0,#0x2c
000032  8028              STRH     r0,[r5,#0]
;;;194    }
000034  bd70              POP      {r4-r6,pc}
;;;195    
                          ENDP

000036  0000              DCW      0x0000
                  |L21.56|
                          DCD      0x60020000

                          AREA ||i.LCD_SetAreaByPointAndSize||, CODE, READONLY, ALIGN=2

                  LCD_SetAreaByPointAndSize PROC
;;;196    // 设定操作区域，输入参数为起始x坐标、起始y坐标、区域宽、区域高
;;;197    void LCD_SetAreaByPointAndSize(uint16 startX, uint16 startY, uint16 width, uint16 height)
000000  b570              PUSH     {r4-r6,lr}
;;;198    {
;;;199    	startX += 0x23;
000002  3023              ADDS     r0,r0,#0x23
000004  b284              UXTH     r4,r0
;;;200    	
;;;201    	LCD_CMD = 0x002A;
000006  f04f45c0          MOV      r5,#0x60000000
00000a  202a              MOVS     r0,#0x2a
00000c  8028              STRH     r0,[r5,#0]
;;;202    	LCD_DAT = startX>>8;
00000e  480d              LDR      r0,|L22.68|
000010  0a26              LSRS     r6,r4,#8
000012  8006              STRH     r6,[r0,#0]
;;;203    	LCD_DAT = startX&0XFF;
000014  b2e6              UXTB     r6,r4
000016  8006              STRH     r6,[r0,#0]
;;;204    	LCD_DAT = (startX+width-1)>>8;
000018  4422              ADD      r2,r2,r4
00001a  1e52              SUBS     r2,r2,#1
00001c  0a14              LSRS     r4,r2,#8
00001e  8004              STRH     r4,[r0,#0]
;;;205    	LCD_DAT = (startX+width-1)&0XFF;
000020  b2d2              UXTB     r2,r2
000022  8002              STRH     r2,[r0,#0]
;;;206    
;;;207    	LCD_CMD = 0x002B;
000024  222b              MOVS     r2,#0x2b
000026  802a              STRH     r2,[r5,#0]
;;;208    	LCD_DAT = startY>>8;
000028  0a0a              LSRS     r2,r1,#8
00002a  8002              STRH     r2,[r0,#0]
;;;209    	LCD_DAT = startY&0XFF;
00002c  b2ca              UXTB     r2,r1
00002e  8002              STRH     r2,[r0,#0]
;;;210    	LCD_DAT = (startY+height-1)>>8;
000030  4419              ADD      r1,r1,r3
000032  1e49              SUBS     r1,r1,#1
000034  0a0a              LSRS     r2,r1,#8
000036  8002              STRH     r2,[r0,#0]
;;;211    	LCD_DAT = (startY+height-1)&0XFF;
000038  b2c9              UXTB     r1,r1
00003a  8001              STRH     r1,[r0,#0]
;;;212    
;;;213    	LCD_WriteGRAM();
00003c  202c              MOVS     r0,#0x2c
00003e  8028              STRH     r0,[r5,#0]
;;;214    }
000040  bd70              POP      {r4-r6,pc}
;;;215    
                          ENDP

000042  0000              DCW      0x0000
                  |L22.68|
                          DCD      0x60020000

                          AREA ||i.LCD_SetCursor||, CODE, READONLY, ALIGN=2

                  LCD_SetCursor PROC
;;;162    // 设定起始扫描坐标
;;;163    void LCD_SetCursor(uint16 x, uint16 y)
000000  b510              PUSH     {r4,lr}
;;;164    {
;;;165    	x += 0x23;
000002  3023              ADDS     r0,r0,#0x23
000004  b280              UXTH     r0,r0
;;;166    	
;;;167    	LCD_CMD = 0x002A;
000006  f04f43c0          MOV      r3,#0x60000000
00000a  222a              MOVS     r2,#0x2a
00000c  801a              STRH     r2,[r3,#0]
;;;168    	LCD_DAT = x>>8;
00000e  4a07              LDR      r2,|L23.44|
000010  0a04              LSRS     r4,r0,#8
000012  8014              STRH     r4,[r2,#0]
;;;169    	LCD_DAT = x&0XFF;
000014  b2c0              UXTB     r0,r0
000016  8010              STRH     r0,[r2,#0]
;;;170    
;;;171    	LCD_CMD = 0x002B;
000018  202b              MOVS     r0,#0x2b
00001a  8018              STRH     r0,[r3,#0]
;;;172    	LCD_DAT = y>>8;
00001c  0a08              LSRS     r0,r1,#8
00001e  8010              STRH     r0,[r2,#0]
;;;173    	LCD_DAT = y&0XFF;
000020  b2c8              UXTB     r0,r1
000022  8010              STRH     r0,[r2,#0]
;;;174    
;;;175    	LCD_WriteGRAM();
000024  202c              MOVS     r0,#0x2c
000026  8018              STRH     r0,[r3,#0]
;;;176    }
000028  bd10              POP      {r4,pc}
;;;177    
                          ENDP

00002a  0000              DCW      0x0000
                  |L23.44|
                          DCD      0x60020000

                          AREA ||i.LCD_ShowAgingTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  LCD_ShowAgingTest PROC
;;;1020   
;;;1021   void LCD_ShowAgingTest(uint32 refreshAll)
000000  b510              PUSH     {r4,lr}
;;;1022   {
000002  b08a              SUB      sp,sp,#0x28
;;;1023   	uint8 buff[40];
;;;1024   	uint32 temp;
;;;1025   
;;;1026   	LCD_FillColor(colorType[colorTypendex++]);
000004  4c1f              LDR      r4,|L24.132|
000006  6860              LDR      r0,[r4,#4]  ; colorTypendex
000008  1c41              ADDS     r1,r0,#1
00000a  6061              STR      r1,[r4,#4]  ; colorTypendex
00000c  f5045181          ADD      r1,r4,#0x1020
000010  f8310010          LDRH     r0,[r1,r0,LSL #1]
000014  f7fffffe          BL       LCD_FillColor
;;;1027   	if (5 < colorTypendex)
000018  6860              LDR      r0,[r4,#4]  ; colorTypendex
00001a  2805              CMP      r0,#5
00001c  d901              BLS      |L24.34|
;;;1028   	{
;;;1029   		colorTypendex = 0;
00001e  2000              MOVS     r0,#0
000020  6060              STR      r0,[r4,#4]  ; colorTypendex
                  |L24.34|
;;;1030   	}
;;;1031   	
;;;1032   	//sprintf((char *)buff, "APP :%s", &paramCB.runtime.appVersion[1]);
;;;1033   	//STATE_ShowStrColumn1(0, buff);
;;;1034   	//sprintf((char *)buff, "BOOT:%s", &paramCB.runtime.bootVersion[1]);
;;;1035   	//STATE_ShowStrColumn1(1, buff);
;;;1036   	//sprintf((char *)buff, "UI  :%s", &paramCB.runtime.uiVersion[1]);
;;;1037   	//STATE_ShowStrColumn1(2, buff);
;;;1038   	//sprintf((char *)buff, "HW  :%s", &paramCB.runtime.hardVersion[1]);
;;;1039   	//STATE_ShowStrColumn1(3, buff);
;;;1040   
;;;1041   	//sprintf((char *)buff, "SN  :%s", &paramCB.runtime.snCode[1]);
;;;1042   	//STATE_ShowStrColumn1(4, buff);
;;;1043   
;;;1044   	sprintf((char *)buff, "AGING:%s", APP_VERSION);
000022  a219              ADR      r2,|L24.136|
000024  a120              ADR      r1,|L24.168|
000026  4668              MOV      r0,sp
000028  f7fffffe          BL       __2sprintf
;;;1045   	STATE_ShowStrColumn1(5, buff);
00002c  4669              MOV      r1,sp
00002e  2005              MOVS     r0,#5
000030  f7fffffe          BL       STATE_ShowStrColumn1
;;;1046   	
;;;1047   	//sprintf((char *)buff, "BLE MAC %s", &paramCB.runtime.bluMac[1]);
;;;1048   	//STATE_ShowStrColumn1(6, buff);
;;;1049   
;;;1050   	sprintf((char *)buff, "RX  :%d", PARAM_GetRxCount());
000034  4c1f              LDR      r4,|L24.180|
000036  a120              ADR      r1,|L24.184|
000038  4668              MOV      r0,sp
00003a  68e2              LDR      r2,[r4,#0xc]  ; paramCB
00003c  f7fffffe          BL       __2sprintf
;;;1051   	STATE_ShowStrColumn1(7, buff);
000040  4669              MOV      r1,sp
000042  2007              MOVS     r0,#7
000044  f7fffffe          BL       STATE_ShowStrColumn1
;;;1052   
;;;1053   	//sprintf((char *)buff, "TX  :%d", PARAM_GetAgingTestTxCount());
;;;1054   	//STATE_ShowStrColumn1(8, buff);
;;;1055   	
;;;1056   	sprintf((char *)buff, "TX  :%d", PARAM_GetRxCount());
000048  a11d              ADR      r1,|L24.192|
00004a  4668              MOV      r0,sp
00004c  68e2              LDR      r2,[r4,#0xc]  ; paramCB
00004e  f7fffffe          BL       __2sprintf
;;;1057   	STATE_ShowStrColumn1(9, buff);
000052  4669              MOV      r1,sp
000054  2009              MOVS     r0,#9
000056  f7fffffe          BL       STATE_ShowStrColumn1
;;;1058   
;;;1059   	temp = paramCB.runtime.testflag[1];
00005a  69a2              LDR      r2,[r4,#0x18]  ; paramCB
;;;1060   	sprintf((char *)buff, "AGE :%d", temp);
00005c  a11a              ADR      r1,|L24.200|
00005e  4668              MOV      r0,sp
000060  f7fffffe          BL       __2sprintf
;;;1061   	STATE_ShowStrColumn1(11, buff);
000064  4669              MOV      r1,sp
000066  200b              MOVS     r0,#0xb
000068  f7fffffe          BL       STATE_ShowStrColumn1
;;;1062   	
;;;1063   	sprintf((char *)buff, "Sensor :%d", PARAM_GetPhotoSensorADCValue());
00006c  8822              LDRH     r2,[r4,#0]  ; paramCB
00006e  a118              ADR      r1,|L24.208|
000070  4668              MOV      r0,sp
000072  f7fffffe          BL       __2sprintf
;;;1064   	STATE_ShowStrColumn1(13, buff);
000076  4669              MOV      r1,sp
000078  200d              MOVS     r0,#0xd
00007a  f7fffffe          BL       STATE_ShowStrColumn1
;;;1065   
;;;1066   	//sprintf((char *)buff, "MCUSN:%s", (char*)paramCB.runtime.watchUid.snStr);
;;;1067   	//STATE_ShowStrColumn1(9, buff);
;;;1068   
;;;1069   	//sprintf((char *)buff, "QR :%s", (char*)&paramCB.runtime.qrCodeStr[1]);
;;;1070   	//STATE_ShowStrColumn1(10, buff);
;;;1071   
;;;1072   
;;;1073   	//STATE_ShowStrColumn2(0, "FLAG");
;;;1074   	//sprintf((char *)buff, "AGE :%04d", PARAM_GetAgingTimes());
;;;1075   	//STATE_ShowStrColumn2(1, buff);
;;;1076   	//sprintf((char *)buff, "FCT :%02X", PARAM_GetFlagArray(2));
;;;1077   	//STATE_ShowStrColumn2(2, buff);
;;;1078   	//sprintf((char *)buff, "SFG :%02X", PARAM_GetFlagArray(3));
;;;1079   	//STATE_ShowStrColumn2(3, buff);
;;;1080   	//sprintf((char *)buff, "FQC :%02X", PARAM_GetFlagArray(4));
;;;1081   	//STATE_ShowStrColumn2(4, buff);
;;;1082   	
;;;1083   	//sprintf((char *)buff, "OQC :%02X", PARAM_GetFlagArray(5));
;;;1084   	//STATE_ShowStrColumn2(5, buff);
;;;1085   	//sprintf((char *)buff, "IPQC:%02X", PARAM_GetFlagArray(6));
;;;1086   	//STATE_ShowStrColumn2(6, buff);
;;;1087   	//sprintf((char *)buff, "TIG :%02X", PARAM_GetFlagArray(7));
;;;1088   	//STATE_ShowStrColumn2(7, buff);
;;;1089   
;;;1090   	//if (PARAM_GetAgingTimes() < 100)
;;;1091   	//{
;;;1092   	//	LCD_DrawAreaColor(20, 240, 200, 70, STATE_COLOR_ARRAY[PARAM_GetAgingTimes()/10]);
;;;1093   	//}
;;;1094   	//else
;;;1095   	//{
;;;1096   	//	LCD_DrawAreaColor(20, 240, 200, 70, STATE_COLOR_ARRAY[10]);
;;;1097   	//}
;;;1098   }
00007e  b00a              ADD      sp,sp,#0x28
000080  bd10              POP      {r4,pc}
;;;1099   
                          ENDP

000082  0000              DCW      0x0000
                  |L24.132|
                          DCD      ||.data||
                  |L24.136|
000088  425f434d          DCB      "B_CM_FW_APP_DT_BC201_V4.0.19",0
00008c  5f46575f
000090  4150505f
000094  44545f42
000098  43323031
00009c  5f56342e
0000a0  302e3139
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L24.168|
0000a8  4147494e          DCB      "AGING:%s",0
0000ac  473a2573
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L24.180|
                          DCD      paramCB+0x1a0
                  |L24.184|
0000b8  52582020          DCB      "RX  :%d",0
0000bc  3a256400
                  |L24.192|
0000c0  54582020          DCB      "TX  :%d",0
0000c4  3a256400
                  |L24.200|
0000c8  41474520          DCB      "AGE :%d",0
0000cc  3a256400
                  |L24.208|
0000d0  53656e73          DCB      "Sensor :%d",0
0000d4  6f72203a
0000d8  256400  
0000db  00                DCB      0

                          AREA ||i.STATE_ShowStrColumn1||, CODE, READONLY, ALIGN=1

                  STATE_ShowStrColumn1 PROC
;;;1010   
;;;1011   void STATE_ShowStrColumn1(uint8 row, uint8 *str)
000000  b508              PUSH     {r3,lr}
;;;1012   {
000002  460a              MOV      r2,r1
;;;1013   	LCD_PrintString(10, row * 20, (char*)str, LCD_COLOR_GREEN,LCD_OPERATOR_MODE_ALL_WHITE);
000004  2102              MOVS     r1,#2
000006  eb000080          ADD      r0,r0,r0,LSL #2
00000a  9100              STR      r1,[sp,#0]
00000c  0081              LSLS     r1,r0,#2
00000e  f44f63fc          MOV      r3,#0x7e0
000012  200a              MOVS     r0,#0xa
000014  f7fffffe          BL       LCD_PrintString
;;;1014   }
000018  bd08              POP      {r3,pc}
;;;1015   
                          ENDP


                          AREA ||i.STATE_ShowStrColumn2||, CODE, READONLY, ALIGN=1

                  STATE_ShowStrColumn2 PROC
;;;1015   
;;;1016   void STATE_ShowStrColumn2(uint8 row, uint8 *str)
000000  b508              PUSH     {r3,lr}
;;;1017   {
000002  460a              MOV      r2,r1
;;;1018   	LCD_PrintString(10 + 170, row * 20, (char*)str, LCD_COLOR_GREEN,LCD_OPERATOR_MODE_ALL_WHITE);
000004  2102              MOVS     r1,#2
000006  eb000080          ADD      r0,r0,r0,LSL #2
00000a  9100              STR      r1,[sp,#0]
00000c  0081              LSLS     r1,r0,#2
00000e  f44f63fc          MOV      r3,#0x7e0
000012  20b4              MOVS     r0,#0xb4
000014  f7fffffe          BL       LCD_PrintString
;;;1019   }
000018  bd08              POP      {r3,pc}
;;;1020   
                          ENDP


                          AREA ||i.itoa||, CODE, READONLY, ALIGN=1

                  itoa PROC
;;;808    
;;;809    void itoa(uint32 n,char outStr[])
000000  b5f0              PUSH     {r4-r7,lr}
;;;810    {
000002  b085              SUB      sp,sp,#0x14
;;;811    	int i,j,sign;
;;;812    	uint8 s[20];
;;;813    	i=0;
000004  2200              MOVS     r2,#0
;;;814    	do{
;;;815    		s[i++]=n%10+'0';
000006  230a              MOVS     r3,#0xa
000008  466c              MOV      r4,sp                 ;812
                  |L27.10|
00000a  fbb0f5f3          UDIV     r5,r0,r3
00000e  fb030515          MLS      r5,r3,r5,r0
000012  3530              ADDS     r5,r5,#0x30
000014  4617              MOV      r7,r2
000016  1c52              ADDS     r2,r2,#1
000018  55e5              STRB     r5,[r4,r7]
;;;816    	}
;;;817    	while((n/=10)>0);
00001a  fbb0f0f3          UDIV     r0,r0,r3
00001e  2800              CMP      r0,#0
000020  d1f3              BNE      |L27.10|
;;;818    	
;;;819    	if(sign<0)
000022  2e00              CMP      r6,#0
000024  da03              BGE      |L27.46|
;;;820    	s[i++]='-';
000026  232d              MOVS     r3,#0x2d
000028  4610              MOV      r0,r2
00002a  1c52              ADDS     r2,r2,#1
00002c  5423              STRB     r3,[r4,r0]
                  |L27.46|
;;;821    	s[i]='\0';
00002e  2500              MOVS     r5,#0
000030  54a5              STRB     r5,[r4,r2]
;;;822    	j=i;
;;;823    	i=0;
000032  2000              MOVS     r0,#0
;;;824    	for(;j>0;j--)
000034  e006              B        |L27.68|
                  |L27.54|
;;;825    		outStr[i++] = s[j-1];
000036  18a3              ADDS     r3,r4,r2
000038  f8136c01          LDRB     r6,[r3,#-1]
00003c  4603              MOV      r3,r0
00003e  1c40              ADDS     r0,r0,#1
000040  54ce              STRB     r6,[r1,r3]
000042  1e52              SUBS     r2,r2,#1              ;824
                  |L27.68|
000044  2a00              CMP      r2,#0                 ;824
000046  dcf6              BGT      |L27.54|
;;;826    	outStr[i] = '\0';
000048  540d              STRB     r5,[r1,r0]
;;;827    } 
00004a  b005              ADD      sp,sp,#0x14
00004c  bdf0              POP      {r4-r7,pc}
;;;828    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  f800f800          DCW      0xf800,0xf800
000004  07e0001f          DCW      0x07e0,0x001f
000008  ffff0000          DCW      0xffff,0x0000
00000c  ffe0              DCW      0xffe0

                          AREA ||.data||, DATA, ALIGN=2

                  qrcode
                          DCD      0x00000000
                  colorTypendex
                          DCD      0x00000000
                  g_PIC_StartAddr
                          DCD      0x00000100
                          DCD      0x00000b68
                          DCD      0x0001b468
                          DCD      0x0001b670
                          DCD      0x0001b878
                          DCD      0x0001ba80
                          DCD      0x0001bc88
                          DCD      0x0001be90
                          DCD      0x0001c098
                          DCD      0x0001c0fe
                          DCD      0x0001c306
                          DCD      0x0001c50e
                          DCD      0x0001c716
                          DCD      0x0001c91e
                          DCD      0x0001cb26
                          DCD      0x0001cd2e
                          DCD      0x0001d29e
                          DCD      0x0001e360
                          DCD      0x0001f422
                          DCD      0x000204e4
                          DCD      0x000215a6
                          DCD      0x00022668
                          DCD      0x0002372a
                          DCD      0x000247ec
                          DCD      0x000258ae
                          DCD      0x00026970
                          DCD      0x00027a32
                          DCD      0x00027af2
                          DCD      0x00027bb2
                          DCD      0x00028c74
                          DCD      0x00028d34
                          DCD      0x00028df4
                          DCD      0x0002a378
                          DCD      0x0002ab78
                          DCD      0x0002b12a
                          DCD      0x0002b916
                          DCD      0x0002c116
                          DCD      0x0002c6c8
                          DCD      0x0002d80a
                          DCD      0x0002dbbc
                          DCD      0x0002e3bc
                          DCD      0x0002e96e
                          DCD      0x0002fef2
                          DCD      0x000304d2
                          DCD      0x00030ab2
                          DCD      0x00031092
                          DCD      0x00031672
                          DCD      0x00031c52
                          DCD      0x00032232
                          DCD      0x00033b28
                          DCD      0x0003541e
                          DCD      0x00036d14
                          DCD      0x0003860a
                          DCD      0x00039f00
                          DCD      0x0003b7f6
                          DCD      0x0003d0ec
                          DCD      0x0003e9e2
                          DCD      0x000402d8
                          DCD      0x00041bce
                          DCD      0x000434c4
                          DCD      0x00044dba
                          DCD      0x000466b0
                          DCD      0x00047fa6
                          DCD      0x0004989c
                          DCD      0x0004b192
                          DCD      0x0004ca88
                          DCD      0x0004e37e
                          DCD      0x0004fc74
                          DCD      0x0005156a
                          DCD      0x00052e60
                          DCD      0x00052f38
                          DCD      0x00053010
                          DCD      0x000530e8
                          DCD      0x000531c0
                          DCD      0x00053298
                          DCD      0x00053370
                          DCD      0x00053448
                          DCD      0x00053520
                          DCD      0x000535f8
                          DCD      0x000536d0
                          DCD      0x00053808
                          DCD      0x0006e108
                          DCD      0x00088a08
                          DCD      0x00089208
                          DCD      0x000897ba
                          DCD      0x0008a8fc
                          DCD      0x000a51fc
                          DCD      0x000bfafc
                          DCD      0x000bfb7a
                          DCD      0x000bfbf8
                          DCD      0x000bfc76
                          DCD      0x000bfcf4
                          DCD      0x000bfd72
                          DCD      0x000bfdf0
                          DCD      0x000bfe6e
                          DCD      0x000bfeec
                          DCD      0x000bff6a
                          DCD      0x000bffe8
                          DCD      0x000c0e40
                          DCD      0x000c1158
                          DCD      0x000c5262
                          DCD      0x000c52e0
                          DCD      0x000c5380
                          DCD      0x000c5420
                          DCD      0x000c54c0
                          DCD      0x000c5560
                          DCD      0x000c5600
                          DCD      0x000c56a0
                          DCD      0x000c5740
                          DCD      0x000c57e0
                          DCD      0x000c5880
                          DCD      0x000c5920
                          DCD      0x000c62dc
                          DCD      0x000c795c
                          DCD      0x000c8fdc
                          DCD      0x000c97dc
                          DCD      0x000c9d8e
                          DCD      0x000cb312
                          DCD      0x000cbcce
                          DCD      0x000cd252
                          DCD      0x000cda52
                          DCD      0x000ce004
                          DCD      0x000cf104
                          DCD      0x000d0204
                          DCD      0x000d1304
                          DCD      0x000d2404
                          DCD      0x000d3504
                          DCD      0x000d4604
                          DCD      0x000d5704
                          DCD      0x000d6c88
                          DCD      0x000de60e
                          DCD      0x000df006
                          DCD      0x000df9fe
                          DCD      0x000e03f6
                          DCD      0x000e0dee
                          DCD      0x000e0f22
                          DCD      0x000e1056
                          DCD      0x000e118a
                          DCD      0x000e12be
                          DCD      0x000e13f2
                          DCD      0x000e1526
                          DCD      0x000e165a
                          DCD      0x000e178e
                          DCD      0x000e18c2
                          DCD      0x000e19f6
                          DCD      0x000e1b2a
                          DCD      0x000e63aa
                          DCD      0x000eac2a
                          DCD      0x000ef4aa
                          DCD      0x000ef54a
                          DCD      0x000ef5ea
                          DCD      0x000ef7b6
                          DCD      0x000f0556
                          DCD      0x000f0722
                          DCD      0x000f4fa2
                          DCD      0x000f5306
                          DCD      0x000f566a
                          DCD      0x000f9eea
                          DCD      0x000fe76a
                          DCD      0x00102fea
                          DCD      0x0010304c
                          DCD      0x001078cc
                          DCD      0x0010c14c
                          DCD      0x0010c6bc
                          DCD      0x0010c87e
                          DCD      0x0010d1bc
                          DCD      0x0010d870
                          DCD      0x0010df24
                          DCD      0x0010ec08
                          DCD      0x0010f8ec
                          DCD      0x0010faa6
                          DCD      0x0010fc0e
                          DCD      0x0010fe4e
                          DCD      0x0010ffb6
                          DCD      0x001102c2
                          DCD      0x0011047c
                          DCD      0x001105dc
                          DCD      0x0011073c
                          DCD      0x00110854
                          DCD      0x00110a30
                          DCD      0x00110fb0
                          DCD      0x00111530
                          DCD      0x00111ab0
                          DCD      0x00112030
                          DCD      0x001125b0
                          DCD      0x00112b30
                          DCD      0x001130b0
                          DCD      0x00113630
                          DCD      0x00113bb0
                          DCD      0x00114130
                          DCD      0x00114178
                          DCD      0x00114e28
                          DCD      0x0012f728
                          DCD      0x00130ad8
                          DCD      0x00131018
                          DCD      0x00131558
                          DCD      0x00131a98
                          DCD      0x00131fd8
                          DCD      0x00132518
                          DCD      0x00132a58
                          DCD      0x00132f98
                          DCD      0x001334d8
                          DCD      0x00133a18
                          DCD      0x00133f58
                          DCD      0x00136c70
                          DCD      0x00137922
                          DCD      0x0013a27a
                          DCD      0x0013bcba
                          DCD      0x0013bd4a
                          DCD      0x0013db92
                          DCD      0x0013f9da
                          DCD      0x001427ca
                          DCD      0x001455ba
                          DCD      0x00145db8
                          DCD      0x001465b6
                          DCD      0x00146766
                          DCD      0x00146916
                          DCD      0x0014711c
                          DCD      0x001472bc
                          DCD      0x0014745c
                          DCD      0x001475fc
                          DCD      0x0014779c
                          DCD      0x0014793c
                          DCD      0x00147adc
                          DCD      0x00147c7c
                          DCD      0x00147e1c
                          DCD      0x00147fbc
                          DCD      0x0014815c
                          DCD      0x00148454
                          DCD      0x00148700
                          DCD      0x0014882c
                          DCD      0x00148b24
                          DCD      0x00148dd0
                          DCD      0x00148dea
                          DCD      0x00148e26
                          DCD      0x00149406
                          DCD      0x0014a906
                          DCD      0x0014aa80
                          DCD      0x0014b060
                          DCD      0x0014b526
                          DCD      0x0014bb06
                          DCD      0x0014be4e
                          DCD      0x0014c42e
                          DCD      0x0014c776
                          DCD      0x0014cc3c
                          DCD      0x0014cd62
                          DCD      0x0014ce88
                          DCD      0x0014ce90
                          DCD      0x0014d160
                          DCD      0x0014d7ac
                          DCD      0x0014ddf8
                          DCD      0x0014e444
                          DCD      0x0014ea90
                          DCD      0x0014f0dc
                          DCD      0x0014f728
                          DCD      0x0014fd74
                          DCD      0x001503c0
                          DCD      0x00150a0c
                          DCD      0x00150ae8
                          DCD      0x00150bc4
                          DCD      0x00150c8c
                          DCD      0x0015102e
                          DCD      0x001543fa
                          DCD      0x00154832
                          DCD      0x00154c6a
                          DCD      0x00155804
                          DCD      0x0015639e
                          DCD      0x00156f38
                          DCD      0x00157ad2
                          DCD      0x0015866c
                          DCD      0x00159206
                          DCD      0x00159da0
                          DCD      0x0015a93a
                          DCD      0x0015b4d4
                          DCD      0x0015c06e
                          DCD      0x0015c712
                          DCD      0x0015cdb6
                          DCD      0x0015d45a
                          DCD      0x0015dafe
                          DCD      0x0015e1a2
                          DCD      0x0015e846
                          DCD      0x0015eeea
                          DCD      0x0015f58e
                          DCD      0x0015fc32
                          DCD      0x001602d6
                          DCD      0x00160420
                          DCD      0x0016056a
                          DCD      0x001606b4
                          DCD      0x001607fe
                          DCD      0x00160948
                          DCD      0x00160a92
                          DCD      0x00160bdc
                          DCD      0x00160d26
                          DCD      0x00160e70
                          DCD      0x00160fba
                          DCD      0x0016105a
                          DCD      0x001610fa
                          DCD      0x0016119a
                          DCD      0x0016123a
                          DCD      0x001612da
                          DCD      0x0016137a
                          DCD      0x0016141a
                          DCD      0x001614ba
                          DCD      0x0016155a
                          DCD      0x001615fa
                          DCD      0x00161e00
                          DCD      0x001620ec
                          DCD      0x001623d8
                          DCD      0x001626c4
                          DCD      0x001629b0
                          DCD      0x00162c9c
                          DCD      0x00162f88
                          DCD      0x00163274
                          DCD      0x00163560
                          DCD      0x0016384c
                          DCD      0x00163b38
                          DCD      0x00164060
                          DCD      0x00164360
                          DCD      0x00164660
                          DCD      0x00164960
                          DCD      0x00164c60
                          DCD      0x00164f60
                          DCD      0x00165260
                          DCD      0x00165560
                          DCD      0x00165860
                          DCD      0x00165b60
                          DCD      0x00165e60
                          DCD      0x00165ea0
                          DCD      0x001661e8
                          DCD      0x00166530
                          DCD      0x0016707a
                          DCD      0x00167696
                          DCD      0x00167cb2
                          DCD      0x001682ce
                          DCD      0x001688ea
                          DCD      0x00168f06
                          DCD      0x0016ac3a
                          DCD      0x0016c96e
                          DCD      0x0016e6a2
                          DCD      0x001703d6
                          DCD      0x0017210a
                          DCD      0x00173e3e
                          DCD      0x00175b72
                          DCD      0x001778a6
                          DCD      0x001795da
                          DCD      0x0017b434
                          DCD      0x0017d28e
                          DCD      0x0017f0e8
                          DCD      0x00180f42
                          DCD      0x00182d9c
                          DCD      0x00184bf6
                          DCD      0x00186a50
                          DCD      0x001888aa
                          DCD      0x0018a704
                          DCD      0x0018c55e
                          DCD      0x0018e3b8
                          DCD      0x00190212
                          DCD      0x0019206c
                          DCD      0x00193ec6
                          DCD      0x0019544a
                          DCD      0x00195638
                          DCD      0x00195826
                          DCD      0x00195a14
                          DCD      0x00195c02
                          DCD      0x00195df0
                          DCD      0x00195fde
                          DCD      0x001961cc
                          DCD      0x001963ba
                          DCD      0x001965a8
                          DCD      0x00196796
                          DCD      0x0019686e
                          DCD      0x00196946
                          DCD      0x00196a1e
                          DCD      0x00196af6
                          DCD      0x00196bce
                          DCD      0x00196ca6
                          DCD      0x00196d7e
                          DCD      0x00196e56
                          DCD      0x00196f2e
                          DCD      0x00197006
                          DCD      0x001971aa
                          DCD      0x001972ca
                          DCD      0x001b1bca
                          DCD      0x001b1bdc
                          DCD      0x001b1e7c
                          DCD      0x001b211c
                          DCD      0x001b23bc
                          DCD      0x001b265c
                          DCD      0x001b26ce
                          DCD      0x001b296e
                          DCD      0x001b2c0e
                          DCD      0x001b2c50
                          DCD      0x001b2c92
                          DCD      0x001b31e2
                          DCD      0x001b3732
                          DCD      0x001b3866
                          DCD      0x001b399a
                          DCD      0x001b3ace
                          DCD      0x001b3c02
                          DCD      0x001b3d36
                          DCD      0x001b3e6a
                          DCD      0x001b3f9e
                          DCD      0x001b40d2
                          DCD      0x001b4206
                          DCD      0x001b433a
                          DCD      0x001b446e
                          DCD      0x001b45a2
                          DCD      0x001b8e22
                          DCD      0x001bd6a2
                          DCD      0x001c1f22
                          DCD      0x001c67a2
                          DCD      0x001c6b06
                          DCD      0x001c6e6a
                          DCD      0x001cb6ea
                          DCD      0x001cff6a
                          DCD      0x001d47ea
                          DCD      0x001d484c
                          DCD      0x001d90cc
                          DCD      0x001dd94c
                          DCD      0x001dd9d8
                          DCD      0x001dda64
                          DCD      0x001defe8
                          DCD      0x001df0d2
                          DCD      0x001df8d2
                          DCD      0x001dfe84
                          DCD      0x001e1408
                          DCD      0x001e1624
                          DCD      0x001e1840
                          DCD      0x001e1a5c
                          DCD      0x001e1c78
                          DCD      0x001e1e94
                          DCD      0x001e20b0
                          DCD      0x001e2314
                          DCD      0x001e2578
                          DCD      0x001e27dc
                          DCD      0x001e2a40
                          DCD      0x001e44aa
                          DCD      0x001e5f14
                          DCD      0x001e797e
                          DCD      0x001e93e8
                          DCD      0x001eae52
                          DCD      0x001ec8bc
                          DCD      0x001ee326
                          DCD      0x001efd90
                          DCD      0x001f17fa
                          DCD      0x001f3264
                          DCD      0x001f428a
                          DCD      0x001f52b0
                          DCD      0x001f62d6
                          DCD      0x001f72fc
                          DCD      0x001f8322
                          DCD      0x001f9348
                          DCD      0x001fa36e
                          DCD      0x001fb394
                          DCD      0x001fc3ba
                          DCD      0x001fd3e0
                          DCD      0x001fd428
                          DCD      0x001fdc28
                          DCD      0x001fe1da
                          DCD      0x001ff75e
                          DCD      0x0021a05e
                          DCD      0x0021a16c
                          DCD      0x0021a27a
                          DCD      0x0021a388
                          DCD      0x0021a496
                          DCD      0x0021a5a4
                          DCD      0x0021a6b2
                          DCD      0x0021a7c0
                          DCD      0x0021a8ce
                          DCD      0x0021a9dc
                          DCD      0x0021aaea
                          DCD      0x0021aafc
                          DCD      0x0021b2fc
                          DCD      0x0021b8ae
                          DCD      0x0021c9f0
                          DCD      0x0021d670
                          DCD      0x0021ebf4
                          DCD      0x0021f90e
                          DCD      0x0021f9e6
                          DCD      0x0021fabe
                          DCD      0x0021fb96
                          DCD      0x0021fc6e
                          DCD      0x0021fd46
                          DCD      0x0021fe1e
                          DCD      0x0021fef6
                          DCD      0x0021ffce
                          DCD      0x002200a6
                          DCD      0x0022017e
                          DCD      0x002201ae
                          DCD      0x002209ae
                          DCD      0x00220f60
                          DCD      0x00221200
                          DCD      0x00221bbc
                          DCD      0x002223a8
                          DCD      0x00222d64
                          DCD      0x00224858
                          DCD      0x00225058
                          DCD      0x0022560a
                          DCD      0x0022674c
                          DCD      0x002271cc
                          DCD      0x0022722c
                          DCD      0x0022728c
                          DCD      0x002272ec
                          DCD      0x0022734c
                          DCD      0x002273ac
                          DCD      0x0022740c
                          DCD      0x0022746c
                          DCD      0x002274cc
                          DCD      0x0022752c
                          DCD      0x0022758c
                          DCD      0x002275ec
                          DCD      0x0022764c
                          DCD      0x002276ac
                          DCD      0x0022770c
                          DCD      0x0022776c
                  g_PIC_Height
000814  006f00aa          DCW      0x006f,0x00aa
000818  00140014          DCW      0x0014,0x0014
00081c  00140014          DCW      0x0014,0x0014
000820  00140014          DCW      0x0014,0x0014
000824  00110014          DCW      0x0011,0x0014
000828  00140014          DCW      0x0014,0x0014
00082c  00140014          DCW      0x0014,0x0014
000830  0014003a          DCW      0x0014,0x003a
000834  00270027          DCW      0x0027,0x0027
000838  00270027          DCW      0x0027,0x0027
00083c  00270027          DCW      0x0027,0x0027
000840  00270027          DCW      0x0027,0x0027
000844  00270027          DCW      0x0027,0x0027
000848  000c000c          DCW      0x000c,0x000c
00084c  0027000c          DCW      0x0027,0x000c
000850  000c00a2          DCW      0x000c,0x00a2
000854  0020001b          DCW      0x0020,0x001b
000858  004e0020          DCW      0x004e,0x0020
00085c  001b002f          DCW      0x001b,0x002f
000860  002b0020          DCW      0x002b,0x0020
000864  001b00a2          DCW      0x001b,0x00a2
000868  002f002f          DCW      0x002f,0x002f
00086c  002f002f          DCW      0x002f,0x002f
000870  002f002f          DCW      0x002f,0x002f
000874  00d500d5          DCW      0x00d5,0x00d5
000878  00d500d5          DCW      0x00d5,0x00d5
00087c  00d500d5          DCW      0x00d5,0x00d5
000880  00d500d5          DCW      0x00d5,0x00d5
000884  00d500d5          DCW      0x00d5,0x00d5
000888  00d500d5          DCW      0x00d5,0x00d5
00088c  00d500d5          DCW      0x00d5,0x00d5
000890  00d500d5          DCW      0x00d5,0x00d5
000894  00d500d5          DCW      0x00d5,0x00d5
000898  00d500d5          DCW      0x00d5,0x00d5
00089c  00d50009          DCW      0x00d5,0x0009
0008a0  00090009          DCW      0x0009,0x0009
0008a4  00090009          DCW      0x0009,0x0009
0008a8  00090009          DCW      0x0009,0x0009
0008ac  00090009          DCW      0x0009,0x0009
0008b0  0009000d          DCW      0x0009,0x000d
0008b4  01400140          DCW      0x0140,0x0140
0008b8  0020001b          DCW      0x0020,0x001b
0008bc  002f0140          DCW      0x002f,0x0140
0008c0  01400007          DCW      0x0140,0x0007
0008c4  00070007          DCW      0x0007,0x0007
0008c8  00070007          DCW      0x0007,0x0007
0008cc  00070007          DCW      0x0007,0x0007
0008d0  00070007          DCW      0x0007,0x0007
0008d4  0007006c          DCW      0x0007,0x006c
0008d8  0016006f          DCW      0x0016,0x006f
0008dc  00070008          DCW      0x0007,0x0008
0008e0  00080008          DCW      0x0008,0x0008
0008e4  00080008          DCW      0x0008,0x0008
0008e8  00080008          DCW      0x0008,0x0008
0008ec  00080008          DCW      0x0008,0x0008
0008f0  00080059          DCW      0x0008,0x0059
0008f4  00a000a0          DCW      0x00a0,0x00a0
0008f8  0020001b          DCW      0x0020,0x001b
0008fc  00a20059          DCW      0x00a2,0x0059
000900  00a20020          DCW      0x00a2,0x0020
000904  001b0088          DCW      0x001b,0x0088
000908  00880088          DCW      0x0088,0x0088
00090c  00880088          DCW      0x0088,0x0088
000910  00880088          DCW      0x0088,0x0088
000914  00a200b7          DCW      0x00a2,0x00b7
000918  003a003a          DCW      0x003a,0x003a
00091c  003a003a          DCW      0x003a,0x003a
000920  000b000b          DCW      0x000b,0x000b
000924  000b000b          DCW      0x000b,0x000b
000928  000b000b          DCW      0x000b,0x000b
00092c  000b000b          DCW      0x000b,0x000b
000930  000b000b          DCW      0x000b,0x000b
000934  000b0140          DCW      0x000b,0x0140
000938  01400140          DCW      0x0140,0x0140
00093c  00140014          DCW      0x0014,0x0014
000940  0017006d          DCW      0x0017,0x006d
000944  00170140          DCW      0x0017,0x0140
000948  001f001f          DCW      0x001f,0x001f
00094c  01400140          DCW      0x0140,0x0140
000950  01400007          DCW      0x0140,0x0007
000954  01400140          DCW      0x0140,0x0140
000958  003a000f          DCW      0x003a,0x000f
00095c  005b001a          DCW      0x005b,0x001a
000960  001a004b          DCW      0x001a,0x004b
000964  004b0011          DCW      0x004b,0x0011
000968  00120012          DCW      0x0012,0x0012
00096c  000c001a          DCW      0x000c,0x001a
000970  00110010          DCW      0x0011,0x0010
000974  0010000a          DCW      0x0010,0x000a
000978  00110016          DCW      0x0011,0x0016
00097c  00160016          DCW      0x0016,0x0016
000980  00160016          DCW      0x0016,0x0016
000984  00160016          DCW      0x0016,0x0016
000988  00160016          DCW      0x0016,0x0016
00098c  00160012          DCW      0x0016,0x0012
000990  00740140          DCW      0x0074,0x0140
000994  00d20015          DCW      0x00d2,0x0015
000998  00150015          DCW      0x0015,0x0015
00099c  00150015          DCW      0x0015,0x0015
0009a0  00150015          DCW      0x0015,0x0015
0009a4  00150015          DCW      0x0015,0x0015
0009a8  001500de          DCW      0x0015,0x00de
0009ac  007d007e          DCW      0x007d,0x007e
0009b0  00540008          DCW      0x0054,0x0008
0009b4  00440044          DCW      0x0044,0x0044
0009b8  008c008c          DCW      0x008c,0x008c
0009bc  005d005d          DCW      0x005d,0x005d
0009c0  00120012          DCW      0x0012,0x0012
0009c4  004f000d          DCW      0x004f,0x000d
0009c8  000d000d          DCW      0x000d,0x000d
0009cc  000d000d          DCW      0x000d,0x000d
0009d0  000d000d          DCW      0x000d,0x000d
0009d4  000d000d          DCW      0x000d,0x000d
0009d8  000d0014          DCW      0x000d,0x0014
0009dc  0013000a          DCW      0x0013,0x000a
0009e0  00140013          DCW      0x0014,0x0013
0009e4  000d000f          DCW      0x000d,0x000f
0009e8  002f0054          DCW      0x002f,0x0054
0009ec  0015002f          DCW      0x0015,0x002f
0009f0  002f002f          DCW      0x002f,0x002f
0009f4  001e002f          DCW      0x001e,0x002f
0009f8  001e002f          DCW      0x001e,0x002f
0009fc  00150015          DCW      0x0015,0x0015
000a00  00020018          DCW      0x0002,0x0018
000a04  001f001f          DCW      0x001f,0x001f
000a08  001f001f          DCW      0x001f,0x001f
000a0c  001f001f          DCW      0x001f,0x001f
000a10  001f001f          DCW      0x001f,0x001f
000a14  001f000b          DCW      0x001f,0x000b
000a18  000b000a          DCW      0x000b,0x000a
000a1c  001f0055          DCW      0x001f,0x0055
000a20  00240024          DCW      0x0024,0x0024
000a24  00210021          DCW      0x0021,0x0021
000a28  00210021          DCW      0x0021,0x0021
000a2c  00210021          DCW      0x0021,0x0021
000a30  00210021          DCW      0x0021,0x0021
000a34  00210021          DCW      0x0021,0x0021
000a38  00190019          DCW      0x0019,0x0019
000a3c  00190019          DCW      0x0019,0x0019
000a40  00190019          DCW      0x0019,0x0019
000a44  00190019          DCW      0x0019,0x0019
000a48  00190019          DCW      0x0019,0x0019
000a4c  000b000b          DCW      0x000b,0x000b
000a50  000b000b          DCW      0x000b,0x000b
000a54  000b000b          DCW      0x000b,0x000b
000a58  000b000b          DCW      0x000b,0x000b
000a5c  000b000b          DCW      0x000b,0x000b
000a60  00080008          DCW      0x0008,0x0008
000a64  00080008          DCW      0x0008,0x0008
000a68  00080008          DCW      0x0008,0x0008
000a6c  00080008          DCW      0x0008,0x0008
000a70  00080008          DCW      0x0008,0x0008
000a74  004f0011          DCW      0x004f,0x0011
000a78  00110011          DCW      0x0011,0x0011
000a7c  00110011          DCW      0x0011,0x0011
000a80  00110011          DCW      0x0011,0x0011
000a84  00110011          DCW      0x0011,0x0011
000a88  0011002c          DCW      0x0011,0x002c
000a8c  00100010          DCW      0x0010,0x0010
000a90  00100010          DCW      0x0010,0x0010
000a94  00100010          DCW      0x0010,0x0010
000a98  00100010          DCW      0x0010,0x0010
000a9c  00100010          DCW      0x0010,0x0010
000aa0  0010001e          DCW      0x0010,0x001e
000aa4  001e0055          DCW      0x001e,0x0055
000aa8  00170017          DCW      0x0017,0x0017
000aac  00170017          DCW      0x0017,0x0017
000ab0  0017002a          DCW      0x0017,0x002a
000ab4  002a002a          DCW      0x002a,0x002a
000ab8  002a002a          DCW      0x002a,0x002a
000abc  002a002a          DCW      0x002a,0x002a
000ac0  002a002a          DCW      0x002a,0x002a
000ac4  01030103          DCW      0x0103,0x0103
000ac8  01030103          DCW      0x0103,0x0103
000acc  01030103          DCW      0x0103,0x0103
000ad0  01030103          DCW      0x0103,0x0103
000ad4  01030103          DCW      0x0103,0x0103
000ad8  01030103          DCW      0x0103,0x0103
000adc  01030103          DCW      0x0103,0x0103
000ae0  00a2000d          DCW      0x00a2,0x000d
000ae4  000d000d          DCW      0x000d,0x000d
000ae8  000d000d          DCW      0x000d,0x000d
000aec  000d000d          DCW      0x000d,0x000d
000af0  000d000d          DCW      0x000d,0x000d
000af4  000d0009          DCW      0x000d,0x0009
000af8  00090009          DCW      0x0009,0x0009
000afc  00090009          DCW      0x0009,0x0009
000b00  00090009          DCW      0x0009,0x0009
000b04  00090009          DCW      0x0009,0x0009
000b08  00090015          DCW      0x0009,0x0015
000b0c  000c0140          DCW      0x000c,0x0140
000b10  0003001c          DCW      0x0003,0x001c
000b14  001c001c          DCW      0x001c,0x001c
000b18  001c0003          DCW      0x001c,0x0003
000b1c  001c001c          DCW      0x001c,0x001c
000b20  000b000b          DCW      0x000b,0x000b
000b24  00280028          DCW      0x0028,0x0028
000b28  000b000b          DCW      0x000b,0x000b
000b2c  000b000b          DCW      0x000b,0x000b
000b30  000b000b          DCW      0x000b,0x000b
000b34  000b000b          DCW      0x000b,0x000b
000b38  000b000b          DCW      0x000b,0x000b
000b3c  000b000b          DCW      0x000b,0x000b
000b40  01400140          DCW      0x0140,0x0140
000b44  01400140          DCW      0x0140,0x0140
000b48  001f001f          DCW      0x001f,0x001f
000b4c  01400140          DCW      0x0140,0x0140
000b50  01400007          DCW      0x0140,0x0007
000b54  01400140          DCW      0x0140,0x0140
000b58  000a000a          DCW      0x000a,0x000a
000b5c  00a20009          DCW      0x00a2,0x0009
000b60  0020001b          DCW      0x0020,0x001b
000b64  00a20012          DCW      0x00a2,0x0012
000b68  00120012          DCW      0x0012,0x0012
000b6c  00120012          DCW      0x0012,0x0012
000b70  00120012          DCW      0x0012,0x0012
000b74  00120012          DCW      0x0012,0x0012
000b78  00120031          DCW      0x0012,0x0031
000b7c  00310031          DCW      0x0031,0x0031
000b80  00310031          DCW      0x0031,0x0031
000b84  00310031          DCW      0x0031,0x0031
000b88  00310031          DCW      0x0031,0x0031
000b8c  00310027          DCW      0x0031,0x0027
000b90  00270027          DCW      0x0027,0x0027
000b94  00270027          DCW      0x0027,0x0027
000b98  00270027          DCW      0x0027,0x0027
000b9c  00270027          DCW      0x0027,0x0027
000ba0  00270006          DCW      0x0027,0x0006
000ba4  0020001b          DCW      0x0020,0x001b
000ba8  00a20140          DCW      0x00a2,0x0140
000bac  00090009          DCW      0x0009,0x0009
000bb0  00090009          DCW      0x0009,0x0009
000bb4  00090009          DCW      0x0009,0x0009
000bb8  00090009          DCW      0x0009,0x0009
000bbc  00090009          DCW      0x0009,0x0009
000bc0  00030020          DCW      0x0003,0x0020
000bc4  001b002f          DCW      0x001b,0x002f
000bc8  002800a2          DCW      0x0028,0x00a2
000bcc  00810009          DCW      0x0081,0x0009
000bd0  00090009          DCW      0x0009,0x0009
000bd4  00090009          DCW      0x0009,0x0009
000bd8  00090009          DCW      0x0009,0x0009
000bdc  00090009          DCW      0x0009,0x0009
000be0  00090002          DCW      0x0009,0x0002
000be4  0020001b          DCW      0x0020,0x001b
000be8  001c0059          DCW      0x001c,0x0059
000bec  004e0059          DCW      0x004e,0x0059
000bf0  008a0020          DCW      0x008a,0x0020
000bf4  001b002f          DCW      0x001b,0x002f
000bf8  00540006          DCW      0x0054,0x0006
000bfc  00060006          DCW      0x0006,0x0006
000c00  00060006          DCW      0x0006,0x0006
000c04  00060006          DCW      0x0006,0x0006
000c08  00060006          DCW      0x0006,0x0006
000c0c  00060006          DCW      0x0006,0x0006
000c10  00060006          DCW      0x0006,0x0006
000c14  00060006          DCW      0x0006,0x0006
000c18  0006              DCW      0x0006
                  g_PIC_Width
000c1a  000c              DCW      0x000c
000c1c  0140000d          DCW      0x0140,0x000d
000c20  000d000d          DCW      0x000d,0x000d
000c24  000d000d          DCW      0x000d,0x000d
000c28  000d0003          DCW      0x000d,0x0003
000c2c  000d000d          DCW      0x000d,0x000d
000c30  000d000d          DCW      0x000d,0x000d
000c34  000d000d          DCW      0x000d,0x000d
000c38  000c0037          DCW      0x000c,0x0037
000c3c  00370037          DCW      0x0037,0x0037
000c40  00370037          DCW      0x0037,0x0037
000c44  00370037          DCW      0x0037,0x0037
000c48  00370037          DCW      0x0037,0x0037
000c4c  00370008          DCW      0x0037,0x0008
000c50  00080037          DCW      0x0008,0x0037
000c54  00080008          DCW      0x0008,0x0008
000c58  00110020          DCW      0x0011,0x0020
000c5c  001b000d          DCW      0x001b,0x000d
000c60  0020001b          DCW      0x0020,0x001b
000c64  002f000b          DCW      0x002f,0x000b
000c68  0020001b          DCW      0x0020,0x001b
000c6c  00110010          DCW      0x0011,0x0010
000c70  00100010          DCW      0x0010,0x0010
000c74  00100010          DCW      0x0010,0x0010
000c78  0010000f          DCW      0x0010,0x000f
000c7c  000f000f          DCW      0x000f,0x000f
000c80  000f000f          DCW      0x000f,0x000f
000c84  000f000f          DCW      0x000f,0x000f
000c88  000f000f          DCW      0x000f,0x000f
000c8c  000f000f          DCW      0x000f,0x000f
000c90  000f000f          DCW      0x000f,0x000f
000c94  000f000f          DCW      0x000f,0x000f
000c98  000f000f          DCW      0x000f,0x000f
000c9c  000f000f          DCW      0x000f,0x000f
000ca0  000f000f          DCW      0x000f,0x000f
000ca4  000c000c          DCW      0x000c,0x000c
000ca8  000c000c          DCW      0x000c,0x000c
000cac  000c000c          DCW      0x000c,0x000c
000cb0  000c000c          DCW      0x000c,0x000c
000cb4  000c000c          DCW      0x000c,0x000c
000cb8  000c00aa          DCW      0x000c,0x00aa
000cbc  00aa0020          DCW      0x00aa,0x0020
000cc0  001b002f          DCW      0x001b,0x002f
000cc4  00aa00aa          DCW      0x00aa,0x00aa
000cc8  00090009          DCW      0x0009,0x0009
000ccc  00090009          DCW      0x0009,0x0009
000cd0  00090009          DCW      0x0009,0x0009
000cd4  00090009          DCW      0x0009,0x0009
000cd8  00090009          DCW      0x0009,0x0009
000cdc  00110012          DCW      0x0011,0x0012
000ce0  004b0009          DCW      0x004b,0x0009
000ce4  000a000a          DCW      0x000a,0x000a
000ce8  000a000a          DCW      0x000a,0x000a
000cec  000a000a          DCW      0x000a,0x000a
000cf0  000a000a          DCW      0x000a,0x000a
000cf4  000a000a          DCW      0x000a,0x000a
000cf8  000e0012          DCW      0x000e,0x0012
000cfc  00120020          DCW      0x0012,0x0020
000d00  001b0011          DCW      0x001b,0x0011
000d04  000e0011          DCW      0x000e,0x0011
000d08  0020001b          DCW      0x0020,0x001b
000d0c  00100010          DCW      0x0010,0x0010
000d10  00100010          DCW      0x0010,0x0010
000d14  00100010          DCW      0x0010,0x0010
000d18  00100011          DCW      0x0010,0x0011
000d1c  00550016          DCW      0x0055,0x0016
000d20  00160016          DCW      0x0016,0x0016
000d24  0016000e          DCW      0x0016,0x000e
000d28  000e000e          DCW      0x000e,0x000e
000d2c  000e000e          DCW      0x000e,0x000e
000d30  000e000e          DCW      0x000e,0x000e
000d34  000e000e          DCW      0x000e,0x000e
000d38  000e000e          DCW      0x000e,0x000e
000d3c  001d001d          DCW      0x001d,0x001d
000d40  001d0004          DCW      0x001d,0x0004
000d44  0004000a          DCW      0x0004,0x000a
000d48  0010000a          DCW      0x0010,0x000a
000d4c  001d000e          DCW      0x001d,0x000e
000d50  000e001d          DCW      0x000e,0x001d
000d54  001d001d          DCW      0x001d,0x001d
000d58  0007001d          DCW      0x0007,0x001d
000d5c  001d000c          DCW      0x001d,0x000c
000d60  000f000d          DCW      0x000f,0x000d
000d64  00210021          DCW      0x0021,0x0021
000d68  00160016          DCW      0x0016,0x0016
000d6c  000d000a          DCW      0x000d,0x000a
000d70  0010000f          DCW      0x0010,0x000f
000d74  000f000d          DCW      0x000f,0x000d
000d78  000b000b          DCW      0x000b,0x000b
000d7c  000e000e          DCW      0x000e,0x000e
000d80  00200020          DCW      0x0020,0x0020
000d84  00200020          DCW      0x0020,0x0020
000d88  00200020          DCW      0x0020,0x0020
000d8c  00200020          DCW      0x0020,0x0020
000d90  00200020          DCW      0x0020,0x0020
000d94  0002000e          DCW      0x0002,0x000e
000d98  00aa000c          DCW      0x00aa,0x000c
000d9c  00200020          DCW      0x0020,0x0020
000da0  00200020          DCW      0x0020,0x0020
000da4  00200020          DCW      0x0020,0x0020
000da8  00200020          DCW      0x0020,0x0020
000dac  00200020          DCW      0x0020,0x0020
000db0  001a000d          DCW      0x001a,0x000d
000db4  002a0028          DCW      0x002a,0x0028
000db8  00090039          DCW      0x0009,0x0039
000dbc  0039002a          DCW      0x0039,0x002a
000dc0  002a000b          DCW      0x002a,0x000b
000dc4  000b000c          DCW      0x000b,0x000c
000dc8  000c000d          DCW      0x000c,0x000d
000dcc  00100010          DCW      0x0010,0x0010
000dd0  00100010          DCW      0x0010,0x0010
000dd4  00100010          DCW      0x0010,0x0010
000dd8  00100010          DCW      0x0010,0x0010
000ddc  00100010          DCW      0x0010,0x0010
000de0  00130012          DCW      0x0013,0x0012
000de4  000f0013          DCW      0x000f,0x0013
000de8  00120001          DCW      0x0012,0x0001
000dec  00020010          DCW      0x0002,0x0010
000df0  00200009          DCW      0x0020,0x0009
000df4  0010000d          DCW      0x0010,0x000d
000df8  0010000e          DCW      0x0010,0x000e
000dfc  0010000e          DCW      0x0010,0x000e
000e00  000d0007          DCW      0x000d,0x0007
000e04  00070002          DCW      0x0007,0x0002
000e08  000f001a          DCW      0x000f,0x001a
000e0c  001a001a          DCW      0x001a,0x001a
000e10  001a001a          DCW      0x001a,0x001a
000e14  001a001a          DCW      0x001a,0x001a
000e18  001a001a          DCW      0x001a,0x001a
000e1c  000a000a          DCW      0x000a,0x000a
000e20  000a000f          DCW      0x000a,0x000f
000e24  004e000f          DCW      0x004e,0x000f
000e28  000f002d          DCW      0x000f,0x002d
000e2c  002d002d          DCW      0x002d,0x002d
000e30  002d002d          DCW      0x002d,0x002d
000e34  002d002d          DCW      0x002d,0x002d
000e38  002d002d          DCW      0x002d,0x002d
000e3c  002d0022          DCW      0x002d,0x0022
000e40  00220022          DCW      0x0022,0x0022
000e44  00220022          DCW      0x0022,0x0022
000e48  00220022          DCW      0x0022,0x0022
000e4c  00220022          DCW      0x0022,0x0022
000e50  0022000f          DCW      0x0022,0x000f
000e54  000f000f          DCW      0x000f,0x000f
000e58  000f000f          DCW      0x000f,0x000f
000e5c  000f000f          DCW      0x000f,0x000f
000e60  000f000f          DCW      0x000f,0x000f
000e64  000f000a          DCW      0x000f,0x000a
000e68  000a000a          DCW      0x000a,0x000a
000e6c  000a000a          DCW      0x000a,0x000a
000e70  000a000a          DCW      0x000a,0x000a
000e74  000a000a          DCW      0x000a,0x000a
000e78  000a000d          DCW      0x000a,0x000d
000e7c  00160016          DCW      0x0016,0x0016
000e80  00160016          DCW      0x0016,0x0016
000e84  00160016          DCW      0x0016,0x0016
000e88  00160016          DCW      0x0016,0x0016
000e8c  00160016          DCW      0x0016,0x0016
000e90  000f0018          DCW      0x000f,0x0018
000e94  00180018          DCW      0x0018,0x0018
000e98  00180018          DCW      0x0018,0x0018
000e9c  00180018          DCW      0x0018,0x0018
000ea0  00180018          DCW      0x0018,0x0018
000ea4  00180002          DCW      0x0018,0x0002
000ea8  000e000e          DCW      0x000e,0x000e
000eac  00110022          DCW      0x0011,0x0022
000eb0  00220022          DCW      0x0022,0x0022
000eb4  00220022          DCW      0x0022,0x0022
000eb8  00590059          DCW      0x0059,0x0059
000ebc  00590059          DCW      0x0059,0x0059
000ec0  00590059          DCW      0x0059,0x0059
000ec4  00590059          DCW      0x0059,0x0059
000ec8  0059000f          DCW      0x0059,0x000f
000ecc  000f000f          DCW      0x000f,0x000f
000ed0  000f000f          DCW      0x000f,0x000f
000ed4  000f000f          DCW      0x000f,0x000f
000ed8  000f000f          DCW      0x000f,0x000f
000edc  000f000f          DCW      0x000f,0x000f
000ee0  000f000f          DCW      0x000f,0x000f
000ee4  000f0011          DCW      0x000f,0x0011
000ee8  00130013          DCW      0x0013,0x0013
000eec  00130013          DCW      0x0013,0x0013
000ef0  00130013          DCW      0x0013,0x0013
000ef4  00130013          DCW      0x0013,0x0013
000ef8  00130013          DCW      0x0013,0x0013
000efc  000c000c          DCW      0x000c,0x000c
000f00  000c000c          DCW      0x000c,0x000c
000f04  000c000c          DCW      0x000c,0x000c
000f08  000c000c          DCW      0x000c,0x000c
000f0c  000c000c          DCW      0x000c,0x000c
000f10  000a000c          DCW      0x000a,0x000c
000f14  00aa0003          DCW      0x00aa,0x0003
000f18  000c000c          DCW      0x000c,0x000c
000f1c  000c000c          DCW      0x000c,0x000c
000f20  0013000c          DCW      0x0013,0x000c
000f24  000c0003          DCW      0x000c,0x0003
000f28  00030011          DCW      0x0003,0x0011
000f2c  0011000e          DCW      0x0011,0x000e
000f30  000e000e          DCW      0x000e,0x000e
000f34  000e000e          DCW      0x000e,0x000e
000f38  000e000e          DCW      0x000e,0x000e
000f3c  000e000e          DCW      0x000e,0x000e
000f40  000e000e          DCW      0x000e,0x000e
000f44  000e001d          DCW      0x000e,0x001d
000f48  001d001d          DCW      0x001d,0x001d
000f4c  001d000e          DCW      0x001d,0x000e
000f50  000e001d          DCW      0x000e,0x001d
000f54  001d001d          DCW      0x001d,0x001d
000f58  0007001d          DCW      0x0007,0x001d
000f5c  001d0007          DCW      0x001d,0x0007
000f60  00070011          DCW      0x0007,0x0011
000f64  000d0020          DCW      0x000d,0x0020
000f68  001b0011          DCW      0x001b,0x0011
000f6c  000f000f          DCW      0x000f,0x000f
000f70  000f000f          DCW      0x000f,0x000f
000f74  000f000f          DCW      0x000f,0x000f
000f78  00110011          DCW      0x0011,0x0011
000f7c  00110011          DCW      0x0011,0x0011
000f80  00450045          DCW      0x0045,0x0045
000f84  00450045          DCW      0x0045,0x0045
000f88  00450045          DCW      0x0045,0x0045
000f8c  00450045          DCW      0x0045,0x0045
000f90  00450045          DCW      0x0045,0x0045
000f94  00350035          DCW      0x0035,0x0035
000f98  00350035          DCW      0x0035,0x0035
000f9c  00350035          DCW      0x0035,0x0035
000fa0  00350035          DCW      0x0035,0x0035
000fa4  00350035          DCW      0x0035,0x0035
000fa8  00060020          DCW      0x0006,0x0020
000fac  001b0011          DCW      0x001b,0x0011
000fb0  00aa000f          DCW      0x00aa,0x000f
000fb4  000f000f          DCW      0x000f,0x000f
000fb8  000f000f          DCW      0x000f,0x000f
000fbc  000f000f          DCW      0x000f,0x000f
000fc0  000f000f          DCW      0x000f,0x000f
000fc4  000f0003          DCW      0x000f,0x0003
000fc8  0020001b          DCW      0x0020,0x001b
000fcc  002f0028          DCW      0x002f,0x0028
000fd0  0011000d          DCW      0x0011,0x000d
000fd4  000c000c          DCW      0x000c,0x000c
000fd8  000c000c          DCW      0x000c,0x000c
000fdc  000c000c          DCW      0x000c,0x000c
000fe0  000c000c          DCW      0x000c,0x000c
000fe4  000c000c          DCW      0x000c,0x000c
000fe8  000c0020          DCW      0x000c,0x0020
000fec  001b000c          DCW      0x001b,0x000c
000ff0  000e000d          DCW      0x000e,0x000d
000ff4  000e0019          DCW      0x000e,0x0019
000ff8  0020001b          DCW      0x0020,0x001b
000ffc  002f0010          DCW      0x002f,0x0010
001000  00080008          DCW      0x0008,0x0008
001004  00080008          DCW      0x0008,0x0008
001008  00080008          DCW      0x0008,0x0008
00100c  00080008          DCW      0x0008,0x0008
001010  00080008          DCW      0x0008,0x0008
001014  00080008          DCW      0x0008,0x0008
001018  00080008          DCW      0x0008,0x0008
00101c  00080008          DCW      0x0008,0x0008
                  colorType
001020  f80007e0          DCW      0xf800,0x07e0
001024  001fffff          DCW      0x001f,0xffff
001028  000007e0          DCW      0x0000,0x07e0

                          AREA ||area_number.32||, DATA, ALIGN=1

                          EXPORTAS ||area_number.32||, ||.data||
                  lcdCB
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "User\\lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_qrcode____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___5_lcd_c_qrcode____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_qrcode____REVSH|
#line 128
|__asm___5_lcd_c_qrcode____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
