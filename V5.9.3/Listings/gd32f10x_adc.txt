; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_adc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_adc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_adc.crf Libraries\src\gd32f10x_adc.c]
                          THUMB

                          AREA ||i.adc_calibration_enable||, CODE, READONLY, ALIGN=1

                  adc_calibration_enable PROC
;;;211    */
;;;212    void adc_calibration_enable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;213    {
;;;214        /* reset the selected ADC1 calibration registers */
;;;215        ADC_CTL1(adc_periph) |= (uint32_t) ADC_CTL1_RSTCLB;
000002  f0410108          ORR      r1,r1,#8
000006  6081              STR      r1,[r0,#8]
;;;216        /* check the RSTCLB bit state */
;;;217        while(RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_RSTCLB)){
000008  bf00              NOP      
                  |L1.10|
00000a  6881              LDR      r1,[r0,#8]
00000c  f0010108          AND      r1,r1,#8
000010  2900              CMP      r1,#0
000012  d1fa              BNE      |L1.10|
;;;218        }
;;;219        /* enable ADC calibration process */
;;;220        ADC_CTL1(adc_periph) |= ADC_CTL1_CLB;
000014  6881              LDR      r1,[r0,#8]
000016  f0410104          ORR      r1,r1,#4
00001a  6081              STR      r1,[r0,#8]
;;;221        /* check the CLB bit state */
;;;222        while(RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_CLB)){
00001c  bf00              NOP      
                  |L1.30|
00001e  6881              LDR      r1,[r0,#8]
000020  f0010104          AND      r1,r1,#4
000024  2900              CMP      r1,#0
000026  d1fa              BNE      |L1.30|
;;;223        }
;;;224    }
000028  4770              BX       lr
;;;225    
                          ENDP


                          AREA ||i.adc_channel_length_config||, CODE, READONLY, ALIGN=1

                  adc_channel_length_config PROC
;;;322    */
;;;323    void adc_channel_length_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t length)
000000  b530              PUSH     {r4,r5,lr}
;;;324    {
;;;325        switch(adc_channel_group){
000002  2901              CMP      r1,#1
000004  d002              BEQ      |L2.12|
000006  2902              CMP      r1,#2
000008  d11a              BNE      |L2.64|
00000a  e00c              B        |L2.38|
                  |L2.12|
;;;326        case ADC_REGULAR_CHANNEL:
;;;327            /* configure the length of regular channel group */
;;;328            ADC_RSQ0(adc_periph) &= ~((uint32_t)ADC_RSQ0_RL);
00000c  6ac3              LDR      r3,[r0,#0x2c]
00000e  f4230370          BIC      r3,r3,#0xf00000
000012  62c3              STR      r3,[r0,#0x2c]
;;;329            ADC_RSQ0(adc_periph) |= RSQ0_RL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
000014  6ac3              LDR      r3,[r0,#0x2c]
000016  1e54              SUBS     r4,r2,#1
000018  f44f0570          MOV      r5,#0xf00000
00001c  ea055404          AND      r4,r5,r4,LSL #20
000020  4323              ORRS     r3,r3,r4
000022  62c3              STR      r3,[r0,#0x2c]
;;;330            break;
000024  e00d              B        |L2.66|
                  |L2.38|
;;;331        case ADC_INSERTED_CHANNEL:
;;;332            /* configure the length of inserted channel group */
;;;333            ADC_ISQ(adc_periph) &= ~((uint32_t)ADC_ISQ_IL);
000026  6b83              LDR      r3,[r0,#0x38]
000028  f4231340          BIC      r3,r3,#0x300000
00002c  6383              STR      r3,[r0,#0x38]
;;;334            ADC_ISQ(adc_periph) |= ISQ_IL((uint32_t)(length-ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
00002e  6b83              LDR      r3,[r0,#0x38]
000030  1e54              SUBS     r4,r2,#1
000032  f44f1540          MOV      r5,#0x300000
000036  ea055404          AND      r4,r5,r4,LSL #20
00003a  4323              ORRS     r3,r3,r4
00003c  6383              STR      r3,[r0,#0x38]
;;;335            break;
00003e  e000              B        |L2.66|
                  |L2.64|
;;;336        default:
;;;337            break;
000040  bf00              NOP      
                  |L2.66|
000042  bf00              NOP                            ;330
;;;338        }
;;;339    }
000044  bd30              POP      {r4,r5,pc}
;;;340    
                          ENDP


                          AREA ||i.adc_data_alignment_config||, CODE, READONLY, ALIGN=1

                  adc_data_alignment_config PROC
;;;168    */
;;;169    void adc_data_alignment_config(uint32_t adc_periph, uint32_t data_alignment)
000000  b121              CBZ      r1,|L3.12|
;;;170    {
;;;171        if(ADC_DATAALIGN_RIGHT != data_alignment){
;;;172            /* MSB alignment */
;;;173            ADC_CTL1(adc_periph) |= ADC_CTL1_DAL;
000002  6882              LDR      r2,[r0,#8]
000004  f4426200          ORR      r2,r2,#0x800
000008  6082              STR      r2,[r0,#8]
00000a  e003              B        |L3.20|
                  |L3.12|
;;;174        }else{
;;;175            /* LSB alignment */
;;;176            ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DAL);
00000c  6882              LDR      r2,[r0,#8]
00000e  f4226200          BIC      r2,r2,#0x800
000012  6082              STR      r2,[r0,#8]
                  |L3.20|
;;;177        }
;;;178    }
000014  4770              BX       lr
;;;179    
                          ENDP


                          AREA ||i.adc_deinit||, CODE, READONLY, ALIGN=2

                  adc_deinit PROC
;;;68     */
;;;69     void adc_deinit(uint32_t adc_periph)
000000  b510              PUSH     {r4,lr}
;;;70     {
000002  4604              MOV      r4,r0
;;;71         switch(adc_periph){
000004  4813              LDR      r0,|L4.84|
000006  4420              ADD      r0,r0,r4
000008  b130              CBZ      r0,|L4.24|
00000a  f5b06f80          CMP      r0,#0x400
00000e  d00c              BEQ      |L4.42|
000010  f5b05fc0          CMP      r0,#0x1800
000014  d11b              BNE      |L4.78|
000016  e011              B        |L4.60|
                  |L4.24|
;;;72         case ADC0:
;;;73             /* reset ADC0 */
;;;74             rcu_periph_reset_enable(RCU_ADC0RST);
000018  f2403009          MOV      r0,#0x309
00001c  f7fffffe          BL       rcu_periph_reset_enable
;;;75             rcu_periph_reset_disable(RCU_ADC0RST);
000020  f2403009          MOV      r0,#0x309
000024  f7fffffe          BL       rcu_periph_reset_disable
;;;76             break;
000028  e012              B        |L4.80|
                  |L4.42|
;;;77         case ADC1:
;;;78             /* reset ADC1 */
;;;79             rcu_periph_reset_enable(RCU_ADC1RST);
00002a  f240300a          MOV      r0,#0x30a
00002e  f7fffffe          BL       rcu_periph_reset_enable
;;;80             rcu_periph_reset_disable(RCU_ADC1RST);
000032  f240300a          MOV      r0,#0x30a
000036  f7fffffe          BL       rcu_periph_reset_disable
;;;81             break;
00003a  e009              B        |L4.80|
                  |L4.60|
;;;82     #ifndef GD32F10X_CL
;;;83         case ADC2:
;;;84             rcu_periph_reset_enable(RCU_ADC2RST);
00003c  f240300f          MOV      r0,#0x30f
000040  f7fffffe          BL       rcu_periph_reset_enable
;;;85             rcu_periph_reset_disable(RCU_ADC2RST);
000044  f240300f          MOV      r0,#0x30f
000048  f7fffffe          BL       rcu_periph_reset_disable
;;;86             break;
00004c  e000              B        |L4.80|
                  |L4.78|
;;;87     #endif /* GD32F10X_CL */
;;;88         default:
;;;89             break;
00004e  bf00              NOP      
                  |L4.80|
000050  bf00              NOP                            ;76
;;;90         }
;;;91     }
000052  bd10              POP      {r4,pc}
;;;92     
                          ENDP

                  |L4.84|
                          DCD      0xbffedc00

                          AREA ||i.adc_disable||, CODE, READONLY, ALIGN=1

                  adc_disable PROC
;;;199    */
;;;200    void adc_disable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;201    {
;;;202        /* disable ADC */
;;;203        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ADCON);
000002  f0210101          BIC      r1,r1,#1
000006  6081              STR      r1,[r0,#8]
;;;204    }
000008  4770              BX       lr
;;;205    
                          ENDP


                          AREA ||i.adc_discontinuous_mode_config||, CODE, READONLY, ALIGN=1

                  adc_discontinuous_mode_config PROC
;;;286    */
;;;287    void adc_discontinuous_mode_config(uint32_t adc_periph, uint8_t adc_channel_group, uint8_t length)
000000  b530              PUSH     {r4,r5,lr}
;;;288    {
;;;289        /* disable discontinuous mode of regular & inserted channel */
;;;290        ADC_CTL0(adc_periph) &= ~((uint32_t)(ADC_CTL0_DISRC | ADC_CTL0_DISIC));
000002  6843              LDR      r3,[r0,#4]
000004  f42353c0          BIC      r3,r3,#0x1800
000008  6043              STR      r3,[r0,#4]
;;;291        switch(adc_channel_group){
00000a  2901              CMP      r1,#1
00000c  d004              BEQ      |L6.24|
00000e  2902              CMP      r1,#2
000010  d013              BEQ      |L6.58|
000012  2904              CMP      r1,#4
000014  d116              BNE      |L6.68|
000016  e016              B        |L6.70|
                  |L6.24|
;;;292        case ADC_REGULAR_CHANNEL:
;;;293            /* config the number of conversions in discontinuous mode */
;;;294            ADC_CTL0(adc_periph) &= ~((uint32_t)ADC_CTL0_DISNUM);
000018  6843              LDR      r3,[r0,#4]
00001a  f4234360          BIC      r3,r3,#0xe000
00001e  6043              STR      r3,[r0,#4]
;;;295            ADC_CTL0(adc_periph) |= CTL0_DISNUM(((uint32_t)length - ADC_CHANNEL_LENGTH_SUBTRACT_ONE));
000020  6843              LDR      r3,[r0,#4]
000022  1e54              SUBS     r4,r2,#1
000024  f44f4560          MOV      r5,#0xe000
000028  ea053444          AND      r4,r5,r4,LSL #13
00002c  4323              ORRS     r3,r3,r4
00002e  6043              STR      r3,[r0,#4]
;;;296            /* enable regular channel group discontinuous mode */
;;;297            ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISRC;
000030  6843              LDR      r3,[r0,#4]
000032  f4436300          ORR      r3,r3,#0x800
000036  6043              STR      r3,[r0,#4]
;;;298            break;
000038  e006              B        |L6.72|
                  |L6.58|
;;;299        case ADC_INSERTED_CHANNEL:
;;;300            /* enable inserted channel group discontinuous mode */
;;;301            ADC_CTL0(adc_periph) |= (uint32_t)ADC_CTL0_DISIC;
00003a  6843              LDR      r3,[r0,#4]
00003c  f4435380          ORR      r3,r3,#0x1000
000040  6043              STR      r3,[r0,#4]
;;;302            break;
000042  e001              B        |L6.72|
                  |L6.68|
;;;303        case ADC_CHANNEL_DISCON_DISABLE:
000044  bf00              NOP      
                  |L6.70|
;;;304            /* disable discontinuous mode of regular & inserted channel */
;;;305        default:
;;;306            break;
000046  bf00              NOP      
                  |L6.72|
000048  bf00              NOP                            ;298
;;;307        }
;;;308    }
00004a  bd30              POP      {r4,r5,pc}
;;;309    
                          ENDP


                          AREA ||i.adc_dma_mode_disable||, CODE, READONLY, ALIGN=1

                  adc_dma_mode_disable PROC
;;;267    */
;;;268    void adc_dma_mode_disable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;269    {
;;;270        /* disable DMA request */
;;;271        ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_DMA);
000002  f4217180          BIC      r1,r1,#0x100
000006  6081              STR      r1,[r0,#8]
;;;272    }
000008  4770              BX       lr
;;;273    
                          ENDP


                          AREA ||i.adc_dma_mode_enable||, CODE, READONLY, ALIGN=1

                  adc_dma_mode_enable PROC
;;;255    */
;;;256    void adc_dma_mode_enable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;257    {
;;;258        /* enable DMA request */
;;;259        ADC_CTL1(adc_periph) |= (uint32_t)(ADC_CTL1_DMA);
000002  f4417180          ORR      r1,r1,#0x100
000006  6081              STR      r1,[r0,#8]
;;;260    }
000008  4770              BX       lr
;;;261    
                          ENDP


                          AREA ||i.adc_enable||, CODE, READONLY, ALIGN=1

                  adc_enable PROC
;;;185    */
;;;186    void adc_enable(uint32_t adc_periph)
000000  6881              LDR      r1,[r0,#8]
;;;187    {
;;;188        if(RESET == (ADC_CTL1(adc_periph) & ADC_CTL1_ADCON)){
000002  f0010101          AND      r1,r1,#1
000006  b919              CBNZ     r1,|L9.16|
;;;189            /* enable ADC */
;;;190            ADC_CTL1(adc_periph) |= (uint32_t)ADC_CTL1_ADCON;
000008  6881              LDR      r1,[r0,#8]
00000a  f0410101          ORR      r1,r1,#1
00000e  6081              STR      r1,[r0,#8]
                  |L9.16|
;;;191        }       
;;;192    }
000010  4770              BX       lr
;;;193    
                          ENDP


                          AREA ||i.adc_external_trigger_config||, CODE, READONLY, ALIGN=1

                  adc_external_trigger_config PROC
;;;563    */
;;;564    void adc_external_trigger_config(uint32_t adc_periph, uint8_t adc_channel_group, ControlStatus newvalue)
000000  b172              CBZ      r2,|L10.32|
;;;565    {
;;;566        if(newvalue){
;;;567            if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
000002  f0010301          AND      r3,r1,#1
000006  b11b              CBZ      r3,|L10.16|
;;;568                /* enable ADC regular channel group external trigger */
;;;569                ADC_CTL1(adc_periph) |= ADC_CTL1_ETERC;
000008  6883              LDR      r3,[r0,#8]
00000a  f4431380          ORR      r3,r3,#0x100000
00000e  6083              STR      r3,[r0,#8]
                  |L10.16|
;;;570            }
;;;571            if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
000010  f0010302          AND      r3,r1,#2
000014  b193              CBZ      r3,|L10.60|
;;;572                /* enable ADC inserted channel group external trigger */
;;;573                ADC_CTL1(adc_periph) |= ADC_CTL1_ETEIC;
000016  6883              LDR      r3,[r0,#8]
000018  f4434300          ORR      r3,r3,#0x8000
00001c  6083              STR      r3,[r0,#8]
00001e  e00d              B        |L10.60|
                  |L10.32|
;;;574            }        
;;;575        }else{
;;;576            if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
000020  f0010301          AND      r3,r1,#1
000024  b11b              CBZ      r3,|L10.46|
;;;577                /* disable ADC regular channel group external trigger */
;;;578                ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETERC;
000026  6883              LDR      r3,[r0,#8]
000028  f4231380          BIC      r3,r3,#0x100000
00002c  6083              STR      r3,[r0,#8]
                  |L10.46|
;;;579            }
;;;580            if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
00002e  f0010302          AND      r3,r1,#2
000032  b11b              CBZ      r3,|L10.60|
;;;581                /* disable ADC regular channel group external trigger */
;;;582                ADC_CTL1(adc_periph) &= ~ADC_CTL1_ETEIC;
000034  6883              LDR      r3,[r0,#8]
000036  f4234300          BIC      r3,r3,#0x8000
00003a  6083              STR      r3,[r0,#8]
                  |L10.60|
;;;583            }      
;;;584        }
;;;585    }
00003c  4770              BX       lr
;;;586    
                          ENDP


                          AREA ||i.adc_external_trigger_source_config||, CODE, READONLY, ALIGN=1

                  adc_external_trigger_source_config PROC
;;;534    */
;;;535    void adc_external_trigger_source_config(uint32_t adc_periph, uint8_t adc_channel_group, uint32_t external_trigger_source)
000000  2901              CMP      r1,#1
;;;536    {   
;;;537        switch(adc_channel_group){
000002  d002              BEQ      |L11.10|
000004  2902              CMP      r1,#2
000006  d110              BNE      |L11.42|
000008  e007              B        |L11.26|
                  |L11.10|
;;;538        case ADC_REGULAR_CHANNEL:
;;;539            /* configure ADC regular group external trigger source */
;;;540            ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSRC);
00000a  6883              LDR      r3,[r0,#8]
00000c  f4232360          BIC      r3,r3,#0xe0000
000010  6083              STR      r3,[r0,#8]
;;;541            ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
000012  6883              LDR      r3,[r0,#8]
000014  4313              ORRS     r3,r3,r2
000016  6083              STR      r3,[r0,#8]
;;;542            break;
000018  e008              B        |L11.44|
                  |L11.26|
;;;543        case ADC_INSERTED_CHANNEL:
;;;544            /* configure ADC inserted group external trigger source */
;;;545            ADC_CTL1(adc_periph) &= ~((uint32_t)ADC_CTL1_ETSIC);
00001a  6883              LDR      r3,[r0,#8]
00001c  f42343e0          BIC      r3,r3,#0x7000
000020  6083              STR      r3,[r0,#8]
;;;546            ADC_CTL1(adc_periph) |= (uint32_t)external_trigger_source;
000022  6883              LDR      r3,[r0,#8]
000024  4313              ORRS     r3,r3,r2
000026  6083              STR      r3,[r0,#8]
;;;547            break;
000028  e000              B        |L11.44|
                  |L11.42|
;;;548        default:
;;;549            break;
00002a  bf00              NOP      
                  |L11.44|
00002c  bf00              NOP                            ;542
;;;550        }
;;;551    }
00002e  4770              BX       lr
;;;552    
                          ENDP


                          AREA ||i.adc_flag_clear||, CODE, READONLY, ALIGN=1

                  adc_flag_clear PROC
;;;783    */
;;;784    void adc_flag_clear(uint32_t adc_periph, uint32_t adc_flag)
000000  6802              LDR      r2,[r0,#0]
;;;785    {
;;;786        ADC_STAT(adc_periph) &= ~((uint32_t)adc_flag);
000002  438a              BICS     r2,r2,r1
000004  6002              STR      r2,[r0,#0]
;;;787    }
000006  4770              BX       lr
;;;788    
                          ENDP


                          AREA ||i.adc_flag_get||, CODE, READONLY, ALIGN=1

                  adc_flag_get PROC
;;;761    */
;;;762    FlagStatus adc_flag_get(uint32_t adc_periph, uint32_t adc_flag)
000000  4602              MOV      r2,r0
;;;763    {
;;;764        FlagStatus reval = RESET;
000002  2000              MOVS     r0,#0
;;;765        if(ADC_STAT(adc_periph) & adc_flag){
000004  6813              LDR      r3,[r2,#0]
000006  400b              ANDS     r3,r3,r1
000008  b103              CBZ      r3,|L13.12|
;;;766            reval = SET;
00000a  2001              MOVS     r0,#1
                  |L13.12|
;;;767        }
;;;768        return reval;
;;;769    }
00000c  4770              BX       lr
;;;770    
                          ENDP


                          AREA ||i.adc_inserted_channel_config||, CODE, READONLY, ALIGN=1

                  adc_inserted_channel_config PROC
;;;428    */
;;;429    void adc_inserted_channel_config(uint32_t adc_periph, uint8_t rank, uint8_t adc_channel, uint32_t sample_time)
000000  b5f0              PUSH     {r4-r7,lr}
;;;430    {
000002  460c              MOV      r4,r1
;;;431        uint8_t inserted_length;
;;;432        uint32_t isq,sampt;
;;;433        /* get inserted channel group length */
;;;434        inserted_length = (uint8_t)GET_BITS(ADC_ISQ(adc_periph) , 20U , 21U);
000004  6b87              LDR      r7,[r0,#0x38]
000006  f3c75601          UBFX     r6,r7,#20,#2
;;;435        /* the channel number is written to these bits to select a channel as the nth conversion in the inserted channel group */
;;;436        isq = ADC_ISQ(adc_periph);
00000a  6b85              LDR      r5,[r0,#0x38]
;;;437        isq &= ~((uint32_t)(ADC_ISQ_ISQN << (ADC_INSERTED_CHANNEL_SHIFT_LENGTH-(inserted_length-rank)*ADC_INSERTED_CHANNEL_RANK_LENGTH)));
00000c  1b37              SUBS     r7,r6,r4
00000e  eb070787          ADD      r7,r7,r7,LSL #2
000012  f1c70c0f          RSB      r12,r7,#0xf
000016  271f              MOVS     r7,#0x1f
000018  fa07f70c          LSL      r7,r7,r12
00001c  43bd              BICS     r5,r5,r7
;;;438        isq |= ((uint32_t)adc_channel << (ADC_INSERTED_CHANNEL_SHIFT_LENGTH-(inserted_length-rank)*ADC_INSERTED_CHANNEL_RANK_LENGTH));
00001e  1b37              SUBS     r7,r6,r4
000020  eb070787          ADD      r7,r7,r7,LSL #2
000024  f1c7070f          RSB      r7,r7,#0xf
000028  fa02f707          LSL      r7,r2,r7
00002c  433d              ORRS     r5,r5,r7
;;;439        ADC_ISQ(adc_periph) = isq;
00002e  6385              STR      r5,[r0,#0x38]
;;;440    
;;;441        /* ADC sampling time config */  
;;;442        if(adc_channel < ADC_CHANNEL_SAMPLE_TEN){
000030  2a0a              CMP      r2,#0xa
000032  da0d              BGE      |L14.80|
;;;443            /* the inserted group sequence rank is smaller than ten */
;;;444            sampt = ADC_SAMPT1(adc_periph);
000034  6901              LDR      r1,[r0,#0x10]
;;;445            sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
000036  eb020c42          ADD      r12,r2,r2,LSL #1
00003a  2707              MOVS     r7,#7
00003c  fa07f70c          LSL      r7,r7,r12
000040  43b9              BICS     r1,r1,r7
;;;446            /* channel sample time set*/
;;;447            sampt |= (uint32_t) sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel);
000042  eb020742          ADD      r7,r2,r2,LSL #1
000046  fa03f707          LSL      r7,r3,r7
00004a  4339              ORRS     r1,r1,r7
;;;448            ADC_SAMPT1(adc_periph) = sampt;
00004c  6101              STR      r1,[r0,#0x10]
00004e  e012              B        |L14.118|
                  |L14.80|
;;;449        }else if(adc_channel < ADC_CHANNEL_SAMPLE_EIGHTEEN){
000050  2a12              CMP      r2,#0x12
000052  da10              BGE      |L14.118|
;;;450            /* the inserted group sequence rank is smaller than eighteen */
;;;451            sampt = ADC_SAMPT0(adc_periph);
000054  68c1              LDR      r1,[r0,#0xc]
;;;452            sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
000056  f1a2070a          SUB      r7,r2,#0xa
00005a  eb070c47          ADD      r12,r7,r7,LSL #1
00005e  2707              MOVS     r7,#7
000060  fa07f70c          LSL      r7,r7,r12
000064  43b9              BICS     r1,r1,r7
;;;453            /* channel sample time set*/
;;;454            sampt |= ((uint32_t)sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN)));
000066  f1a2070a          SUB      r7,r2,#0xa
00006a  eb070747          ADD      r7,r7,r7,LSL #1
00006e  fa03f707          LSL      r7,r3,r7
000072  4339              ORRS     r1,r1,r7
;;;455            ADC_SAMPT0(adc_periph) = sampt;
000074  60c1              STR      r1,[r0,#0xc]
                  |L14.118|
;;;456        }else{
;;;457        }
;;;458    }
000076  bdf0              POP      {r4-r7,pc}
;;;459    
                          ENDP


                          AREA ||i.adc_inserted_channel_offset_config||, CODE, READONLY, ALIGN=1

                  adc_inserted_channel_offset_config PROC
;;;472    */
;;;473    void adc_inserted_channel_offset_config(uint32_t adc_periph, uint8_t inserted_channel, uint16_t offset)
000000  b570              PUSH     {r4-r6,lr}
;;;474    {
000002  460b              MOV      r3,r1
;;;475        uint8_t inserted_length;
;;;476        uint32_t num = 0U;
000004  2100              MOVS     r1,#0
;;;477    
;;;478        inserted_length = (uint8_t)GET_BITS(ADC_ISQ(adc_periph) , 20U , 21U);
000006  6b85              LDR      r5,[r0,#0x38]
000008  f3c55401          UBFX     r4,r5,#20,#2
;;;479        num = ((uint32_t)ADC_OFFSET_LENGTH - ((uint32_t)inserted_length - (uint32_t)inserted_channel));
00000c  1ae5              SUBS     r5,r4,r3
00000e  f1c50103          RSB      r1,r5,#3
;;;480        
;;;481        if(num <= ADC_OFFSET_LENGTH){
000012  2903              CMP      r1,#3
000014  d805              BHI      |L15.34|
;;;482            /* calculate the offset of the register */
;;;483            num = num * ADC_OFFSET_SHIFT_LENGTH;
000016  0089              LSLS     r1,r1,#2
;;;484            /* config the offset of the selected channels */
;;;485            REG32((adc_periph) + 0x14U + num) = IOFFX_IOFF((uint32_t)offset);
000018  f3c2060b          UBFX     r6,r2,#0,#12
00001c  f1000514          ADD      r5,r0,#0x14
000020  506e              STR      r6,[r5,r1]
                  |L15.34|
;;;486        }  
;;;487    }
000022  bd70              POP      {r4-r6,pc}
;;;488    
                          ENDP


                          AREA ||i.adc_inserted_data_read||, CODE, READONLY, ALIGN=1

                  adc_inserted_data_read PROC
;;;632    */
;;;633    uint16_t adc_inserted_data_read(uint32_t adc_periph, uint8_t inserted_channel)
000000  4602              MOV      r2,r0
;;;634    {
000002  460b              MOV      r3,r1
;;;635        uint32_t idata;
;;;636        /* read the data of the selected channel */
;;;637        switch(inserted_channel){
000004  b133              CBZ      r3,|L16.20|
000006  2b01              CMP      r3,#1
000008  d006              BEQ      |L16.24|
00000a  2b02              CMP      r3,#2
00000c  d006              BEQ      |L16.28|
00000e  2b03              CMP      r3,#3
000010  d108              BNE      |L16.36|
000012  e005              B        |L16.32|
                  |L16.20|
;;;638        case ADC_INSERTED_CHANNEL_0:
;;;639            /* read the data of channel 0 */
;;;640            idata = ADC_IDATA0(adc_periph);
000014  6bd1              LDR      r1,[r2,#0x3c]
;;;641            break;
000016  e007              B        |L16.40|
                  |L16.24|
;;;642        case ADC_INSERTED_CHANNEL_1:
;;;643            /* read the data of channel 1 */
;;;644            idata = ADC_IDATA1(adc_periph);
000018  6c11              LDR      r1,[r2,#0x40]
;;;645            break;
00001a  e005              B        |L16.40|
                  |L16.28|
;;;646        case ADC_INSERTED_CHANNEL_2:
;;;647            /* read the data of channel 2 */
;;;648            idata = ADC_IDATA2(adc_periph);
00001c  6c51              LDR      r1,[r2,#0x44]
;;;649            break;
00001e  e003              B        |L16.40|
                  |L16.32|
;;;650        case ADC_INSERTED_CHANNEL_3:
;;;651            /* read the data of channel 3 */
;;;652            idata = ADC_IDATA3(adc_periph);
000020  6c91              LDR      r1,[r2,#0x48]
;;;653            break;
000022  e001              B        |L16.40|
                  |L16.36|
;;;654        default:
;;;655            idata = 0U;
000024  2100              MOVS     r1,#0
;;;656            break;
000026  bf00              NOP      
                  |L16.40|
000028  bf00              NOP                            ;641
;;;657        }
;;;658        return (uint16_t)idata;
00002a  b288              UXTH     r0,r1
;;;659    }
00002c  4770              BX       lr
;;;660    
                          ENDP


                          AREA ||i.adc_inserted_software_startconv_flag_get||, CODE, READONLY, ALIGN=1

                  adc_inserted_software_startconv_flag_get PROC
;;;811    */
;;;812    FlagStatus adc_inserted_software_startconv_flag_get(uint32_t adc_periph)
000000  4601              MOV      r1,r0
;;;813    {
;;;814        FlagStatus reval = RESET;
000002  2000              MOVS     r0,#0
;;;815        if((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_SWICST)){
000004  688a              LDR      r2,[r1,#8]
000006  f4021200          AND      r2,r2,#0x200000
00000a  b102              CBZ      r2,|L17.14|
;;;816            reval = SET;
00000c  2001              MOVS     r0,#1
                  |L17.14|
;;;817        }
;;;818        return reval;
;;;819    }
00000e  4770              BX       lr
;;;820    
                          ENDP


                          AREA ||i.adc_interrupt_disable||, CODE, READONLY, ALIGN=1

                  adc_interrupt_disable PROC
;;;918    */
;;;919    void adc_interrupt_disable(uint32_t adc_periph, uint32_t adc_interrupt)
000000  f0010201          AND      r2,r1,#1
;;;920    {  
;;;921        /* disable ADC analog watchdog interrupt */
;;;922        if(0U != (adc_interrupt & ADC_INT_WDE)){  
000004  b11a              CBZ      r2,|L18.14|
;;;923            ADC_CTL0(adc_periph) &= ~(uint32_t) ADC_CTL0_WDEIE;
000006  6842              LDR      r2,[r0,#4]
000008  f0220240          BIC      r2,r2,#0x40
00000c  6042              STR      r2,[r0,#4]
                  |L18.14|
;;;924        }  
;;;925        /* disable ADC end of group conversion interrupt */
;;;926        if(0U != (adc_interrupt & ADC_INT_EOC)){      
00000e  f0010202          AND      r2,r1,#2
000012  b11a              CBZ      r2,|L18.28|
;;;927            ADC_CTL0(adc_periph) &= ~(uint32_t) ADC_CTL0_EOCIE;
000014  6842              LDR      r2,[r0,#4]
000016  f0220220          BIC      r2,r2,#0x20
00001a  6042              STR      r2,[r0,#4]
                  |L18.28|
;;;928        }  
;;;929        /* disable ADC end of inserted group conversion interrupt */
;;;930        if(0U != (adc_interrupt & ADC_INT_EOIC)){      
00001c  f0010204          AND      r2,r1,#4
000020  b11a              CBZ      r2,|L18.42|
;;;931            ADC_CTL0(adc_periph) &= ~(uint32_t) ADC_CTL0_EOICIE;
000022  6842              LDR      r2,[r0,#4]
000024  f0220280          BIC      r2,r2,#0x80
000028  6042              STR      r2,[r0,#4]
                  |L18.42|
;;;932        }
;;;933    }
00002a  4770              BX       lr
                          ENDP


                          AREA ||i.adc_interrupt_enable||, CODE, READONLY, ALIGN=1

                  adc_interrupt_enable PROC
;;;891    */
;;;892    void adc_interrupt_enable(uint32_t adc_periph, uint32_t adc_interrupt)
000000  f0010201          AND      r2,r1,#1
;;;893    {
;;;894        /* enable ADC analog watchdog interrupt */
;;;895        if(0U != (adc_interrupt & ADC_INT_WDE)){
000004  b11a              CBZ      r2,|L19.14|
;;;896            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_WDEIE;
000006  6842              LDR      r2,[r0,#4]
000008  f0420240          ORR      r2,r2,#0x40
00000c  6042              STR      r2,[r0,#4]
                  |L19.14|
;;;897        }  
;;;898        /* enable ADC end of group conversion interrupt */
;;;899        if(0U != (adc_interrupt & ADC_INT_EOC)){      
00000e  f0010202          AND      r2,r1,#2
000012  b11a              CBZ      r2,|L19.28|
;;;900            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_EOCIE;
000014  6842              LDR      r2,[r0,#4]
000016  f0420220          ORR      r2,r2,#0x20
00001a  6042              STR      r2,[r0,#4]
                  |L19.28|
;;;901        }  
;;;902        /* enable ADC end of inserted group conversion interrupt */
;;;903        if(0U != (adc_interrupt & ADC_INT_EOIC)){      
00001c  f0010204          AND      r2,r1,#4
000020  b11a              CBZ      r2,|L19.42|
;;;904            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_EOICIE;
000022  6842              LDR      r2,[r0,#4]
000024  f0420280          ORR      r2,r2,#0x80
000028  6042              STR      r2,[r0,#4]
                  |L19.42|
;;;905        }
;;;906    }
00002a  4770              BX       lr
;;;907    
                          ENDP


                          AREA ||i.adc_interrupt_flag_clear||, CODE, READONLY, ALIGN=1

                  adc_interrupt_flag_clear PROC
;;;875    */
;;;876    void adc_interrupt_flag_clear(uint32_t adc_periph, uint32_t adc_interrupt)
000000  6802              LDR      r2,[r0,#0]
;;;877    {
;;;878        ADC_STAT(adc_periph) &= ~((uint32_t)adc_interrupt);
000002  438a              BICS     r2,r2,r1
000004  6002              STR      r2,[r0,#0]
;;;879    }
000006  4770              BX       lr
;;;880    
                          ENDP


                          AREA ||i.adc_interrupt_flag_get||, CODE, READONLY, ALIGN=1

                  adc_interrupt_flag_get PROC
;;;831    */
;;;832    FlagStatus adc_interrupt_flag_get(uint32_t adc_periph, uint32_t adc_interrupt)
000000  b510              PUSH     {r4,lr}
;;;833    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;834        FlagStatus interrupt_flag = RESET;
000006  2000              MOVS     r0,#0
;;;835        uint32_t state;
;;;836        /* check the interrupt bits */
;;;837        switch(adc_interrupt){
000008  2b01              CMP      r3,#1
00000a  d004              BEQ      |L21.22|
00000c  2b02              CMP      r3,#2
00000e  d00c              BEQ      |L21.42|
000010  2b04              CMP      r3,#4
000012  d11e              BNE      |L21.82|
000014  e013              B        |L21.62|
                  |L21.22|
;;;838        case ADC_INT_FLAG_WDE:
;;;839            /* get the ADC analog watchdog interrupt bits */
;;;840            state = ADC_STAT(adc_periph) & ADC_STAT_WDE;
000016  6814              LDR      r4,[r2,#0]
000018  f0040101          AND      r1,r4,#1
;;;841            if((ADC_CTL0(adc_periph) & ADC_CTL0_WDEIE) && state){
00001c  6854              LDR      r4,[r2,#4]
00001e  f0040440          AND      r4,r4,#0x40
000022  b10c              CBZ      r4,|L21.40|
000024  b101              CBZ      r1,|L21.40|
;;;842              interrupt_flag = SET;
000026  2001              MOVS     r0,#1
                  |L21.40|
;;;843            }
;;;844            break;
000028  e014              B        |L21.84|
                  |L21.42|
;;;845        case ADC_INT_FLAG_EOC:
;;;846            /* get the ADC end of group conversion interrupt bits */
;;;847            state = ADC_STAT(adc_periph) & ADC_STAT_EOC;
00002a  6814              LDR      r4,[r2,#0]
00002c  f0040102          AND      r1,r4,#2
;;;848              if((ADC_CTL0(adc_periph) & ADC_CTL0_EOCIE) && state){
000030  6854              LDR      r4,[r2,#4]
000032  f0040420          AND      r4,r4,#0x20
000036  b10c              CBZ      r4,|L21.60|
000038  b101              CBZ      r1,|L21.60|
;;;849                interrupt_flag = SET;
00003a  2001              MOVS     r0,#1
                  |L21.60|
;;;850              }
;;;851            break;
00003c  e00a              B        |L21.84|
                  |L21.62|
;;;852        case ADC_INT_FLAG_EOIC:
;;;853            /* get the ADC end of inserted group conversion interrupt bits */
;;;854            state = ADC_STAT(adc_periph) & ADC_STAT_EOIC;
00003e  6814              LDR      r4,[r2,#0]
000040  f0040104          AND      r1,r4,#4
;;;855            if((ADC_CTL0(adc_periph) & ADC_CTL0_EOICIE) && state){
000044  6854              LDR      r4,[r2,#4]
000046  f0040480          AND      r4,r4,#0x80
00004a  b10c              CBZ      r4,|L21.80|
00004c  b101              CBZ      r1,|L21.80|
;;;856                interrupt_flag = SET;
00004e  2001              MOVS     r0,#1
                  |L21.80|
;;;857            }
;;;858            break;
000050  e000              B        |L21.84|
                  |L21.82|
;;;859        default:
;;;860            break;
000052  bf00              NOP      
                  |L21.84|
000054  bf00              NOP                            ;844
;;;861        }
;;;862        return interrupt_flag;
;;;863    }
000056  bd10              POP      {r4,pc}
;;;864    
                          ENDP


                          AREA ||i.adc_mode_config||, CODE, READONLY, ALIGN=2

                  adc_mode_config PROC
;;;109    */
;;;110    void adc_mode_config(uint32_t mode)
000000  4905              LDR      r1,|L22.24|
;;;111    {
;;;112        ADC_CTL0(ADC0) &= ~(ADC_CTL0_SYNCM);
000002  6809              LDR      r1,[r1,#0]
000004  f4212170          BIC      r1,r1,#0xf0000
000008  4a03              LDR      r2,|L22.24|
00000a  6011              STR      r1,[r2,#0]
;;;113        ADC_CTL0(ADC0) |= mode;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  4301              ORRS     r1,r1,r0
000012  6011              STR      r1,[r2,#0]
;;;114    }
000014  4770              BX       lr
;;;115    
                          ENDP

000016  0000              DCW      0x0000
                  |L22.24|
                          DCD      0x40012404

                          AREA ||i.adc_regular_channel_config||, CODE, READONLY, ALIGN=1

                  adc_regular_channel_config PROC
;;;360    */
;;;361    void adc_regular_channel_config(uint32_t adc_periph, uint8_t rank, uint8_t adc_channel, uint32_t sample_time)
000000  b5f0              PUSH     {r4-r7,lr}
;;;362    {
000002  461d              MOV      r5,r3
;;;363        uint32_t rsq,sampt;
;;;364        
;;;365        /* ADC regular sequence config */
;;;366        if(rank < ADC_REGULAR_CHANNEL_RANK_SIX){
000004  2906              CMP      r1,#6
000006  da0c              BGE      |L23.34|
;;;367            /* the regular group sequence rank is smaller than six */
;;;368            rsq = ADC_RSQ2(adc_periph);
000008  6b43              LDR      r3,[r0,#0x34]
;;;369            rsq &=  ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank)));
00000a  eb010781          ADD      r7,r1,r1,LSL #2
00000e  261f              MOVS     r6,#0x1f
000010  40be              LSLS     r6,r6,r7
000012  43b3              BICS     r3,r3,r6
;;;370            /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
;;;371            rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*rank));
000014  eb010681          ADD      r6,r1,r1,LSL #2
000018  fa02f606          LSL      r6,r2,r6
00001c  4333              ORRS     r3,r3,r6
;;;372            ADC_RSQ2(adc_periph) = rsq;
00001e  6343              STR      r3,[r0,#0x34]
000020  e022              B        |L23.104|
                  |L23.34|
;;;373        }else if(rank < ADC_REGULAR_CHANNEL_RANK_TWELVE){
000022  290c              CMP      r1,#0xc
000024  da0e              BGE      |L23.68|
;;;374            /* the regular group sequence rank is smaller than twelve */
;;;375            rsq = ADC_RSQ1(adc_periph);
000026  6b03              LDR      r3,[r0,#0x30]
;;;376            rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX))));
000028  1f8e              SUBS     r6,r1,#6
00002a  eb060786          ADD      r7,r6,r6,LSL #2
00002e  261f              MOVS     r6,#0x1f
000030  40be              LSLS     r6,r6,r7
000032  43b3              BICS     r3,r3,r6
;;;377            /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
;;;378            rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_SIX)));
000034  1f8e              SUBS     r6,r1,#6
000036  eb060686          ADD      r6,r6,r6,LSL #2
00003a  fa02f606          LSL      r6,r2,r6
00003e  4333              ORRS     r3,r3,r6
;;;379            ADC_RSQ1(adc_periph) = rsq;
000040  6303              STR      r3,[r0,#0x30]
000042  e011              B        |L23.104|
                  |L23.68|
;;;380        }else if(rank < ADC_REGULAR_CHANNEL_RANK_SIXTEEN){
000044  2910              CMP      r1,#0x10
000046  da0f              BGE      |L23.104|
;;;381            /* the regular group sequence rank is smaller than sixteen */
;;;382            rsq = ADC_RSQ0(adc_periph);
000048  6ac3              LDR      r3,[r0,#0x2c]
;;;383            rsq &= ~((uint32_t)(ADC_RSQX_RSQN << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE))));
00004a  f1a1060c          SUB      r6,r1,#0xc
00004e  eb060786          ADD      r7,r6,r6,LSL #2
000052  261f              MOVS     r6,#0x1f
000054  40be              LSLS     r6,r6,r7
000056  43b3              BICS     r3,r3,r6
;;;384            /* the channel number is written to these bits to select a channel as the nth conversion in the regular channel group */
;;;385            rsq |= ((uint32_t)adc_channel << (ADC_REGULAR_CHANNEL_RANK_LENGTH*(rank-ADC_REGULAR_CHANNEL_RANK_TWELVE)));
000058  f1a1060c          SUB      r6,r1,#0xc
00005c  eb060686          ADD      r6,r6,r6,LSL #2
000060  fa02f606          LSL      r6,r2,r6
000064  4333              ORRS     r3,r3,r6
;;;386            ADC_RSQ0(adc_periph) = rsq;
000066  62c3              STR      r3,[r0,#0x2c]
                  |L23.104|
;;;387        }else{
;;;388        }
;;;389        
;;;390        /* ADC sampling time config */
;;;391        if(adc_channel < ADC_CHANNEL_SAMPLE_TEN){
000068  2a0a              CMP      r2,#0xa
00006a  da0c              BGE      |L23.134|
;;;392            /* the regular group sequence rank is smaller than ten */
;;;393            sampt = ADC_SAMPT1(adc_periph);
00006c  6904              LDR      r4,[r0,#0x10]
;;;394            sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel)));
00006e  eb020742          ADD      r7,r2,r2,LSL #1
000072  2607              MOVS     r6,#7
000074  40be              LSLS     r6,r6,r7
000076  43b4              BICS     r4,r4,r6
;;;395            /* channel sample time set*/
;;;396            sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*adc_channel));
000078  eb020642          ADD      r6,r2,r2,LSL #1
00007c  fa05f606          LSL      r6,r5,r6
000080  4334              ORRS     r4,r4,r6
;;;397            ADC_SAMPT1(adc_periph) = sampt;
000082  6104              STR      r4,[r0,#0x10]
000084  e011              B        |L23.170|
                  |L23.134|
;;;398        }else if(adc_channel < ADC_CHANNEL_SAMPLE_EIGHTEEN){
000086  2a12              CMP      r2,#0x12
000088  da0f              BGE      |L23.170|
;;;399            /* the regular group sequence rank is smaller than eighteen */
;;;400            sampt = ADC_SAMPT0(adc_periph);
00008a  68c4              LDR      r4,[r0,#0xc]
;;;401            sampt &= ~((uint32_t)(ADC_SAMPTX_SPTN << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN))));
00008c  f1a2060a          SUB      r6,r2,#0xa
000090  eb060746          ADD      r7,r6,r6,LSL #1
000094  2607              MOVS     r6,#7
000096  40be              LSLS     r6,r6,r7
000098  43b4              BICS     r4,r4,r6
;;;402            /* channel sample time set*/
;;;403            sampt |= (uint32_t)(sample_time << (ADC_CHANNEL_SAMPLE_LENGTH*(adc_channel-ADC_CHANNEL_SAMPLE_TEN)));
00009a  f1a2060a          SUB      r6,r2,#0xa
00009e  eb060646          ADD      r6,r6,r6,LSL #1
0000a2  fa05f606          LSL      r6,r5,r6
0000a6  4334              ORRS     r4,r4,r6
;;;404            ADC_SAMPT0(adc_periph) = sampt;
0000a8  60c4              STR      r4,[r0,#0xc]
                  |L23.170|
;;;405        }else{
;;;406        }
;;;407    }
0000aa  bdf0              POP      {r4-r7,pc}
;;;408    
                          ENDP


                          AREA ||i.adc_regular_data_read||, CODE, READONLY, ALIGN=1

                  adc_regular_data_read PROC
;;;615    */
;;;616    uint16_t adc_regular_data_read(uint32_t adc_periph)
000000  4601              MOV      r1,r0
;;;617    {
;;;618        return (uint16_t)(ADC_RDATA(adc_periph));
000002  6cc8              LDR      r0,[r1,#0x4c]
000004  b280              UXTH     r0,r0
;;;619    }
000006  4770              BX       lr
;;;620    
                          ENDP


                          AREA ||i.adc_regular_software_startconv_flag_get||, CODE, READONLY, ALIGN=1

                  adc_regular_software_startconv_flag_get PROC
;;;795    */
;;;796    FlagStatus adc_regular_software_startconv_flag_get(uint32_t adc_periph)
000000  4601              MOV      r1,r0
;;;797    {
;;;798        FlagStatus reval = RESET;
000002  2000              MOVS     r0,#0
;;;799        if((uint32_t)RESET != (ADC_CTL1(adc_periph) & ADC_CTL1_SWRCST)){
000004  688a              LDR      r2,[r1,#8]
000006  f4020280          AND      r2,r2,#0x400000
00000a  b102              CBZ      r2,|L25.14|
;;;800            reval = SET;
00000c  2001              MOVS     r0,#1
                  |L25.14|
;;;801        }
;;;802        return reval;
;;;803    }
00000e  4770              BX       lr
;;;804    
                          ENDP


                          AREA ||i.adc_software_trigger_enable||, CODE, READONLY, ALIGN=1

                  adc_software_trigger_enable PROC
;;;596    */
;;;597    void adc_software_trigger_enable(uint32_t adc_periph, uint8_t adc_channel_group)
000000  f0010201          AND      r2,r1,#1
;;;598    {
;;;599        if(0U != (adc_channel_group & ADC_REGULAR_CHANNEL)){
000004  b11a              CBZ      r2,|L26.14|
;;;600            /* enable ADC regular channel group software trigger */
;;;601            ADC_CTL1(adc_periph) |= ADC_CTL1_SWRCST;
000006  6882              LDR      r2,[r0,#8]
000008  f4420280          ORR      r2,r2,#0x400000
00000c  6082              STR      r2,[r0,#8]
                  |L26.14|
;;;602        }
;;;603        if(0U != (adc_channel_group & ADC_INSERTED_CHANNEL)){
00000e  f0010202          AND      r2,r1,#2
000012  b11a              CBZ      r2,|L26.28|
;;;604            /* enable ADC inserted channel group software trigger */
;;;605            ADC_CTL1(adc_periph) |= ADC_CTL1_SWICST;
000014  6882              LDR      r2,[r0,#8]
000016  f4421200          ORR      r2,r2,#0x200000
00001a  6082              STR      r2,[r0,#8]
                  |L26.28|
;;;606        }
;;;607    }
00001c  4770              BX       lr
;;;608    
                          ENDP


                          AREA ||i.adc_special_function_config||, CODE, READONLY, ALIGN=1

                  adc_special_function_config PROC
;;;127    */
;;;128    void adc_special_function_config(uint32_t adc_periph, uint32_t function, ControlStatus newvalue)
000000  b1aa              CBZ      r2,|L27.46|
;;;129    {
;;;130        if(newvalue){
;;;131            if(0U != (function & ADC_SCAN_MODE)){
000002  f4017380          AND      r3,r1,#0x100
000006  b11b              CBZ      r3,|L27.16|
;;;132                /* enable scan mode */
;;;133                ADC_CTL0(adc_periph) |= ADC_SCAN_MODE;
000008  6843              LDR      r3,[r0,#4]
00000a  f4437380          ORR      r3,r3,#0x100
00000e  6043              STR      r3,[r0,#4]
                  |L27.16|
;;;134            }
;;;135            if(0U != (function & ADC_INSERTED_CHANNEL_AUTO)){
000010  f4016380          AND      r3,r1,#0x400
000014  b11b              CBZ      r3,|L27.30|
;;;136                /* enable inserted channel group convert automatically */
;;;137                ADC_CTL0(adc_periph) |= ADC_INSERTED_CHANNEL_AUTO;
000016  6843              LDR      r3,[r0,#4]
000018  f4436380          ORR      r3,r3,#0x400
00001c  6043              STR      r3,[r0,#4]
                  |L27.30|
;;;138            } 
;;;139            if(0U != (function & ADC_CONTINUOUS_MODE)){
00001e  f0010302          AND      r3,r1,#2
000022  b1cb              CBZ      r3,|L27.88|
;;;140                /* enable continuous mode */
;;;141                ADC_CTL1(adc_periph) |= ADC_CONTINUOUS_MODE;
000024  6883              LDR      r3,[r0,#8]
000026  f0430302          ORR      r3,r3,#2
00002a  6083              STR      r3,[r0,#8]
00002c  e014              B        |L27.88|
                  |L27.46|
;;;142            }        
;;;143        }else{
;;;144            if(0U != (function & ADC_SCAN_MODE)){
00002e  f4017380          AND      r3,r1,#0x100
000032  b11b              CBZ      r3,|L27.60|
;;;145                /* disable scan mode */
;;;146                ADC_CTL0(adc_periph) &= ~ADC_SCAN_MODE;
000034  6843              LDR      r3,[r0,#4]
000036  f4237380          BIC      r3,r3,#0x100
00003a  6043              STR      r3,[r0,#4]
                  |L27.60|
;;;147            }
;;;148            if(0U != (function & ADC_INSERTED_CHANNEL_AUTO)){
00003c  f4016380          AND      r3,r1,#0x400
000040  b11b              CBZ      r3,|L27.74|
;;;149                /* disable inserted channel group convert automatically */
;;;150                ADC_CTL0(adc_periph) &= ~ADC_INSERTED_CHANNEL_AUTO;
000042  6843              LDR      r3,[r0,#4]
000044  f4236380          BIC      r3,r3,#0x400
000048  6043              STR      r3,[r0,#4]
                  |L27.74|
;;;151            } 
;;;152            if(0U != (function & ADC_CONTINUOUS_MODE)){
00004a  f0010302          AND      r3,r1,#2
00004e  b11b              CBZ      r3,|L27.88|
;;;153                /* disable continuous mode */
;;;154                ADC_CTL1(adc_periph) &= ~ADC_CONTINUOUS_MODE;
000050  6883              LDR      r3,[r0,#8]
000052  f0230302          BIC      r3,r3,#2
000056  6083              STR      r3,[r0,#8]
                  |L27.88|
;;;155            }       
;;;156        }
;;;157    }
000058  4770              BX       lr
;;;158    
                          ENDP


                          AREA ||i.adc_sync_mode_convert_value_read||, CODE, READONLY, ALIGN=2

                  adc_sync_mode_convert_value_read PROC
;;;666    */
;;;667    uint32_t adc_sync_mode_convert_value_read(void)
000000  4801              LDR      r0,|L28.8|
;;;668    {
;;;669        /* return conversion value */
;;;670        return ADC_RDATA(ADC0);
000002  6800              LDR      r0,[r0,#0]
;;;671    }
000004  4770              BX       lr
;;;672    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x4001244c

                          AREA ||i.adc_tempsensor_vrefint_disable||, CODE, READONLY, ALIGN=2

                  adc_tempsensor_vrefint_disable PROC
;;;243    */
;;;244    void adc_tempsensor_vrefint_disable(void)
000000  4803              LDR      r0,|L29.16|
;;;245    {
;;;246        /* disable the temperature sensor and Vrefint channel */
;;;247        ADC_CTL1(ADC0) &= ~ADC_CTL1_TSVREN;
000002  6800              LDR      r0,[r0,#0]
000004  f4200000          BIC      r0,r0,#0x800000
000008  4901              LDR      r1,|L29.16|
00000a  6008              STR      r0,[r1,#0]
;;;248    }
00000c  4770              BX       lr
;;;249    
                          ENDP

00000e  0000              DCW      0x0000
                  |L29.16|
                          DCD      0x40012408

                          AREA ||i.adc_tempsensor_vrefint_enable||, CODE, READONLY, ALIGN=2

                  adc_tempsensor_vrefint_enable PROC
;;;231    */
;;;232    void adc_tempsensor_vrefint_enable(void)
000000  4803              LDR      r0,|L30.16|
;;;233    {
;;;234        /* enable the temperature sensor and Vrefint channel */
;;;235        ADC_CTL1(ADC0) |= ADC_CTL1_TSVREN;
000002  6800              LDR      r0,[r0,#0]
000004  f4400000          ORR      r0,r0,#0x800000
000008  4901              LDR      r1,|L30.16|
00000a  6008              STR      r0,[r1,#0]
;;;236    }
00000c  4770              BX       lr
;;;237    
                          ENDP

00000e  0000              DCW      0x0000
                  |L30.16|
                          DCD      0x40012408

                          AREA ||i.adc_watchdog_disable||, CODE, READONLY, ALIGN=2

                  adc_watchdog_disable PROC
;;;729    */
;;;730    void adc_watchdog_disable(uint32_t adc_periph)
000000  6841              LDR      r1,[r0,#4]
;;;731    {
;;;732        ADC_CTL0(adc_periph) &= (uint32_t)~(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN | ADC_CTL0_WDSC | ADC_CTL0_WDCHSEL);
000002  4a02              LDR      r2,|L31.12|
000004  4011              ANDS     r1,r1,r2
000006  6041              STR      r1,[r0,#4]
;;;733    }
000008  4770              BX       lr
;;;734    
                          ENDP

00000a  0000              DCW      0x0000
                  |L31.12|
                          DCD      0xff3ffde0

                          AREA ||i.adc_watchdog_group_channel_enable||, CODE, READONLY, ALIGN=2

                  adc_watchdog_group_channel_enable PROC
;;;701    */
;;;702    void adc_watchdog_group_channel_enable(uint32_t adc_periph, uint8_t adc_channel_group)
000000  6842              LDR      r2,[r0,#4]
;;;703    {
;;;704        ADC_CTL0(adc_periph) &= (uint32_t)~(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN | ADC_CTL0_WDSC);
000002  4b0e              LDR      r3,|L32.60|
000004  401a              ANDS     r2,r2,r3
000006  6042              STR      r2,[r0,#4]
;;;705        /* select the group */
;;;706        switch(adc_channel_group){
000008  2901              CMP      r1,#1
00000a  d004              BEQ      |L32.22|
00000c  2902              CMP      r1,#2
00000e  d007              BEQ      |L32.32|
000010  2903              CMP      r1,#3
000012  d10f              BNE      |L32.52|
000014  e009              B        |L32.42|
                  |L32.22|
;;;707        case ADC_REGULAR_CHANNEL:
;;;708            /* regular channel analog watchdog enable */
;;;709            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_RWDEN;
000016  6842              LDR      r2,[r0,#4]
000018  f4420200          ORR      r2,r2,#0x800000
00001c  6042              STR      r2,[r0,#4]
;;;710            break;
00001e  e00a              B        |L32.54|
                  |L32.32|
;;;711        case ADC_INSERTED_CHANNEL:
;;;712            /* inserted channel analog watchdog enable */
;;;713            ADC_CTL0(adc_periph) |= (uint32_t) ADC_CTL0_IWDEN;
000020  6842              LDR      r2,[r0,#4]
000022  f4420280          ORR      r2,r2,#0x400000
000026  6042              STR      r2,[r0,#4]
;;;714            break;
000028  e005              B        |L32.54|
                  |L32.42|
;;;715        case ADC_REGULAR_INSERTED_CHANNEL:
;;;716            /* regular and inserted channel analog watchdog enable */
;;;717            ADC_CTL0(adc_periph) |= (uint32_t)(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN);
00002a  6842              LDR      r2,[r0,#4]
00002c  f4420240          ORR      r2,r2,#0xc00000
000030  6042              STR      r2,[r0,#4]
;;;718            break;
000032  e000              B        |L32.54|
                  |L32.52|
;;;719        default:
;;;720            break;
000034  bf00              NOP      
                  |L32.54|
000036  bf00              NOP                            ;710
;;;721        }
;;;722    }
000038  4770              BX       lr
;;;723    
                          ENDP

00003a  0000              DCW      0x0000
                  |L32.60|
                          DCD      0xff3ffdff

                          AREA ||i.adc_watchdog_single_channel_enable||, CODE, READONLY, ALIGN=2

                  adc_watchdog_single_channel_enable PROC
;;;682    */
;;;683    void adc_watchdog_single_channel_enable(uint32_t adc_periph, uint8_t adc_channel)
000000  6842              LDR      r2,[r0,#4]
;;;684    {
;;;685        ADC_CTL0(adc_periph) &= (uint32_t)~(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN | ADC_CTL0_WDSC | ADC_CTL0_WDCHSEL);
000002  4b05              LDR      r3,|L33.24|
000004  401a              ANDS     r2,r2,r3
000006  6042              STR      r2,[r0,#4]
;;;686        /* analog watchdog channel select */
;;;687        ADC_CTL0(adc_periph) |= (uint32_t)adc_channel;
000008  6842              LDR      r2,[r0,#4]
00000a  430a              ORRS     r2,r2,r1
00000c  6042              STR      r2,[r0,#4]
;;;688        ADC_CTL0(adc_periph) |= (uint32_t)(ADC_CTL0_RWDEN | ADC_CTL0_IWDEN | ADC_CTL0_WDSC);
00000e  6842              LDR      r2,[r0,#4]
000010  4b02              LDR      r3,|L33.28|
000012  431a              ORRS     r2,r2,r3
000014  6042              STR      r2,[r0,#4]
;;;689    }
000016  4770              BX       lr
;;;690    
                          ENDP

                  |L33.24|
                          DCD      0xff3ffde0
                  |L33.28|
                          DCD      0x00c00200

                          AREA ||i.adc_watchdog_threshold_config||, CODE, READONLY, ALIGN=1

                  adc_watchdog_threshold_config PROC
;;;742    */
;;;743    void adc_watchdog_threshold_config(uint32_t adc_periph, uint16_t low_threshold, uint16_t high_threshold)
000000  f3c1030b          UBFX     r3,r1,#0,#12
;;;744    {
;;;745        ADC_WDLT(adc_periph) = (uint32_t)WDLT_WDLT(low_threshold);
000004  6283              STR      r3,[r0,#0x28]
;;;746        ADC_WDHT(adc_periph) = (uint32_t)WDHT_WDHT(high_threshold);
000006  f3c2030b          UBFX     r3,r2,#0,#12
00000a  6243              STR      r3,[r0,#0x24]
;;;747    }
00000c  4770              BX       lr
;;;748    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_adc_c_725e678f____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_adc_c_725e678f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_adc_c_725e678f____REVSH|
#line 128
|__asm___14_gd32f10x_adc_c_725e678f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
