; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_usart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_usart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_usart.crf Libraries\src\gd32f10x_usart.c]
                          THUMB

                          AREA ||i.usart_address_config||, CODE, READONLY, ALIGN=1

                  usart_address_config PROC
;;;271    */
;;;272    void usart_address_config(uint32_t usart_periph, uint8_t addr)
000000  6902              LDR      r2,[r0,#0x10]
;;;273    {
;;;274        USART_CTL1(usart_periph) &= ~(USART_CTL1_ADDR);
000002  f022020f          BIC      r2,r2,#0xf
000006  6102              STR      r2,[r0,#0x10]
;;;275        USART_CTL1(usart_periph) |= (USART_CTL1_ADDR & addr);
000008  6902              LDR      r2,[r0,#0x10]
00000a  f001030f          AND      r3,r1,#0xf
00000e  431a              ORRS     r2,r2,r3
000010  6102              STR      r2,[r0,#0x10]
;;;276    }
000012  4770              BX       lr
;;;277    
                          ENDP


                          AREA ||i.usart_baudrate_set||, CODE, READONLY, ALIGN=2

                  usart_baudrate_set PROC
;;;86     */ 
;;;87     void usart_baudrate_set(uint32_t usart_periph, uint32_t baudval)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;88     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;89         uint32_t uclk=0U, intdiv=0U, fradiv=0U, udiv=0U;
000008  2700              MOVS     r7,#0
00000a  46b8              MOV      r8,r7
00000c  46b9              MOV      r9,r7
00000e  2600              MOVS     r6,#0
;;;90         switch(usart_periph){
000010  491d              LDR      r1,|L2.136|
000012  1a60              SUBS     r0,r4,r1
000014  428c              CMP      r4,r1
000016  d01c              BEQ      |L2.82|
000018  dc06              BGT      |L2.40|
00001a  481c              LDR      r0,|L2.140|
00001c  4420              ADD      r0,r0,r4
00001e  b170              CBZ      r0,|L2.62|
000020  f5b06f80          CMP      r0,#0x400
000024  d11f              BNE      |L2.102|
000026  e00f              B        |L2.72|
                  |L2.40|
000028  f5b06f80          CMP      r0,#0x400
00002c  d016              BEQ      |L2.92|
00002e  f5b04f6c          CMP      r0,#0xec00
000032  d118              BNE      |L2.102|
;;;91              /* get clock frequency */
;;;92         case USART0:
;;;93              /* get USART0 clock */
;;;94              uclk=rcu_clock_freq_get(CK_APB2);
000034  2003              MOVS     r0,#3
000036  f7fffffe          BL       rcu_clock_freq_get
00003a  4607              MOV      r7,r0
;;;95              break;
00003c  e014              B        |L2.104|
                  |L2.62|
;;;96         case USART1:
;;;97              /* get USART1 clock */
;;;98              uclk=rcu_clock_freq_get(CK_APB1);
00003e  2002              MOVS     r0,#2
000040  f7fffffe          BL       rcu_clock_freq_get
000044  4607              MOV      r7,r0
;;;99              break;
000046  e00f              B        |L2.104|
                  |L2.72|
;;;100        case USART2:
;;;101             /* get USART2 clock */
;;;102             uclk=rcu_clock_freq_get(CK_APB1);
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       rcu_clock_freq_get
00004e  4607              MOV      r7,r0
;;;103             break;
000050  e00a              B        |L2.104|
                  |L2.82|
;;;104        case UART3:
;;;105             /* get UART3 clock */
;;;106             uclk=rcu_clock_freq_get(CK_APB1);
000052  2002              MOVS     r0,#2
000054  f7fffffe          BL       rcu_clock_freq_get
000058  4607              MOV      r7,r0
;;;107             break;
00005a  e005              B        |L2.104|
                  |L2.92|
;;;108        case UART4:
;;;109             /* get UART4 clock */
;;;110             uclk=rcu_clock_freq_get(CK_APB1);
00005c  2002              MOVS     r0,#2
00005e  f7fffffe          BL       rcu_clock_freq_get
000062  4607              MOV      r7,r0
;;;111             break;  
000064  e000              B        |L2.104|
                  |L2.102|
;;;112        default:
;;;113             break;
000066  bf00              NOP      
                  |L2.104|
000068  bf00              NOP                            ;95
;;;114        }
;;;115        /* oversampling by 16, configure the value of USART_BAUD */
;;;116        udiv = (uclk+baudval/2U)/baudval;
00006a  eb070055          ADD      r0,r7,r5,LSR #1
00006e  fbb0f6f5          UDIV     r6,r0,r5
;;;117        intdiv = udiv & (0x0000fff0U);
000072  f64f70f0          MOV      r0,#0xfff0
000076  ea060800          AND      r8,r6,r0
;;;118        fradiv = udiv & (0x0000000fU);
00007a  f006090f          AND      r9,r6,#0xf
;;;119        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
00007e  ea480009          ORR      r0,r8,r9
000082  60a0              STR      r0,[r4,#8]
;;;120    }
000084  e8bd87f0          POP      {r4-r10,pc}
;;;121    
                          ENDP

                  |L2.136|
                          DCD      0x40004c00
                  |L2.140|
                          DCD      0xbfffbc00

                          AREA ||i.usart_data_receive||, CODE, READONLY, ALIGN=1

                  usart_data_receive PROC
;;;259    */
;;;260    uint16_t usart_data_receive(uint32_t usart_periph)
000000  4601              MOV      r1,r0
;;;261    {
;;;262        return (uint16_t)(GET_BITS(USART_DATA(usart_periph), 0U, 8U));
000002  6848              LDR      r0,[r1,#4]
000004  f3c00008          UBFX     r0,r0,#0,#9
;;;263    }
000008  4770              BX       lr
;;;264    
                          ENDP


                          AREA ||i.usart_data_transmit||, CODE, READONLY, ALIGN=1

                  usart_data_transmit PROC
;;;248    */
;;;249    void usart_data_transmit(uint32_t usart_periph, uint16_t data)
000000  f3c10208          UBFX     r2,r1,#0,#9
;;;250    {
;;;251        USART_DATA(usart_periph) = USART_DATA_DATA & data;
000004  6042              STR      r2,[r0,#4]
;;;252    }
000006  4770              BX       lr
;;;253    
                          ENDP


                          AREA ||i.usart_deinit||, CODE, READONLY, ALIGN=2

                  usart_deinit PROC
;;;46     */
;;;47     void usart_deinit(uint32_t usart_periph)
000000  b510              PUSH     {r4,lr}
;;;48     {
000002  4604              MOV      r4,r0
;;;49         switch(usart_periph){
000004  4920              LDR      r1,|L5.136|
000006  1a60              SUBS     r0,r4,r1
000008  428c              CMP      r4,r1
00000a  d028              BEQ      |L5.94|
00000c  dc06              BGT      |L5.28|
00000e  481f              LDR      r0,|L5.140|
000010  4420              ADD      r0,r0,r4
000012  b190              CBZ      r0,|L5.58|
000014  f5b06f80          CMP      r0,#0x400
000018  d133              BNE      |L5.130|
00001a  e017              B        |L5.76|
                  |L5.28|
00001c  f5b06f80          CMP      r0,#0x400
000020  d026              BEQ      |L5.112|
000022  f5b04f6c          CMP      r0,#0xec00
000026  d12c              BNE      |L5.130|
;;;50         case USART0:
;;;51             /* reset USART0 */
;;;52             rcu_periph_reset_enable(RCU_USART0RST);
000028  f240300e          MOV      r0,#0x30e
00002c  f7fffffe          BL       rcu_periph_reset_enable
;;;53             rcu_periph_reset_disable(RCU_USART0RST);
000030  f240300e          MOV      r0,#0x30e
000034  f7fffffe          BL       rcu_periph_reset_disable
;;;54             break;
000038  e024              B        |L5.132|
                  |L5.58|
;;;55         case USART1:
;;;56             /* reset USART1 */
;;;57             rcu_periph_reset_enable(RCU_USART1RST);
00003a  f2404011          MOV      r0,#0x411
00003e  f7fffffe          BL       rcu_periph_reset_enable
;;;58             rcu_periph_reset_disable(RCU_USART1RST);
000042  f2404011          MOV      r0,#0x411
000046  f7fffffe          BL       rcu_periph_reset_disable
;;;59             break;
00004a  e01b              B        |L5.132|
                  |L5.76|
;;;60         case USART2:
;;;61             /* reset USART2 */
;;;62             rcu_periph_reset_enable(RCU_USART2RST);
00004c  f2404012          MOV      r0,#0x412
000050  f7fffffe          BL       rcu_periph_reset_enable
;;;63             rcu_periph_reset_disable(RCU_USART2RST);
000054  f2404012          MOV      r0,#0x412
000058  f7fffffe          BL       rcu_periph_reset_disable
;;;64             break;
00005c  e012              B        |L5.132|
                  |L5.94|
;;;65         case UART3:
;;;66             /* reset UART3 */
;;;67             rcu_periph_reset_enable(RCU_UART3RST);
00005e  f2404013          MOV      r0,#0x413
000062  f7fffffe          BL       rcu_periph_reset_enable
;;;68             rcu_periph_reset_disable(RCU_UART3RST);
000066  f2404013          MOV      r0,#0x413
00006a  f7fffffe          BL       rcu_periph_reset_disable
;;;69             break;
00006e  e009              B        |L5.132|
                  |L5.112|
;;;70         case UART4:
;;;71             /* reset UART4 */
;;;72             rcu_periph_reset_enable(RCU_UART4RST);
000070  f2404014          MOV      r0,#0x414
000074  f7fffffe          BL       rcu_periph_reset_enable
;;;73             rcu_periph_reset_disable(RCU_UART4RST);
000078  f2404014          MOV      r0,#0x414
00007c  f7fffffe          BL       rcu_periph_reset_disable
;;;74             break;
000080  e000              B        |L5.132|
                  |L5.130|
;;;75         default:
;;;76             break;
000082  bf00              NOP      
                  |L5.132|
000084  bf00              NOP                            ;54
;;;77         }
;;;78     }
000086  bd10              POP      {r4,pc}
;;;79     
                          ENDP

                  |L5.136|
                          DCD      0x40004c00
                  |L5.140|
                          DCD      0xbfffbc00

                          AREA ||i.usart_disable||, CODE, READONLY, ALIGN=1

                  usart_disable PROC
;;;194    */
;;;195    void usart_disable(uint32_t usart_periph)
000000  68c1              LDR      r1,[r0,#0xc]
;;;196    {
;;;197        USART_CTL0(usart_periph) &= ~(USART_CTL0_UEN);
000002  f4215100          BIC      r1,r1,#0x2000
000006  60c1              STR      r1,[r0,#0xc]
;;;198    }
000008  4770              BX       lr
;;;199    
                          ENDP


                          AREA ||i.usart_dma_receive_config||, CODE, READONLY, ALIGN=1

                  usart_dma_receive_config PROC
;;;599    */
;;;600    void usart_dma_receive_config(uint32_t usart_periph, uint32_t dmacmd)
000000  460a              MOV      r2,r1
;;;601    {
;;;602        uint32_t ctl = 0U;
000002  2100              MOVS     r1,#0
;;;603        
;;;604        ctl = USART_CTL2(usart_periph);
000004  6941              LDR      r1,[r0,#0x14]
;;;605        ctl &= ~USART_CTL2_DENR;
000006  f0210140          BIC      r1,r1,#0x40
;;;606        ctl |= dmacmd;
00000a  4311              ORRS     r1,r1,r2
;;;607        /* configure DMA reception */
;;;608        USART_CTL2(usart_periph) = ctl;
00000c  6141              STR      r1,[r0,#0x14]
;;;609    }
00000e  4770              BX       lr
;;;610    
                          ENDP


                          AREA ||i.usart_dma_transmit_config||, CODE, READONLY, ALIGN=1

                  usart_dma_transmit_config PROC
;;;620    */
;;;621    void usart_dma_transmit_config(uint32_t usart_periph, uint32_t dmacmd)
000000  460a              MOV      r2,r1
;;;622    {
;;;623        uint32_t ctl = 0U;
000002  2100              MOVS     r1,#0
;;;624        
;;;625        ctl = USART_CTL2(usart_periph);
000004  6941              LDR      r1,[r0,#0x14]
;;;626        ctl &= ~USART_CTL2_DENT;
000006  f0210180          BIC      r1,r1,#0x80
;;;627        ctl |= dmacmd;
00000a  4311              ORRS     r1,r1,r2
;;;628        /* configure DMA transmission */
;;;629        USART_CTL2(usart_periph) = ctl;
00000c  6141              STR      r1,[r0,#0x14]
;;;630    }
00000e  4770              BX       lr
;;;631    
                          ENDP


                          AREA ||i.usart_enable||, CODE, READONLY, ALIGN=1

                  usart_enable PROC
;;;183    */
;;;184    void usart_enable(uint32_t usart_periph)
000000  68c1              LDR      r1,[r0,#0xc]
;;;185    {
;;;186        USART_CTL0(usart_periph) |= USART_CTL0_UEN;
000002  f4415100          ORR      r1,r1,#0x2000
000006  60c1              STR      r1,[r0,#0xc]
;;;187    }
000008  4770              BX       lr
;;;188    
                          ENDP


                          AREA ||i.usart_flag_clear||, CODE, READONLY, ALIGN=1

                  usart_flag_clear PROC
;;;670    */
;;;671    void usart_flag_clear(uint32_t usart_periph, usart_flag_enum flag)
000000  b510              PUSH     {r4,lr}
;;;672    {
;;;673        USART_REG_VAL(usart_periph, flag) &= ~BIT(USART_BIT_POS(flag));
000002  eb001291          ADD      r2,r0,r1,LSR #6
000006  6812              LDR      r2,[r2,#0]
000008  f001041f          AND      r4,r1,#0x1f
00000c  2301              MOVS     r3,#1
00000e  40a3              LSLS     r3,r3,r4
000010  439a              BICS     r2,r2,r3
000012  eb001391          ADD      r3,r0,r1,LSR #6
000016  601a              STR      r2,[r3,#0]
;;;674    }
000018  bd10              POP      {r4,pc}
;;;675    
                          ENDP


                          AREA ||i.usart_flag_get||, CODE, READONLY, ALIGN=1

                  usart_flag_get PROC
;;;649    */
;;;650    FlagStatus usart_flag_get(uint32_t usart_periph, usart_flag_enum flag)
000000  b510              PUSH     {r4,lr}
;;;651    {
000002  4602              MOV      r2,r0
;;;652        if(RESET != (USART_REG_VAL(usart_periph, flag) & BIT(USART_BIT_POS(flag)))){
000004  eb021091          ADD      r0,r2,r1,LSR #6
000008  6800              LDR      r0,[r0,#0]
00000a  f001041f          AND      r4,r1,#0x1f
00000e  2301              MOVS     r3,#1
000010  40a3              LSLS     r3,r3,r4
000012  4018              ANDS     r0,r0,r3
000014  b108              CBZ      r0,|L11.26|
;;;653            return SET;
000016  2001              MOVS     r0,#1
                  |L11.24|
;;;654        }else{
;;;655            return RESET;
;;;656        }
;;;657    }
000018  bd10              POP      {r4,pc}
                  |L11.26|
00001a  2000              MOVS     r0,#0                 ;655
00001c  e7fc              B        |L11.24|
;;;658    
                          ENDP


                          AREA ||i.usart_guard_time_config||, CODE, READONLY, ALIGN=1

                  usart_guard_time_config PROC
;;;446    */
;;;447    void usart_guard_time_config(uint32_t usart_periph,uint32_t gaut)
000000  6982              LDR      r2,[r0,#0x18]
;;;448    {
;;;449        USART_GP(usart_periph) &= ~(USART_GP_GUAT);
000002  f422427f          BIC      r2,r2,#0xff00
000006  6182              STR      r2,[r0,#0x18]
;;;450        USART_GP(usart_periph) |= (USART_GP_GUAT & ((gaut)<<8));
000008  6982              LDR      r2,[r0,#0x18]
00000a  f44f437f          MOV      r3,#0xff00
00000e  ea032301          AND      r3,r3,r1,LSL #8
000012  431a              ORRS     r2,r2,r3
000014  6182              STR      r2,[r0,#0x18]
;;;451    }
000016  4770              BX       lr
;;;452    
                          ENDP


                          AREA ||i.usart_halfduplex_disable||, CODE, READONLY, ALIGN=1

                  usart_halfduplex_disable PROC
;;;381    */
;;;382    void usart_halfduplex_disable(uint32_t usart_periph)
000000  6941              LDR      r1,[r0,#0x14]
;;;383    {  
;;;384        USART_CTL2(usart_periph) &= ~(USART_CTL2_HDEN);
000002  f0210108          BIC      r1,r1,#8
000006  6141              STR      r1,[r0,#0x14]
;;;385    }
000008  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.usart_halfduplex_enable||, CODE, READONLY, ALIGN=1

                  usart_halfduplex_enable PROC
;;;370    */
;;;371    void usart_halfduplex_enable(uint32_t usart_periph)
000000  6941              LDR      r1,[r0,#0x14]
;;;372    {   
;;;373        USART_CTL2(usart_periph) |= USART_CTL2_HDEN;
000002  f0410108          ORR      r1,r1,#8
000006  6141              STR      r1,[r0,#0x14]
;;;374    }
000008  4770              BX       lr
;;;375    
                          ENDP


                          AREA ||i.usart_hardware_flow_cts_config||, CODE, READONLY, ALIGN=1

                  usart_hardware_flow_cts_config PROC
;;;578    */
;;;579    void usart_hardware_flow_cts_config(uint32_t usart_periph, uint32_t ctsconfig)
000000  460a              MOV      r2,r1
;;;580    {
;;;581        uint32_t ctl = 0U;
000002  2100              MOVS     r1,#0
;;;582        
;;;583        ctl = USART_CTL2(usart_periph);
000004  6941              LDR      r1,[r0,#0x14]
;;;584        ctl &= ~USART_CTL2_CTSEN;
000006  f4217100          BIC      r1,r1,#0x200
;;;585        ctl |= ctsconfig;
00000a  4311              ORRS     r1,r1,r2
;;;586        /* configure CTS */
;;;587        USART_CTL2(usart_periph) = ctl;
00000c  6141              STR      r1,[r0,#0x14]
;;;588    }
00000e  4770              BX       lr
;;;589    
                          ENDP


                          AREA ||i.usart_hardware_flow_rts_config||, CODE, READONLY, ALIGN=1

                  usart_hardware_flow_rts_config PROC
;;;557    */
;;;558    void usart_hardware_flow_rts_config(uint32_t usart_periph, uint32_t rtsconfig)
000000  460a              MOV      r2,r1
;;;559    {
;;;560        uint32_t ctl = 0U;
000002  2100              MOVS     r1,#0
;;;561        
;;;562        ctl = USART_CTL2(usart_periph);
000004  6941              LDR      r1,[r0,#0x14]
;;;563        ctl &= ~USART_CTL2_RTSEN;
000006  f4217180          BIC      r1,r1,#0x100
;;;564        ctl |= rtsconfig;
00000a  4311              ORRS     r1,r1,r2
;;;565        /* configure RTS */
;;;566        USART_CTL2(usart_periph) = ctl;
00000c  6141              STR      r1,[r0,#0x14]
;;;567    }
00000e  4770              BX       lr
;;;568    
                          ENDP


                          AREA ||i.usart_interrupt_disable||, CODE, READONLY, ALIGN=1

                  usart_interrupt_disable PROC
;;;712    */
;;;713    void usart_interrupt_disable(uint32_t usart_periph, uint32_t int_flag)
000000  b510              PUSH     {r4,lr}
;;;714    {
;;;715        USART_REG_VAL(usart_periph, int_flag) &= ~BIT(USART_BIT_POS(int_flag));
000002  f3c11289          UBFX     r2,r1,#6,#10
000006  5882              LDR      r2,[r0,r2]
000008  f001041f          AND      r4,r1,#0x1f
00000c  2301              MOVS     r3,#1
00000e  40a3              LSLS     r3,r3,r4
000010  439a              BICS     r2,r2,r3
000012  f3c11389          UBFX     r3,r1,#6,#10
000016  50c2              STR      r2,[r0,r3]
;;;716    }
000018  bd10              POP      {r4,pc}
;;;717    
                          ENDP


                          AREA ||i.usart_interrupt_enable||, CODE, READONLY, ALIGN=1

                  usart_interrupt_enable PROC
;;;691    */
;;;692    void usart_interrupt_enable(uint32_t usart_periph, uint32_t int_flag)
000000  b510              PUSH     {r4,lr}
;;;693    {
;;;694        USART_REG_VAL(usart_periph, int_flag) |= BIT(USART_BIT_POS(int_flag));
000002  f3c11289          UBFX     r2,r1,#6,#10
000006  5882              LDR      r2,[r0,r2]
000008  f001041f          AND      r4,r1,#0x1f
00000c  2301              MOVS     r3,#1
00000e  40a3              LSLS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  f3c11389          UBFX     r3,r1,#6,#10
000016  50c2              STR      r2,[r0,r3]
;;;695    }
000018  bd10              POP      {r4,pc}
;;;696    
                          ENDP


                          AREA ||i.usart_interrupt_flag_clear||, CODE, READONLY, ALIGN=1

                  usart_interrupt_flag_clear PROC
;;;763    */
;;;764    void usart_interrupt_flag_clear(uint32_t usart_periph, uint32_t flag)
000000  b510              PUSH     {r4,lr}
;;;765    {
;;;766        USART_REG_VAL2(usart_periph, flag) &= ~BIT(USART_BIT_POS2(flag));
000002  eb005291          ADD      r2,r0,r1,LSR #22
000006  6812              LDR      r2,[r2,#0]
000008  f3c14404          UBFX     r4,r1,#16,#5
00000c  2301              MOVS     r3,#1
00000e  40a3              LSLS     r3,r3,r4
000010  439a              BICS     r2,r2,r3
000012  eb005391          ADD      r3,r0,r1,LSR #22
000016  601a              STR      r2,[r3,#0]
;;;767    }
000018  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.usart_interrupt_flag_get||, CODE, READONLY, ALIGN=1

                  usart_interrupt_flag_get PROC
;;;736    */
;;;737    FlagStatus usart_interrupt_flag_get(uint32_t usart_periph, uint32_t int_flag)
000000  b570              PUSH     {r4-r6,lr}
;;;738    {
000002  4602              MOV      r2,r0
;;;739        uint32_t intenable = 0U, flagstatus = 0U;
000004  2300              MOVS     r3,#0
000006  2400              MOVS     r4,#0
;;;740        /* get the interrupt enable bit status */
;;;741        intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
000008  f3c11089          UBFX     r0,r1,#6,#10
00000c  5810              LDR      r0,[r2,r0]
00000e  f001061f          AND      r6,r1,#0x1f
000012  2501              MOVS     r5,#1
000014  40b5              LSLS     r5,r5,r6
000016  ea000305          AND      r3,r0,r5
;;;742        /* get the corresponding flag bit status */
;;;743        flagstatus = (USART_REG_VAL2(usart_periph, int_flag) & BIT(USART_BIT_POS2(int_flag)));
00001a  eb025091          ADD      r0,r2,r1,LSR #22
00001e  6800              LDR      r0,[r0,#0]
000020  f3c14604          UBFX     r6,r1,#16,#5
000024  2501              MOVS     r5,#1
000026  40b5              LSLS     r5,r5,r6
000028  ea000405          AND      r4,r0,r5
;;;744    
;;;745        if(flagstatus && intenable){
00002c  b114              CBZ      r4,|L20.52|
00002e  b10b              CBZ      r3,|L20.52|
;;;746            return SET;
000030  2001              MOVS     r0,#1
                  |L20.50|
;;;747        }else{
;;;748            return RESET; 
;;;749        }
;;;750    }
000032  bd70              POP      {r4-r6,pc}
                  |L20.52|
000034  2000              MOVS     r0,#0                 ;748
000036  e7fc              B        |L20.50|
;;;751    
                          ENDP


                          AREA ||i.usart_irda_lowpower_config||, CODE, READONLY, ALIGN=1

                  usart_irda_lowpower_config PROC
;;;541    */
;;;542    void usart_irda_lowpower_config(uint32_t usart_periph, uint32_t irlp)
000000  6942              LDR      r2,[r0,#0x14]
;;;543    {
;;;544        USART_CTL2(usart_periph) &= ~(USART_CTL2_IRLP);
000002  f0220204          BIC      r2,r2,#4
000006  6142              STR      r2,[r0,#0x14]
;;;545        USART_CTL2(usart_periph) |= (USART_CTL2_IRLP & irlp);
000008  6942              LDR      r2,[r0,#0x14]
00000a  f0010304          AND      r3,r1,#4
00000e  431a              ORRS     r2,r2,r3
000010  6142              STR      r2,[r0,#0x14]
;;;546    }
000012  4770              BX       lr
;;;547    
                          ENDP


                          AREA ||i.usart_irda_mode_disable||, CODE, READONLY, ALIGN=1

                  usart_irda_mode_disable PROC
;;;513    */
;;;514    void usart_irda_mode_disable(uint32_t usart_periph)
000000  6941              LDR      r1,[r0,#0x14]
;;;515    {
;;;516        USART_CTL2(usart_periph) &= ~(USART_CTL2_IREN);
000002  f0210102          BIC      r1,r1,#2
000006  6141              STR      r1,[r0,#0x14]
;;;517    }
000008  4770              BX       lr
;;;518    
                          ENDP


                          AREA ||i.usart_irda_mode_enable||, CODE, READONLY, ALIGN=1

                  usart_irda_mode_enable PROC
;;;502    */
;;;503    void usart_irda_mode_enable(uint32_t usart_periph)
000000  6941              LDR      r1,[r0,#0x14]
;;;504    {
;;;505        USART_CTL2(usart_periph) |= USART_CTL2_IREN;
000002  f0410102          ORR      r1,r1,#2
000006  6141              STR      r1,[r0,#0x14]
;;;506    }
000008  4770              BX       lr
;;;507    
                          ENDP


                          AREA ||i.usart_lin_break_detection_length_config||, CODE, READONLY, ALIGN=1

                  usart_lin_break_detection_length_config PROC
;;;347    */
;;;348    void usart_lin_break_detection_length_config(uint32_t usart_periph, uint32_t lblen)
000000  6902              LDR      r2,[r0,#0x10]
;;;349    {
;;;350        USART_CTL1(usart_periph) &= ~(USART_CTL1_LBLEN);
000002  f0220220          BIC      r2,r2,#0x20
000006  6102              STR      r2,[r0,#0x10]
;;;351        USART_CTL1(usart_periph) |= (USART_CTL1_LBLEN & lblen);
000008  6902              LDR      r2,[r0,#0x10]
00000a  f0010320          AND      r3,r1,#0x20
00000e  431a              ORRS     r2,r2,r3
000010  6102              STR      r2,[r0,#0x10]
;;;352    }
000012  4770              BX       lr
;;;353    
                          ENDP


                          AREA ||i.usart_lin_mode_disable||, CODE, READONLY, ALIGN=1

                  usart_lin_mode_disable PROC
;;;332    */
;;;333    void usart_lin_mode_disable(uint32_t usart_periph)
000000  6901              LDR      r1,[r0,#0x10]
;;;334    {   
;;;335        USART_CTL1(usart_periph) &= ~(USART_CTL1_LMEN);
000002  f4214180          BIC      r1,r1,#0x4000
000006  6101              STR      r1,[r0,#0x10]
;;;336    }
000008  4770              BX       lr
;;;337    
                          ENDP


                          AREA ||i.usart_lin_mode_enable||, CODE, READONLY, ALIGN=1

                  usart_lin_mode_enable PROC
;;;321    */
;;;322    void usart_lin_mode_enable(uint32_t usart_periph)
000000  6901              LDR      r1,[r0,#0x10]
;;;323    {   
;;;324        USART_CTL1(usart_periph) |= USART_CTL1_LMEN;
000002  f4414180          ORR      r1,r1,#0x4000
000006  6101              STR      r1,[r0,#0x10]
;;;325    }
000008  4770              BX       lr
;;;326    
                          ENDP


                          AREA ||i.usart_mute_mode_disable||, CODE, READONLY, ALIGN=1

                  usart_mute_mode_disable PROC
;;;294    */
;;;295    void usart_mute_mode_disable(uint32_t usart_periph)
000000  68c1              LDR      r1,[r0,#0xc]
;;;296    {
;;;297        USART_CTL0(usart_periph) &= ~(USART_CTL0_RWU);
000002  f0210102          BIC      r1,r1,#2
000006  60c1              STR      r1,[r0,#0xc]
;;;298    }
000008  4770              BX       lr
;;;299    
                          ENDP


                          AREA ||i.usart_mute_mode_enable||, CODE, READONLY, ALIGN=1

                  usart_mute_mode_enable PROC
;;;283    */
;;;284    void usart_mute_mode_enable(uint32_t usart_periph)
000000  68c1              LDR      r1,[r0,#0xc]
;;;285    {
;;;286        USART_CTL0(usart_periph) |= USART_CTL0_RWU;
000002  f0410102          ORR      r1,r1,#2
000006  60c1              STR      r1,[r0,#0xc]
;;;287    }
000008  4770              BX       lr
;;;288    
                          ENDP


                          AREA ||i.usart_mute_mode_wakeup_config||, CODE, READONLY, ALIGN=1

                  usart_mute_mode_wakeup_config PROC
;;;309    */
;;;310    void usart_mute_mode_wakeup_config(uint32_t usart_periph, uint32_t wmethod)
000000  68c2              LDR      r2,[r0,#0xc]
;;;311    {
;;;312        USART_CTL0(usart_periph) &= ~(USART_CTL0_WM);
000002  f4226200          BIC      r2,r2,#0x800
000006  60c2              STR      r2,[r0,#0xc]
;;;313        USART_CTL0(usart_periph) |= wmethod;
000008  68c2              LDR      r2,[r0,#0xc]
00000a  430a              ORRS     r2,r2,r1
00000c  60c2              STR      r2,[r0,#0xc]
;;;314    }
00000e  4770              BX       lr
;;;315    
                          ENDP


                          AREA ||i.usart_parity_config||, CODE, READONLY, ALIGN=1

                  usart_parity_config PROC
;;;132    */
;;;133    void usart_parity_config(uint32_t usart_periph, uint32_t paritycfg)
000000  68c2              LDR      r2,[r0,#0xc]
;;;134    {
;;;135        /* clear USART_CTL0 PM,PCEN bits */
;;;136        USART_CTL0(usart_periph) &= ~(USART_CTL0_PM | USART_CTL0_PCEN);
000002  f42262c0          BIC      r2,r2,#0x600
000006  60c2              STR      r2,[r0,#0xc]
;;;137        /* configure USART parity mode */
;;;138        USART_CTL0(usart_periph) |= paritycfg ;
000008  68c2              LDR      r2,[r0,#0xc]
00000a  430a              ORRS     r2,r2,r1
00000c  60c2              STR      r2,[r0,#0xc]
;;;139    }
00000e  4770              BX       lr
;;;140    
                          ENDP


                          AREA ||i.usart_prescaler_config||, CODE, READONLY, ALIGN=1

                  usart_prescaler_config PROC
;;;525    */
;;;526    void usart_prescaler_config(uint32_t usart_periph, uint8_t psc)
000000  6982              LDR      r2,[r0,#0x18]
;;;527    {
;;;528        USART_GP(usart_periph) &= ~(USART_GP_PSC);
000002  f02202ff          BIC      r2,r2,#0xff
000006  6182              STR      r2,[r0,#0x18]
;;;529        USART_GP(usart_periph) |= psc;
000008  6982              LDR      r2,[r0,#0x18]
00000a  430a              ORRS     r2,r2,r1
00000c  6182              STR      r2,[r0,#0x18]
;;;530    }
00000e  4770              BX       lr
;;;531    
                          ENDP


                          AREA ||i.usart_receive_config||, CODE, READONLY, ALIGN=1

                  usart_receive_config PROC
;;;230    */
;;;231    void usart_receive_config(uint32_t usart_periph, uint32_t rxconfig)
000000  460a              MOV      r2,r1
;;;232    {
;;;233        uint32_t ctl = 0U;
000002  2100              MOVS     r1,#0
;;;234        
;;;235        ctl = USART_CTL0(usart_periph);
000004  68c1              LDR      r1,[r0,#0xc]
;;;236        ctl &= ~USART_CTL0_REN;
000006  f0210104          BIC      r1,r1,#4
;;;237        ctl |= rxconfig;
00000a  4311              ORRS     r1,r1,r2
;;;238        /* configure receiver mode */
;;;239        USART_CTL0(usart_periph) = ctl;
00000c  60c1              STR      r1,[r0,#0xc]
;;;240    }
00000e  4770              BX       lr
;;;241    
                          ENDP


                          AREA ||i.usart_send_break||, CODE, READONLY, ALIGN=1

                  usart_send_break PROC
;;;359    */
;;;360    void usart_send_break(uint32_t usart_periph)
000000  68c1              LDR      r1,[r0,#0xc]
;;;361    {
;;;362        USART_CTL0(usart_periph) |= USART_CTL0_SBKCMD;
000002  f0410101          ORR      r1,r1,#1
000006  60c1              STR      r1,[r0,#0xc]
;;;363    }
000008  4770              BX       lr
;;;364    
                          ENDP


                          AREA ||i.usart_smartcard_mode_disable||, CODE, READONLY, ALIGN=1

                  usart_smartcard_mode_disable PROC
;;;469    */
;;;470    void usart_smartcard_mode_disable(uint32_t usart_periph)
000000  6941              LDR      r1,[r0,#0x14]
;;;471    {
;;;472        USART_CTL2(usart_periph) &= ~(USART_CTL2_SCEN);
000002  f0210120          BIC      r1,r1,#0x20
000006  6141              STR      r1,[r0,#0x14]
;;;473    }
000008  4770              BX       lr
;;;474    
                          ENDP


                          AREA ||i.usart_smartcard_mode_enable||, CODE, READONLY, ALIGN=1

                  usart_smartcard_mode_enable PROC
;;;458    */
;;;459    void usart_smartcard_mode_enable(uint32_t usart_periph)
000000  6941              LDR      r1,[r0,#0x14]
;;;460    {
;;;461        USART_CTL2(usart_periph) |= USART_CTL2_SCEN;
000002  f0410120          ORR      r1,r1,#0x20
000006  6141              STR      r1,[r0,#0x14]
;;;462    }
000008  4770              BX       lr
;;;463    
                          ENDP


                          AREA ||i.usart_smartcard_mode_nack_disable||, CODE, READONLY, ALIGN=1

                  usart_smartcard_mode_nack_disable PROC
;;;491    */
;;;492    void usart_smartcard_mode_nack_disable(uint32_t usart_periph)
000000  6941              LDR      r1,[r0,#0x14]
;;;493    {
;;;494        USART_CTL2(usart_periph) &= ~(USART_CTL2_NKEN);
000002  f0210110          BIC      r1,r1,#0x10
000006  6141              STR      r1,[r0,#0x14]
;;;495    }
000008  4770              BX       lr
;;;496    
                          ENDP


                          AREA ||i.usart_smartcard_mode_nack_enable||, CODE, READONLY, ALIGN=1

                  usart_smartcard_mode_nack_enable PROC
;;;480    */
;;;481    void usart_smartcard_mode_nack_enable(uint32_t usart_periph)
000000  6941              LDR      r1,[r0,#0x14]
;;;482    {
;;;483        USART_CTL2(usart_periph) |= USART_CTL2_NKEN;
000002  f0410110          ORR      r1,r1,#0x10
000006  6141              STR      r1,[r0,#0x14]
;;;484    }
000008  4770              BX       lr
;;;485    
                          ENDP


                          AREA ||i.usart_stop_bit_set||, CODE, READONLY, ALIGN=1

                  usart_stop_bit_set PROC
;;;170    */
;;;171    void usart_stop_bit_set(uint32_t usart_periph, uint32_t stblen)
000000  6902              LDR      r2,[r0,#0x10]
;;;172    {
;;;173        /* clear USART_CTL1 STB bits */
;;;174        USART_CTL1(usart_periph) &= ~USART_CTL1_STB; 
000002  f4225240          BIC      r2,r2,#0x3000
000006  6102              STR      r2,[r0,#0x10]
;;;175        /* configure USART stop bits */
;;;176        USART_CTL1(usart_periph) |= stblen;
000008  6902              LDR      r2,[r0,#0x10]
00000a  430a              ORRS     r2,r2,r1
00000c  6102              STR      r2,[r0,#0x10]
;;;177    }
00000e  4770              BX       lr
;;;178    /*!
                          ENDP


                          AREA ||i.usart_synchronous_clock_config||, CODE, READONLY, ALIGN=1

                  usart_synchronous_clock_config PROC
;;;426    */
;;;427    void usart_synchronous_clock_config(uint32_t usart_periph, uint32_t clen, uint32_t cph, uint32_t cpl)
000000  b570              PUSH     {r4-r6,lr}
;;;428    {
000002  460c              MOV      r4,r1
;;;429        uint32_t ctl = 0U;
000004  2100              MOVS     r1,#0
;;;430        
;;;431        /* read USART_CTL1 register */
;;;432        ctl = USART_CTL1(usart_periph);
000006  6901              LDR      r1,[r0,#0x10]
;;;433        ctl &= ~(USART_CTL1_CLEN | USART_CTL1_CPH | USART_CTL1_CPL);
000008  f42161e0          BIC      r1,r1,#0x700
;;;434        /* set CK length, CK phase, CK polarity */
;;;435        ctl |= (USART_CTL1_CLEN & clen) | (USART_CTL1_CPH & cph) | (USART_CTL1_CPL & cpl);
00000c  f4047580          AND      r5,r4,#0x100
000010  f4027600          AND      r6,r2,#0x200
000014  4335              ORRS     r5,r5,r6
000016  f4036680          AND      r6,r3,#0x400
00001a  4335              ORRS     r5,r5,r6
00001c  4329              ORRS     r1,r1,r5
;;;436    
;;;437        USART_CTL1(usart_periph) = ctl;
00001e  6101              STR      r1,[r0,#0x10]
;;;438    }
000020  bd70              POP      {r4-r6,pc}
;;;439    
                          ENDP


                          AREA ||i.usart_synchronous_clock_disable||, CODE, READONLY, ALIGN=1

                  usart_synchronous_clock_disable PROC
;;;403    */
;;;404    void usart_synchronous_clock_disable(uint32_t usart_periph)
000000  6901              LDR      r1,[r0,#0x10]
;;;405    {
;;;406        USART_CTL1(usart_periph) &= ~(USART_CTL1_CKEN);
000002  f4216100          BIC      r1,r1,#0x800
000006  6101              STR      r1,[r0,#0x10]
;;;407    }
000008  4770              BX       lr
;;;408    
                          ENDP


                          AREA ||i.usart_synchronous_clock_enable||, CODE, READONLY, ALIGN=1

                  usart_synchronous_clock_enable PROC
;;;392    */
;;;393    void usart_synchronous_clock_enable(uint32_t usart_periph)
000000  6901              LDR      r1,[r0,#0x10]
;;;394    {
;;;395        USART_CTL1(usart_periph) |= USART_CTL1_CKEN;
000002  f4416100          ORR      r1,r1,#0x800
000006  6101              STR      r1,[r0,#0x10]
;;;396    }
000008  4770              BX       lr
;;;397    
                          ENDP


                          AREA ||i.usart_transmit_config||, CODE, READONLY, ALIGN=1

                  usart_transmit_config PROC
;;;209    */
;;;210    void usart_transmit_config(uint32_t usart_periph, uint32_t txconfig)
000000  460a              MOV      r2,r1
;;;211    {
;;;212        uint32_t ctl = 0U;
000002  2100              MOVS     r1,#0
;;;213        
;;;214        ctl = USART_CTL0(usart_periph);
000004  68c1              LDR      r1,[r0,#0xc]
;;;215        ctl &= ~USART_CTL0_TEN;
000006  f0210108          BIC      r1,r1,#8
;;;216        ctl |= txconfig;
00000a  4311              ORRS     r1,r1,r2
;;;217        /* configure transfer mode */
;;;218        USART_CTL0(usart_periph) = ctl;
00000c  60c1              STR      r1,[r0,#0xc]
;;;219    }
00000e  4770              BX       lr
;;;220    
                          ENDP


                          AREA ||i.usart_word_length_set||, CODE, READONLY, ALIGN=1

                  usart_word_length_set PROC
;;;150    */
;;;151    void usart_word_length_set(uint32_t usart_periph, uint32_t wlen)
000000  68c2              LDR      r2,[r0,#0xc]
;;;152    {
;;;153        /* clear USART_CTL0 WL bit */
;;;154        USART_CTL0(usart_periph) &= ~USART_CTL0_WL;
000002  f4225280          BIC      r2,r2,#0x1000
000006  60c2              STR      r2,[r0,#0xc]
;;;155        /* configure USART word length */
;;;156        USART_CTL0(usart_periph) |= wlen;
000008  68c2              LDR      r2,[r0,#0xc]
00000a  430a              ORRS     r2,r2,r1
00000c  60c2              STR      r2,[r0,#0xc]
;;;157    }
00000e  4770              BX       lr
;;;158    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_gd32f10x_usart_c_988c0849____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___16_gd32f10x_usart_c_988c0849____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_gd32f10x_usart_c_988c0849____REVSH|
#line 128
|__asm___16_gd32f10x_usart_c_988c0849____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
