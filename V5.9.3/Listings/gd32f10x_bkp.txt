; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_bkp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_bkp.crf Libraries\src\gd32f10x_bkp.c]
                          THUMB

                          AREA ||i.bkp_data_read||, CODE, READONLY, ALIGN=2

                  bkp_data_read PROC
;;;84     */
;;;85     uint16_t bkp_data_read(bkp_data_register_enum register_number)
000000  4601              MOV      r1,r0
;;;86     {
;;;87         uint16_t data = 0U;
000002  2000              MOVS     r0,#0
;;;88         
;;;89         /* get the data from the BKP data register */
;;;90         if((register_number >= BKP_DATA_10) && (register_number <= BKP_DATA_41)){
000004  290b              CMP      r1,#0xb
000006  db09              BLT      |L1.28|
000008  292a              CMP      r1,#0x2a
00000a  dc07              BGT      |L1.28|
;;;91             data = BKP_DATA10_41(register_number - 1U);
00000c  f1a1020b          SUB      r2,r1,#0xb
000010  4b08              LDR      r3,|L1.52|
000012  eb030282          ADD      r2,r3,r2,LSL #2
000016  f8b20c40          LDRH     r0,[r2,#0xc40]
00001a  e009              B        |L1.48|
                  |L1.28|
;;;92         }else if((register_number >= BKP_DATA_0) && (register_number <= BKP_DATA_9)){
00001c  2901              CMP      r1,#1
00001e  db07              BLT      |L1.48|
000020  290a              CMP      r1,#0xa
000022  dc05              BGT      |L1.48|
;;;93             data = BKP_DATA0_9(register_number - 1U);
000024  1e4a              SUBS     r2,r1,#1
000026  4b03              LDR      r3,|L1.52|
000028  eb030282          ADD      r2,r3,r2,LSL #2
00002c  f8b20c04          LDRH     r0,[r2,#0xc04]
                  |L1.48|
;;;94         }else{
;;;95             /* illegal parameters */
;;;96         }
;;;97         return data;
;;;98     }
000030  4770              BX       lr
;;;99     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40006000

                          AREA ||i.bkp_data_write||, CODE, READONLY, ALIGN=2

                  bkp_data_write PROC
;;;65     */
;;;66     void bkp_data_write(bkp_data_register_enum register_number, uint16_t data)
000000  280b              CMP      r0,#0xb
;;;67     {
;;;68         if((register_number >= BKP_DATA_10) && (register_number <= BKP_DATA_41)){
000002  db09              BLT      |L2.24|
000004  282a              CMP      r0,#0x2a
000006  dc07              BGT      |L2.24|
;;;69             BKP_DATA10_41(register_number - 1U) = data;
000008  f1a0020b          SUB      r2,r0,#0xb
00000c  4b08              LDR      r3,|L2.48|
00000e  eb030282          ADD      r2,r3,r2,LSL #2
000012  f8a21c40          STRH     r1,[r2,#0xc40]
000016  e009              B        |L2.44|
                  |L2.24|
;;;70         }else if((register_number >= BKP_DATA_0) && (register_number <= BKP_DATA_9)){
000018  2801              CMP      r0,#1
00001a  db07              BLT      |L2.44|
00001c  280a              CMP      r0,#0xa
00001e  dc05              BGT      |L2.44|
;;;71             BKP_DATA0_9(register_number - 1U) = data;
000020  1e42              SUBS     r2,r0,#1
000022  4b03              LDR      r3,|L2.48|
000024  eb030282          ADD      r2,r3,r2,LSL #2
000028  f8a21c04          STRH     r1,[r2,#0xc04]
                  |L2.44|
;;;72         }else{
;;;73             /* illegal parameters */
;;;74         }
;;;75     }
00002c  4770              BX       lr
;;;76     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40006000

                          AREA ||i.bkp_deinit||, CODE, READONLY, ALIGN=1

                  bkp_deinit PROC
;;;49     */
;;;50     void bkp_deinit(void)
000000  b510              PUSH     {r4,lr}
;;;51     {
;;;52         /* reset BKP domain register*/
;;;53         rcu_bkp_reset_enable();
000002  f7fffffe          BL       rcu_bkp_reset_enable
;;;54         rcu_bkp_reset_disable();
000006  f7fffffe          BL       rcu_bkp_reset_disable
;;;55     }
00000a  bd10              POP      {r4,pc}
;;;56     
                          ENDP


                          AREA ||i.bkp_flag_clear||, CODE, READONLY, ALIGN=2

                  bkp_flag_clear PROC
;;;266    */
;;;267    void bkp_flag_clear(void)
000000  4803              LDR      r0,|L4.16|
;;;268    {
;;;269        BKP_TPCS |= (uint16_t)(BKP_FLAG_TAMPER >> BKP_TAMPER_BITS_OFFSET);
000002  8800              LDRH     r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L4.16|
00000a  8008              STRH     r0,[r1,#0]
;;;270    }
00000c  4770              BX       lr
;;;271    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x40006c34

                          AREA ||i.bkp_flag_get||, CODE, READONLY, ALIGN=2

                  bkp_flag_get PROC
;;;251    */
;;;252    FlagStatus bkp_flag_get(void)
000000  4804              LDR      r0,|L5.20|
;;;253    {
;;;254        if(RESET != (BKP_TPCS & BKP_FLAG_TAMPER)){
000002  8800              LDRH     r0,[r0,#0]
000004  f4007080          AND      r0,r0,#0x100
000008  b108              CBZ      r0,|L5.14|
;;;255            return SET;
00000a  2001              MOVS     r0,#1
                  |L5.12|
;;;256        }else{
;;;257            return RESET;
;;;258        }
;;;259    }
00000c  4770              BX       lr
                  |L5.14|
00000e  2000              MOVS     r0,#0                 ;257
000010  e7fc              B        |L5.12|
;;;260    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40006c34

                          AREA ||i.bkp_interrupt_disable||, CODE, READONLY, ALIGN=2

                  bkp_interrupt_disable PROC
;;;240    */
;;;241    void bkp_interrupt_disable(void)
000000  4803              LDR      r0,|L6.16|
;;;242    {
;;;243        BKP_TPCS &= (uint16_t)~BKP_TPCS_TPIE;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71fb          MOV      r1,#0xfffb
000008  4008              ANDS     r0,r0,r1
00000a  4901              LDR      r1,|L6.16|
00000c  8008              STRH     r0,[r1,#0]
;;;244    }
00000e  4770              BX       lr
;;;245    
                          ENDP

                  |L6.16|
                          DCD      0x40006c34

                          AREA ||i.bkp_interrupt_enable||, CODE, READONLY, ALIGN=2

                  bkp_interrupt_enable PROC
;;;229    */
;;;230    void bkp_interrupt_enable(void)
000000  4803              LDR      r0,|L7.16|
;;;231    {
;;;232        BKP_TPCS |= (uint16_t)BKP_TPCS_TPIE;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400004          ORR      r0,r0,#4
000008  4901              LDR      r1,|L7.16|
00000a  8008              STRH     r0,[r1,#0]
;;;233    }
00000c  4770              BX       lr
;;;234    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40006c34

                          AREA ||i.bkp_interrupt_flag_clear||, CODE, READONLY, ALIGN=2

                  bkp_interrupt_flag_clear PROC
;;;292    */
;;;293    void bkp_interrupt_flag_clear(void)
000000  4803              LDR      r0,|L8.16|
;;;294    {
;;;295        BKP_TPCS |= (uint16_t)(BKP_INT_FLAG_TAMPER >> BKP_TAMPER_BITS_OFFSET);
000002  8800              LDRH     r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L8.16|
00000a  8008              STRH     r0,[r1,#0]
;;;296    }
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40006c34

                          AREA ||i.bkp_interrupt_flag_get||, CODE, READONLY, ALIGN=2

                  bkp_interrupt_flag_get PROC
;;;277    */
;;;278    FlagStatus bkp_interrupt_flag_get(void)
000000  4804              LDR      r0,|L9.20|
;;;279    {
;;;280        if(RESET != (BKP_TPCS & BKP_INT_FLAG_TAMPER)){
000002  8800              LDRH     r0,[r0,#0]
000004  f4007000          AND      r0,r0,#0x200
000008  b108              CBZ      r0,|L9.14|
;;;281            return SET;
00000a  2001              MOVS     r0,#1
                  |L9.12|
;;;282        }else{
;;;283            return RESET;
;;;284        }
;;;285    }
00000c  4770              BX       lr
                  |L9.14|
00000e  2000              MOVS     r0,#0                 ;283
000010  e7fc              B        |L9.12|
;;;286    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40006c34

                          AREA ||i.bkp_rtc_calibration_output_disable||, CODE, READONLY, ALIGN=2

                  bkp_rtc_calibration_output_disable PROC
;;;116    */
;;;117    void bkp_rtc_calibration_output_disable(void)
000000  4803              LDR      r0,|L10.16|
;;;118    {
;;;119        BKP_OCTL &= (uint16_t)~BKP_OCTL_COEN;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f717f          MOV      r1,#0xff7f
000008  4008              ANDS     r0,r0,r1
00000a  4901              LDR      r1,|L10.16|
00000c  8008              STRH     r0,[r1,#0]
;;;120    }
00000e  4770              BX       lr
;;;121    
                          ENDP

                  |L10.16|
                          DCD      0x40006c2c

                          AREA ||i.bkp_rtc_calibration_output_enable||, CODE, READONLY, ALIGN=2

                  bkp_rtc_calibration_output_enable PROC
;;;105    */
;;;106    void bkp_rtc_calibration_output_enable(void)
000000  4803              LDR      r0,|L11.16|
;;;107    {
;;;108        BKP_OCTL |= (uint16_t)BKP_OCTL_COEN;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400080          ORR      r0,r0,#0x80
000008  4901              LDR      r1,|L11.16|
00000a  8008              STRH     r0,[r1,#0]
;;;109    }
00000c  4770              BX       lr
;;;110    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0x40006c2c

                          AREA ||i.bkp_rtc_calibration_value_set||, CODE, READONLY, ALIGN=2

                  bkp_rtc_calibration_value_set PROC
;;;170    */
;;;171    void bkp_rtc_calibration_value_set(uint8_t value)
000000  4601              MOV      r1,r0
;;;172    {
;;;173        uint16_t ctl;
;;;174        
;;;175        /* configure BKP_OCTL_RCCV with value */
;;;176        ctl = BKP_OCTL;
000002  4a05              LDR      r2,|L12.24|
000004  8810              LDRH     r0,[r2,#0]
;;;177        ctl &= (uint16_t)~BKP_OCTL_RCCV;
000006  f64f7280          MOV      r2,#0xff80
00000a  4010              ANDS     r0,r0,r2
;;;178        ctl |= (uint16_t)OCTL_RCCV(value);
00000c  f001027f          AND      r2,r1,#0x7f
000010  4310              ORRS     r0,r0,r2
;;;179        BKP_OCTL = ctl;
000012  4a01              LDR      r2,|L12.24|
000014  8010              STRH     r0,[r2,#0]
;;;180    }
000016  4770              BX       lr
;;;181    
                          ENDP

                  |L12.24|
                          DCD      0x40006c2c

                          AREA ||i.bkp_rtc_output_select||, CODE, READONLY, ALIGN=2

                  bkp_rtc_output_select PROC
;;;152    */
;;;153    void bkp_rtc_output_select(uint16_t outputsel)
000000  4601              MOV      r1,r0
;;;154    {
;;;155        uint16_t ctl = 0U;
000002  2000              MOVS     r0,#0
;;;156        
;;;157        /* configure BKP_OCTL_ROSEL with outputsel */
;;;158        ctl = BKP_OCTL;
000004  4a04              LDR      r2,|L13.24|
000006  8810              LDRH     r0,[r2,#0]
;;;159        ctl &= (uint16_t)~BKP_OCTL_ROSEL;
000008  f64f52ff          MOV      r2,#0xfdff
00000c  4010              ANDS     r0,r0,r2
;;;160        ctl |= outputsel;
00000e  4308              ORRS     r0,r0,r1
;;;161        BKP_OCTL = ctl;
000010  4a01              LDR      r2,|L13.24|
000012  8010              STRH     r0,[r2,#0]
;;;162    }
000014  4770              BX       lr
;;;163    
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      0x40006c2c

                          AREA ||i.bkp_rtc_signal_output_disable||, CODE, READONLY, ALIGN=2

                  bkp_rtc_signal_output_disable PROC
;;;138    */
;;;139    void bkp_rtc_signal_output_disable(void)
000000  4803              LDR      r0,|L14.16|
;;;140    {
;;;141        BKP_OCTL &= (uint16_t)~BKP_OCTL_ASOEN;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f61ff          MOV      r1,#0xfeff
000008  4008              ANDS     r0,r0,r1
00000a  4901              LDR      r1,|L14.16|
00000c  8008              STRH     r0,[r1,#0]
;;;142    }
00000e  4770              BX       lr
;;;143    
                          ENDP

                  |L14.16|
                          DCD      0x40006c2c

                          AREA ||i.bkp_rtc_signal_output_enable||, CODE, READONLY, ALIGN=2

                  bkp_rtc_signal_output_enable PROC
;;;127    */
;;;128    void bkp_rtc_signal_output_enable(void)
000000  4803              LDR      r0,|L15.16|
;;;129    {
;;;130        BKP_OCTL |= (uint16_t)BKP_OCTL_ASOEN;
000002  8800              LDRH     r0,[r0,#0]
000004  f4407080          ORR      r0,r0,#0x100
000008  4901              LDR      r1,|L15.16|
00000a  8008              STRH     r0,[r1,#0]
;;;131    }
00000c  4770              BX       lr
;;;132    
                          ENDP

00000e  0000              DCW      0x0000
                  |L15.16|
                          DCD      0x40006c2c

                          AREA ||i.bkp_tamper_active_level_set||, CODE, READONLY, ALIGN=2

                  bkp_tamper_active_level_set PROC
;;;212    */
;;;213    void bkp_tamper_active_level_set(uint16_t level)
000000  4601              MOV      r1,r0
;;;214    {
;;;215        uint16_t ctl = 0U;
000002  2000              MOVS     r0,#0
;;;216        
;;;217        /* configure BKP_TPCTL_TPAL with level */
;;;218        ctl = BKP_TPCTL;
000004  4a04              LDR      r2,|L16.24|
000006  8810              LDRH     r0,[r2,#0]
;;;219        ctl &= (uint16_t)~BKP_TPCTL_TPAL;
000008  f64f72fd          MOV      r2,#0xfffd
00000c  4010              ANDS     r0,r0,r2
;;;220        ctl |= level;
00000e  4308              ORRS     r0,r0,r1
;;;221        BKP_TPCTL = ctl;
000010  4a01              LDR      r2,|L16.24|
000012  8010              STRH     r0,[r2,#0]
;;;222    }
000014  4770              BX       lr
;;;223    
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x40006c30

                          AREA ||i.bkp_tamper_detection_disable||, CODE, READONLY, ALIGN=2

                  bkp_tamper_detection_disable PROC
;;;198    */
;;;199    void bkp_tamper_detection_disable(void)
000000  4803              LDR      r0,|L17.16|
;;;200    {
;;;201        BKP_TPCTL &= (uint16_t)~BKP_TPCTL_TPEN;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71fe          MOV      r1,#0xfffe
000008  4008              ANDS     r0,r0,r1
00000a  4901              LDR      r1,|L17.16|
00000c  8008              STRH     r0,[r1,#0]
;;;202    }
00000e  4770              BX       lr
;;;203    
                          ENDP

                  |L17.16|
                          DCD      0x40006c30

                          AREA ||i.bkp_tamper_detection_enable||, CODE, READONLY, ALIGN=2

                  bkp_tamper_detection_enable PROC
;;;187    */
;;;188    void bkp_tamper_detection_enable(void)
000000  4803              LDR      r0,|L18.16|
;;;189    {
;;;190        BKP_TPCTL |= (uint16_t)BKP_TPCTL_TPEN;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L18.16|
00000a  8008              STRH     r0,[r1,#0]
;;;191    }
00000c  4770              BX       lr
;;;192    
                          ENDP

00000e  0000              DCW      0x0000
                  |L18.16|
                          DCD      0x40006c30

;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_bkp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_bkp_c_b4e42595____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_bkp_c_b4e42595____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_bkp_c_b4e42595____REVSH|
#line 128
|__asm___14_gd32f10x_bkp_c_b4e42595____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
