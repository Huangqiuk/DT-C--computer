; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_exmc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_exmc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_exmc.crf Libraries\src\gd32f10x_exmc.c]
                          THUMB

                          AREA ||i.exmc_ecc_get||, CODE, READONLY, ALIGN=1

                  exmc_ecc_get PROC
;;;388    */
;;;389    uint32_t exmc_ecc_get(uint32_t nand_bank)
000000  4601              MOV      r1,r0
;;;390    {
;;;391        return (EXMC_NECC(nand_bank));
000002  0148              LSLS     r0,r1,#5
000004  f1a040c0          SUB      r0,r0,#0x60000000
000008  6d40              LDR      r0,[r0,#0x54]
;;;392    }
00000a  4770              BX       lr
;;;393    
                          ENDP


                          AREA ||i.exmc_flag_clear||, CODE, READONLY, ALIGN=1

                  exmc_flag_clear PROC
;;;586    */
;;;587    void exmc_flag_clear(uint32_t bank, uint32_t flag)
000000  0142              LSLS     r2,r0,#5
;;;588    {
;;;589        /* NAND bank1,bank2 or PC card bank3 */
;;;590        EXMC_NPINTEN(bank) &= ~flag;
000002  f1a242c0          SUB      r2,r2,#0x60000000
000006  6c52              LDR      r2,[r2,#0x44]
000008  438a              BICS     r2,r2,r1
00000a  0143              LSLS     r3,r0,#5
00000c  f1a343c0          SUB      r3,r3,#0x60000000
000010  645a              STR      r2,[r3,#0x44]
;;;591    }
000012  4770              BX       lr
;;;592    
                          ENDP


                          AREA ||i.exmc_flag_get||, CODE, READONLY, ALIGN=1

                  exmc_flag_get PROC
;;;554    */
;;;555    FlagStatus exmc_flag_get(uint32_t bank, uint32_t flag)
000000  4602              MOV      r2,r0
;;;556    {
;;;557        uint32_t status = 0x00000000U;
000002  2300              MOVS     r3,#0
;;;558    
;;;559        /* NAND bank1,bank2 or PC card bank3 */
;;;560        status = EXMC_NPINTEN(bank);
000004  0150              LSLS     r0,r2,#5
000006  f1a040c0          SUB      r0,r0,#0x60000000
00000a  6c43              LDR      r3,[r0,#0x44]
;;;561        
;;;562        if ((status & flag) != (uint32_t)flag ){
00000c  ea030001          AND      r0,r3,r1
000010  4288              CMP      r0,r1
000012  d001              BEQ      |L3.24|
;;;563            /* flag is reset */
;;;564            return RESET;
000014  2000              MOVS     r0,#0
                  |L3.22|
;;;565        }else{
;;;566            /* flag is set */
;;;567            return SET;
;;;568        }
;;;569    }
000016  4770              BX       lr
                  |L3.24|
000018  2001              MOVS     r0,#1                 ;567
00001a  e7fc              B        |L3.22|
;;;570    
                          ENDP


                          AREA ||i.exmc_interrupt_disable||, CODE, READONLY, ALIGN=1

                  exmc_interrupt_disable PROC
;;;532    */
;;;533    void exmc_interrupt_disable(uint32_t bank, uint32_t interrupt_source)
000000  0142              LSLS     r2,r0,#5
;;;534    {
;;;535        /* NAND bank1,bank2 or PC card bank3 */
;;;536        EXMC_NPINTEN(bank) &= ~interrupt_source;
000002  f1a242c0          SUB      r2,r2,#0x60000000
000006  6c52              LDR      r2,[r2,#0x44]
000008  438a              BICS     r2,r2,r1
00000a  0143              LSLS     r3,r0,#5
00000c  f1a343c0          SUB      r3,r3,#0x60000000
000010  645a              STR      r2,[r3,#0x44]
;;;537    }
000012  4770              BX       lr
;;;538    
                          ENDP


                          AREA ||i.exmc_interrupt_enable||, CODE, READONLY, ALIGN=1

                  exmc_interrupt_enable PROC
;;;511    */
;;;512    void exmc_interrupt_enable(uint32_t bank, uint32_t interrupt_source)
000000  0142              LSLS     r2,r0,#5
;;;513    {
;;;514        /* NAND bank1, bank2 or PC card bank3 */
;;;515        EXMC_NPINTEN(bank) |= interrupt_source;
000002  f1a242c0          SUB      r2,r2,#0x60000000
000006  6c52              LDR      r2,[r2,#0x44]
000008  430a              ORRS     r2,r2,r1
00000a  0143              LSLS     r3,r0,#5
00000c  f1a343c0          SUB      r3,r3,#0x60000000
000010  645a              STR      r2,[r3,#0x44]
;;;516    }
000012  4770              BX       lr
;;;517    
                          ENDP


                          AREA ||i.exmc_interrupt_flag_clear||, CODE, READONLY, ALIGN=1

                  exmc_interrupt_flag_clear PROC
;;;641    */
;;;642    void exmc_interrupt_flag_clear(uint32_t bank, uint32_t interrupt_source)
000000  0142              LSLS     r2,r0,#5
;;;643    {
;;;644        /* NAND bank1, bank2 or PC card bank3 */
;;;645        EXMC_NPINTEN(bank) &= ~(interrupt_source >> INTEN_INTS_OFFSET);
000002  f1a242c0          SUB      r2,r2,#0x60000000
000006  6c52              LDR      r2,[r2,#0x44]
000008  ea2203d1          BIC      r3,r2,r1,LSR #3
00000c  0142              LSLS     r2,r0,#5
00000e  f1a242c0          SUB      r2,r2,#0x60000000
000012  6453              STR      r3,[r2,#0x44]
;;;646    }
000014  4770              BX       lr
                          ENDP


                          AREA ||i.exmc_interrupt_flag_get||, CODE, READONLY, ALIGN=1

                  exmc_interrupt_flag_get PROC
;;;607    */
;;;608    FlagStatus exmc_interrupt_flag_get(uint32_t bank, uint32_t interrupt_source)
000000  b530              PUSH     {r4,r5,lr}
;;;609    {
000002  4602              MOV      r2,r0
;;;610        uint32_t status = 0x00000000U,interrupt_enable = 0x00000000U,interrupt_state = 0x00000000U;
000004  2300              MOVS     r3,#0
000006  2400              MOVS     r4,#0
000008  2500              MOVS     r5,#0
;;;611    
;;;612        /* NAND bank1,bank2 or PC card bank3 */
;;;613        status = EXMC_NPINTEN(bank);
00000a  0150              LSLS     r0,r2,#5
00000c  f1a040c0          SUB      r0,r0,#0x60000000
000010  6c43              LDR      r3,[r0,#0x44]
;;;614        interrupt_state = (status & (interrupt_source >> INTEN_INTS_OFFSET));
000012  ea0305d1          AND      r5,r3,r1,LSR #3
;;;615    
;;;616        interrupt_enable = (status & interrupt_source);
000016  ea030401          AND      r4,r3,r1
;;;617    
;;;618        if ((interrupt_enable) && (interrupt_state)){
00001a  b114              CBZ      r4,|L7.34|
00001c  b10d              CBZ      r5,|L7.34|
;;;619            /* interrupt flag is set */
;;;620            return SET;
00001e  2001              MOVS     r0,#1
                  |L7.32|
;;;621        }else{
;;;622            /* interrupt flag is reset */
;;;623            return RESET;
;;;624        }
;;;625    }
000020  bd30              POP      {r4,r5,pc}
                  |L7.34|
000022  2000              MOVS     r0,#0                 ;623
000024  e7fc              B        |L7.32|
;;;626    
                          ENDP


                          AREA ||i.exmc_nand_deinit||, CODE, READONLY, ALIGN=1

                  exmc_nand_deinit PROC
;;;260    */
;;;261    void exmc_nand_deinit(uint32_t nand_bank)
000000  2218              MOVS     r2,#0x18
;;;262    {
;;;263        /* EXMC_BANK1_NAND or EXMC_BANK2_NAND */
;;;264        EXMC_NPCTL(nand_bank) = BANK1_2_NPCTL_RESET;
000002  0141              LSLS     r1,r0,#5
000004  f1a141c0          SUB      r1,r1,#0x60000000
000008  640a              STR      r2,[r1,#0x40]
;;;265        EXMC_NPINTEN(nand_bank) = BANK1_2_NPINTEN_RESET;
00000a  2240              MOVS     r2,#0x40
00000c  0141              LSLS     r1,r0,#5
00000e  f1a141c0          SUB      r1,r1,#0x60000000
000012  644a              STR      r2,[r1,#0x44]
;;;266        EXMC_NPCTCFG(nand_bank) = BANK1_2_NPCTCFG_RESET;
000014  f04f32fc          MOV      r2,#0xfcfcfcfc
000018  0141              LSLS     r1,r0,#5
00001a  f1a141c0          SUB      r1,r1,#0x60000000
00001e  648a              STR      r2,[r1,#0x48]
;;;267        EXMC_NPATCFG(nand_bank) = BANK1_2_NPATCFG_RESET;
000020  0141              LSLS     r1,r0,#5
000022  f1a141c0          SUB      r1,r1,#0x60000000
000026  64ca              STR      r2,[r1,#0x4c]
;;;268    }
000028  4770              BX       lr
;;;269    
                          ENDP


                          AREA ||i.exmc_nand_disable||, CODE, READONLY, ALIGN=1

                  exmc_nand_disable PROC
;;;357    */
;;;358    void exmc_nand_disable(uint32_t nand_bank)
000000  0141              LSLS     r1,r0,#5
;;;359    {
;;;360        EXMC_NPCTL(nand_bank) &= ~EXMC_NPCTL_NDBKEN;
000002  f1a141c0          SUB      r1,r1,#0x60000000
000006  6c09              LDR      r1,[r1,#0x40]
000008  f0210204          BIC      r2,r1,#4
00000c  0141              LSLS     r1,r0,#5
00000e  f1a141c0          SUB      r1,r1,#0x60000000
000012  640a              STR      r2,[r1,#0x40]
;;;361    }
000014  4770              BX       lr
;;;362    
                          ENDP


                          AREA ||i.exmc_nand_ecc_config||, CODE, READONLY, ALIGN=1

                  exmc_nand_ecc_config PROC
;;;370    */
;;;371    void exmc_nand_ecc_config(uint32_t nand_bank, ControlStatus newvalue)
000000  2901              CMP      r1,#1
;;;372    {
;;;373        if (ENABLE == newvalue){
000002  d10a              BNE      |L10.26|
;;;374            /* enable the selected NAND bank ECC function */
;;;375            EXMC_NPCTL(nand_bank) |= EXMC_NPCTL_ECCEN;
000004  0142              LSLS     r2,r0,#5
000006  f1a242c0          SUB      r2,r2,#0x60000000
00000a  6c12              LDR      r2,[r2,#0x40]
00000c  f0420340          ORR      r3,r2,#0x40
000010  0142              LSLS     r2,r0,#5
000012  f1a242c0          SUB      r2,r2,#0x60000000
000016  6413              STR      r3,[r2,#0x40]
000018  e009              B        |L10.46|
                  |L10.26|
;;;376        }else{
;;;377            /* disable the selected NAND bank ECC function */
;;;378            EXMC_NPCTL(nand_bank) &= ~EXMC_NPCTL_ECCEN;
00001a  0142              LSLS     r2,r0,#5
00001c  f1a242c0          SUB      r2,r2,#0x60000000
000020  6c12              LDR      r2,[r2,#0x40]
000022  f0220340          BIC      r3,r2,#0x40
000026  0142              LSLS     r2,r0,#5
000028  f1a242c0          SUB      r2,r2,#0x60000000
00002c  6413              STR      r3,[r2,#0x40]
                  |L10.46|
;;;379        }
;;;380    }
00002e  4770              BX       lr
;;;381    
                          ENDP


                          AREA ||i.exmc_nand_enable||, CODE, READONLY, ALIGN=1

                  exmc_nand_enable PROC
;;;345    */
;;;346    void exmc_nand_enable(uint32_t nand_bank)
000000  0141              LSLS     r1,r0,#5
;;;347    {
;;;348        EXMC_NPCTL(nand_bank) |= EXMC_NPCTL_NDBKEN;
000002  f1a141c0          SUB      r1,r1,#0x60000000
000006  6c09              LDR      r1,[r1,#0x40]
000008  f0410204          ORR      r2,r1,#4
00000c  0141              LSLS     r1,r0,#5
00000e  f1a141c0          SUB      r1,r1,#0x60000000
000012  640a              STR      r2,[r1,#0x40]
;;;349    }
000014  4770              BX       lr
;;;350    
                          ENDP


                          AREA ||i.exmc_nand_init||, CODE, READONLY, ALIGN=1

                  exmc_nand_init PROC
;;;284    */
;;;285    void exmc_nand_init(exmc_nand_parameter_struct* exmc_nand_init_struct)
000000  b570              PUSH     {r4-r6,lr}
;;;286    {
;;;287        uint32_t npctl = 0x00000000U, npctcfg = 0x00000000U, npatcfg = 0x00000000U;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;288        
;;;289        npctl = (uint32_t)(exmc_nand_init_struct->wait_feature << NPCTL_NDWTEN_OFFSET)|
000008  2508              MOVS     r5,#8
00000a  6984              LDR      r4,[r0,#0x18]
00000c  ea450444          ORR      r4,r5,r4,LSL #1
000010  6945              LDR      r5,[r0,#0x14]
000012  432c              ORRS     r4,r4,r5
000014  6905              LDR      r5,[r0,#0x10]
000016  ea441485          ORR      r4,r4,r5,LSL #6
00001a  6845              LDR      r5,[r0,#4]
00001c  432c              ORRS     r4,r4,r5
00001e  68c5              LDR      r5,[r0,#0xc]
000020  432c              ORRS     r4,r4,r5
000022  6885              LDR      r5,[r0,#8]
000024  ea440105          ORR      r1,r4,r5
;;;290                           EXMC_NPCTL_NDTP |
;;;291                           exmc_nand_init_struct->databus_width |
;;;292                          (exmc_nand_init_struct->ecc_logic << NPCTL_ECCEN_OFFSET)|
;;;293                           exmc_nand_init_struct->ecc_size |
;;;294                           exmc_nand_init_struct->ctr_latency |
;;;295                           exmc_nand_init_struct->atr_latency;
;;;296    
;;;297        npctcfg = (uint32_t)((exmc_nand_init_struct->common_space_timing->setuptime - 1U) & EXMC_NPCTCFG_COMSET ) |
000028  69c4              LDR      r4,[r0,#0x1c]
00002a  7b24              LDRB     r4,[r4,#0xc]
00002c  1e64              SUBS     r4,r4,#1
00002e  b2e4              UXTB     r4,r4
000030  69c5              LDR      r5,[r0,#0x1c]
000032  68ad              LDR      r5,[r5,#8]
000034  1e6d              SUBS     r5,r5,#1
000036  f44f467f          MOV      r6,#0xff00
00003a  ea062505          AND      r5,r6,r5,LSL #8
00003e  432c              ORRS     r4,r4,r5
000040  69c5              LDR      r5,[r0,#0x1c]
000042  88ad              LDRH     r5,[r5,#4]
000044  0236              LSLS     r6,r6,#8
000046  ea064505          AND      r5,r6,r5,LSL #16
00004a  432c              ORRS     r4,r4,r5
00004c  69c5              LDR      r5,[r0,#0x1c]
00004e  782d              LDRB     r5,[r5,#0]
000050  1e6d              SUBS     r5,r5,#1
000052  0236              LSLS     r6,r6,#8
000054  ea066505          AND      r5,r6,r5,LSL #24
000058  ea440205          ORR      r2,r4,r5
;;;298                            (((exmc_nand_init_struct->common_space_timing->waittime - 1U) << NPCTCFG_COMWAIT_OFFSET) & EXMC_NPCTCFG_COMWAIT ) |
;;;299                            ((exmc_nand_init_struct->common_space_timing->holdtime << NPCTCFG_COMHLD_OFFSET) & EXMC_NPCTCFG_COMHLD ) |
;;;300                            (((exmc_nand_init_struct->common_space_timing->databus_hiztime - 1U) << NPCTCFG_COMHIZ_OFFSET) & EXMC_NPCTCFG_COMHIZ );
;;;301    
;;;302        npatcfg = (uint32_t)((exmc_nand_init_struct->attribute_space_timing->setuptime - 1U) & EXMC_NPATCFG_ATTSET ) |
00005c  6a04              LDR      r4,[r0,#0x20]
00005e  7b24              LDRB     r4,[r4,#0xc]
000060  1e64              SUBS     r4,r4,#1
000062  b2e4              UXTB     r4,r4
000064  6a05              LDR      r5,[r0,#0x20]
000066  68ad              LDR      r5,[r5,#8]
000068  1e6d              SUBS     r5,r5,#1
00006a  0c36              LSRS     r6,r6,#16
00006c  ea062505          AND      r5,r6,r5,LSL #8
000070  432c              ORRS     r4,r4,r5
000072  6a05              LDR      r5,[r0,#0x20]
000074  88ad              LDRH     r5,[r5,#4]
000076  0236              LSLS     r6,r6,#8
000078  ea064505          AND      r5,r6,r5,LSL #16
00007c  432c              ORRS     r4,r4,r5
00007e  6a05              LDR      r5,[r0,#0x20]
000080  782d              LDRB     r5,[r5,#0]
000082  1e6d              SUBS     r5,r5,#1
000084  0236              LSLS     r6,r6,#8
000086  ea066505          AND      r5,r6,r5,LSL #24
00008a  ea440305          ORR      r3,r4,r5
;;;303                            (((exmc_nand_init_struct->attribute_space_timing->waittime - 1U) << NPATCFG_ATTWAIT_OFFSET) & EXMC_NPATCFG_ATTWAIT ) |
;;;304                            ((exmc_nand_init_struct->attribute_space_timing->holdtime << NPATCFG_ATTHLD_OFFSET) & EXMC_NPATCFG_ATTHLD ) |
;;;305                            (((exmc_nand_init_struct->attribute_space_timing->databus_hiztime -1U) << NPATCFG_ATTHIZ_OFFSET) & EXMC_NPATCFG_ATTHIZ );
;;;306    
;;;307        /* EXMC_BANK1_NAND or EXMC_BANK2_NAND initialize */
;;;308        EXMC_NPCTL(exmc_nand_init_struct->nand_bank) = npctl;
00008e  6804              LDR      r4,[r0,#0]
000090  0164              LSLS     r4,r4,#5
000092  f1a444c0          SUB      r4,r4,#0x60000000
000096  6421              STR      r1,[r4,#0x40]
;;;309        EXMC_NPCTCFG(exmc_nand_init_struct->nand_bank) = npctcfg;
000098  6804              LDR      r4,[r0,#0]
00009a  0164              LSLS     r4,r4,#5
00009c  f1a444c0          SUB      r4,r4,#0x60000000
0000a0  64a2              STR      r2,[r4,#0x48]
;;;310        EXMC_NPATCFG(exmc_nand_init_struct->nand_bank) = npatcfg;
0000a2  6804              LDR      r4,[r0,#0]
0000a4  0164              LSLS     r4,r4,#5
0000a6  f1a444c0          SUB      r4,r4,#0x60000000
0000aa  64e3              STR      r3,[r4,#0x4c]
;;;311    }
0000ac  bd70              POP      {r4-r6,pc}
;;;312    
                          ENDP


                          AREA ||i.exmc_nand_struct_para_init||, CODE, READONLY, ALIGN=1

                  exmc_nand_struct_para_init PROC
;;;318    */
;;;319    void exmc_nand_struct_para_init(exmc_nand_parameter_struct* exmc_nand_init_struct)
000000  2101              MOVS     r1,#1
;;;320    {
;;;321        /* configure the structure with default value */
;;;322        exmc_nand_init_struct->nand_bank = EXMC_BANK1_NAND;
000002  6001              STR      r1,[r0,#0]
;;;323        exmc_nand_init_struct->wait_feature = DISABLE;
000004  2100              MOVS     r1,#0
000006  6181              STR      r1,[r0,#0x18]
;;;324        exmc_nand_init_struct->databus_width = EXMC_NAND_DATABUS_WIDTH_8B;
000008  6141              STR      r1,[r0,#0x14]
;;;325        exmc_nand_init_struct->ecc_logic = DISABLE;
00000a  6101              STR      r1,[r0,#0x10]
;;;326        exmc_nand_init_struct->ecc_size = EXMC_ECC_SIZE_256BYTES;
00000c  6041              STR      r1,[r0,#4]
;;;327        exmc_nand_init_struct->ctr_latency = 0x0U;
00000e  60c1              STR      r1,[r0,#0xc]
;;;328        exmc_nand_init_struct->atr_latency = 0x0U;
000010  6081              STR      r1,[r0,#8]
;;;329        exmc_nand_init_struct->common_space_timing->setuptime = 0xFCU;
000012  21fc              MOVS     r1,#0xfc
000014  69c2              LDR      r2,[r0,#0x1c]
000016  60d1              STR      r1,[r2,#0xc]
;;;330        exmc_nand_init_struct->common_space_timing->waittime = 0xFCU;
000018  69c2              LDR      r2,[r0,#0x1c]
00001a  6091              STR      r1,[r2,#8]
;;;331        exmc_nand_init_struct->common_space_timing->holdtime = 0xFCU;
00001c  69c2              LDR      r2,[r0,#0x1c]
00001e  6051              STR      r1,[r2,#4]
;;;332        exmc_nand_init_struct->common_space_timing->databus_hiztime = 0xFCU;
000020  69c2              LDR      r2,[r0,#0x1c]
000022  6011              STR      r1,[r2,#0]
;;;333        exmc_nand_init_struct->attribute_space_timing->setuptime = 0xFCU;
000024  6a02              LDR      r2,[r0,#0x20]
000026  60d1              STR      r1,[r2,#0xc]
;;;334        exmc_nand_init_struct->attribute_space_timing->waittime = 0xFCU;
000028  6a02              LDR      r2,[r0,#0x20]
00002a  6091              STR      r1,[r2,#8]
;;;335        exmc_nand_init_struct->attribute_space_timing->holdtime = 0xFCU;
00002c  6a02              LDR      r2,[r0,#0x20]
00002e  6051              STR      r1,[r2,#4]
;;;336        exmc_nand_init_struct->attribute_space_timing->databus_hiztime = 0xFCU;
000030  6a02              LDR      r2,[r0,#0x20]
000032  6011              STR      r1,[r2,#0]
;;;337    }
000034  4770              BX       lr
;;;338    
                          ENDP


                          AREA ||i.exmc_norsram_deinit||, CODE, READONLY, ALIGN=1

                  exmc_norsram_deinit PROC
;;;100    */
;;;101    void exmc_norsram_deinit(uint32_t norsram_region)
000000  b930              CBNZ     r0,|L14.16|
;;;102    {
;;;103        /* reset the registers */
;;;104        if(EXMC_BANK0_NORSRAM_REGION0 == norsram_region){
;;;105            EXMC_SNCTL(norsram_region) = BANK0_SNCTL0_REGION_RESET;
000002  f24302db          MOV      r2,#0x30db
000006  00c1              LSLS     r1,r0,#3
000008  f1a141c0          SUB      r1,r1,#0x60000000
00000c  600a              STR      r2,[r1,#0]
00000e  e005              B        |L14.28|
                  |L14.16|
;;;106        }else{
;;;107            EXMC_SNCTL(norsram_region) = BANK0_SNCTL1_2_3_REGION_RESET;
000010  f24302d2          MOV      r2,#0x30d2
000014  00c1              LSLS     r1,r0,#3
000016  f1a141c0          SUB      r1,r1,#0x60000000
00001a  600a              STR      r2,[r1,#0]
                  |L14.28|
;;;108        }
;;;109    
;;;110        EXMC_SNTCFG(norsram_region) = BANK0_SNTCFG_RESET;
00001c  f06f4270          MVN      r2,#0xf0000000
000020  00c1              LSLS     r1,r0,#3
000022  f1a141c0          SUB      r1,r1,#0x60000000
000026  604a              STR      r2,[r1,#4]
;;;111        EXMC_SNWTCFG(norsram_region) = BANK0_SNWTCFG_RESET;
000028  00c1              LSLS     r1,r0,#3
00002a  f1a141c0          SUB      r1,r1,#0x60000000
00002e  f8c12104          STR      r2,[r1,#0x104]
;;;112    }
000032  4770              BX       lr
;;;113    
                          ENDP


                          AREA ||i.exmc_norsram_disable||, CODE, READONLY, ALIGN=1

                  exmc_norsram_disable PROC
;;;248    */
;;;249    void exmc_norsram_disable(uint32_t norsram_region)
000000  00c1              LSLS     r1,r0,#3
;;;250    {
;;;251        EXMC_SNCTL(norsram_region) &= ~(uint32_t)EXMC_SNCTL_NRBKEN;
000002  f1a141c0          SUB      r1,r1,#0x60000000
000006  6809              LDR      r1,[r1,#0]
000008  f0210201          BIC      r2,r1,#1
00000c  00c1              LSLS     r1,r0,#3
00000e  f1a141c0          SUB      r1,r1,#0x60000000
000012  600a              STR      r2,[r1,#0]
;;;252    }
000014  4770              BX       lr
;;;253    
                          ENDP


                          AREA ||i.exmc_norsram_enable||, CODE, READONLY, ALIGN=1

                  exmc_norsram_enable PROC
;;;236    */
;;;237    void exmc_norsram_enable(uint32_t norsram_region)
000000  00c1              LSLS     r1,r0,#3
;;;238    {
;;;239        EXMC_SNCTL(norsram_region) |= (uint32_t)EXMC_SNCTL_NRBKEN;
000002  f1a141c0          SUB      r1,r1,#0x60000000
000006  6809              LDR      r1,[r1,#0]
000008  f0410201          ORR      r2,r1,#1
00000c  00c1              LSLS     r1,r0,#3
00000e  f1a141c0          SUB      r1,r1,#0x60000000
000012  600a              STR      r2,[r1,#0]
;;;240    }
000014  4770              BX       lr
;;;241    
                          ENDP


                          AREA ||i.exmc_norsram_init||, CODE, READONLY, ALIGN=2

                  exmc_norsram_init PROC
;;;134    */
;;;135    void exmc_norsram_init(exmc_norsram_parameter_struct* exmc_norsram_init_struct)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
;;;137        uint32_t snctl = 0x00000000U, sntcfg = 0x00000000U, snwtcfg = 0x00000000U;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;138    
;;;139        /* get the register value */
;;;140        snctl = EXMC_SNCTL(exmc_norsram_init_struct->norsram_region);
000008  6804              LDR      r4,[r0,#0]
00000a  00e4              LSLS     r4,r4,#3
00000c  f1a444c0          SUB      r4,r4,#0x60000000
000010  6821              LDR      r1,[r4,#0]
;;;141    
;;;142        /* clear relative bits */
;;;143        snctl &= ((uint32_t)~(EXMC_SNCTL_NREN | EXMC_SNCTL_NRTP | EXMC_SNCTL_NRW | EXMC_SNCTL_SBRSTEN | 
000012  4c3d              LDR      r4,|L17.264|
000014  4021              ANDS     r1,r1,r4
;;;144                              EXMC_SNCTL_NRWTPOL | EXMC_SNCTL_WRAPEN | EXMC_SNCTL_NRWTCFG | EXMC_SNCTL_WREN | 
;;;145                              EXMC_SNCTL_NRWTEN | EXMC_SNCTL_EXMODEN | EXMC_SNCTL_ASYNCWAIT | EXMC_SNCTL_SYNCWR | 
;;;146                              EXMC_SNCTL_NRMUX ));
;;;147    
;;;148        snctl |= (uint32_t)(exmc_norsram_init_struct->address_data_mux << SNCTL_NRMUX_OFFSET) |
000016  e9d0450b          LDRD     r4,r5,[r0,#0x2c]
00001a  ea440445          ORR      r4,r4,r5,LSL #1
00001e  6a85              LDR      r5,[r0,#0x28]
000020  432c              ORRS     r4,r4,r5
000022  6a45              LDR      r5,[r0,#0x24]
000024  ea442405          ORR      r4,r4,r5,LSL #8
000028  6a05              LDR      r5,[r0,#0x20]
00002a  432c              ORRS     r4,r4,r5
00002c  69c5              LDR      r5,[r0,#0x1c]
00002e  ea442485          ORR      r4,r4,r5,LSL #10
000032  6985              LDR      r5,[r0,#0x18]
000034  432c              ORRS     r4,r4,r5
000036  6945              LDR      r5,[r0,#0x14]
000038  ea443405          ORR      r4,r4,r5,LSL #12
00003c  6905              LDR      r5,[r0,#0x10]
00003e  ea443445          ORR      r4,r4,r5,LSL #13
000042  6885              LDR      r5,[r0,#8]
000044  ea443485          ORR      r4,r4,r5,LSL #14
000048  68c5              LDR      r5,[r0,#0xc]
00004a  ea4434c5          ORR      r4,r4,r5,LSL #15
00004e  6845              LDR      r5,[r0,#4]
000050  432c              ORRS     r4,r4,r5
000052  4321              ORRS     r1,r1,r4
;;;149                            exmc_norsram_init_struct->memory_type |
;;;150                            exmc_norsram_init_struct->databus_width |
;;;151                           (exmc_norsram_init_struct->burst_mode << SNCTL_SBRSTEN_OFFSET) |
;;;152                            exmc_norsram_init_struct->nwait_polarity |
;;;153                           (exmc_norsram_init_struct->wrap_burst_mode << SNCTL_WRAPEN_OFFSET) |
;;;154                            exmc_norsram_init_struct->nwait_config |
;;;155                           (exmc_norsram_init_struct->memory_write << SNCTL_WREN_OFFSET) |
;;;156                           (exmc_norsram_init_struct->nwait_signal << SNCTL_NRWTEN_OFFSET) |
;;;157                           (exmc_norsram_init_struct->extended_mode << SNCTL_EXMODEN_OFFSET) |
;;;158                           (exmc_norsram_init_struct->asyn_wait << SNCTL_ASYNCWAIT_OFFSET) |
;;;159                            exmc_norsram_init_struct->write_mode;
;;;160    
;;;161        sntcfg = (uint32_t)((exmc_norsram_init_struct->read_write_timing->asyn_address_setuptime - 1U ) & EXMC_SNTCFG_ASET )|
000054  6b44              LDR      r4,[r0,#0x34]
000056  7e24              LDRB     r4,[r4,#0x18]
000058  1e64              SUBS     r4,r4,#1
00005a  f004040f          AND      r4,r4,#0xf
00005e  6b45              LDR      r5,[r0,#0x34]
000060  696d              LDR      r5,[r5,#0x14]
000062  1e6d              SUBS     r5,r5,#1
000064  26f0              MOVS     r6,#0xf0
000066  ea061505          AND      r5,r6,r5,LSL #4
00006a  432c              ORRS     r4,r4,r5
00006c  6b45              LDR      r5,[r0,#0x34]
00006e  692d              LDR      r5,[r5,#0x10]
000070  1e6d              SUBS     r5,r5,#1
000072  f44f467f          MOV      r6,#0xff00
000076  ea062505          AND      r5,r6,r5,LSL #8
00007a  432c              ORRS     r4,r4,r5
00007c  6b45              LDR      r5,[r0,#0x34]
00007e  89ad              LDRH     r5,[r5,#0xc]
000080  1e6d              SUBS     r5,r5,#1
000082  f44f2670          MOV      r6,#0xf0000
000086  ea064505          AND      r5,r6,r5,LSL #16
00008a  432c              ORRS     r4,r4,r5
00008c  6b45              LDR      r5,[r0,#0x34]
00008e  68ad              LDR      r5,[r5,#8]
000090  432c              ORRS     r4,r4,r5
000092  6b45              LDR      r5,[r0,#0x34]
000094  686d              LDR      r5,[r5,#4]
000096  432c              ORRS     r4,r4,r5
000098  6b45              LDR      r5,[r0,#0x34]
00009a  682d              LDR      r5,[r5,#0]
00009c  ea440205          ORR      r2,r4,r5
;;;162                           (((exmc_norsram_init_struct->read_write_timing->asyn_address_holdtime - 1U ) << SNTCFG_AHLD_OFFSET ) & EXMC_SNTCFG_AHLD ) |
;;;163                           (((exmc_norsram_init_struct->read_write_timing->asyn_data_setuptime - 1U ) << SNTCFG_DSET_OFFSET ) & EXMC_SNTCFG_DSET ) |
;;;164                           (((exmc_norsram_init_struct->read_write_timing->bus_latency - 1U ) << SNTCFG_BUSLAT_OFFSET ) & EXMC_SNTCFG_BUSLAT )|
;;;165                           exmc_norsram_init_struct->read_write_timing->syn_clk_division |
;;;166                           exmc_norsram_init_struct->read_write_timing->syn_data_latency |
;;;167                           exmc_norsram_init_struct->read_write_timing->asyn_access_mode;
;;;168    
;;;169        /* nor flash access enable */
;;;170        if(EXMC_MEMORY_TYPE_NOR == exmc_norsram_init_struct->memory_type){
0000a0  6ac4              LDR      r4,[r0,#0x2c]
0000a2  2c08              CMP      r4,#8
0000a4  d101              BNE      |L17.170|
;;;171            snctl |= (uint32_t)EXMC_SNCTL_NREN;
0000a6  f0410140          ORR      r1,r1,#0x40
                  |L17.170|
;;;172        }
;;;173    
;;;174        /* extended mode configure */
;;;175        if(ENABLE == exmc_norsram_init_struct->extended_mode){
0000aa  6884              LDR      r4,[r0,#8]
0000ac  2c01              CMP      r4,#1
0000ae  d118              BNE      |L17.226|
;;;176            snwtcfg = (uint32_t)(((exmc_norsram_init_struct->write_timing->asyn_address_setuptime - 1U) & EXMC_SNWTCFG_WASET) |
0000b0  6b84              LDR      r4,[r0,#0x38]
0000b2  7e24              LDRB     r4,[r4,#0x18]
0000b4  1e64              SUBS     r4,r4,#1
0000b6  f004040f          AND      r4,r4,#0xf
0000ba  6b85              LDR      r5,[r0,#0x38]
0000bc  696d              LDR      r5,[r5,#0x14]
0000be  1e6d              SUBS     r5,r5,#1
0000c0  26f0              MOVS     r6,#0xf0
0000c2  ea061505          AND      r5,r6,r5,LSL #4
0000c6  432c              ORRS     r4,r4,r5
0000c8  6b85              LDR      r5,[r0,#0x38]
0000ca  692d              LDR      r5,[r5,#0x10]
0000cc  1e6d              SUBS     r5,r5,#1
0000ce  f44f467f          MOV      r6,#0xff00
0000d2  ea062505          AND      r5,r6,r5,LSL #8
0000d6  432c              ORRS     r4,r4,r5
0000d8  6b85              LDR      r5,[r0,#0x38]
0000da  682d              LDR      r5,[r5,#0]
0000dc  ea440305          ORR      r3,r4,r5
0000e0  e001              B        |L17.230|
                  |L17.226|
;;;177                                 (((exmc_norsram_init_struct->write_timing->asyn_address_holdtime - 1U) << SNTCFG_AHLD_OFFSET ) & EXMC_SNWTCFG_WAHLD)|
;;;178                                 (((exmc_norsram_init_struct->write_timing->asyn_data_setuptime - 1U) << SNTCFG_DSET_OFFSET) & EXMC_SNWTCFG_WDSET) |
;;;179                                  exmc_norsram_init_struct->write_timing->asyn_access_mode);
;;;180        }else{
;;;181            snwtcfg = BANK0_SNWTCFG_RESET;
0000e2  f06f4370          MVN      r3,#0xf0000000
                  |L17.230|
;;;182        }
;;;183    
;;;184        /* configure the registers */
;;;185        EXMC_SNCTL(exmc_norsram_init_struct->norsram_region) = snctl;
0000e6  6804              LDR      r4,[r0,#0]
0000e8  00e4              LSLS     r4,r4,#3
0000ea  f1a444c0          SUB      r4,r4,#0x60000000
0000ee  6021              STR      r1,[r4,#0]
;;;186        EXMC_SNTCFG(exmc_norsram_init_struct->norsram_region) = sntcfg;
0000f0  6804              LDR      r4,[r0,#0]
0000f2  00e4              LSLS     r4,r4,#3
0000f4  f1a444c0          SUB      r4,r4,#0x60000000
0000f8  6062              STR      r2,[r4,#4]
;;;187        EXMC_SNWTCFG(exmc_norsram_init_struct->norsram_region) = snwtcfg;
0000fa  6804              LDR      r4,[r0,#0]
0000fc  00e4              LSLS     r4,r4,#3
0000fe  f1a444c0          SUB      r4,r4,#0x60000000
000102  f8c43104          STR      r3,[r4,#0x104]
;;;188    }
000106  bd70              POP      {r4-r6,pc}
;;;189    
                          ENDP

                  |L17.264|
                          DCD      0xfff70081

                          AREA ||i.exmc_norsram_struct_para_init||, CODE, READONLY, ALIGN=1

                  exmc_norsram_struct_para_init PROC
;;;195    */
;;;196    void exmc_norsram_struct_para_init(exmc_norsram_parameter_struct* exmc_norsram_init_struct)
000000  2100              MOVS     r1,#0
;;;197    {
;;;198        /* configure the structure with default value */
;;;199        exmc_norsram_init_struct->norsram_region = EXMC_BANK0_NORSRAM_REGION0;
000002  6001              STR      r1,[r0,#0]
;;;200        exmc_norsram_init_struct->address_data_mux = ENABLE;
000004  2101              MOVS     r1,#1
000006  6301              STR      r1,[r0,#0x30]
;;;201        exmc_norsram_init_struct->memory_type = EXMC_MEMORY_TYPE_SRAM;
000008  2100              MOVS     r1,#0
00000a  62c1              STR      r1,[r0,#0x2c]
;;;202        exmc_norsram_init_struct->databus_width = EXMC_NOR_DATABUS_WIDTH_8B;
00000c  6281              STR      r1,[r0,#0x28]
;;;203        exmc_norsram_init_struct->burst_mode = DISABLE;
00000e  6241              STR      r1,[r0,#0x24]
;;;204        exmc_norsram_init_struct->nwait_polarity = EXMC_NWAIT_POLARITY_LOW;
000010  6201              STR      r1,[r0,#0x20]
;;;205        exmc_norsram_init_struct->wrap_burst_mode = DISABLE;
000012  61c1              STR      r1,[r0,#0x1c]
;;;206        exmc_norsram_init_struct->nwait_config = EXMC_NWAIT_CONFIG_BEFORE;
000014  6181              STR      r1,[r0,#0x18]
;;;207        exmc_norsram_init_struct->memory_write = ENABLE;
000016  2101              MOVS     r1,#1
000018  6141              STR      r1,[r0,#0x14]
;;;208        exmc_norsram_init_struct->nwait_signal = ENABLE;
00001a  6101              STR      r1,[r0,#0x10]
;;;209        exmc_norsram_init_struct->extended_mode = DISABLE;
00001c  2100              MOVS     r1,#0
00001e  6081              STR      r1,[r0,#8]
;;;210        exmc_norsram_init_struct->asyn_wait = DISABLE;
000020  60c1              STR      r1,[r0,#0xc]
;;;211        exmc_norsram_init_struct->write_mode = EXMC_ASYN_WRITE;
000022  6041              STR      r1,[r0,#4]
;;;212    
;;;213        /* read/write timing configure */
;;;214        exmc_norsram_init_struct->read_write_timing->asyn_address_setuptime = 0xFU;
000024  210f              MOVS     r1,#0xf
000026  6b42              LDR      r2,[r0,#0x34]
000028  6191              STR      r1,[r2,#0x18]
;;;215        exmc_norsram_init_struct->read_write_timing->asyn_address_holdtime = 0xFU;
00002a  6b42              LDR      r2,[r0,#0x34]
00002c  6151              STR      r1,[r2,#0x14]
;;;216        exmc_norsram_init_struct->read_write_timing->asyn_data_setuptime = 0xFFU;
00002e  21ff              MOVS     r1,#0xff
000030  6b42              LDR      r2,[r0,#0x34]
000032  6111              STR      r1,[r2,#0x10]
;;;217        exmc_norsram_init_struct->read_write_timing->bus_latency = 0xFU;
000034  210f              MOVS     r1,#0xf
000036  6b42              LDR      r2,[r0,#0x34]
000038  60d1              STR      r1,[r2,#0xc]
;;;218        exmc_norsram_init_struct->read_write_timing->syn_clk_division = EXMC_SYN_CLOCK_RATIO_16_CLK;
00003a  0509              LSLS     r1,r1,#20
00003c  6b42              LDR      r2,[r0,#0x34]
00003e  6091              STR      r1,[r2,#8]
;;;219        exmc_norsram_init_struct->read_write_timing->syn_data_latency = EXMC_DATALAT_17_CLK;
000040  0109              LSLS     r1,r1,#4
000042  6b42              LDR      r2,[r0,#0x34]
000044  6051              STR      r1,[r2,#4]
;;;220        exmc_norsram_init_struct->read_write_timing->asyn_access_mode = EXMC_ACCESS_MODE_A;
000046  2100              MOVS     r1,#0
000048  6b42              LDR      r2,[r0,#0x34]
00004a  6011              STR      r1,[r2,#0]
;;;221    
;;;222        /* write timing configure, when extended mode is used */
;;;223        exmc_norsram_init_struct->write_timing->asyn_address_setuptime = 0xFU;
00004c  210f              MOVS     r1,#0xf
00004e  6b82              LDR      r2,[r0,#0x38]
000050  6191              STR      r1,[r2,#0x18]
;;;224        exmc_norsram_init_struct->write_timing->asyn_address_holdtime = 0xFU;
000052  6b82              LDR      r2,[r0,#0x38]
000054  6151              STR      r1,[r2,#0x14]
;;;225        exmc_norsram_init_struct->write_timing->asyn_data_setuptime = 0xFFU;
000056  21ff              MOVS     r1,#0xff
000058  6b82              LDR      r2,[r0,#0x38]
00005a  6111              STR      r1,[r2,#0x10]
;;;226        exmc_norsram_init_struct->write_timing->bus_latency = 0xFU;
00005c  210f              MOVS     r1,#0xf
00005e  6b82              LDR      r2,[r0,#0x38]
000060  60d1              STR      r1,[r2,#0xc]
;;;227        exmc_norsram_init_struct->write_timing->asyn_access_mode = EXMC_ACCESS_MODE_A;
000062  2100              MOVS     r1,#0
000064  6b82              LDR      r2,[r0,#0x38]
000066  6011              STR      r1,[r2,#0]
;;;228    }
000068  4770              BX       lr
;;;229    
                          ENDP


                          AREA ||i.exmc_pccard_deinit||, CODE, READONLY, ALIGN=2

                  exmc_pccard_deinit PROC
;;;399    */
;;;400    void exmc_pccard_deinit(void)
000000  2018              MOVS     r0,#0x18
;;;401    {
;;;402        /* EXMC_BANK3_PCCARD */
;;;403        EXMC_NPCTL3 = BANK3_NPCTL_RESET;
000002  4908              LDR      r1,|L19.36|
000004  6008              STR      r0,[r1,#0]
;;;404        EXMC_NPINTEN3 = BANK3_NPINTEN_RESET;
000006  2040              MOVS     r0,#0x40
000008  0609              LSLS     r1,r1,#24
00000a  f8c100a4          STR      r0,[r1,#0xa4]
;;;405        EXMC_NPCTCFG3 = BANK3_NPCTCFG_RESET;
00000e  f04f30fc          MOV      r0,#0xfcfcfcfc
000012  4904              LDR      r1,|L19.36|
000014  3108              ADDS     r1,r1,#8
000016  6008              STR      r0,[r1,#0]
;;;406        EXMC_NPATCFG3 = BANK3_NPATCFG_RESET;
000018  1d09              ADDS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;407        EXMC_PIOTCFG3 = BANK3_PIOTCFG3_RESET;
00001c  1d09              ADDS     r1,r1,#4
00001e  6008              STR      r0,[r1,#0]
;;;408    }
000020  4770              BX       lr
;;;409    
                          ENDP

000022  0000              DCW      0x0000
                  |L19.36|
                          DCD      0xa00000a0

                          AREA ||i.exmc_pccard_disable||, CODE, READONLY, ALIGN=2

                  exmc_pccard_disable PROC
;;;491    */
;;;492    void exmc_pccard_disable(void)
000000  4804              LDR      r0,|L20.20|
;;;493    {
;;;494       EXMC_NPCTL3 &= ~EXMC_NPCTL_NDBKEN;
000002  6800              LDR      r0,[r0,#0]
000004  f0200004          BIC      r0,r0,#4
000008  f04f4120          MOV      r1,#0xa0000000
00000c  f8c100a0          STR      r0,[r1,#0xa0]
;;;495    }
000010  4770              BX       lr
;;;496    
                          ENDP

000012  0000              DCW      0x0000
                  |L20.20|
                          DCD      0xa00000a0

                          AREA ||i.exmc_pccard_enable||, CODE, READONLY, ALIGN=2

                  exmc_pccard_enable PROC
;;;480    */
;;;481    void exmc_pccard_enable(void)
000000  4804              LDR      r0,|L21.20|
;;;482    {
;;;483        EXMC_NPCTL3 |= EXMC_NPCTL_NDBKEN;
000002  6800              LDR      r0,[r0,#0]
000004  f0400004          ORR      r0,r0,#4
000008  f04f4120          MOV      r1,#0xa0000000
00000c  f8c100a0          STR      r0,[r1,#0xa0]
;;;484    }
000010  4770              BX       lr
;;;485    
                          ENDP

000012  0000              DCW      0x0000
                  |L21.20|
                          DCD      0xa00000a0

                          AREA ||i.exmc_pccard_init||, CODE, READONLY, ALIGN=2

                  exmc_pccard_init PROC
;;;421    */
;;;422    void exmc_pccard_init(exmc_pccard_parameter_struct* exmc_pccard_init_struct)
000000  2210              MOVS     r2,#0x10
;;;423    {
;;;424        /* configure the EXMC bank3 PC card control register */
;;;425        EXMC_NPCTL3 = (uint32_t)(exmc_pccard_init_struct->wait_feature << NPCTL_NDWTEN_OFFSET) |
000002  6881              LDR      r1,[r0,#8]
000004  ea420141          ORR      r1,r2,r1,LSL #1
000008  6842              LDR      r2,[r0,#4]
00000a  4311              ORRS     r1,r1,r2
00000c  6802              LDR      r2,[r0,#0]
00000e  4311              ORRS     r1,r1,r2
000010  4a2a              LDR      r2,|L22.188|
000012  6011              STR      r1,[r2,#0]
;;;426                                 EXMC_NAND_DATABUS_WIDTH_16B |  
;;;427                                 exmc_pccard_init_struct->ctr_latency |
;;;428                                 exmc_pccard_init_struct->atr_latency ;
;;;429    
;;;430        /* configure the EXMC bank3 PC card common space timing configuration register */
;;;431        EXMC_NPCTCFG3 = (uint32_t)((exmc_pccard_init_struct->common_space_timing->setuptime - 1U)& EXMC_NPCTCFG_COMSET ) |
000014  68c1              LDR      r1,[r0,#0xc]
000016  7b09              LDRB     r1,[r1,#0xc]
000018  1e49              SUBS     r1,r1,#1
00001a  b2c9              UXTB     r1,r1
00001c  68c2              LDR      r2,[r0,#0xc]
00001e  6892              LDR      r2,[r2,#8]
000020  1e52              SUBS     r2,r2,#1
000022  f44f437f          MOV      r3,#0xff00
000026  ea032202          AND      r2,r3,r2,LSL #8
00002a  4311              ORRS     r1,r1,r2
00002c  68c2              LDR      r2,[r0,#0xc]
00002e  8892              LDRH     r2,[r2,#4]
000030  021b              LSLS     r3,r3,#8
000032  ea034202          AND      r2,r3,r2,LSL #16
000036  4311              ORRS     r1,r1,r2
000038  68c2              LDR      r2,[r0,#0xc]
00003a  7812              LDRB     r2,[r2,#0]
00003c  1e52              SUBS     r2,r2,#1
00003e  021b              LSLS     r3,r3,#8
000040  ea036202          AND      r2,r3,r2,LSL #24
000044  4311              ORRS     r1,r1,r2
000046  4a1d              LDR      r2,|L22.188|
000048  3208              ADDS     r2,r2,#8
00004a  6011              STR      r1,[r2,#0]
;;;432                                  (((exmc_pccard_init_struct->common_space_timing->waittime - 1U) << NPCTCFG_COMWAIT_OFFSET) & EXMC_NPCTCFG_COMWAIT ) |
;;;433                                  ((exmc_pccard_init_struct->common_space_timing->holdtime << NPCTCFG_COMHLD_OFFSET) & EXMC_NPCTCFG_COMHLD ) |
;;;434                                  (((exmc_pccard_init_struct->common_space_timing->databus_hiztime - 1U) << NPCTCFG_COMHIZ_OFFSET) & EXMC_NPCTCFG_COMHIZ );
;;;435    
;;;436        /* configure the EXMC bank3 PC card attribute space timing configuration register */
;;;437        EXMC_NPATCFG3 = (uint32_t)((exmc_pccard_init_struct->attribute_space_timing->setuptime - 1U) & EXMC_NPATCFG_ATTSET ) |
00004c  6901              LDR      r1,[r0,#0x10]
00004e  7b09              LDRB     r1,[r1,#0xc]
000050  1e49              SUBS     r1,r1,#1
000052  b2c9              UXTB     r1,r1
000054  6902              LDR      r2,[r0,#0x10]
000056  6892              LDR      r2,[r2,#8]
000058  1e52              SUBS     r2,r2,#1
00005a  0c1b              LSRS     r3,r3,#16
00005c  ea032202          AND      r2,r3,r2,LSL #8
000060  4311              ORRS     r1,r1,r2
000062  6902              LDR      r2,[r0,#0x10]
000064  8892              LDRH     r2,[r2,#4]
000066  021b              LSLS     r3,r3,#8
000068  ea034202          AND      r2,r3,r2,LSL #16
00006c  4311              ORRS     r1,r1,r2
00006e  6902              LDR      r2,[r0,#0x10]
000070  7812              LDRB     r2,[r2,#0]
000072  1e52              SUBS     r2,r2,#1
000074  021b              LSLS     r3,r3,#8
000076  ea036202          AND      r2,r3,r2,LSL #24
00007a  4311              ORRS     r1,r1,r2
00007c  4a0f              LDR      r2,|L22.188|
00007e  320c              ADDS     r2,r2,#0xc
000080  6011              STR      r1,[r2,#0]
;;;438                                  (((exmc_pccard_init_struct->attribute_space_timing->waittime - 1U) << NPATCFG_ATTWAIT_OFFSET) & EXMC_NPATCFG_ATTWAIT ) |
;;;439                                  ((exmc_pccard_init_struct->attribute_space_timing->holdtime << NPATCFG_ATTHLD_OFFSET) & EXMC_NPATCFG_ATTHLD )|
;;;440                                  (((exmc_pccard_init_struct->attribute_space_timing->databus_hiztime -1U) << NPATCFG_ATTHIZ_OFFSET) & EXMC_NPATCFG_ATTHIZ );
;;;441    
;;;442        /* configure the EXMC bank3 PC card io space timing configuration register */
;;;443        EXMC_PIOTCFG3 = (uint32_t)((exmc_pccard_init_struct->io_space_timing->setuptime - 1U) & EXMC_PIOTCFG3_IOSET ) |
000082  6941              LDR      r1,[r0,#0x14]
000084  7b09              LDRB     r1,[r1,#0xc]
000086  1e49              SUBS     r1,r1,#1
000088  b2c9              UXTB     r1,r1
00008a  6942              LDR      r2,[r0,#0x14]
00008c  6892              LDR      r2,[r2,#8]
00008e  1e52              SUBS     r2,r2,#1
000090  0c1b              LSRS     r3,r3,#16
000092  ea032202          AND      r2,r3,r2,LSL #8
000096  4311              ORRS     r1,r1,r2
000098  6942              LDR      r2,[r0,#0x14]
00009a  8892              LDRH     r2,[r2,#4]
00009c  021b              LSLS     r3,r3,#8
00009e  ea034202          AND      r2,r3,r2,LSL #16
0000a2  4311              ORRS     r1,r1,r2
0000a4  6942              LDR      r2,[r0,#0x14]
0000a6  7812              LDRB     r2,[r2,#0]
0000a8  021b              LSLS     r3,r3,#8
0000aa  ea036202          AND      r2,r3,r2,LSL #24
0000ae  4311              ORRS     r1,r1,r2
0000b0  f04f4220          MOV      r2,#0xa0000000
0000b4  f8c210b0          STR      r1,[r2,#0xb0]
;;;444                                  (((exmc_pccard_init_struct->io_space_timing->waittime - 1U) << PIOTCFG_IOWAIT_OFFSET) & EXMC_PIOTCFG3_IOWAIT ) |
;;;445                                  ((exmc_pccard_init_struct->io_space_timing->holdtime << PIOTCFG_IOHLD_OFFSET) & EXMC_PIOTCFG3_IOHLD )|
;;;446                                  ((exmc_pccard_init_struct->io_space_timing->databus_hiztime << PIOTCFG_IOHIZ_OFFSET) & EXMC_PIOTCFG3_IOHIZ );
;;;447    }
0000b8  4770              BX       lr
;;;448    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L22.188|
                          DCD      0xa00000a0

                          AREA ||i.exmc_pccard_struct_para_init||, CODE, READONLY, ALIGN=1

                  exmc_pccard_struct_para_init PROC
;;;454    */
;;;455    void exmc_pccard_struct_para_init(exmc_pccard_parameter_struct* exmc_pccard_init_struct)
000000  2100              MOVS     r1,#0
;;;456    {
;;;457        /* configure the structure with default value */
;;;458        exmc_pccard_init_struct->wait_feature = DISABLE;
000002  6081              STR      r1,[r0,#8]
;;;459        exmc_pccard_init_struct->ctr_latency = 0x0U;
000004  6041              STR      r1,[r0,#4]
;;;460        exmc_pccard_init_struct->atr_latency = 0x0U;
000006  6001              STR      r1,[r0,#0]
;;;461        exmc_pccard_init_struct->common_space_timing->setuptime = 0xFCU;
000008  21fc              MOVS     r1,#0xfc
00000a  68c2              LDR      r2,[r0,#0xc]
00000c  60d1              STR      r1,[r2,#0xc]
;;;462        exmc_pccard_init_struct->common_space_timing->waittime = 0xFCU;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  6091              STR      r1,[r2,#8]
;;;463        exmc_pccard_init_struct->common_space_timing->holdtime = 0xFCU;
000012  68c2              LDR      r2,[r0,#0xc]
000014  6051              STR      r1,[r2,#4]
;;;464        exmc_pccard_init_struct->common_space_timing->databus_hiztime = 0xFCU;
000016  68c2              LDR      r2,[r0,#0xc]
000018  6011              STR      r1,[r2,#0]
;;;465        exmc_pccard_init_struct->attribute_space_timing->setuptime = 0xFCU;
00001a  6902              LDR      r2,[r0,#0x10]
00001c  60d1              STR      r1,[r2,#0xc]
;;;466        exmc_pccard_init_struct->attribute_space_timing->waittime = 0xFCU;
00001e  6902              LDR      r2,[r0,#0x10]
000020  6091              STR      r1,[r2,#8]
;;;467        exmc_pccard_init_struct->attribute_space_timing->holdtime = 0xFCU;
000022  6902              LDR      r2,[r0,#0x10]
000024  6051              STR      r1,[r2,#4]
;;;468        exmc_pccard_init_struct->attribute_space_timing->databus_hiztime = 0xFCU;
000026  6902              LDR      r2,[r0,#0x10]
000028  6011              STR      r1,[r2,#0]
;;;469        exmc_pccard_init_struct->io_space_timing->setuptime = 0xFCU;
00002a  6942              LDR      r2,[r0,#0x14]
00002c  60d1              STR      r1,[r2,#0xc]
;;;470        exmc_pccard_init_struct->io_space_timing->waittime = 0xFCU;
00002e  6942              LDR      r2,[r0,#0x14]
000030  6091              STR      r1,[r2,#8]
;;;471        exmc_pccard_init_struct->io_space_timing->holdtime = 0xFCU;
000032  6942              LDR      r2,[r0,#0x14]
000034  6051              STR      r1,[r2,#4]
;;;472        exmc_pccard_init_struct->io_space_timing->databus_hiztime = 0xFCU;
000036  6942              LDR      r2,[r0,#0x14]
000038  6011              STR      r1,[r2,#0]
;;;473    }
00003a  4770              BX       lr
;;;474    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_exmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_exmc_c_39d0925f____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___15_gd32f10x_exmc_c_39d0925f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_gd32f10x_exmc_c_39d0925f____REVSH|
#line 128
|__asm___15_gd32f10x_exmc_c_39d0925f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
