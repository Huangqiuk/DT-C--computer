; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\system_gd32f10x.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\system_gd32f10x.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\system_gd32f10x.crf CMSIS\system_gd32f10x.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;194    */
;;;195    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;196    {
;;;197        uint32_t scss;
;;;198        uint32_t pllsel, predv0sel, pllmf, ck_src;
;;;199    #ifdef  GD32F10X_CL
;;;200        uint32_t predv0, predv1, pll1mf;
;;;201    #endif /* GD32F10X_CL */
;;;202    
;;;203        scss = GET_BITS(RCU_CFG0, 2, 3);
000002  4d1e              LDR      r5,|L1.124|
000004  686d              LDR      r5,[r5,#4]
000006  f3c50481          UBFX     r4,r5,#2,#2
;;;204    
;;;205        switch (scss)
00000a  b124              CBZ      r4,|L1.22|
00000c  2c01              CMP      r4,#1
00000e  d006              BEQ      |L1.30|
000010  2c02              CMP      r4,#2
000012  d12d              BNE      |L1.112|
000014  e007              B        |L1.38|
                  |L1.22|
;;;206        {
;;;207            /* IRC8M is selected as CK_SYS */
;;;208            case SEL_IRC8M:
;;;209                SystemCoreClock = IRC8M_VALUE;
000016  4d1a              LDR      r5,|L1.128|
000018  4e1a              LDR      r6,|L1.132|
00001a  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;210                break;
00001c  e02c              B        |L1.120|
                  |L1.30|
;;;211                
;;;212            /* HXTAL is selected as CK_SYS */
;;;213            case SEL_HXTAL:
;;;214                SystemCoreClock = HXTAL_VALUE;
00001e  4d18              LDR      r5,|L1.128|
000020  4e18              LDR      r6,|L1.132|
000022  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;215                break;
000024  e028              B        |L1.120|
                  |L1.38|
;;;216                
;;;217            /* PLL is selected as CK_SYS */
;;;218            case SEL_PLL:
;;;219                /* PLL clock source selection, HXTAL or IRC8M/2 */
;;;220                pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
000026  4d15              LDR      r5,|L1.124|
000028  686d              LDR      r5,[r5,#4]
00002a  f4053280          AND      r2,r5,#0x10000
;;;221    
;;;222    
;;;223                if(RCU_PLLSRC_IRC8M_DIV2 == pllsel){
00002e  b90a              CBNZ     r2,|L1.52|
;;;224                    /* PLL clock source is IRC8M/2 */
;;;225                    ck_src = IRC8M_VALUE / 2U;
000030  4915              LDR      r1,|L1.136|
000032  e008              B        |L1.70|
                  |L1.52|
;;;226                }else{
;;;227                    /* PLL clock source is HXTAL */
;;;228                    ck_src = HXTAL_VALUE;
000034  4912              LDR      r1,|L1.128|
;;;229                
;;;230    #if (defined(GD32F10X_MD) || defined(GD32F10X_HD) || defined(GD32F10X_XD))
;;;231                    predv0sel = (RCU_CFG0 & RCU_CFG0_PREDV0);
000036  4d11              LDR      r5,|L1.124|
000038  686d              LDR      r5,[r5,#4]
00003a  f4053300          AND      r3,r5,#0x20000
;;;232    
;;;233                    /* PREDV0 input source clock divided by 2 */
;;;234                    if(RCU_CFG0_PREDV0 == predv0sel){
00003e  f5b33f00          CMP      r3,#0x20000
000042  d100              BNE      |L1.70|
;;;235                        ck_src = HXTAL_VALUE / 2U;
000044  1049              ASRS     r1,r1,#1
                  |L1.70|
;;;236                    }
;;;237    #elif defined(GD32F10X_CL)
;;;238                    predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
;;;239    
;;;240                    /* source clock use PLL1 */
;;;241                    if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
;;;242                        predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
;;;243                        pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
;;;244                        if(17U == pll1mf){
;;;245                            pll1mf = 20U;
;;;246                        }
;;;247                        ck_src = (ck_src / predv1) * pll1mf;
;;;248                    }
;;;249                    predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
;;;250                    ck_src /= predv0;
;;;251    #endif /* GD32F10X_MD and GD32F10X_HD and GD32F10X_XD */
;;;252                }
;;;253    
;;;254                /* PLL multiplication factor */
;;;255                pllmf = GET_BITS(RCU_CFG0, 18, 21);
000046  4d0d              LDR      r5,|L1.124|
000048  686d              LDR      r5,[r5,#4]
00004a  f3c54083          UBFX     r0,r5,#18,#4
;;;256    
;;;257                if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
00004e  4d0b              LDR      r5,|L1.124|
000050  686d              LDR      r5,[r5,#4]
000052  f0056500          AND      r5,r5,#0x8000000
000056  b10d              CBZ      r5,|L1.92|
;;;258                    pllmf |= 0x10U;
000058  f0400010          ORR      r0,r0,#0x10
                  |L1.92|
;;;259                }
;;;260    
;;;261                if(pllmf >= 15U){
00005c  280f              CMP      r0,#0xf
00005e  d301              BCC      |L1.100|
;;;262                    pllmf += 1U;
000060  1c40              ADDS     r0,r0,#1
000062  e000              B        |L1.102|
                  |L1.100|
;;;263                }else{
;;;264                    pllmf += 2U;
000064  1c80              ADDS     r0,r0,#2
                  |L1.102|
;;;265                }
;;;266    
;;;267                SystemCoreClock = ck_src * pllmf;
000066  fb01f500          MUL      r5,r1,r0
00006a  4e06              LDR      r6,|L1.132|
00006c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;268    
;;;269    #ifdef GD32F10X_CL
;;;270                if(15U == pllmf){
;;;271                    /* PLL source clock multiply by 6.5 */
;;;272                    SystemCoreClock = ck_src * 6U + ck_src / 2U;
;;;273                }
;;;274    #endif /* GD32F10X_CL */
;;;275    
;;;276                break;
00006e  e003              B        |L1.120|
                  |L1.112|
;;;277    
;;;278            /* IRC8M is selected as CK_SYS */
;;;279            default:
;;;280                SystemCoreClock = IRC8M_VALUE;
000070  4d03              LDR      r5,|L1.128|
000072  4e04              LDR      r6,|L1.132|
000074  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;281                break;
000076  bf00              NOP      
                  |L1.120|
000078  bf00              NOP                            ;210
;;;282        }
;;;283    }
00007a  bd70              POP      {r4-r6,pc}
;;;284    
                          ENDP

                  |L1.124|
                          DCD      0x40021000
                  |L1.128|
                          DCD      0x007a1200
                  |L1.132|
                          DCD      SystemCoreClock
                  |L1.136|
                          DCD      0x003d0900

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;144    */
;;;145    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;146    {
;;;147        /* reset the RCC clock configuration to the default reset state */
;;;148        /* enable IRC8M */
;;;149        RCU_CTL |= RCU_CTL_IRC8MEN;
000002  4814              LDR      r0,|L2.84|
000004  6800              LDR      r0,[r0,#0]
000006  f0400001          ORR      r0,r0,#1
00000a  4912              LDR      r1,|L2.84|
00000c  6008              STR      r0,[r1,#0]
;;;150        
;;;151        /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
;;;152        RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
00000e  4608              MOV      r0,r1
000010  6840              LDR      r0,[r0,#4]
000012  4911              LDR      r1,|L2.88|
000014  4008              ANDS     r0,r0,r1
000016  490f              LDR      r1,|L2.84|
000018  6048              STR      r0,[r1,#4]
;;;153                      RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);
;;;154    
;;;155        /* reset HXTALEN, CKMEN, PLLEN bits */
;;;156        RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  490f              LDR      r1,|L2.92|
000020  4008              ANDS     r0,r0,r1
000022  490c              LDR      r1,|L2.84|
000024  6008              STR      r0,[r1,#0]
;;;157    
;;;158        /* Reset HXTALBPS bit */
;;;159        RCU_CTL &= ~(RCU_CTL_HXTALBPS);
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  f4202080          BIC      r0,r0,#0x40000
00002e  6008              STR      r0,[r1,#0]
;;;160    
;;;161        /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
;;;162        
;;;163    #ifdef GD32F10X_CL
;;;164        RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
;;;165                      RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
;;;166    
;;;167        RCU_CFG1 = 0x00000000U;
;;;168    #else
;;;169        RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0 | RCU_CFG0_PLLMF |
000030  4608              MOV      r0,r1
000032  6840              LDR      r0,[r0,#4]
000034  490a              LDR      r1,|L2.96|
000036  4008              ANDS     r0,r0,r1
000038  4906              LDR      r1,|L2.84|
00003a  6048              STR      r0,[r1,#4]
;;;170                      RCU_CFG0_USBDPSC | RCU_CFG0_PLLMF_4);
;;;171    #endif /* GD32F10X_CL */
;;;172    
;;;173    #if (defined(GD32F10X_MD) || defined(GD32F10X_HD) || defined(GD32F10X_XD))
;;;174        /* reset HXTALEN, CKMEN and PLLEN bits */
;;;175        RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]
000040  4906              LDR      r1,|L2.92|
000042  4008              ANDS     r0,r0,r1
000044  4903              LDR      r1,|L2.84|
000046  6008              STR      r0,[r1,#0]
;;;176        /* disable all interrupts */
;;;177        RCU_INT = 0x009F0000U;
000048  f44f001f          MOV      r0,#0x9f0000
00004c  6088              STR      r0,[r1,#8]
;;;178    #elif defined(GD32F10X_CL)
;;;179        /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
;;;180        RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
;;;181        /* disable all interrupts */
;;;182        RCU_INT = 0x00FF0000U;
;;;183    #endif
;;;184    
;;;185        /* Configure the System clock source, PLL Multiplier, AHB/APBx prescalers and Flash settings */
;;;186        system_clock_config();
00004e  f7fffffe          BL       system_clock_config
;;;187    }
000052  bd10              POP      {r4,pc}
;;;188    
                          ENDP

                  |L2.84|
                          DCD      0x40021000
                  |L2.88|
                          DCD      0xe8ff000c
                  |L2.92|
                          DCD      0xfef6ffff
                  |L2.96|
                          DCD      0xf700ffff

                          AREA ||i.system_clock_108m_hxtal||, CODE, READONLY, ALIGN=2

                  system_clock_108m_hxtal PROC
;;;790    */
;;;791    static void system_clock_108m_hxtal(void)
000000  2000              MOVS     r0,#0
;;;792    {
;;;793        uint32_t timeout   = 0U;
;;;794        uint32_t stab_flag = 0U;
000002  2100              MOVS     r1,#0
;;;795    
;;;796        /* enable HXTAL */
;;;797        RCU_CTL |= RCU_CTL_HXTALEN;
000004  4a2c              LDR      r2,|L3.184|
000006  6812              LDR      r2,[r2,#0]
000008  f4423280          ORR      r2,r2,#0x10000
00000c  4b2a              LDR      r3,|L3.184|
00000e  601a              STR      r2,[r3,#0]
;;;798    
;;;799        /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
;;;800        do{
000010  bf00              NOP      
                  |L3.18|
;;;801            timeout++;
000012  1c40              ADDS     r0,r0,#1
;;;802            stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
000014  4a28              LDR      r2,|L3.184|
000016  6812              LDR      r2,[r2,#0]
000018  f4023100          AND      r1,r2,#0x20000
;;;803        }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
00001c  b919              CBNZ     r1,|L3.38|
00001e  f64f72ff          MOV      r2,#0xffff
000022  4290              CMP      r0,r2
000024  d1f5              BNE      |L3.18|
                  |L3.38|
;;;804    
;;;805        /* if fail */
;;;806        if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
000026  4a24              LDR      r2,|L3.184|
000028  6812              LDR      r2,[r2,#0]
00002a  f4023200          AND      r2,r2,#0x20000
00002e  b90a              CBNZ     r2,|L3.52|
;;;807            while(1){
000030  bf00              NOP      
                  |L3.50|
000032  e7fe              B        |L3.50|
                  |L3.52|
;;;808            }
;;;809        }
;;;810    
;;;811        /* HXTAL is stable */
;;;812        /* AHB = SYSCLK */
;;;813        RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
000034  4a20              LDR      r2,|L3.184|
000036  6852              LDR      r2,[r2,#4]
000038  4b1f              LDR      r3,|L3.184|
00003a  605a              STR      r2,[r3,#4]
;;;814        /* APB2 = AHB/1 */
;;;815        RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
00003c  461a              MOV      r2,r3
00003e  6852              LDR      r2,[r2,#4]
000040  605a              STR      r2,[r3,#4]
;;;816        /* APB1 = AHB/2 */
;;;817        RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
000042  461a              MOV      r2,r3
000044  6852              LDR      r2,[r2,#4]
000046  f4426280          ORR      r2,r2,#0x400
00004a  605a              STR      r2,[r3,#4]
;;;818    
;;;819    #if (defined(GD32F10X_MD) || defined(GD32F10X_HD) || defined(GD32F10X_XD))
;;;820        /* select HXTAL/2 as clock source */
;;;821        RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0);
00004c  461a              MOV      r2,r3
00004e  6852              LDR      r2,[r2,#4]
000050  f4223240          BIC      r2,r2,#0x30000
000054  605a              STR      r2,[r3,#4]
;;;822        RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_CFG0_PREDV0);
000056  461a              MOV      r2,r3
000058  6852              LDR      r2,[r2,#4]
00005a  f4423240          ORR      r2,r2,#0x30000
00005e  605a              STR      r2,[r3,#4]
;;;823    
;;;824        /* CK_PLL = (CK_HXTAL/2) * 27 = 108 MHz */
;;;825        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
000060  461a              MOV      r2,r3
000062  6852              LDR      r2,[r2,#4]
000064  4b15              LDR      r3,|L3.188|
000066  401a              ANDS     r2,r2,r3
000068  4b13              LDR      r3,|L3.184|
00006a  605a              STR      r2,[r3,#4]
;;;826        RCU_CFG0 |= RCU_PLL_MUL27;
00006c  461a              MOV      r2,r3
00006e  6852              LDR      r2,[r2,#4]
000070  4b13              LDR      r3,|L3.192|
000072  431a              ORRS     r2,r2,r3
000074  4b10              LDR      r3,|L3.184|
000076  605a              STR      r2,[r3,#4]
;;;827    
;;;828    #elif defined(GD32F10X_CL)
;;;829        /* CK_PLL = (CK_PREDIV0) * 27 = 108 MHz */ 
;;;830        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
;;;831        RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL27);
;;;832    
;;;833        /* CK_PREDIV0 = (CK_HXTAL)/5 *8 /10 = 4 MHz */ 
;;;834        RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV1 | RCU_CFG1_PREDV0);
;;;835        RCU_CFG1 |= (RCU_PREDV0SRC_CKPLL1 | RCU_PLL1_MUL8 | RCU_PREDV1_DIV5 | RCU_PREDV0_DIV10);
;;;836    
;;;837        /* enable PLL1 */
;;;838        RCU_CTL |= RCU_CTL_PLL1EN;
;;;839        /* wait till PLL1 is ready */
;;;840        while(0U == (RCU_CTL & RCU_CTL_PLL1STB)){
;;;841        }
;;;842    #endif /* GD32F10X_MD and GD32F10X_HD and GD32F10X_XD */
;;;843    
;;;844        /* enable PLL */
;;;845        RCU_CTL |= RCU_CTL_PLLEN;
000078  461a              MOV      r2,r3
00007a  6812              LDR      r2,[r2,#0]
00007c  f0427280          ORR      r2,r2,#0x1000000
000080  601a              STR      r2,[r3,#0]
;;;846    
;;;847        /* wait until PLL is stable */
;;;848        while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
000082  bf00              NOP      
                  |L3.132|
000084  4a0c              LDR      r2,|L3.184|
000086  6812              LDR      r2,[r2,#0]
000088  f0027200          AND      r2,r2,#0x2000000
00008c  2a00              CMP      r2,#0
00008e  d0f9              BEQ      |L3.132|
;;;849        }
;;;850    
;;;851        /* select PLL as system clock */
;;;852        RCU_CFG0 &= ~RCU_CFG0_SCS;
000090  4a09              LDR      r2,|L3.184|
000092  6852              LDR      r2,[r2,#4]
000094  f0220203          BIC      r2,r2,#3
000098  4b07              LDR      r3,|L3.184|
00009a  605a              STR      r2,[r3,#4]
;;;853        RCU_CFG0 |= RCU_CKSYSSRC_PLL;
00009c  461a              MOV      r2,r3
00009e  6852              LDR      r2,[r2,#4]
0000a0  f0420202          ORR      r2,r2,#2
0000a4  605a              STR      r2,[r3,#4]
;;;854    
;;;855        /* wait until PLL is selected as system clock */
;;;856        while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
0000a6  bf00              NOP      
                  |L3.168|
0000a8  4a03              LDR      r2,|L3.184|
0000aa  6852              LDR      r2,[r2,#4]
0000ac  f0020208          AND      r2,r2,#8
0000b0  2a00              CMP      r2,#0
0000b2  d0f9              BEQ      |L3.168|
;;;857        }
;;;858    }
0000b4  4770              BX       lr
;;;859    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L3.184|
                          DCD      0x40021000
                  |L3.188|
                          DCD      0xf7c3ffff
                  |L3.192|
                          DCD      0x08280000

                          AREA ||i.system_clock_config||, CODE, READONLY, ALIGN=1

                  system_clock_config PROC
;;;110    */
;;;111    static void system_clock_config(void)
000000  b510              PUSH     {r4,lr}
;;;112    {
;;;113    #ifdef __SYSTEM_CLOCK_HXTAL
;;;114        system_clock_hxtal();
;;;115    #elif defined (__SYSTEM_CLOCK_24M_PLL_HXTAL)
;;;116        system_clock_24m_hxtal();
;;;117    #elif defined (__SYSTEM_CLOCK_36M_PLL_HXTAL)
;;;118        system_clock_36m_hxtal();
;;;119    #elif defined (__SYSTEM_CLOCK_48M_PLL_HXTAL)
;;;120        system_clock_48m_hxtal();
;;;121    #elif defined (__SYSTEM_CLOCK_56M_PLL_HXTAL)
;;;122        system_clock_56m_hxtal();
;;;123    #elif defined (__SYSTEM_CLOCK_72M_PLL_HXTAL)
;;;124        system_clock_72m_hxtal();
;;;125    #elif defined (__SYSTEM_CLOCK_96M_PLL_HXTAL)
;;;126        system_clock_96m_hxtal();
;;;127    #elif defined (__SYSTEM_CLOCK_108M_PLL_HXTAL)
;;;128        system_clock_108m_hxtal();
000002  f7fffffe          BL       system_clock_108m_hxtal
;;;129    
;;;130    #elif defined (__SYSTEM_CLOCK_48M_PLL_IRC8M)
;;;131        system_clock_48m_irc8m();
;;;132    #elif defined (__SYSTEM_CLOCK_72M_PLL_IRC8M)
;;;133        system_clock_72m_irc8m();
;;;134    #elif defined (__SYSTEM_CLOCK_108M_PLL_IRC8M)
;;;135        system_clock_108m_irc8m();
;;;136    #endif /* __SYSTEM_CLOCK_HXTAL */
;;;137    }
000006  bd10              POP      {r4,pc}
;;;138    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x066ff300

;*** Start embedded assembler ***

#line 1 "CMSIS\\system_gd32f10x.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_system_gd32f10x_c_5d646a67____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___17_system_gd32f10x_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_system_gd32f10x_c_5d646a67____REVSH|
#line 128
|__asm___17_system_gd32f10x_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
