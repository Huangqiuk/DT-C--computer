; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\state.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\state.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\state.crf User\state.c]
                          THUMB

                          AREA ||i.STATE_EnterState||, CODE, READONLY, ALIGN=2

                  STATE_EnterState PROC
;;;2882   // 每个状态的入口处理
;;;2883   void STATE_EnterState(uint32 state)
000000  b510              PUSH     {r4,lr}
;;;2884   {
000002  4604              MOV      r4,r0
;;;2885       // 让当前的状态成为历史
;;;2886       stateCB.preState = stateCB.state;
000004  4832              LDR      r0,|L1.208|
000006  7800              LDRB     r0,[r0,#0]  ; stateCB
000008  4931              LDR      r1,|L1.208|
00000a  7048              STRB     r0,[r1,#1]
;;;2887   
;;;2888       // 设置新的状态
;;;2889       stateCB.state = (STATE_E)state;
00000c  700c              STRB     r4,[r1,#0]
;;;2890   
;;;2891       // 各状态的入口设定
;;;2892       switch (state)
00000e  2c10              CMP      r4,#0x10
000010  d25a              BCS      |L1.200|
000012  e8dff004          TBB      [pc,r4]
000016  0809              DCB      0x08,0x09
000018  2125292d          DCB      0x21,0x25,0x29,0x2d
00001c  31494d3d          DCB      0x31,0x49,0x4d,0x3d
000020  35394145          DCB      0x35,0x39,0x41,0x45
000024  5155              DCB      0x51,0x55
;;;2893       {
;;;2894           // ■■ 空状态 ■■
;;;2895           case STATE_NULL: // 不使用
;;;2896               break;
000026  e050              B        |L1.202|
;;;2897   
;;;2898           case STATE_STANDBY:
;;;2899               STATE_SwitchStep(STEP_NULL);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       STATE_SwitchStep
;;;2900               TIMER_KillTask(TIMER_ID_RECONNECTION);          // 结束重连定时器
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       TIMER_KillTask
;;;2901               TIMER_KillTask(TIMER_ID_RECONNECTION_TIME_OUT); // 结束超时重连定时器
000034  200b              MOVS     r0,#0xb
000036  f7fffffe          BL       TIMER_KillTask
;;;2902               TIMER_KillTask(TIMER_ID_TIME_OUT_DETECTION);    // 结束握手超时定时器
00003a  2005              MOVS     r0,#5
00003c  f7fffffe          BL       TIMER_KillTask
;;;2903               TIMER_KillTask(TIMER_ID_SET_DUT_UI_VER); 
000040  2010              MOVS     r0,#0x10
000042  f7fffffe          BL       TIMER_KillTask
;;;2904               dut_info.dutPowerOnAllow = FALSE;               // 不允许开机，开始接收eco请求
000046  2000              MOVS     r0,#0
000048  4922              LDR      r1,|L1.212|
00004a  f881003c          STRB     r0,[r1,#0x3c]
;;;2905               dut_info.reconnectionFlag = FALSE;              // 清除断电重连标志位
00004e  f881004a          STRB     r0,[r1,#0x4a]
;;;2906               DUTCTRL_PowerOnOff(0);                          // 仪表断电
000052  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2907               break;
000056  e038              B        |L1.202|
;;;2908   
;;;2909           case STATE_GAOBIAO_CAN_UPGRADE:
;;;2910               // 高标can升级
;;;2911               STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_ENTRY);
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       STATE_SwitchStep
;;;2912               break;
00005e  e034              B        |L1.202|
;;;2913   
;;;2914           case STATE_CM_CAN_UPGRADE:
;;;2915               // 切换通用can升级入口
;;;2916              STATE_SwitchStep(STEP_CM_CAN_UPGRADE_ENTRY);
000060  200f              MOVS     r0,#0xf
000062  f7fffffe          BL       STATE_SwitchStep
;;;2917               break;
000066  e030              B        |L1.202|
;;;2918   
;;;2919           case STATE_HUAXIN_CAN_UPGRADE:
;;;2920               // 切换华芯微特can升级入口
;;;2921               STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_ENTRY);
000068  2022              MOVS     r0,#0x22
00006a  f7fffffe          BL       STATE_SwitchStep
;;;2922               break;
00006e  e02c              B        |L1.202|
;;;2923   
;;;2924           case STATE_SEG_CAN_UPGRADE:
;;;2925               // 段码屏、数码管can升级
;;;2926               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_ENTRY);
000070  2030              MOVS     r0,#0x30
000072  f7fffffe          BL       STATE_SwitchStep
;;;2927               break;
000076  e028              B        |L1.202|
;;;2928   
;;;2929           case STATE_KAIYANG_CAN_UPGRADE:
;;;2930               // 开阳can升级入口
;;;2931               STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_ENTRY);
000078  203a              MOVS     r0,#0x3a
00007a  f7fffffe          BL       STATE_SwitchStep
;;;2932               break;
00007e  e024              B        |L1.202|
;;;2933   
;;;2934           // 通用彩屏串口升级
;;;2935           case STATE_CM_UART_BC_UPGRADE:
;;;2936               STATE_SwitchStep(STEP_CM_UART_UPGRADE_ENTRY);
000080  2056              MOVS     r0,#0x56
000082  f7fffffe          BL       STATE_SwitchStep
;;;2937               break;
000086  e020              B        |L1.202|
;;;2938   
;;;2939           // 华芯微特串口升级入口
;;;2940           case STATE_HUAXIN_UART_BC_UPGRADE:
;;;2941               STATE_SwitchStep(STEP_HUAXIN_UART_UPGRADE_ENTRY);
000088  2065              MOVS     r0,#0x65
00008a  f7fffffe          BL       STATE_SwitchStep
;;;2942               break;
00008e  e01c              B        |L1.202|
;;;2943   
;;;2944           // 数码管段码屏串口升级入口
;;;2945           case STATE_CM_UART_SEG_UPGRADE:
;;;2946               // 切换通用uart升级入口
;;;2947               STATE_SwitchStep(STEP_SEG_UART_UPGRADE_ENTRY);
000090  2071              MOVS     r0,#0x71
000092  f7fffffe          BL       STATE_SwitchStep
;;;2948               break;
000096  e018              B        |L1.202|
;;;2949   
;;;2950           case STATE_KAIYANG_UART_BC_UPGRADE:
;;;2951               // 开阳can升级入口
;;;2952               STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_ENTRY);
000098  207a              MOVS     r0,#0x7a
00009a  f7fffffe          BL       STATE_SwitchStep
;;;2953               break;
00009e  e014              B        |L1.202|
;;;2954   
;;;2955           case STATE_LIME_UART_BC_UPGRADE:
;;;2956               // LIME uart升级入口
;;;2957               STATE_SwitchStep(STEP_LIME_UART_UPGRADE_ENTRY);
0000a0  2086              MOVS     r0,#0x86
0000a2  f7fffffe          BL       STATE_SwitchStep
;;;2958               break;
0000a6  e010              B        |L1.202|
;;;2959   
;;;2960           case STATE_SPARROW_CAN_UPGRADE:
;;;2961               // SPARROW_CAN升级入口
;;;2962               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_ENTRY);
0000a8  2030              MOVS     r0,#0x30
0000aa  f7fffffe          BL       STATE_SwitchStep
;;;2963               break;
0000ae  e00c              B        |L1.202|
;;;2964   
;;;2965           case STATE_MEIDI_CAN_UPGRADE:
;;;2966               // SPARROW_CAN升级入口
;;;2967               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_ENTRY);
0000b0  2030              MOVS     r0,#0x30
0000b2  f7fffffe          BL       STATE_SwitchStep
;;;2968               break;
0000b6  e008              B        |L1.202|
;;;2969   
;;;2970           case STATE_IOT_UART_UPGRADE:
;;;2971               // IOT升级入口
;;;2972               STATE_SwitchStep(STEP_IOT_UART_UPGRADE_ENTRY);
0000b8  2090              MOVS     r0,#0x90
0000ba  f7fffffe          BL       STATE_SwitchStep
;;;2973               break;
0000be  e004              B        |L1.202|
;;;2974               
;;;2975           case STATE_IOT_CAN_UPGRADE:
;;;2976               // IOT升级入口
;;;2977               STATE_SwitchStep(STEP_IOT_CAN_UPGRADE_ENTRY);
0000c0  2045              MOVS     r0,#0x45
0000c2  f7fffffe          BL       STATE_SwitchStep
;;;2978               break;
0000c6  e000              B        |L1.202|
                  |L1.200|
;;;2979               
;;;2980           default:
;;;2981               break;
0000c8  bf00              NOP      
                  |L1.202|
0000ca  bf00              NOP                            ;2896
;;;2982       }
;;;2983   }
0000cc  bd10              POP      {r4,pc}
;;;2984   
                          ENDP

0000ce  0000              DCW      0x0000
                  |L1.208|
                          DCD      stateCB
                  |L1.212|
                          DCD      dut_info

                          AREA ||i.STATE_Init||, CODE, READONLY, ALIGN=2

                  STATE_Init PROC
;;;28       
;;;29     void STATE_Init(void)
000000  2001              MOVS     r0,#1
;;;30     {
;;;31         stateCB.preState = STATE_STANDBY;
000002  4902              LDR      r1,|L2.12|
000004  7048              STRB     r0,[r1,#1]
;;;32         stateCB.state = STATE_STANDBY;
000006  7008              STRB     r0,[r1,#0]
;;;33     }
000008  4770              BX       lr
;;;34     
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      stateCB

                          AREA ||i.STATE_Process||, CODE, READONLY, ALIGN=2

                  STATE_Process PROC
;;;2985   // 每个状态下的过程处理
;;;2986   void STATE_Process(void)
000000  b510              PUSH     {r4,lr}
;;;2987   {
;;;2988       switch (stateCB.state)
000002  4842              LDR      r0,|L3.268|
000004  7800              LDRB     r0,[r0,#0]  ; stateCB
000006  2810              CMP      r0,#0x10
000008  d27c              BCS      |L3.260|
00000a  e8dff000          TBB      [pc,r0]
00000e  0809              DCB      0x08,0x09
000010  0a252e37          DCB      0x0a,0x25,0x2e,0x37
000014  401c135e          DCB      0x40,0x1c,0x13,0x5e
000018  5057656c          DCB      0x50,0x57,0x65,0x6c
00001c  7449              DCB      0x74,0x49
;;;2989       {
;;;2990           // ■■ 空状态 ■■
;;;2991           case STATE_NULL:
;;;2992               break;
00001e  e072              B        |L3.262|
;;;2993   
;;;2994           // 待机状态
;;;2995           case STATE_STANDBY:
;;;2996               break;
000020  e071              B        |L3.262|
;;;2997   
;;;2998           // 高标can升级
;;;2999           case STATE_GAOBIAO_CAN_UPGRADE:
;;;3000               CAN_PROTOCOL_Process_DT();      // 迪太升级协议
000022  f7fffffe          BL       CAN_PROTOCOL_Process_DT
;;;3001               CAN_PROTOCOL_Process_GB();      // 高标升级协议
000026  f7fffffe          BL       CAN_PROTOCOL_Process_GB
;;;3002               CAN_TEST_PROTOCOL_Process();    // 测试协议
00002a  f7fffffe          BL       CAN_TEST_PROTOCOL_Process
;;;3003               STEP_Process_GaobiaoCanUpgrade();
00002e  f7fffffe          BL       STEP_Process_GaobiaoCanUpgrade
;;;3004               break;
000032  e068              B        |L3.262|
;;;3005   
;;;3006           // 美的can升级
;;;3007           case STATE_MEIDI_CAN_UPGRADE:
;;;3008               CAN_PROTOCOL_Process_DT();      // 迪太升级协议
000034  f7fffffe          BL       CAN_PROTOCOL_Process_DT
;;;3009               CAN_MD_PROTOCOL_Process();      // 添加app中的3a解析协议
000038  f7fffffe          BL       CAN_MD_PROTOCOL_Process
;;;3010               CAN_TEST_PROTOCOL_Process();    // 测试协议
00003c  f7fffffe          BL       CAN_TEST_PROTOCOL_Process
;;;3011               STEP_Process_MeiDiCanUpgrade();
000040  f7fffffe          BL       STEP_Process_MeiDiCanUpgrade
;;;3012               break;
000044  e05f              B        |L3.262|
;;;3013               
;;;3014           // sparrow can升级
;;;3015           case STATE_SPARROW_CAN_UPGRADE:
;;;3016               CAN_PROTOCOL_Process_DT();      // 迪太升级协议
000046  f7fffffe          BL       CAN_PROTOCOL_Process_DT
;;;3017               CAN_PROTOCOL_Process_3A();      // 添加app中的3a解析协议，升级配置
00004a  f7fffffe          BL       CAN_PROTOCOL_Process_3A
;;;3018               CAN_TEST_PROTOCOL_Process();    // 测试协议
00004e  f7fffffe          BL       CAN_TEST_PROTOCOL_Process
;;;3019               STEP_Process_Sparrow_SegCanUpgrade();
000052  f7fffffe          BL       STEP_Process_Sparrow_SegCanUpgrade
;;;3020               break;
000056  e056              B        |L3.262|
;;;3021   
;;;3022           // 通用彩屏can升级
;;;3023           case STATE_CM_CAN_UPGRADE:
;;;3024               CAN_PROTOCOL_Process_DT();      // 迪太升级协议
000058  f7fffffe          BL       CAN_PROTOCOL_Process_DT
;;;3025               CAN_PROTOCOL_Process_3A();      // 添加app中的3a解析协议
00005c  f7fffffe          BL       CAN_PROTOCOL_Process_3A
;;;3026               CAN_TEST_PROTOCOL_Process();    // 测试协议
000060  f7fffffe          BL       CAN_TEST_PROTOCOL_Process
;;;3027               STEP_Process_CmCanUpgrade();
000064  f7fffffe          BL       STEP_Process_CmCanUpgrade
;;;3028               break;
000068  e04d              B        |L3.262|
;;;3029   
;;;3030           // 华芯微特can升级
;;;3031           case STATE_HUAXIN_CAN_UPGRADE:
;;;3032               CAN_PROTOCOL_Process_DT();      // 迪太升级协议，升级app，ui
00006a  f7fffffe          BL       CAN_PROTOCOL_Process_DT
;;;3033               CAN_PROTOCOL_Process_3A();      // 添加app中的3a解析协议，升级配置
00006e  f7fffffe          BL       CAN_PROTOCOL_Process_3A
;;;3034               CAN_TEST_PROTOCOL_Process();    // 测试协议
000072  f7fffffe          BL       CAN_TEST_PROTOCOL_Process
;;;3035               STEP_Process_HuaXinCanUpgrade();
000076  f7fffffe          BL       STEP_Process_HuaXinCanUpgrade
;;;3036               break;
00007a  e044              B        |L3.262|
;;;3037   
;;;3038           // 数码管、段码屏can升级
;;;3039           case STATE_SEG_CAN_UPGRADE:
;;;3040               CAN_PROTOCOL_Process_DT();      // 迪太升级协议
00007c  f7fffffe          BL       CAN_PROTOCOL_Process_DT
;;;3041               CAN_PROTOCOL_Process_3A();      // 添加app中的3a解析协议
000080  f7fffffe          BL       CAN_PROTOCOL_Process_3A
;;;3042               CAN_TEST_PROTOCOL_Process();    // 测试协议
000084  f7fffffe          BL       CAN_TEST_PROTOCOL_Process
;;;3043               STEP_Process_SegCanUpgrade();
000088  f7fffffe          BL       STEP_Process_SegCanUpgrade
;;;3044               break;
00008c  e03b              B        |L3.262|
;;;3045   
;;;3046           // 开阳can升级
;;;3047           case STATE_KAIYANG_CAN_UPGRADE:
;;;3048               CAN_PROTOCOL_Process_DT();      // 迪太升级协议
00008e  f7fffffe          BL       CAN_PROTOCOL_Process_DT
;;;3049               CAN_PROTOCOL_Process_3A();      // 添加app中的3a解析协议
000092  f7fffffe          BL       CAN_PROTOCOL_Process_3A
;;;3050               CAN_TEST_PROTOCOL_Process();    // 测试协议
000096  f7fffffe          BL       CAN_TEST_PROTOCOL_Process
;;;3051               STEP_Process_KaiYangCanUpgrade();
00009a  f7fffffe          BL       STEP_Process_KaiYangCanUpgrade
;;;3052               break;
00009e  e032              B        |L3.262|
;;;3053   
;;;3054           // IOT CAN
;;;3055           case STATE_IOT_CAN_UPGRADE:
;;;3056               CAN_PROTOCOL_Process_DT();      // 迪太升级协议
0000a0  f7fffffe          BL       CAN_PROTOCOL_Process_DT
;;;3057               CAN_PROTOCOL_Process_3A();      // 添加app中的3a解析协议
0000a4  f7fffffe          BL       CAN_PROTOCOL_Process_3A
;;;3058               STEP_Process_IotCanUpgrade();
0000a8  f7fffffe          BL       STEP_Process_IotCanUpgrade
;;;3059               break;        
0000ac  e02b              B        |L3.262|
;;;3060           
;;;3061           /* 以下为串口升级  */
;;;3062           // 通用彩屏串口升级
;;;3063           case STATE_CM_UART_BC_UPGRADE:
;;;3064               UART_DRIVE_Process();           // UART驱动层过程处理
0000ae  f7fffffe          BL       UART_DRIVE_Process
;;;3065               UART_PROTOCOL_Process();        // UART协议层过程处理
0000b2  f7fffffe          BL       UART_PROTOCOL_Process
;;;3066               STEP_Process_CmUartUpgrade();   // 步骤
0000b6  f7fffffe          BL       STEP_Process_CmUartUpgrade
;;;3067               break;
0000ba  e024              B        |L3.262|
;;;3068   
;;;3069           // 华芯维特串口升级
;;;3070           case STATE_HUAXIN_UART_BC_UPGRADE:
;;;3071               UART_DRIVE_Process();           // UART驱动层过程处理
0000bc  f7fffffe          BL       UART_DRIVE_Process
;;;3072               UART_PROTOCOL_Process();        // UART协议层过程处理
0000c0  f7fffffe          BL       UART_PROTOCOL_Process
;;;3073               STEP_Process_HuaXinUartCbUpgrade();
0000c4  f7fffffe          BL       STEP_Process_HuaXinUartCbUpgrade
;;;3074               break;
0000c8  e01d              B        |L3.262|
;;;3075   
;;;3076           // 数码管、段码屏串口升级
;;;3077           case STATE_CM_UART_SEG_UPGRADE:
;;;3078               UART_DRIVE_Process();           // UART驱动层过程处理
0000ca  f7fffffe          BL       UART_DRIVE_Process
;;;3079               UART_PROTOCOL_Process();        // UART协议层过程处理
0000ce  f7fffffe          BL       UART_PROTOCOL_Process
;;;3080               STEP_Process_SegUartUpgrade();
0000d2  f7fffffe          BL       STEP_Process_SegUartUpgrade
;;;3081               break;
0000d6  e016              B        |L3.262|
;;;3082   
;;;3083           // 开阳串口升级
;;;3084           case STATE_KAIYANG_UART_BC_UPGRADE:
;;;3085               UART_DRIVE_Process();           // UART驱动层过程处理
0000d8  f7fffffe          BL       UART_DRIVE_Process
;;;3086               UART_PROTOCOL_Process();        // UART协议层过程处理
0000dc  f7fffffe          BL       UART_PROTOCOL_Process
;;;3087               STEP_Process_KaiYangUartUpgrade();
0000e0  f7fffffe          BL       STEP_Process_KaiYangUartUpgrade
;;;3088               break;
0000e4  e00f              B        |L3.262|
;;;3089   
;;;3090           // LIME串口升级
;;;3091           case STATE_LIME_UART_BC_UPGRADE:
;;;3092               UART_DRIVE_Process();           // UART驱动层过程处理
0000e6  f7fffffe          BL       UART_DRIVE_Process
;;;3093               LIME_UART_PROTOCOL_Process();   // UART协议层过程处理
0000ea  f7fffffe          BL       LIME_UART_PROTOCOL_Process
;;;3094               STEP_Process_LiMeUartUpgrade();
0000ee  f7fffffe          BL       STEP_Process_LiMeUartUpgrade
;;;3095               break;
0000f2  e008              B        |L3.262|
0000f4  e006              B        |L3.260|
;;;3096   
;;;3097           // IOT串口升级
;;;3098           case STATE_IOT_UART_UPGRADE:
;;;3099               UART_DRIVE_Process();           // UART驱动层过程处理
0000f6  f7fffffe          BL       UART_DRIVE_Process
;;;3100               UART_PROTOCOL_Process();        // UART协议层过程处理
0000fa  f7fffffe          BL       UART_PROTOCOL_Process
;;;3101               STEP_Process_IotUartUpgrade();
0000fe  f7fffffe          BL       STEP_Process_IotUartUpgrade
;;;3102               break;
000102  e000              B        |L3.262|
                  |L3.260|
;;;3103               
;;;3104           default:
;;;3105               break;
000104  bf00              NOP      
                  |L3.262|
000106  bf00              NOP                            ;2992
;;;3106       }
;;;3107   }
000108  bd10              POP      {r4,pc}
                          ENDP

00010a  0000              DCW      0x0000
                  |L3.268|
                          DCD      stateCB

                          AREA ||i.STATE_SwitchStep||, CODE, READONLY, ALIGN=2

                  STATE_SwitchStep PROC
;;;35     // 步骤切换函数
;;;36     void STATE_SwitchStep(uint32 param)
000000  4a01              LDR      r2,|L4.8|
;;;37     {
;;;38         stateCB.step = (STEP_E)param;
000002  7090              STRB     r0,[r2,#2]
;;;39     }
000004  4770              BX       lr
;;;40     
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      stateCB

                          AREA ||i.STEP_Process_CmCanUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_CmCanUpgrade PROC
;;;192    // 通用CAN升级,APP类型为hex
;;;193    void STEP_Process_CmCanUpgrade(void)
000000  b530              PUSH     {r4,r5,lr}
;;;194    {
000002  b091              SUB      sp,sp,#0x44
;;;195        uint8 configs[60] = {0};
000004  213c              MOVS     r1,#0x3c
000006  a802              ADD      r0,sp,#8
000008  f7fffffe          BL       __aeabi_memclr4
;;;196        uint8 i, j;
;;;197    
;;;198        switch (stateCB.step)
00000c  48fc              LDR      r0,|L5.1024|
00000e  7880              LDRB     r0,[r0,#2]  ; stateCB
000010  281d              CMP      r0,#0x1d
000012  d077              BEQ      |L5.260|
000014  dc12              BGT      |L5.60|
000016  281d              CMP      r0,#0x1d
000018  d275              BCS      |L5.262|
00001a  e8dff000          TBB      [pc,r0]
00001e  3274              DCB      0x32,0x74
000020  74747474          DCB      0x74,0x74,0x74,0x74
000024  74747474          DCB      0x74,0x74,0x74,0x74
000028  74747474          DCB      0x74,0x74,0x74,0x74
00002c  74335354          DCB      0x74,0x33,0x53,0x54
000030  616875b2          DCB      0x61,0x68,0x75,0xb2
000034  f9f7f6f5          DCB      0xf9,0xf7,0xf6,0xf5
000038  f4f3f200          DCB      0xf4,0xf3,0xf2,0x00
                  |L5.60|
00003c  2852              CMP      r0,#0x52
00003e  d07c              BEQ      |L5.314|
000040  dc10              BGT      |L5.100|
000042  2821              CMP      r0,#0x21
000044  d07a              BEQ      |L5.316|
000046  dc06              BGT      |L5.86|
000048  281e              CMP      r0,#0x1e
00004a  d078              BEQ      |L5.318|
00004c  281f              CMP      r0,#0x1f
00004e  d077              BEQ      |L5.320|
000050  2820              CMP      r0,#0x20
                  |L5.82|
000052  d158              BNE      |L5.262|
000054  e34b              B        |L5.1774|
                  |L5.86|
000056  284f              CMP      r0,#0x4f
000058  d073              BEQ      |L5.322|
00005a  2850              CMP      r0,#0x50
00005c  d072              BEQ      |L5.324|
00005e  2851              CMP      r0,#0x51
000060  d1f7              BNE      |L5.82|
000062  e276              B        |L5.1362|
                  |L5.100|
000064  28a7              CMP      r0,#0xa7
000066  d06e              BEQ      |L5.326|
000068  dc06              BGT      |L5.120|
00006a  2853              CMP      r0,#0x53
00006c  d06c              BEQ      |L5.328|
00006e  2854              CMP      r0,#0x54
000070  d06b              BEQ      |L5.330|
000072  28a6              CMP      r0,#0xa6
000074  d1ed              BNE      |L5.82|
000076  e286              B        |L5.1414|
                  |L5.120|
000078  28a9              CMP      r0,#0xa9
00007a  d067              BEQ      |L5.332|
00007c  28aa              CMP      r0,#0xaa
00007e  d1e8              BNE      |L5.82|
000080  e2d0              B        |L5.1572|
;;;199        {
;;;200            case STEP_NULL: // 空步骤
;;;201                break;
000082  e379              B        |L5.1912|
;;;202    
;;;203            // 通用can升级入口，dut上电和can初始化
;;;204            case STEP_CM_CAN_UPGRADE_ENTRY:
;;;205                dut_info.frameType = DUT_FRAME_TYPE_STD;
000084  2000              MOVS     r0,#0
000086  49df              LDR      r1,|L5.1028|
000088  7608              STRB     r0,[r1,#0x18]
;;;206    
;;;207                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
00008a  2010              MOVS     r0,#0x10
00008c  f7fffffe          BL       STATE_SwitchStep
;;;208                if (DUT_NAME_BC147 == dut_info.nam)
000090  48dc              LDR      r0,|L5.1028|
000092  7dc0              LDRB     r0,[r0,#0x17]  ; dut_info
000094  2801              CMP      r0,#1
000096  d104              BNE      |L5.162|
;;;209                {
;;;210                    IAP_CTRL_CAN_Init(CAN_BAUD_RATE_500K);
000098  f44f70fa          MOV      r0,#0x1f4
00009c  f7fffffe          BL       IAP_CTRL_CAN_Init
0000a0  e002              B        |L5.168|
                  |L5.162|
;;;211                }
;;;212                else
;;;213                {
;;;214                    IAP_CTRL_CAN_Init(CAN_BAUD_RATE_125K);
0000a2  207d              MOVS     r0,#0x7d
0000a4  f7fffffe          BL       IAP_CTRL_CAN_Init
                  |L5.168|
;;;215                }
;;;216                DUTCTRL_PowerOnOff(1); // dut上电
0000a8  2001              MOVS     r0,#1
0000aa  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;217                dut_info.dutPowerOnAllow = FALSE;
0000ae  2000              MOVS     r0,#0
0000b0  49d4              LDR      r1,|L5.1028|
0000b2  f881003c          STRB     r0,[r1,#0x3c]
;;;218                dut_info.reconnectionRepeatOne = FALSE;
0000b6  f881004b          STRB     r0,[r1,#0x4b]
;;;219                addTimeOutTimer(5000); // 握手超时时间：2S，维乐高的s1需要2s的握手时间
0000ba  f2413088          MOV      r0,#0x1388
0000be  f7fffffe          BL       addTimeOutTimer
;;;220                break;
0000c2  e359              B        |L5.1912|
;;;221    
;;;222            // 等待dut应答
;;;223            case STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK:
;;;224                break;
0000c4  e358              B        |L5.1912|
;;;225    
;;;226            // 收到dut的eco请求,延时50ms后发送eco允许
;;;227            case STEP_CM_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST:
;;;228                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
0000c6  2010              MOVS     r0,#0x10
0000c8  f7fffffe          BL       STATE_SwitchStep
;;;229                TIMER_AddTask(TIMER_ID_DELAY_ENTER_UP_MODE,
0000cc  2001              MOVS     r0,#1
0000ce  9000              STR      r0,[sp,#0]
0000d0  2312              MOVS     r3,#0x12
0000d2  4acd              LDR      r2,|L5.1032|
0000d4  2132              MOVS     r1,#0x32
0000d6  9001              STR      r0,[sp,#4]
0000d8  2008              MOVS     r0,#8
0000da  f7fffffe          BL       TIMER_AddTask
;;;230                              50,
;;;231                              STATE_SwitchStep,
;;;232                              STEP_CM_CAN_UPGRADE_UP_ALLOW,
;;;233                              1,
;;;234                              ACTION_MODE_ADD_TO_QUEUE);
;;;235                break;
0000de  e34b              B        |L5.1912|
;;;236    
;;;237            // 发送eco允许
;;;238            case STEP_CM_CAN_UPGRADE_UP_ALLOW:
;;;239                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
0000e0  2010              MOVS     r0,#0x10
0000e2  f7fffffe          BL       STATE_SwitchStep
;;;240                IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK); // 0x02,工程模式允许
0000e6  2002              MOVS     r0,#2
0000e8  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;241                break;
0000ec  e344              B        |L5.1912|
;;;242    
;;;243            // 发送ui擦除指令
;;;244            case STEP_CM_CAN_UPGRADE_SEND_UI_EAR:
;;;245                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
0000ee  2010              MOVS     r0,#0x10
0000f0  f7fffffe          BL       STATE_SwitchStep
;;;246                addTimeOutTimer(15000);                                         // 擦除ui超时时间：15s
0000f4  f6432098          MOV      r0,#0x3a98
0000f8  f7fffffe          BL       addTimeOutTimer
;;;247                IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_UI_DATA_ERASE); // 0x12:擦除ui命令
0000fc  2012              MOVS     r0,#0x12
0000fe  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;248                break;
000102  e339              B        |L5.1912|
                  |L5.260|
000104  e168              B        |L5.984|
                  |L5.262|
000106  e336              B        |L5.1910|
;;;249    
;;;250            // 接收到dut返回的ui擦除结果
;;;251            case STEP_CM_CAN_UPGRADE_UI_EAR_RESUALT:
;;;252                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000108  2010              MOVS     r0,#0x10
00010a  f7fffffe          BL       STATE_SwitchStep
;;;253                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00010e  2009              MOVS     r0,#9
000110  f7fffffe          BL       TIMER_KillTask
;;;254                dut_info.currentUiSize = 0;
000114  2000              MOVS     r0,#0
000116  49bb              LDR      r1,|L5.1028|
000118  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;255    
;;;256                // 命令0x14，ui数据写入
;;;257                // 适配BC281维乐高 UI数据分区
;;;258                if(DUT_NAME_BC281EVL == dut_info.nam)
00011a  4608              MOV      r0,r1
00011c  7dc0              LDRB     r0,[r0,#0x17]  ; dut_info
00011e  2804              CMP      r0,#4
000120  d115              BNE      |L5.334|
;;;259                {
;;;260                      IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_UI_BIN, IAP_CTRL_CAN_CMD_DOWN_UI_DATA_WRITE, SPI_FLASH_DUT_UI_ADDEESS, (dut_info.currentUiSize) * 132);            
000122  4608              MOV      r0,r1
000124  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000126  eb001040          ADD      r0,r0,r0,LSL #5
00012a  0083              LSLS     r3,r0,#2
00012c  f44f1200          MOV      r2,#0x200000
000130  2114              MOVS     r1,#0x14
000132  2002              MOVS     r0,#2
000134  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
000138  e012              B        |L5.352|
                  |L5.314|
00013a  e1bf              B        |L5.1212|
                  |L5.316|
00013c  e2f4              B        |L5.1832|
                  |L5.318|
00013e  e27f              B        |L5.1600|
                  |L5.320|
000140  e2b2              B        |L5.1704|
                  |L5.322|
000142  e169              B        |L5.1048|
                  |L5.324|
000144  e183              B        |L5.1102|
                  |L5.326|
000146  e240              B        |L5.1482|
                  |L5.328|
000148  e1cd              B        |L5.1254|
                  |L5.330|
00014a  e1f0              B        |L5.1326|
                  |L5.332|
00014c  e251              B        |L5.1522|
                  |L5.334|
;;;261                }
;;;262                else
;;;263                {
;;;264                      IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_BIN, IAP_CTRL_CAN_CMD_DOWN_UI_DATA_WRITE, SPI_FLASH_DUT_UI_ADDEESS, (dut_info.currentUiSize) * 128);           
00014e  48ad              LDR      r0,|L5.1028|
000150  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000152  01c3              LSLS     r3,r0,#7
000154  f44f1200          MOV      r2,#0x200000
000158  2114              MOVS     r1,#0x14
00015a  2001              MOVS     r0,#1
00015c  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
                  |L5.352|
;;;265                }
;;;266                dut_info.currentUiSize++;
000160  48a8              LDR      r0,|L5.1028|
000162  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000164  1c40              ADDS     r0,r0,#1
000166  49a7              LDR      r1,|L5.1028|
000168  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;267                
;;;268                // 添加断电重发定时器
;;;269                TIMER_AddTask(TIMER_ID_RECONNECTION,
00016a  2001              MOVS     r0,#1
00016c  1e81              SUBS     r1,r0,#2
00016e  2320              MOVS     r3,#0x20
000170  4aa5              LDR      r2,|L5.1032|
000172  e9cd1000          STRD     r1,r0,[sp,#0]
000176  f44f71fa          MOV      r1,#0x1f4
00017a  200a              MOVS     r0,#0xa
00017c  f7fffffe          BL       TIMER_AddTask
;;;270                              500,
;;;271                              STATE_SwitchStep,
;;;272                              STEP_CM_CAN_UPGRADE_RECONNECTION,
;;;273                              TIMER_LOOP_FOREVER,
;;;274                              ACTION_MODE_ADD_TO_QUEUE);
;;;275                break;
000180  e2fa              B        |L5.1912|
;;;276    
;;;277            // 发送ui升级数据
;;;278            case STEP_CM_CAN_UPGRADE_SEND_UI_WRITE:
;;;279                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000182  2010              MOVS     r0,#0x10
000184  f7fffffe          BL       STATE_SwitchStep
;;;280                
;;;281                if (dut_info.reconnectionRepeatOne)
000188  489e              LDR      r0,|L5.1028|
00018a  f890004b          LDRB     r0,[r0,#0x4b]  ; dut_info
00018e  b1b0              CBZ      r0,|L5.446|
;;;282                {
;;;283                    dut_info.reconnectionRepeatOne = FALSE;
000190  2000              MOVS     r0,#0
000192  499c              LDR      r1,|L5.1028|
000194  f881004b          STRB     r0,[r1,#0x4b]
;;;284                    TIMER_AddTask(TIMER_ID_RECONNECTION,
000198  2001              MOVS     r0,#1
00019a  1e81              SUBS     r1,r0,#2
00019c  2320              MOVS     r3,#0x20
00019e  4a9a              LDR      r2,|L5.1032|
0001a0  e9cd1000          STRD     r1,r0,[sp,#0]
0001a4  f44f71fa          MOV      r1,#0x1f4
0001a8  200a              MOVS     r0,#0xa
0001aa  f7fffffe          BL       TIMER_AddTask
;;;285                                  500,
;;;286                                  STATE_SwitchStep,
;;;287                                  STEP_CM_CAN_UPGRADE_RECONNECTION,
;;;288                                  TIMER_LOOP_FOREVER,
;;;289                                  ACTION_MODE_ADD_TO_QUEUE);
;;;290                    TIMER_KillTask(TIMER_ID_RECONNECTION_TIME_OUT);
0001ae  200b              MOVS     r0,#0xb
0001b0  f7fffffe          BL       TIMER_KillTask
;;;291                    dut_info.currentUiSize--;
0001b4  4893              LDR      r0,|L5.1028|
0001b6  6b40              LDR      r0,[r0,#0x34]  ; dut_info
0001b8  1e40              SUBS     r0,r0,#1
0001ba  4992              LDR      r1,|L5.1028|
0001bc  6348              STR      r0,[r1,#0x34]  ; dut_info
                  |L5.446|
;;;292                }
;;;293                
;;;294                // 喂狗
;;;295                TIMER_ResetTimer(TIMER_ID_RECONNECTION);
0001be  200a              MOVS     r0,#0xa
0001c0  f7fffffe          BL       TIMER_ResetTimer
;;;296                
;;;297                // 适配BC281维乐高
;;;298                if(DUT_NAME_BC281EVL == dut_info.nam)
0001c4  488f              LDR      r0,|L5.1028|
0001c6  7dc0              LDRB     r0,[r0,#0x17]  ; dut_info
0001c8  2804              CMP      r0,#4
0001ca  d10b              BNE      |L5.484|
;;;299                {
;;;300                      IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_UI_BIN, IAP_CTRL_CAN_CMD_DOWN_UI_DATA_WRITE, SPI_FLASH_DUT_UI_ADDEESS, (dut_info.currentUiSize) * 132);            
0001cc  488d              LDR      r0,|L5.1028|
0001ce  6b40              LDR      r0,[r0,#0x34]  ; dut_info
0001d0  eb001040          ADD      r0,r0,r0,LSL #5
0001d4  0083              LSLS     r3,r0,#2
0001d6  f44f1200          MOV      r2,#0x200000
0001da  2114              MOVS     r1,#0x14
0001dc  2002              MOVS     r0,#2
0001de  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
0001e2  e008              B        |L5.502|
                  |L5.484|
;;;301                }
;;;302                else
;;;303                {
;;;304                      IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_BIN, IAP_CTRL_CAN_CMD_DOWN_UI_DATA_WRITE, SPI_FLASH_DUT_UI_ADDEESS, (dut_info.currentUiSize) * 128);           
0001e4  4887              LDR      r0,|L5.1028|
0001e6  6b40              LDR      r0,[r0,#0x34]  ; dut_info
0001e8  01c3              LSLS     r3,r0,#7
0001ea  f44f1200          MOV      r2,#0x200000
0001ee  2114              MOVS     r1,#0x14
0001f0  2001              MOVS     r0,#1
0001f2  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
                  |L5.502|
;;;305                }
;;;306                dut_info.currentUiSize++;
0001f6  4883              LDR      r0,|L5.1028|
0001f8  6b40              LDR      r0,[r0,#0x34]  ; dut_info
0001fa  1c40              ADDS     r0,r0,#1
0001fc  4981              LDR      r1,|L5.1028|
0001fe  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;307                break;
000200  e2ba              B        |L5.1912|
000202  e0b8              B        |L5.886|
000204  e092              B        |L5.812|
000206  e086              B        |L5.790|
000208  e076              B        |L5.760|
00020a  e060              B        |L5.718|
00020c  e022              B        |L5.596|
00020e  e7ff              B        |L5.528|
                  |L5.528|
;;;308    
;;;309            // ui升级完成，写入UI版本号
;;;310            case STEP_CM_CAN_UPGRADE_UI_UP_SUCCESS:        
;;;311                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000210  2010              MOVS     r0,#0x10
000212  f7fffffe          BL       STATE_SwitchStep
;;;312                dut_info.frameType = DUT_FRAME_TYPE_EXT;
000216  2001              MOVS     r0,#1
000218  497a              LDR      r1,|L5.1028|
00021a  7608              STRB     r0,[r1,#0x18]
;;;313                dut_info.dutPowerOnAllow = TRUE; // 允许开机
00021c  f881003c          STRB     r0,[r1,#0x3c]
;;;314                IAP_CTRL_CAN_Init(CAN_BAUD_RATE_500K);
000220  f44f70fa          MOV      r0,#0x1f4
000224  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;315                DUTCTRL_PowerOnOff(0);
000228  2000              MOVS     r0,#0
00022a  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;316                writeUiVerFlag = TRUE;
00022e  2001              MOVS     r0,#1
000230  4976              LDR      r1,|L5.1036|
000232  7008              STRB     r0,[r1,#0]
;;;317                addTimeOutTimer(10000); // 设置config时间：10s
000234  f2427010          MOV      r0,#0x2710
000238  f7fffffe          BL       addTimeOutTimer
;;;318                
;;;319                TIMER_AddTask(TIMER_ID_SET_DUT_UI_VER,
00023c  2001              MOVS     r0,#1
00023e  1e81              SUBS     r1,r0,#2
000240  2317              MOVS     r3,#0x17
000242  4a71              LDR      r2,|L5.1032|
000244  e9cd1000          STRD     r1,r0,[sp,#0]
000248  f44f717a          MOV      r1,#0x3e8
00024c  2010              MOVS     r0,#0x10
00024e  f7fffffe          BL       TIMER_AddTask
;;;320                              1000,
;;;321                              STATE_SwitchStep,
;;;322                              STEP_CM_CAN_WRITE_UI_VER,
;;;323                              TIMER_LOOP_FOREVER,
;;;324                              ACTION_MODE_ADD_TO_QUEUE);    
;;;325                break;
000252  e291              B        |L5.1912|
                  |L5.596|
;;;326    
;;;327            // 写UI版本号
;;;328            case STEP_CM_CAN_WRITE_UI_VER:
;;;329                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000254  2010              MOVS     r0,#0x10
000256  f7fffffe          BL       STATE_SwitchStep
;;;330                SPI_FLASH_ReadArray(uiVer, SPI_FLASH_UI_VERSION_ADDEESS, 50); // 实际只有54个字节
00025a  2232              MOVS     r2,#0x32
00025c  f44f11b5          MOV      r1,#0x16a000
000260  486b              LDR      r0,|L5.1040|
000262  f7fffffe          BL       SPI_FLASH_ReadArray
;;;331                DUTCTRL_PowerOnOff(1);                                        // dut上电
000266  2001              MOVS     r0,#1
000268  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;332                Delayms(250);
00026c  20fa              MOVS     r0,#0xfa
00026e  f7fffffe          BL       Delayms
;;;333                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);
000272  203a              MOVS     r0,#0x3a
000274  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;334                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);
000278  201a              MOVS     r0,#0x1a
00027a  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;335                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_VERSION_TYPE_WRITE); // 0xA8
00027e  20a8              MOVS     r0,#0xa8
000280  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;336                CAN_PROTOCOL1_TxAddData(uiVer[0] + 2);
000284  4962              LDR      r1,|L5.1040|
000286  7809              LDRB     r1,[r1,#0]  ; uiVer
000288  1c89              ADDS     r1,r1,#2
00028a  b2c8              UXTB     r0,r1
00028c  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;337                CAN_PROTOCOL1_TxAddData(8);         // UI版本类型
000290  2008              MOVS     r0,#8
000292  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;338                CAN_PROTOCOL1_TxAddData(uiVer[0]);  // 信息长度
000296  495e              LDR      r1,|L5.1040|
000298  7808              LDRB     r0,[r1,#0]  ; uiVer
00029a  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;339                j = 0;
00029e  2500              MOVS     r5,#0
;;;340                
;;;341                for (i = 1; i < uiVer[0] + 1; i++)
0002a0  2401              MOVS     r4,#1
0002a2  e00c              B        |L5.702|
                  |L5.676|
;;;342                {
;;;343                    CAN_PROTOCOL1_TxAddData(uiVer[i]);
0002a4  495a              LDR      r1,|L5.1040|
0002a6  5d08              LDRB     r0,[r1,r4]
0002a8  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;344                    uiVerifiedBuff[j++] = uiVer[i];
0002ac  4858              LDR      r0,|L5.1040|
0002ae  5d02              LDRB     r2,[r0,r4]
0002b0  4628              MOV      r0,r5
0002b2  1c69              ADDS     r1,r5,#1
0002b4  b2cd              UXTB     r5,r1
0002b6  4957              LDR      r1,|L5.1044|
0002b8  540a              STRB     r2,[r1,r0]
0002ba  1c60              ADDS     r0,r4,#1              ;341
0002bc  b2c4              UXTB     r4,r0                 ;341
                  |L5.702|
0002be  4854              LDR      r0,|L5.1040|
0002c0  7800              LDRB     r0,[r0,#0]            ;341  ; uiVer
0002c2  1c40              ADDS     r0,r0,#1              ;341
0002c4  42a0              CMP      r0,r4                 ;341
0002c6  dced              BGT      |L5.676|
;;;345                }
;;;346                CAN_PROTOCOL1_TxAddFrame();
0002c8  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
;;;347                break;
0002cc  e254              B        |L5.1912|
                  |L5.718|
;;;348                
;;;349            // 读UI版本号
;;;350            case STEP_CM_CAN_READ_UI_VER:
;;;351                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);    
0002ce  2010              MOVS     r0,#0x10
0002d0  f7fffffe          BL       STATE_SwitchStep
;;;352                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);
0002d4  203a              MOVS     r0,#0x3a
0002d6  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;353                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);
0002da  201a              MOVS     r0,#0x1a
0002dc  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;354                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_VERSION_TYPE_READ); // 0xA9
0002e0  20a9              MOVS     r0,#0xa9
0002e2  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;355                CAN_PROTOCOL1_TxAddData(1);    // 数据长度
0002e6  2001              MOVS     r0,#1
0002e8  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;356                CAN_PROTOCOL1_TxAddData(8);    // 类型
0002ec  2008              MOVS     r0,#8
0002ee  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;357                CAN_PROTOCOL1_TxAddFrame();
0002f2  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
;;;358                break;
0002f6  e23f              B        |L5.1912|
                  |L5.760|
;;;359                
;;;360            // 写UI版本号成功
;;;361            case STEP_CM_CAN_WRITE_UI_VER_SUCCESS:
;;;362                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_ITEM_FINISH);
0002f8  201e              MOVS     r0,#0x1e
0002fa  f7fffffe          BL       STATE_SwitchStep
;;;363                dut_info.uiUpSuccesss = TRUE;
0002fe  2001              MOVS     r0,#1
000300  4940              LDR      r1,|L5.1028|
000302  f881003e          STRB     r0,[r1,#0x3e]
;;;364                dut_info.uiUpFlag = FALSE;
000306  2000              MOVS     r0,#0
000308  7748              STRB     r0,[r1,#0x1d]
;;;365                dut_info.reconnectionFlag = FALSE;
00030a  f881004a          STRB     r0,[r1,#0x4a]
;;;366                TIMER_KillTask(TIMER_ID_RECONNECTION);    
00030e  200a              MOVS     r0,#0xa
000310  f7fffffe          BL       TIMER_KillTask
;;;367                break;        
000314  e230              B        |L5.1912|
                  |L5.790|
;;;368            
;;;369            // 发送app擦除指令
;;;370            case STEP_CM_CAN_UPGRADE_SEND_APP_EAR:
;;;371                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000316  2010              MOVS     r0,#0x10
000318  f7fffffe          BL       STATE_SwitchStep
;;;372                addTimeOutTimer(5000);                                            // 擦除app超时时间：5s
00031c  f2413088          MOV      r0,#0x1388
000320  f7fffffe          BL       addTimeOutTimer
;;;373                IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_IAP_ERASE_FLASH); // 0x24,擦除app
000324  2024              MOVS     r0,#0x24
000326  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;374                break;
00032a  e225              B        |L5.1912|
                  |L5.812|
;;;375    
;;;376            // app擦除结果处理
;;;377            case STEP_CM_CAN_UPGRADE_APP_EAR_RESUALT:
;;;378                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
00032c  2010              MOVS     r0,#0x10
00032e  f7fffffe          BL       STATE_SwitchStep
;;;379                
;;;380                // 发送第一帧数据
;;;381                dut_info.currentAppSize = 0;
000332  2000              MOVS     r0,#0
000334  4933              LDR      r1,|L5.1028|
000336  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;382                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
000338  2009              MOVS     r0,#9
00033a  f7fffffe          BL       TIMER_KillTask
;;;383                IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_HEX, IAP_CTRL_CAN_CMD_DOWN_IAP_WRITE_FLASH, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 116);
00033e  4831              LDR      r0,|L5.1028|
000340  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000342  2174              MOVS     r1,#0x74
000344  fb00f301          MUL      r3,r0,r1
000348  f44f22c0          MOV      r2,#0x60000
00034c  2126              MOVS     r1,#0x26
00034e  2005              MOVS     r0,#5
000350  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
;;;384                dut_info.currentAppSize++;
000354  482b              LDR      r0,|L5.1028|
000356  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000358  1c40              ADDS     r0,r0,#1
00035a  492a              LDR      r1,|L5.1028|
00035c  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;385                
;;;386                // 添加断电重发定时器
;;;387                TIMER_AddTask(TIMER_ID_RECONNECTION,
00035e  2001              MOVS     r0,#1
000360  1e81              SUBS     r1,r0,#2
000362  2320              MOVS     r3,#0x20
000364  4a28              LDR      r2,|L5.1032|
000366  e9cd1000          STRD     r1,r0,[sp,#0]
00036a  f44f71fa          MOV      r1,#0x1f4
00036e  200a              MOVS     r0,#0xa
000370  f7fffffe          BL       TIMER_AddTask
;;;388                              500,
;;;389                              STATE_SwitchStep,
;;;390                              STEP_CM_CAN_UPGRADE_RECONNECTION,
;;;391                              TIMER_LOOP_FOREVER,
;;;392                              ACTION_MODE_ADD_TO_QUEUE);
;;;393                break;
000374  e200              B        |L5.1912|
                  |L5.886|
;;;394    
;;;395            // 发送app升级包
;;;396            case STEP_CM_CAN_UPGRADE_SEND_APP_WRITE:
;;;397                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000376  2010              MOVS     r0,#0x10
000378  f7fffffe          BL       STATE_SwitchStep
;;;398    
;;;399                if (dut_info.reconnectionRepeatOne)
00037c  4821              LDR      r0,|L5.1028|
00037e  f890004b          LDRB     r0,[r0,#0x4b]  ; dut_info
000382  b1a8              CBZ      r0,|L5.944|
;;;400                {
;;;401                    dut_info.reconnectionRepeatOne = FALSE;
000384  2000              MOVS     r0,#0
000386  491f              LDR      r1,|L5.1028|
000388  f881004b          STRB     r0,[r1,#0x4b]
;;;402                    dut_info.currentAppSize--;
00038c  4608              MOV      r0,r1
00038e  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000390  1e40              SUBS     r0,r0,#1
000392  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;403                    TIMER_AddTask(TIMER_ID_RECONNECTION,
000394  2001              MOVS     r0,#1
000396  1e81              SUBS     r1,r0,#2
000398  2320              MOVS     r3,#0x20
00039a  4a1b              LDR      r2,|L5.1032|
00039c  e9cd1000          STRD     r1,r0,[sp,#0]
0003a0  f44f71fa          MOV      r1,#0x1f4
0003a4  200a              MOVS     r0,#0xa
0003a6  f7fffffe          BL       TIMER_AddTask
;;;404                                  500,
;;;405                                  STATE_SwitchStep,
;;;406                                  STEP_CM_CAN_UPGRADE_RECONNECTION,
;;;407                                  TIMER_LOOP_FOREVER,
;;;408                                  ACTION_MODE_ADD_TO_QUEUE);
;;;409                    TIMER_KillTask(TIMER_ID_RECONNECTION_TIME_OUT);
0003aa  200b              MOVS     r0,#0xb
0003ac  f7fffffe          BL       TIMER_KillTask
                  |L5.944|
;;;410                }
;;;411                
;;;412                // 喂狗
;;;413                TIMER_ResetTimer(TIMER_ID_RECONNECTION);
0003b0  200a              MOVS     r0,#0xa
0003b2  f7fffffe          BL       TIMER_ResetTimer
;;;414                IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_HEX, IAP_CTRL_CAN_CMD_DOWN_IAP_WRITE_FLASH, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 116);
0003b6  4813              LDR      r0,|L5.1028|
0003b8  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0003ba  2174              MOVS     r1,#0x74
0003bc  fb00f301          MUL      r3,r0,r1
0003c0  f44f22c0          MOV      r2,#0x60000
0003c4  2126              MOVS     r1,#0x26
0003c6  2005              MOVS     r0,#5
0003c8  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
;;;415                dut_info.currentAppSize++;
0003cc  480d              LDR      r0,|L5.1028|
0003ce  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0003d0  1c40              ADDS     r0,r0,#1
0003d2  490c              LDR      r1,|L5.1028|
0003d4  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;416                break;
0003d6  e1cf              B        |L5.1912|
                  |L5.984|
;;;417    
;;;418            // app升级成功
;;;419            case STEP_CM_CAN_UPGRADE_APP_UP_SUCCESS:
;;;420                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
0003d8  2010              MOVS     r0,#0x10
0003da  f7fffffe          BL       STATE_SwitchStep
;;;421                IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_UPDATA_FINISH); // 0x2A:升级成功
0003de  202a              MOVS     r0,#0x2a
0003e0  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;422                dut_info.appUpFlag = FALSE;
0003e4  2000              MOVS     r0,#0
0003e6  4907              LDR      r1,|L5.1028|
0003e8  76c8              STRB     r0,[r1,#0x1b]
;;;423                dut_info.appUpSuccesss = TRUE;
0003ea  2001              MOVS     r0,#1
0003ec  f881003f          STRB     r0,[r1,#0x3f]
;;;424                dut_info.reconnectionFlag = FALSE;
0003f0  2000              MOVS     r0,#0
0003f2  f881004a          STRB     r0,[r1,#0x4a]
;;;425                TIMER_KillTask(TIMER_ID_RECONNECTION);
0003f6  200a              MOVS     r0,#0xa
0003f8  f7fffffe          BL       TIMER_KillTask
;;;426                break;
0003fc  e1bc              B        |L5.1912|
0003fe  0000              DCW      0x0000
                  |L5.1024|
                          DCD      stateCB
                  |L5.1028|
                          DCD      dut_info
                  |L5.1032|
                          DCD      STATE_SwitchStep
                  |L5.1036|
                          DCD      writeUiVerFlag
                  |L5.1040|
                          DCD      uiVer
                  |L5.1044|
                          DCD      uiVerifiedBuff
                  |L5.1048|
;;;427    
;;;428            // 设置config入口
;;;429            case STEP_CAN_SET_CONFIG_ENTRY:
;;;430                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000418  2010              MOVS     r0,#0x10
00041a  f7fffffe          BL       STATE_SwitchStep
;;;431                dut_info.frameType = DUT_FRAME_TYPE_EXT;
00041e  2001              MOVS     r0,#1
000420  49d7              LDR      r1,|L5.1920|
000422  7608              STRB     r0,[r1,#0x18]
;;;432                dut_info.dutPowerOnAllow = TRUE; // 允许开机
000424  f881003c          STRB     r0,[r1,#0x3c]
;;;433                IAP_CTRL_CAN_Init(CAN_BAUD_RATE_500K);
000428  f44f70fa          MOV      r0,#0x1f4
00042c  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;434                DUTCTRL_PowerOnOff(0);
000430  2000              MOVS     r0,#0
000432  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;435                //        addTimeOutTimer(5000); // 设置config时间：5s
;;;436                TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
000436  2001              MOVS     r0,#1
000438  1e81              SUBS     r1,r0,#2
00043a  2350              MOVS     r3,#0x50
00043c  4ad1              LDR      r2,|L5.1924|
00043e  e9cd1000          STRD     r1,r0,[sp,#0]
000442  f44f71fa          MOV      r1,#0x1f4
000446  2002              MOVS     r0,#2
000448  f7fffffe          BL       TIMER_AddTask
;;;437                              500,
;;;438                              STATE_SwitchStep,
;;;439                              STEP_CAN_SEND_SET_CONFIG,
;;;440                              TIMER_LOOP_FOREVER,
;;;441                              ACTION_MODE_ADD_TO_QUEUE);
;;;442                break;
00044c  e194              B        |L5.1912|
                  |L5.1102|
;;;443    
;;;444            // 发送config内容
;;;445            case STEP_CAN_SEND_SET_CONFIG:
;;;446                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
00044e  2010              MOVS     r0,#0x10
000450  f7fffffe          BL       STATE_SwitchStep
;;;447                SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60); // 实际只有54个字节
000454  223c              MOVS     r2,#0x3c
000456  f44f11b0          MOV      r1,#0x160000
00045a  a802              ADD      r0,sp,#8
00045c  f7fffffe          BL       SPI_FLASH_ReadArray
;;;448                DUTCTRL_PowerOnOff(1);                                          // dut上电
000460  2001              MOVS     r0,#1
000462  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;449                
;;;450                // 添加命令头
;;;451                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);
000466  203a              MOVS     r0,#0x3a
000468  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;452                
;;;453                // 添加设备地址
;;;454                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);
00046c  201a              MOVS     r0,#0x1a
00046e  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;455                
;;;456                // 添加命令字
;;;457                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_WRITE_CONTROL_PARAM); // 0xc0
000472  20c0              MOVS     r0,#0xc0
000474  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;458                
;;;459                // 添加数据长度
;;;460                CAN_PROTOCOL1_TxAddData(54);
000478  2036              MOVS     r0,#0x36
00047a  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;461    
;;;462                for (i = 0; i < 54; i++)
00047e  2400              MOVS     r4,#0
000480  e005              B        |L5.1166|
                  |L5.1154|
;;;463                {
;;;464                    CAN_PROTOCOL1_TxAddData(configs[i]);
000482  a902              ADD      r1,sp,#8
000484  5d08              LDRB     r0,[r1,r4]
000486  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
00048a  1c60              ADDS     r0,r4,#1              ;462
00048c  b2c4              UXTB     r4,r0                 ;462
                  |L5.1166|
00048e  2c36              CMP      r4,#0x36              ;462
000490  dbf7              BLT      |L5.1154|
;;;465                }
;;;466                // 添加检验和与结束符，并添加至发送
;;;467                CAN_PROTOCOL1_TxAddFrame();
000492  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
;;;468    
;;;469                j = 0;
000496  2500              MOVS     r5,#0
;;;470                
;;;471                // 处理配置数据，去掉时间，获取待校验buffer
;;;472                for (i = 0; i < 54 ; i++)
000498  2400              MOVS     r4,#0
00049a  e00c              B        |L5.1206|
                  |L5.1180|
;;;473                {
;;;474                    if (i == 2)
00049c  2c02              CMP      r4,#2
00049e  d101              BNE      |L5.1188|
;;;475                    {
;;;476                        i = i + 5;
0004a0  1d60              ADDS     r0,r4,#5
0004a2  b2c4              UXTB     r4,r0
                  |L5.1188|
;;;477                    }
;;;478                    verifiedBuff[j++] = configs[i];
0004a4  a802              ADD      r0,sp,#8
0004a6  5d02              LDRB     r2,[r0,r4]
0004a8  4628              MOV      r0,r5
0004aa  1c69              ADDS     r1,r5,#1
0004ac  b2cd              UXTB     r5,r1
0004ae  49b6              LDR      r1,|L5.1928|
0004b0  540a              STRB     r2,[r1,r0]
0004b2  1c60              ADDS     r0,r4,#1              ;472
0004b4  b2c4              UXTB     r4,r0                 ;472
                  |L5.1206|
0004b6  2c36              CMP      r4,#0x36              ;472
0004b8  dbf0              BLT      |L5.1180|
;;;479                }
;;;480                break;
0004ba  e15d              B        |L5.1912|
                  |L5.1212|
;;;481    
;;;482            // 读取配置参数
;;;483            case STEP_CAN_READ_CONFIG:
;;;484                TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG);                              // 停止设置config定时器
0004bc  2002              MOVS     r0,#2
0004be  f7fffffe          BL       TIMER_KillTask
;;;485                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
0004c2  2010              MOVS     r0,#0x10
0004c4  f7fffffe          BL       STATE_SwitchStep
;;;486                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);                      // 添加命令头
0004c8  203a              MOVS     r0,#0x3a
0004ca  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;487                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);
0004ce  201a              MOVS     r0,#0x1a
0004d0  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;488                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_READ_CONTROL_PARAM);        // 0xC2添加命令字
0004d4  20c2              MOVS     r0,#0xc2
0004d6  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;489                CAN_PROTOCOL1_TxAddData(0);                                           // 添加数据长度
0004da  2000              MOVS     r0,#0
0004dc  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;490    
;;;491                // 添加检验和与结束符，并添加至发送
;;;492                CAN_PROTOCOL1_TxAddFrame();
0004e0  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
;;;493                break;
0004e4  e148              B        |L5.1912|
                  |L5.1254|
;;;494    
;;;495            // 写入DCD标志
;;;496            case STEP_CAN_DCD_FLAG_WRITE:
;;;497                STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0004e6  2057              MOVS     r0,#0x57
0004e8  f7fffffe          BL       STATE_SwitchStep
;;;498                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);
0004ec  203a              MOVS     r0,#0x3a
0004ee  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;499                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);
0004f2  201a              MOVS     r0,#0x1a
0004f4  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;500                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DCD_FLAG_WRITE);
0004f8  20a7              MOVS     r0,#0xa7
0004fa  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;501                CAN_PROTOCOL1_TxAddData(0x06);   // 数据长度
0004fe  2006              MOVS     r0,#6
000500  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;502                CAN_PROTOCOL1_TxAddData(0x05);   // DCD标志
000504  2005              MOVS     r0,#5
000506  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;503                CAN_PROTOCOL1_TxAddData(0x00);
00050a  2000              MOVS     r0,#0
00050c  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;504                CAN_PROTOCOL1_TxAddData(0x00);
000510  2000              MOVS     r0,#0
000512  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;505                CAN_PROTOCOL1_TxAddData(0x00);
000516  2000              MOVS     r0,#0
000518  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;506                CAN_PROTOCOL1_TxAddData(0x02);
00051c  2002              MOVS     r0,#2
00051e  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;507                CAN_PROTOCOL1_TxAddData(0);
000522  2000              MOVS     r0,#0
000524  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;508                CAN_PROTOCOL1_TxAddFrame();               
000528  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
;;;509                break;
00052c  e124              B        |L5.1912|
                  |L5.1326|
;;;510            
;;;511            // 读取DCD标志
;;;512            case STEP_CAN_DCD_FLAG_READ:
;;;513                STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
00052e  2057              MOVS     r0,#0x57
000530  f7fffffe          BL       STATE_SwitchStep
;;;514            
;;;515                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);
000534  203a              MOVS     r0,#0x3a
000536  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;516                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);
00053a  201a              MOVS     r0,#0x1a
00053c  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;517                CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DCD_FLAG_READ);
000540  20a6              MOVS     r0,#0xa6
000542  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;518                CAN_PROTOCOL1_TxAddData(0);
000546  2000              MOVS     r0,#0
000548  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;519                CAN_PROTOCOL1_TxAddFrame();                           
00054c  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
;;;520                break;
000550  e112              B        |L5.1912|
                  |L5.1362|
;;;521    
;;;522            // config设置成功
;;;523            case STEP_CAN_SET_CONFIG_SUCCESS:
;;;524                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_ITEM_FINISH);
000552  201e              MOVS     r0,#0x1e
000554  f7fffffe          BL       STATE_SwitchStep
;;;525                TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止设置config定时器
000558  2002              MOVS     r0,#2
00055a  f7fffffe          BL       TIMER_KillTask
;;;526                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);    // 停止超时定时器
00055e  2009              MOVS     r0,#9
000560  f7fffffe          BL       TIMER_KillTask
;;;527                IAP_CTRL_CAN_Init(CAN_BAUD_RATE_125K);   // 设置波特率
000564  207d              MOVS     r0,#0x7d
000566  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;528                DUTCTRL_PowerOnOff(0);         // dut断电
00056a  2000              MOVS     r0,#0
00056c  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;529                dut_info.configUpFlag = FALSE; // 标志位置false
000570  2000              MOVS     r0,#0
000572  4983              LDR      r1,|L5.1920|
000574  7708              STRB     r0,[r1,#0x1c]
;;;530                dut_info.configUpSuccesss = TRUE;
000576  2001              MOVS     r0,#1
000578  f881003d          STRB     r0,[r1,#0x3d]
;;;531                dut_info.dutPowerOnAllow = FALSE;
00057c  2000              MOVS     r0,#0
00057e  f881003c          STRB     r0,[r1,#0x3c]
;;;532                dut_info.frameType = DUT_FRAME_TYPE_STD;
000582  7608              STRB     r0,[r1,#0x18]
;;;533                break;
000584  e0f8              B        |L5.1912|
                  |L5.1414|
;;;534    
;;;535            // 更新BOOT入口
;;;536            case STEP_CM_CAN_BC_UPGRADE_BOOT_ENTRY:
;;;537                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000586  2010              MOVS     r0,#0x10
000588  f7fffffe          BL       STATE_SwitchStep
;;;538                dut_info.dutPowerOnAllow = TRUE; // 允许开机
00058c  2001              MOVS     r0,#1
00058e  497c              LDR      r1,|L5.1920|
000590  f881003c          STRB     r0,[r1,#0x3c]
;;;539                IAP_CTRL_CAN_Init(CAN_BAUD_RATE_500K);
000594  f44f70fa          MOV      r0,#0x1f4
000598  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;540                CAN_TEST_PROTOCOL_Init();
00059c  f7fffffe          BL       CAN_TEST_PROTOCOL_Init
;;;541                DUTCTRL_PowerOnOff(0);           // 仪表断电
0005a0  2000              MOVS     r0,#0
0005a2  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;542                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
0005a6  2009              MOVS     r0,#9
0005a8  f7fffffe          BL       TIMER_ResetTimer
;;;543                TIMER_AddTask(TIMER_ID_UPGRADE_DUT_BOOT,
0005ac  2001              MOVS     r0,#1
0005ae  1e81              SUBS     r1,r0,#2
0005b0  23a7              MOVS     r3,#0xa7
0005b2  4a74              LDR      r2,|L5.1924|
0005b4  e9cd1000          STRD     r1,r0,[sp,#0]
0005b8  f44f71fa          MOV      r1,#0x1f4
0005bc  2003              MOVS     r0,#3
0005be  f7fffffe          BL       TIMER_AddTask
;;;544                              500,
;;;545                              STATE_SwitchStep,
;;;546                              STEP_CM_CAN_BC_UPGRADE_SEND_BOOT_EAR,
;;;547                              TIMER_LOOP_FOREVER,
;;;548                              ACTION_MODE_ADD_TO_QUEUE);
;;;549                              dut_info.frameType = DUT_FRAME_TYPE_EXT;
0005c2  2001              MOVS     r0,#1
0005c4  496e              LDR      r1,|L5.1920|
0005c6  7608              STRB     r0,[r1,#0x18]
;;;550                break;
0005c8  e0d6              B        |L5.1912|
                  |L5.1482|
;;;551    
;;;552            // 发送BOOT擦除指令
;;;553            case STEP_CM_CAN_BC_UPGRADE_SEND_BOOT_EAR:
;;;554                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
0005ca  2010              MOVS     r0,#0x10
0005cc  f7fffffe          BL       STATE_SwitchStep
;;;555                DUTCTRL_PowerOnOff(1);
0005d0  2001              MOVS     r0,#1
0005d2  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;556                TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
0005d6  2009              MOVS     r0,#9
0005d8  f7fffffe          BL       TIMER_ResetTimer
;;;557    //            Delayms(500);
;;;558    //            dut_info.dutPowerOnAllow = FALSE;
;;;559                dut_info.bootEaring = TRUE; 
0005dc  2001              MOVS     r0,#1
0005de  4968              LDR      r1,|L5.1920|
0005e0  f88100e2          STRB     r0,[r1,#0xe2]
;;;560                dut_info.reconnectionRepeatOne = FALSE;
0005e4  2000              MOVS     r0,#0
0005e6  f881004b          STRB     r0,[r1,#0x4b]
;;;561                CAN_TEST_PROTOCOL_SendCmdNoResult(CAN_TEST_PROTOCOL_CMD_BOOT_ERASE_FLASH);
0005ea  20d0              MOVS     r0,#0xd0
0005ec  f7fffffe          BL       CAN_TEST_PROTOCOL_SendCmdNoResult
;;;562                break;
0005f0  e0c2              B        |L5.1912|
                  |L5.1522|
;;;563    
;;;564            // 发送BOOT升级数据
;;;565            case STEP_CM_CAN_BC_UPGRADE_SEND_BOOT_PACKET:
;;;566               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT);
0005f2  2009              MOVS     r0,#9
0005f4  f7fffffe          BL       TIMER_ResetTimer
;;;567                dut_info.bootEaring = FALSE;
0005f8  2000              MOVS     r0,#0
0005fa  4961              LDR      r1,|L5.1920|
0005fc  f88100e2          STRB     r0,[r1,#0xe2]
;;;568                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000600  2010              MOVS     r0,#0x10
000602  f7fffffe          BL       STATE_SwitchStep
;;;569                CAN_TEST_PROTOCOL_SendUpDataPacket(DUT_FILE_TYPE_BIN, CAN_TEST_PROTOCOL_CMD_BOOT_WRITE_FLASH, SPI_FLASH_DUT_BOOT_ADDEESS, (dut_info.currentBootSize) * 128);
000606  485e              LDR      r0,|L5.1920|
000608  6ac0              LDR      r0,[r0,#0x2c]  ; dut_info
00060a  01c3              LSLS     r3,r0,#7
00060c  f44f2280          MOV      r2,#0x40000
000610  21d1              MOVS     r1,#0xd1
000612  2001              MOVS     r0,#1
000614  f7fffffe          BL       CAN_TEST_PROTOCOL_SendUpDataPacket
;;;570                dut_info.currentBootSize++;
000618  4859              LDR      r0,|L5.1920|
00061a  6ac0              LDR      r0,[r0,#0x2c]  ; dut_info
00061c  1c40              ADDS     r0,r0,#1
00061e  4958              LDR      r1,|L5.1920|
000620  62c8              STR      r0,[r1,#0x2c]  ; dut_info
;;;571                break;
000622  e0a9              B        |L5.1912|
                  |L5.1572|
;;;572    
;;;573            // BOOT升级完成
;;;574            case STEP_CM_CAN_BC_UPGRADE_BOOT_UP_SUCCESS:
;;;575                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000624  2010              MOVS     r0,#0x10
000626  f7fffffe          BL       STATE_SwitchStep
;;;576                CAN_TEST_PROTOCOL_SendCmdWithResult(CAN_TEST_PROTOCOL_CMD_BOOT_UPDATA_FINISH, TRUE);
00062a  2101              MOVS     r1,#1
00062c  20d2              MOVS     r0,#0xd2
00062e  f7fffffe          BL       CAN_TEST_PROTOCOL_SendCmdWithResult
;;;577                dut_info.bootUpFlag = FALSE;
000632  2000              MOVS     r0,#0
000634  4952              LDR      r1,|L5.1920|
000636  7688              STRB     r0,[r1,#0x1a]
;;;578                dut_info.bootUpSuccesss = TRUE;
000638  2001              MOVS     r0,#1
00063a  f8810040          STRB     r0,[r1,#0x40]
;;;579                break;
00063e  e09b              B        |L5.1912|
                  |L5.1600|
;;;580    
;;;581            // 升级项升级成功
;;;582            case STEP_CM_CAN_UPGRADE_ITEM_FINISH:
;;;583                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
000640  2010              MOVS     r0,#0x10
000642  f7fffffe          BL       STATE_SwitchStep
;;;584    
;;;585                // 选择升级
;;;586                if (dut_info.appUpFlag)
000646  484e              LDR      r0,|L5.1920|
000648  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00064a  b188              CBZ      r0,|L5.1648|
;;;587                {
;;;588                    dut_info.currentAppSize = 0;
00064c  2000              MOVS     r0,#0
00064e  494c              LDR      r1,|L5.1920|
000650  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;589                    dut_info.dutPowerOnAllow = FALSE;
000652  f881003c          STRB     r0,[r1,#0x3c]
;;;590                    DUTCTRL_PowerOnOff(0);
000656  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;591                    TIMER_AddTask(TIMER_ID_DUT_UPGRATE,
00065a  2001              MOVS     r0,#1
00065c  9000              STR      r0,[sp,#0]
00065e  230f              MOVS     r3,#0xf
000660  4a48              LDR      r2,|L5.1924|
000662  f44f71fa          MOV      r1,#0x1f4
000666  9001              STR      r0,[sp,#4]
000668  4618              MOV      r0,r3
00066a  f7fffffe          BL       TIMER_AddTask
00066e  e01a              B        |L5.1702|
                  |L5.1648|
;;;592                                  500,
;;;593                                  STATE_SwitchStep,
;;;594                                  STEP_CM_CAN_UPGRADE_ENTRY,
;;;595                                  1,
;;;596                                  ACTION_MODE_ADD_TO_QUEUE);
;;;597                }
;;;598                else if (dut_info.uiUpFlag)
000670  4843              LDR      r0,|L5.1920|
000672  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000674  b130              CBZ      r0,|L5.1668|
;;;599                {
;;;600                    dut_info.currentUiSize = 0;
000676  2000              MOVS     r0,#0
000678  4941              LDR      r1,|L5.1920|
00067a  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;601                    STATE_SwitchStep(STEP_CM_CAN_UPGRADE_SEND_UI_EAR); // 0x12:擦除ui命令
00067c  2013              MOVS     r0,#0x13
00067e  f7fffffe          BL       STATE_SwitchStep
000682  e010              B        |L5.1702|
                  |L5.1668|
;;;602                }
;;;603                else if (dut_info.configUpFlag)
000684  483e              LDR      r0,|L5.1920|
000686  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000688  b118              CBZ      r0,|L5.1682|
;;;604                {
;;;605                    STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
00068a  204f              MOVS     r0,#0x4f
00068c  f7fffffe          BL       STATE_SwitchStep
000690  e009              B        |L5.1702|
                  |L5.1682|
;;;606                }
;;;607                else if (dut_info.bootUpFlag)
000692  483b              LDR      r0,|L5.1920|
000694  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
000696  b118              CBZ      r0,|L5.1696|
;;;608                {
;;;609                    STATE_SwitchStep(STEP_CM_CAN_BC_UPGRADE_BOOT_ENTRY);
000698  20a6              MOVS     r0,#0xa6
00069a  f7fffffe          BL       STATE_SwitchStep
00069e  e002              B        |L5.1702|
                  |L5.1696|
;;;610                }
;;;611                else
;;;612                {
;;;613                    // 没有升级项断电
;;;614                    STATE_EnterState(STATE_STANDBY);
0006a0  2001              MOVS     r0,#1
0006a2  f7fffffe          BL       STATE_EnterState
                  |L5.1702|
;;;615                }
;;;616                break;
0006a6  e067              B        |L5.1912|
                  |L5.1704|
;;;617    
;;;618            // 握手超时
;;;619            case STEP_CM_CAN_UPGRADE_COMMUNICATION_TIME_OUT:
;;;620                if (dut_info.appUpFlag)
0006a8  4835              LDR      r0,|L5.1920|
0006aa  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
0006ac  b120              CBZ      r0,|L5.1720|
;;;621                {
;;;622                    dut_info.appUpFaile = TRUE;
0006ae  2001              MOVS     r0,#1
0006b0  4933              LDR      r1,|L5.1920|
0006b2  f8810039          STRB     r0,[r1,#0x39]
0006b6  e016              B        |L5.1766|
                  |L5.1720|
;;;623                }
;;;624                else if (dut_info.uiUpFlag)
0006b8  4831              LDR      r0,|L5.1920|
0006ba  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
0006bc  b120              CBZ      r0,|L5.1736|
;;;625                {
;;;626                    dut_info.uiUpFaile = TRUE; // ui升级失败
0006be  2001              MOVS     r0,#1
0006c0  492f              LDR      r1,|L5.1920|
0006c2  f881003a          STRB     r0,[r1,#0x3a]
0006c6  e00e              B        |L5.1766|
                  |L5.1736|
;;;627                }
;;;628                else if (dut_info.configUpFlag)
0006c8  482d              LDR      r0,|L5.1920|
0006ca  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
0006cc  b120              CBZ      r0,|L5.1752|
;;;629                {
;;;630                    dut_info.configUpFaile = TRUE; // config升级失败
0006ce  2001              MOVS     r0,#1
0006d0  492b              LDR      r1,|L5.1920|
0006d2  f881003b          STRB     r0,[r1,#0x3b]
0006d6  e006              B        |L5.1766|
                  |L5.1752|
;;;631                }
;;;632                else if (dut_info.bootUpFlag)
0006d8  4829              LDR      r0,|L5.1920|
0006da  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
0006dc  b118              CBZ      r0,|L5.1766|
;;;633                {
;;;634                    dut_info.bootUpFaile = TRUE;   // boot更新失败
0006de  2001              MOVS     r0,#1
0006e0  4927              LDR      r1,|L5.1920|
0006e2  f8810038          STRB     r0,[r1,#0x38]
                  |L5.1766|
;;;635                }
;;;636    
;;;637                STATE_EnterState(STATE_STANDBY);
0006e6  2001              MOVS     r0,#1
0006e8  f7fffffe          BL       STATE_EnterState
;;;638                break;
0006ec  e044              B        |L5.1912|
                  |L5.1774|
;;;639    
;;;640            // dut断电重新连接
;;;641            case STEP_CM_CAN_UPGRADE_RECONNECTION:
;;;642                STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
0006ee  2010              MOVS     r0,#0x10
0006f0  f7fffffe          BL       STATE_SwitchStep
;;;643                dut_info.reconnectionRepeatOne = TRUE;
0006f4  2001              MOVS     r0,#1
0006f6  4922              LDR      r1,|L5.1920|
0006f8  f881004b          STRB     r0,[r1,#0x4b]
;;;644                dut_info.reconnectionFlag = TRUE;
0006fc  f881004a          STRB     r0,[r1,#0x4a]
;;;645                // 每100ms发送一次eco允许
;;;646                TIMER_AddTask(TIMER_ID_RECONNECTION,
000700  1e81              SUBS     r1,r0,#2
000702  2312              MOVS     r3,#0x12
000704  4a1f              LDR      r2,|L5.1924|
000706  e9cd1000          STRD     r1,r0,[sp,#0]
00070a  2164              MOVS     r1,#0x64
00070c  200a              MOVS     r0,#0xa
00070e  f7fffffe          BL       TIMER_AddTask
;;;647                              100,
;;;648                              STATE_SwitchStep,
;;;649                              STEP_CM_CAN_UPGRADE_UP_ALLOW,
;;;650                              TIMER_LOOP_FOREVER,
;;;651                              ACTION_MODE_ADD_TO_QUEUE);
;;;652    
;;;653                // 3s后停止发送eco允许，上报升级失败
;;;654                TIMER_AddTask(TIMER_ID_RECONNECTION_TIME_OUT,
000712  2001              MOVS     r0,#1
000714  9000              STR      r0,[sp,#0]
000716  2321              MOVS     r3,#0x21
000718  4a1a              LDR      r2,|L5.1924|
00071a  f64031b8          MOV      r1,#0xbb8
00071e  9001              STR      r0,[sp,#4]
000720  200b              MOVS     r0,#0xb
000722  f7fffffe          BL       TIMER_AddTask
;;;655                              3000,
;;;656                              STATE_SwitchStep,
;;;657                              STEP_CM_CAN_UPGRADE_RECONNECTION_TIME_OUT,
;;;658                              1,
;;;659                              ACTION_MODE_ADD_TO_QUEUE);
;;;660                break;
000726  e027              B        |L5.1912|
                  |L5.1832|
;;;661    
;;;662            // 重新连接超时
;;;663            case STEP_CM_CAN_UPGRADE_RECONNECTION_TIME_OUT:
;;;664                STATE_SwitchStep(STEP_NULL);
000728  2000              MOVS     r0,#0
00072a  f7fffffe          BL       STATE_SwitchStep
;;;665                TIMER_KillTask(TIMER_ID_RECONNECTION);
00072e  200a              MOVS     r0,#0xa
000730  f7fffffe          BL       TIMER_KillTask
;;;666                TIMER_KillTask(TIMER_ID_TIME_OUT_DETECTION);
000734  2005              MOVS     r0,#5
000736  f7fffffe          BL       TIMER_KillTask
;;;667                dut_info.reconnectionFlag = FALSE;
00073a  2000              MOVS     r0,#0
00073c  4910              LDR      r1,|L5.1920|
00073e  f881004a          STRB     r0,[r1,#0x4a]
;;;668    
;;;669                if (dut_info.appUpFlag)
000742  4608              MOV      r0,r1
000744  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
000746  b118              CBZ      r0,|L5.1872|
;;;670                {
;;;671                    dut_info.appUpFaile = TRUE;
000748  2001              MOVS     r0,#1
00074a  f8810039          STRB     r0,[r1,#0x39]
00074e  e00e              B        |L5.1902|
                  |L5.1872|
;;;672                }
;;;673                else if (dut_info.uiUpFlag)
000750  480b              LDR      r0,|L5.1920|
000752  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000754  b120              CBZ      r0,|L5.1888|
;;;674                {
;;;675                    dut_info.uiUpFaile = TRUE;
000756  2001              MOVS     r0,#1
000758  4909              LDR      r1,|L5.1920|
00075a  f881003a          STRB     r0,[r1,#0x3a]
00075e  e006              B        |L5.1902|
                  |L5.1888|
;;;676                }
;;;677                else if (dut_info.bootUpFlag)
000760  4807              LDR      r0,|L5.1920|
000762  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
000764  b118              CBZ      r0,|L5.1902|
;;;678                {
;;;679                    dut_info.bootUpFaile = TRUE;   // boot更新失败
000766  2001              MOVS     r0,#1
000768  4905              LDR      r1,|L5.1920|
00076a  f8810038          STRB     r0,[r1,#0x38]
                  |L5.1902|
;;;680                }
;;;681    
;;;682                STATE_EnterState(STATE_STANDBY);
00076e  2001              MOVS     r0,#1
000770  f7fffffe          BL       STATE_EnterState
;;;683                break;
000774  e000              B        |L5.1912|
                  |L5.1910|
;;;684    
;;;685            default:
;;;686                break;
000776  bf00              NOP      
                  |L5.1912|
000778  bf00              NOP                            ;201
;;;687        }
;;;688    }
00077a  b011              ADD      sp,sp,#0x44
00077c  bd30              POP      {r4,r5,pc}
;;;689    
                          ENDP

00077e  0000              DCW      0x0000
                  |L5.1920|
                          DCD      dut_info
                  |L5.1924|
                          DCD      STATE_SwitchStep
                  |L5.1928|
                          DCD      verifiedBuff

                          AREA ||i.STEP_Process_CmUartUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_CmUartUpgrade PROC
;;;2537   // 通用彩屏升级步骤
;;;2538   void STEP_Process_CmUartUpgrade()
000000  b530              PUSH     {r4,r5,lr}
;;;2539   {
000002  b09b              SUB      sp,sp,#0x6c
;;;2540       uint8 configs[100] = {0};
000004  2164              MOVS     r1,#0x64
000006  a802              ADD      r0,sp,#8
000008  f7fffffe          BL       __aeabi_memclr4
;;;2541       uint8 i, j;
;;;2542       
;;;2543       switch (stateCB.step)
00000c  48fa              LDR      r0,|L6.1016|
00000e  7880              LDRB     r0,[r0,#2]  ; stateCB
000010  2863              CMP      r0,#0x63
000012  d073              BEQ      |L6.252|
000014  dc18              BGT      |L6.72|
000016  285c              CMP      r0,#0x5c
000018  d062              BEQ      |L6.224|
00001a  dc0d              BGT      |L6.56|
00001c  2858              CMP      r0,#0x58
00001e  d042              BEQ      |L6.166|
000020  dc05              BGT      |L6.46|
000022  b358              CBZ      r0,|L6.124|
000024  2856              CMP      r0,#0x56
000026  d02a              BEQ      |L6.126|
000028  2857              CMP      r0,#0x57
                  |L6.42|
00002a  d168              BNE      |L6.254|
00002c  e03a              B        |L6.164|
                  |L6.46|
00002e  2859              CMP      r0,#0x59
000030  d041              BEQ      |L6.182|
000032  285b              CMP      r0,#0x5b
000034  d1f9              BNE      |L6.42|
000036  e046              B        |L6.198|
                  |L6.56|
000038  385d              SUBS     r0,r0,#0x5d
00003a  2806              CMP      r0,#6
                  |L6.60|
00003c  d25f              BCS      |L6.254|
00003e  e8dff000          TBB      [pc,r0]
000042  5f5e              DCB      0x5f,0x5e
000044  677c9aef          DCB      0x67,0x7c,0x9a,0xef
                  |L6.72|
000048  289f              CMP      r0,#0x9f
00004a  d071              BEQ      |L6.304|
00004c  dc0e              BGT      |L6.108|
00004e  289c              CMP      r0,#0x9c
000050  d06f              BEQ      |L6.306|
000052  dc06              BGT      |L6.98|
000054  2864              CMP      r0,#0x64
000056  d06d              BEQ      |L6.308|
000058  289a              CMP      r0,#0x9a
00005a  d06c              BEQ      |L6.310|
00005c  289b              CMP      r0,#0x9b
00005e  d1e4              BNE      |L6.42|
000060  e126              B        |L6.688|
                  |L6.98|
000062  289d              CMP      r0,#0x9d
000064  d068              BEQ      |L6.312|
000066  289e              CMP      r0,#0x9e
000068  d1df              BNE      |L6.42|
00006a  e1d3              B        |L6.1044|
                  |L6.108|
00006c  38a0              SUBS     r0,r0,#0xa0
00006e  2806              CMP      r0,#6
000070  d2e4              BCS      |L6.60|
000072  e8dff000          TBB      [pc,r0]
000076  eeed              DCB      0xee,0xed
000078  ec44ebea          DCB      0xec,0x44,0xeb,0xea
                  |L6.124|
;;;2544       {
;;;2545           case STEP_NULL: // 空步骤
;;;2546               break;
00007c  e25c              B        |L6.1336|
                  |L6.126|
;;;2547   
;;;2548           // 升级入口
;;;2549           case STEP_CM_UART_UPGRADE_ENTRY:
;;;2550               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
00007e  2057              MOVS     r0,#0x57
000080  f7fffffe          BL       STATE_SwitchStep
;;;2551               UART_DRIVE_InitSelect(UART_DRIVE_BAUD_RATE); // 设置波特率
000084  f44f30e1          MOV      r0,#0x1c200
000088  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2552               UART_PROTOCOL_Init();                        // 55升级协议
00008c  f7fffffe          BL       UART_PROTOCOL_Init
;;;2553               UART_PROTOCOL3_Init();                       // KM5S
000090  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2554               DUTCTRL_PowerOnOff(1);                       // dut上电
000094  2001              MOVS     r0,#1
000096  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2555               addTimeOutTimer(5000);                    // 握手超时时间：5S
00009a  f2413088          MOV      r0,#0x1388
00009e  f7fffffe          BL       addTimeOutTimer
;;;2556               break;
0000a2  e249              B        |L6.1336|
                  |L6.164|
;;;2557   
;;;2558           // 等待dut应答
;;;2559           case STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK:
;;;2560               // 只做等待，不做操作
;;;2561               break;
0000a4  e248              B        |L6.1336|
                  |L6.166|
;;;2562   
;;;2563           // 允许dut进入工程模式
;;;2564           case STEP_CM_UART_BC_UPGRADE_UP_ALLOW:
;;;2565               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0000a6  2057              MOVS     r0,#0x57
0000a8  f7fffffe          BL       STATE_SwitchStep
;;;2566               UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_PROJECT_ALLOW, TRUE);
0000ac  2101              MOVS     r1,#1
0000ae  2002              MOVS     r0,#2
0000b0  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2567               break;
0000b4  e240              B        |L6.1336|
                  |L6.182|
;;;2568   
;;;2569           // 发送app擦除指令
;;;2570           case STEP_CM_UART_BC_UPGRADE_SEND_APP_EAR:
;;;2571               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0000b6  2057              MOVS     r0,#0x57
0000b8  f7fffffe          BL       STATE_SwitchStep
;;;2572               UART_PROTOCOL_SendCmdParamAck(UART_CMD_DUT_APP_ERASE_FLASH, TRUE); // 0x24:擦除app命令
0000bc  2101              MOVS     r1,#1
0000be  2024              MOVS     r0,#0x24
0000c0  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2573               break;
0000c4  e238              B        |L6.1336|
                  |L6.198|
;;;2574   
;;;2575           // 发送app数据
;;;2576           case STEP_CM_UART_BC_UPGRADE_SEND_APP_PACKET:
;;;2577               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0000c6  2057              MOVS     r0,#0x57
0000c8  f7fffffe          BL       STATE_SwitchStep
;;;2578               uartProtocol_SendOnePacket_Hex(SPI_FLASH_DUT_APP_ADDEESS);
0000cc  f44f20c0          MOV      r0,#0x60000
0000d0  f7fffffe          BL       uartProtocol_SendOnePacket_Hex
;;;2579               dut_info.currentAppSize++;
0000d4  48c9              LDR      r0,|L6.1020|
0000d6  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000d8  1c40              ADDS     r0,r0,#1
0000da  49c8              LDR      r1,|L6.1020|
0000dc  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;2580               break;
0000de  e22b              B        |L6.1336|
                  |L6.224|
;;;2581   
;;;2582           // app升级完成
;;;2583           case STEP_CM_UART_BC_UPGRADE_APP_UP_SUCCESS:
;;;2584               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0000e0  2057              MOVS     r0,#0x57
0000e2  f7fffffe          BL       STATE_SwitchStep
;;;2585               UART_PROTOCOL_SendCmdParamAck(UART_CMD_DUT_UPDATA_FINISH, TRUE); // 0x2A:升级成功
0000e6  2101              MOVS     r1,#1
0000e8  202a              MOVS     r0,#0x2a
0000ea  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2586               dut_info.appUpFlag = FALSE;
0000ee  2000              MOVS     r0,#0
0000f0  49c2              LDR      r1,|L6.1020|
0000f2  76c8              STRB     r0,[r1,#0x1b]
;;;2587               dut_info.appUpSuccesss = TRUE;
0000f4  2001              MOVS     r0,#1
0000f6  f881003f          STRB     r0,[r1,#0x3f]
;;;2588               break;
0000fa  e21d              B        |L6.1336|
                  |L6.252|
0000fc  e0aa              B        |L6.596|
                  |L6.254|
0000fe  e21a              B        |L6.1334|
;;;2589   
;;;2590           // ui升级流程
;;;2591           // 发送擦除ui命令
;;;2592           case STEP_CM_UART_BC_UPGRADE_SEND_UI_EAR:
;;;2593               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
000100  2057              MOVS     r0,#0x57
000102  f7fffffe          BL       STATE_SwitchStep
;;;2594               UART_PROTOCOL_SendCmdParamAck(UART_CMD_DUT_UI_DATA_ERASE, TRUE); // 0x12:擦除ui命令
000106  2101              MOVS     r1,#1
000108  2012              MOVS     r0,#0x12
00010a  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2595               break;
00010e  e213              B        |L6.1336|
;;;2596   
;;;2597           // 发送ui数据
;;;2598           case STEP_CM_UART_BC_UPGRADE_SEND_UI_PACKET:
;;;2599               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
000110  2057              MOVS     r0,#0x57
000112  f7fffffe          BL       STATE_SwitchStep
;;;2600               uartProtocol_SendOnePacket(SPI_FLASH_DUT_UI_ADDEESS, dut_info.currentUiSize * 128); // 发送128字节，数据中不包含地址
000116  48b9              LDR      r0,|L6.1020|
000118  6b40              LDR      r0,[r0,#0x34]  ; dut_info
00011a  01c1              LSLS     r1,r0,#7
00011c  f44f1000          MOV      r0,#0x200000
000120  f7fffffe          BL       uartProtocol_SendOnePacket
;;;2601               dut_info.currentUiSize++;
000124  48b5              LDR      r0,|L6.1020|
000126  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000128  1c40              ADDS     r0,r0,#1
00012a  49b4              LDR      r1,|L6.1020|
00012c  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;2602               break;
00012e  e203              B        |L6.1336|
                  |L6.304|
000130  e12b              B        |L6.906|
                  |L6.306|
000132  e0db              B        |L6.748|
                  |L6.308|
000134  e1cb              B        |L6.1230|
                  |L6.310|
000136  e09a              B        |L6.622|
                  |L6.312|
000138  e112              B        |L6.864|
;;;2603   
;;;2604           // ui升级完成
;;;2605           case STEP_CM_UART_BC_UPGRADE_UI_UP_SUCCESS:
;;;2606   //            STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
;;;2607   //            UART_PROTOCOL_SendCmdParamAck(UART_CMD_DUT_UPDATA_FINISH, TRUE); // 0x2A:升级成功
;;;2608   //            dut_info.uiUpSuccesss = TRUE;
;;;2609   //            dut_info.uiUpFlag = FALSE;
;;;2610               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
00013a  2057              MOVS     r0,#0x57
00013c  f7fffffe          BL       STATE_SwitchStep
;;;2611               dut_info.dutPowerOnAllow = TRUE; // 允许开机
000140  2001              MOVS     r0,#1
000142  49ae              LDR      r1,|L6.1020|
000144  f881003c          STRB     r0,[r1,#0x3c]
;;;2612               UART_DRIVE_InitSelect(9600);     // UART协议层初始化
000148  f44f5016          MOV      r0,#0x2580
00014c  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2613               UART_PROTOCOL_Init();            // 55升级协议
000150  f7fffffe          BL       UART_PROTOCOL_Init
;;;2614               UART_PROTOCOL3_Init();           // KM5S
000154  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2615               DUTCTRL_PowerOnOff(0);           // 仪表断电
000158  2000              MOVS     r0,#0
00015a  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2616   
;;;2617               TIMER_AddTask(TIMER_ID_SET_DUT_UI_VER,
00015e  2001              MOVS     r0,#1
000160  1e81              SUBS     r1,r0,#2
000162  2361              MOVS     r3,#0x61
000164  4aa6              LDR      r2,|L6.1024|
000166  e9cd1000          STRD     r1,r0,[sp,#0]
00016a  f44f717a          MOV      r1,#0x3e8
00016e  2010              MOVS     r0,#0x10
000170  f7fffffe          BL       TIMER_AddTask
;;;2618                             1000,
;;;2619                             STATE_SwitchStep,
;;;2620                             STEP_CM_UART_BC_WRITE_UI_VER,
;;;2621                             TIMER_LOOP_FOREVER,
;;;2622                             ACTION_MODE_ADD_TO_QUEUE);         
;;;2623               break;
000174  e1e0              B        |L6.1336|
;;;2624   
;;;2625           // 写UI版本号
;;;2626           case STEP_CM_UART_BC_WRITE_UI_VER:
;;;2627               writeUiFlag = TRUE;
000176  2001              MOVS     r0,#1
000178  49a2              LDR      r1,|L6.1028|
00017a  7008              STRB     r0,[r1,#0]
;;;2628               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
00017c  2057              MOVS     r0,#0x57
00017e  f7fffffe          BL       STATE_SwitchStep
;;;2629               DUTCTRL_PowerOnOff(1);                                           // dut上电
000182  2001              MOVS     r0,#1
000184  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2630   
;;;2631               // 将仪表锂电2号切换为KM5S协议
;;;2632               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);               // 添加命令头
000188  203a              MOVS     r0,#0x3a
00018a  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2633               UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);         // 添加设备地址
00018e  201a              MOVS     r0,#0x1a
000190  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2634               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_PROTOCOL_SWITCCH);   // 0xAB 添加命令字
000194  20ab              MOVS     r0,#0xab
000196  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2635               UART_PROTOCOL3_TxAddData(3);                                     // 添加数据长度
00019a  2003              MOVS     r0,#3
00019c  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2636               UART_PROTOCOL3_TxAddData(1);
0001a0  2001              MOVS     r0,#1
0001a2  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2637               UART_PROTOCOL3_TxAddData(1);
0001a6  2001              MOVS     r0,#1
0001a8  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2638               UART_PROTOCOL3_TxAddData(1);
0001ac  2001              MOVS     r0,#1
0001ae  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2639   
;;;2640               // 添加检验和与结束符，并添加至发送
;;;2641               UART_PROTOCOL3_TxAddFrame();
0001b2  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2642   
;;;2643               // 发送版本信息
;;;2644               SPI_FLASH_ReadArray(uiVer, SPI_FLASH_UI_VERSION_ADDEESS, 50); // 实际只有54个字节
0001b6  2232              MOVS     r2,#0x32
0001b8  f44f11b5          MOV      r1,#0x16a000
0001bc  4892              LDR      r0,|L6.1032|
0001be  f7fffffe          BL       SPI_FLASH_ReadArray
;;;2645               
;;;2646               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);
0001c2  203a              MOVS     r0,#0x3a
0001c4  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2647               UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);
0001c8  201a              MOVS     r0,#0x1a
0001ca  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2648               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_VERSION_TYPE_WRITE); // 0xA8
0001ce  20a8              MOVS     r0,#0xa8
0001d0  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2649               UART_PROTOCOL3_TxAddData(uiVer[0] + 2);
0001d4  498c              LDR      r1,|L6.1032|
0001d6  7809              LDRB     r1,[r1,#0]  ; uiVer
0001d8  1c89              ADDS     r1,r1,#2
0001da  b2c8              UXTB     r0,r1
0001dc  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2650               UART_PROTOCOL3_TxAddData(8);         // UI版本类型
0001e0  2008              MOVS     r0,#8
0001e2  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2651               UART_PROTOCOL3_TxAddData(uiVer[0]);  //  信息长度
0001e6  4988              LDR      r1,|L6.1032|
0001e8  7808              LDRB     r0,[r1,#0]  ; uiVer
0001ea  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2652   
;;;2653               j = 0;
0001ee  2500              MOVS     r5,#0
;;;2654               for (i = 1; i < uiVer[0] + 1; i++)
0001f0  2401              MOVS     r4,#1
0001f2  e00c              B        |L6.526|
                  |L6.500|
;;;2655               {
;;;2656                   UART_PROTOCOL3_TxAddData(uiVer[i]);
0001f4  4984              LDR      r1,|L6.1032|
0001f6  5d08              LDRB     r0,[r1,r4]
0001f8  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2657                   uiVerifiedBuff[j++] = uiVer[i];
0001fc  4882              LDR      r0,|L6.1032|
0001fe  5d02              LDRB     r2,[r0,r4]
000200  4628              MOV      r0,r5
000202  1c69              ADDS     r1,r5,#1
000204  b2cd              UXTB     r5,r1
000206  4981              LDR      r1,|L6.1036|
000208  540a              STRB     r2,[r1,r0]
00020a  1c60              ADDS     r0,r4,#1              ;2654
00020c  b2c4              UXTB     r4,r0                 ;2654
                  |L6.526|
00020e  487e              LDR      r0,|L6.1032|
000210  7800              LDRB     r0,[r0,#0]            ;2654  ; uiVer
000212  1c40              ADDS     r0,r0,#1              ;2654
000214  42a0              CMP      r0,r4                 ;2654
000216  dced              BGT      |L6.500|
;;;2658               }
;;;2659               UART_PROTOCOL3_TxAddFrame();          
000218  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2660               break;
00021c  e18c              B        |L6.1336|
00021e  e7ff              B        |L6.544|
                  |L6.544|
;;;2661               
;;;2662            // 读UI版本号
;;;2663           case STEP_CM_UART_BC_READ_UI_VER:
;;;2664               STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);    
000220  2010              MOVS     r0,#0x10
000222  f7fffffe          BL       STATE_SwitchStep
;;;2665               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);
000226  203a              MOVS     r0,#0x3a
000228  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2666               UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);
00022c  201a              MOVS     r0,#0x1a
00022e  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2667               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_VERSION_TYPE_READ); // 0xA9
000232  20a9              MOVS     r0,#0xa9
000234  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2668               UART_PROTOCOL3_TxAddData(1);    // 数据长度
000238  2001              MOVS     r0,#1
00023a  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2669               UART_PROTOCOL3_TxAddData(8);    // 类型
00023e  2008              MOVS     r0,#8
000240  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2670               UART_PROTOCOL3_TxAddFrame();
000244  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2671               break;
000248  e176              B        |L6.1336|
00024a  e132              B        |L6.1202|
00024c  e121              B        |L6.1170|
00024e  e116              B        |L6.1150|
000250  e0f7              B        |L6.1090|
000252  e0be              B        |L6.978|
                  |L6.596|
;;;2672               
;;;2673           // 写UI版本号成功
;;;2674           case STEP_CM_UART_BC_WRITE_UI_VER_SUCCESS:
;;;2675               writeUiFlag = FALSE;
000254  2000              MOVS     r0,#0
000256  496b              LDR      r1,|L6.1028|
000258  7008              STRB     r0,[r1,#0]
;;;2676               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_ITEM_FINISH);
00025a  2064              MOVS     r0,#0x64
00025c  f7fffffe          BL       STATE_SwitchStep
;;;2677               dut_info.uiUpSuccesss = TRUE;
000260  2001              MOVS     r0,#1
000262  4966              LDR      r1,|L6.1020|
000264  f881003e          STRB     r0,[r1,#0x3e]
;;;2678               dut_info.uiUpFlag = FALSE;   
000268  2000              MOVS     r0,#0
00026a  7748              STRB     r0,[r1,#0x1d]
;;;2679               break;  
00026c  e164              B        |L6.1336|
                  |L6.622|
;;;2680               
;;;2681           // 设置config入口
;;;2682           case STEP_UART_SET_CONFIG_ENTRY:
;;;2683               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
00026e  2057              MOVS     r0,#0x57
000270  f7fffffe          BL       STATE_SwitchStep
;;;2684               dut_info.dutPowerOnAllow = TRUE; // 允许开机
000274  2001              MOVS     r0,#1
000276  4961              LDR      r1,|L6.1020|
000278  f881003c          STRB     r0,[r1,#0x3c]
;;;2685               UART_DRIVE_InitSelect(9600);     // UART协议层初始化
00027c  f44f5016          MOV      r0,#0x2580
000280  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2686               UART_PROTOCOL_Init();            // 55升级协议
000284  f7fffffe          BL       UART_PROTOCOL_Init
;;;2687               UART_PROTOCOL3_Init();           // KM5S
000288  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2688               DUTCTRL_PowerOnOff(0);           // 仪表断电
00028c  2000              MOVS     r0,#0
00028e  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2689               writeUiFlag = FALSE;
000292  2000              MOVS     r0,#0
000294  495b              LDR      r1,|L6.1028|
000296  7008              STRB     r0,[r1,#0]
;;;2690               
;;;2691               TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
000298  2001              MOVS     r0,#1
00029a  1e81              SUBS     r1,r0,#2
00029c  239b              MOVS     r3,#0x9b
00029e  4a58              LDR      r2,|L6.1024|
0002a0  e9cd1000          STRD     r1,r0,[sp,#0]
0002a4  f44f71fa          MOV      r1,#0x1f4
0002a8  2002              MOVS     r0,#2
0002aa  f7fffffe          BL       TIMER_AddTask
;;;2692                             500,
;;;2693                             STATE_SwitchStep,
;;;2694                             STEP_UART_PROTOCOL_SWITCCH,
;;;2695                             TIMER_LOOP_FOREVER,
;;;2696                             ACTION_MODE_ADD_TO_QUEUE);
;;;2697               break;
0002ae  e143              B        |L6.1336|
                  |L6.688|
;;;2698   
;;;2699           // 协议切换
;;;2700           case STEP_UART_PROTOCOL_SWITCCH:
;;;2701               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0002b0  2057              MOVS     r0,#0x57
0002b2  f7fffffe          BL       STATE_SwitchStep
;;;2702               DUTCTRL_PowerOnOff(1);                                           // dut上电
0002b6  2001              MOVS     r0,#1
0002b8  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2703   
;;;2704               // 将仪表锂电2号切换为KM5S协议
;;;2705               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);               // 添加命令头
0002bc  203a              MOVS     r0,#0x3a
0002be  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2706               UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);         // 添加设备地址
0002c2  201a              MOVS     r0,#0x1a
0002c4  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2707               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_PROTOCOL_SWITCCH);   // 0xAB 添加命令字
0002c8  20ab              MOVS     r0,#0xab
0002ca  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2708               UART_PROTOCOL3_TxAddData(3);                                     // 添加数据长度
0002ce  2003              MOVS     r0,#3
0002d0  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2709               UART_PROTOCOL3_TxAddData(1);
0002d4  2001              MOVS     r0,#1
0002d6  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2710               UART_PROTOCOL3_TxAddData(1);
0002da  2001              MOVS     r0,#1
0002dc  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2711               UART_PROTOCOL3_TxAddData(1);
0002e0  2001              MOVS     r0,#1
0002e2  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2712   
;;;2713               // 添加检验和与结束符，并添加至发送
;;;2714               UART_PROTOCOL3_TxAddFrame();
0002e6  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2715               break;
0002ea  e125              B        |L6.1336|
                  |L6.748|
;;;2716   
;;;2717           // 发送config内容
;;;2718           case STEP_UART_SEND_SET_CONFIG:
;;;2719               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0002ec  2057              MOVS     r0,#0x57
0002ee  f7fffffe          BL       STATE_SwitchStep
;;;2720               SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60); // 实际只有54个字节
0002f2  223c              MOVS     r2,#0x3c
0002f4  f44f11b0          MOV      r1,#0x160000
0002f8  a802              ADD      r0,sp,#8
0002fa  f7fffffe          BL       SPI_FLASH_ReadArray
;;;2721               //          DUTCTRL_PowerOnOff(1);                                          // dut上电
;;;2722               /*发送dut配置信息*/
;;;2723               SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60); // 实际只有54个字节
0002fe  223c              MOVS     r2,#0x3c
000300  f44f11b0          MOV      r1,#0x160000
000304  a802              ADD      r0,sp,#8
000306  f7fffffe          BL       SPI_FLASH_ReadArray
;;;2724   
;;;2725               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);               // 添加命令头
00030a  203a              MOVS     r0,#0x3a
00030c  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2726               UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);         // 添加设备地址
000310  201a              MOVS     r0,#0x1a
000312  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2727               UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_WRITE_CONTROL_PARAM); // 0xc0 添加命令字
000316  20c0              MOVS     r0,#0xc0
000318  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2728               UART_PROTOCOL3_TxAddData(54);                                    // 添加数据长度
00031c  2036              MOVS     r0,#0x36
00031e  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2729               for (i = 0; i < 54; i++) // config只有54个字节
000322  2400              MOVS     r4,#0
000324  e005              B        |L6.818|
                  |L6.806|
;;;2730               {
;;;2731                   UART_PROTOCOL3_TxAddData(configs[i]);
000326  a902              ADD      r1,sp,#8
000328  5d08              LDRB     r0,[r1,r4]
00032a  f7fffffe          BL       UART_PROTOCOL3_TxAddData
00032e  1c60              ADDS     r0,r4,#1              ;2729
000330  b2c4              UXTB     r4,r0                 ;2729
                  |L6.818|
000332  2c36              CMP      r4,#0x36              ;2729
000334  dbf7              BLT      |L6.806|
;;;2732               }
;;;2733               // 添加检验和与结束符，并添加至发送
;;;2734               UART_PROTOCOL3_TxAddFrame();
000336  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2735   
;;;2736               // 获取待校验buffer
;;;2737               j = 0;
00033a  2500              MOVS     r5,#0
;;;2738               // 处理配置数据，去掉时间，获取待校验buffer
;;;2739               for (i = 0; i < 54 ; i++)
00033c  2400              MOVS     r4,#0
00033e  e00c              B        |L6.858|
                  |L6.832|
;;;2740               {
;;;2741                   if (i == 2)
000340  2c02              CMP      r4,#2
000342  d101              BNE      |L6.840|
;;;2742                   {
;;;2743                       i = i + 5;
000344  1d60              ADDS     r0,r4,#5
000346  b2c4              UXTB     r4,r0
                  |L6.840|
;;;2744                   }
;;;2745                   verifiedBuff[j++] = configs[i];
000348  a802              ADD      r0,sp,#8
00034a  5d02              LDRB     r2,[r0,r4]
00034c  4628              MOV      r0,r5
00034e  1c69              ADDS     r1,r5,#1
000350  b2cd              UXTB     r5,r1
000352  492f              LDR      r1,|L6.1040|
000354  540a              STRB     r2,[r1,r0]
000356  1c60              ADDS     r0,r4,#1              ;2739
000358  b2c4              UXTB     r4,r0                 ;2739
                  |L6.858|
00035a  2c36              CMP      r4,#0x36              ;2739
00035c  dbf0              BLT      |L6.832|
;;;2746               }
;;;2747               break;
00035e  e0eb              B        |L6.1336|
                  |L6.864|
;;;2748   
;;;2749           // 读取配置参数
;;;2750           case STEP_UART_READ_CONFIG:
;;;2751               TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG);                              // 停止设置config定时器
000360  2002              MOVS     r0,#2
000362  f7fffffe          BL       TIMER_KillTask
;;;2752               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
000366  2057              MOVS     r0,#0x57
000368  f7fffffe          BL       STATE_SwitchStep
;;;2753               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);                    // 添加命令头
00036c  203a              MOVS     r0,#0x3a
00036e  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2754               UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);              // 添加设备地址
000372  201a              MOVS     r0,#0x1a
000374  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2755               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_READ_CONTROL_PARAM);      // 0xC2添加命令字
000378  20c2              MOVS     r0,#0xc2
00037a  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2756               UART_PROTOCOL3_TxAddData(0);                                          // 添加数据长度
00037e  2000              MOVS     r0,#0
000380  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2757   
;;;2758               // 添加检验和与结束符，并添加至发送
;;;2759               UART_PROTOCOL3_TxAddFrame();
000384  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2760               break;
000388  e0d6              B        |L6.1336|
                  |L6.906|
;;;2761               
;;;2762           // 写入DCD标志
;;;2763           case STEP_UART_DCD_FLAG_WRITE:
;;;2764               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
00038a  2057              MOVS     r0,#0x57
00038c  f7fffffe          BL       STATE_SwitchStep
;;;2765               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);
000390  203a              MOVS     r0,#0x3a
000392  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2766               UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);
000396  201a              MOVS     r0,#0x1a
000398  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2767               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_DCD_FLAG_WRITE);
00039c  20a7              MOVS     r0,#0xa7
00039e  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2768               UART_PROTOCOL3_TxAddData(0x06);   // 数据长度
0003a2  2006              MOVS     r0,#6
0003a4  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2769               UART_PROTOCOL3_TxAddData(0x05);   // DCD标志
0003a8  2005              MOVS     r0,#5
0003aa  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2770               UART_PROTOCOL3_TxAddData(0x00);
0003ae  2000              MOVS     r0,#0
0003b0  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2771               UART_PROTOCOL3_TxAddData(0x00);
0003b4  2000              MOVS     r0,#0
0003b6  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2772               UART_PROTOCOL3_TxAddData(0x00);
0003ba  2000              MOVS     r0,#0
0003bc  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2773               UART_PROTOCOL3_TxAddData(0x02);
0003c0  2002              MOVS     r0,#2
0003c2  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2774               UART_PROTOCOL3_TxAddData(0);
0003c6  2000              MOVS     r0,#0
0003c8  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2775               UART_PROTOCOL3_TxAddFrame();               
0003cc  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2776               break;
0003d0  e0b2              B        |L6.1336|
                  |L6.978|
;;;2777           
;;;2778           // 读取DCD标志
;;;2779           case STEP_UART_DCD_FLAG_READ:
;;;2780               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0003d2  2057              MOVS     r0,#0x57
0003d4  f7fffffe          BL       STATE_SwitchStep
;;;2781           
;;;2782               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);
0003d8  203a              MOVS     r0,#0x3a
0003da  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2783               UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);
0003de  201a              MOVS     r0,#0x1a
0003e0  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2784               UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_DCD_FLAG_READ);
0003e4  20a6              MOVS     r0,#0xa6
0003e6  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2785               UART_PROTOCOL3_TxAddData(0);
0003ea  2000              MOVS     r0,#0
0003ec  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2786               UART_PROTOCOL3_TxAddFrame();                           
0003f0  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2787               break;
0003f4  e0a0              B        |L6.1336|
0003f6  0000              DCW      0x0000
                  |L6.1016|
                          DCD      stateCB
                  |L6.1020|
                          DCD      dut_info
                  |L6.1024|
                          DCD      STATE_SwitchStep
                  |L6.1028|
                          DCD      writeUiFlag
                  |L6.1032|
                          DCD      uiVer
                  |L6.1036|
                          DCD      uiVerifiedBuff
                  |L6.1040|
                          DCD      verifiedBuff
                  |L6.1044|
;;;2788               
;;;2789           // config设置成功
;;;2790           case STEP_UART_SET_CONFIG_SUCCESS:
;;;2791               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_ITEM_FINISH);
000414  2064              MOVS     r0,#0x64
000416  f7fffffe          BL       STATE_SwitchStep
;;;2792               TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止设置config定时器
00041a  2002              MOVS     r0,#2
00041c  f7fffffe          BL       TIMER_KillTask
;;;2793   
;;;2794               UART_DRIVE_InitSelect(115200); // 设置波特率
000420  f44f30e1          MOV      r0,#0x1c200
000424  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2795               dut_info.configUpFlag = FALSE; // 标志位置false
000428  2000              MOVS     r0,#0
00042a  4945              LDR      r1,|L6.1344|
00042c  7708              STRB     r0,[r1,#0x1c]
;;;2796               DUTCTRL_PowerOnOff(0);         // 仪表断电
00042e  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2797               dut_info.configUpSuccesss = TRUE;
000432  2001              MOVS     r0,#1
000434  4942              LDR      r1,|L6.1344|
000436  f881003d          STRB     r0,[r1,#0x3d]
;;;2798               dut_info.dutPowerOnAllow = FALSE; // 允许开机
00043a  2000              MOVS     r0,#0
00043c  f881003c          STRB     r0,[r1,#0x3c]
;;;2799               break;
000440  e07a              B        |L6.1336|
                  |L6.1090|
;;;2800   
;;;2801           // 更新BOOT入口
;;;2802           case STEP_CM_UART_BC_UPGRADE_BOOT_ENTRY:
;;;2803               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
000442  2057              MOVS     r0,#0x57
000444  f7fffffe          BL       STATE_SwitchStep
;;;2804               dut_info.dutPowerOnAllow = TRUE; // 允许开机
000448  2001              MOVS     r0,#1
00044a  493d              LDR      r1,|L6.1344|
00044c  f881003c          STRB     r0,[r1,#0x3c]
;;;2805               UART_DRIVE_InitSelect(9600);     // UART协议层初始化
000450  f44f5016          MOV      r0,#0x2580
000454  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2806               UART_PROTOCOL3_Init();           // 在该协议接收数据
000458  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2807               DTA_UART_PROTOCOL_Init();
00045c  f7fffffe          BL       DTA_UART_PROTOCOL_Init
;;;2808               DUTCTRL_PowerOnOff(0);           // 仪表断电
000460  2000              MOVS     r0,#0
000462  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2809   
;;;2810               TIMER_AddTask(TIMER_ID_UPGRADE_DUT_BOOT,
000466  2001              MOVS     r0,#1
000468  1e81              SUBS     r1,r0,#2
00046a  23a2              MOVS     r3,#0xa2
00046c  4a35              LDR      r2,|L6.1348|
00046e  e9cd1000          STRD     r1,r0,[sp,#0]
000472  f44f71fa          MOV      r1,#0x1f4
000476  2003              MOVS     r0,#3
000478  f7fffffe          BL       TIMER_AddTask
;;;2811                             500,
;;;2812                             STATE_SwitchStep,
;;;2813                             STEP_CM_UART_BC_UPGRADE_SEND_BOOT_EAR,
;;;2814                             TIMER_LOOP_FOREVER,
;;;2815                             ACTION_MODE_ADD_TO_QUEUE);
;;;2816               break;
00047c  e05c              B        |L6.1336|
                  |L6.1150|
;;;2817   
;;;2818           // 发送BOOT擦除指令
;;;2819           case STEP_CM_UART_BC_UPGRADE_SEND_BOOT_EAR:
;;;2820               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
00047e  2057              MOVS     r0,#0x57
000480  f7fffffe          BL       STATE_SwitchStep
;;;2821               DUTCTRL_PowerOnOff(1);
000484  2001              MOVS     r0,#1
000486  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2822               DTA_UART_PROTOCOL_SendCmdNoResult(DTA_UART_CMD_DUT_BOOT_ERASE_FLASH);
00048a  20d0              MOVS     r0,#0xd0
00048c  f7fffffe          BL       DTA_UART_PROTOCOL_SendCmdNoResult
;;;2823               break;
000490  e052              B        |L6.1336|
                  |L6.1170|
;;;2824   
;;;2825           // 发送BOOT升级数据
;;;2826           case STEP_CM_UART_BC_UPGRADE_SEND_BOOT_PACKET:
;;;2827               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
000492  2057              MOVS     r0,#0x57
000494  f7fffffe          BL       STATE_SwitchStep
;;;2828               dtaUartProtocol_SendOnePacket(SPI_FLASH_DUT_BOOT_ADDEESS, (dut_info.currentBootSize) * 128);
000498  4829              LDR      r0,|L6.1344|
00049a  6ac0              LDR      r0,[r0,#0x2c]  ; dut_info
00049c  01c1              LSLS     r1,r0,#7
00049e  f44f2080          MOV      r0,#0x40000
0004a2  f7fffffe          BL       dtaUartProtocol_SendOnePacket
;;;2829               dut_info.currentBootSize++;
0004a6  4826              LDR      r0,|L6.1344|
0004a8  6ac0              LDR      r0,[r0,#0x2c]  ; dut_info
0004aa  1c40              ADDS     r0,r0,#1
0004ac  4924              LDR      r1,|L6.1344|
0004ae  62c8              STR      r0,[r1,#0x2c]  ; dut_info
;;;2830               break;
0004b0  e042              B        |L6.1336|
                  |L6.1202|
;;;2831   
;;;2832           // BOOT升级完成
;;;2833           case STEP_CM_UART_BC_UPGRADE_BOOT_UP_SUCCESS:
;;;2834               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0004b2  2057              MOVS     r0,#0x57
0004b4  f7fffffe          BL       STATE_SwitchStep
;;;2835               DTA_UART_PROTOCOL_SendCmdParamAck(DTA_UART_CMD_DUT_UPDATA_FINISH, TRUE);
0004b8  2101              MOVS     r1,#1
0004ba  20d2              MOVS     r0,#0xd2
0004bc  f7fffffe          BL       DTA_UART_PROTOCOL_SendCmdParamAck
;;;2836               dut_info.bootUpFlag = FALSE;
0004c0  2000              MOVS     r0,#0
0004c2  491f              LDR      r1,|L6.1344|
0004c4  7688              STRB     r0,[r1,#0x1a]
;;;2837               dut_info.bootUpSuccesss = TRUE;
0004c6  2001              MOVS     r0,#1
0004c8  f8810040          STRB     r0,[r1,#0x40]
;;;2838               break;
0004cc  e034              B        |L6.1336|
                  |L6.1230|
;;;2839   
;;;2840           // 升级项完成
;;;2841           case STEP_CM_UART_BC_UPGRADE_ITEM_FINISH:
;;;2842               STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0004ce  2057              MOVS     r0,#0x57
0004d0  f7fffffe          BL       STATE_SwitchStep
;;;2843   
;;;2844               if (dut_info.appUpFlag)
0004d4  481a              LDR      r0,|L6.1344|
0004d6  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
0004d8  b188              CBZ      r0,|L6.1278|
;;;2845               {
;;;2846                   dut_info.currentAppSize = 0;
0004da  2000              MOVS     r0,#0
0004dc  4918              LDR      r1,|L6.1344|
0004de  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;2847                   dut_info.dutPowerOnAllow = FALSE;
0004e0  f881003c          STRB     r0,[r1,#0x3c]
;;;2848                   DUTCTRL_PowerOnOff(0);
0004e4  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2849   
;;;2850                   TIMER_AddTask(TIMER_ID_DUT_UPGRATE,
0004e8  2001              MOVS     r0,#1
0004ea  9000              STR      r0,[sp,#0]
0004ec  2356              MOVS     r3,#0x56
0004ee  4a15              LDR      r2,|L6.1348|
0004f0  f44f71fa          MOV      r1,#0x1f4
0004f4  9001              STR      r0,[sp,#4]
0004f6  200f              MOVS     r0,#0xf
0004f8  f7fffffe          BL       TIMER_AddTask
0004fc  e01a              B        |L6.1332|
                  |L6.1278|
;;;2851                                 500,
;;;2852                                 STATE_SwitchStep,
;;;2853                                 STEP_CM_UART_UPGRADE_ENTRY,
;;;2854                                 1,
;;;2855                                 ACTION_MODE_ADD_TO_QUEUE);
;;;2856               }
;;;2857               else if (dut_info.uiUpFlag)
0004fe  4810              LDR      r0,|L6.1344|
000500  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000502  b130              CBZ      r0,|L6.1298|
;;;2858               {
;;;2859                   dut_info.currentUiSize = 0;
000504  2000              MOVS     r0,#0
000506  490e              LDR      r1,|L6.1344|
000508  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;2860                   STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_SEND_UI_EAR); // 0x12:擦除ui命令
00050a  205d              MOVS     r0,#0x5d
00050c  f7fffffe          BL       STATE_SwitchStep
000510  e010              B        |L6.1332|
                  |L6.1298|
;;;2861               }
;;;2862               else if (dut_info.configUpFlag)
000512  480b              LDR      r0,|L6.1344|
000514  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000516  b118              CBZ      r0,|L6.1312|
;;;2863               {
;;;2864                   STATE_SwitchStep(STEP_UART_SET_CONFIG_ENTRY);
000518  209a              MOVS     r0,#0x9a
00051a  f7fffffe          BL       STATE_SwitchStep
00051e  e009              B        |L6.1332|
                  |L6.1312|
;;;2865               }
;;;2866               else if (dut_info.bootUpFlag)
000520  4807              LDR      r0,|L6.1344|
000522  7e80              LDRB     r0,[r0,#0x1a]  ; dut_info
000524  b118              CBZ      r0,|L6.1326|
;;;2867               {
;;;2868                   STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_BOOT_ENTRY);
000526  20a1              MOVS     r0,#0xa1
000528  f7fffffe          BL       STATE_SwitchStep
00052c  e002              B        |L6.1332|
                  |L6.1326|
;;;2869               }
;;;2870               else
;;;2871               {
;;;2872                   // 没有升级项断电
;;;2873                   STATE_EnterState(STATE_STANDBY);
00052e  2001              MOVS     r0,#1
000530  f7fffffe          BL       STATE_EnterState
                  |L6.1332|
;;;2874               }
;;;2875               break;
000534  e000              B        |L6.1336|
                  |L6.1334|
;;;2876   
;;;2877           default:
;;;2878               break;
000536  bf00              NOP      
                  |L6.1336|
000538  bf00              NOP                            ;2546
;;;2879       }
;;;2880   }
00053a  b01b              ADD      sp,sp,#0x6c
00053c  bd30              POP      {r4,r5,pc}
;;;2881   
                          ENDP

00053e  0000              DCW      0x0000
                  |L6.1344|
                          DCD      dut_info
                  |L6.1348|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_GaobiaoCanUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_GaobiaoCanUpgrade PROC
;;;40     
;;;41     void STEP_Process_GaobiaoCanUpgrade(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;42     {
;;;43         switch (stateCB.step)
000002  4865              LDR      r0,|L7.408|
000004  7880              LDRB     r0,[r0,#2]  ; stateCB
000006  280e              CMP      r0,#0xe
000008  d271              BCS      |L7.238|
00000a  e8dff000          TBB      [pc,r0]
00000e  0708              DCB      0x07,0x08
000010  141e2f30          DCB      0x14,0x1e,0x2f,0x30
000014  3d4f595a          DCB      0x3d,0x4f,0x59,0x5a
000018  718daab1          DCB      0x71,0x8d,0xaa,0xb1
;;;44         {
;;;45         case STEP_NULL: // 空步骤
;;;46             break;
00001c  e0b9              B        |L7.402|
;;;47     
;;;48         // 入口步骤，做一些初始化的工作
;;;49         case STEP_GAOBIAO_CAN_UPGRADE_ENTRY:
;;;50             STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_CAN_INIT);
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       STATE_SwitchStep
;;;51             dut_info.currentUiSize = 0;
000024  2000              MOVS     r0,#0
000026  495d              LDR      r1,|L7.412|
000028  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;52             dut_info.uiUpFaile = FALSE;
00002a  f881003a          STRB     r0,[r1,#0x3a]
;;;53             dut_info.currentAppSize = 0;
00002e  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;54             dut_info.appUpFaile = FALSE;       
000030  f8810039          STRB     r0,[r1,#0x39]
;;;55             break;
000034  e0ad              B        |L7.402|
;;;56     
;;;57         // CAN初始化
;;;58         case STEP_GAOBIAO_CAN_UPGRADE_CAN_INIT:
;;;59             STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_POWER_ON);
000036  2003              MOVS     r0,#3
000038  f7fffffe          BL       STATE_SwitchStep
;;;60             IAP_CTRL_CAN_Init(CAN_BAUD_RATE_500K);
00003c  f44f70fa          MOV      r0,#0x1f4
000040  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;61             CAN_PROTOCOL_Init(); // 高标升级初始化
000044  f7fffffe          BL       CAN_PROTOCOL_Init
;;;62             break;
000048  e0a3              B        |L7.402|
;;;63     
;;;64         // dut上电
;;;65         case STEP_GAOBIAO_CAN_UPGRADE_POWER_ON:
;;;66             STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_WAIT_3S);
00004a  2004              MOVS     r0,#4
00004c  f7fffffe          BL       STATE_SwitchStep
;;;67     
;;;68             // 给DUT上电
;;;69             DUTCTRL_PowerOnOff(1);
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;70     
;;;71             // 延时3s
;;;72             TIMER_AddTask(TIMER_ID_TIME_GB_POWER_ON,
000056  2001              MOVS     r0,#1
000058  9000              STR      r0,[sp,#0]
00005a  2305              MOVS     r3,#5
00005c  4a50              LDR      r2,|L7.416|
00005e  f64031b8          MOV      r1,#0xbb8
000062  9001              STR      r0,[sp,#4]
000064  2006              MOVS     r0,#6
000066  f7fffffe          BL       TIMER_AddTask
;;;73                           3000,
;;;74                           STATE_SwitchStep,
;;;75                           STEP_GAOBIAO_CAN_UPGRADE_SEND_KEEP_ELECTRICITY,
;;;76                           1,
;;;77                           ACTION_MODE_ADD_TO_QUEUE);
;;;78     
;;;79             break;
00006a  e092              B        |L7.402|
;;;80     
;;;81         // 这里不需要做任何事情，只需要等待3s即可
;;;82         case STEP_GAOBIAO_CAN_UPGRADE_WAIT_3S:
;;;83             break;
00006c  e091              B        |L7.402|
;;;84     
;;;85         // 上电等待3s后执行到此步骤,保电
;;;86         case STEP_GAOBIAO_CAN_UPGRADE_SEND_KEEP_ELECTRICITY:
;;;87             STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_WAITING_FOR_READY);
00006e  2008              MOVS     r0,#8
000070  f7fffffe          BL       STATE_SwitchStep
;;;88             // 升级开始，UPDATA和UPDATA1确保先跳入boot后发送请求dut接收
;;;89             canProtocolCB.UPDATA = FALSE;
000074  2000              MOVS     r0,#0
000076  494b              LDR      r1,|L7.420|
000078  f8810f16          STRB     r0,[r1,#0xf16]
;;;90             canProtocolCB.UPDATA1 = FALSE;
00007c  f8810f17          STRB     r0,[r1,#0xf17]
;;;91             CAN_UP_RESET(1); // 电池保电，先保电后升级
000080  2001              MOVS     r0,#1
000082  f7fffffe          BL       CAN_UP_RESET
;;;92             break;
000086  e084              B        |L7.402|
;;;93     
;;;94         // 向dut发送跳入boot指令
;;;95         case STEP_GAOBIAO_CAN_UPGRADE_SEND_BOOT_CMD:
;;;96             STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_WAITING_FOR_READY);
000088  2008              MOVS     r0,#8
00008a  f7fffffe          BL       STATE_SwitchStep
;;;97             CAN_UP_RESET(2); // 1:保电，2：跳入boot
00008e  2002              MOVS     r0,#2
000090  f7fffffe          BL       CAN_UP_RESET
;;;98     
;;;99             // 添加超时
;;;100            TIMER_AddTask(TIMER_ID_TIME_OUT_DETECTION,
000094  2001              MOVS     r0,#1
000096  1e81              SUBS     r1,r0,#2
000098  230d              MOVS     r3,#0xd
00009a  4a41              LDR      r2,|L7.416|
00009c  e9cd1000          STRD     r1,r0,[sp,#0]
0000a0  f2427110          MOV      r1,#0x2710
0000a4  2005              MOVS     r0,#5
0000a6  f7fffffe          BL       TIMER_AddTask
;;;101                          10000,
;;;102                          STATE_SwitchStep,
;;;103                          STEP_GAOBIAO_CAN_UPGRADE_TIME_OUT,
;;;104                          TIMER_LOOP_FOREVER,
;;;105                          ACTION_MODE_ADD_TO_QUEUE);
;;;106            break;
0000aa  e072              B        |L7.402|
;;;107    
;;;108        // 询问dut是否接收数据
;;;109        case STEP_GAOBIAO_CAN_UPGRADE_ARE_YOU_READY:
;;;110            STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_WAITING_FOR_READY);
0000ac  2008              MOVS     r0,#8
0000ae  f7fffffe          BL       STATE_SwitchStep
;;;111            // 喂狗
;;;112            TIMER_ResetTimer(TIMER_ID_TIME_OUT_DETECTION);
0000b2  2005              MOVS     r0,#5
0000b4  f7fffffe          BL       TIMER_ResetTimer
;;;113            CAN_UP_DATA(1);
0000b8  2001              MOVS     r0,#1
0000ba  f7fffffe          BL       CAN_UP_DATA
;;;114    
;;;115            break;
0000be  e068              B        |L7.402|
;;;116    
;;;117        case STEP_GAOBIAO_CAN_UPGRADE_WAITING_FOR_READY:
;;;118            // 只做等待，不做动作
;;;119            break;
0000c0  e067              B        |L7.402|
;;;120    
;;;121        // dut允许接收数据后开始发送数据
;;;122        case STEP_GAOBIAO_CAN_UPGRADE_SEND_DATA:
;;;123            if(dut_info.uiUpFlag)
0000c2  4836              LDR      r0,|L7.412|
0000c4  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
0000c6  b128              CBZ      r0,|L7.212|
;;;124            {
;;;125                CAN_PGN_RequestSendData(STATE_PGN_SEND_2, 0xEF, 0x27, 0xF9);            
0000c8  23f9              MOVS     r3,#0xf9
0000ca  2227              MOVS     r2,#0x27
0000cc  21ef              MOVS     r1,#0xef
0000ce  2002              MOVS     r0,#2
0000d0  f7fffffe          BL       CAN_PGN_RequestSendData
                  |L7.212|
;;;126            }
;;;127            if(dut_info.appUpFlag)
0000d4  4831              LDR      r0,|L7.412|
0000d6  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
0000d8  b128              CBZ      r0,|L7.230|
;;;128            {
;;;129                CAN_PGN_RequestSendData(STATE_PGN_SEND_2, 0xEF, 0x28, 0xF9);                    
0000da  23f9              MOVS     r3,#0xf9
0000dc  2228              MOVS     r2,#0x28
0000de  21ef              MOVS     r1,#0xef
0000e0  2002              MOVS     r0,#2
0000e2  f7fffffe          BL       CAN_PGN_RequestSendData
                  |L7.230|
;;;130            }
;;;131            STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_WAITING_FOR_READY);
0000e6  2008              MOVS     r0,#8
0000e8  f7fffffe          BL       STATE_SwitchStep
;;;132            break;
0000ec  e051              B        |L7.402|
                  |L7.238|
0000ee  e04f              B        |L7.400|
;;;133    
;;;134        // dut返回数据写入失败后重新发送
;;;135        case STEP_GAOBIAO_CAN_UPGRADE_WRITE_ERROR:
;;;136            STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_ARE_YOU_READY);
0000f0  2007              MOVS     r0,#7
0000f2  f7fffffe          BL       STATE_SwitchStep
;;;137            if (0 < dut_info.currentUiSize)
0000f6  4829              LDR      r0,|L7.412|
0000f8  6b40              LDR      r0,[r0,#0x34]  ; dut_info
0000fa  2800              CMP      r0,#0
0000fc  d904              BLS      |L7.264|
;;;138            {
;;;139                dut_info.currentUiSize--;
0000fe  4827              LDR      r0,|L7.412|
000100  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000102  1e40              SUBS     r0,r0,#1
000104  4925              LDR      r1,|L7.412|
000106  6348              STR      r0,[r1,#0x34]  ; dut_info
                  |L7.264|
;;;140            }
;;;141            if (0 < dut_info.currentAppSize)
000108  4824              LDR      r0,|L7.412|
00010a  6b00              LDR      r0,[r0,#0x30]  ; dut_info
00010c  2800              CMP      r0,#0
00010e  d904              BLS      |L7.282|
;;;142            {
;;;143                dut_info.currentAppSize--;
000110  4822              LDR      r0,|L7.412|
000112  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000114  1e40              SUBS     r0,r0,#1
000116  4921              LDR      r1,|L7.412|
000118  6308              STR      r0,[r1,#0x30]  ; dut_info
                  |L7.282|
;;;144            }
;;;145            // 清空发送队列
;;;146            sysCanCB.tx.head = 0;
00011a  2100              MOVS     r1,#0
00011c  4822              LDR      r0,|L7.424|
00011e  f8a01d6c          STRH     r1,[r0,#0xd6c]
;;;147            sysCanCB.tx.end = 0;
000122  f8a01d6e          STRH     r1,[r0,#0xd6e]
;;;148            break;
000126  e034              B        |L7.402|
;;;149    
;;;150        // 升级结束
;;;151        case STEP_GAOBIAO_CAN_UPGRADE_FINISH:
;;;152            STATE_SwitchStep(STEP_GAOBIAO_CAN_UPGRADE_WAIT_3S);
000128  2004              MOVS     r0,#4
00012a  f7fffffe          BL       STATE_SwitchStep
;;;153            dut_info.uiUpFlag = FALSE; // 升级项ui复位
00012e  2000              MOVS     r0,#0
000130  491a              LDR      r1,|L7.412|
000132  7748              STRB     r0,[r1,#0x1d]
;;;154            dut_info.currentUiSize = 0;
000134  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;155            dut_info.uiUpSuccesss = TRUE; // 上报升级成功
000136  2001              MOVS     r0,#1
000138  f881003e          STRB     r0,[r1,#0x3e]
;;;156            dut_info.appUpFlag = FALSE; // 升级项APP复位
00013c  2000              MOVS     r0,#0
00013e  76c8              STRB     r0,[r1,#0x1b]
;;;157            dut_info.currentAppSize = 0;
000140  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;158            dut_info.appUpSuccesss = TRUE; // 上报升级成功 
000142  2001              MOVS     r0,#1
000144  f881003f          STRB     r0,[r1,#0x3f]
;;;159            
;;;160            // dut延时断电
;;;161            TIMER_AddTask(TIMER_ID_TIME_GB_POWER_OFF,
000148  9000              STR      r0,[sp,#0]
00014a  230c              MOVS     r3,#0xc
00014c  4a14              LDR      r2,|L7.416|
00014e  f2413188          MOV      r1,#0x1388
000152  9001              STR      r0,[sp,#4]
000154  2007              MOVS     r0,#7
000156  f7fffffe          BL       TIMER_AddTask
;;;162                          5000,
;;;163                          STATE_SwitchStep,
;;;164                          STEP_GAOBIAO_CAN_UPGRADE_POWER_OFF,
;;;165                          1,
;;;166                          ACTION_MODE_ADD_TO_QUEUE);
;;;167                          
;;;168            // 结束超时定时器
;;;169            TIMER_KillTask(TIMER_ID_TIME_OUT_DETECTION);
00015a  2005              MOVS     r0,#5
00015c  f7fffffe          BL       TIMER_KillTask
;;;170            break;
000160  e017              B        |L7.402|
;;;171    
;;;172        // dut断电
;;;173        case STEP_GAOBIAO_CAN_UPGRADE_POWER_OFF:
;;;174            STATE_SwitchStep(STEP_NULL);
000162  2000              MOVS     r0,#0
000164  f7fffffe          BL       STATE_SwitchStep
;;;175            DUTCTRL_PowerOnOff(0); // 0： dut断电
000168  2000              MOVS     r0,#0
00016a  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;176            break;
00016e  e010              B        |L7.402|
;;;177    
;;;178        // 发送超时
;;;179        case STEP_GAOBIAO_CAN_UPGRADE_TIME_OUT:
;;;180            STATE_SwitchStep(STEP_NULL);
000170  2000              MOVS     r0,#0
000172  f7fffffe          BL       STATE_SwitchStep
;;;181            DUTCTRL_PowerOnOff(0);     // 0： dut断电
000176  2000              MOVS     r0,#0
000178  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;182            dut_info.uiUpFaile = TRUE; // ui升级失败
00017c  2001              MOVS     r0,#1
00017e  4907              LDR      r1,|L7.412|
000180  f881003a          STRB     r0,[r1,#0x3a]
;;;183            dut_info.appUpFaile = TRUE; // ui升级失败
000184  f8810039          STRB     r0,[r1,#0x39]
;;;184            TIMER_KillTask(TIMER_ID_TIME_OUT_DETECTION);
000188  2005              MOVS     r0,#5
00018a  f7fffffe          BL       TIMER_KillTask
;;;185            break;
00018e  e000              B        |L7.402|
                  |L7.400|
;;;186    
;;;187        default:
;;;188            break;
000190  bf00              NOP      
                  |L7.402|
000192  bf00              NOP                            ;46
;;;189        }
;;;190    }
000194  bd1c              POP      {r2-r4,pc}
;;;191    
                          ENDP

000196  0000              DCW      0x0000
                  |L7.408|
                          DCD      stateCB
                  |L7.412|
                          DCD      dut_info
                  |L7.416|
                          DCD      STATE_SwitchStep
                  |L7.420|
                          DCD      canProtocolCB
                  |L7.424|
                          DCD      sysCanCB

                          AREA ||i.STEP_Process_HuaXinCanUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_HuaXinCanUpgrade PROC
;;;690    // 华芯微特can升级步骤,app是bin类型
;;;691    void STEP_Process_HuaXinCanUpgrade()
000000  b510              PUSH     {r4,lr}
;;;692    {
000002  b092              SUB      sp,sp,#0x48
;;;693        uint8 configs[60] = {0};
000004  213c              MOVS     r1,#0x3c
000006  a803              ADD      r0,sp,#0xc
000008  f7fffffe          BL       __aeabi_memclr4
;;;694        uint8 i;
;;;695        switch (stateCB.step)
00000c  48d5              LDR      r0,|L8.868|
00000e  7880              LDRB     r0,[r0,#2]  ; stateCB
000010  2829              CMP      r0,#0x29
000012  d070              BEQ      |L8.246|
000014  dc13              BGT      |L8.62|
000016  2823              CMP      r0,#0x23
000018  d03d              BEQ      |L8.150|
00001a  dc07              BGT      |L8.44|
00001c  b310              CBZ      r0,|L8.100|
00001e  2820              CMP      r0,#0x20
000020  d06a              BEQ      |L8.248|
000022  2821              CMP      r0,#0x21
000024  d069              BEQ      |L8.250|
000026  2822              CMP      r0,#0x22
                  |L8.40|
000028  d168              BNE      |L8.252|
00002a  e01c              B        |L8.102|
                  |L8.44|
00002c  2824              CMP      r0,#0x24
00002e  d033              BEQ      |L8.152|
000030  2825              CMP      r0,#0x25
000032  d048              BEQ      |L8.198|
000034  2826              CMP      r0,#0x26
000036  d04d              BEQ      |L8.212|
000038  2828              CMP      r0,#0x28
00003a  d1f5              BNE      |L8.40|
00003c  e05f              B        |L8.254|
                  |L8.62|
00003e  282f              CMP      r0,#0x2f
000040  d079              BEQ      |L8.310|
000042  dc08              BGT      |L8.86|
000044  282a              CMP      r0,#0x2a
000046  d077              BEQ      |L8.312|
000048  282c              CMP      r0,#0x2c
00004a  d076              BEQ      |L8.314|
00004c  282d              CMP      r0,#0x2d
00004e  d075              BEQ      |L8.316|
000050  282e              CMP      r0,#0x2e
000052  d1e9              BNE      |L8.40|
000054  e11d              B        |L8.658|
                  |L8.86|
000056  284f              CMP      r0,#0x4f
000058  d071              BEQ      |L8.318|
00005a  2850              CMP      r0,#0x50
00005c  d070              BEQ      |L8.320|
00005e  2851              CMP      r0,#0x51
000060  d1e2              BNE      |L8.40|
000062  e100              B        |L8.614|
                  |L8.100|
;;;696        {
;;;697        case STEP_NULL: // 空步骤
;;;698            break;
000064  e17b              B        |L8.862|
                  |L8.102|
;;;699    
;;;700        // 通用can升级入口，dut上电和can初始化
;;;701        case STEP_HUAXIN_CAN_UPGRADE_ENTRY:
;;;702            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
000066  2023              MOVS     r0,#0x23
000068  f7fffffe          BL       STATE_SwitchStep
;;;703            IAP_CTRL_CAN_Init(CAN_BAUD_RATE_125K);
00006c  207d              MOVS     r0,#0x7d
00006e  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;704            DUTCTRL_PowerOnOff(1); // dut上电
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;705            dut_info.dutPowerOnAllow = FALSE;
000078  2000              MOVS     r0,#0
00007a  49bb              LDR      r1,|L8.872|
00007c  f881003c          STRB     r0,[r1,#0x3c]
;;;706            // 添加超时
;;;707            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000080  2001              MOVS     r0,#1
000082  9000              STR      r0,[sp,#0]
000084  232f              MOVS     r3,#0x2f
000086  4ab9              LDR      r2,|L8.876|
000088  f2427110          MOV      r1,#0x2710
00008c  9001              STR      r0,[sp,#4]
00008e  2009              MOVS     r0,#9
000090  f7fffffe          BL       TIMER_AddTask
;;;708                          10000,
;;;709                          STATE_SwitchStep,
;;;710                          STEP_HUAXIN_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;711                          1,
;;;712                          ACTION_MODE_ADD_TO_QUEUE);
;;;713            break;
000094  e163              B        |L8.862|
                  |L8.150|
;;;714    
;;;715        // 等待dut应答
;;;716        case STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK:
;;;717            break;
000096  e162              B        |L8.862|
                  |L8.152|
;;;718    
;;;719        // 收到dut的eco请求,延时50ms后发送eco允许
;;;720        case STEP_HUAXIN_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST:
;;;721            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
000098  2023              MOVS     r0,#0x23
00009a  f7fffffe          BL       STATE_SwitchStep
;;;722            
;;;723            // 50ms后发送eco允许
;;;724            TIMER_AddTask(TIMER_ID_DELAY_ENTER_UP_MODE,
00009e  2001              MOVS     r0,#1
0000a0  9000              STR      r0,[sp,#0]
0000a2  2325              MOVS     r3,#0x25
0000a4  4ab1              LDR      r2,|L8.876|
0000a6  2132              MOVS     r1,#0x32
0000a8  9001              STR      r0,[sp,#4]
0000aa  2008              MOVS     r0,#8
0000ac  f7fffffe          BL       TIMER_AddTask
;;;725                          50,
;;;726                          STATE_SwitchStep,
;;;727                          STEP_HUAXIN_CAN_UPGRADE_UP_ALLOW,
;;;728                          1,
;;;729                          ACTION_MODE_ADD_TO_QUEUE);
;;;730    
;;;731            // 添加超时
;;;732            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
0000b0  2001              MOVS     r0,#1
0000b2  9000              STR      r0,[sp,#0]
0000b4  232f              MOVS     r3,#0x2f
0000b6  4aad              LDR      r2,|L8.876|
0000b8  f44f61fa          MOV      r1,#0x7d0
0000bc  9001              STR      r0,[sp,#4]
0000be  2009              MOVS     r0,#9
0000c0  f7fffffe          BL       TIMER_AddTask
;;;733                          2000,
;;;734                          STATE_SwitchStep,
;;;735                          STEP_HUAXIN_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;736                          1,
;;;737                          ACTION_MODE_ADD_TO_QUEUE);
;;;738            break;
0000c4  e14b              B        |L8.862|
                  |L8.198|
;;;739    
;;;740        // 发送eco允许
;;;741        case STEP_HUAXIN_CAN_UPGRADE_UP_ALLOW:
;;;742            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
0000c6  2023              MOVS     r0,#0x23
0000c8  f7fffffe          BL       STATE_SwitchStep
;;;743            IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK); // 0x02,工程模式允
0000cc  2002              MOVS     r0,#2
0000ce  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;744            break;
0000d2  e144              B        |L8.862|
                  |L8.212|
;;;745    
;;;746        // 发送app擦除指令
;;;747        case STEP_HUAXIN_CAN_UPGRADE_SEND_APP_EAR:
;;;748            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
0000d4  2023              MOVS     r0,#0x23
0000d6  f7fffffe          BL       STATE_SwitchStep
;;;749            IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_HUAXIN_CMD_APP_EAR); // 0x05,擦除app
0000da  2005              MOVS     r0,#5
0000dc  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;750            // 添加超时,8秒的app擦除时间
;;;751            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
0000e0  2001              MOVS     r0,#1
0000e2  9000              STR      r0,[sp,#0]
0000e4  232f              MOVS     r3,#0x2f
0000e6  4aa1              LDR      r2,|L8.876|
0000e8  f44f51fa          MOV      r1,#0x1f40
0000ec  9001              STR      r0,[sp,#4]
0000ee  2009              MOVS     r0,#9
0000f0  f7fffffe          BL       TIMER_AddTask
;;;752                          8000,
;;;753                          STATE_SwitchStep,
;;;754                          STEP_HUAXIN_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;755                          1,
;;;756                          ACTION_MODE_ADD_TO_QUEUE);
;;;757            break;
0000f4  e133              B        |L8.862|
                  |L8.246|
0000f6  e024              B        |L8.322|
                  |L8.248|
0000f8  e0f2              B        |L8.736|
                  |L8.250|
0000fa  e110              B        |L8.798|
                  |L8.252|
0000fc  e12e              B        |L8.860|
                  |L8.254|
;;;758    
;;;759        // 发送app升级包
;;;760        case STEP_HUAXIN_CAN_UPGRADE_SEND_APP_WRITE:
;;;761            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
0000fe  2023              MOVS     r0,#0x23
000100  f7fffffe          BL       STATE_SwitchStep
;;;762            IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_BIN, IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 128);
000104  4898              LDR      r0,|L8.872|
000106  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000108  01c3              LSLS     r3,r0,#7
00010a  f44f22c0          MOV      r2,#0x60000
00010e  2106              MOVS     r1,#6
000110  2001              MOVS     r0,#1
000112  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
;;;763            dut_info.currentAppSize++;
000116  4894              LDR      r0,|L8.872|
000118  6b00              LDR      r0,[r0,#0x30]  ; dut_info
00011a  1c40              ADDS     r0,r0,#1
00011c  4992              LDR      r1,|L8.872|
00011e  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;764            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,// 喂狗+重设超时时间（由原来的8s改为1s）
000120  2001              MOVS     r0,#1
000122  9000              STR      r0,[sp,#0]
000124  232f              MOVS     r3,#0x2f
000126  4a91              LDR      r2,|L8.876|
000128  f44f717a          MOV      r1,#0x3e8
00012c  9001              STR      r0,[sp,#4]
00012e  2009              MOVS     r0,#9
000130  f7fffffe          BL       TIMER_AddTask
;;;765                          1000,
;;;766                          STATE_SwitchStep,
;;;767                          STEP_HUAXIN_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;768                          1,
;;;769                          ACTION_MODE_ADD_TO_QUEUE);
;;;770            break;
000134  e113              B        |L8.862|
                  |L8.310|
000136  e0c4              B        |L8.706|
                  |L8.312|
000138  e010              B        |L8.348|
                  |L8.314|
00013a  e020              B        |L8.382|
                  |L8.316|
00013c  e03b              B        |L8.438|
                  |L8.318|
00013e  e049              B        |L8.468|
                  |L8.320|
000140  e06c              B        |L8.540|
                  |L8.322|
;;;771    
;;;772        // app升级成功
;;;773        case STEP_HUAXIN_CAN_UPGRADE_APP_UP_SUCCESS:
;;;774            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
000142  2023              MOVS     r0,#0x23
000144  f7fffffe          BL       STATE_SwitchStep
;;;775            IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP_COMPLETE); // 0x07:升级成功
000148  2007              MOVS     r0,#7
00014a  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;776            dut_info.appUpFlag = FALSE;
00014e  2000              MOVS     r0,#0
000150  4985              LDR      r1,|L8.872|
000152  76c8              STRB     r0,[r1,#0x1b]
;;;777            dut_info.appUpSuccesss = TRUE;
000154  2001              MOVS     r0,#1
000156  f881003f          STRB     r0,[r1,#0x3f]
;;;778            break;
00015a  e100              B        |L8.862|
                  |L8.348|
;;;779    
;;;780        // 发送ui擦除指令
;;;781        case STEP_HUAXIN_CAN_UPGRADE_SEND_UI_EAR:
;;;782            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
00015c  2023              MOVS     r0,#0x23
00015e  f7fffffe          BL       STATE_SwitchStep
;;;783            IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_UI_DATA_ERASE); // 0x12:擦除ui命令
000162  2012              MOVS     r0,#0x12
000164  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;784            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000168  2001              MOVS     r0,#1
00016a  9000              STR      r0,[sp,#0]
00016c  232f              MOVS     r3,#0x2f
00016e  4a7f              LDR      r2,|L8.876|
000170  f2475130          MOV      r1,#0x7530
000174  9001              STR      r0,[sp,#4]
000176  2009              MOVS     r0,#9
000178  f7fffffe          BL       TIMER_AddTask
;;;785                          30000,                // ui擦除时间10s
;;;786                          STATE_SwitchStep,
;;;787                          STEP_HUAXIN_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;788                          1,
;;;789                          ACTION_MODE_ADD_TO_QUEUE);
;;;790            break;
00017c  e0ef              B        |L8.862|
                  |L8.382|
;;;791    
;;;792        // 发送ui升级数据
;;;793        case STEP_HUAXIN_CAN_UPGRADE_SEND_UI_WRITE:
;;;794            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
00017e  2023              MOVS     r0,#0x23
000180  f7fffffe          BL       STATE_SwitchStep
;;;795            IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_BIN, IAP_CTRL_CAN_CMD_DOWN_UI_DATA_WRITE, SPI_FLASH_DUT_UI_ADDEESS, (dut_info.currentUiSize) * 128);
000184  4878              LDR      r0,|L8.872|
000186  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000188  01c3              LSLS     r3,r0,#7
00018a  f44f1200          MOV      r2,#0x200000
00018e  2114              MOVS     r1,#0x14
000190  2001              MOVS     r0,#1
000192  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
;;;796            dut_info.currentUiSize++;
000196  4874              LDR      r0,|L8.872|
000198  6b40              LDR      r0,[r0,#0x34]  ; dut_info
00019a  1c40              ADDS     r0,r0,#1
00019c  4972              LDR      r1,|L8.872|
00019e  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;797            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT, // 喂狗+重设超时时间（由原来的10s改为1s）
0001a0  2001              MOVS     r0,#1
0001a2  9000              STR      r0,[sp,#0]
0001a4  232f              MOVS     r3,#0x2f
0001a6  4a71              LDR      r2,|L8.876|
0001a8  f44f61fa          MOV      r1,#0x7d0
0001ac  9001              STR      r0,[sp,#4]
0001ae  2009              MOVS     r0,#9
0001b0  f7fffffe          BL       TIMER_AddTask
;;;798                          2000,
;;;799                          STATE_SwitchStep,
;;;800                          STEP_HUAXIN_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;801                          1,
;;;802                          ACTION_MODE_ADD_TO_QUEUE);
;;;803            break;
0001b4  e0d3              B        |L8.862|
                  |L8.438|
;;;804    
;;;805        // ui升级完成
;;;806        case STEP_HUAXIN_CAN_UPGRADE_UI_UP_SUCCESS:
;;;807            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
0001b6  2023              MOVS     r0,#0x23
0001b8  f7fffffe          BL       STATE_SwitchStep
;;;808            IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_UPDATA_FINISH); // 0x2A:升级成功
0001bc  202a              MOVS     r0,#0x2a
0001be  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;809            dut_info.uiUpSuccesss = TRUE;
0001c2  2001              MOVS     r0,#1
0001c4  4968              LDR      r1,|L8.872|
0001c6  f881003e          STRB     r0,[r1,#0x3e]
;;;810            dut_info.uiUpFlag = FALSE;
0001ca  2000              MOVS     r0,#0
0001cc  7748              STRB     r0,[r1,#0x1d]
;;;811            dut_info.reconnectionFlag = FALSE;
0001ce  f881004a          STRB     r0,[r1,#0x4a]
;;;812            break;
0001d2  e0c4              B        |L8.862|
                  |L8.468|
;;;813    
;;;814        // 设置config入口
;;;815        case STEP_CAN_SET_CONFIG_ENTRY:
;;;816            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
0001d4  2023              MOVS     r0,#0x23
0001d6  f7fffffe          BL       STATE_SwitchStep
;;;817            dut_info.dutPowerOnAllow = TRUE; // 允许开机
0001da  2001              MOVS     r0,#1
0001dc  4962              LDR      r1,|L8.872|
0001de  f881003c          STRB     r0,[r1,#0x3c]
;;;818            IAP_CTRL_CAN_Init(CAN_BAUD_RATE_250K);
0001e2  20fa              MOVS     r0,#0xfa
0001e4  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;819            DUTCTRL_PowerOnOff(0);
0001e8  2000              MOVS     r0,#0
0001ea  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;820            // 500ms发送一次配置信息
;;;821            TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
0001ee  2001              MOVS     r0,#1
0001f0  1e81              SUBS     r1,r0,#2
0001f2  2350              MOVS     r3,#0x50
0001f4  4a5d              LDR      r2,|L8.876|
0001f6  e9cd1000          STRD     r1,r0,[sp,#0]
0001fa  f44f71fa          MOV      r1,#0x1f4
0001fe  2002              MOVS     r0,#2
000200  f7fffffe          BL       TIMER_AddTask
;;;822                          500,
;;;823                          STATE_SwitchStep,
;;;824                          STEP_CAN_SEND_SET_CONFIG,
;;;825                          TIMER_LOOP_FOREVER,
;;;826                          ACTION_MODE_ADD_TO_QUEUE);
;;;827    
;;;828            // 添加5s的超时
;;;829            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000204  2001              MOVS     r0,#1
000206  1e81              SUBS     r1,r0,#2
000208  232f              MOVS     r3,#0x2f
00020a  4a58              LDR      r2,|L8.876|
00020c  e9cd1000          STRD     r1,r0,[sp,#0]
000210  f2413188          MOV      r1,#0x1388
000214  2009              MOVS     r0,#9
000216  f7fffffe          BL       TIMER_AddTask
;;;830                          5000,
;;;831                          STATE_SwitchStep,
;;;832                          STEP_HUAXIN_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;833                          TIMER_LOOP_FOREVER,
;;;834                          ACTION_MODE_ADD_TO_QUEUE);
;;;835            break;
00021a  e0a0              B        |L8.862|
                  |L8.540|
;;;836    
;;;837        // 发送config内容
;;;838        case STEP_CAN_SEND_SET_CONFIG:
;;;839            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
00021c  2023              MOVS     r0,#0x23
00021e  f7fffffe          BL       STATE_SwitchStep
;;;840            SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60); // 实际只有54个字节
000222  223c              MOVS     r2,#0x3c
000224  f44f11b0          MOV      r1,#0x160000
000228  a803              ADD      r0,sp,#0xc
00022a  f7fffffe          BL       SPI_FLASH_ReadArray
;;;841            DUTCTRL_PowerOnOff(1);                                          // dut上电
00022e  2001              MOVS     r0,#1
000230  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;842            CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);                // 添加命令头
000234  203a              MOVS     r0,#0x3a
000236  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;843            CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);         // 添加设备地址
00023a  201a              MOVS     r0,#0x1a
00023c  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;844            CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_WRITE_CONTROL_PARAM); // 0xc0 添加命令字
000240  20c0              MOVS     r0,#0xc0
000242  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;845            CAN_PROTOCOL1_TxAddData(54);                                    // 添加数据长度
000246  2036              MOVS     r0,#0x36
000248  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;846            for (i = 0; i < 54; i++)
00024c  2400              MOVS     r4,#0
00024e  e005              B        |L8.604|
                  |L8.592|
;;;847            {
;;;848                CAN_PROTOCOL1_TxAddData(configs[i]);
000250  a903              ADD      r1,sp,#0xc
000252  5d08              LDRB     r0,[r1,r4]
000254  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000258  1c60              ADDS     r0,r4,#1              ;846
00025a  b2c4              UXTB     r4,r0                 ;846
                  |L8.604|
00025c  2c36              CMP      r4,#0x36              ;846
00025e  dbf7              BLT      |L8.592|
;;;849            }
;;;850            CAN_PROTOCOL1_TxAddFrame(); // 添加检验和与结束符，并添加至发送
000260  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
;;;851            break;
000264  e07b              B        |L8.862|
                  |L8.614|
;;;852    
;;;853        // config设置成功
;;;854        case STEP_CAN_SET_CONFIG_SUCCESS:
;;;855            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
000266  2023              MOVS     r0,#0x23
000268  f7fffffe          BL       STATE_SwitchStep
;;;856            TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止设置config定时器
00026c  2002              MOVS     r0,#2
00026e  f7fffffe          BL       TIMER_KillTask
;;;857            IAP_CTRL_CAN_Init(CAN_BAUD_RATE_125K);   // 设置波特率
000272  207d              MOVS     r0,#0x7d
000274  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;858            dut_info.configUpFlag = FALSE;           // 标志位置false
000278  2000              MOVS     r0,#0
00027a  493b              LDR      r1,|L8.872|
00027c  7708              STRB     r0,[r1,#0x1c]
;;;859            DUTCTRL_PowerOnOff(0);                   // dut断电
00027e  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;860            dut_info.configUpSuccesss = TRUE;
000282  2001              MOVS     r0,#1
000284  4938              LDR      r1,|L8.872|
000286  f881003d          STRB     r0,[r1,#0x3d]
;;;861            dut_info.dutPowerOnAllow = FALSE;
00028a  2000              MOVS     r0,#0
00028c  f881003c          STRB     r0,[r1,#0x3c]
;;;862            break;
000290  e065              B        |L8.862|
                  |L8.658|
;;;863    
;;;864        // 升级项升级成功
;;;865        case STEP_HUAXIN_CAN_UPGRADE_ITEM_FINISH:
;;;866            STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
000292  2023              MOVS     r0,#0x23
000294  f7fffffe          BL       STATE_SwitchStep
;;;867            // 选择升级
;;;868            if (dut_info.uiUpFlag)
000298  4833              LDR      r0,|L8.872|
00029a  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
00029c  b118              CBZ      r0,|L8.678|
;;;869            {
;;;870                STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_EAR);
00029e  202a              MOVS     r0,#0x2a
0002a0  f7fffffe          BL       STATE_SwitchStep
0002a4  e00c              B        |L8.704|
                  |L8.678|
;;;871            }
;;;872            else if (dut_info.configUpFlag)
0002a6  4830              LDR      r0,|L8.872|
0002a8  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
0002aa  b118              CBZ      r0,|L8.692|
;;;873            {
;;;874                STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
0002ac  204f              MOVS     r0,#0x4f
0002ae  f7fffffe          BL       STATE_SwitchStep
0002b2  e005              B        |L8.704|
                  |L8.692|
;;;875            }
;;;876            else
;;;877            {
;;;878                // 没有升级项断电
;;;879                STATE_EnterState(STATE_STANDBY);
0002b4  2001              MOVS     r0,#1
0002b6  f7fffffe          BL       STATE_EnterState
;;;880                TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0002ba  2009              MOVS     r0,#9
0002bc  f7fffffe          BL       TIMER_KillTask
                  |L8.704|
;;;881            }
;;;882            break;
0002c0  e04d              B        |L8.862|
                  |L8.706|
;;;883    
;;;884        // 握手超时
;;;885        case STEP_HUAXIN_CAN_UPGRADE_COMMUNICATION_TIME_OUT:
;;;886            dut_info.currentUiSize--;
0002c2  4829              LDR      r0,|L8.872|
0002c4  6b40              LDR      r0,[r0,#0x34]  ; dut_info
0002c6  1e40              SUBS     r0,r0,#1
0002c8  4927              LDR      r1,|L8.872|
0002ca  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;887    			if (dut_info.currentUiSize < (dut_info.uiSize + 1))
0002cc  4608              MOV      r0,r1
0002ce  6b41              LDR      r1,[r0,#0x34]  ; dut_info
0002d0  6a80              LDR      r0,[r0,#0x28]  ; dut_info
0002d2  1c40              ADDS     r0,r0,#1
0002d4  4281              CMP      r1,r0
0002d6  d202              BCS      |L8.734|
;;;888            {
;;;889                STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_SEND_UI_WRITE);
0002d8  202c              MOVS     r0,#0x2c
0002da  f7fffffe          BL       STATE_SwitchStep
                  |L8.734|
;;;890            }
;;;891            break;
0002de  e03e              B        |L8.862|
                  |L8.736|
;;;892    
;;;893        // dut断电重新连接
;;;894        case STEP_CM_CAN_UPGRADE_RECONNECTION:
;;;895            STATE_SwitchStep(STEP_CM_CAN_UPGRADE_WAIT_FOR_ACK);
0002e0  2010              MOVS     r0,#0x10
0002e2  f7fffffe          BL       STATE_SwitchStep
;;;896            dut_info.reconnectionRepeatOne = TRUE;
0002e6  2001              MOVS     r0,#1
0002e8  491f              LDR      r1,|L8.872|
0002ea  f881004b          STRB     r0,[r1,#0x4b]
;;;897            // 每100ms发送一次eco允许
;;;898            TIMER_AddTask(TIMER_ID_RECONNECTION,
0002ee  1e81              SUBS     r1,r0,#2
0002f0  2312              MOVS     r3,#0x12
0002f2  4a1e              LDR      r2,|L8.876|
0002f4  e9cd1000          STRD     r1,r0,[sp,#0]
0002f8  2164              MOVS     r1,#0x64
0002fa  200a              MOVS     r0,#0xa
0002fc  f7fffffe          BL       TIMER_AddTask
;;;899                          100,
;;;900                          STATE_SwitchStep,
;;;901                          STEP_CM_CAN_UPGRADE_UP_ALLOW,
;;;902                          TIMER_LOOP_FOREVER,
;;;903                          ACTION_MODE_ADD_TO_QUEUE);
;;;904    
;;;905            // 3s后停止发送eco允许，上报升级失败
;;;906            TIMER_AddTask(TIMER_ID_RECONNECTION_TIME_OUT,
000300  2001              MOVS     r0,#1
000302  9000              STR      r0,[sp,#0]
000304  2321              MOVS     r3,#0x21
000306  4a19              LDR      r2,|L8.876|
000308  f64031b8          MOV      r1,#0xbb8
00030c  9001              STR      r0,[sp,#4]
00030e  200b              MOVS     r0,#0xb
000310  f7fffffe          BL       TIMER_AddTask
;;;907                          3000,
;;;908                          STATE_SwitchStep,
;;;909                          STEP_CM_CAN_UPGRADE_RECONNECTION_TIME_OUT,
;;;910                          1,
;;;911                          ACTION_MODE_ADD_TO_QUEUE);
;;;912            dut_info.reconnectionFlag = TRUE;
000314  2001              MOVS     r0,#1
000316  4914              LDR      r1,|L8.872|
000318  f881004a          STRB     r0,[r1,#0x4a]
;;;913            break;
00031c  e01f              B        |L8.862|
                  |L8.798|
;;;914    
;;;915        // 重新连接超时
;;;916        case STEP_CM_CAN_UPGRADE_RECONNECTION_TIME_OUT:
;;;917            STATE_SwitchStep(STEP_NULL);
00031e  2000              MOVS     r0,#0
000320  f7fffffe          BL       STATE_SwitchStep
;;;918            TIMER_KillTask(TIMER_ID_RECONNECTION);
000324  200a              MOVS     r0,#0xa
000326  f7fffffe          BL       TIMER_KillTask
;;;919            TIMER_KillTask(TIMER_ID_TIME_OUT_DETECTION);
00032a  2005              MOVS     r0,#5
00032c  f7fffffe          BL       TIMER_KillTask
;;;920            dut_info.reconnectionFlag = FALSE;
000330  2000              MOVS     r0,#0
000332  490d              LDR      r1,|L8.872|
000334  f881004a          STRB     r0,[r1,#0x4a]
;;;921            if (dut_info.appUpFlag)
000338  4608              MOV      r0,r1
00033a  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00033c  b118              CBZ      r0,|L8.838|
;;;922            {
;;;923                dut_info.appUpFaile = TRUE;
00033e  2001              MOVS     r0,#1
000340  f8810039          STRB     r0,[r1,#0x39]
000344  e006              B        |L8.852|
                  |L8.838|
;;;924            }
;;;925            else if (dut_info.uiUpFlag)
000346  4808              LDR      r0,|L8.872|
000348  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
00034a  b118              CBZ      r0,|L8.852|
;;;926            {
;;;927                dut_info.uiUpFaile = TRUE;
00034c  2001              MOVS     r0,#1
00034e  4906              LDR      r1,|L8.872|
000350  f881003a          STRB     r0,[r1,#0x3a]
                  |L8.852|
;;;928            }
;;;929            STATE_EnterState(STATE_STANDBY);
000354  2001              MOVS     r0,#1
000356  f7fffffe          BL       STATE_EnterState
;;;930            break;
00035a  e000              B        |L8.862|
                  |L8.860|
;;;931    
;;;932        default:
;;;933            break;
00035c  bf00              NOP      
                  |L8.862|
00035e  bf00              NOP                            ;698
;;;934        }
;;;935    }
000360  b012              ADD      sp,sp,#0x48
000362  bd10              POP      {r4,pc}
;;;936    
                          ENDP

                  |L8.868|
                          DCD      stateCB
                  |L8.872|
                          DCD      dut_info
                  |L8.876|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_HuaXinUartCbUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_HuaXinUartCbUpgrade PROC
;;;2372   // 华芯微特升级步骤
;;;2373   void STEP_Process_HuaXinUartCbUpgrade()
000000  b510              PUSH     {r4,lr}
;;;2374   {
000002  b09c              SUB      sp,sp,#0x70
;;;2375       uint8 configs[100] = {0};
000004  2164              MOVS     r1,#0x64
000006  a803              ADD      r0,sp,#0xc
000008  f7fffffe          BL       __aeabi_memclr4
;;;2376       uint8 i;
;;;2377       switch (stateCB.step)
00000c  489d              LDR      r0,|L9.644|
00000e  7880              LDRB     r0,[r0,#2]  ; stateCB
000010  286c              CMP      r0,#0x6c
000012  d072              BEQ      |L9.250|
000014  dc11              BGT      |L9.58|
000016  2868              CMP      r0,#0x68
000018  d03d              BEQ      |L9.150|
00001a  dc07              BGT      |L9.44|
00001c  b1f0              CBZ      r0,|L9.92|
00001e  2865              CMP      r0,#0x65
000020  d01d              BEQ      |L9.94|
000022  2866              CMP      r0,#0x66
000024  d02e              BEQ      |L9.132|
000026  2867              CMP      r0,#0x67
                  |L9.40|
000028  d168              BNE      |L9.252|
00002a  e02c              B        |L9.134|
                  |L9.44|
00002c  2869              CMP      r0,#0x69
00002e  d03e              BEQ      |L9.174|
000030  286a              CMP      r0,#0x6a
000032  d052              BEQ      |L9.218|
000034  286b              CMP      r0,#0x6b
000036  d1f7              BNE      |L9.40|
000038  e061              B        |L9.254|
                  |L9.58|
00003a  2870              CMP      r0,#0x70
00003c  d075              BEQ      |L9.298|
00003e  dc06              BGT      |L9.78|
000040  286d              CMP      r0,#0x6d
000042  d077              BEQ      |L9.308|
000044  286e              CMP      r0,#0x6e
000046  d072              BEQ      |L9.302|
000048  286f              CMP      r0,#0x6f
00004a  d1ed              BNE      |L9.40|
00004c  e095              B        |L9.378|
                  |L9.78|
00004e  289a              CMP      r0,#0x9a
000050  d06e              BEQ      |L9.304|
000052  289c              CMP      r0,#0x9c
000054  d06d              BEQ      |L9.306|
000056  289e              CMP      r0,#0x9e
000058  d1e6              BNE      |L9.40|
00005a  e0e5              B        |L9.552|
                  |L9.92|
;;;2378       {
;;;2379       case STEP_NULL: // 空步骤
;;;2380           break;
00005c  e10e              B        |L9.636|
                  |L9.94|
;;;2381   
;;;2382       // 升级入口
;;;2383       case STEP_HUAXIN_UART_UPGRADE_ENTRY:
;;;2384           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
00005e  2066              MOVS     r0,#0x66
000060  f7fffffe          BL       STATE_SwitchStep
;;;2385           UART_DRIVE_InitSelect(UART_DRIVE_BAUD_RATE); // 设置波特率
000064  f44f30e1          MOV      r0,#0x1c200
000068  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2386           UART_PROTOCOL_Init();                        // 55升级协议
00006c  f7fffffe          BL       UART_PROTOCOL_Init
;;;2387           UART_PROTOCOL3_Init();                       // KM5S
000070  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2388           DUTCTRL_PowerOnOff(1);                       // dut上电
000074  2001              MOVS     r0,#1
000076  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2389           addTimeOutTimer(5000);                       // 握手超时时间：5S
00007a  f2413088          MOV      r0,#0x1388
00007e  f7fffffe          BL       addTimeOutTimer
;;;2390           break;
000082  e0fb              B        |L9.636|
                  |L9.132|
;;;2391   
;;;2392       // 等待dut应答
;;;2393       case STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK:
;;;2394           // 只做等待，不做操作
;;;2395           break;
000084  e0fa              B        |L9.636|
                  |L9.134|
;;;2396   
;;;2397       // 允许dut进入工程模式
;;;2398       case STEP_HUAXIN_UART_BC_UPGRADE_UP_ALLOW:
;;;2399           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
000086  2066              MOVS     r0,#0x66
000088  f7fffffe          BL       STATE_SwitchStep
;;;2400           UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_PROJECT_ALLOW, TRUE);
00008c  2101              MOVS     r1,#1
00008e  2002              MOVS     r0,#2
000090  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2401           break;
000094  e0f2              B        |L9.636|
                  |L9.150|
;;;2402   
;;;2403       // 发送app擦除指令
;;;2404       case STEP_HUAXIN_UART_BC_UPGRADE_SEND_APP_EAR:
;;;2405           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
000096  2066              MOVS     r0,#0x66
000098  f7fffffe          BL       STATE_SwitchStep
;;;2406           UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_APP_EAR, TRUE);
00009c  2101              MOVS     r1,#1
00009e  2005              MOVS     r0,#5
0000a0  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2407           addTimeOutTimer(5000); // 擦除app超时时间：5s
0000a4  f2413088          MOV      r0,#0x1388
0000a8  f7fffffe          BL       addTimeOutTimer
;;;2408           break;
0000ac  e0e6              B        |L9.636|
                  |L9.174|
;;;2409   
;;;2410       // 发送第一帧app数据
;;;2411       case STEP_HUAXIN_UART_BC_UPGRADE_SEND_FIRST_APP_PACKET:
;;;2412           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
0000ae  2066              MOVS     r0,#0x66
0000b0  f7fffffe          BL       STATE_SwitchStep
;;;2413           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0000b4  2009              MOVS     r0,#9
0000b6  f7fffffe          BL       TIMER_KillTask
;;;2414           dut_info.currentAppSize = 0;                                                          // 第一包数据
0000ba  2000              MOVS     r0,#0
0000bc  4972              LDR      r1,|L9.648|
0000be  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;2415           uartProtocol_SendOnePacket(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize * 128); // 发送128字节，数据中不包含地址
0000c0  4608              MOV      r0,r1
0000c2  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000c4  01c1              LSLS     r1,r0,#7
0000c6  f44f20c0          MOV      r0,#0x60000
0000ca  f7fffffe          BL       uartProtocol_SendOnePacket
;;;2416           dut_info.currentAppSize++;                                                            // 准备下一包数据
0000ce  486e              LDR      r0,|L9.648|
0000d0  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000d2  1c40              ADDS     r0,r0,#1
0000d4  496c              LDR      r1,|L9.648|
0000d6  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;2417           break;
0000d8  e0d0              B        |L9.636|
                  |L9.218|
;;;2418   
;;;2419       // 发送app数据
;;;2420       case STEP_HUAXIN_UART_BC_UPGRADE_SEND_APP_PACKET:
;;;2421           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
0000da  2066              MOVS     r0,#0x66
0000dc  f7fffffe          BL       STATE_SwitchStep
;;;2422           uartProtocol_SendOnePacket(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize * 128); // 发送128字节，数据中不包含地址
0000e0  4869              LDR      r0,|L9.648|
0000e2  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000e4  01c1              LSLS     r1,r0,#7
0000e6  f44f20c0          MOV      r0,#0x60000
0000ea  f7fffffe          BL       uartProtocol_SendOnePacket
;;;2423           dut_info.currentAppSize++;
0000ee  4866              LDR      r0,|L9.648|
0000f0  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000f2  1c40              ADDS     r0,r0,#1
0000f4  4964              LDR      r1,|L9.648|
0000f6  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;2424           break;
0000f8  e0c0              B        |L9.636|
                  |L9.250|
0000fa  e00e              B        |L9.282|
                  |L9.252|
0000fc  e0bd              B        |L9.634|
                  |L9.254|
;;;2425   
;;;2426       // app升级完成
;;;2427       case STEP_HUAXIN_UART_BC_UPGRADE_APP_UP_SUCCESS:
;;;2428           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
0000fe  2066              MOVS     r0,#0x66
000100  f7fffffe          BL       STATE_SwitchStep
;;;2429           UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_APP_UP_OVER, TRUE); // 发送成功
000104  2101              MOVS     r1,#1
000106  2007              MOVS     r0,#7
000108  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2430           dut_info.appUpSuccesss = TRUE;
00010c  2001              MOVS     r0,#1
00010e  495e              LDR      r1,|L9.648|
000110  f881003f          STRB     r0,[r1,#0x3f]
;;;2431           dut_info.appUpFlag = FALSE;
000114  2000              MOVS     r0,#0
000116  76c8              STRB     r0,[r1,#0x1b]
;;;2432           break;
000118  e0b0              B        |L9.636|
                  |L9.282|
;;;2433   
;;;2434       // ui升级流程
;;;2435       // 发送擦除ui命令
;;;2436       case STEP_HUAXIN_UART_BC_UPGRADE_SEND_UI_EAR:
;;;2437           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
00011a  2066              MOVS     r0,#0x66
00011c  f7fffffe          BL       STATE_SwitchStep
;;;2438           UART_PROTOCOL_SendCmdParamAck(UART_CMD_DUT_UI_DATA_ERASE, TRUE);
000120  2101              MOVS     r1,#1
000122  2012              MOVS     r0,#0x12
000124  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2439           break;
000128  e0a8              B        |L9.636|
                  |L9.298|
00012a  e094              B        |L9.598|
00012c  e002              B        |L9.308|
                  |L9.302|
00012e  e014              B        |L9.346|
                  |L9.304|
000130  e031              B        |L9.406|
                  |L9.306|
000132  e04e              B        |L9.466|
                  |L9.308|
;;;2440   
;;;2441       // 发送第一帧ui数据
;;;2442       case STEP_HUAXIN_UART_BC_UPGRADE_SEND_FIRST_UI_PACKET:
;;;2443           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
000134  2066              MOVS     r0,#0x66
000136  f7fffffe          BL       STATE_SwitchStep
;;;2444           dut_info.currentUiSize = 0;                                                         // 第一包数据
00013a  2000              MOVS     r0,#0
00013c  4952              LDR      r1,|L9.648|
00013e  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;2445           uartProtocol_SendOnePacket(SPI_FLASH_DUT_UI_ADDEESS, dut_info.currentUiSize * 128); // 发送128字节，数据中不包含地址
000140  4608              MOV      r0,r1
000142  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000144  01c1              LSLS     r1,r0,#7
000146  f44f1000          MOV      r0,#0x200000
00014a  f7fffffe          BL       uartProtocol_SendOnePacket
;;;2446           dut_info.currentUiSize++;                                                           // 准备下一包数据
00014e  484e              LDR      r0,|L9.648|
000150  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000152  1c40              ADDS     r0,r0,#1
000154  494c              LDR      r1,|L9.648|
000156  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;2447           break;
000158  e090              B        |L9.636|
                  |L9.346|
;;;2448   
;;;2449       // 发送ui数据
;;;2450       case STEP_HUAXIN_UART_BC_UPGRADE_SEND_UI_PACKET:
;;;2451           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
00015a  2066              MOVS     r0,#0x66
00015c  f7fffffe          BL       STATE_SwitchStep
;;;2452           uartProtocol_SendOnePacket(SPI_FLASH_DUT_UI_ADDEESS, dut_info.currentUiSize * 128); // 发送128字节，数据中不包含地址
000160  4849              LDR      r0,|L9.648|
000162  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000164  01c1              LSLS     r1,r0,#7
000166  f44f1000          MOV      r0,#0x200000
00016a  f7fffffe          BL       uartProtocol_SendOnePacket
;;;2453           dut_info.currentUiSize++;
00016e  4846              LDR      r0,|L9.648|
000170  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000172  1c40              ADDS     r0,r0,#1
000174  4944              LDR      r1,|L9.648|
000176  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;2454           break;
000178  e080              B        |L9.636|
                  |L9.378|
;;;2455   
;;;2456       // ui升级完成
;;;2457       case STEP_HUAXIN_UART_BC_UPGRADE_UI_UP_SUCCESS:
;;;2458           STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_WAIT_FOR_ACK);
00017a  2066              MOVS     r0,#0x66
00017c  f7fffffe          BL       STATE_SwitchStep
;;;2459           UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_APP_UP_OVER, TRUE); // 发送成功
000180  2101              MOVS     r1,#1
000182  2007              MOVS     r0,#7
000184  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2460           dut_info.uiUpSuccesss = TRUE;
000188  2001              MOVS     r0,#1
00018a  493f              LDR      r1,|L9.648|
00018c  f881003e          STRB     r0,[r1,#0x3e]
;;;2461           dut_info.uiUpFlag = FALSE;
000190  2000              MOVS     r0,#0
000192  7748              STRB     r0,[r1,#0x1d]
;;;2462           break;
000194  e072              B        |L9.636|
                  |L9.406|
;;;2463   
;;;2464       // 设置config入口
;;;2465       case STEP_UART_SET_CONFIG_ENTRY:
;;;2466           STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
000196  2057              MOVS     r0,#0x57
000198  f7fffffe          BL       STATE_SwitchStep
;;;2467           dut_info.dutPowerOnAllow = TRUE; // 允许开机
00019c  2001              MOVS     r0,#1
00019e  493a              LDR      r1,|L9.648|
0001a0  f881003c          STRB     r0,[r1,#0x3c]
;;;2468           UART_DRIVE_InitSelect(9600);     // UART协议层初始化
0001a4  f44f5016          MOV      r0,#0x2580
0001a8  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2469           UART_PROTOCOL_Init();            // 55升级协议
0001ac  f7fffffe          BL       UART_PROTOCOL_Init
;;;2470           UART_PROTOCOL3_Init();           // KM5S
0001b0  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2471           DUTCTRL_PowerOnOff(0);           // 仪表断电
0001b4  2000              MOVS     r0,#0
0001b6  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2472   
;;;2473           TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
0001ba  2001              MOVS     r0,#1
0001bc  1e81              SUBS     r1,r0,#2
0001be  239c              MOVS     r3,#0x9c
0001c0  4a32              LDR      r2,|L9.652|
0001c2  e9cd1000          STRD     r1,r0,[sp,#0]
0001c6  f44f71fa          MOV      r1,#0x1f4
0001ca  2002              MOVS     r0,#2
0001cc  f7fffffe          BL       TIMER_AddTask
;;;2474                         500,
;;;2475                         STATE_SwitchStep,
;;;2476                         STEP_UART_SEND_SET_CONFIG,
;;;2477                         TIMER_LOOP_FOREVER,
;;;2478                         ACTION_MODE_ADD_TO_QUEUE);
;;;2479           break;
0001d0  e054              B        |L9.636|
                  |L9.466|
;;;2480   
;;;2481       // 发送config内容
;;;2482       case STEP_UART_SEND_SET_CONFIG:
;;;2483           STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
0001d2  2057              MOVS     r0,#0x57
0001d4  f7fffffe          BL       STATE_SwitchStep
;;;2484           SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60); // 实际只有54个字节
0001d8  223c              MOVS     r2,#0x3c
0001da  f44f11b0          MOV      r1,#0x160000
0001de  a803              ADD      r0,sp,#0xc
0001e0  f7fffffe          BL       SPI_FLASH_ReadArray
;;;2485           DUTCTRL_PowerOnOff(1);                                          // dut上电
0001e4  2001              MOVS     r0,#1
0001e6  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2486           /*发送dut配置信息*/
;;;2487           SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60); // 实际只有54个字节
0001ea  223c              MOVS     r2,#0x3c
0001ec  f44f11b0          MOV      r1,#0x160000
0001f0  a803              ADD      r0,sp,#0xc
0001f2  f7fffffe          BL       SPI_FLASH_ReadArray
;;;2488           // 添加命令头
;;;2489           UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);
0001f6  203a              MOVS     r0,#0x3a
0001f8  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2490           // 添加设备地址
;;;2491           UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);
0001fc  201a              MOVS     r0,#0x1a
0001fe  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2492           // 添加命令字
;;;2493           UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_WRITE_CONTROL_PARAM); // 0xc0
000202  20c0              MOVS     r0,#0xc0
000204  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2494           // 添加数据长度
;;;2495           UART_PROTOCOL3_TxAddData(54);
000208  2036              MOVS     r0,#0x36
00020a  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2496           for (i = 0; i < 54; i++)
00020e  2400              MOVS     r4,#0
000210  e005              B        |L9.542|
                  |L9.530|
;;;2497           {
;;;2498               UART_PROTOCOL3_TxAddData(configs[i]);
000212  a903              ADD      r1,sp,#0xc
000214  5d08              LDRB     r0,[r1,r4]
000216  f7fffffe          BL       UART_PROTOCOL3_TxAddData
00021a  1c60              ADDS     r0,r4,#1              ;2496
00021c  b2c4              UXTB     r4,r0                 ;2496
                  |L9.542|
00021e  2c36              CMP      r4,#0x36              ;2496
000220  dbf7              BLT      |L9.530|
;;;2499           }
;;;2500           // 添加检验和与结束符，并添加至发送
;;;2501           UART_PROTOCOL3_TxAddFrame();
000222  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2502           break;
000226  e029              B        |L9.636|
                  |L9.552|
;;;2503   
;;;2504       // config设置成功
;;;2505       case STEP_UART_SET_CONFIG_SUCCESS:
;;;2506           STATE_SwitchStep(STEP_CM_UART_BC_UPGRADE_WAIT_FOR_ACK);
000228  2057              MOVS     r0,#0x57
00022a  f7fffffe          BL       STATE_SwitchStep
;;;2507           TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止设置config定时器
00022e  2002              MOVS     r0,#2
000230  f7fffffe          BL       TIMER_KillTask
;;;2508           UART_DRIVE_InitSelect(115200); // 设置波特率
000234  f44f30e1          MOV      r0,#0x1c200
000238  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2509           dut_info.configUpFlag = FALSE; // 标志位置false
00023c  2000              MOVS     r0,#0
00023e  4912              LDR      r1,|L9.648|
000240  7708              STRB     r0,[r1,#0x1c]
;;;2510           DUTCTRL_PowerOnOff(0);         // 仪表断电
000242  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2511           dut_info.configUpSuccesss = TRUE;
000246  2001              MOVS     r0,#1
000248  490f              LDR      r1,|L9.648|
00024a  f881003d          STRB     r0,[r1,#0x3d]
;;;2512           dut_info.dutPowerOnAllow = FALSE; // 允许开机
00024e  2000              MOVS     r0,#0
000250  f881003c          STRB     r0,[r1,#0x3c]
;;;2513           break;
000254  e012              B        |L9.636|
                  |L9.598|
;;;2514   
;;;2515       // 升级项完成
;;;2516       case STEP_HUAXIN_UART_BC_UPGRADE_ITEM_FINISH:
;;;2517           if (dut_info.uiUpFlag)
000256  480c              LDR      r0,|L9.648|
000258  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
00025a  b118              CBZ      r0,|L9.612|
;;;2518           {
;;;2519               STATE_SwitchStep(STEP_HUAXIN_UART_BC_UPGRADE_SEND_UI_EAR);
00025c  206c              MOVS     r0,#0x6c
00025e  f7fffffe          BL       STATE_SwitchStep
000262  e009              B        |L9.632|
                  |L9.612|
;;;2520           }
;;;2521           else if (dut_info.configUpFlag)
000264  4808              LDR      r0,|L9.648|
000266  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000268  b118              CBZ      r0,|L9.626|
;;;2522           {
;;;2523               STATE_SwitchStep(STEP_UART_SET_CONFIG_ENTRY);
00026a  209a              MOVS     r0,#0x9a
00026c  f7fffffe          BL       STATE_SwitchStep
000270  e002              B        |L9.632|
                  |L9.626|
;;;2524           }
;;;2525           else
;;;2526           {
;;;2527               // 没有升级项断电
;;;2528               STATE_EnterState(STATE_STANDBY);
000272  2001              MOVS     r0,#1
000274  f7fffffe          BL       STATE_EnterState
                  |L9.632|
;;;2529           }
;;;2530           break;
000278  e000              B        |L9.636|
                  |L9.634|
;;;2531   
;;;2532       default:
;;;2533           break;
00027a  bf00              NOP      
                  |L9.636|
00027c  bf00              NOP                            ;2380
;;;2534       }
;;;2535   }
00027e  b01c              ADD      sp,sp,#0x70
000280  bd10              POP      {r4,pc}
;;;2536   
                          ENDP

000282  0000              DCW      0x0000
                  |L9.644|
                          DCD      stateCB
                  |L9.648|
                          DCD      dut_info
                  |L9.652|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_IotCanUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_IotCanUpgrade PROC
;;;1681   // IOT的CAN升级步骤
;;;1682   void STEP_Process_IotCanUpgrade()
000000  b500              PUSH     {lr}
;;;1683   {
000002  b09b              SUB      sp,sp,#0x6c
;;;1684       uint8 configs[100] = {0};
000004  2164              MOVS     r1,#0x64
000006  a802              ADD      r0,sp,#8
000008  f7fffffe          BL       __aeabi_memclr4
;;;1685       uint8 i;
;;;1686   
;;;1687       switch (stateCB.step)
00000c  4857              LDR      r0,|L10.364|
00000e  7880              LDRB     r0,[r0,#2]  ; stateCB
000010  284a              CMP      r0,#0x4a
000012  d053              BEQ      |L10.188|
000014  dc0b              BGT      |L10.46|
000016  2846              CMP      r0,#0x46
000018  d037              BEQ      |L10.138|
00001a  dc03              BGT      |L10.36|
00001c  b180              CBZ      r0,|L10.64|
00001e  2845              CMP      r0,#0x45
                  |L10.32|
000020  d174              BNE      |L10.268|
000022  e00e              B        |L10.66|
                  |L10.36|
000024  2847              CMP      r0,#0x47
000026  d031              BEQ      |L10.140|
000028  2849              CMP      r0,#0x49
00002a  d1f9              BNE      |L10.32|
00002c  e03d              B        |L10.170|
                  |L10.46|
00002e  284b              CMP      r0,#0x4b
000030  d059              BEQ      |L10.230|
000032  284c              CMP      r0,#0x4c
000034  d06d              BEQ      |L10.274|
000036  284d              CMP      r0,#0x4d
000038  d075              BEQ      |L10.294|
00003a  284e              CMP      r0,#0x4e
00003c  d1f0              BNE      |L10.32|
00003e  e07f              B        |L10.320|
                  |L10.64|
;;;1688       {
;;;1689       case STEP_NULL: // 空步骤
;;;1690           break;
000040  e090              B        |L10.356|
                  |L10.66|
;;;1691   
;;;1692       // 入口步骤
;;;1693       case STEP_IOT_CAN_UPGRADE_ENTRY:
;;;1694           STATE_SwitchStep(STEP_IOT_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST);
000042  2047              MOVS     r0,#0x47
000044  f7fffffe          BL       STATE_SwitchStep
;;;1695           dut_info.frameType = DUT_FRAME_TYPE_STD;
000048  2000              MOVS     r0,#0
00004a  4949              LDR      r1,|L10.368|
00004c  7608              STRB     r0,[r1,#0x18]
;;;1696           IAP_CTRL_CAN_Init(CAN_BAUD_RATE_250K);
00004e  20fa              MOVS     r0,#0xfa
000050  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;1697           DUTCTRL_PowerOnOff(1); // dut上电
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1698           dut_info.dutPowerOnAllow = FALSE;
00005a  2000              MOVS     r0,#0
00005c  4944              LDR      r1,|L10.368|
00005e  f881003c          STRB     r0,[r1,#0x3c]
;;;1699           dut_info.reconnectionRepeatOne = FALSE;
000062  f881004b          STRB     r0,[r1,#0x4b]
;;;1700           addTimeOutTimer(5000); // 握手超时时间：2S，维乐高的s1需要2s的握手时间
000066  f2413088          MOV      r0,#0x1388
00006a  f7fffffe          BL       addTimeOutTimer
;;;1701           
;;;1702           dut_info.iotAppUpDataLen = SPI_FLASH_ReadWord(SPI_FLASH_IOT_APP_UP_DATA_LEN);
00006e  4841              LDR      r0,|L10.372|
000070  f7fffffe          BL       SPI_FLASH_ReadWord
000074  493e              LDR      r1,|L10.368|
000076  f8c100e8          STR      r0,[r1,#0xe8]  ; dut_info
;;;1703           dut_info.iotCrc8 = SPI_FLASH_ReadWord(SPI_FLASH_IOT_CRC8);        
00007a  f44f10b6          MOV      r0,#0x16c000
00007e  f7fffffe          BL       SPI_FLASH_ReadWord
000082  493b              LDR      r1,|L10.368|
000084  f88100e4          STRB     r0,[r1,#0xe4]
;;;1704           break;
000088  e06c              B        |L10.356|
                  |L10.138|
;;;1705   
;;;1706       // 等待
;;;1707       case STEP_IOT_CAN_UPGRADE_WAIT_FOR_ACK:
;;;1708           break;
00008a  e06b              B        |L10.356|
                  |L10.140|
;;;1709   
;;;1710       // 发送升级固件请求
;;;1711       case STEP_IOT_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST:
;;;1712           STATE_SwitchStep(STEP_IOT_CAN_UPGRADE_WAIT_FOR_ACK);
00008c  2046              MOVS     r0,#0x46
00008e  f7fffffe          BL       STATE_SwitchStep
;;;1713           
;;;1714           // 发送升级固件请求
;;;1715           TIMER_AddTask(TIMER_ID_SEND_UP_APP_REQUEST,
000092  2001              MOVS     r0,#1
000094  1e81              SUBS     r1,r0,#2
000096  4603              MOV      r3,r0
000098  4a37              LDR      r2,|L10.376|
00009a  e9cd1000          STRD     r1,r0,[sp,#0]
00009e  f64031b8          MOV      r1,#0xbb8
0000a2  2011              MOVS     r0,#0x11
0000a4  f7fffffe          BL       TIMER_AddTask
;;;1716                         3000,
;;;1717                         CAN_PROTOCOL1_SendUpAppReuqest,
;;;1718                         1,
;;;1719                         -1,
;;;1720                         ACTION_MODE_ADD_TO_QUEUE);
;;;1721           break;
0000a8  e05c              B        |L10.356|
                  |L10.170|
;;;1722   
;;;1723       // dut准备就绪，收到同意升级，发送固件信息
;;;1724       case STEP_IOT_CAN_UPGRADE_SEND_APP_EAR:
;;;1725           STATE_SwitchStep(STEP_IOT_CAN_UPGRADE_WAIT_FOR_ACK);
0000aa  2046              MOVS     r0,#0x46
0000ac  f7fffffe          BL       STATE_SwitchStep
;;;1726           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
0000b0  2009              MOVS     r0,#9
0000b2  f7fffffe          BL       TIMER_ResetTimer
;;;1727           CAN_PROTOCOL1_SendCmdUpApp(); 
0000b6  f7fffffe          BL       CAN_PROTOCOL1_SendCmdUpApp
;;;1728           break;
0000ba  e053              B        |L10.356|
                  |L10.188|
;;;1729   
;;;1730       // 固件长度校验通过，发送第一包APP数据
;;;1731       case STEP_IOT_CAN_UPGRADE_SEND_FIRST_APP_PACKET:
;;;1732           STATE_SwitchStep(STEP_IOT_CAN_UPGRADE_WAIT_FOR_ACK);
0000bc  2046              MOVS     r0,#0x46
0000be  f7fffffe          BL       STATE_SwitchStep
;;;1733           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
0000c2  2009              MOVS     r0,#9
0000c4  f7fffffe          BL       TIMER_ResetTimer
;;;1734           dut_info.currentAppSize = 0; // 第一包数据
0000c8  2000              MOVS     r0,#0
0000ca  4929              LDR      r1,|L10.368|
0000cc  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1735           CAN_PROTOCOL1_SendOnePacket_Bin(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize);
0000ce  4608              MOV      r0,r1
0000d0  6b01              LDR      r1,[r0,#0x30]  ; dut_info
0000d2  f44f20c0          MOV      r0,#0x60000
0000d6  f7fffffe          BL       CAN_PROTOCOL1_SendOnePacket_Bin
;;;1736           dut_info.currentAppSize++; // 准备下一包数据
0000da  4825              LDR      r0,|L10.368|
0000dc  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000de  1c40              ADDS     r0,r0,#1
0000e0  4923              LDR      r1,|L10.368|
0000e2  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1737           break;
0000e4  e03e              B        |L10.356|
                  |L10.230|
;;;1738   
;;;1739       // 发送app数据包
;;;1740       case STEP_IOT_CAN_UPGRADE_SEND_APP_PACKET:
;;;1741           STATE_SwitchStep(STEP_IOT_CAN_UPGRADE_WAIT_FOR_ACK);
0000e6  2046              MOVS     r0,#0x46
0000e8  f7fffffe          BL       STATE_SwitchStep
;;;1742           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
0000ec  2009              MOVS     r0,#9
0000ee  f7fffffe          BL       TIMER_ResetTimer
;;;1743           CAN_PROTOCOL1_SendOnePacket_Bin(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize * 128);
0000f2  481f              LDR      r0,|L10.368|
0000f4  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000f6  01c1              LSLS     r1,r0,#7
0000f8  f44f20c0          MOV      r0,#0x60000
0000fc  f7fffffe          BL       CAN_PROTOCOL1_SendOnePacket_Bin
;;;1744           dut_info.currentAppSize++; // 准备下一包数据
000100  481b              LDR      r0,|L10.368|
000102  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000104  1c40              ADDS     r0,r0,#1
000106  491a              LDR      r1,|L10.368|
000108  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1745           break;
00010a  e02b              B        |L10.356|
                  |L10.268|
00010c  e029              B        |L10.354|
00010e  e000              B        |L10.274|
000110  e009              B        |L10.294|
                  |L10.274|
;;;1746   
;;;1747       // app升级成功
;;;1748       case STEP_IOT_CAN_UPGRADE_APP_UP_SUCCESS:
;;;1749           STATE_SwitchStep(STEP_IOT_CAN_UPGRADE_WAIT_FOR_ACK);
000112  2046              MOVS     r0,#0x46
000114  f7fffffe          BL       STATE_SwitchStep
;;;1750           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);    // 停止超时定时器
000118  2009              MOVS     r0,#9
00011a  f7fffffe          BL       TIMER_KillTask
;;;1751           CAN_PROTOCOL1_SendCmdNoResult(CAN_PROTOCOL1_CMD_WRITE_COMPLETE); // 发送数据包写入完成
00011e  20f4              MOVS     r0,#0xf4
000120  f7fffffe          BL       CAN_PROTOCOL1_SendCmdNoResult
;;;1752           break;
000124  e01e              B        |L10.356|
                  |L10.294|
;;;1753   
;;;1754       // 升级项升级完成，检查是否还有需要升级的项
;;;1755       case STEP_IOT_CAN_UPGRADE_ITEM_FINISH:
;;;1756           STATE_SwitchStep(STEP_IOT_CAN_UPGRADE_WAIT_FOR_ACK);
000126  2046              MOVS     r0,#0x46
000128  f7fffffe          BL       STATE_SwitchStep
;;;1757           dut_info.appUpSuccesss = TRUE;
00012c  2001              MOVS     r0,#1
00012e  4910              LDR      r1,|L10.368|
000130  f881003f          STRB     r0,[r1,#0x3f]
;;;1758           dut_info.appUpFlag = FALSE;        
000134  2000              MOVS     r0,#0
000136  76c8              STRB     r0,[r1,#0x1b]
;;;1759           STATE_EnterState(STATE_STANDBY);
000138  2001              MOVS     r0,#1
00013a  f7fffffe          BL       STATE_EnterState
;;;1760           break;
00013e  e011              B        |L10.356|
                  |L10.320|
;;;1761   
;;;1762       // 超时处理
;;;1763       case STEP_IOT_CAN_UPGRADE_COMMUNICATION_TIME_OUT:
;;;1764           if (dut_info.appUpFlag)
000140  480b              LDR      r0,|L10.368|
000142  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
000144  b118              CBZ      r0,|L10.334|
;;;1765           {
;;;1766               dut_info.appUpFaile = TRUE;
000146  2001              MOVS     r0,#1
000148  4909              LDR      r1,|L10.368|
00014a  f8810039          STRB     r0,[r1,#0x39]
                  |L10.334|
;;;1767           }
;;;1768           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00014e  2009              MOVS     r0,#9
000150  f7fffffe          BL       TIMER_KillTask
;;;1769           TIMER_KillTask(TIMER_ID_SEND_UP_APP_REQUEST);
000154  2011              MOVS     r0,#0x11
000156  f7fffffe          BL       TIMER_KillTask
;;;1770           STATE_EnterState(STATE_STANDBY);
00015a  2001              MOVS     r0,#1
00015c  f7fffffe          BL       STATE_EnterState
;;;1771           break;
000160  e000              B        |L10.356|
                  |L10.354|
;;;1772   
;;;1773       default:
;;;1774           break;
000162  bf00              NOP      
                  |L10.356|
000164  bf00              NOP                            ;1690
;;;1775       }
;;;1776   }
000166  b01b              ADD      sp,sp,#0x6c
000168  bd00              POP      {pc}
;;;1777   
                          ENDP

00016a  0000              DCW      0x0000
                  |L10.364|
                          DCD      stateCB
                  |L10.368|
                          DCD      dut_info
                  |L10.372|
                          DCD      0x0016b000
                  |L10.376|
                          DCD      CAN_PROTOCOL1_SendUpAppReuqest

                          AREA ||i.STEP_Process_IotUartUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_IotUartUpgrade PROC
;;;1778   // IOT的串口升级步骤
;;;1779   void STEP_Process_IotUartUpgrade()
000000  b500              PUSH     {lr}
;;;1780   {
000002  b09b              SUB      sp,sp,#0x6c
;;;1781       uint8 configs[100] = {0};
000004  2164              MOVS     r1,#0x64
000006  a802              ADD      r0,sp,#8
000008  f7fffffe          BL       __aeabi_memclr4
;;;1782       uint8 i;
;;;1783   
;;;1784       switch (stateCB.step)
00000c  4852              LDR      r0,|L11.344|
00000e  7880              LDRB     r0,[r0,#2]  ; stateCB
000010  2895              CMP      r0,#0x95
000012  d048              BEQ      |L11.166|
000014  dc0b              BGT      |L11.46|
000016  2891              CMP      r0,#0x91
000018  d02c              BEQ      |L11.116|
00001a  dc03              BGT      |L11.36|
00001c  b180              CBZ      r0,|L11.64|
00001e  2890              CMP      r0,#0x90
                  |L11.32|
000020  d179              BNE      |L11.278|
000022  e00e              B        |L11.66|
                  |L11.36|
000024  2892              CMP      r0,#0x92
000026  d026              BEQ      |L11.118|
000028  2894              CMP      r0,#0x94
00002a  d1f9              BNE      |L11.32|
00002c  e032              B        |L11.148|
                  |L11.46|
00002e  2896              CMP      r0,#0x96
000030  d04e              BEQ      |L11.208|
000032  2897              CMP      r0,#0x97
000034  d05f              BEQ      |L11.246|
000036  2898              CMP      r0,#0x98
000038  d06f              BEQ      |L11.282|
00003a  2899              CMP      r0,#0x99
00003c  d1f0              BNE      |L11.32|
00003e  e076              B        |L11.302|
                  |L11.64|
;;;1785       {
;;;1786       case STEP_NULL: // 空步骤
;;;1787           break;
000040  e087              B        |L11.338|
                  |L11.66|
;;;1788   
;;;1789       // 入口步骤
;;;1790       case STEP_IOT_UART_UPGRADE_ENTRY:
;;;1791           STATE_SwitchStep(STEP_IOT_UART_UPGRADE_RECEIVE_DUT_ECO_REQUEST);
000042  2092              MOVS     r0,#0x92
000044  f7fffffe          BL       STATE_SwitchStep
;;;1792           UART_DRIVE_InitSelect(UART_DRIVE_BAUD_RATE); // UART协议层初始化
000048  f44f30e1          MOV      r0,#0x1c200
00004c  f7fffffe          BL       UART_DRIVE_InitSelect
;;;1793           UART_PROTOCOL_Init();                                    // 
000050  f7fffffe          BL       UART_PROTOCOL_Init
;;;1794           UART_PROTOCOL3_Init();                                   // 3A升级协议
000054  f7fffffe          BL       UART_PROTOCOL3_Init
;;;1795           DUTCTRL_PowerOnOff(1);                       // dut上电
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1796           
;;;1797           // 添加超时
;;;1798           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
00005e  2001              MOVS     r0,#1
000060  9000              STR      r0,[sp,#0]
000062  2399              MOVS     r3,#0x99
000064  4a3d              LDR      r2,|L11.348|
000066  f64031b8          MOV      r1,#0xbb8
00006a  9001              STR      r0,[sp,#4]
00006c  2009              MOVS     r0,#9
00006e  f7fffffe          BL       TIMER_AddTask
;;;1799                         3000,
;;;1800                         STATE_SwitchStep,
;;;1801                         STEP_IOT_UART_UPGRADE_COMMUNICATION_TIME_OUT,
;;;1802                         1,
;;;1803                         ACTION_MODE_ADD_TO_QUEUE);
;;;1804           break;
000072  e06e              B        |L11.338|
                  |L11.116|
;;;1805   
;;;1806       // 等待
;;;1807       case STEP_IOT_UART_UPGRADE_WAIT_FOR_ACK:
;;;1808           break;
000074  e06d              B        |L11.338|
                  |L11.118|
;;;1809   
;;;1810       // 发送升级固件请求
;;;1811       case STEP_IOT_UART_UPGRADE_RECEIVE_DUT_ECO_REQUEST:
;;;1812           STATE_SwitchStep(STEP_IOT_UART_UPGRADE_WAIT_FOR_ACK);
000076  2091              MOVS     r0,#0x91
000078  f7fffffe          BL       STATE_SwitchStep
;;;1813           
;;;1814           // 发送升级固件请求
;;;1815           TIMER_AddTask(TIMER_ID_SEND_UP_APP_REQUEST,
00007c  2001              MOVS     r0,#1
00007e  1e81              SUBS     r1,r0,#2
000080  4603              MOV      r3,r0
000082  4a37              LDR      r2,|L11.352|
000084  e9cd1000          STRD     r1,r0,[sp,#0]
000088  f64031b8          MOV      r1,#0xbb8
00008c  2011              MOVS     r0,#0x11
00008e  f7fffffe          BL       TIMER_AddTask
;;;1816                         3000,
;;;1817                         UART_PROTOCOL3_SendUpAppReuqest,
;;;1818                         1,
;;;1819                         -1,
;;;1820                         ACTION_MODE_ADD_TO_QUEUE);
;;;1821           break;
000092  e05e              B        |L11.338|
                  |L11.148|
;;;1822   
;;;1823       // dut准备就绪，收到同意升级，发送固件信息
;;;1824       case STEP_IOT_UART_UPGRADE_SEND_APP_EAR:
;;;1825           STATE_SwitchStep(STEP_IOT_UART_UPGRADE_WAIT_FOR_ACK);
000094  2091              MOVS     r0,#0x91
000096  f7fffffe          BL       STATE_SwitchStep
;;;1826           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
00009a  2009              MOVS     r0,#9
00009c  f7fffffe          BL       TIMER_ResetTimer
;;;1827           UART_PROTOCOL3_SendCmdUpApp(); 
0000a0  f7fffffe          BL       UART_PROTOCOL3_SendCmdUpApp
;;;1828           break;
0000a4  e055              B        |L11.338|
                  |L11.166|
;;;1829   
;;;1830       // 固件长度校验通过，发送第一包APP数据
;;;1831       case STEP_IOT_UART_UPGRADE_SEND_FIRST_APP_PACKET:
;;;1832           STATE_SwitchStep(STEP_IOT_UART_UPGRADE_WAIT_FOR_ACK);
0000a6  2091              MOVS     r0,#0x91
0000a8  f7fffffe          BL       STATE_SwitchStep
;;;1833           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
0000ac  2009              MOVS     r0,#9
0000ae  f7fffffe          BL       TIMER_ResetTimer
;;;1834           dut_info.currentAppSize = 0; // 第一包数据
0000b2  2000              MOVS     r0,#0
0000b4  492b              LDR      r1,|L11.356|
0000b6  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1835           UART_PROTOCOL3_SendOnePacket_Bin(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize);
0000b8  4608              MOV      r0,r1
0000ba  6b01              LDR      r1,[r0,#0x30]  ; dut_info
0000bc  f44f20c0          MOV      r0,#0x60000
0000c0  f7fffffe          BL       UART_PROTOCOL3_SendOnePacket_Bin
;;;1836           dut_info.currentAppSize++; // 准备下一包数据
0000c4  4827              LDR      r0,|L11.356|
0000c6  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000c8  1c40              ADDS     r0,r0,#1
0000ca  4926              LDR      r1,|L11.356|
0000cc  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1837           break;
0000ce  e040              B        |L11.338|
                  |L11.208|
;;;1838   
;;;1839       // 发送app数据包
;;;1840       case STEP_IOT_UART_UPGRADE_SEND_APP_PACKET:
;;;1841           STATE_SwitchStep(STEP_IOT_UART_UPGRADE_WAIT_FOR_ACK);
0000d0  2091              MOVS     r0,#0x91
0000d2  f7fffffe          BL       STATE_SwitchStep
;;;1842           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
0000d6  2009              MOVS     r0,#9
0000d8  f7fffffe          BL       TIMER_ResetTimer
;;;1843           UART_PROTOCOL3_SendOnePacket_Bin(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize * 128);
0000dc  4821              LDR      r0,|L11.356|
0000de  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000e0  01c1              LSLS     r1,r0,#7
0000e2  f44f20c0          MOV      r0,#0x60000
0000e6  f7fffffe          BL       UART_PROTOCOL3_SendOnePacket_Bin
;;;1844           dut_info.currentAppSize++; // 准备下一包数据
0000ea  481e              LDR      r0,|L11.356|
0000ec  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000ee  1c40              ADDS     r0,r0,#1
0000f0  491c              LDR      r1,|L11.356|
0000f2  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1845           break;
0000f4  e02d              B        |L11.338|
                  |L11.246|
;;;1846   
;;;1847       // app升级成功
;;;1848       case STEP_IOT_UART_UPGRADE_APP_UP_SUCCESS:
;;;1849           STATE_SwitchStep(STEP_IOT_UART_UPGRADE_WAIT_FOR_ACK);
0000f6  2091              MOVS     r0,#0x91
0000f8  f7fffffe          BL       STATE_SwitchStep
;;;1850           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);    // 停止超时定时器
0000fc  2009              MOVS     r0,#9
0000fe  f7fffffe          BL       TIMER_KillTask
;;;1851           UART_PROTOCOL3_SendCmdNoResult(UART_PROTOCOL3_CMD_WRITE_COMPLETE); // 发送数据包写入完成
000102  20f4              MOVS     r0,#0xf4
000104  f7fffffe          BL       UART_PROTOCOL3_SendCmdNoResult
;;;1852           dut_info.appUpSuccesss = TRUE;
000108  2001              MOVS     r0,#1
00010a  4916              LDR      r1,|L11.356|
00010c  f881003f          STRB     r0,[r1,#0x3f]
;;;1853           dut_info.appUpFlag = FALSE;
000110  2000              MOVS     r0,#0
000112  76c8              STRB     r0,[r1,#0x1b]
;;;1854           break;
000114  e01d              B        |L11.338|
                  |L11.278|
000116  e01b              B        |L11.336|
000118  e7ff              B        |L11.282|
                  |L11.282|
;;;1855   
;;;1856       // 升级项升级完成，检查是否还有需要升级的项
;;;1857       case STEP_IOT_UART_UPGRADE_ITEM_FINISH:
;;;1858           STATE_SwitchStep(STEP_IOT_UART_UPGRADE_WAIT_FOR_ACK);
00011a  2091              MOVS     r0,#0x91
00011c  f7fffffe          BL       STATE_SwitchStep
;;;1859           dut_info.appUpFlag = FALSE;
000120  2000              MOVS     r0,#0
000122  4910              LDR      r1,|L11.356|
000124  76c8              STRB     r0,[r1,#0x1b]
;;;1860           STATE_EnterState(STATE_STANDBY);
000126  2001              MOVS     r0,#1
000128  f7fffffe          BL       STATE_EnterState
;;;1861           break;
00012c  e011              B        |L11.338|
                  |L11.302|
;;;1862   
;;;1863       // 超时处理
;;;1864       case STEP_IOT_UART_UPGRADE_COMMUNICATION_TIME_OUT:
;;;1865           if (dut_info.appUpFlag)
00012e  480d              LDR      r0,|L11.356|
000130  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
000132  b118              CBZ      r0,|L11.316|
;;;1866           {
;;;1867               dut_info.appUpFaile = TRUE;
000134  2001              MOVS     r0,#1
000136  490b              LDR      r1,|L11.356|
000138  f8810039          STRB     r0,[r1,#0x39]
                  |L11.316|
;;;1868           }
;;;1869           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00013c  2009              MOVS     r0,#9
00013e  f7fffffe          BL       TIMER_KillTask
;;;1870           TIMER_KillTask(TIMER_ID_SEND_UP_APP_REQUEST);
000142  2011              MOVS     r0,#0x11
000144  f7fffffe          BL       TIMER_KillTask
;;;1871           STATE_EnterState(STATE_STANDBY);
000148  2001              MOVS     r0,#1
00014a  f7fffffe          BL       STATE_EnterState
;;;1872           break;
00014e  e000              B        |L11.338|
                  |L11.336|
;;;1873   
;;;1874       default:
;;;1875           break;
000150  bf00              NOP      
                  |L11.338|
000152  bf00              NOP                            ;1787
;;;1876       }
;;;1877   }
000154  b01b              ADD      sp,sp,#0x6c
000156  bd00              POP      {pc}
;;;1878   
                          ENDP

                  |L11.344|
                          DCD      stateCB
                  |L11.348|
                          DCD      STATE_SwitchStep
                  |L11.352|
                          DCD      UART_PROTOCOL3_SendUpAppReuqest
                  |L11.356|
                          DCD      dut_info

                          AREA ||i.STEP_Process_KaiYangCanUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_KaiYangCanUpgrade PROC
;;;1425   // 开阳can升级步骤
;;;1426   void STEP_Process_KaiYangCanUpgrade()
000000  b570              PUSH     {r4-r6,lr}
;;;1427   {
000002  b0b2              SUB      sp,sp,#0xc8
;;;1428       uint8 dataPacket[130];
;;;1429       uint8 i, j, k;
;;;1430       uint8 configs[60] = {0};
000004  213c              MOVS     r1,#0x3c
000006  a802              ADD      r0,sp,#8
000008  f7fffffe          BL       __aeabi_memclr4
;;;1431   
;;;1432       switch (stateCB.step)
00000c  48f4              LDR      r0,|L12.992|
00000e  7880              LDRB     r0,[r0,#2]  ; stateCB
000010  2841              CMP      r0,#0x41
000012  d073              BEQ      |L12.252|
000014  dc09              BGT      |L12.42|
000016  f1a0003a          SUB      r0,r0,#0x3a
00001a  2807              CMP      r0,#7
00001c  d26f              BCS      |L12.254|
00001e  e8dff000          TBB      [pc,r0]
000022  132b              DCB      0x13,0x2b
000024  6e2c70c2          DCB      0x6e,0x2c,0x70,0xc2
000028  cb00              DCB      0xcb,0x00
                  |L12.42|
00002a  2850              CMP      r0,#0x50
00002c  d068              BEQ      |L12.256|
00002e  dc06              BGT      |L12.62|
000030  2842              CMP      r0,#0x42
000032  d07d              BEQ      |L12.304|
000034  2844              CMP      r0,#0x44
000036  d07c              BEQ      |L12.306|
000038  284f              CMP      r0,#0x4f
                  |L12.58|
00003a  d160              BNE      |L12.254|
00003c  e128              B        |L12.656|
                  |L12.62|
00003e  2851              CMP      r0,#0x51
000040  d078              BEQ      |L12.308|
000042  2855              CMP      r0,#0x55
000044  d1f9              BNE      |L12.58|
000046  e1a6              B        |L12.918|
;;;1433       {
;;;1434       case STEP_KAIYANG_CAN_UPGRADE_ENTRY:
;;;1435           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_WAIT_FOR_ACK);
000048  203b              MOVS     r0,#0x3b
00004a  f7fffffe          BL       STATE_SwitchStep
;;;1436           IAP_CTRL_CAN_Init(CAN_BAUD_RATE_250K);
00004e  20fa              MOVS     r0,#0xfa
000050  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;1437           DUTCTRL_PowerOnOff(1); // dut上电
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1438           dut_info.dutPowerOnAllow = FALSE;
00005a  2000              MOVS     r0,#0
00005c  49e1              LDR      r1,|L12.996|
00005e  f881003c          STRB     r0,[r1,#0x3c]
;;;1439           // 添加超时
;;;1440           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000062  2001              MOVS     r0,#1
000064  9000              STR      r0,[sp,#0]
000066  2355              MOVS     r3,#0x55
000068  4adf              LDR      r2,|L12.1000|
00006a  f44f617a          MOV      r1,#0xfa0
00006e  9001              STR      r0,[sp,#4]
000070  2009              MOVS     r0,#9
000072  f7fffffe          BL       TIMER_AddTask
;;;1441                         4000,
;;;1442                         STATE_SwitchStep,
;;;1443                         STEP_KAIYANG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;1444                         1,
;;;1445                         ACTION_MODE_ADD_TO_QUEUE);
;;;1446           break;
000076  e1b0              B        |L12.986|
;;;1447   
;;;1448       case STEP_KAIYANG_CAN_UPGRADE_WAIT_FOR_ACK: // 等待
;;;1449           break;
000078  e1af              B        |L12.986|
;;;1450   
;;;1451       case STEP_KAIYANG_CAN_UPGRADE_UP_ALLOW:
;;;1452           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_WAIT_FOR_ACK);
00007a  203b              MOVS     r0,#0x3b
00007c  f7fffffe          BL       STATE_SwitchStep
;;;1453           IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_UP_PROJECT_APPLY); // 0x01,工程模式允
000080  2001              MOVS     r0,#1
000082  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;1454           // 下发文件类型
;;;1455           IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD); // 添加命令头;//头
000086  2055              MOVS     r0,#0x55
000088  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1456           IAP_CTRL_CAN_TxAddData(0x02);         // 命令，0x02
00008c  2002              MOVS     r0,#2
00008e  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1457           IAP_CTRL_CAN_TxAddData(0x00);         // 添加临时数据长度
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1458           if (dut_info.appUpFlag)
000098  48d2              LDR      r0,|L12.996|
00009a  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00009c  b1a0              CBZ      r0,|L12.200|
;;;1459           {
;;;1460               IAP_CTRL_CAN_TxAddData(0x03);                   // 0x03:表示是app文件
00009e  2003              MOVS     r0,#3
0000a0  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1461               IAP_CTRL_CAN_TxAddData(dut_info.appSize >> 16); // 包数高位
0000a4  49cf              LDR      r1,|L12.996|
0000a6  6a49              LDR      r1,[r1,#0x24]  ; dut_info
0000a8  f3c14007          UBFX     r0,r1,#16,#8
0000ac  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1462               IAP_CTRL_CAN_TxAddData(dut_info.appSize >> 8);  // 包数中位
0000b0  49cc              LDR      r1,|L12.996|
0000b2  8c89              LDRH     r1,[r1,#0x24]  ; dut_info
0000b4  f3c12007          UBFX     r0,r1,#8,#8
0000b8  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1463               IAP_CTRL_CAN_TxAddData(dut_info.appSize);       // 包数低位
0000bc  49c9              LDR      r1,|L12.996|
0000be  f8910024          LDRB     r0,[r1,#0x24]  ; dut_info
0000c2  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
0000c6  e016              B        |L12.246|
                  |L12.200|
;;;1464           }
;;;1465           else if (dut_info.uiUpFlag)
0000c8  48c6              LDR      r0,|L12.996|
0000ca  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
0000cc  b198              CBZ      r0,|L12.246|
;;;1466           {
;;;1467               IAP_CTRL_CAN_TxAddData(0x01);                  // 0x01:表示是ui文件
0000ce  2001              MOVS     r0,#1
0000d0  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1468               IAP_CTRL_CAN_TxAddData(dut_info.uiSize >> 16); // 包数高位
0000d4  49c3              LDR      r1,|L12.996|
0000d6  6a89              LDR      r1,[r1,#0x28]  ; dut_info
0000d8  f3c14007          UBFX     r0,r1,#16,#8
0000dc  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1469               IAP_CTRL_CAN_TxAddData(dut_info.uiSize >> 8);  // 包数中位
0000e0  49c0              LDR      r1,|L12.996|
0000e2  8d09              LDRH     r1,[r1,#0x28]  ; dut_info
0000e4  f3c12007          UBFX     r0,r1,#8,#8
0000e8  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1470               IAP_CTRL_CAN_TxAddData(dut_info.uiSize);       // 包数低位
0000ec  49bd              LDR      r1,|L12.996|
0000ee  f8910028          LDRB     r0,[r1,#0x28]  ; dut_info
0000f2  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
                  |L12.246|
;;;1471           }
;;;1472   
;;;1473           IAP_CTRL_CAN_TxAddFrame(); // 调整帧格式,修改长度和添加校验
0000f6  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1474           break;
0000fa  e16e              B        |L12.986|
                  |L12.252|
0000fc  e071              B        |L12.482|
                  |L12.254|
0000fe  e16b              B        |L12.984|
                  |L12.256|
000100  e0e9              B        |L12.726|
;;;1475   
;;;1476       case STEP_KAIYANG_CAN_UPGRADE_SEND_APP_WRITE:
;;;1477           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_WAIT_FOR_ACK);
000102  203b              MOVS     r0,#0x3b
000104  f7fffffe          BL       STATE_SwitchStep
;;;1478   
;;;1479           TIMER_ResetTimer(TIMER_ID_RECONNECTION);// 喂狗
000108  200a              MOVS     r0,#0xa
00010a  f7fffffe          BL       TIMER_ResetTimer
;;;1480           SPI_FLASH_ReadArray(dataPacket, SPI_FLASH_DUT_APP_ADDEESS + (dut_info.currentAppSize) * 128, 128); // 工具读取128字节
00010e  48b5              LDR      r0,|L12.996|
000110  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000112  f44f22c0          MOV      r2,#0x60000
000116  eb0211c0          ADD      r1,r2,r0,LSL #7
00011a  2280              MOVS     r2,#0x80
00011c  a811              ADD      r0,sp,#0x44
00011e  f7fffffe          BL       SPI_FLASH_ReadArray
;;;1481   
;;;1482           k = 128;
000122  2680              MOVS     r6,#0x80
;;;1483   
;;;1484           // 去掉最后一包数据的0xff
;;;1485           if (dut_info.currentAppSize == dut_info.appSize - 1)
000124  48af              LDR      r0,|L12.996|
000126  6b01              LDR      r1,[r0,#0x30]  ; dut_info
000128  6a40              LDR      r0,[r0,#0x24]  ; dut_info
00012a  1e40              SUBS     r0,r0,#1
00012c  4281              CMP      r1,r0
00012e  e002              B        |L12.310|
                  |L12.304|
000130  e0a5              B        |L12.638|
                  |L12.306|
000132  e10e              B        |L12.850|
                  |L12.308|
000134  e0f4              B        |L12.800|
                  |L12.310|
000136  d11b              BNE      |L12.368|
;;;1486           {
;;;1487               for (i = 0; i < 128; i++)
000138  2400              MOVS     r4,#0
00013a  e017              B        |L12.364|
                  |L12.316|
;;;1488               {
;;;1489                   if (0xff == dataPacket[i])
00013c  a811              ADD      r0,sp,#0x44
00013e  5d00              LDRB     r0,[r0,r4]
000140  28ff              CMP      r0,#0xff
000142  d111              BNE      |L12.360|
;;;1490                   {
;;;1491                       for (j = i; j < 128; j++) // 如果后面全是0xff
000144  4625              MOV      r5,r4
000146  e00c              B        |L12.354|
                  |L12.328|
;;;1492                       {
;;;1493                           if (0xff != dataPacket[j - 1])
000148  1e68              SUBS     r0,r5,#1
00014a  a911              ADD      r1,sp,#0x44
00014c  5c08              LDRB     r0,[r1,r0]
00014e  28ff              CMP      r0,#0xff
000150  d000              BEQ      |L12.340|
;;;1494                           {
;;;1495                               break;
000152  e008              B        |L12.358|
                  |L12.340|
;;;1496                           }
;;;1497   
;;;1498                           if (127 == j) // 后面全是0xff
000154  2d7f              CMP      r5,#0x7f
000156  d102              BNE      |L12.350|
;;;1499                           {
;;;1500                               k = i - 1;
000158  1e60              SUBS     r0,r4,#1
00015a  b2c6              UXTB     r6,r0
;;;1501                               i = 128;
00015c  2480              MOVS     r4,#0x80
                  |L12.350|
00015e  1c68              ADDS     r0,r5,#1              ;1491
000160  b2c5              UXTB     r5,r0                 ;1491
                  |L12.354|
000162  2d80              CMP      r5,#0x80              ;1491
000164  dbf0              BLT      |L12.328|
                  |L12.358|
000166  bf00              NOP                            ;1495
                  |L12.360|
000168  1c60              ADDS     r0,r4,#1              ;1487
00016a  b2c4              UXTB     r4,r0                 ;1487
                  |L12.364|
00016c  2c80              CMP      r4,#0x80              ;1487
00016e  dbe5              BLT      |L12.316|
                  |L12.368|
;;;1502                           }
;;;1503                       }
;;;1504                   }
;;;1505               }
;;;1506           }
;;;1507   
;;;1508           IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000170  2055              MOVS     r0,#0x55
000172  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1509           IAP_CTRL_CAN_TxAddData(0x03);
000176  2003              MOVS     r0,#3
000178  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1510           IAP_CTRL_CAN_TxAddData(0x00);                            // 临时添加数据长度
00017c  2000              MOVS     r0,#0
00017e  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1511           IAP_CTRL_CAN_TxAddData(dut_info.currentAppSize % 0x100); // 临时添加数据长度
000182  4998              LDR      r1,|L12.996|
000184  f8910030          LDRB     r0,[r1,#0x30]  ; dut_info
000188  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1512   
;;;1513           for (i = 0; i < k; i++)
00018c  2400              MOVS     r4,#0
00018e  e005              B        |L12.412|
                  |L12.400|
;;;1514           {
;;;1515               IAP_CTRL_CAN_TxAddData(dataPacket[i]);
000190  a911              ADD      r1,sp,#0x44
000192  5d08              LDRB     r0,[r1,r4]
000194  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
000198  1c60              ADDS     r0,r4,#1              ;1513
00019a  b2c4              UXTB     r4,r0                 ;1513
                  |L12.412|
00019c  42b4              CMP      r4,r6                 ;1513
00019e  dbf7              BLT      |L12.400|
;;;1516           }
;;;1517           IAP_CTRL_CAN_TxAddFrame(); // 调整帧格式,修改长度和添加校验
0001a0  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1518           break;
0001a4  e119              B        |L12.986|
;;;1519   
;;;1520       // 手动发送下一帧ui数据
;;;1521       case STEP_KAIYANG_CAN_UPGRADE_SEND_APP_AGAIN:
;;;1522           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_APP_WRITE);
0001a6  203e              MOVS     r0,#0x3e
0001a8  f7fffffe          BL       STATE_SwitchStep
;;;1523           dut_info.currentAppSize++;
0001ac  488d              LDR      r0,|L12.996|
0001ae  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0001b0  1c40              ADDS     r0,r0,#1
0001b2  498c              LDR      r1,|L12.996|
0001b4  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1524           break;
0001b6  e110              B        |L12.986|
;;;1525   
;;;1526       case STEP_KAIYANG_CAN_UPGRADE_APP_UP_SUCCESS:
;;;1527           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_WAIT_FOR_ACK);
0001b8  203b              MOVS     r0,#0x3b
0001ba  f7fffffe          BL       STATE_SwitchStep
;;;1528           IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
0001be  2055              MOVS     r0,#0x55
0001c0  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1529           IAP_CTRL_CAN_TxAddData(0x04);
0001c4  2004              MOVS     r0,#4
0001c6  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1530           IAP_CTRL_CAN_TxAddData(1); // 数据长度
0001ca  2001              MOVS     r0,#1
0001cc  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1531           IAP_CTRL_CAN_TxAddData(0x01);
0001d0  2001              MOVS     r0,#1
0001d2  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1532           IAP_CTRL_CAN_TxAddFrame();
0001d6  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1533           TIMER_KillTask(TIMER_ID_RECONNECTION);
0001da  200a              MOVS     r0,#0xa
0001dc  f7fffffe          BL       TIMER_KillTask
;;;1534           break;
0001e0  e0fb              B        |L12.986|
                  |L12.482|
;;;1535   
;;;1536       // 发送ui数据
;;;1537       case STEP_KAIYANG_CAN_UPGRADE_SEND_UI_WRITE:
;;;1538           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_WAIT_FOR_ACK);
0001e2  203b              MOVS     r0,#0x3b
0001e4  f7fffffe          BL       STATE_SwitchStep
;;;1539           TIMER_ResetTimer(TIMER_ID_RECONNECTION);// 喂狗
0001e8  200a              MOVS     r0,#0xa
0001ea  f7fffffe          BL       TIMER_ResetTimer
;;;1540           SPI_FLASH_ReadArray(dataPacket, SPI_FLASH_DUT_UI_ADDEESS + (dut_info.currentUiSize) * 128, 128); // 工具读取128字节
0001ee  487d              LDR      r0,|L12.996|
0001f0  6b40              LDR      r0,[r0,#0x34]  ; dut_info
0001f2  f44f1200          MOV      r2,#0x200000
0001f6  eb0211c0          ADD      r1,r2,r0,LSL #7
0001fa  2280              MOVS     r2,#0x80
0001fc  a811              ADD      r0,sp,#0x44
0001fe  f7fffffe          BL       SPI_FLASH_ReadArray
;;;1541           k = 128;
000202  2680              MOVS     r6,#0x80
;;;1542   
;;;1543           if (dut_info.currentUiSize == dut_info.uiSize - 1) // 最后一包去0xff
000204  4877              LDR      r0,|L12.996|
000206  6b41              LDR      r1,[r0,#0x34]  ; dut_info
000208  6a80              LDR      r0,[r0,#0x28]  ; dut_info
00020a  1e40              SUBS     r0,r0,#1
00020c  4281              CMP      r1,r0
00020e  d11b              BNE      |L12.584|
;;;1544           {
;;;1545               for (i = 0; i < 128; i++)
000210  2400              MOVS     r4,#0
000212  e017              B        |L12.580|
                  |L12.532|
;;;1546               {
;;;1547                   if (0xff == dataPacket[i])
000214  a811              ADD      r0,sp,#0x44
000216  5d00              LDRB     r0,[r0,r4]
000218  28ff              CMP      r0,#0xff
00021a  d111              BNE      |L12.576|
;;;1548                   {
;;;1549                       for (j = i; j < 128; j++) // 如果后面全是0xff
00021c  4625              MOV      r5,r4
00021e  e00c              B        |L12.570|
                  |L12.544|
;;;1550                       {
;;;1551                           if (0xff != dataPacket[j - 1])
000220  1e68              SUBS     r0,r5,#1
000222  a911              ADD      r1,sp,#0x44
000224  5c08              LDRB     r0,[r1,r0]
000226  28ff              CMP      r0,#0xff
000228  d000              BEQ      |L12.556|
;;;1552                           {
;;;1553                               break;
00022a  e008              B        |L12.574|
                  |L12.556|
;;;1554                           }
;;;1555   
;;;1556                           if (127 == j) // 后面全是0xff;
00022c  2d7f              CMP      r5,#0x7f
00022e  d102              BNE      |L12.566|
;;;1557                           {
;;;1558                               k = i + 1;// 保留两个0xff
000230  1c60              ADDS     r0,r4,#1
000232  b2c6              UXTB     r6,r0
;;;1559                               i = 128;
000234  2480              MOVS     r4,#0x80
                  |L12.566|
000236  1c68              ADDS     r0,r5,#1              ;1549
000238  b2c5              UXTB     r5,r0                 ;1549
                  |L12.570|
00023a  2d80              CMP      r5,#0x80              ;1549
00023c  dbf0              BLT      |L12.544|
                  |L12.574|
00023e  bf00              NOP                            ;1553
                  |L12.576|
000240  1c60              ADDS     r0,r4,#1              ;1545
000242  b2c4              UXTB     r4,r0                 ;1545
                  |L12.580|
000244  2c80              CMP      r4,#0x80              ;1545
000246  dbe5              BLT      |L12.532|
                  |L12.584|
;;;1560                           }
;;;1561                       }
;;;1562                   }
;;;1563               }
;;;1564           }
;;;1565   
;;;1566           IAP_CTRL_CAN_TxAddData(CAN_CMD_HEAD);
000248  2055              MOVS     r0,#0x55
00024a  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1567           IAP_CTRL_CAN_TxAddData(0x03); // 03: 升级命令
00024e  2003              MOVS     r0,#3
000250  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1568           IAP_CTRL_CAN_TxAddData(0x00); // 临时添加数据长度
000254  2000              MOVS     r0,#0
000256  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1569           IAP_CTRL_CAN_TxAddData(dut_info.currentUiSize % 0x100);
00025a  4962              LDR      r1,|L12.996|
00025c  f8910034          LDRB     r0,[r1,#0x34]  ; dut_info
000260  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
;;;1570           for (i = 0; i < k; i++)
000264  2400              MOVS     r4,#0
000266  e005              B        |L12.628|
                  |L12.616|
;;;1571           {
;;;1572               IAP_CTRL_CAN_TxAddData(dataPacket[i]);
000268  a911              ADD      r1,sp,#0x44
00026a  5d08              LDRB     r0,[r1,r4]
00026c  f7fffffe          BL       IAP_CTRL_CAN_TxAddData
000270  1c60              ADDS     r0,r4,#1              ;1570
000272  b2c4              UXTB     r4,r0                 ;1570
                  |L12.628|
000274  42b4              CMP      r4,r6                 ;1570
000276  dbf7              BLT      |L12.616|
;;;1573           }
;;;1574           IAP_CTRL_CAN_TxAddFrame(); // 调整帧格式,修改长度和添加校验
000278  f7fffffe          BL       IAP_CTRL_CAN_TxAddFrame
;;;1575           break;
00027c  e0ad              B        |L12.986|
                  |L12.638|
;;;1576   
;;;1577       // 手动发送下一帧ui数据
;;;1578       case STEP_KAIYANG_CAN_UPGRADE_SEND_UI_AGAIN:
;;;1579           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_SEND_UI_WRITE);
00027e  2041              MOVS     r0,#0x41
000280  f7fffffe          BL       STATE_SwitchStep
;;;1580           dut_info.currentUiSize++;
000284  4857              LDR      r0,|L12.996|
000286  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000288  1c40              ADDS     r0,r0,#1
00028a  4956              LDR      r1,|L12.996|
00028c  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;1581           break;
00028e  e0a4              B        |L12.986|
                  |L12.656|
;;;1582   
;;;1583       // 设置config入口
;;;1584       case STEP_CAN_SET_CONFIG_ENTRY:
;;;1585           STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
000290  2023              MOVS     r0,#0x23
000292  f7fffffe          BL       STATE_SwitchStep
;;;1586           dut_info.dutPowerOnAllow = TRUE; // 允许开机
000296  2001              MOVS     r0,#1
000298  4952              LDR      r1,|L12.996|
00029a  f881003c          STRB     r0,[r1,#0x3c]
;;;1587           IAP_CTRL_CAN_Init(CAN_BAUD_RATE_250K);
00029e  20fa              MOVS     r0,#0xfa
0002a0  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;1588           DUTCTRL_PowerOnOff(0);
0002a4  2000              MOVS     r0,#0
0002a6  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1589           // 500ms发送一次配置信息
;;;1590           TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
0002aa  2001              MOVS     r0,#1
0002ac  1e81              SUBS     r1,r0,#2
0002ae  2350              MOVS     r3,#0x50
0002b0  4a4d              LDR      r2,|L12.1000|
0002b2  e9cd1000          STRD     r1,r0,[sp,#0]
0002b6  f44f71fa          MOV      r1,#0x1f4
0002ba  2002              MOVS     r0,#2
0002bc  f7fffffe          BL       TIMER_AddTask
;;;1591                         500,
;;;1592                         STATE_SwitchStep,
;;;1593                         STEP_CAN_SEND_SET_CONFIG,
;;;1594                         TIMER_LOOP_FOREVER,
;;;1595                         ACTION_MODE_ADD_TO_QUEUE);
;;;1596   
;;;1597           // 添加5s的超时
;;;1598           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
0002c0  2001              MOVS     r0,#1
0002c2  9000              STR      r0,[sp,#0]
0002c4  2355              MOVS     r3,#0x55
0002c6  4a48              LDR      r2,|L12.1000|
0002c8  f44f617a          MOV      r1,#0xfa0
0002cc  9001              STR      r0,[sp,#4]
0002ce  2009              MOVS     r0,#9
0002d0  f7fffffe          BL       TIMER_AddTask
;;;1599                         4000,
;;;1600                         STATE_SwitchStep,
;;;1601                         STEP_KAIYANG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;1602                         1,
;;;1603                         ACTION_MODE_ADD_TO_QUEUE);
;;;1604           break;
0002d4  e081              B        |L12.986|
                  |L12.726|
;;;1605   
;;;1606       // 发送config内容
;;;1607       case STEP_CAN_SEND_SET_CONFIG:
;;;1608           STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
0002d6  2023              MOVS     r0,#0x23
0002d8  f7fffffe          BL       STATE_SwitchStep
;;;1609           SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60); // 实际只有54个字节
0002dc  223c              MOVS     r2,#0x3c
0002de  f44f11b0          MOV      r1,#0x160000
0002e2  a802              ADD      r0,sp,#8
0002e4  f7fffffe          BL       SPI_FLASH_ReadArray
;;;1610           DUTCTRL_PowerOnOff(1);                                          // dut上电
0002e8  2001              MOVS     r0,#1
0002ea  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1611           CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);                // 添加命令头
0002ee  203a              MOVS     r0,#0x3a
0002f0  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;1612           CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);         // 添加设备地址
0002f4  201a              MOVS     r0,#0x1a
0002f6  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;1613           CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_WRITE_CONTROL_PARAM); // 0xc0 添加命令字
0002fa  20c0              MOVS     r0,#0xc0
0002fc  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;1614           CAN_PROTOCOL1_TxAddData(54);                                    // 添加数据长度
000300  2036              MOVS     r0,#0x36
000302  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
;;;1615           for (i = 0; i < 54; i++)
000306  2400              MOVS     r4,#0
000308  e005              B        |L12.790|
                  |L12.778|
;;;1616           {
;;;1617               CAN_PROTOCOL1_TxAddData(configs[i]);
00030a  a902              ADD      r1,sp,#8
00030c  5d08              LDRB     r0,[r1,r4]
00030e  f7fffffe          BL       CAN_PROTOCOL1_TxAddData
000312  1c60              ADDS     r0,r4,#1              ;1615
000314  b2c4              UXTB     r4,r0                 ;1615
                  |L12.790|
000316  2c36              CMP      r4,#0x36              ;1615
000318  dbf7              BLT      |L12.778|
;;;1618           }
;;;1619           CAN_PROTOCOL1_TxAddFrame(); // 添加检验和与结束符，并添加至发送
00031a  f7fffffe          BL       CAN_PROTOCOL1_TxAddFrame
;;;1620           break;
00031e  e05c              B        |L12.986|
                  |L12.800|
;;;1621   
;;;1622       // config设置成功
;;;1623       case STEP_CAN_SET_CONFIG_SUCCESS:
;;;1624           STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
000320  2023              MOVS     r0,#0x23
000322  f7fffffe          BL       STATE_SwitchStep
;;;1625           TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止设置config定时器
000326  2002              MOVS     r0,#2
000328  f7fffffe          BL       TIMER_KillTask
;;;1626           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00032c  2009              MOVS     r0,#9
00032e  f7fffffe          BL       TIMER_KillTask
;;;1627           IAP_CTRL_CAN_Init(CAN_BAUD_RATE_250K);   // 设置波特率
000332  20fa              MOVS     r0,#0xfa
000334  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;1628           dut_info.configUpFlag = FALSE;           // 标志位置false
000338  2000              MOVS     r0,#0
00033a  492a              LDR      r1,|L12.996|
00033c  7708              STRB     r0,[r1,#0x1c]
;;;1629           dut_info.configUpSuccesss = TRUE;
00033e  2001              MOVS     r0,#1
000340  f881003d          STRB     r0,[r1,#0x3d]
;;;1630           dut_info.dutPowerOnAllow = FALSE;
000344  2000              MOVS     r0,#0
000346  f881003c          STRB     r0,[r1,#0x3c]
;;;1631           STATE_EnterState(STATE_STANDBY);
00034a  2001              MOVS     r0,#1
00034c  f7fffffe          BL       STATE_EnterState
;;;1632           break;
000350  e043              B        |L12.986|
                  |L12.850|
;;;1633   
;;;1634       // 升级项结束
;;;1635       case STEP_KAIYANG_CAN_UPGRADE_ITEM_FINISH:
;;;1636           STATE_SwitchStep(STEP_KAIYANG_CAN_UPGRADE_WAIT_FOR_ACK);
000352  203b              MOVS     r0,#0x3b
000354  f7fffffe          BL       STATE_SwitchStep
;;;1637           if (dut_info.appUpFlag || dut_info.uiUpFlag)
000358  4822              LDR      r0,|L12.996|
00035a  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00035c  b910              CBNZ     r0,|L12.868|
00035e  4821              LDR      r0,|L12.996|
000360  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000362  b168              CBZ      r0,|L12.896|
                  |L12.868|
;;;1638           {
;;;1639               DUTCTRL_PowerOnOff(0);                 // 仪表断电
000364  2000              MOVS     r0,#0
000366  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1640               TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG, // 500ms后进入入口状态
00036a  2001              MOVS     r0,#1
00036c  9000              STR      r0,[sp,#0]
00036e  233a              MOVS     r3,#0x3a
000370  4a1d              LDR      r2,|L12.1000|
000372  f44f71fa          MOV      r1,#0x1f4
000376  9001              STR      r0,[sp,#4]
000378  2002              MOVS     r0,#2
00037a  f7fffffe          BL       TIMER_AddTask
00037e  e009              B        |L12.916|
                  |L12.896|
;;;1641                             500,
;;;1642                             STATE_SwitchStep,
;;;1643                             STEP_KAIYANG_CAN_UPGRADE_ENTRY,
;;;1644                             1,
;;;1645                             ACTION_MODE_ADD_TO_QUEUE);
;;;1646           }
;;;1647           else if (dut_info.configUpFlag)
000380  4818              LDR      r0,|L12.996|
000382  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000384  b118              CBZ      r0,|L12.910|
;;;1648           {
;;;1649               STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
000386  204f              MOVS     r0,#0x4f
000388  f7fffffe          BL       STATE_SwitchStep
00038c  e002              B        |L12.916|
                  |L12.910|
;;;1650           }
;;;1651           else
;;;1652           {
;;;1653               // 没有升级项断电
;;;1654               STATE_EnterState(STATE_STANDBY);
00038e  2001              MOVS     r0,#1
000390  f7fffffe          BL       STATE_EnterState
                  |L12.916|
;;;1655           }
;;;1656           break;
000394  e021              B        |L12.986|
                  |L12.918|
;;;1657   
;;;1658       case STEP_KAIYANG_CAN_UPGRADE_COMMUNICATION_TIME_OUT:
;;;1659           if (dut_info.appUpFlag)
000396  4813              LDR      r0,|L12.996|
000398  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00039a  b120              CBZ      r0,|L12.934|
;;;1660           {
;;;1661               dut_info.appUpFaile = TRUE;
00039c  2001              MOVS     r0,#1
00039e  4911              LDR      r1,|L12.996|
0003a0  f8810039          STRB     r0,[r1,#0x39]
0003a4  e00e              B        |L12.964|
                  |L12.934|
;;;1662           }
;;;1663           else if (dut_info.uiUpFlag)
0003a6  480f              LDR      r0,|L12.996|
0003a8  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
0003aa  b120              CBZ      r0,|L12.950|
;;;1664           {
;;;1665               dut_info.uiUpFaile = TRUE; // ui升级失败
0003ac  2001              MOVS     r0,#1
0003ae  490d              LDR      r1,|L12.996|
0003b0  f881003a          STRB     r0,[r1,#0x3a]
0003b4  e006              B        |L12.964|
                  |L12.950|
;;;1666           }
;;;1667           else if (dut_info.configUpFlag)
0003b6  480b              LDR      r0,|L12.996|
0003b8  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
0003ba  b118              CBZ      r0,|L12.964|
;;;1668           {
;;;1669               dut_info.configUpFaile = TRUE; // config升级失败
0003bc  2001              MOVS     r0,#1
0003be  4909              LDR      r1,|L12.996|
0003c0  f881003b          STRB     r0,[r1,#0x3b]
                  |L12.964|
;;;1670           }
;;;1671           STATE_EnterState(STATE_STANDBY);
0003c4  2001              MOVS     r0,#1
0003c6  f7fffffe          BL       STATE_EnterState
;;;1672           TIMER_KillTask(TIMER_ID_RECONNECTION);
0003ca  200a              MOVS     r0,#0xa
0003cc  f7fffffe          BL       TIMER_KillTask
;;;1673           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0003d0  2009              MOVS     r0,#9
0003d2  f7fffffe          BL       TIMER_KillTask
;;;1674           break;
0003d6  e000              B        |L12.986|
                  |L12.984|
;;;1675   
;;;1676       default:
;;;1677           break;
0003d8  bf00              NOP      
                  |L12.986|
0003da  bf00              NOP                            ;1446
;;;1678       }
;;;1679   }
0003dc  b032              ADD      sp,sp,#0xc8
0003de  bd70              POP      {r4-r6,pc}
;;;1680   
                          ENDP

                  |L12.992|
                          DCD      stateCB
                  |L12.996|
                          DCD      dut_info
                  |L12.1000|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_KaiYangUartUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_KaiYangUartUpgrade PROC
;;;2111   // 开阳uart升级
;;;2112   void STEP_Process_KaiYangUartUpgrade()
000000  b570              PUSH     {r4-r6,lr}
;;;2113   {
000002  b0b2              SUB      sp,sp,#0xc8
;;;2114       uint8 dataPacket[130];
;;;2115       uint8 i, j, k;
;;;2116       uint8 configs[60];
;;;2117   
;;;2118       switch (stateCB.step)
000004  48f8              LDR      r0,|L13.1000|
000006  7880              LDRB     r0,[r0,#2]  ; stateCB
000008  2881              CMP      r0,#0x81
00000a  d079              BEQ      |L13.256|
00000c  dc09              BGT      |L13.34|
00000e  f1a0007a          SUB      r0,r0,#0x7a
000012  2807              CMP      r0,#7
000014  d275              BCS      |L13.258|
000016  e8dff000          TBB      [pc,r0]
00001a  1330              DCB      0x13,0x30
00001c  743179c7          DCB      0x74,0x31,0x79,0xc7
000020  d000              DCB      0xd0,0x00
                  |L13.34|
000022  289a              CMP      r0,#0x9a
000024  d06e              BEQ      |L13.260|
000026  dc06              BGT      |L13.54|
000028  2882              CMP      r0,#0x82
00002a  d06c              BEQ      |L13.262|
00002c  2884              CMP      r0,#0x84
00002e  d06b              BEQ      |L13.264|
000030  2885              CMP      r0,#0x85
                  |L13.50|
000032  d166              BNE      |L13.258|
000034  e1b6              B        |L13.932|
                  |L13.54|
000036  289c              CMP      r0,#0x9c
000038  d067              BEQ      |L13.266|
00003a  289e              CMP      r0,#0x9e
00003c  d1f9              BNE      |L13.50|
00003e  e16e              B        |L13.798|
;;;2119       {
;;;2120       case STEP_KAIYANG_UART_UPGRADE_ENTRY:
;;;2121           STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_WAIT_FOR_ACK);
000040  207b              MOVS     r0,#0x7b
000042  f7fffffe          BL       STATE_SwitchStep
;;;2122           UART_DRIVE_InitSelect(UART_DRIVE_BAUD_RATE); // UART协议层初始化
000046  f44f30e1          MOV      r0,#0x1c200
00004a  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2123           UART_PROTOCOL_Init();                        // 55升级协议
00004e  f7fffffe          BL       UART_PROTOCOL_Init
;;;2124           UART_PROTOCOL3_Init();                       // KM5S
000052  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2125           DUTCTRL_PowerOnOff(1);                       // dut上电
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2126           dut_info.dutPowerOnAllow = FALSE;
00005c  2000              MOVS     r0,#0
00005e  49e3              LDR      r1,|L13.1004|
000060  f881003c          STRB     r0,[r1,#0x3c]
;;;2127           // 添加超时
;;;2128           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000064  2001              MOVS     r0,#1
000066  9000              STR      r0,[sp,#0]
000068  2385              MOVS     r3,#0x85
00006a  4ae1              LDR      r2,|L13.1008|
00006c  f44f617a          MOV      r1,#0xfa0
000070  9001              STR      r0,[sp,#4]
000072  2009              MOVS     r0,#9
000074  f7fffffe          BL       TIMER_AddTask
;;;2129                         4000,
;;;2130                         STATE_SwitchStep,
;;;2131                         STEP_KAIYANG_UART_UPGRADE_COMMUNICATION_TIME_OUT,
;;;2132                         1,
;;;2133                         ACTION_MODE_ADD_TO_QUEUE);
;;;2134           break;
000078  e1bd              B        |L13.1014|
;;;2135   
;;;2136       case STEP_KAIYANG_UART_UPGRADE_WAIT_FOR_ACK: // 等待
;;;2137           break;
00007a  e1bc              B        |L13.1014|
;;;2138   
;;;2139       case STEP_KAIYANG_UART_UPGRADE_UP_ALLOW:
;;;2140           STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_WAIT_FOR_ACK);
00007c  207b              MOVS     r0,#0x7b
00007e  f7fffffe          BL       STATE_SwitchStep
;;;2141           UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_PROJECT_APPLY, TRUE); // 0x01,工程模式允
000082  2101              MOVS     r1,#1
000084  4608              MOV      r0,r1
000086  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2142           // 下发文件类型
;;;2143           UART_PROTOCOL_TxAddData(UART_PROTOCOL_CMD_HEAD); // 添加命令头;//头
00008a  2055              MOVS     r0,#0x55
00008c  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2144           UART_PROTOCOL_TxAddData(0x02);        // 命令，0x02
000090  2002              MOVS     r0,#2
000092  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2145           UART_PROTOCOL_TxAddData(0x00);        // 添加临时数据长度
000096  2000              MOVS     r0,#0
000098  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2146           if (dut_info.appUpFlag)
00009c  48d3              LDR      r0,|L13.1004|
00009e  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
0000a0  b1a0              CBZ      r0,|L13.204|
;;;2147           {
;;;2148               UART_PROTOCOL_TxAddData(0x03);                  // 0x03:表示是app文件
0000a2  2003              MOVS     r0,#3
0000a4  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2149               UART_PROTOCOL_TxAddData(dut_info.appSize >> 16); // 包数高位
0000a8  49d0              LDR      r1,|L13.1004|
0000aa  6a49              LDR      r1,[r1,#0x24]  ; dut_info
0000ac  f3c14007          UBFX     r0,r1,#16,#8
0000b0  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2150               UART_PROTOCOL_TxAddData(dut_info.appSize >> 8); // 包数中位
0000b4  49cd              LDR      r1,|L13.1004|
0000b6  8c89              LDRH     r1,[r1,#0x24]  ; dut_info
0000b8  f3c12007          UBFX     r0,r1,#8,#8
0000bc  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2151               UART_PROTOCOL_TxAddData(dut_info.appSize);      // 包数低位
0000c0  49ca              LDR      r1,|L13.1004|
0000c2  f8910024          LDRB     r0,[r1,#0x24]  ; dut_info
0000c6  f7fffffe          BL       UART_PROTOCOL_TxAddData
0000ca  e016              B        |L13.250|
                  |L13.204|
;;;2152           }
;;;2153           else if (dut_info.uiUpFlag)
0000cc  48c7              LDR      r0,|L13.1004|
0000ce  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
0000d0  b198              CBZ      r0,|L13.250|
;;;2154           {
;;;2155               UART_PROTOCOL_TxAddData(0x01);                 // 0x01:表示是ui文件
0000d2  2001              MOVS     r0,#1
0000d4  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2156               UART_PROTOCOL_TxAddData(dut_info.uiSize >> 16); // 包数高位
0000d8  49c4              LDR      r1,|L13.1004|
0000da  6a89              LDR      r1,[r1,#0x28]  ; dut_info
0000dc  f3c14007          UBFX     r0,r1,#16,#8
0000e0  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2157               UART_PROTOCOL_TxAddData(dut_info.uiSize >> 8);  // 包数中位
0000e4  49c1              LDR      r1,|L13.1004|
0000e6  8d09              LDRH     r1,[r1,#0x28]  ; dut_info
0000e8  f3c12007          UBFX     r0,r1,#8,#8
0000ec  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2158               UART_PROTOCOL_TxAddData(dut_info.uiSize);      // 包数低位
0000f0  49be              LDR      r1,|L13.1004|
0000f2  f8910028          LDRB     r0,[r1,#0x28]  ; dut_info
0000f6  f7fffffe          BL       UART_PROTOCOL_TxAddData
                  |L13.250|
;;;2159           }
;;;2160   
;;;2161           UART_PROTOCOL_TxAddFrame(); // 调整帧格式,修改长度和添加校验
0000fa  f7fffffe          BL       UART_PROTOCOL_TxAddFrame
;;;2162           break;
0000fe  e17a              B        |L13.1014|
                  |L13.256|
000100  e06d              B        |L13.478|
                  |L13.258|
000102  e177              B        |L13.1012|
                  |L13.260|
000104  e0c2              B        |L13.652|
                  |L13.262|
000106  e0b8              B        |L13.634|
                  |L13.264|
000108  e124              B        |L13.852|
                  |L13.266|
00010a  e0e3              B        |L13.724|
;;;2163   
;;;2164       case STEP_KAIYANG_UART_UPGRADE_SEND_APP_WRITE:
;;;2165           STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_WAIT_FOR_ACK);
00010c  207b              MOVS     r0,#0x7b
00010e  f7fffffe          BL       STATE_SwitchStep
;;;2166   
;;;2167           TIMER_ResetTimer(TIMER_ID_RECONNECTION);// 喂狗
000112  200a              MOVS     r0,#0xa
000114  f7fffffe          BL       TIMER_ResetTimer
;;;2168   
;;;2169           SPI_FLASH_ReadArray(dataPacket, SPI_FLASH_DUT_APP_ADDEESS + (dut_info.currentAppSize) * 128, 128); // 工具读取128字节
000118  48b4              LDR      r0,|L13.1004|
00011a  6b00              LDR      r0,[r0,#0x30]  ; dut_info
00011c  f44f22c0          MOV      r2,#0x60000
000120  eb0211c0          ADD      r1,r2,r0,LSL #7
000124  2280              MOVS     r2,#0x80
000126  a811              ADD      r0,sp,#0x44
000128  f7fffffe          BL       SPI_FLASH_ReadArray
;;;2170   
;;;2171           k = 128;
00012c  2680              MOVS     r6,#0x80
;;;2172           // 去掉最后一包数据的0xff
;;;2173           if (dut_info.currentAppSize == dut_info.appSize - 1)
00012e  48af              LDR      r0,|L13.1004|
000130  6b01              LDR      r1,[r0,#0x30]  ; dut_info
000132  6a40              LDR      r0,[r0,#0x24]  ; dut_info
000134  1e40              SUBS     r0,r0,#1
000136  4281              CMP      r1,r0
000138  d11b              BNE      |L13.370|
;;;2174           {
;;;2175               for (i = 0; i < 128; i++)
00013a  2400              MOVS     r4,#0
00013c  e017              B        |L13.366|
                  |L13.318|
;;;2176               {
;;;2177                   if (0xff == dataPacket[i])
00013e  a811              ADD      r0,sp,#0x44
000140  5d00              LDRB     r0,[r0,r4]
000142  28ff              CMP      r0,#0xff
000144  d111              BNE      |L13.362|
;;;2178                   {
;;;2179                       for (j = i; j < 128; j++) // 如果后面全是0xff
000146  4625              MOV      r5,r4
000148  e00c              B        |L13.356|
                  |L13.330|
;;;2180                       {
;;;2181                           if (0xff != dataPacket[j - 1])
00014a  1e68              SUBS     r0,r5,#1
00014c  a911              ADD      r1,sp,#0x44
00014e  5c08              LDRB     r0,[r1,r0]
000150  28ff              CMP      r0,#0xff
000152  d000              BEQ      |L13.342|
;;;2182                           {
;;;2183                               break;
000154  e008              B        |L13.360|
                  |L13.342|
;;;2184                           }
;;;2185                           if (127 == j) // 后面全是0xff;
000156  2d7f              CMP      r5,#0x7f
000158  d102              BNE      |L13.352|
;;;2186                           {
;;;2187                               k = i - 1;
00015a  1e60              SUBS     r0,r4,#1
00015c  b2c6              UXTB     r6,r0
;;;2188                               i = 128;
00015e  2480              MOVS     r4,#0x80
                  |L13.352|
000160  1c68              ADDS     r0,r5,#1              ;2179
000162  b2c5              UXTB     r5,r0                 ;2179
                  |L13.356|
000164  2d80              CMP      r5,#0x80              ;2179
000166  dbf0              BLT      |L13.330|
                  |L13.360|
000168  bf00              NOP                            ;2183
                  |L13.362|
00016a  1c60              ADDS     r0,r4,#1              ;2175
00016c  b2c4              UXTB     r4,r0                 ;2175
                  |L13.366|
00016e  2c80              CMP      r4,#0x80              ;2175
000170  dbe5              BLT      |L13.318|
                  |L13.370|
;;;2189                           }
;;;2190                       }
;;;2191                   }
;;;2192               }
;;;2193           }
;;;2194           UART_PROTOCOL_TxAddData(UART_PROTOCOL_CMD_HEAD);
000172  2055              MOVS     r0,#0x55
000174  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2195           UART_PROTOCOL_TxAddData(0x03);                              // 0x03: 数据写入命令
000178  2003              MOVS     r0,#3
00017a  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2196           UART_PROTOCOL_TxAddData(0x00);                              // 临时添加数据长度
00017e  2000              MOVS     r0,#0
000180  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2197           UART_PROTOCOL_TxAddData(dut_info.currentAppSize % 0x100);   // 发送包数
000184  4999              LDR      r1,|L13.1004|
000186  f8910030          LDRB     r0,[r1,#0x30]  ; dut_info
00018a  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2198   
;;;2199           for (i = 0; i < k; i++)
00018e  2400              MOVS     r4,#0
000190  e005              B        |L13.414|
                  |L13.402|
;;;2200           {
;;;2201               UART_PROTOCOL_TxAddData(dataPacket[i]);
000192  a911              ADD      r1,sp,#0x44
000194  5d08              LDRB     r0,[r1,r4]
000196  f7fffffe          BL       UART_PROTOCOL_TxAddData
00019a  1c60              ADDS     r0,r4,#1              ;2199
00019c  b2c4              UXTB     r4,r0                 ;2199
                  |L13.414|
00019e  42b4              CMP      r4,r6                 ;2199
0001a0  dbf7              BLT      |L13.402|
;;;2202           }
;;;2203           UART_PROTOCOL_TxAddFrame(); // 调整帧格式,修改长度和添加校验
0001a2  f7fffffe          BL       UART_PROTOCOL_TxAddFrame
;;;2204           break;
0001a6  e126              B        |L13.1014|
;;;2205   
;;;2206       // 手动发送下一帧ui数据
;;;2207       case STEP_KAIYANG_UART_UPGRADE_SEND_APP_AGAIN:
;;;2208           STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_SEND_APP_WRITE);
0001a8  207e              MOVS     r0,#0x7e
0001aa  f7fffffe          BL       STATE_SwitchStep
;;;2209           dut_info.currentAppSize++;
0001ae  488f              LDR      r0,|L13.1004|
0001b0  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0001b2  1c40              ADDS     r0,r0,#1
0001b4  498d              LDR      r1,|L13.1004|
0001b6  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;2210           break;
0001b8  e11d              B        |L13.1014|
;;;2211   
;;;2212       case STEP_KAIYANG_UART_UPGRADE_APP_UP_SUCCESS:
;;;2213           STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_WAIT_FOR_ACK);
0001ba  207b              MOVS     r0,#0x7b
0001bc  f7fffffe          BL       STATE_SwitchStep
;;;2214           UART_PROTOCOL_TxAddData(UART_PROTOCOL_CMD_HEAD);
0001c0  2055              MOVS     r0,#0x55
0001c2  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2215           UART_PROTOCOL_TxAddData(0x04);
0001c6  2004              MOVS     r0,#4
0001c8  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2216           UART_PROTOCOL_TxAddData(1); // 数据长度
0001cc  2001              MOVS     r0,#1
0001ce  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2217           UART_PROTOCOL_TxAddData(0x01);
0001d2  2001              MOVS     r0,#1
0001d4  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2218           UART_PROTOCOL_TxAddFrame();
0001d8  f7fffffe          BL       UART_PROTOCOL_TxAddFrame
;;;2219           break;
0001dc  e10b              B        |L13.1014|
                  |L13.478|
;;;2220   
;;;2221       // 发送ui数据
;;;2222       case STEP_KAIYANG_UART_UPGRADE_SEND_UI_WRITE:
;;;2223           STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_WAIT_FOR_ACK);
0001de  207b              MOVS     r0,#0x7b
0001e0  f7fffffe          BL       STATE_SwitchStep
;;;2224           TIMER_ResetTimer(TIMER_ID_RECONNECTION);// 喂狗
0001e4  200a              MOVS     r0,#0xa
0001e6  f7fffffe          BL       TIMER_ResetTimer
;;;2225           SPI_FLASH_ReadArray(dataPacket, SPI_FLASH_DUT_UI_ADDEESS + (dut_info.currentUiSize) * 128, 128); // 工具读取128字节
0001ea  4880              LDR      r0,|L13.1004|
0001ec  6b40              LDR      r0,[r0,#0x34]  ; dut_info
0001ee  f44f1200          MOV      r2,#0x200000
0001f2  eb0211c0          ADD      r1,r2,r0,LSL #7
0001f6  2280              MOVS     r2,#0x80
0001f8  a811              ADD      r0,sp,#0x44
0001fa  f7fffffe          BL       SPI_FLASH_ReadArray
;;;2226           k = 128;
0001fe  2680              MOVS     r6,#0x80
;;;2227           if (dut_info.currentUiSize == dut_info.uiSize - 1) // 最后一包去0xff
000200  487a              LDR      r0,|L13.1004|
000202  6b41              LDR      r1,[r0,#0x34]  ; dut_info
000204  6a80              LDR      r0,[r0,#0x28]  ; dut_info
000206  1e40              SUBS     r0,r0,#1
000208  4281              CMP      r1,r0
00020a  d11b              BNE      |L13.580|
;;;2228           {
;;;2229               for (i = 0; i < 128; i++)
00020c  2400              MOVS     r4,#0
00020e  e017              B        |L13.576|
                  |L13.528|
;;;2230               {
;;;2231                   if (0xff == dataPacket[i])
000210  a811              ADD      r0,sp,#0x44
000212  5d00              LDRB     r0,[r0,r4]
000214  28ff              CMP      r0,#0xff
000216  d111              BNE      |L13.572|
;;;2232                   {
;;;2233                       for (j = i; j < 128; j++) // 如果后面全是0xff
000218  4625              MOV      r5,r4
00021a  e00c              B        |L13.566|
                  |L13.540|
;;;2234                       {
;;;2235                           if (0xff != dataPacket[j - 1])
00021c  1e68              SUBS     r0,r5,#1
00021e  a911              ADD      r1,sp,#0x44
000220  5c08              LDRB     r0,[r1,r0]
000222  28ff              CMP      r0,#0xff
000224  d000              BEQ      |L13.552|
;;;2236                           {
;;;2237                               break;
000226  e008              B        |L13.570|
                  |L13.552|
;;;2238                           }
;;;2239                           if (127 == j) // 后面全是0xff;
000228  2d7f              CMP      r5,#0x7f
00022a  d102              BNE      |L13.562|
;;;2240                           {
;;;2241                               k = i + 1;
00022c  1c60              ADDS     r0,r4,#1
00022e  b2c6              UXTB     r6,r0
;;;2242                               i = 128;
000230  2480              MOVS     r4,#0x80
                  |L13.562|
000232  1c68              ADDS     r0,r5,#1              ;2233
000234  b2c5              UXTB     r5,r0                 ;2233
                  |L13.566|
000236  2d80              CMP      r5,#0x80              ;2233
000238  dbf0              BLT      |L13.540|
                  |L13.570|
00023a  bf00              NOP                            ;2237
                  |L13.572|
00023c  1c60              ADDS     r0,r4,#1              ;2229
00023e  b2c4              UXTB     r4,r0                 ;2229
                  |L13.576|
000240  2c80              CMP      r4,#0x80              ;2229
000242  dbe5              BLT      |L13.528|
                  |L13.580|
;;;2243                           }
;;;2244                       }
;;;2245                   }
;;;2246               }
;;;2247           }
;;;2248           UART_PROTOCOL_TxAddData(UART_PROTOCOL_CMD_HEAD);
000244  2055              MOVS     r0,#0x55
000246  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2249           UART_PROTOCOL_TxAddData(0x03); // 03: 升级命令
00024a  2003              MOVS     r0,#3
00024c  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2250           UART_PROTOCOL_TxAddData(0x00); // 临时添加数据长度
000250  2000              MOVS     r0,#0
000252  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2251           UART_PROTOCOL_TxAddData(dut_info.currentUiSize % 0x100);
000256  4965              LDR      r1,|L13.1004|
000258  f8910034          LDRB     r0,[r1,#0x34]  ; dut_info
00025c  f7fffffe          BL       UART_PROTOCOL_TxAddData
;;;2252           for (i = 0; i < k; i++)
000260  2400              MOVS     r4,#0
000262  e005              B        |L13.624|
                  |L13.612|
;;;2253           {
;;;2254               UART_PROTOCOL_TxAddData(dataPacket[i]);
000264  a911              ADD      r1,sp,#0x44
000266  5d08              LDRB     r0,[r1,r4]
000268  f7fffffe          BL       UART_PROTOCOL_TxAddData
00026c  1c60              ADDS     r0,r4,#1              ;2252
00026e  b2c4              UXTB     r4,r0                 ;2252
                  |L13.624|
000270  42b4              CMP      r4,r6                 ;2252
000272  dbf7              BLT      |L13.612|
;;;2255           }
;;;2256           UART_PROTOCOL_TxAddFrame(); // 调整帧格式,修改长度和添加校验
000274  f7fffffe          BL       UART_PROTOCOL_TxAddFrame
;;;2257           break;
000278  e0bd              B        |L13.1014|
                  |L13.634|
;;;2258   
;;;2259       // 手动发送下一帧ui数据
;;;2260       case STEP_KAIYANG_UART_UPGRADE_SEND_UI_AGAIN:
;;;2261           STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_SEND_UI_WRITE);
00027a  2081              MOVS     r0,#0x81
00027c  f7fffffe          BL       STATE_SwitchStep
;;;2262           dut_info.currentUiSize++;
000280  485a              LDR      r0,|L13.1004|
000282  6b40              LDR      r0,[r0,#0x34]  ; dut_info
000284  1c40              ADDS     r0,r0,#1
000286  4959              LDR      r1,|L13.1004|
000288  6348              STR      r0,[r1,#0x34]  ; dut_info
;;;2263           break;
00028a  e0b4              B        |L13.1014|
                  |L13.652|
;;;2264   
;;;2265       // 设置config入口
;;;2266       case STEP_UART_SET_CONFIG_ENTRY:
;;;2267           STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_WAIT_FOR_ACK);
00028c  207b              MOVS     r0,#0x7b
00028e  f7fffffe          BL       STATE_SwitchStep
;;;2268           UART_PROTOCOL_Init();                        // 55升级协议
000292  f7fffffe          BL       UART_PROTOCOL_Init
;;;2269           UART_PROTOCOL3_Init();                       // KM5S
000296  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2270           UART_DRIVE_InitSelect(9600); // UART协议层初始化
00029a  f44f5016          MOV      r0,#0x2580
00029e  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2271           DUTCTRL_PowerOnOff(0);                       // dut断电
0002a2  2000              MOVS     r0,#0
0002a4  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2272           // 500ms发送一次配置信息
;;;2273           TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
0002a8  2001              MOVS     r0,#1
0002aa  1e81              SUBS     r1,r0,#2
0002ac  239c              MOVS     r3,#0x9c
0002ae  4a50              LDR      r2,|L13.1008|
0002b0  e9cd1000          STRD     r1,r0,[sp,#0]
0002b4  f44f71fa          MOV      r1,#0x1f4
0002b8  2002              MOVS     r0,#2
0002ba  f7fffffe          BL       TIMER_AddTask
;;;2274                         500,
;;;2275                         STATE_SwitchStep,
;;;2276                         STEP_UART_SEND_SET_CONFIG,
;;;2277                         TIMER_LOOP_FOREVER,
;;;2278                         ACTION_MODE_ADD_TO_QUEUE);
;;;2279   
;;;2280           // 添加5s的超时
;;;2281           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
0002be  2001              MOVS     r0,#1
0002c0  9000              STR      r0,[sp,#0]
0002c2  2385              MOVS     r3,#0x85
0002c4  4a4a              LDR      r2,|L13.1008|
0002c6  f44f617a          MOV      r1,#0xfa0
0002ca  9001              STR      r0,[sp,#4]
0002cc  2009              MOVS     r0,#9
0002ce  f7fffffe          BL       TIMER_AddTask
;;;2282                         4000,
;;;2283                         STATE_SwitchStep,
;;;2284                         STEP_KAIYANG_UART_UPGRADE_COMMUNICATION_TIME_OUT,
;;;2285                         1,
;;;2286                         ACTION_MODE_ADD_TO_QUEUE);
;;;2287           break;
0002d2  e090              B        |L13.1014|
                  |L13.724|
;;;2288   
;;;2289       // 发送config内容
;;;2290       case STEP_UART_SEND_SET_CONFIG:
;;;2291           STATE_SwitchStep(STEP_HUAXIN_CAN_UPGRADE_WAIT_FOR_ACK);
0002d4  2023              MOVS     r0,#0x23
0002d6  f7fffffe          BL       STATE_SwitchStep
;;;2292           SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60); // 实际只有54个字节
0002da  223c              MOVS     r2,#0x3c
0002dc  f44f11b0          MOV      r1,#0x160000
0002e0  a802              ADD      r0,sp,#8
0002e2  f7fffffe          BL       SPI_FLASH_ReadArray
;;;2293           DUTCTRL_PowerOnOff(1);                                          // dut上电
0002e6  2001              MOVS     r0,#1
0002e8  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2294           UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);              // 添加命令头
0002ec  203a              MOVS     r0,#0x3a
0002ee  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2295           UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);        // 添加设备地址
0002f2  201a              MOVS     r0,#0x1a
0002f4  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2296           UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_WRITE_CONTROL_PARAM); // 0xc0 添加命令字
0002f8  20c0              MOVS     r0,#0xc0
0002fa  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2297           UART_PROTOCOL3_TxAddData(54);                                   // 添加数据长度
0002fe  2036              MOVS     r0,#0x36
000300  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2298           for (i = 0; i < 54; i++)
000304  2400              MOVS     r4,#0
000306  e005              B        |L13.788|
                  |L13.776|
;;;2299           {
;;;2300               UART_PROTOCOL3_TxAddData(configs[i]);
000308  a902              ADD      r1,sp,#8
00030a  5d08              LDRB     r0,[r1,r4]
00030c  f7fffffe          BL       UART_PROTOCOL3_TxAddData
000310  1c60              ADDS     r0,r4,#1              ;2298
000312  b2c4              UXTB     r4,r0                 ;2298
                  |L13.788|
000314  2c36              CMP      r4,#0x36              ;2298
000316  dbf7              BLT      |L13.776|
;;;2301           }
;;;2302           UART_PROTOCOL3_TxAddFrame(); // 添加检验和与结束符，并添加至发送
000318  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2303           break;
00031c  e06b              B        |L13.1014|
                  |L13.798|
;;;2304   
;;;2305       // config设置成功
;;;2306       case STEP_UART_SET_CONFIG_SUCCESS:
;;;2307           TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止设置config定时器
00031e  2002              MOVS     r0,#2
000320  f7fffffe          BL       TIMER_KillTask
;;;2308           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);    // 停止超时定时器
000324  2009              MOVS     r0,#9
000326  f7fffffe          BL       TIMER_KillTask
;;;2309           UART_DRIVE_InitSelect(UART_DRIVE_BAUD_RATE); // UART协议层初始化
00032a  f44f30e1          MOV      r0,#0x1c200
00032e  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2310           UART_PROTOCOL_Init();                        // 55升级协议
000332  f7fffffe          BL       UART_PROTOCOL_Init
;;;2311           UART_PROTOCOL3_Init();                       // KM5S
000336  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2312   
;;;2313           dut_info.configUpFlag = FALSE;           // 标志位置false
00033a  2000              MOVS     r0,#0
00033c  492b              LDR      r1,|L13.1004|
00033e  7708              STRB     r0,[r1,#0x1c]
;;;2314           dut_info.configUpSuccesss = TRUE;
000340  2001              MOVS     r0,#1
000342  f881003d          STRB     r0,[r1,#0x3d]
;;;2315           dut_info.dutPowerOnAllow = FALSE;
000346  2000              MOVS     r0,#0
000348  f881003c          STRB     r0,[r1,#0x3c]
;;;2316           STATE_EnterState(STATE_STANDBY);
00034c  2001              MOVS     r0,#1
00034e  f7fffffe          BL       STATE_EnterState
;;;2317           break;
000352  e050              B        |L13.1014|
                  |L13.852|
;;;2318   
;;;2319       // 升级项结束
;;;2320       case STEP_KAIYANG_UART_UPGRADE_ITEM_FINISH:
;;;2321           STATE_SwitchStep(STEP_KAIYANG_UART_UPGRADE_WAIT_FOR_ACK);
000354  207b              MOVS     r0,#0x7b
000356  f7fffffe          BL       STATE_SwitchStep
;;;2322           if (dut_info.appUpFlag || dut_info.uiUpFlag)
00035a  4824              LDR      r0,|L13.1004|
00035c  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00035e  b910              CBNZ     r0,|L13.870|
000360  4822              LDR      r0,|L13.1004|
000362  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000364  b168              CBZ      r0,|L13.898|
                  |L13.870|
;;;2323           {
;;;2324               DUTCTRL_PowerOnOff(0);                 // 仪表断电
000366  2000              MOVS     r0,#0
000368  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2325               TIMER_AddTask(TIMER_ID_STATE_CONTROL, // 500ms后进入入口状态
00036c  2001              MOVS     r0,#1
00036e  9000              STR      r0,[sp,#0]
000370  237a              MOVS     r3,#0x7a
000372  4a1f              LDR      r2,|L13.1008|
000374  f44f71fa          MOV      r1,#0x1f4
000378  9001              STR      r0,[sp,#4]
00037a  2000              MOVS     r0,#0
00037c  f7fffffe          BL       TIMER_AddTask
000380  e00f              B        |L13.930|
                  |L13.898|
;;;2326                             500,
;;;2327                             STATE_SwitchStep,
;;;2328                             STEP_KAIYANG_UART_UPGRADE_ENTRY,
;;;2329                             1,
;;;2330                             ACTION_MODE_ADD_TO_QUEUE);
;;;2331           }
;;;2332           else if (dut_info.configUpFlag)
000382  481a              LDR      r0,|L13.1004|
000384  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000386  b118              CBZ      r0,|L13.912|
;;;2333           {
;;;2334               STATE_SwitchStep(STEP_UART_SET_CONFIG_ENTRY);
000388  209a              MOVS     r0,#0x9a
00038a  f7fffffe          BL       STATE_SwitchStep
00038e  e008              B        |L13.930|
                  |L13.912|
;;;2335           }
;;;2336           else
;;;2337           {
;;;2338               // 没有升级项断电
;;;2339               STATE_EnterState(STATE_STANDBY);
000390  2001              MOVS     r0,#1
000392  f7fffffe          BL       STATE_EnterState
;;;2340               TIMER_KillTask(TIMER_ID_RECONNECTION);
000396  200a              MOVS     r0,#0xa
000398  f7fffffe          BL       TIMER_KillTask
;;;2341               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00039c  2009              MOVS     r0,#9
00039e  f7fffffe          BL       TIMER_KillTask
                  |L13.930|
;;;2342           }
;;;2343           break;
0003a2  e028              B        |L13.1014|
                  |L13.932|
;;;2344   
;;;2345   
;;;2346       // 超时处理
;;;2347       case STEP_KAIYANG_UART_UPGRADE_COMMUNICATION_TIME_OUT:
;;;2348           if (dut_info.appUpFlag)
0003a4  4811              LDR      r0,|L13.1004|
0003a6  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
0003a8  b120              CBZ      r0,|L13.948|
;;;2349           {
;;;2350               dut_info.appUpFaile = TRUE;
0003aa  2001              MOVS     r0,#1
0003ac  490f              LDR      r1,|L13.1004|
0003ae  f8810039          STRB     r0,[r1,#0x39]
0003b2  e00e              B        |L13.978|
                  |L13.948|
;;;2351           }
;;;2352           else if (dut_info.uiUpFlag)
0003b4  480d              LDR      r0,|L13.1004|
0003b6  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
0003b8  b120              CBZ      r0,|L13.964|
;;;2353           {
;;;2354               dut_info.uiUpFaile = TRUE; // ui升级失败
0003ba  2001              MOVS     r0,#1
0003bc  490b              LDR      r1,|L13.1004|
0003be  f881003a          STRB     r0,[r1,#0x3a]
0003c2  e006              B        |L13.978|
                  |L13.964|
;;;2355           }
;;;2356           else if (dut_info.configUpFlag)
0003c4  4809              LDR      r0,|L13.1004|
0003c6  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
0003c8  b118              CBZ      r0,|L13.978|
;;;2357           {
;;;2358               dut_info.configUpFaile = TRUE; // config升级失败
0003ca  2001              MOVS     r0,#1
0003cc  4907              LDR      r1,|L13.1004|
0003ce  f881003b          STRB     r0,[r1,#0x3b]
                  |L13.978|
;;;2359           }
;;;2360   
;;;2361           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
0003d2  2009              MOVS     r0,#9
0003d4  f7fffffe          BL       TIMER_KillTask
;;;2362           TIMER_KillTask(TIMER_ID_RECONNECTION);
0003d8  200a              MOVS     r0,#0xa
0003da  f7fffffe          BL       TIMER_KillTask
;;;2363           STATE_EnterState(STATE_STANDBY);
0003de  2001              MOVS     r0,#1
0003e0  f7fffffe          BL       STATE_EnterState
;;;2364           break;
0003e4  e007              B        |L13.1014|
0003e6  0000              DCW      0x0000
                  |L13.1000|
                          DCD      stateCB
                  |L13.1004|
                          DCD      dut_info
                  |L13.1008|
                          DCD      STATE_SwitchStep
                  |L13.1012|
;;;2365   
;;;2366       default:
;;;2367           break;
0003f4  bf00              NOP      
                  |L13.1014|
0003f6  bf00              NOP                            ;2134
;;;2368       }
;;;2369   }
0003f8  b032              ADD      sp,sp,#0xc8
0003fa  bd70              POP      {r4-r6,pc}
;;;2370   
                          ENDP


                          AREA ||i.STEP_Process_LiMeUartUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_LiMeUartUpgrade PROC
;;;1880   // LIME的串口升级步骤
;;;1881   void STEP_Process_LiMeUartUpgrade()
000000  b500              PUSH     {lr}
;;;1882   {
000002  b09b              SUB      sp,sp,#0x6c
;;;1883       uint8 configs[100] = {0};
000004  2164              MOVS     r1,#0x64
000006  a802              ADD      r0,sp,#8
000008  f7fffffe          BL       __aeabi_memclr4
;;;1884       uint8 i;
;;;1885   
;;;1886       switch (stateCB.step)
00000c  4851              LDR      r0,|L14.340|
00000e  7880              LDRB     r0,[r0,#2]  ; stateCB
000010  288b              CMP      r0,#0x8b
000012  d044              BEQ      |L14.158|
000014  dc0b              BGT      |L14.46|
000016  2887              CMP      r0,#0x87
000018  d02e              BEQ      |L14.120|
00001a  dc03              BGT      |L14.36|
00001c  b180              CBZ      r0,|L14.64|
00001e  2886              CMP      r0,#0x86
                  |L14.32|
000020  d176              BNE      |L14.272|
000022  e00e              B        |L14.66|
                  |L14.36|
000024  2888              CMP      r0,#0x88
000026  d028              BEQ      |L14.122|
000028  288a              CMP      r0,#0x8a
00002a  d1f9              BNE      |L14.32|
00002c  e02d              B        |L14.138|
                  |L14.46|
00002e  288c              CMP      r0,#0x8c
000030  d04a              BEQ      |L14.200|
000032  288d              CMP      r0,#0x8d
000034  d05b              BEQ      |L14.238|
000036  288e              CMP      r0,#0x8e
000038  d06c              BEQ      |L14.276|
00003a  288f              CMP      r0,#0x8f
00003c  d1f0              BNE      |L14.32|
00003e  e077              B        |L14.304|
                  |L14.64|
;;;1887       {
;;;1888       case STEP_NULL: // 空步骤
;;;1889           break;
000040  e085              B        |L14.334|
                  |L14.66|
;;;1890   
;;;1891       // 入口步骤
;;;1892       case STEP_LIME_UART_UPGRADE_ENTRY:
;;;1893           STATE_SwitchStep(STEP_LIME_UART_SEG_UPGRADE_WAIT_FOR_ACK);
000042  2087              MOVS     r0,#0x87
000044  f7fffffe          BL       STATE_SwitchStep
;;;1894           UART_DRIVE_InitSelect(UART_DRIVE_BAUD_RATE); // UART协议层初始化
000048  f44f30e1          MOV      r0,#0x1c200
00004c  f7fffffe          BL       UART_DRIVE_InitSelect
;;;1895           UART_PROTOCOL_Init();                                    // 55升级协议
000050  f7fffffe          BL       UART_PROTOCOL_Init
;;;1896           UART_PROTOCOL3_Init();                                 // KM5S
000054  f7fffffe          BL       UART_PROTOCOL3_Init
;;;1897           LIME_UART_PROTOCOL_Init();
000058  f7fffffe          BL       LIME_UART_PROTOCOL_Init
;;;1898           DUTCTRL_PowerOnOff(1);                       // dut上电
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1899           // 添加超时
;;;1900           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000062  2001              MOVS     r0,#1
000064  9000              STR      r0,[sp,#0]
000066  238f              MOVS     r3,#0x8f
000068  4a3b              LDR      r2,|L14.344|
00006a  f64031b8          MOV      r1,#0xbb8
00006e  9001              STR      r0,[sp,#4]
000070  2009              MOVS     r0,#9
000072  f7fffffe          BL       TIMER_AddTask
;;;1901                         3000,
;;;1902                         STATE_SwitchStep,
;;;1903                         STEP_LIME_UART_UPGRADE_COMMUNICATION_TIME_OUT,
;;;1904                         1,
;;;1905                         ACTION_MODE_ADD_TO_QUEUE);
;;;1906           break;
000076  e06a              B        |L14.334|
                  |L14.120|
;;;1907   
;;;1908       // 等待
;;;1909       case STEP_LIME_UART_SEG_UPGRADE_WAIT_FOR_ACK:
;;;1910           break;
000078  e069              B        |L14.334|
                  |L14.122|
;;;1911   
;;;1912       // 收到eco请求，发送允许进入工程模式
;;;1913       case STEP_LIME_UART_SEG_UPGRADE_RECEIVE_DUT_ECO_REQUEST:
;;;1914           STATE_SwitchStep(STEP_LIME_UART_SEG_UPGRADE_WAIT_FOR_ACK);
00007a  2087              MOVS     r0,#0x87
00007c  f7fffffe          BL       STATE_SwitchStep
;;;1915           LIME_UART_PROTOCOL_SendCmdParamAck(LIME_UART_PROTOCOL_ECO_CMD_REQUEST, 1); // 进入工程模式
000080  2101              MOVS     r1,#1
000082  4608              MOV      r0,r1
000084  f7fffffe          BL       LIME_UART_PROTOCOL_SendCmdParamAck
;;;1916           break;
000088  e061              B        |L14.334|
                  |L14.138|
;;;1917   
;;;1918       // dut准备就绪，发送app擦除指令
;;;1919       case STEP_LIME_UART_SEG_UPGRADE_SEND_APP_EAR:
;;;1920           STATE_SwitchStep(STEP_LIME_UART_SEG_UPGRADE_WAIT_FOR_ACK);
00008a  2087              MOVS     r0,#0x87
00008c  f7fffffe          BL       STATE_SwitchStep
;;;1921           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
000090  2009              MOVS     r0,#9
000092  f7fffffe          BL       TIMER_ResetTimer
;;;1922           LIME_UART_PROTOCOL_SendCmd(LIME_UART_PROTOCOL_ECO_CMD_APP_ERASE); // 04:擦除app命令
000096  2004              MOVS     r0,#4
000098  f7fffffe          BL       LIME_UART_PROTOCOL_SendCmd
;;;1923           break;
00009c  e057              B        |L14.334|
                  |L14.158|
;;;1924   
;;;1925       // 发送第一包数据
;;;1926       case STEP_LIME_UART_SEG_UPGRADE_SEND_FIRST_APP_PACKET:
;;;1927           STATE_SwitchStep(STEP_LIME_UART_SEG_UPGRADE_WAIT_FOR_ACK);
00009e  2087              MOVS     r0,#0x87
0000a0  f7fffffe          BL       STATE_SwitchStep
;;;1928           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
0000a4  2009              MOVS     r0,#9
0000a6  f7fffffe          BL       TIMER_ResetTimer
;;;1929           dut_info.currentAppSize = 0; // 第一包数据
0000aa  2000              MOVS     r0,#0
0000ac  492b              LDR      r1,|L14.348|
0000ae  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1930           LIME_Protocol_SendOnePacket(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize);
0000b0  4608              MOV      r0,r1
0000b2  6b01              LDR      r1,[r0,#0x30]  ; dut_info
0000b4  f44f20c0          MOV      r0,#0x60000
0000b8  f7fffffe          BL       LIME_Protocol_SendOnePacket
;;;1931           dut_info.currentAppSize++; // 准备下一包数据
0000bc  4827              LDR      r0,|L14.348|
0000be  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000c0  1c40              ADDS     r0,r0,#1
0000c2  4926              LDR      r1,|L14.348|
0000c4  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1932           break;
0000c6  e042              B        |L14.334|
                  |L14.200|
;;;1933   
;;;1934       // 发送app数据包
;;;1935       case STEP_LIME_UART_SEG_UPGRADE_SEND_APP_PACKET:
;;;1936           STATE_SwitchStep(STEP_LIME_UART_SEG_UPGRADE_WAIT_FOR_ACK);
0000c8  2087              MOVS     r0,#0x87
0000ca  f7fffffe          BL       STATE_SwitchStep
;;;1937           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
0000ce  2009              MOVS     r0,#9
0000d0  f7fffffe          BL       TIMER_ResetTimer
;;;1938           LIME_Protocol_SendOnePacket(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize * 128);
0000d4  4821              LDR      r0,|L14.348|
0000d6  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000d8  01c1              LSLS     r1,r0,#7
0000da  f44f20c0          MOV      r0,#0x60000
0000de  f7fffffe          BL       LIME_Protocol_SendOnePacket
;;;1939           dut_info.currentAppSize++; // 准备下一包数据
0000e2  481e              LDR      r0,|L14.348|
0000e4  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000e6  1c40              ADDS     r0,r0,#1
0000e8  491c              LDR      r1,|L14.348|
0000ea  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1940           break;
0000ec  e02f              B        |L14.334|
                  |L14.238|
;;;1941   
;;;1942       // app升级成功
;;;1943       case STEP_LIME_UART_SEG_UPGRADE_APP_UP_SUCCESS:
;;;1944           STATE_SwitchStep(STEP_LIME_UART_SEG_UPGRADE_WAIT_FOR_ACK);
0000ee  2087              MOVS     r0,#0x87
0000f0  f7fffffe          BL       STATE_SwitchStep
;;;1945           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);    // 停止超时定时器
0000f4  2009              MOVS     r0,#9
0000f6  f7fffffe          BL       TIMER_KillTask
;;;1946           LIME_UART_PROTOCOL_SendCmdParamAck(LIME_UART_PROTOCOL_ECO_CMD_APP_WRITE_FINISH, TRUE); // 发送成功
0000fa  2101              MOVS     r1,#1
0000fc  2006              MOVS     r0,#6
0000fe  f7fffffe          BL       LIME_UART_PROTOCOL_SendCmdParamAck
;;;1947           dut_info.appUpSuccesss = TRUE;
000102  2001              MOVS     r0,#1
000104  4915              LDR      r1,|L14.348|
000106  f881003f          STRB     r0,[r1,#0x3f]
;;;1948           dut_info.appUpFlag = FALSE;
00010a  2000              MOVS     r0,#0
00010c  76c8              STRB     r0,[r1,#0x1b]
;;;1949           break;
00010e  e01e              B        |L14.334|
                  |L14.272|
000110  e01c              B        |L14.332|
000112  e7ff              B        |L14.276|
                  |L14.276|
;;;1950   
;;;1951       // 升级项升级完成，检查是否还有需要升级的项
;;;1952       case STEP_LIME_UART_SEG_UPGRADE_ITEM_FINISH:
;;;1953           STATE_SwitchStep(STEP_LIME_UART_SEG_UPGRADE_WAIT_FOR_ACK);
000114  2087              MOVS     r0,#0x87
000116  f7fffffe          BL       STATE_SwitchStep
;;;1954           LIME_UART_PROTOCOL_SendCmdParamAck(LIME_UART_PROTOCOL_ECO_CMD_FACTORY_RST, 3);      // 是仪表跳入app
00011a  2103              MOVS     r1,#3
00011c  4608              MOV      r0,r1
00011e  f7fffffe          BL       LIME_UART_PROTOCOL_SendCmdParamAck
;;;1955           dut_info.appUpFlag = FALSE;
000122  2000              MOVS     r0,#0
000124  490d              LDR      r1,|L14.348|
000126  76c8              STRB     r0,[r1,#0x1b]
;;;1956           STATE_EnterState(STATE_STANDBY);
000128  2001              MOVS     r0,#1
00012a  f7fffffe          BL       STATE_EnterState
;;;1957           break;
00012e  e00e              B        |L14.334|
                  |L14.304|
;;;1958   
;;;1959       // 超时处理
;;;1960       case STEP_LIME_UART_UPGRADE_COMMUNICATION_TIME_OUT:
;;;1961           if (dut_info.appUpFlag)
000130  480a              LDR      r0,|L14.348|
000132  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
000134  b118              CBZ      r0,|L14.318|
;;;1962           {
;;;1963               dut_info.appUpFaile = TRUE;
000136  2001              MOVS     r0,#1
000138  4908              LDR      r1,|L14.348|
00013a  f8810039          STRB     r0,[r1,#0x39]
                  |L14.318|
;;;1964           }
;;;1965           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT);
00013e  2009              MOVS     r0,#9
000140  f7fffffe          BL       TIMER_KillTask
;;;1966           STATE_EnterState(STATE_STANDBY);
000144  2001              MOVS     r0,#1
000146  f7fffffe          BL       STATE_EnterState
;;;1967           break;
00014a  e000              B        |L14.334|
                  |L14.332|
;;;1968   
;;;1969       default:
;;;1970           break;
00014c  bf00              NOP      
                  |L14.334|
00014e  bf00              NOP                            ;1889
;;;1971       }
;;;1972   }
000150  b01b              ADD      sp,sp,#0x6c
000152  bd00              POP      {pc}
;;;1973   
                          ENDP

                  |L14.340|
                          DCD      stateCB
                  |L14.344|
                          DCD      STATE_SwitchStep
                  |L14.348|
                          DCD      dut_info

                          AREA ||i.STEP_Process_MeiDiCanUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_MeiDiCanUpgrade PROC
;;;1138   // Meidi can升级，app是bin格式
;;;1139   void STEP_Process_MeiDiCanUpgrade()
000000  b51c              PUSH     {r2-r4,lr}
;;;1140   {
;;;1141       switch (stateCB.step)
000002  486a              LDR      r0,|L15.428|
000004  7880              LDRB     r0,[r0,#2]  ; stateCB
000006  2833              CMP      r0,#0x33
000008  d04a              BEQ      |L15.160|
00000a  dc0d              BGT      |L15.40|
00000c  2830              CMP      r0,#0x30
00000e  d014              BEQ      |L15.58|
000010  dc05              BGT      |L15.30|
000012  b188              CBZ      r0,|L15.56|
000014  2820              CMP      r0,#0x20
000016  d07d              BEQ      |L15.276|
000018  2821              CMP      r0,#0x21
                  |L15.26|
00001a  d17c              BNE      |L15.278|
00001c  e0bf              B        |L15.414|
                  |L15.30|
00001e  2831              CMP      r0,#0x31
000020  d025              BEQ      |L15.110|
000022  2832              CMP      r0,#0x32
000024  d1f9              BNE      |L15.26|
000026  e023              B        |L15.112|
                  |L15.40|
000028  3835              SUBS     r0,r0,#0x35
00002a  2805              CMP      r0,#5
00002c  d273              BCS      |L15.278|
00002e  e8dff000          TBB      [pc,r0]
000032  3f5f              DCB      0x3f,0x5f
000034  78869700          DCB      0x78,0x86,0x97,0x00
                  |L15.56|
;;;1142       {
;;;1143           case STEP_NULL: // 空步骤
;;;1144               break;
000038  e0b6              B        |L15.424|
                  |L15.58|
;;;1145   
;;;1146           // 通用can升级入口，dut上电和can初始化
;;;1147           case STEP_SEG_CAN_UPGRADE_ENTRY:
;;;1148               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00003a  2031              MOVS     r0,#0x31
00003c  f7fffffe          BL       STATE_SwitchStep
;;;1149               IAP_CTRL_CAN_Init(CAN_BAUD_RATE_250K);
000040  20fa              MOVS     r0,#0xfa
000042  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;1150               CAN_MD_PROTOCOL_Init(); // MeiDi升级初始化
000046  f7fffffe          BL       CAN_MD_PROTOCOL_Init
;;;1151               DUTCTRL_PowerOnOff(1);  // dut上电
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1152               dut_info.dutPowerOnAllow = FALSE;
000050  2000              MOVS     r0,#0
000052  4957              LDR      r1,|L15.432|
000054  f881003c          STRB     r0,[r1,#0x3c]
;;;1153   
;;;1154               // 添加超时
;;;1155               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000058  2001              MOVS     r0,#1
00005a  9000              STR      r0,[sp,#0]
00005c  2339              MOVS     r3,#0x39
00005e  4a55              LDR      r2,|L15.436|
000060  f2417170          MOV      r1,#0x1770
000064  9001              STR      r0,[sp,#4]
000066  2009              MOVS     r0,#9
000068  f7fffffe          BL       TIMER_AddTask
;;;1156                             6000,
;;;1157                             STATE_SwitchStep,
;;;1158                             STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;1159                             1,
;;;1160                             ACTION_MODE_ADD_TO_QUEUE);
;;;1161               break;
00006c  e09c              B        |L15.424|
                  |L15.110|
;;;1162   
;;;1163           // 等待dut应答
;;;1164           case STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK:
;;;1165               break;
00006e  e09b              B        |L15.424|
                  |L15.112|
;;;1166   
;;;1167           // 收到dut的eco请求,延时50ms后发送eco允许
;;;1168           case STEP_SEG_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST:
;;;1169               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
000070  2031              MOVS     r0,#0x31
000072  f7fffffe          BL       STATE_SwitchStep
;;;1170               // 50ms后发送eco允许
;;;1171               TIMER_AddTask(TIMER_ID_DELAY_ENTER_UP_MODE,
000076  2001              MOVS     r0,#1
000078  9000              STR      r0,[sp,#0]
00007a  2333              MOVS     r3,#0x33
00007c  4a4d              LDR      r2,|L15.436|
00007e  2132              MOVS     r1,#0x32
000080  9001              STR      r0,[sp,#4]
000082  2008              MOVS     r0,#8
000084  f7fffffe          BL       TIMER_AddTask
;;;1172                             50,
;;;1173                             STATE_SwitchStep,
;;;1174                             STEP_SEG_CAN_UPGRADE_UP_ALLOW,
;;;1175                             1,
;;;1176                             ACTION_MODE_ADD_TO_QUEUE);
;;;1177   //            // 添加1s的握手超时检测
;;;1178               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000088  2001              MOVS     r0,#1
00008a  1e81              SUBS     r1,r0,#2
00008c  2333              MOVS     r3,#0x33
00008e  4a49              LDR      r2,|L15.436|
000090  e9cd1000          STRD     r1,r0,[sp,#0]
000094  f44f71fa          MOV      r1,#0x1f4
000098  2009              MOVS     r0,#9
00009a  f7fffffe          BL       TIMER_AddTask
;;;1179                             500,
;;;1180                             STATE_SwitchStep,
;;;1181                             STEP_SEG_CAN_UPGRADE_UP_ALLOW,            // 握手超时
;;;1182                             -1,
;;;1183                             ACTION_MODE_ADD_TO_QUEUE);
;;;1184               break;
00009e  e083              B        |L15.424|
                  |L15.160|
;;;1185   
;;;1186           // 发送eco允许
;;;1187           case STEP_SEG_CAN_UPGRADE_UP_ALLOW:
;;;1188               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
0000a0  2031              MOVS     r0,#0x31
0000a2  f7fffffe          BL       STATE_SwitchStep
;;;1189               CAN_MD_PROTOCOL_SendCmdNoResult(CAN_MD_PROTOCOL_CMD_DOWN_PROJECT_APPLY_ACK); // 0x02,工程模式允
0000a6  f24a100b          MOV      r0,#0xa10b
0000aa  f7fffffe          BL       CAN_MD_PROTOCOL_SendCmdNoResult
;;;1190               break;
0000ae  e07b              B        |L15.424|
;;;1191   
;;;1192           // APP数据写入
;;;1193           case STEP_SEG_CAN_UPGRADE_APP_EAR_RESUALT:
;;;1194               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
0000b0  2031              MOVS     r0,#0x31
0000b2  f7fffffe          BL       STATE_SwitchStep
;;;1195   
;;;1196               // 发送第一帧数据
;;;1197               dut_info.currentAppSize = 0;
0000b6  2000              MOVS     r0,#0
0000b8  493d              LDR      r1,|L15.432|
0000ba  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1198               CAN_MD_PROTOCOL_SendUpDataPacket(DUT_FILE_TYPE_BIN, CAN_MD_PROTOCOL_CMD_DOWN_IAP_WRITE_FLASH, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 128);
0000bc  4608              MOV      r0,r1
0000be  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000c0  01c3              LSLS     r3,r0,#7
0000c2  f44f22c0          MOV      r2,#0x60000
0000c6  f24a3185          MOV      r1,#0xa385
0000ca  2001              MOVS     r0,#1
0000cc  f7fffffe          BL       CAN_MD_PROTOCOL_SendUpDataPacket
;;;1199               dut_info.currentAppSize++;
0000d0  4837              LDR      r0,|L15.432|
0000d2  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000d4  1c40              ADDS     r0,r0,#1
0000d6  4936              LDR      r1,|L15.432|
0000d8  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1200               
;;;1201               // 添加1s的握手超时检测
;;;1202               TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
0000da  2001              MOVS     r0,#1
0000dc  9000              STR      r0,[sp,#0]
0000de  2339              MOVS     r3,#0x39
0000e0  4a34              LDR      r2,|L15.436|
0000e2  f44f717a          MOV      r1,#0x3e8
0000e6  9001              STR      r0,[sp,#4]
0000e8  2009              MOVS     r0,#9
0000ea  f7fffffe          BL       TIMER_AddTask
;;;1203                             1000,
;;;1204                             STATE_SwitchStep,
;;;1205                             STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,            // 握手超时
;;;1206                             1,
;;;1207                             ACTION_MODE_ADD_TO_QUEUE);
;;;1208               break;
0000ee  e05b              B        |L15.424|
;;;1209   
;;;1210           // 发送app升级包
;;;1211           case STEP_SEG_CAN_UPGRADE_SEND_APP_WRITE:
;;;1212               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
0000f0  2031              MOVS     r0,#0x31
0000f2  f7fffffe          BL       STATE_SwitchStep
;;;1213               TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
0000f6  2009              MOVS     r0,#9
0000f8  f7fffffe          BL       TIMER_ResetTimer
;;;1214               CAN_MD_PROTOCOL_SendUpDataPacket(DUT_FILE_TYPE_BIN, CAN_MD_PROTOCOL_CMD_DOWN_IAP_WRITE_FLASH, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 128);
0000fc  482c              LDR      r0,|L15.432|
0000fe  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000100  01c3              LSLS     r3,r0,#7
000102  f44f22c0          MOV      r2,#0x60000
000106  f24a3185          MOV      r1,#0xa385
00010a  2001              MOVS     r0,#1
00010c  f7fffffe          BL       CAN_MD_PROTOCOL_SendUpDataPacket
;;;1215               dut_info.currentAppSize++;
000110  4827              LDR      r0,|L15.432|
000112  e001              B        |L15.280|
                  |L15.276|
000114  e03f              B        |L15.406|
                  |L15.278|
000116  e046              B        |L15.422|
                  |L15.280|
000118  6b00              LDR      r0,[r0,#0x30]  ; dut_info
00011a  1c40              ADDS     r0,r0,#1
00011c  4924              LDR      r1,|L15.432|
00011e  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1216               break;
000120  e042              B        |L15.424|
;;;1217   
;;;1218           // app升级成功
;;;1219           case STEP_SEG_CAN_UPGRADE_APP_UP_SUCCESS:
;;;1220               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
000122  2031              MOVS     r0,#0x31
000124  f7fffffe          BL       STATE_SwitchStep
;;;1221               CAN_MD_PROTOCOL_SendCmdNoResult(CAN_MD_PROTOCOL_CMD_DOWN_UPDATA_FINISH); // 0x07:升级成功
000128  f24a4001          MOV      r0,#0xa401
00012c  f7fffffe          BL       CAN_MD_PROTOCOL_SendCmdNoResult
;;;1222               dut_info.appUpSuccesss = TRUE;
000130  2001              MOVS     r0,#1
000132  491f              LDR      r1,|L15.432|
000134  f881003f          STRB     r0,[r1,#0x3f]
;;;1223               dut_info.appUpFlag = FALSE;
000138  2000              MOVS     r0,#0
00013a  76c8              STRB     r0,[r1,#0x1b]
;;;1224               break;
00013c  e034              B        |L15.424|
;;;1225   
;;;1226           // 升级项升级成功
;;;1227           case STEP_SEG_CAN_UPGRADE_ITEM_FINISH:
;;;1228               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00013e  2031              MOVS     r0,#0x31
000140  f7fffffe          BL       STATE_SwitchStep
;;;1229   
;;;1230               // 选择升级
;;;1231               if (dut_info.configUpFlag)
000144  481a              LDR      r0,|L15.432|
000146  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000148  b118              CBZ      r0,|L15.338|
;;;1232               {
;;;1233                   STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
00014a  204f              MOVS     r0,#0x4f
00014c  f7fffffe          BL       STATE_SwitchStep
000150  e002              B        |L15.344|
                  |L15.338|
;;;1234               }
;;;1235               else
;;;1236               {
;;;1237                   STATE_EnterState(STATE_STANDBY); // 没有升级项断电
000152  2001              MOVS     r0,#1
000154  f7fffffe          BL       STATE_EnterState
                  |L15.344|
;;;1238               }
;;;1239               TIMER_KillTask(TIMER_ID_DUT_TIMEOUT); // 停止超时计时器
000158  2009              MOVS     r0,#9
00015a  f7fffffe          BL       TIMER_KillTask
;;;1240               break;
00015e  e023              B        |L15.424|
;;;1241   
;;;1242           // 握手超时
;;;1243           case STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT:
;;;1244               if (dut_info.appUpFlag)
000160  4813              LDR      r0,|L15.432|
000162  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
000164  b120              CBZ      r0,|L15.368|
;;;1245               {
;;;1246                   dut_info.appUpFaile = TRUE;
000166  2001              MOVS     r0,#1
000168  4911              LDR      r1,|L15.432|
00016a  f8810039          STRB     r0,[r1,#0x39]
00016e  e00e              B        |L15.398|
                  |L15.368|
;;;1247               }
;;;1248               else if (dut_info.uiUpFlag)
000170  480f              LDR      r0,|L15.432|
000172  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000174  b120              CBZ      r0,|L15.384|
;;;1249               {
;;;1250                   dut_info.uiUpFaile = TRUE; // ui升级失败
000176  2001              MOVS     r0,#1
000178  490d              LDR      r1,|L15.432|
00017a  f881003a          STRB     r0,[r1,#0x3a]
00017e  e006              B        |L15.398|
                  |L15.384|
;;;1251               }
;;;1252               else if (dut_info.configUpFlag)
000180  480b              LDR      r0,|L15.432|
000182  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000184  b118              CBZ      r0,|L15.398|
;;;1253               {
;;;1254                   dut_info.configUpFaile = TRUE; // config升级失败
000186  2001              MOVS     r0,#1
000188  4909              LDR      r1,|L15.432|
00018a  f881003b          STRB     r0,[r1,#0x3b]
                  |L15.398|
;;;1255               }
;;;1256               STATE_EnterState(STATE_STANDBY);
00018e  2001              MOVS     r0,#1
000190  f7fffffe          BL       STATE_EnterState
;;;1257               break;
000194  e008              B        |L15.424|
                  |L15.406|
;;;1258   
;;;1259           // dut断电重新连接
;;;1260           case STEP_CM_CAN_UPGRADE_RECONNECTION:
;;;1261               STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
000196  2031              MOVS     r0,#0x31
000198  f7fffffe          BL       STATE_SwitchStep
;;;1262   
;;;1263               break;
00019c  e004              B        |L15.424|
                  |L15.414|
;;;1264   
;;;1265           // 重新连接超时
;;;1266           case STEP_CM_CAN_UPGRADE_RECONNECTION_TIME_OUT:
;;;1267               STATE_SwitchStep(STEP_NULL);
00019e  2000              MOVS     r0,#0
0001a0  f7fffffe          BL       STATE_SwitchStep
;;;1268   
;;;1269               break;
0001a4  e000              B        |L15.424|
                  |L15.422|
;;;1270   
;;;1271           default:
;;;1272               break;
0001a6  bf00              NOP      
                  |L15.424|
0001a8  bf00              NOP                            ;1144
;;;1273       }
;;;1274   }
0001aa  bd1c              POP      {r2-r4,pc}
;;;1275   
                          ENDP

                  |L15.428|
                          DCD      stateCB
                  |L15.432|
                          DCD      dut_info
                  |L15.436|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_SegCanUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_SegCanUpgrade PROC
;;;937    // 段码屏、数码管can升级，app是bin格式
;;;938    void STEP_Process_SegCanUpgrade()
000000  b51c              PUSH     {r2-r4,lr}
;;;939    {
;;;940        switch (stateCB.step)
000002  4870              LDR      r0,|L16.452|
000004  7880              LDRB     r0,[r0,#2]  ; stateCB
000006  2833              CMP      r0,#0x33
000008  d047              BEQ      |L16.154|
00000a  dc0d              BGT      |L16.40|
00000c  2830              CMP      r0,#0x30
00000e  d014              BEQ      |L16.58|
000010  dc05              BGT      |L16.30|
000012  b188              CBZ      r0,|L16.56|
000014  2820              CMP      r0,#0x20
000016  d079              BEQ      |L16.268|
000018  2821              CMP      r0,#0x21
                  |L16.26|
00001a  d178              BNE      |L16.270|
00001c  e0ca              B        |L16.436|
                  |L16.30|
00001e  2831              CMP      r0,#0x31
000020  d023              BEQ      |L16.106|
000022  2832              CMP      r0,#0x32
000024  d1f9              BNE      |L16.26|
000026  e021              B        |L16.108|
                  |L16.40|
000028  3834              SUBS     r0,r0,#0x34
00002a  2806              CMP      r0,#6
00002c  d26f              BCS      |L16.270|
00002e  e8dff000          TBB      [pc,r0]
000032  3b4c              DCB      0x3b,0x4c
000034  6f8491a2          DCB      0x6f,0x84,0x91,0xa2
                  |L16.56|
;;;941        {
;;;942        case STEP_NULL: // 空步骤
;;;943            break;
000038  e0c1              B        |L16.446|
                  |L16.58|
;;;944    
;;;945        // 通用can升级入口，dut上电和can初始化
;;;946        case STEP_SEG_CAN_UPGRADE_ENTRY:
;;;947            STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00003a  2031              MOVS     r0,#0x31
00003c  f7fffffe          BL       STATE_SwitchStep
;;;948            IAP_CTRL_CAN_Init(CAN_BAUD_RATE_125K);
000040  207d              MOVS     r0,#0x7d
000042  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;949            DUTCTRL_PowerOnOff(1); // dut上电
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;950            dut_info.dutPowerOnAllow = FALSE;
00004c  2000              MOVS     r0,#0
00004e  495e              LDR      r1,|L16.456|
000050  f881003c          STRB     r0,[r1,#0x3c]
;;;951    
;;;952            // 添加超时
;;;953            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000054  2001              MOVS     r0,#1
000056  9000              STR      r0,[sp,#0]
000058  2339              MOVS     r3,#0x39
00005a  4a5c              LDR      r2,|L16.460|
00005c  f44f61fa          MOV      r1,#0x7d0
000060  9001              STR      r0,[sp,#4]
000062  2009              MOVS     r0,#9
000064  f7fffffe          BL       TIMER_AddTask
;;;954                          2000,
;;;955                          STATE_SwitchStep,
;;;956                          STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;957                          1,
;;;958                          ACTION_MODE_ADD_TO_QUEUE);
;;;959            break;
000068  e0a9              B        |L16.446|
                  |L16.106|
;;;960    
;;;961        // 等待dut应答
;;;962        case STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK:
;;;963            break;
00006a  e0a8              B        |L16.446|
                  |L16.108|
;;;964    
;;;965        // 收到dut的eco请求,延时50ms后发送eco允许
;;;966        case STEP_SEG_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST:
;;;967            STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00006c  2031              MOVS     r0,#0x31
00006e  f7fffffe          BL       STATE_SwitchStep
;;;968            // 50ms后发送eco允许
;;;969            TIMER_AddTask(TIMER_ID_DELAY_ENTER_UP_MODE,
000072  2001              MOVS     r0,#1
000074  9000              STR      r0,[sp,#0]
000076  2333              MOVS     r3,#0x33
000078  4a54              LDR      r2,|L16.460|
00007a  2132              MOVS     r1,#0x32
00007c  9001              STR      r0,[sp,#4]
00007e  2008              MOVS     r0,#8
000080  f7fffffe          BL       TIMER_AddTask
;;;970                          50,
;;;971                          STATE_SwitchStep,
;;;972                          STEP_SEG_CAN_UPGRADE_UP_ALLOW,
;;;973                          1,
;;;974                          ACTION_MODE_ADD_TO_QUEUE);
;;;975            // 添加1s的握手超时检测
;;;976            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000084  2001              MOVS     r0,#1
000086  9000              STR      r0,[sp,#0]
000088  2339              MOVS     r3,#0x39
00008a  4a50              LDR      r2,|L16.460|
00008c  f44f717a          MOV      r1,#0x3e8
000090  9001              STR      r0,[sp,#4]
000092  2009              MOVS     r0,#9
000094  f7fffffe          BL       TIMER_AddTask
;;;977                          1000,
;;;978                          STATE_SwitchStep,
;;;979                          STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,            // 握手超时
;;;980                          1,
;;;981                          ACTION_MODE_ADD_TO_QUEUE);
;;;982            break;
000098  e091              B        |L16.446|
                  |L16.154|
;;;983    
;;;984        // 发送eco允许
;;;985        case STEP_SEG_CAN_UPGRADE_UP_ALLOW:
;;;986            STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00009a  2031              MOVS     r0,#0x31
00009c  f7fffffe          BL       STATE_SwitchStep
;;;987            IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK); // 0x02,工程模式允
0000a0  2002              MOVS     r0,#2
0000a2  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;988            break;
0000a6  e08a              B        |L16.446|
;;;989    
;;;990        // 发送app擦除指令
;;;991        case STEP_SEG_CAN_UPGRADE_SEND_APP_EAR:
;;;992            STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
0000a8  2031              MOVS     r0,#0x31
0000aa  f7fffffe          BL       STATE_SwitchStep
;;;993            IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_HUAXIN_CMD_APP_EAR); // 05:擦除app命令
0000ae  2005              MOVS     r0,#5
0000b0  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;994            // 添加8s的握手超时检测
;;;995            TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
0000b4  2001              MOVS     r0,#1
0000b6  9000              STR      r0,[sp,#0]
0000b8  2339              MOVS     r3,#0x39
0000ba  4a44              LDR      r2,|L16.460|
0000bc  f44f51fa          MOV      r1,#0x1f40
0000c0  9001              STR      r0,[sp,#4]
0000c2  2009              MOVS     r0,#9
0000c4  f7fffffe          BL       TIMER_AddTask
;;;996                          8000,
;;;997                          STATE_SwitchStep,
;;;998                          STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,            // 握手超时
;;;999                          1,
;;;1000                         ACTION_MODE_ADD_TO_QUEUE);
;;;1001           break;
0000c8  e079              B        |L16.446|
;;;1002   
;;;1003       // app擦除结果处理
;;;1004       case STEP_SEG_CAN_UPGRADE_APP_EAR_RESUALT:
;;;1005           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
0000ca  2031              MOVS     r0,#0x31
0000cc  f7fffffe          BL       STATE_SwitchStep
;;;1006   
;;;1007           // 发送第一帧数据
;;;1008           dut_info.currentAppSize = 0;
0000d0  2000              MOVS     r0,#0
0000d2  493d              LDR      r1,|L16.456|
0000d4  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1009           IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_HEX, IAP_CTRL_CAN_CMD_DOWN_IAP_WRITE_FLASH, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 116);
0000d6  4608              MOV      r0,r1
0000d8  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000da  2174              MOVS     r1,#0x74
0000dc  fb00f301          MUL      r3,r0,r1
0000e0  f44f22c0          MOV      r2,#0x60000
0000e4  2126              MOVS     r1,#0x26
0000e6  2005              MOVS     r0,#5
0000e8  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
;;;1010           dut_info.currentAppSize++;
0000ec  4836              LDR      r0,|L16.456|
0000ee  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000f0  1c40              ADDS     r0,r0,#1
0000f2  4935              LDR      r1,|L16.456|
0000f4  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1011           // 添加1s的握手超时检测
;;;1012           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
0000f6  2001              MOVS     r0,#1
0000f8  9000              STR      r0,[sp,#0]
0000fa  2339              MOVS     r3,#0x39
0000fc  4a33              LDR      r2,|L16.460|
0000fe  f44f717a          MOV      r1,#0x3e8
000102  9001              STR      r0,[sp,#4]
000104  2009              MOVS     r0,#9
000106  f7fffffe          BL       TIMER_AddTask
;;;1013                         1000,
;;;1014                         STATE_SwitchStep,
;;;1015                         STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,            // 握手超时
;;;1016                         1,
;;;1017                         ACTION_MODE_ADD_TO_QUEUE);
;;;1018           break;
00010a  e058              B        |L16.446|
                  |L16.268|
00010c  e04e              B        |L16.428|
                  |L16.270|
00010e  e055              B        |L16.444|
;;;1019   
;;;1020       // 发送app升级包
;;;1021       case STEP_SEG_CAN_UPGRADE_SEND_APP_WRITE:
;;;1022           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
000110  2031              MOVS     r0,#0x31
000112  f7fffffe          BL       STATE_SwitchStep
;;;1023           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
000116  2009              MOVS     r0,#9
000118  f7fffffe          BL       TIMER_ResetTimer
;;;1024           IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_BIN, IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 128);
00011c  482a              LDR      r0,|L16.456|
00011e  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000120  01c3              LSLS     r3,r0,#7
000122  f44f22c0          MOV      r2,#0x60000
000126  2106              MOVS     r1,#6
000128  2001              MOVS     r0,#1
00012a  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
;;;1025           dut_info.currentAppSize++;
00012e  4826              LDR      r0,|L16.456|
000130  6b00              LDR      r0,[r0,#0x30]  ; dut_info
000132  1c40              ADDS     r0,r0,#1
000134  4924              LDR      r1,|L16.456|
000136  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1026           break;
000138  e041              B        |L16.446|
;;;1027   
;;;1028       // app升级成功
;;;1029       case STEP_SEG_CAN_UPGRADE_APP_UP_SUCCESS:
;;;1030           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00013a  2031              MOVS     r0,#0x31
00013c  f7fffffe          BL       STATE_SwitchStep
;;;1031           IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP_COMPLETE); // 0x07:升级成功
000140  2007              MOVS     r0,#7
000142  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;1032           dut_info.appUpSuccesss = TRUE;
000146  2001              MOVS     r0,#1
000148  491f              LDR      r1,|L16.456|
00014a  f881003f          STRB     r0,[r1,#0x3f]
;;;1033           dut_info.appUpFlag = FALSE;
00014e  2000              MOVS     r0,#0
000150  76c8              STRB     r0,[r1,#0x1b]
;;;1034           break;
000152  e034              B        |L16.446|
;;;1035   
;;;1036       // 设置config入口
;;;1037       //  case STEP_CAN_SET_CONFIG_ENTRY:
;;;1038       //      STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
;;;1039       //      dut_info.dutPowerOnAllow = TRUE; // 允许开机
;;;1040       //      IAP_CTRL_CAN_Init(CAN_BAUD_RATE_250K);
;;;1041       //      DUTCTRL_PowerOnOff(0);
;;;1042       //      addTimeOutTimer(5000); // 设置config时间：5s
;;;1043       //      TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
;;;1044       //                    500,
;;;1045       //                    STATE_SwitchStep,
;;;1046       //                    STEP_CAN_SEND_SET_CONFIG,
;;;1047       //                    TIMER_LOOP_FOREVER,
;;;1048       //                    ACTION_MODE_ADD_TO_QUEUE);
;;;1049       //      break;
;;;1050   
;;;1051       //  // 发送config内容
;;;1052       //  case STEP_CAN_SEND_SET_CONFIG:
;;;1053       //      STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
;;;1054       //      SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60); // 实际只有54个字节
;;;1055       //      DUTCTRL_PowerOnOff(1);                                          // dut上电
;;;1056       //      /* 发送协议切换命令 */
;;;1057       //      CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);        // 添加命令头
;;;1058       //      CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR); // 添加设备地址
;;;1059       //      CAN_PROTOCOL1_TxAddData(0xab);                          // 0xab：协议切换
;;;1060       //      CAN_PROTOCOL1_TxAddData(0);                             // 添加数据长度
;;;1061       //      CAN_PROTOCOL1_TxAddData(0x01);
;;;1062       //      CAN_PROTOCOL1_TxAddFrame(); // 添加检验和与结束符，并添加至发送
;;;1063   
;;;1064       //      /* 发送配置信息 */
;;;1065       //      CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_HEAD);                // 添加命令头
;;;1066       //      CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_DEVICE_ADDR);         // 添加设备地址
;;;1067       //      CAN_PROTOCOL1_TxAddData(CAN_PROTOCOL1_CMD_WRITE_CONTROL_PARAM); // 0xc0 添加命令字
;;;1068       //      CAN_PROTOCOL1_TxAddData(54);                                    // 添加数据长度
;;;1069       //      for (i = 0; i < 54; i++)
;;;1070       //      {
;;;1071       //          CAN_PROTOCOL1_TxAddData(configs[i]);
;;;1072       //      }
;;;1073       //      CAN_PROTOCOL1_TxAddFrame(); // 添加检验和与结束符，并添加至发送
;;;1074       //      break;
;;;1075   
;;;1076       //  // config设置成功
;;;1077       //  case STEP_CAN_SET_CONFIG_SUCCESS:
;;;1078       //      STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_ITEM_FINISH);
;;;1079       //      TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止设置config定时器
;;;1080   
;;;1081       //      IAP_CTRL_CAN_Init(CAN_BAUD_RATE_125K); // 设置波特率
;;;1082       //      dut_info.configUpFlag = FALSE;         // 标志位置false
;;;1083       //      DUTCTRL_PowerOnOff(0);                 // dut断电
;;;1084       //      dut_info.configUpSuccesss = TRUE;
;;;1085       //      dut_info.dutPowerOnAllow = FALSE;
;;;1086       //      break;
;;;1087   
;;;1088       // 升级项升级成功
;;;1089       case STEP_SEG_CAN_UPGRADE_ITEM_FINISH:
;;;1090           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
000154  2031              MOVS     r0,#0x31
000156  f7fffffe          BL       STATE_SwitchStep
;;;1091   
;;;1092           // 选择升级
;;;1093           if (dut_info.configUpFlag)
00015a  481b              LDR      r0,|L16.456|
00015c  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
00015e  b118              CBZ      r0,|L16.360|
;;;1094           {
;;;1095               STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
000160  204f              MOVS     r0,#0x4f
000162  f7fffffe          BL       STATE_SwitchStep
000166  e002              B        |L16.366|
                  |L16.360|
;;;1096           }
;;;1097           else
;;;1098           {
;;;1099               STATE_EnterState(STATE_STANDBY); // 没有升级项断电
000168  2001              MOVS     r0,#1
00016a  f7fffffe          BL       STATE_EnterState
                  |L16.366|
;;;1100           }
;;;1101           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT); // 停止超时计时器
00016e  2009              MOVS     r0,#9
000170  f7fffffe          BL       TIMER_KillTask
;;;1102           break;
000174  e023              B        |L16.446|
;;;1103   
;;;1104       // 握手超时
;;;1105       case STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT:
;;;1106           if (dut_info.appUpFlag)
000176  4814              LDR      r0,|L16.456|
000178  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
00017a  b120              CBZ      r0,|L16.390|
;;;1107           {
;;;1108               dut_info.appUpFaile = TRUE;
00017c  2001              MOVS     r0,#1
00017e  4912              LDR      r1,|L16.456|
000180  f8810039          STRB     r0,[r1,#0x39]
000184  e00e              B        |L16.420|
                  |L16.390|
;;;1109           }
;;;1110           else if (dut_info.uiUpFlag)
000186  4810              LDR      r0,|L16.456|
000188  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
00018a  b120              CBZ      r0,|L16.406|
;;;1111           {
;;;1112               dut_info.uiUpFaile = TRUE; // ui升级失败
00018c  2001              MOVS     r0,#1
00018e  490e              LDR      r1,|L16.456|
000190  f881003a          STRB     r0,[r1,#0x3a]
000194  e006              B        |L16.420|
                  |L16.406|
;;;1113           }
;;;1114           else if (dut_info.configUpFlag)
000196  480c              LDR      r0,|L16.456|
000198  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
00019a  b118              CBZ      r0,|L16.420|
;;;1115           {
;;;1116               dut_info.configUpFaile = TRUE; // config升级失败
00019c  2001              MOVS     r0,#1
00019e  490a              LDR      r1,|L16.456|
0001a0  f881003b          STRB     r0,[r1,#0x3b]
                  |L16.420|
;;;1117           }
;;;1118           STATE_EnterState(STATE_STANDBY);
0001a4  2001              MOVS     r0,#1
0001a6  f7fffffe          BL       STATE_EnterState
;;;1119           break;
0001aa  e008              B        |L16.446|
                  |L16.428|
;;;1120   
;;;1121       // dut断电重新连接
;;;1122       case STEP_CM_CAN_UPGRADE_RECONNECTION:
;;;1123           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
0001ac  2031              MOVS     r0,#0x31
0001ae  f7fffffe          BL       STATE_SwitchStep
;;;1124   
;;;1125           break;
0001b2  e004              B        |L16.446|
                  |L16.436|
;;;1126   
;;;1127       // 重新连接超时
;;;1128       case STEP_CM_CAN_UPGRADE_RECONNECTION_TIME_OUT:
;;;1129           STATE_SwitchStep(STEP_NULL);
0001b4  2000              MOVS     r0,#0
0001b6  f7fffffe          BL       STATE_SwitchStep
;;;1130   
;;;1131           break;
0001ba  e000              B        |L16.446|
                  |L16.444|
;;;1132   
;;;1133       default:
;;;1134           break;
0001bc  bf00              NOP      
                  |L16.446|
0001be  bf00              NOP                            ;943
;;;1135       }
;;;1136   }
0001c0  bd1c              POP      {r2-r4,pc}
;;;1137   
                          ENDP

0001c2  0000              DCW      0x0000
                  |L16.452|
                          DCD      stateCB
                  |L16.456|
                          DCD      dut_info
                  |L16.460|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_SegUartUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_SegUartUpgrade PROC
;;;1974   // 数码管、段码屏的串口升级步骤
;;;1975   void STEP_Process_SegUartUpgrade()
000000  b510              PUSH     {r4,lr}
;;;1976   {
000002  b09c              SUB      sp,sp,#0x70
;;;1977       uint8 configs[100] = {0};
000004  2164              MOVS     r1,#0x64
000006  a803              ADD      r0,sp,#0xc
000008  f7fffffe          BL       __aeabi_memclr4
;;;1978       uint8 i;
;;;1979   
;;;1980       switch (stateCB.step)
00000c  4878              LDR      r0,|L17.496|
00000e  7880              LDRB     r0,[r0,#2]  ; stateCB
000010  2877              CMP      r0,#0x77
000012  d04e              BEQ      |L17.178|
000014  dc0d              BGT      |L17.50|
000016  2874              CMP      r0,#0x74
000018  d029              BEQ      |L17.110|
00001a  dc05              BGT      |L17.40|
00001c  b1b0              CBZ      r0,|L17.76|
00001e  2871              CMP      r0,#0x71
000020  d015              BEQ      |L17.78|
000022  2872              CMP      r0,#0x72
                  |L17.36|
000024  d17a              BNE      |L17.284|
000026  e021              B        |L17.108|
                  |L17.40|
000028  2875              CMP      r0,#0x75
00002a  d028              BEQ      |L17.126|
00002c  2876              CMP      r0,#0x76
00002e  d1f9              BNE      |L17.36|
000030  e02d              B        |L17.142|
                  |L17.50|
000032  289a              CMP      r0,#0x9a
000034  d05b              BEQ      |L17.238|
000036  dc04              BGT      |L17.66|
000038  2878              CMP      r0,#0x78
00003a  d04a              BEQ      |L17.210|
00003c  2879              CMP      r0,#0x79
00003e  d1f1              BNE      |L17.36|
000040  e0b8              B        |L17.436|
                  |L17.66|
000042  289c              CMP      r0,#0x9c
000044  d06c              BEQ      |L17.288|
000046  289e              CMP      r0,#0x9e
000048  d1ec              BNE      |L17.36|
00004a  e09c              B        |L17.390|
                  |L17.76|
;;;1981       {
;;;1982       case STEP_NULL: // 空步骤
;;;1983           break;
00004c  e0cc              B        |L17.488|
                  |L17.78|
;;;1984   
;;;1985       // 入口步骤
;;;1986       case STEP_SEG_UART_UPGRADE_ENTRY:
;;;1987           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
00004e  2072              MOVS     r0,#0x72
000050  f7fffffe          BL       STATE_SwitchStep
;;;1988           UART_DRIVE_InitSelect(UART_DRIVE_BAUD_RATE); // UART协议层初始化
000054  f44f30e1          MOV      r0,#0x1c200
000058  f7fffffe          BL       UART_DRIVE_InitSelect
;;;1989           UART_PROTOCOL_Init();                        // 55升级协议
00005c  f7fffffe          BL       UART_PROTOCOL_Init
;;;1990           UART_PROTOCOL3_Init();                       // KM5S
000060  f7fffffe          BL       UART_PROTOCOL3_Init
;;;1991           DUTCTRL_PowerOnOff(1);                       // dut上电
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1992           break;
00006a  e0bd              B        |L17.488|
                  |L17.108|
;;;1993   
;;;1994       // 等待
;;;1995       case STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK:
;;;1996           break;
00006c  e0bc              B        |L17.488|
                  |L17.110|
;;;1997   
;;;1998       // 收到eco请求，发送允许进入工程模式
;;;1999       case STEP_CM_UART_SEG_UPGRADE_UP_ALLOW:
;;;2000           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
00006e  2072              MOVS     r0,#0x72
000070  f7fffffe          BL       STATE_SwitchStep
;;;2001           UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_PROJECT_ALLOW, TRUE); // 进入工程模式
000074  2101              MOVS     r1,#1
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2002           break;
00007c  e0b4              B        |L17.488|
                  |L17.126|
;;;2003   
;;;2004       // dut准备就绪，发送app擦除指令
;;;2005       case STEP_CM_UART_SEG_UPGRADE_SEND_APP_EAR:
;;;2006           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
00007e  2072              MOVS     r0,#0x72
000080  f7fffffe          BL       STATE_SwitchStep
;;;2007           UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_APP_EAR, TRUE); // 05:擦除app命令
000084  2101              MOVS     r1,#1
000086  2005              MOVS     r0,#5
000088  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2008           break;
00008c  e0ac              B        |L17.488|
                  |L17.142|
;;;2009   
;;;2010       // 发送第一包数据
;;;2011       case STEP_CM_UART_SEG_UPGRADE_SEND_FIRST_APP_PACKET:
;;;2012           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
00008e  2072              MOVS     r0,#0x72
000090  f7fffffe          BL       STATE_SwitchStep
;;;2013           dut_info.currentAppSize = 0; // 第一包数据
000094  2000              MOVS     r0,#0
000096  4957              LDR      r1,|L17.500|
000098  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;2014           uartProtocol_SendOnePacket(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize);
00009a  4608              MOV      r0,r1
00009c  6b01              LDR      r1,[r0,#0x30]  ; dut_info
00009e  f44f20c0          MOV      r0,#0x60000
0000a2  f7fffffe          BL       uartProtocol_SendOnePacket
;;;2015           dut_info.currentAppSize++; // 准备下一包数据
0000a6  4853              LDR      r0,|L17.500|
0000a8  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000aa  1c40              ADDS     r0,r0,#1
0000ac  4951              LDR      r1,|L17.500|
0000ae  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;2016   
;;;2017           break;
0000b0  e09a              B        |L17.488|
                  |L17.178|
;;;2018   
;;;2019       // 发送app数据包
;;;2020       case STEP_CM_UART_SEG_UPGRADE_SEND_APP_PACKET:
;;;2021           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
0000b2  2072              MOVS     r0,#0x72
0000b4  f7fffffe          BL       STATE_SwitchStep
;;;2022           uartProtocol_SendOnePacket(SPI_FLASH_DUT_APP_ADDEESS, dut_info.currentAppSize * 128);
0000b8  484e              LDR      r0,|L17.500|
0000ba  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000bc  01c1              LSLS     r1,r0,#7
0000be  f44f20c0          MOV      r0,#0x60000
0000c2  f7fffffe          BL       uartProtocol_SendOnePacket
;;;2023           dut_info.currentAppSize++; // 准备下一包数据
0000c6  484b              LDR      r0,|L17.500|
0000c8  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000ca  1c40              ADDS     r0,r0,#1
0000cc  4949              LDR      r1,|L17.500|
0000ce  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;2024           break;
0000d0  e08a              B        |L17.488|
                  |L17.210|
;;;2025   
;;;2026       // app升级成功
;;;2027       case STEP_CM_UART_SEG_UPGRADE_APP_UP_SUCCESS:
;;;2028           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
0000d2  2072              MOVS     r0,#0x72
0000d4  f7fffffe          BL       STATE_SwitchStep
;;;2029           UART_PROTOCOL_SendCmdParamAck(UART_CMD_UP_APP_UP_OVER, TRUE); // 发送成功
0000d8  2101              MOVS     r1,#1
0000da  2007              MOVS     r0,#7
0000dc  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2030           dut_info.appUpSuccesss = TRUE;
0000e0  2001              MOVS     r0,#1
0000e2  4944              LDR      r1,|L17.500|
0000e4  f881003f          STRB     r0,[r1,#0x3f]
;;;2031           dut_info.appUpFlag = FALSE;
0000e8  2000              MOVS     r0,#0
0000ea  76c8              STRB     r0,[r1,#0x1b]
;;;2032           break;
0000ec  e07c              B        |L17.488|
                  |L17.238|
;;;2033   
;;;2034       // 升级config入口
;;;2035       case STEP_UART_SET_CONFIG_ENTRY:
;;;2036           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
0000ee  2072              MOVS     r0,#0x72
0000f0  f7fffffe          BL       STATE_SwitchStep
;;;2037           UART_DRIVE_InitSelect(9600); // UART协议层初始化
0000f4  f44f5016          MOV      r0,#0x2580
0000f8  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2038           UART_PROTOCOL_Init();        // 55升级协议
0000fc  f7fffffe          BL       UART_PROTOCOL_Init
;;;2039           UART_PROTOCOL3_Init();       // KM5S
000100  f7fffffe          BL       UART_PROTOCOL3_Init
;;;2040           TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
000104  2001              MOVS     r0,#1
000106  1e81              SUBS     r1,r0,#2
000108  239c              MOVS     r3,#0x9c
00010a  4a3b              LDR      r2,|L17.504|
00010c  e9cd1000          STRD     r1,r0,[sp,#0]
000110  f44f71fa          MOV      r1,#0x1f4
000114  2002              MOVS     r0,#2
000116  f7fffffe          BL       TIMER_AddTask
;;;2041                         500,
;;;2042                         STATE_SwitchStep,
;;;2043                         STEP_UART_SEND_SET_CONFIG,
;;;2044                         TIMER_LOOP_FOREVER,
;;;2045                         ACTION_MODE_ADD_TO_QUEUE);
;;;2046   
;;;2047           break;
00011a  e065              B        |L17.488|
                  |L17.284|
00011c  e063              B        |L17.486|
00011e  e7ff              B        |L17.288|
                  |L17.288|
;;;2048   
;;;2049       // 发送config升级包
;;;2050       case STEP_UART_SEND_SET_CONFIG:
;;;2051           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
000120  2072              MOVS     r0,#0x72
000122  f7fffffe          BL       STATE_SwitchStep
;;;2052           /*发送协议切换命令*/
;;;2053           UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);       // 发送协议切换命令
000126  203a              MOVS     r0,#0x3a
000128  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2054           UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR); // 添加设备地址
00012c  201a              MOVS     r0,#0x1a
00012e  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2055           UART_PROTOCOL3_TxAddData(0xAB);                          // 0xAB：协议切换
000132  20ab              MOVS     r0,#0xab
000134  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2056           UART_PROTOCOL3_TxAddData(0);                             // 添加数据长度
000138  2000              MOVS     r0,#0
00013a  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2057           UART_PROTOCOL3_TxAddData(01);
00013e  2001              MOVS     r0,#1
000140  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2058           UART_PROTOCOL3_TxAddFrame(); // 添加检验和与结束符，并添加至发送
000144  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2059   
;;;2060           /*发送dut配置信息*/
;;;2061           SPI_FLASH_ReadArray(configs, SPI_FLASH_DUT_CONFIG_ADDEESS, 60);  // 实际只有54个字节
000148  223c              MOVS     r2,#0x3c
00014a  f44f11b0          MOV      r1,#0x160000
00014e  a803              ADD      r0,sp,#0xc
000150  f7fffffe          BL       SPI_FLASH_ReadArray
;;;2062           UART_PROTOCOL3_TxAddData(UART_PROTOCOL3_CMD_HEAD);               // 添加命令头
000154  203a              MOVS     r0,#0x3a
000156  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2063           UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_DEVICE_ADDR);         // 添加设备地址
00015a  201a              MOVS     r0,#0x1a
00015c  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2064           UART_PROTOCOL3_TxAddData(UART_PROTOCOL_CMD_WRITE_CONTROL_PARAM); // 0xc0 添加命令字
000160  20c0              MOVS     r0,#0xc0
000162  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2065           UART_PROTOCOL3_TxAddData(54);                                    // 添加数据长度
000166  2036              MOVS     r0,#0x36
000168  f7fffffe          BL       UART_PROTOCOL3_TxAddData
;;;2066           // UART_PROTOCOL3_TxAddData(1);//背光亮度1，看现象
;;;2067           for (i = 0; i < 54; i++)
00016c  2400              MOVS     r4,#0
00016e  e005              B        |L17.380|
                  |L17.368|
;;;2068           {
;;;2069               UART_PROTOCOL3_TxAddData(configs[i]); // 写入结果
000170  a903              ADD      r1,sp,#0xc
000172  5d08              LDRB     r0,[r1,r4]
000174  f7fffffe          BL       UART_PROTOCOL3_TxAddData
000178  1c60              ADDS     r0,r4,#1              ;2067
00017a  b2c4              UXTB     r4,r0                 ;2067
                  |L17.380|
00017c  2c36              CMP      r4,#0x36              ;2067
00017e  dbf7              BLT      |L17.368|
;;;2070           }
;;;2071           UART_PROTOCOL3_TxAddFrame(); // 添加检验和与结束符，并添加至发送
000180  f7fffffe          BL       UART_PROTOCOL3_TxAddFrame
;;;2072           break;
000184  e030              B        |L17.488|
                  |L17.390|
;;;2073   
;;;2074       // 升级config完成
;;;2075       case STEP_UART_SET_CONFIG_SUCCESS:
;;;2076           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
000186  2072              MOVS     r0,#0x72
000188  f7fffffe          BL       STATE_SwitchStep
;;;2077           TIMER_KillTask(TIMER_ID_SET_DUT_CONFIG); // 停止定时器
00018c  2002              MOVS     r0,#2
00018e  f7fffffe          BL       TIMER_KillTask
;;;2078           UART_DRIVE_InitSelect(115200);           // 设置波特率
000192  f44f30e1          MOV      r0,#0x1c200
000196  f7fffffe          BL       UART_DRIVE_InitSelect
;;;2079           dut_info.configUpFlag = FALSE;           // 标志位置false
00019a  2000              MOVS     r0,#0
00019c  4915              LDR      r1,|L17.500|
00019e  7708              STRB     r0,[r1,#0x1c]
;;;2080           DUTCTRL_PowerOnOff(0);                   // 仪表断电
0001a0  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;2081           dut_info.configUpSuccesss = TRUE;
0001a4  2001              MOVS     r0,#1
0001a6  4913              LDR      r1,|L17.500|
0001a8  f881003d          STRB     r0,[r1,#0x3d]
;;;2082           dut_info.dutPowerOnAllow = FALSE;
0001ac  2000              MOVS     r0,#0
0001ae  f881003c          STRB     r0,[r1,#0x3c]
;;;2083           break;
0001b2  e019              B        |L17.488|
                  |L17.436|
;;;2084   
;;;2085       // 升级项升级完成，检查是否还有需要升级的项
;;;2086       case STEP_CM_UART_SEG_UPGRADE_ITEM_FINISH:
;;;2087           STATE_SwitchStep(STEP_CM_UART_SEG_UPGRADE_WAIT_FOR_ACK);
0001b4  2072              MOVS     r0,#0x72
0001b6  f7fffffe          BL       STATE_SwitchStep
;;;2088           if (dut_info.configUpFlag)
0001ba  480e              LDR      r0,|L17.500|
0001bc  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
0001be  b170              CBZ      r0,|L17.478|
;;;2089           {
;;;2090               UART_PROTOCOL_SendCmdParamAck(UART_ECO_CMD_ECO_JUMP_APP, TRUE); // 是仪表跳入app
0001c0  2101              MOVS     r1,#1
0001c2  2004              MOVS     r0,#4
0001c4  f7fffffe          BL       UART_PROTOCOL_SendCmdParamAck
;;;2091               // 500ms后（等待仪表开机）开始升级config
;;;2092               TIMER_AddTask(TIMER_ID_SET_DUT_CONFIG,
0001c8  2001              MOVS     r0,#1
0001ca  9000              STR      r0,[sp,#0]
0001cc  239a              MOVS     r3,#0x9a
0001ce  4a0a              LDR      r2,|L17.504|
0001d0  f44f71fa          MOV      r1,#0x1f4
0001d4  9001              STR      r0,[sp,#4]
0001d6  2002              MOVS     r0,#2
0001d8  f7fffffe          BL       TIMER_AddTask
0001dc  e002              B        |L17.484|
                  |L17.478|
;;;2093                             500,
;;;2094                             STATE_SwitchStep,
;;;2095                             STEP_UART_SET_CONFIG_ENTRY,
;;;2096                             1,
;;;2097                             ACTION_MODE_ADD_TO_QUEUE);
;;;2098           }
;;;2099           else
;;;2100           {
;;;2101               // 没有升级项断电
;;;2102               STATE_EnterState(STATE_STANDBY);
0001de  2001              MOVS     r0,#1
0001e0  f7fffffe          BL       STATE_EnterState
                  |L17.484|
;;;2103           }
;;;2104           break;
0001e4  e000              B        |L17.488|
                  |L17.486|
;;;2105   
;;;2106       default:
;;;2107           break;
0001e6  bf00              NOP      
                  |L17.488|
0001e8  bf00              NOP                            ;1983
;;;2108       }
;;;2109   }
0001ea  b01c              ADD      sp,sp,#0x70
0001ec  bd10              POP      {r4,pc}
;;;2110   
                          ENDP

0001ee  0000              DCW      0x0000
                  |L17.496|
                          DCD      stateCB
                  |L17.500|
                          DCD      dut_info
                  |L17.504|
                          DCD      STATE_SwitchStep

                          AREA ||i.STEP_Process_Sparrow_SegCanUpgrade||, CODE, READONLY, ALIGN=2

                  STEP_Process_Sparrow_SegCanUpgrade PROC
;;;1276   // Sparrow can升级，app是bin格式
;;;1277   void STEP_Process_Sparrow_SegCanUpgrade()
000000  b51c              PUSH     {r2-r4,lr}
;;;1278   {
;;;1279       switch (stateCB.step)
000002  486f              LDR      r0,|L18.448|
000004  7880              LDRB     r0,[r0,#2]  ; stateCB
000006  2833              CMP      r0,#0x33
000008  d047              BEQ      |L18.154|
00000a  dc0d              BGT      |L18.40|
00000c  2830              CMP      r0,#0x30
00000e  d014              BEQ      |L18.58|
000010  dc05              BGT      |L18.30|
000012  b188              CBZ      r0,|L18.56|
000014  2820              CMP      r0,#0x20
000016  d077              BEQ      |L18.264|
000018  2821              CMP      r0,#0x21
                  |L18.26|
00001a  d176              BNE      |L18.266|
00001c  e0c8              B        |L18.432|
                  |L18.30|
00001e  2831              CMP      r0,#0x31
000020  d023              BEQ      |L18.106|
000022  2832              CMP      r0,#0x32
000024  d1f9              BNE      |L18.26|
000026  e021              B        |L18.108|
                  |L18.40|
000028  3834              SUBS     r0,r0,#0x34
00002a  2806              CMP      r0,#6
00002c  d26d              BCS      |L18.266|
00002e  e8dff000          TBB      [pc,r0]
000032  3b4c              DCB      0x3b,0x4c
000034  6d828fa0          DCB      0x6d,0x82,0x8f,0xa0
                  |L18.56|
;;;1280       {
;;;1281       case STEP_NULL: // 空步骤
;;;1282           break;
000038  e0bf              B        |L18.442|
                  |L18.58|
;;;1283   
;;;1284       // 通用can升级入口，dut上电和can初始化
;;;1285       case STEP_SEG_CAN_UPGRADE_ENTRY:
;;;1286           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00003a  2031              MOVS     r0,#0x31
00003c  f7fffffe          BL       STATE_SwitchStep
;;;1287           IAP_CTRL_CAN_Init(CAN_BAUD_RATE_250K);
000040  20fa              MOVS     r0,#0xfa
000042  f7fffffe          BL       IAP_CTRL_CAN_Init
;;;1288           DUTCTRL_PowerOnOff(1); // dut上电
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       DUTCTRL_PowerOnOff
;;;1289           dut_info.dutPowerOnAllow = FALSE;
00004c  2000              MOVS     r0,#0
00004e  495d              LDR      r1,|L18.452|
000050  f881003c          STRB     r0,[r1,#0x3c]
;;;1290   
;;;1291           // 添加超时
;;;1292           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000054  2001              MOVS     r0,#1
000056  9000              STR      r0,[sp,#0]
000058  2339              MOVS     r3,#0x39
00005a  4a5b              LDR      r2,|L18.456|
00005c  f2417170          MOV      r1,#0x1770
000060  9001              STR      r0,[sp,#4]
000062  2009              MOVS     r0,#9
000064  f7fffffe          BL       TIMER_AddTask
;;;1293                         6000,
;;;1294                         STATE_SwitchStep,
;;;1295                         STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,
;;;1296                         1,
;;;1297                         ACTION_MODE_ADD_TO_QUEUE);
;;;1298           break;
000068  e0a7              B        |L18.442|
                  |L18.106|
;;;1299   
;;;1300       // 等待dut应答
;;;1301       case STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK:
;;;1302           break;
00006a  e0a6              B        |L18.442|
                  |L18.108|
;;;1303   
;;;1304       // 收到dut的eco请求,延时50ms后发送eco允许
;;;1305       case STEP_SEG_CAN_UPGRADE_RECEIVE_DUT_ECO_REQUEST:
;;;1306           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00006c  2031              MOVS     r0,#0x31
00006e  f7fffffe          BL       STATE_SwitchStep
;;;1307           // 50ms后发送eco允许
;;;1308           TIMER_AddTask(TIMER_ID_DELAY_ENTER_UP_MODE,
000072  2001              MOVS     r0,#1
000074  9000              STR      r0,[sp,#0]
000076  2333              MOVS     r3,#0x33
000078  4a53              LDR      r2,|L18.456|
00007a  2132              MOVS     r1,#0x32
00007c  9001              STR      r0,[sp,#4]
00007e  2008              MOVS     r0,#8
000080  f7fffffe          BL       TIMER_AddTask
;;;1309                         50,
;;;1310                         STATE_SwitchStep,
;;;1311                         STEP_SEG_CAN_UPGRADE_UP_ALLOW,
;;;1312                         1,
;;;1313                         ACTION_MODE_ADD_TO_QUEUE);
;;;1314           // 添加1s的握手超时检测
;;;1315           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
000084  2001              MOVS     r0,#1
000086  9000              STR      r0,[sp,#0]
000088  2339              MOVS     r3,#0x39
00008a  4a4f              LDR      r2,|L18.456|
00008c  f44f717a          MOV      r1,#0x3e8
000090  9001              STR      r0,[sp,#4]
000092  2009              MOVS     r0,#9
000094  f7fffffe          BL       TIMER_AddTask
;;;1316                         1000,
;;;1317                         STATE_SwitchStep,
;;;1318                         STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,            // 握手超时
;;;1319                         1,
;;;1320                         ACTION_MODE_ADD_TO_QUEUE);
;;;1321           break;
000098  e08f              B        |L18.442|
                  |L18.154|
;;;1322   
;;;1323       // 发送eco允许
;;;1324       case STEP_SEG_CAN_UPGRADE_UP_ALLOW:
;;;1325           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00009a  2031              MOVS     r0,#0x31
00009c  f7fffffe          BL       STATE_SwitchStep
;;;1326           IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_CMD_DOWN_PROJECT_APPLY_ACK); // 0x02,工程模式允
0000a0  2002              MOVS     r0,#2
0000a2  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;1327           break;
0000a6  e088              B        |L18.442|
;;;1328   
;;;1329       // 发送app擦除指令
;;;1330       case STEP_SEG_CAN_UPGRADE_SEND_APP_EAR:
;;;1331           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
0000a8  2031              MOVS     r0,#0x31
0000aa  f7fffffe          BL       STATE_SwitchStep
;;;1332           IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_HUAXIN_CMD_APP_EAR); // 05:擦除app命令
0000ae  2005              MOVS     r0,#5
0000b0  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;1333           // 添加8s的握手超时检测
;;;1334           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
0000b4  2001              MOVS     r0,#1
0000b6  9000              STR      r0,[sp,#0]
0000b8  2339              MOVS     r3,#0x39
0000ba  4a43              LDR      r2,|L18.456|
0000bc  f44f51fa          MOV      r1,#0x1f40
0000c0  9001              STR      r0,[sp,#4]
0000c2  2009              MOVS     r0,#9
0000c4  f7fffffe          BL       TIMER_AddTask
;;;1335                         8000,
;;;1336                         STATE_SwitchStep,
;;;1337                         STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,            // 握手超时
;;;1338                         1,
;;;1339                         ACTION_MODE_ADD_TO_QUEUE);
;;;1340           break;
0000c8  e077              B        |L18.442|
;;;1341   
;;;1342       // app擦除结果处理
;;;1343       case STEP_SEG_CAN_UPGRADE_APP_EAR_RESUALT:
;;;1344           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
0000ca  2031              MOVS     r0,#0x31
0000cc  f7fffffe          BL       STATE_SwitchStep
;;;1345   
;;;1346           // 发送第一帧数据
;;;1347           dut_info.currentAppSize = 0;
0000d0  2000              MOVS     r0,#0
0000d2  493c              LDR      r1,|L18.452|
0000d4  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1348           IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_BIN, IAP_CTRL_CAN_CMD_DOWN_IAP_WRITE_FLASH, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 128);
0000d6  4608              MOV      r0,r1
0000d8  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000da  01c3              LSLS     r3,r0,#7
0000dc  f44f22c0          MOV      r2,#0x60000
0000e0  2126              MOVS     r1,#0x26
0000e2  2001              MOVS     r0,#1
0000e4  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
;;;1349           dut_info.currentAppSize++;
0000e8  4836              LDR      r0,|L18.452|
0000ea  6b00              LDR      r0,[r0,#0x30]  ; dut_info
0000ec  1c40              ADDS     r0,r0,#1
0000ee  4935              LDR      r1,|L18.452|
0000f0  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1350           // 添加1s的握手超时检测
;;;1351           TIMER_AddTask(TIMER_ID_DUT_TIMEOUT,
0000f2  2001              MOVS     r0,#1
0000f4  9000              STR      r0,[sp,#0]
0000f6  2339              MOVS     r3,#0x39
0000f8  4a33              LDR      r2,|L18.456|
0000fa  f44f717a          MOV      r1,#0x3e8
0000fe  9001              STR      r0,[sp,#4]
000100  2009              MOVS     r0,#9
000102  f7fffffe          BL       TIMER_AddTask
;;;1352                         1000,
;;;1353                         STATE_SwitchStep,
;;;1354                         STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT,            // 握手超时
;;;1355                         1,
;;;1356                         ACTION_MODE_ADD_TO_QUEUE);
;;;1357           break;
000106  e058              B        |L18.442|
                  |L18.264|
000108  e04e              B        |L18.424|
                  |L18.266|
00010a  e055              B        |L18.440|
;;;1358   
;;;1359       // 发送app升级包
;;;1360       case STEP_SEG_CAN_UPGRADE_SEND_APP_WRITE:
;;;1361           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
00010c  2031              MOVS     r0,#0x31
00010e  f7fffffe          BL       STATE_SwitchStep
;;;1362           TIMER_ResetTimer(TIMER_ID_DUT_TIMEOUT); // 喂狗
000112  2009              MOVS     r0,#9
000114  f7fffffe          BL       TIMER_ResetTimer
;;;1363           IAP_CTRL_CAN_SendUpDataPacket(DUT_FILE_TYPE_BIN, IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP, SPI_FLASH_DUT_APP_ADDEESS, (dut_info.currentAppSize) * 128);
000118  482a              LDR      r0,|L18.452|
00011a  6b00              LDR      r0,[r0,#0x30]  ; dut_info
00011c  01c3              LSLS     r3,r0,#7
00011e  f44f22c0          MOV      r2,#0x60000
000122  2106              MOVS     r1,#6
000124  2001              MOVS     r0,#1
000126  f7fffffe          BL       IAP_CTRL_CAN_SendUpDataPacket
;;;1364           dut_info.currentAppSize++;
00012a  4826              LDR      r0,|L18.452|
00012c  6b00              LDR      r0,[r0,#0x30]  ; dut_info
00012e  1c40              ADDS     r0,r0,#1
000130  4924              LDR      r1,|L18.452|
000132  6308              STR      r0,[r1,#0x30]  ; dut_info
;;;1365           break;
000134  e041              B        |L18.442|
;;;1366   
;;;1367       // app升级成功
;;;1368       case STEP_SEG_CAN_UPGRADE_APP_UP_SUCCESS:
;;;1369           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
000136  2031              MOVS     r0,#0x31
000138  f7fffffe          BL       STATE_SwitchStep
;;;1370           IAP_CTRL_CAN_SendCmdNoAck(IAP_CTRL_CAN_HUAXIN_CMD_WRITE_APP_COMPLETE); // 0x07:升级成功
00013c  2007              MOVS     r0,#7
00013e  f7fffffe          BL       IAP_CTRL_CAN_SendCmdNoAck
;;;1371           dut_info.appUpSuccesss = TRUE;
000142  2001              MOVS     r0,#1
000144  491f              LDR      r1,|L18.452|
000146  f881003f          STRB     r0,[r1,#0x3f]
;;;1372           dut_info.appUpFlag = FALSE;
00014a  2000              MOVS     r0,#0
00014c  76c8              STRB     r0,[r1,#0x1b]
;;;1373           break;
00014e  e034              B        |L18.442|
;;;1374   
;;;1375       // 升级项升级成功
;;;1376       case STEP_SEG_CAN_UPGRADE_ITEM_FINISH:
;;;1377           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
000150  2031              MOVS     r0,#0x31
000152  f7fffffe          BL       STATE_SwitchStep
;;;1378   
;;;1379           // 选择升级
;;;1380           if (dut_info.configUpFlag)
000156  481b              LDR      r0,|L18.452|
000158  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
00015a  b118              CBZ      r0,|L18.356|
;;;1381           {
;;;1382               STATE_SwitchStep(STEP_CAN_SET_CONFIG_ENTRY);
00015c  204f              MOVS     r0,#0x4f
00015e  f7fffffe          BL       STATE_SwitchStep
000162  e002              B        |L18.362|
                  |L18.356|
;;;1383           }
;;;1384           else
;;;1385           {
;;;1386               STATE_EnterState(STATE_STANDBY); // 没有升级项断电
000164  2001              MOVS     r0,#1
000166  f7fffffe          BL       STATE_EnterState
                  |L18.362|
;;;1387           }
;;;1388           TIMER_KillTask(TIMER_ID_DUT_TIMEOUT); // 停止超时计时器
00016a  2009              MOVS     r0,#9
00016c  f7fffffe          BL       TIMER_KillTask
;;;1389           break;
000170  e023              B        |L18.442|
;;;1390   
;;;1391       // 握手超时
;;;1392       case STEP_SEG_CAN_UPGRADE_COMMUNICATION_TIME_OUT:
;;;1393           if (dut_info.appUpFlag)
000172  4814              LDR      r0,|L18.452|
000174  7ec0              LDRB     r0,[r0,#0x1b]  ; dut_info
000176  b120              CBZ      r0,|L18.386|
;;;1394           {
;;;1395               dut_info.appUpFaile = TRUE;
000178  2001              MOVS     r0,#1
00017a  4912              LDR      r1,|L18.452|
00017c  f8810039          STRB     r0,[r1,#0x39]
000180  e00e              B        |L18.416|
                  |L18.386|
;;;1396           }
;;;1397           else if (dut_info.uiUpFlag)
000182  4810              LDR      r0,|L18.452|
000184  7f40              LDRB     r0,[r0,#0x1d]  ; dut_info
000186  b120              CBZ      r0,|L18.402|
;;;1398           {
;;;1399               dut_info.uiUpFaile = TRUE; // ui升级失败
000188  2001              MOVS     r0,#1
00018a  490e              LDR      r1,|L18.452|
00018c  f881003a          STRB     r0,[r1,#0x3a]
000190  e006              B        |L18.416|
                  |L18.402|
;;;1400           }
;;;1401           else if (dut_info.configUpFlag)
000192  480c              LDR      r0,|L18.452|
000194  7f00              LDRB     r0,[r0,#0x1c]  ; dut_info
000196  b118              CBZ      r0,|L18.416|
;;;1402           {
;;;1403               dut_info.configUpFaile = TRUE; // config升级失败
000198  2001              MOVS     r0,#1
00019a  490a              LDR      r1,|L18.452|
00019c  f881003b          STRB     r0,[r1,#0x3b]
                  |L18.416|
;;;1404           }
;;;1405           STATE_EnterState(STATE_STANDBY);
0001a0  2001              MOVS     r0,#1
0001a2  f7fffffe          BL       STATE_EnterState
;;;1406           break;
0001a6  e008              B        |L18.442|
                  |L18.424|
;;;1407   
;;;1408       // dut断电重新连接
;;;1409       case STEP_CM_CAN_UPGRADE_RECONNECTION:
;;;1410           STATE_SwitchStep(STEP_SEG_CAN_UPGRADE_WAIT_FOR_ACK);
0001a8  2031              MOVS     r0,#0x31
0001aa  f7fffffe          BL       STATE_SwitchStep
;;;1411   
;;;1412           break;
0001ae  e004              B        |L18.442|
                  |L18.432|
;;;1413   
;;;1414       // 重新连接超时
;;;1415       case STEP_CM_CAN_UPGRADE_RECONNECTION_TIME_OUT:
;;;1416           STATE_SwitchStep(STEP_NULL);
0001b0  2000              MOVS     r0,#0
0001b2  f7fffffe          BL       STATE_SwitchStep
;;;1417   
;;;1418           break;
0001b6  e000              B        |L18.442|
                  |L18.440|
;;;1419   
;;;1420       default:
;;;1421           break;
0001b8  bf00              NOP      
                  |L18.442|
0001ba  bf00              NOP                            ;1282
;;;1422       }
;;;1423   }
0001bc  bd1c              POP      {r2-r4,pc}
;;;1424   
                          ENDP

0001be  0000              DCW      0x0000
                  |L18.448|
                          DCD      stateCB
                  |L18.452|
                          DCD      dut_info
                  |L18.456|
                          DCD      STATE_SwitchStep

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  verifiedBuff
                          %        150
                  uiVerifiedBuff
                          %        50
                  uiVer
                          %        50

                          AREA ||.data||, DATA, ALIGN=0

                  stateCB
000000  000000            DCB      0x00,0x00,0x00
                  writeUiFlag
000003  00                DCB      0x00
                  writeUiVerFlag
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "User\\state.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_state_c_uiVer____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___7_state_c_uiVer____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_state_c_uiVer____REVSH|
#line 128
|__asm___7_state_c_uiVer____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
