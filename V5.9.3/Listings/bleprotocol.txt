; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\bleprotocol.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\bleprotocol.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -I.\User\qrencode -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=534 -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER -DGD32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\bleprotocol.crf User\BleProtocol.c]
                          THUMB

                          AREA ||i.BLE_PROTOCOL_CheckSUM||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_CheckSUM PROC
;;;651    // 对传入的命令帧进行校验，返回校验结果
;;;652    BOOL BLE_PROTOCOL_CheckSUM(BLE_PROTOCOL_RX_CMD_FRAME* pCmdFrame)
000000  b530              PUSH     {r4,r5,lr}
;;;653    {
;;;654    	uint8 cc = 0;
000002  2200              MOVS     r2,#0
;;;655    	uint16 i = 0;
000004  2100              MOVS     r1,#0
;;;656    	
;;;657    	if(NULL == pCmdFrame)
000006  2800              CMP      r0,#0
000008  d003              BEQ      |L1.18|
;;;658    	{
;;;659    		return FALSE;
;;;660    	}
;;;661    
;;;662    	// 从命令头开始，到校验码之前的一个字节，依次进行异或运算
;;;663    	for(i=0; i<pCmdFrame->length-1; i++)
00000a  f8b05098          LDRH     r5,[r0,#0x98]
00000e  1e6b              SUBS     r3,r5,#1
000010  e006              B        |L1.32|
                  |L1.18|
000012  2000              MOVS     r0,#0                 ;659
;;;664    	{
;;;665    		cc ^= pCmdFrame->buff[i];
;;;666    	}
;;;667    
;;;668    	cc = ~cc;
;;;669    	
;;;670    	// 判断计算得到的校验码与命令帧中的校验码是否相同
;;;671    	if(pCmdFrame->buff[pCmdFrame->length-1] != cc)
;;;672    	{
;;;673    		return FALSE;
;;;674    	}
;;;675    	
;;;676    	return TRUE;
;;;677    }
000014  bd30              POP      {r4,r5,pc}
                  |L1.22|
000016  1844              ADDS     r4,r0,r1              ;665
000018  78a4              LDRB     r4,[r4,#2]            ;665
00001a  4062              EORS     r2,r2,r4              ;665
00001c  1c49              ADDS     r1,r1,#1              ;663
00001e  b289              UXTH     r1,r1                 ;663
                  |L1.32|
000020  428b              CMP      r3,r1                 ;663
000022  dcf8              BGT      |L1.22|
000024  43d1              MVNS     r1,r2                 ;668
000026  b2c9              UXTB     r1,r1                 ;668
000028  1c40              ADDS     r0,r0,#1              ;671
00002a  5c28              LDRB     r0,[r5,r0]            ;671
00002c  4288              CMP      r0,r1                 ;671
00002e  d001              BEQ      |L1.52|
000030  2000              MOVS     r0,#0                 ;673
000032  bd30              POP      {r4,r5,pc}
                  |L1.52|
000034  2001              MOVS     r0,#1                 ;676
000036  bd30              POP      {r4,r5,pc}
;;;678    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_CmdFrameProcess||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  BLE_PROTOCOL_CmdFrameProcess PROC
;;;753    // BLE命令帧缓冲区处理
;;;754    void BLE_PROTOCOL_CmdFrameProcess(BLE_PROTOCOL_CB* pCB)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;755    {
000004  b097              SUB      sp,sp,#0x5c
000006  4681              MOV      r9,r0
;;;756    	BLE_PROTOCOL_CMD cmd = BLE_CMD_MAX;
;;;757    	BLE_PROTOCOL_RX_CMD_FRAME* pCmdFrame = NULL;
;;;758    	uint16 i;
;;;759    
;;;760    	uint32 temp = 0;
;;;761    	uint8 tempCrc8 = 0;
;;;762    	BOOL writeRes;
;;;763    	uint32 buff[2] = {0};
000008  2700              MOVS     r7,#0
00000a  9715              STR      r7,[sp,#0x54]
00000c  9716              STR      r7,[sp,#0x58]
;;;764    	static uint32 recDataNum = 0;
;;;765    	static uint8 recCrc8 = 0;
;;;766    
;;;767    	uint32 totalDistance;
;;;768    	uint16 nvaDistance;
;;;769    
;;;770    
;;;771    	//我的变量
;;;772    	uint8 versionBoot[3] = {0};
00000e  9714              STR      r7,[sp,#0x50]
;;;773    	uint8 versionApp[3] = {0};
000010  9713              STR      r7,[sp,#0x4c]
;;;774    
;;;775    	uint8 upItem = 0;
;;;776    	uint8 clearItem = 0;
;;;777    	uint8 dutAll[50] = { 0 };
000012  2134              MOVS     r1,#0x34
000014  a806              ADD      r0,sp,#0x18
000016  f7fffffe          BL       __aeabi_memclr4
;;;778    	uint8 dutName_i = 0; 
00001a  2500              MOVS     r5,#0
;;;779    	uint8 packetSize = 0;
;;;780    	uint8 addr1 = 0;
;;;781    	uint8 addr2 = 0;
;;;782    	uint8 addr3 = 0;
;;;783    	uint8 addr4 = 0;
;;;784    	uint32 writeAddr = 0;
;;;785    	static uint32 allPacketSize = 1000;
;;;786    	uint8 allPacket[4] = {0};//第一个数据是 allPacketSize高八位，第二个数据是 allPacketSize低八位，
00001c  9705              STR      r7,[sp,#0x14]
;;;787    //	uint8 upFlag = 0xAA;
;;;788    	uint8 dataLen = 0;
;;;789    	uint8 endItem = 0;
;;;790    	uint8 ctrlState = 0;
;;;791    	uint8 firmwareStorage = 0;
;;;792    	uint8 dut_info_len = 0;
;;;793    //	uint8 dut_info_name[20] = {0};
;;;794    //	uint8 dut_info_voltage = 0;
;;;795    	uint8 size[2] = {0};
00001e  9704              STR      r7,[sp,#0x10]
;;;796    	
;;;797    
;;;798    
;;;799    //	//测试
;;;800    //	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD);		//添加命令头		
;;;801    //	BLE_PROTOCOL_TxAddData(0x14); //添加命令字	
;;;802    //	BLE_PROTOCOL_TxAddData(0x00);						//数据长度临时为0
;;;803    //	BLE_PROTOCOL_TxAddData(0x06); 			//添加BOOT版本
;;;804    //	BLE_PROTOCOL_TxAddData(0x01); 			//添加BOOT版本
;;;805    //	BLE_PROTOCOL_TxAddData(0x1);
;;;806    //	BLE_PROTOCOL_TxAddFrame();							//设置数据长度和添加校验
;;;807    
;;;808    	// 参数合法性检验
;;;809    	if(NULL == pCB)
000020  f1b90f00          CMP      r9,#0
000024  d017              BEQ      |L2.86|
;;;810    	{
;;;811    		return;
;;;812    	}
;;;813    
;;;814    	// 命令帧缓冲区为空，退出
;;;815    	if(pCB->rx.head == pCB->rx.end)
000026  f8b90434          LDRH     r0,[r9,#0x434]
00002a  f8b91436          LDRH     r1,[r9,#0x436]
00002e  4288              CMP      r0,r1
000030  d011              BEQ      |L2.86|
;;;816    	{
;;;817    		return;
;;;818    	}
;;;819    
;;;820    	// 获取当前要处理的命令帧指针
;;;821    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.head];
000032  214d              MOVS     r1,#0x4d
000034  4341              MULS     r1,r0,r1
000036  eb090441          ADD      r4,r9,r1,LSL #1
00003a  f5047499          ADD      r4,r4,#0x132
;;;822    	
;;;823    	// 命令头非法，退出
;;;824    	if(BLE_PROTOCOL_CMD_HEAD != pCmdFrame->buff[BLE_PROTOCOL_CMD_HEAD_INDEX])
00003e  78a1              LDRB     r1,[r4,#2]
000040  2955              CMP      r1,#0x55
000042  d00b              BEQ      |L2.92|
;;;825    	{
;;;826    		// 删除命令帧
;;;827    		pCB->rx.head ++;
000044  1c40              ADDS     r0,r0,#1
000046  b280              UXTH     r0,r0
;;;828    		pCB->rx.head %= BLE_PROTOCOL_RX_QUEUE_SIZE;
000048  2105              MOVS     r1,#5
00004a  fbb0f2f1          UDIV     r2,r0,r1
00004e  fb010012          MLS      r0,r1,r2,r0
000052  f8a90434          STRH     r0,[r9,#0x434]
                  |L2.86|
;;;829    		return;
;;;830    	}
;;;831    
;;;832    	// 命令头合法，则提取命令
;;;833    	cmd = (BLE_PROTOCOL_CMD)pCmdFrame->buff[BLE_PROTOCOL_CMD_CMD_INDEX];
;;;834    	
;;;835    	
;;;836    	
;;;837    	// 执行命令帧
;;;838    	switch (cmd)
;;;839    	{
;;;840    		// 获取烧录器工具信息
;;;841    		case UART_ARM_CMD_GET_TOOL_INFO :// 0x10,
;;;842    			SPI_FLASH_ReadArray(versionBoot,SPI_FLASH_BOOT_VERSION_ADDEESS,3);	// 获取BOOT版本
;;;843    			SPI_FLASH_ReadArray(versionApp,SPI_FLASH_APP_VERSION_ADDEESS,3);	// 获取APP版本
;;;844    			BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		// 添加命令头		
;;;845    			BLE_PROTOCOL_TxAddData(UART_ARM_CMD_GET_TOOL_INFO); // 添加命令字	
;;;846    			BLE_PROTOCOL_TxAddData(0x00);						// 数据长度临时为0
;;;847    			BLE_PROTOCOL_TxAddData(versionBoot[0]);				// 添加BOOT版本
;;;848    			BLE_PROTOCOL_TxAddData(versionBoot[1]);
;;;849    			BLE_PROTOCOL_TxAddData(versionBoot[2]);
;;;850    			BLE_PROTOCOL_TxAddData(versionApp[0]);				// 添加APP版本
;;;851    			BLE_PROTOCOL_TxAddData(versionApp[1]);
;;;852    			BLE_PROTOCOL_TxAddData(versionApp[2]);
;;;853    			BLE_PROTOCOL_TxAddFrame();							// 设置数据长度和添加校验
;;;854    			break; 					
;;;855    
;;;856    		// 烧录器工具升级开始
;;;857    		case UART_ARM_CMD_TOOL_UP_BEGIN ://0x11,
;;;858    			//擦除片外flash，大概要1s钟
;;;859    			SPI_FLASH_EraseRoom(SPI_FLASH_TOOL_APP_ADDEESS,256*1024);//256k		
;;;860    			/*返回信息给安卓机*/
;;;861    			allPacketSize = 0;
;;;862    			BLE_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_UP_BEGIN,TRUE);
;;;863    			break; 	
;;;864    
;;;865    		// 烧录器工具数据写入
;;;866    		case UART_ARM_CMD_TOOL_WRITE_DATA :// 0x12,
;;;867    			// 向片外flash写入安卓机发送的数据
;;;868    			packetSize = pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;869    			addr1 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;870    			addr2 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX];
;;;871    			addr3 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX];
;;;872    			addr4 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX];
;;;873    			writeAddr = (addr1<<24)|(addr2<<16)|(addr3<<8)|(addr4);
;;;874    
;;;875    			writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_TOOL_APP_ADDEESS + writeAddr, packetSize);
;;;876    					
;;;877    			/*返回信息给安卓机*/
;;;878    			BLE_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_WRITE_DATA, writeRes);
;;;879    			allPacketSize++;
;;;880    			break; 
;;;881    
;;;882    		//烧录器工具升级结束
;;;883    		case UART_ARM_CMD_TOOL_UP_END :// 0x13,
;;;884    			//发送升级成功应答
;;;885    			//设置升级标志位标志
;;;886    			allPacket[0] = allPacketSize>>24;
;;;887    			allPacket[1] = allPacketSize>>16;
;;;888    			allPacket[2] = allPacketSize>>8;
;;;889    			allPacket[3] = allPacketSize;
;;;890    			
;;;891    			SPI_FLASH_EraseSector(SPI_FLASH_TOOL_UPDATA_FLAG_ADDEESS);//擦除标志位存储区
;;;892    			SPI_FLASH_EraseSector(SPI_FLASH_TOOL_APP_DATA_SIZE);//擦除大小存储区
;;;893    
;;;894    			SPI_FLASH_WriteByte(SPI_FLASH_TOOL_UPDATA_FLAG_ADDEESS,0xAA);
;;;895    			SPI_FLASH_WriteArray(allPacket,SPI_FLASH_TOOL_APP_DATA_SIZE,4);
;;;896    			
;;;897    			BLE_PROTOCOL_SendCmdAck(UART_ARM_CMD_TOOL_UP_END);
;;;898    			/*200ms后跳转回BOOT，读取标志位，然后替换替换工具APP区*/
;;;899    			TIMER_AddTask(TIMER_ID_TOOL_APP_TO_BOOT,
;;;900    					200,
;;;901    					IAP_JumpToAppFun,
;;;902    					IAP_GD32_FLASH_BASE,
;;;903    					1,
;;;904    					ACTION_MODE_ADD_TO_QUEUE
;;;905    					);
;;;906    			break; 
;;;907    
;;;908    		//升级DUT控制命令
;;;909    		case UART_ARM_CMD_TOOL_DUT_UP :// 0x14,
;;;910    			upItem = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;911    			ctrlState = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX];
;;;912    			firmwareStorage = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX];
;;;913    		
;;;914    			if(0x02 == (upItem & 0x02) && (1 == ctrlState) )//升级app
;;;915    			{
;;;916    				dut_info.APP_UP_FLAG = TRUE;
;;;917    			}
;;;918    			else
;;;919    			{
;;;920    				dut_info.APP_UP_FLAG = FALSE;
;;;921    			}
;;;922    			if(0x04 == (upItem & 0x04) && (1 == ctrlState))//升级ui
;;;923    			{
;;;924    				dut_info.UI_UP_FLAG = TRUE;
;;;925    			}
;;;926    			else
;;;927    			{
;;;928    				dut_info.UI_UP_FLAG = FALSE;
;;;929    			}
;;;930    			if(0x08 == (upItem & 0x08) && (1 == ctrlState))//升级config
;;;931    			{
;;;932    				dut_info.CONFIG_UP_FLAG = TRUE;
;;;933    			}
;;;934    			else
;;;935    			{
;;;936    				dut_info.CONFIG_UP_FLAG = FALSE;
;;;937    			}
;;;938    			//固定项
;;;939    			dut_info.dutProgress[0] = 0;//boot
;;;940    			dut_info.dutProgress[1] = 101;//boot
;;;941    			dut_info.dutProgress[2] = 1;//app
;;;942    			dut_info.dutProgress[4] = 2;//u
;;;943    			dut_info.dutProgress[6] = 3;//config
;;;944    			
;;;945    			if(!dut_info.APP_UP_FLAG)
;;;946    			{
;;;947    				dut_info.dutProgress[3] = 101;
;;;948    			}
;;;949    			else
;;;950    			{
;;;951    				dut_info.dutProgress[3] = 0;
;;;952    			}
;;;953    			
;;;954    			if(!dut_info.UI_UP_FLAG )
;;;955    			{
;;;956    				dut_info.dutProgress[5] = 101;
;;;957    			}
;;;958    			else
;;;959    			{
;;;960    				dut_info.dutProgress[5] = 0;
;;;961    			}
;;;962    			
;;;963    			if(!dut_info.CONFIG_UP_FLAG)
;;;964    			{
;;;965    				dut_info.dutProgress[7] = 101;
;;;966    			}
;;;967    			else
;;;968    			{
;;;969    				dut_info.dutProgress[7] = 0;
;;;970    			}
;;;971    			TIMER_AddTask(TIMER_ID_SET_DUT_PROGRESS_REPORT,
;;;972    						300, 
;;;973    						dutProgressReport, 
;;;974    						ctrlState, 
;;;975    						TIMER_LOOP_FOREVER, 
;;;976    						ACTION_MODE_ADD_TO_QUEUE);
;;;977    
;;;978    			BLE_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_DUT_UP,TRUE);
;;;979    
;;;980    			canProtocolCB.UPDATA1 = FALSE;
;;;981    			canProtocolCB.UPDATA = FALSE;
;;;982    			CAN_UP_RESET(1);
;;;983    			break; 
;;;984    
;;;985    		//DUT升级进度上报
;;;986    		case UART_ARM_CMD_TOOL_DUT_PROCESS ://0x15,
;;;987    			break; 
;;;988    
;;;989    		//清空升级缓冲区
;;;990    		case UART_ARM_CMD_TOOL_CLEAR_BUFF :// 0x16,
;;;991    		
;;;992    				clearItem = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;993    				if(0x01 == (clearItem & 0x01))
;;;994    				{
;;;995    					/*擦除片外的dut_boot区*/
;;;996    					//SPI_FLASH_EraseSector
;;;997    					dut_info.bootSize = 0;
;;;998    					SPI_FLASH_EraseRoom(SPI_FLASH_DUT_BOOT_ADDEESS,128*1024);//128k
;;;999    					
;;;1000   				}
;;;1001   				if(0x02 == (clearItem & 0x02))
;;;1002   				{
;;;1003   					/*擦除片外的dut_app区*/
;;;1004   					dut_info.appSize = 0;
;;;1005   					SPI_FLASH_EraseRoom(SPI_FLASH_DUT_APP_ADDEESS,1024*1024);//1M
;;;1006   				}
;;;1007   				if(0x04 == (clearItem & 0x04))
;;;1008   				{
;;;1009   					/*擦除片外的dut_ui区*/
;;;1010   					dut_info.uiSize = 0;
;;;1011   					SPI_FLASH_EraseRoom(SPI_FLASH_DUT_UI_ADDEESS,14*1024*1024);//14M
;;;1012   					
;;;1013   				}
;;;1014   				if(0x08 == (clearItem & 0x08))
;;;1015   				{
;;;1016   					/*擦除片外的dut_config区*/
;;;1017   					SPI_FLASH_EraseSector(SPI_FLASH_DUT_CONFIG_ADDEESS);//4k
;;;1018   					
;;;1019   				}
;;;1020   				SPI_FLASH_EraseSector(SPI_FLASH_DUT_INFO);//擦除dut机型信息
;;;1021   				BLE_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_CLEAR_BUFF,TRUE);
;;;1022   		
;;;1023   			break;
;;;1024   
;;;1025   		//烧录器写入DUT机型信息
;;;1026   		case UART_ARM_CMD_TOOL_SET_DUT_INFO ://0x17,
;;;1027   			dut_info_len = pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX]-6;
;;;1028   			
;;;1029   			for(dutName_i = 0;dutName_i < dut_info_len;dutName_i++ )
;;;1030   			{
;;;1031   				dutAll[dutName_i] = pCmdFrame->buff[dutName_i+6+3];
;;;1032   			}
;;;1033   			dutAll[20] = dut_info_len;//长度
;;;1034   			dutAll[21] = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];//电压
;;;1035   			dutAll[22] = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX];//通讯类型
;;;1036   			dutAll[23] = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX];//bootType
;;;1037   			dutAll[24] = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX];//appType
;;;1038   			dutAll[25] = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX];//uiType
;;;1039   			dutAll[26] = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA6_INDEX];//configType
;;;1040   
;;;1041   			
;;;1042   			/*将机型信息写入到片外flash*/
;;;1043   			SPI_FLASH_EraseSector(SPI_FLASH_DUT_INFO);
;;;1044   			writeRes = SPI_FLASH_WriteWithCheck(dutAll, SPI_FLASH_DUT_INFO, 30);
;;;1045   
;;;1046   			if( writeRes )
;;;1047   			{
;;;1048   				DutInfoUpdata();//更新dutinfo数据
;;;1049   			}
;;;1050   			/*返回信息给安卓机*/
;;;1051   			BLE_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_TOOL_SET_DUT_INFO,writeRes);
;;;1052   			break; 
;;;1053   
;;;1054   		//获取烧录器记录的DUT机型信息
;;;1055   		case UART_ARM_CMD_TOOL_GET_DUT_INFO :// 0x18
;;;1056   			SPI_FLASH_ReadArray(dutAll,SPI_FLASH_DUT_INFO,30);
;;;1057   			if(-1 == dutAll[20] || 0xFF == dutAll[20])//机型为空
;;;1058   			{
;;;1059   				dutAll[20] = 10;
;;;1060   			}
;;;1061   			BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		//添加命令头		
;;;1062   			BLE_PROTOCOL_TxAddData(UART_ARM_CMD_TOOL_GET_DUT_INFO); //添加命令字	
;;;1063   			BLE_PROTOCOL_TxAddData(0x00);						//数据长度临时为0
;;;1064   			BLE_PROTOCOL_TxAddData(dutAll[21]);			// 添加电压
;;;1065   			BLE_PROTOCOL_TxAddData(dutAll[22]);			// 添加通讯类型
;;;1066   			BLE_PROTOCOL_TxAddData(dutAll[23]);			// bootType
;;;1067   			BLE_PROTOCOL_TxAddData(dutAll[24]);			// appType
;;;1068   			BLE_PROTOCOL_TxAddData(dutAll[25]);			// uiType
;;;1069   			BLE_PROTOCOL_TxAddData(dutAll[26]);			// configType
;;;1070   			for(dutName_i = 0;dutName_i < dutAll[20];dutName_i++ )//添加机型信息
;;;1071   			{
;;;1072   				BLE_PROTOCOL_TxAddData(dutAll[dutName_i]);
;;;1073   			}
;;;1074   			BLE_PROTOCOL_TxAddFrame();							//设置数据长度和添加校验
;;;1075   			break; 
;;;1076   
;;;1077   
;;;1078   		case UART_ARM_CMD_SET_TOOL_RANK://0x19:设置工具序列号
;;;1079   			SPI_FLASH_EraseSector(SPI_FLASH_TOOL_RANK_ADDEESS);
;;;1080   			dut_info.toolRank = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;1081   			SPI_FLASH_WriteByte(SPI_FLASH_TOOL_RANK_ADDEESS,dut_info.toolRank);
;;;1082   			BLE_PROTOCOL_SendCmdParamAck(UART_ARM_CMD_SET_TOOL_RANK,0x01);	//设置数据长度和添加校验
;;;1083   			break;
;;;1084   		case UART_ARM_CMD_GET_TOOL_RANK://0x20:获取工具序列号
;;;1085   			dut_info.toolRank = SPI_FLASH_ReadByte(SPI_FLASH_TOOL_RANK_ADDEESS);
;;;1086   			BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		//添加命令头		
;;;1087   			BLE_PROTOCOL_TxAddData(UART_ARM_CMD_GET_TOOL_RANK); //添加命令字	
;;;1088   			BLE_PROTOCOL_TxAddData(0x00);						//添加临时长度
;;;1089   			BLE_PROTOCOL_TxAddData(dut_info.toolRank);	
;;;1090   			BLE_PROTOCOL_TxAddFrame();	
;;;1091   			break;
;;;1092   		case UART_DUT_CMD_UP_CONFIG ://写入DUT参数（命令字=0x30
;;;1093   			/*读取配置信息的flash区，然后写入DUT*/
;;;1094   			dataLen = pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX];
;;;1095   
;;;1096   			writeRes = SPI_FLASH_WriteWithCheck(&(pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX]), SPI_FLASH_DUT_CONFIG_ADDEESS, dataLen);
;;;1097   		
;;;1098   			/*返回信息给安卓机*/
;;;1099   			BLE_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_CONFIG, writeRes);
;;;1100   			break;
;;;1101   			
;;;1102   		case UART_DUT_CMD_UP_UI ://UI数据写入（命令字=0x31）
;;;1103   			/*读取UI的flash区，然后写入DUT*/
;;;1104   			packetSize = pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;1105   			addr1 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;1106   			addr2 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX];
;;;1107   			addr3 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX];
;;;1108   			addr4 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX];
;;;1109   			writeAddr = (addr1<<24)|(addr2<<16)|(addr3<<8)|(addr4);
;;;1110   
;;;1111   			writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_DUT_UI_ADDEESS+writeAddr, packetSize);
;;;1112   			dut_info.uiSize++;
;;;1113   			/*返回信息给安卓机*/
;;;1114   			BLE_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_UI, writeRes);
;;;1115   			break;
;;;1116   
;;;1117   		case UART_DUT_CMD_UP_BOOT ://BOOT数据写入（命令字=0x32）
;;;1118   			/*读取BOOT的flash区，然后写入DUT*/
;;;1119   			packetSize = pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;1120   			addr1 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;1121   			addr2 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX];
;;;1122   			addr3 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX];
;;;1123   			addr4 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX];
;;;1124   			writeAddr = (addr1<<24)|(addr2<<16)|(addr3<<8)|(addr4);
;;;1125   			writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_DUT_BOOT_ADDEESS+writeAddr, packetSize);
;;;1126   			dut_info.bootSize++;
;;;1127   			/*返回信息给安卓机*/
;;;1128   			BLE_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_BOOT, writeRes);
;;;1129   			break;
;;;1130   
;;;1131   		case UART_DUT_CMD_UP_APP ://APP数据写入（命令字=0x33）
;;;1132   			packetSize = pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] - 4;
;;;1133   			addr1 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;1134   			addr2 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX];
;;;1135   			addr3 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX];
;;;1136   			addr4 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX];
;;;1137   			writeAddr = (addr1<<24)|(addr2<<16)|(addr3<<8)|(addr4);
;;;1138   			writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_DUT_APP_ADDEESS+writeAddr, packetSize);
;;;1139   					
;;;1140   			/*返回信息给安卓机*/
;;;1141   			dut_info.appSize++;
;;;1142   			BLE_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_APP, writeRes);
;;;1143   
;;;1144   			break;
;;;1145   
;;;1146   		case UART_DUT_CMD_UP_END ://升级项结束（命令字=0x34）
;;;1147   			endItem = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;1148   			switch( endItem )
;;;1149   			{
;;;1150   				case 0:
;;;1151   					SPI_FLASH_EraseSector(SPI_FLASH_DUT_BOOT_SIZE_ADDEESS);//擦除dut机型信息
;;;1152   					size[0] = dut_info.bootSize>>8;
;;;1153   					size[1] = dut_info.bootSize;
;;;1154   					SPI_FLASH_WriteArray(size,SPI_FLASH_DUT_BOOT_SIZE_ADDEESS,2);					
;;;1155   					break;
;;;1156   				case 1:
;;;1157   					SPI_FLASH_EraseSector(SPI_FLASH_DUT_APP_SIZE_ADDEESS);//擦除dut机型信息
;;;1158   					size[0] = dut_info.appSize>>8;
;;;1159   					size[1] = dut_info.appSize;
;;;1160   					SPI_FLASH_WriteArray(size,SPI_FLASH_DUT_APP_SIZE_ADDEESS,2);
;;;1161   					break;
;;;1162   				case 2:
;;;1163   					SPI_FLASH_EraseSector(SPI_FLASH_DUT_UI_SIZE_ADDEESS);//擦除dut机型信息
;;;1164   					size[0] = dut_info.uiSize>>8;
;;;1165   					size[1] = dut_info.uiSize;
;;;1166   					SPI_FLASH_WriteArray(size,SPI_FLASH_DUT_UI_SIZE_ADDEESS,2);
;;;1167   					break;
;;;1168   			}
;;;1169   
;;;1170   			
;;;1171   			/*返回信息给安卓机*/
;;;1172   			BLE_PROTOCOL_SendCmdParamAck(UART_DUT_CMD_UP_END,endItem);
;;;1173   			break;
;;;1174   
;;;1175   
;;;1176   
;;;1177   
;;;1178   
;;;1179   
;;;1180   
;;;1181   
;;;1182   			
;;;1183   		
;;;1184   
;;;1185   		// 固件升级命令
;;;1186   		case BLE_CMD_FIRMUPDATE_DOWN:
;;;1187   			// 速度不为0，不可进行此操作
;;;1188   			if (paramCB.runtime.speed != 0)
;;;1189   			{
;;;1190   				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_FIRMUPDATE_UP, 0x00);
;;;1191   				break;
;;;1192   			}
;;;1193   			
;;;1194   //			TIMER_KillTask(TIMER_ID_PROTOCOL_PARAM_TX);
;;;1195   			
;;;1196   			// 用来判断数据包是否合法
;;;1197   			temp  = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX];
;;;1198   			temp <<= 8;
;;;1199   			temp += pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX];
;;;1200   			temp <<= 8;
;;;1201   			temp += pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX];
;;;1202   			temp <<= 8;
;;;1203   			temp += pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX];
;;;1204   		
;;;1205   			if(temp > IAP_GD32_APP1_SIZE)
;;;1206   			{
;;;1207   				// 超过存储空间返回应答
;;;1208   				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_FIRMUPDATE_UP, 0x00);
;;;1209   			}
;;;1210   			else
;;;1211   			{	
;;;1212   //				TIMER_Pause(TIMER_ID_PROTOCOL_PARAM_TX);
;;;1213   //				TIMER_KillTask(TIMER_ID_UART_TXRX_TIME_OUT);
;;;1214   				
;;;1215   				// 擦除
;;;1216   //				SPI_FLASH_EraseRoom(SPI_FLASH_APP_DATA_ADDEESS, SPI_FLASH_APP_DATA_SIZE);
;;;1217   				
;;;1218   				// 擦除
;;;1219   				for(i = 0; i < 64; i++)
;;;1220   				{
;;;1221   					SPI_FLASH_EraseSector(i*SPI_FLASH_SECTOR_SIZE + SPI_FLASH_APP_DATA_ADDEESS);
;;;1222   				}
;;;1223   				
;;;1224   				// 应该接收数据长度
;;;1225   				recDataNum = temp;
;;;1226   				recCrc8 = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;1227   				
;;;1228   				// 正常应答
;;;1229   				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_FIRMUPDATE_UP, 0x01);
;;;1230   
;;;1231   				// 跳转到蓝牙升级界面
;;;1232   				STATE_EnterState(STATE_BLE_UPDATA);
;;;1233   				paramCB.runtime.blueUpDataState = TRUE;
;;;1234   			}
;;;1235   			break;
;;;1236   
;;;1237   		// 数据包写入命令
;;;1238   		case BLE_CMD_DATAIN_DOWN:
;;;1239   			// 如果数据长度不合法
;;;1240   			if (4 > pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX])
;;;1241   			{
;;;1242   				break;
;;;1243   			}
;;;1244   
;;;1245   			// 数据包编号(固定数据长度)
;;;1246   			temp  = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX];
;;;1247   			temp <<= 8;
;;;1248   			temp += pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX];
;;;1249   			temp <<= 8;
;;;1250   			temp += pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX];
;;;1251   			temp <<= 8;
;;;1252   			temp += pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX];
;;;1253   			
;;;1254   			writeRes = SPI_FLASH_WriteWithCheck(&pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX], SPI_FLASH_APP_DATA_ADDEESS + temp * 128, 128);
;;;1255   
;;;1256   			BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_DATAIN_UP, !writeRes);
;;;1257   			break;
;;;1258   
;;;1259   		// 数据包写入完成命令
;;;1260   		case BLE_CMD_DATAIN_FINISH_DOWN:
;;;1261   			// 数据包校验
;;;1262   			tempCrc8 = SPI_FlashReadForCrc8(recDataNum);
;;;1263   		
;;;1264   			if(recCrc8 == tempCrc8)
;;;1265   			{
;;;1266   				buff[0] = 0xAA000000;// 蓝牙升级标志，返回BOOT时需要判断
;;;1267   				buff[1] = recDataNum;// 数据包大小。
;;;1268   				
;;;1269   				// 清除蓝牙升级标志和屏蔽蓝牙模块初始化标志
;;;1270   				SPI_FLASH_WriteWord(SPI_FLASH_APP_UPFLAG_ADDEESS, buff[0]);
;;;1271   				SPI_FLASH_WriteWord(SPI_FLASH_APP_UPFLAG_ADDEESS + 4, buff[1]);
;;;1272   				
;;;1273   				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_DATAIN_FINISH_UP, 0x01);
;;;1274   
;;;1275   				// 手动重启
;;;1276   				paramCB.runtime.blueUpDataState = FALSE;
;;;1277   			}
;;;1278   			else
;;;1279   			{
;;;1280   				// 数据包校验不成功，则一直处于boot中，等待再次升级程序
;;;1281   				BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_DATAIN_FINISH_UP, 0x00);
;;;1282   			}
;;;1283   			break;
;;;1284   
;;;1285   		
;;;1286   		
;;;1287   		// 选择性获取参数上报
;;;1288   		case BLE_CMD_SELECT_GETSTATUS_DOWN:
;;;1289   			if (pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX] == 0x01)
;;;1290   			{
;;;1291   				// 仪表状态组1信息回复
;;;1292   				BLE_PROTOCOL_SendCmdSelectStatus1Ack();
;;;1293   			}
;;;1294   			else if (pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX] == 0x02)
;;;1295   			{
;;;1296   				// 仪表状态组2信息回复
;;;1297   				BLE_PROTOCOL_SendCmdSelectStatus2Ack();
;;;1298   			}
;;;1299   			else if (pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX] == 0x03)
;;;1300   			{
;;;1301   				// 仪表状态组3信息回复
;;;1302   				BLE_PROTOCOL_SendCmdSelectStatus3Ack();
;;;1303   			}
;;;1304   			break;
;;;1305   
;;;1306   		// 获取实时运动数据命令
;;;1307   		case BLE_CMD_GETDATA_RUNNING_DOWN:
;;;1308   			BLE_PROTOCOL_SendCmdGetRuningStateAck();
;;;1309   			break;
;;;1310   
;;;1311   		// 启动同步历史运动数据应答命令
;;;1312   		case BLE_CMD_START_HISTORICAL_DATA_DOWN:
;;;1313   			// 关闭周期性发送启动历史数据同步函数
;;;1314   //			TIMER_KillTask(TIMER_ID_BLE_START_HISTORICAL_DATA_UP);
;;;1315   			
;;;1316   			// 速度不为0，不允许上报历史数据
;;;1317   			if (PARAM_GetSpeed() == 0)
;;;1318   			{
;;;1319   				// 发送第一条历史上报数据
;;;1320   				BLE_PROTOCOL_SendHistoryData(UINT32_NULL);
;;;1321   
;;;1322   				// 历史数据没有同步完成，继续发送同步历史数据，五秒中循环发送请求同步数据
;;;1323   				
;;;1324   			}
;;;1325   			break;
;;;1326   
;;;1327   		// 上报历史运动数据应答
;;;1328   		case BLE_CMD_REPORT_HISTORICAL_DATA_DOWN:
;;;1329   			// 关闭周期性发送启动历史数据同步函数
;;;1330   		//	TIMER_KillTask(TIMER_ID_BLE_START_HISTORICAL_DATA_UP);
;;;1331   
;;;1332   			// 速度不为0，不允许上报历史数据
;;;1333   			if (PARAM_GetSpeed() == 0)
;;;1334   			{
;;;1335   				// 上传成功，刷新读取已发送历史数据值
;;;1336   				
;;;1337   				// 接着发下一条历史数据
;;;1338   				BLE_PROTOCOL_SendHistoryData(UINT32_NULL);
;;;1339   			}
;;;1340   			break;
;;;1341   			
;;;1342   		// 来电提示
;;;1343   		case BLE_CMD_CALL_PHONE_DOWN:
;;;1344   			
;;;1345   			// 判断来电状态
;;;1346   			switch (pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX])
;;;1347   			{
;;;1348   				case 0x00:
;;;1349   					PARAM_SetBleCallRing(TRUE);
;;;1350   					break;
;;;1351   
;;;1352   				default:
;;;1353   					PARAM_SetBleCallRing(FALSE);
;;;1354   					break;	
;;;1355   			}
;;;1356   			
;;;1357   			memset(callringBuff, 0xFF, sizeof((char *)callringBuff));
;;;1358   			for (i = 0; i < (pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX]-1); i++)
;;;1359   			{
;;;1360   				callringBuff[i] = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX + i];
;;;1361   			} 
;;;1362   		
;;;1363   			BLE_PROTOCOL_SendCmdAck(BLE_CMD_CALL_PHONE_UP);
;;;1364   			break;	
;;;1365   
;;;1366   		// 导航界面状态下发
;;;1367   		case BLE_CMD_CONTROL_NAV_DOWN:
;;;1368   			// 导航状态
;;;1369   			if (pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX] == 0x00)			// 退出导航界面 
;;;1370   			{
;;;1371   				paramCB.runtime.hudnav.state = NVA_EXIT;
;;;1372   			}
;;;1373   			else if (pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX] == 0x01)		// 正在导航界面
;;;1374   			{
;;;1375   				paramCB.runtime.hudnav.state = NVA_IS;
;;;1376   			}
;;;1377   			else																// 导航偏移
;;;1378   			{
;;;1379   				
;;;1380   			}
;;;1381   
;;;1382   			// 导航方向
;;;1383   			PARAM_SetHudnavDirection(pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX]);
;;;1384   
;;;1385   			// 终点目的地的距离
;;;1386   			totalDistance = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX];
;;;1387   			totalDistance <<= 8;
;;;1388   			totalDistance |= pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX];
;;;1389   			totalDistance <<= 8;
;;;1390   			totalDistance |= pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX];
;;;1391   			totalDistance <<= 8;
;;;1392   			totalDistance |= pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA6_INDEX];
;;;1393   
;;;1394   			// APP下发数据默认公制，根据仪表单位进行转换
;;;1395   			if (PARAM_GetUnit())
;;;1396   			{
;;;1397   				totalDistance = totalDistance * METRIC_TO_INCH_COFF;
;;;1398   			}
;;;1399   			
;;;1400   			PARAM_SetHudnavDtg(totalDistance);
;;;1401   
;;;1402   			// 当前路段的距离
;;;1403   			nvaDistance = pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA7_INDEX];
;;;1404   			nvaDistance <<= 8;
;;;1405   			nvaDistance |= pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA8_INDEX];
;;;1406   			
;;;1407   			// APP下发数据默认公制，根据仪表单位进行转换  
;;;1408   			if (PARAM_GetUnit())
;;;1409   			{
;;;1410   				nvaDistance = nvaDistance * METRIC_TO_INCH_COFF;
;;;1411   			}
;;;1412   			PARAM_SetHudnavWptDist(nvaDistance);
;;;1413   
;;;1414   			// 距离终点的时间
;;;1415   			PARAM_SetHudnavEtaHour(pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA9_INDEX]);
;;;1416   			PARAM_SetHudnavEtaMinute(pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA10_INDEX]);
;;;1417   
;;;1418   			// 上行回复
;;;1419   			switch (paramCB.runtime.hudnav.state)
;;;1420   			{
;;;1421   				case NVA_EXIT: // 退出导航
;;;1422   					BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_CONTROL_NAV_UP, 1);
;;;1423   					break;
;;;1424   
;;;1425   				case NVA_IS:// 导航中
;;;1426   					BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_CONTROL_NAV_UP, 0);
;;;1427   					break;
;;;1428   					
;;;1429   				default:// 执行结果失败
;;;1430   					BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_CONTROL_NAV_UP, 2);
;;;1431   					break;
;;;1432   			}
;;;1433   			
;;;1434   			break;
;;;1435   			
;;;1436   		// 麦克风控制指令（语音对讲）应答，下行
;;;1437   		case BLE_CMD_MICROPHONE_DOWN:
;;;1438   
;;;1439   			// 麦克风状态
;;;1440   			PARAM_SetVoiceSwitch((BOOL)pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX]);
;;;1441   			
;;;1442   //			TIMER_KillTask(TIMER_ID_BLE_CONTROL);
;;;1443   			break;
;;;1444   		
;;;1445   		// 骑行记录仪控制指令应答，下行
;;;1446   		case BLE_CMD_CYCLING_RECORD_DOWN:
;;;1447   
;;;1448   			// 录像状态
;;;1449   			if (0x02 == pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX])
;;;1450   			{
;;;1451   				PARAM_SetVideoSwitch((BOOL)pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX]);
;;;1452   			}
;;;1453   
;;;1454   			paramCB.runtime.photoSwitch = FALSE;
;;;1455   //			TIMER_KillTask(TIMER_ID_BLE_CONTROL);
;;;1456   			break;
;;;1457   			
;;;1458   		// 转向灯控制，下行(APP连接头盔控制)
;;;1459   		case BLE_CMD_CONTROL_TURNLIGHT_DOWN:
;;;1460   			break;
;;;1461   
;;;1462   		// 装备绑定/解绑指令
;;;1463   		case BLE_CMD_CHECK_OUTFIT_DOWN:
;;;1464   
;;;1465   			// 装备类型
;;;1466   			if (0x03 == pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX])
;;;1467   			{	
;;;1468   				// 头盔
;;;1469   				if (pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX])
;;;1470   				{
;;;1471   					// 绑定成功
;;;1472   					PARAM_SetHelmetPairState(TRUE);
;;;1473   					
;;;1474   					sprintf((char*)PARAM_GetHelmetMacBuff(), "%02X:%02X:%2X:%02X:%02X:%02X", 
;;;1475   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX],
;;;1476   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX],
;;;1477   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX],
;;;1478   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA6_INDEX],
;;;1479   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA7_INDEX],
;;;1480   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA8_INDEX]);
;;;1481   
;;;1482   					BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_CHECK_OUTFIT_UP, 0x01);
;;;1483   				}
;;;1484   				else
;;;1485   				{
;;;1486   					// 解绑
;;;1487   					PARAM_SetHelmetPairState(FALSE);
;;;1488   
;;;1489   					BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_CHECK_OUTFIT_UP, 0x02);
;;;1490   				}
;;;1491   
;;;1492   				// NVM更新，立即写入
;;;1493   				NVM_SetDirtyFlag(TRUE);
;;;1494   			}
;;;1495   			else if (0x05 == pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA2_INDEX])
;;;1496   			{
;;;1497   				// 电子锁
;;;1498   				if (pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA1_INDEX])
;;;1499   				{
;;;1500   					// 绑定成功
;;;1501   					PARAM_SetLockPairState(TRUE);
;;;1502   					
;;;1503   					sprintf((char*)PARAM_GetLockMacBuff(), "%02X:%02X:%2X:%02X:%02X:%02X", 
;;;1504   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA3_INDEX],
;;;1505   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA4_INDEX],
;;;1506   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA5_INDEX],
;;;1507   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA6_INDEX],
;;;1508   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA7_INDEX],
;;;1509   							pCmdFrame->buff[BLE_PROTOCOL_CMD_DATA8_INDEX]);
;;;1510   
;;;1511   					BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_CHECK_OUTFIT_UP, 0x01);
;;;1512   				}
;;;1513   				else
;;;1514   				{
;;;1515   					// 解绑
;;;1516   					PARAM_SetLockPairState(FALSE);
;;;1517   					
;;;1518   					BLE_PROTOCOL_SendCmdParamAck(BLE_CMD_CHECK_OUTFIT_UP, 0x02);
;;;1519   				}
;;;1520   
;;;1521   				// NVM更新，立即写入
;;;1522   				NVM_SetDirtyFlag(TRUE);
;;;1523   			}
;;;1524   			break;
;;;1525   		default:
;;;1526   			break;
;;;1527   	}
;;;1528   
;;;1529   	// 启动UART总线通讯超时判断
;;;1530   	BLE_PROTOCOL_StartTimeoutCheckTask();
;;;1531   	
;;;1532   	// 删除命令帧
;;;1533   	pCB->rx.head ++;
;;;1534   	pCB->rx.head %= BLE_PROTOCOL_RX_QUEUE_SIZE;
;;;1535   }
000056  b017              ADD      sp,sp,#0x5c
000058  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.92|
00005c  78e0              LDRB     r0,[r4,#3]            ;833
00005e  4ef8              LDR      r6,|L2.1088|
000060  f8df83e0          LDR      r8,|L2.1092|
000064  f04f0a01          MOV      r10,#1                ;862
000068  2830              CMP      r0,#0x30              ;838
00006a  d074              BEQ      |L2.342|
00006c  dc18              BGT      |L2.160|
00006e  f1a00010          SUB      r0,r0,#0x10           ;838
000072  49f5              LDR      r1,|L2.1096|
000074  f8dfb3d4          LDR      r11,|L2.1100|
000078  f44f2380          MOV      r3,#0x40000           ;859
00007c  f44f1260          MOV      r2,#0x380000          ;1221
000080  2817              CMP      r0,#0x17              ;838
000082  d25c              BCS      |L2.318|
000084  e8dff000          TBB      [pc,r0]               ;838
000088  2d5c6889          DCB      0x2d,0x5c,0x68,0x89
00008c  ba5bfcfb          DCB      0xba,0x5b,0xfc,0xfb
000090  faf9f85b          DCB      0xfa,0xf9,0xf8,0x5b
000094  5b5b5b5b          DCB      0x5b,0x5b,0x5b,0x5b
000098  5b5bf75b          DCB      0x5b,0x5b,0xf7,0x5b
00009c  f65bf500          DCB      0xf6,0x5b,0xf5,0x00
                  |L2.160|
0000a0  2847              CMP      r0,#0x47              ;838
0000a2  d074              BEQ      |L2.398|
0000a4  dc10              BGT      |L2.200|
0000a6  2834              CMP      r0,#0x34              ;838
0000a8  d072              BEQ      |L2.400|
0000aa  dc06              BGT      |L2.186|
0000ac  2831              CMP      r0,#0x31              ;838
0000ae  d070              BEQ      |L2.402|
0000b0  2832              CMP      r0,#0x32              ;838
0000b2  d06f              BEQ      |L2.404|
0000b4  2833              CMP      r0,#0x33              ;838
                  |L2.182|
0000b6  d142              BNE      |L2.318|
0000b8  e20c              B        |L2.1236|
                  |L2.186|
0000ba  2837              CMP      r0,#0x37              ;838
0000bc  d06b              BEQ      |L2.406|
0000be  2839              CMP      r0,#0x39              ;838
0000c0  d06a              BEQ      |L2.408|
0000c2  2840              CMP      r0,#0x40              ;838
0000c4  d1f7              BNE      |L2.182|
0000c6  e2f3              B        |L2.1712|
                  |L2.200|
0000c8  2860              CMP      r0,#0x60              ;838
0000ca  d07d              BEQ      |L2.456|
0000cc  dc04              BGT      |L2.216|
0000ce  2849              CMP      r0,#0x49              ;838
0000d0  d07b              BEQ      |L2.458|
0000d2  284a              CMP      r0,#0x4a              ;838
0000d4  d1ef              BNE      |L2.182|
0000d6  e364              B        |L2.1954|
                  |L2.216|
0000d8  2863              CMP      r0,#0x63              ;838
0000da  d077              BEQ      |L2.460|
0000dc  2865              CMP      r0,#0x65              ;838
0000de  d1ea              BNE      |L2.182|
0000e0  e2de              B        |L2.1696|
0000e2  2203              MOVS     r2,#3                 ;842
0000e4  f44f11b2          MOV      r1,#0x164000          ;842
0000e8  a814              ADD      r0,sp,#0x50           ;842
0000ea  f7fffffe          BL       SPI_FLASH_ReadArray
0000ee  2203              MOVS     r2,#3                 ;843
0000f0  49d7              LDR      r1,|L2.1104|
0000f2  a813              ADD      r0,sp,#0x4c           ;843
0000f4  f7fffffe          BL       SPI_FLASH_ReadArray
0000f8  2055              MOVS     r0,#0x55              ;844
0000fa  f7fffffe          BL       BLE_PROTOCOL_TxAddData
0000fe  2010              MOVS     r0,#0x10              ;845
000100  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000104  2000              MOVS     r0,#0                 ;846
000106  f7fffffe          BL       BLE_PROTOCOL_TxAddData
00010a  f89d0050          LDRB     r0,[sp,#0x50]         ;847
00010e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000112  f89d0051          LDRB     r0,[sp,#0x51]         ;848
000116  f7fffffe          BL       BLE_PROTOCOL_TxAddData
00011a  f89d0052          LDRB     r0,[sp,#0x52]         ;849
00011e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000122  f89d004c          LDRB     r0,[sp,#0x4c]         ;850
000126  f7fffffe          BL       BLE_PROTOCOL_TxAddData
00012a  f89d004d          LDRB     r0,[sp,#0x4d]         ;851
00012e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000132  f89d004e          LDRB     r0,[sp,#0x4e]         ;852
000136  f7fffffe          BL       BLE_PROTOCOL_TxAddData
00013a  f7fffffe          BL       BLE_PROTOCOL_TxAddFrame
                  |L2.318|
00013e  e378              B        |L2.2098|
000140  4619              MOV      r1,r3                 ;859
000142  2000              MOVS     r0,#0                 ;859
000144  f7fffffe          BL       SPI_FLASH_EraseRoom
000148  f8cb7008          STR      r7,[r11,#8]           ;861  ; allPacketSize
00014c  2101              MOVS     r1,#1                 ;862
00014e  2011              MOVS     r0,#0x11              ;862
000150  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000154  e36d              B        |L2.2098|
                  |L2.342|
000156  e168              B        |L2.1066|
000158  7920              LDRB     r0,[r4,#4]            ;868
00015a  1f00              SUBS     r0,r0,#4              ;868
00015c  b2c2              UXTB     r2,r0                 ;868
00015e  7961              LDRB     r1,[r4,#5]            ;869
000160  79a3              LDRB     r3,[r4,#6]            ;870
000162  79e5              LDRB     r5,[r4,#7]            ;871
000164  7a20              LDRB     r0,[r4,#8]            ;872
000166  0609              LSLS     r1,r1,#24             ;873
000168  ea414103          ORR      r1,r1,r3,LSL #16      ;873
00016c  ea412105          ORR      r1,r1,r5,LSL #8       ;873
000170  4301              ORRS     r1,r1,r0              ;873
000172  f1040009          ADD      r0,r4,#9              ;875
000176  f7fffffe          BL       SPI_FLASH_WriteWithCheck
00017a  4601              MOV      r1,r0                 ;875
00017c  2012              MOVS     r0,#0x12              ;878
00017e  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000182  f8db0008          LDR      r0,[r11,#8]           ;879  ; allPacketSize
000186  1c40              ADDS     r0,r0,#1              ;879
000188  f8cb0008          STR      r0,[r11,#8]           ;879  ; allPacketSize
00018c  e351              B        |L2.2098|
                  |L2.398|
00018e  e2fb              B        |L2.1928|
                  |L2.400|
000190  e1bb              B        |L2.1290|
                  |L2.402|
000192  e169              B        |L2.1128|
                  |L2.404|
000194  e183              B        |L2.1182|
                  |L2.406|
000196  e267              B        |L2.1640|
                  |L2.408|
000198  e2a6              B        |L2.1768|
00019a  f8db0008          LDR      r0,[r11,#8]           ;886  ; allPacketSize
00019e  0e01              LSRS     r1,r0,#24             ;886
0001a0  f88d1014          STRB     r1,[sp,#0x14]         ;886
0001a4  0c01              LSRS     r1,r0,#16             ;887
0001a6  f88d1015          STRB     r1,[sp,#0x15]         ;887
0001aa  0a01              LSRS     r1,r0,#8              ;888
0001ac  f88d1016          STRB     r1,[sp,#0x16]         ;888
0001b0  f88d0017          STRB     r0,[sp,#0x17]         ;889
0001b4  4da7              LDR      r5,|L2.1108|
0001b6  4628              MOV      r0,r5                 ;891
0001b8  f7fffffe          BL       SPI_FLASH_EraseSector
0001bc  f44f14b1          MOV      r4,#0x162000          ;892
0001c0  4620              MOV      r0,r4                 ;892
0001c2  f7fffffe          BL       SPI_FLASH_EraseSector
0001c6  e002              B        |L2.462|
                  |L2.456|
0001c8  e25f              B        |L2.1674|
                  |L2.458|
0001ca  e2e1              B        |L2.1936|
                  |L2.460|
0001cc  e260              B        |L2.1680|
                  |L2.462|
0001ce  21aa              MOVS     r1,#0xaa              ;894
0001d0  4628              MOV      r0,r5                 ;894
0001d2  f7fffffe          BL       SPI_FLASH_WriteByte
0001d6  2204              MOVS     r2,#4                 ;895
0001d8  4621              MOV      r1,r4                 ;895
0001da  a805              ADD      r0,sp,#0x14           ;895
0001dc  f7fffffe          BL       SPI_FLASH_WriteArray
0001e0  2013              MOVS     r0,#0x13              ;897
0001e2  f7fffffe          BL       BLE_PROTOCOL_SendCmdAck
0001e6  f8cda000          STR      r10,[sp,#0]           ;899
0001ea  03eb              LSLS     r3,r5,#15             ;899
0001ec  4a9a              LDR      r2,|L2.1112|
0001ee  21c8              MOVS     r1,#0xc8              ;899
0001f0  2003              MOVS     r0,#3                 ;899
0001f2  f8cda004          STR      r10,[sp,#4]           ;899
0001f6  f7fffffe          BL       TIMER_AddTask
0001fa  e31a              B        |L2.2098|
0001fc  7960              LDRB     r0,[r4,#5]            ;910
0001fe  79a3              LDRB     r3,[r4,#6]            ;911
000200  0781              LSLS     r1,r0,#30             ;914
000202  d501              BPL      |L2.520|
000204  2b01              CMP      r3,#1                 ;914
000206  d042              BEQ      |L2.654|
                  |L2.520|
000208  7777              STRB     r7,[r6,#0x1d]         ;920
                  |L2.522|
00020a  0741              LSLS     r1,r0,#29             ;922
00020c  d501              BPL      |L2.530|
00020e  2b01              CMP      r3,#1                 ;922
000210  d040              BEQ      |L2.660|
                  |L2.530|
000212  77f7              STRB     r7,[r6,#0x1f]         ;928
                  |L2.532|
000214  0700              LSLS     r0,r0,#28             ;930
000216  d501              BPL      |L2.540|
000218  2b01              CMP      r3,#1                 ;930
00021a  d041              BEQ      |L2.672|
                  |L2.540|
00021c  77b7              STRB     r7,[r6,#0x1e]         ;936
                  |L2.542|
00021e  f8067f3a          STRB     r7,[r6,#0x3a]!        ;939
000222  2065              MOVS     r0,#0x65              ;940
000224  7070              STRB     r0,[r6,#1]            ;940
000226  f886a002          STRB     r10,[r6,#2]           ;941
00022a  2102              MOVS     r1,#2                 ;942
00022c  7131              STRB     r1,[r6,#4]            ;942
00022e  2103              MOVS     r1,#3                 ;943
000230  71b1              STRB     r1,[r6,#6]            ;943
000232  f8161c1d          LDRB     r1,[r6,#-0x1d]        ;945  ; dut_info
000236  3e3a              SUBS     r6,r6,#0x3a           ;945
000238  b379              CBZ      r1,|L2.666|
00023a  f886703d          STRB     r7,[r6,#0x3d]         ;951
                  |L2.574|
00023e  7ff1              LDRB     r1,[r6,#0x1f]         ;954  ; dut_info
000240  b361              CBZ      r1,|L2.668|
000242  f886703f          STRB     r7,[r6,#0x3f]         ;960
                  |L2.582|
000246  7fb1              LDRB     r1,[r6,#0x1e]         ;963  ; dut_info
000248  b349              CBZ      r1,|L2.670|
00024a  f8867041          STRB     r7,[r6,#0x41]         ;969
                  |L2.590|
00024e  f04f30ff          MOV      r0,#0xffffffff        ;971
000252  e9cd0a00          STRD     r0,r10,[sp,#0]        ;971
000256  4a81              LDR      r2,|L2.1116|
000258  f44f7196          MOV      r1,#0x12c             ;971
00025c  2006              MOVS     r0,#6                 ;971
00025e  f7fffffe          BL       TIMER_AddTask
000262  2101              MOVS     r1,#1                 ;978
000264  2014              MOVS     r0,#0x14              ;978
000266  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
00026a  487d              LDR      r0,|L2.1120|
00026c  f8807547          STRB     r7,[r0,#0x547]        ;980
000270  e007              B        |L2.642|
000272  e1d6              B        |L2.1570|
000274  e1b9              B        |L2.1514|
000276  e185              B        |L2.1412|
000278  e0c3              B        |L2.1026|
00027a  e0b3              B        |L2.996|
00027c  e077              B        |L2.878|
00027e  e044              B        |L2.778|
000280  e01a              B        |L2.696|
                  |L2.642|
000282  f8807546          STRB     r7,[r0,#0x546]        ;981
000286  2001              MOVS     r0,#1                 ;982
000288  f7fffffe          BL       CAN_UP_RESET
00028c  e2d1              B        |L2.2098|
                  |L2.654|
00028e  f886a01d          STRB     r10,[r6,#0x1d]        ;916
000292  e7ba              B        |L2.522|
                  |L2.660|
000294  f886a01f          STRB     r10,[r6,#0x1f]        ;924
000298  e7bc              B        |L2.532|
                  |L2.666|
00029a  e004              B        |L2.678|
                  |L2.668|
00029c  e006              B        |L2.684|
                  |L2.670|
00029e  e008              B        |L2.690|
                  |L2.672|
0002a0  f886a01e          STRB     r10,[r6,#0x1e]        ;932
0002a4  e7bb              B        |L2.542|
                  |L2.678|
0002a6  f886003d          STRB     r0,[r6,#0x3d]         ;947
0002aa  e7c8              B        |L2.574|
                  |L2.684|
0002ac  f886003f          STRB     r0,[r6,#0x3f]         ;956
0002b0  e7c9              B        |L2.582|
                  |L2.690|
0002b2  f8860041          STRB     r0,[r6,#0x41]         ;965
0002b6  e7ca              B        |L2.590|
                  |L2.696|
0002b8  7964              LDRB     r4,[r4,#5]            ;992
0002ba  07e0              LSLS     r0,r4,#31             ;993
0002bc  d005              BEQ      |L2.714|
0002be  6237              STR      r7,[r6,#0x20]         ;997  ; dut_info
0002c0  f44f3100          MOV      r1,#0x20000           ;998
0002c4  4618              MOV      r0,r3                 ;998
0002c6  f7fffffe          BL       SPI_FLASH_EraseRoom
                  |L2.714|
0002ca  07a0              LSLS     r0,r4,#30             ;1001
0002cc  d506              BPL      |L2.732|
0002ce  6277              STR      r7,[r6,#0x24]         ;1004  ; dut_info
0002d0  f44f1180          MOV      r1,#0x100000          ;1005
0002d4  f44f20c0          MOV      r0,#0x60000           ;1005
0002d8  f7fffffe          BL       SPI_FLASH_EraseRoom
                  |L2.732|
0002dc  0760              LSLS     r0,r4,#29             ;1007
0002de  d506              BPL      |L2.750|
0002e0  62b7              STR      r7,[r6,#0x28]         ;1010  ; dut_info
0002e2  f44f0160          MOV      r1,#0xe00000          ;1011
0002e6  f44f1000          MOV      r0,#0x200000          ;1011
0002ea  f7fffffe          BL       SPI_FLASH_EraseRoom
                  |L2.750|
0002ee  0720              LSLS     r0,r4,#28             ;1014
0002f0  d503              BPL      |L2.762|
0002f2  f44f10b0          MOV      r0,#0x160000          ;1017
0002f6  f7fffffe          BL       SPI_FLASH_EraseSector
                  |L2.762|
0002fa  485a              LDR      r0,|L2.1124|
0002fc  f7fffffe          BL       SPI_FLASH_EraseSector
000300  2101              MOVS     r1,#1                 ;1021
000302  2016              MOVS     r0,#0x16              ;1021
000304  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000308  e293              B        |L2.2098|
                  |L2.778|
00030a  7920              LDRB     r0,[r4,#4]            ;1027
00030c  1f80              SUBS     r0,r0,#6              ;1027
00030e  b2c0              UXTB     r0,r0                 ;1027
000310  a906              ADD      r1,sp,#0x18           ;777
000312  e004              B        |L2.798|
                  |L2.788|
000314  1962              ADDS     r2,r4,r5              ;1031
000316  7ad2              LDRB     r2,[r2,#0xb]          ;1031
000318  554a              STRB     r2,[r1,r5]            ;1031
00031a  1c6d              ADDS     r5,r5,#1              ;1029
00031c  b2ed              UXTB     r5,r5                 ;1029
                  |L2.798|
00031e  4285              CMP      r5,r0                 ;1029
000320  d3f8              BCC      |L2.788|
000322  f88d002c          STRB     r0,[sp,#0x2c]         ;1033
000326  7960              LDRB     r0,[r4,#5]            ;1034
000328  f88d002d          STRB     r0,[sp,#0x2d]         ;1034
00032c  79a0              LDRB     r0,[r4,#6]            ;1035
00032e  f88d002e          STRB     r0,[sp,#0x2e]         ;1035
000332  79e0              LDRB     r0,[r4,#7]            ;1036
000334  f88d002f          STRB     r0,[sp,#0x2f]         ;1036
000338  7a20              LDRB     r0,[r4,#8]            ;1037
00033a  f88d0030          STRB     r0,[sp,#0x30]         ;1037
00033e  7a60              LDRB     r0,[r4,#9]            ;1038
000340  f88d0031          STRB     r0,[sp,#0x31]         ;1038
000344  7aa0              LDRB     r0,[r4,#0xa]          ;1039
000346  f88d0032          STRB     r0,[sp,#0x32]         ;1039
00034a  4c46              LDR      r4,|L2.1124|
00034c  4620              MOV      r0,r4                 ;1043
00034e  f7fffffe          BL       SPI_FLASH_EraseSector
000352  221e              MOVS     r2,#0x1e              ;1044
000354  4621              MOV      r1,r4                 ;1044
000356  a806              ADD      r0,sp,#0x18           ;1044
000358  f7fffffe          BL       SPI_FLASH_WriteWithCheck
00035c  4604              MOV      r4,r0                 ;1044
00035e  b10c              CBZ      r4,|L2.868|
000360  f7fffffe          BL       DutInfoUpdata
                  |L2.868|
000364  4621              MOV      r1,r4                 ;1051
000366  2017              MOVS     r0,#0x17              ;1051
000368  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
00036c  e261              B        |L2.2098|
                  |L2.878|
00036e  221e              MOVS     r2,#0x1e              ;1056
000370  493c              LDR      r1,|L2.1124|
000372  a806              ADD      r0,sp,#0x18           ;1056
000374  f7fffffe          BL       SPI_FLASH_ReadArray
000378  f89d002c          LDRB     r0,[sp,#0x2c]         ;1057
00037c  28ff              CMP      r0,#0xff              ;1057
00037e  d102              BNE      |L2.902|
000380  200a              MOVS     r0,#0xa               ;1059
000382  f88d002c          STRB     r0,[sp,#0x2c]         ;1059
                  |L2.902|
000386  2055              MOVS     r0,#0x55              ;1061
000388  f7fffffe          BL       BLE_PROTOCOL_TxAddData
00038c  2018              MOVS     r0,#0x18              ;1062
00038e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000392  2000              MOVS     r0,#0                 ;1063
000394  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000398  f89d002d          LDRB     r0,[sp,#0x2d]         ;1064
00039c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
0003a0  f89d002e          LDRB     r0,[sp,#0x2e]         ;1065
0003a4  f7fffffe          BL       BLE_PROTOCOL_TxAddData
0003a8  f89d002f          LDRB     r0,[sp,#0x2f]         ;1066
0003ac  f7fffffe          BL       BLE_PROTOCOL_TxAddData
0003b0  f89d0030          LDRB     r0,[sp,#0x30]         ;1067
0003b4  f7fffffe          BL       BLE_PROTOCOL_TxAddData
0003b8  f89d0031          LDRB     r0,[sp,#0x31]         ;1068
0003bc  f7fffffe          BL       BLE_PROTOCOL_TxAddData
0003c0  f89d0032          LDRB     r0,[sp,#0x32]         ;1069
0003c4  f7fffffe          BL       BLE_PROTOCOL_TxAddData
0003c8  ac06              ADD      r4,sp,#0x18           ;777
0003ca  e004              B        |L2.982|
                  |L2.972|
0003cc  5d60              LDRB     r0,[r4,r5]            ;1072
0003ce  f7fffffe          BL       BLE_PROTOCOL_TxAddData
0003d2  1c6d              ADDS     r5,r5,#1              ;1070
0003d4  b2ed              UXTB     r5,r5                 ;1070
                  |L2.982|
0003d6  f89d002c          LDRB     r0,[sp,#0x2c]         ;1070
0003da  42a8              CMP      r0,r5                 ;1070
0003dc  d8f6              BHI      |L2.972|
0003de  f7fffffe          BL       BLE_PROTOCOL_TxAddFrame
0003e2  e226              B        |L2.2098|
                  |L2.996|
0003e4  460d              MOV      r5,r1                 ;1079
0003e6  4628              MOV      r0,r5                 ;1079
0003e8  f7fffffe          BL       SPI_FLASH_EraseSector
0003ec  7961              LDRB     r1,[r4,#5]            ;1080
0003ee  f8861042          STRB     r1,[r6,#0x42]         ;1080
0003f2  4628              MOV      r0,r5                 ;1081
0003f4  f7fffffe          BL       SPI_FLASH_WriteByte
0003f8  2101              MOVS     r1,#1                 ;1082
0003fa  2019              MOVS     r0,#0x19              ;1082
0003fc  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000400  e217              B        |L2.2098|
                  |L2.1026|
000402  4608              MOV      r0,r1                 ;1085
000404  f7fffffe          BL       SPI_FLASH_ReadByte
000408  f8060f42          STRB     r0,[r6,#0x42]!        ;1085
00040c  2055              MOVS     r0,#0x55              ;1086
00040e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000412  201a              MOVS     r0,#0x1a              ;1087
000414  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000418  2000              MOVS     r0,#0                 ;1088
00041a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
00041e  7830              LDRB     r0,[r6,#0]            ;1089  ; dut_info
000420  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000424  f7fffffe          BL       BLE_PROTOCOL_TxAddFrame
000428  e203              B        |L2.2098|
                  |L2.1066|
00042a  7922              LDRB     r2,[r4,#4]            ;1094
00042c  f44f11b0          MOV      r1,#0x160000          ;1096
000430  1d60              ADDS     r0,r4,#5              ;1096
000432  f7fffffe          BL       SPI_FLASH_WriteWithCheck
000436  4601              MOV      r1,r0                 ;1096
000438  2030              MOVS     r0,#0x30              ;1099
00043a  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
00043e  e1f8              B        |L2.2098|
                  |L2.1088|
                          DCD      dut_info
                  |L2.1092|
                          DCD      paramCB
                  |L2.1096|
                          DCD      0x00169000
                  |L2.1100|
                          DCD      ||.data||
                  |L2.1104|
                          DCD      0x00165000
                  |L2.1108|
                          DCD      0x00161000
                  |L2.1112|
                          DCD      IAP_JumpToAppFun
                  |L2.1116|
                          DCD      dutProgressReport
                  |L2.1120|
                          DCD      canProtocolCB+0x4000
                  |L2.1124|
                          DCD      0x00163000
                  |L2.1128|
000468  7920              LDRB     r0,[r4,#4]            ;1104
00046a  1f00              SUBS     r0,r0,#4              ;1104
00046c  b2c2              UXTB     r2,r0                 ;1104
00046e  7960              LDRB     r0,[r4,#5]            ;1105
000470  79a1              LDRB     r1,[r4,#6]            ;1106
000472  79e5              LDRB     r5,[r4,#7]            ;1107
000474  7a23              LDRB     r3,[r4,#8]            ;1108
000476  0600              LSLS     r0,r0,#24             ;1109
000478  ea404001          ORR      r0,r0,r1,LSL #16      ;1109
00047c  ea402105          ORR      r1,r0,r5,LSL #8       ;1109
000480  4319              ORRS     r1,r1,r3              ;1109
000482  f5011100          ADD      r1,r1,#0x200000       ;1111
000486  f1040009          ADD      r0,r4,#9              ;1111
00048a  f7fffffe          BL       SPI_FLASH_WriteWithCheck
00048e  4601              MOV      r1,r0                 ;1111
000490  6ab0              LDR      r0,[r6,#0x28]         ;1112  ; dut_info
000492  1c40              ADDS     r0,r0,#1              ;1112
000494  62b0              STR      r0,[r6,#0x28]         ;1112  ; dut_info
000496  2031              MOVS     r0,#0x31              ;1114
000498  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
00049c  e1c9              B        |L2.2098|
                  |L2.1182|
00049e  7920              LDRB     r0,[r4,#4]            ;1119
0004a0  1f00              SUBS     r0,r0,#4              ;1119
0004a2  b2c2              UXTB     r2,r0                 ;1119
0004a4  7961              LDRB     r1,[r4,#5]            ;1120
0004a6  79a3              LDRB     r3,[r4,#6]            ;1121
0004a8  79e5              LDRB     r5,[r4,#7]            ;1122
0004aa  7a20              LDRB     r0,[r4,#8]            ;1123
0004ac  0609              LSLS     r1,r1,#24             ;1124
0004ae  ea414103          ORR      r1,r1,r3,LSL #16      ;1124
0004b2  ea412105          ORR      r1,r1,r5,LSL #8       ;1124
0004b6  4301              ORRS     r1,r1,r0              ;1124
0004b8  f5012180          ADD      r1,r1,#0x40000        ;1125
0004bc  f1040009          ADD      r0,r4,#9              ;1125
0004c0  f7fffffe          BL       SPI_FLASH_WriteWithCheck
0004c4  4601              MOV      r1,r0                 ;1125
0004c6  6a30              LDR      r0,[r6,#0x20]         ;1126  ; dut_info
0004c8  1c40              ADDS     r0,r0,#1              ;1126
0004ca  6230              STR      r0,[r6,#0x20]         ;1126  ; dut_info
0004cc  2032              MOVS     r0,#0x32              ;1128
0004ce  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
0004d2  e1ae              B        |L2.2098|
                  |L2.1236|
0004d4  7920              LDRB     r0,[r4,#4]            ;1132
0004d6  1f00              SUBS     r0,r0,#4              ;1132
0004d8  b2c2              UXTB     r2,r0                 ;1132
0004da  7963              LDRB     r3,[r4,#5]            ;1133
0004dc  79a1              LDRB     r1,[r4,#6]            ;1134
0004de  79e5              LDRB     r5,[r4,#7]            ;1135
0004e0  7a20              LDRB     r0,[r4,#8]            ;1136
0004e2  061b              LSLS     r3,r3,#24             ;1137
0004e4  ea434101          ORR      r1,r3,r1,LSL #16      ;1137
0004e8  ea412105          ORR      r1,r1,r5,LSL #8       ;1137
0004ec  4301              ORRS     r1,r1,r0              ;1137
0004ee  f50121c0          ADD      r1,r1,#0x60000        ;1138
0004f2  f1040009          ADD      r0,r4,#9              ;1138
0004f6  f7fffffe          BL       SPI_FLASH_WriteWithCheck
0004fa  4601              MOV      r1,r0                 ;1138
0004fc  6a70              LDR      r0,[r6,#0x24]         ;1141  ; dut_info
0004fe  1c40              ADDS     r0,r0,#1              ;1141
000500  6270              STR      r0,[r6,#0x24]         ;1141  ; dut_info
000502  2033              MOVS     r0,#0x33              ;1142
000504  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
                  |L2.1288|
000508  e193              B        |L2.2098|
                  |L2.1290|
00050a  7964              LDRB     r4,[r4,#5]            ;1147
00050c  b124              CBZ      r4,|L2.1304|
00050e  2c01              CMP      r4,#1                 ;1148
000510  d013              BEQ      |L2.1338|
000512  2c02              CMP      r4,#2                 ;1148
000514  d131              BNE      |L2.1402|
000516  e020              B        |L2.1370|
                  |L2.1304|
000518  f44f15b3          MOV      r5,#0x166000          ;1151
00051c  4628              MOV      r0,r5                 ;1151
00051e  f7fffffe          BL       SPI_FLASH_EraseSector
000522  8c30              LDRH     r0,[r6,#0x20]         ;1152  ; dut_info
000524  0a01              LSRS     r1,r0,#8              ;1152
000526  f88d1010          STRB     r1,[sp,#0x10]         ;1152
00052a  f88d0011          STRB     r0,[sp,#0x11]         ;1153
00052e  2202              MOVS     r2,#2                 ;1154
000530  4629              MOV      r1,r5                 ;1154
000532  a804              ADD      r0,sp,#0x10           ;1154
000534  f7fffffe          BL       SPI_FLASH_WriteArray
000538  e01f              B        |L2.1402|
                  |L2.1338|
00053a  4dc5              LDR      r5,|L2.2128|
00053c  4628              MOV      r0,r5                 ;1157
00053e  f7fffffe          BL       SPI_FLASH_EraseSector
000542  8cb0              LDRH     r0,[r6,#0x24]         ;1158  ; dut_info
000544  0a01              LSRS     r1,r0,#8              ;1158
000546  f88d1010          STRB     r1,[sp,#0x10]         ;1158
00054a  f88d0011          STRB     r0,[sp,#0x11]         ;1159
00054e  2202              MOVS     r2,#2                 ;1160
000550  4629              MOV      r1,r5                 ;1160
000552  a804              ADD      r0,sp,#0x10           ;1160
000554  f7fffffe          BL       SPI_FLASH_WriteArray
000558  e00f              B        |L2.1402|
                  |L2.1370|
00055a  f44f15b4          MOV      r5,#0x168000          ;1163
00055e  4628              MOV      r0,r5                 ;1163
000560  f7fffffe          BL       SPI_FLASH_EraseSector
000564  8d30              LDRH     r0,[r6,#0x28]         ;1164  ; dut_info
000566  0a01              LSRS     r1,r0,#8              ;1164
000568  f88d1010          STRB     r1,[sp,#0x10]         ;1164
00056c  f88d0011          STRB     r0,[sp,#0x11]         ;1165
000570  2202              MOVS     r2,#2                 ;1166
000572  4629              MOV      r1,r5                 ;1166
000574  a804              ADD      r0,sp,#0x10           ;1166
000576  f7fffffe          BL       SPI_FLASH_WriteArray
                  |L2.1402|
00057a  4621              MOV      r1,r4                 ;1172
00057c  2034              MOVS     r0,#0x34              ;1172
00057e  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000582  e156              B        |L2.2098|
                  |L2.1412|
000584  f8b80210          LDRH     r0,[r8,#0x210]        ;1188  ; paramCB
000588  b120              CBZ      r0,|L2.1428|
00058a  2100              MOVS     r1,#0                 ;1190
00058c  2023              MOVS     r0,#0x23              ;1190
00058e  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000592  e14e              B        |L2.2098|
                  |L2.1428|
000594  79a0              LDRB     r0,[r4,#6]            ;1197
000596  0200              LSLS     r0,r0,#8              ;1198
000598  79e1              LDRB     r1,[r4,#7]            ;1199
00059a  4408              ADD      r0,r0,r1              ;1199
00059c  0200              LSLS     r0,r0,#8              ;1200
00059e  7a21              LDRB     r1,[r4,#8]            ;1201
0005a0  4408              ADD      r0,r0,r1              ;1201
0005a2  0200              LSLS     r0,r0,#8              ;1202
0005a4  7a61              LDRB     r1,[r4,#9]            ;1203
0005a6  180f              ADDS     r7,r1,r0              ;1203
0005a8  f5b73f60          CMP      r7,#0x38000           ;1205
0005ac  d904              BLS      |L2.1464|
0005ae  2100              MOVS     r1,#0                 ;1208
0005b0  2023              MOVS     r0,#0x23              ;1208
0005b2  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
0005b6  e13c              B        |L2.2098|
                  |L2.1464|
0005b8  2600              MOVS     r6,#0                 ;1219
0005ba  4615              MOV      r5,r2                 ;1221
                  |L2.1468|
0005bc  eb053006          ADD      r0,r5,r6,LSL #12      ;1221
0005c0  f7fffffe          BL       SPI_FLASH_EraseSector
0005c4  1c76              ADDS     r6,r6,#1              ;1219
0005c6  b2b6              UXTH     r6,r6                 ;1219
0005c8  2e40              CMP      r6,#0x40              ;1219
0005ca  d3f7              BCC      |L2.1468|
0005cc  f8cb7004          STR      r7,[r11,#4]           ;1225  ; recDataNum
0005d0  7960              LDRB     r0,[r4,#5]            ;1226
0005d2  f88b0000          STRB     r0,[r11,#0]           ;1226
0005d6  2101              MOVS     r1,#1                 ;1229
0005d8  2023              MOVS     r0,#0x23              ;1229
0005da  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
0005de  2009              MOVS     r0,#9                 ;1232
0005e0  f7fffffe          BL       STATE_EnterState
0005e4  f888a1f4          STRB     r10,[r8,#0x1f4]       ;1233
0005e8  e123              B        |L2.2098|
                  |L2.1514|
0005ea  7920              LDRB     r0,[r4,#4]            ;1240
0005ec  2804              CMP      r0,#4                 ;1240
0005ee  d38b              BCC      |L2.1288|
0005f0  7960              LDRB     r0,[r4,#5]            ;1246
0005f2  0200              LSLS     r0,r0,#8              ;1247
0005f4  79a1              LDRB     r1,[r4,#6]            ;1248
0005f6  4408              ADD      r0,r0,r1              ;1248
0005f8  0200              LSLS     r0,r0,#8              ;1249
0005fa  79e1              LDRB     r1,[r4,#7]            ;1250
0005fc  4408              ADD      r0,r0,r1              ;1250
0005fe  0200              LSLS     r0,r0,#8              ;1251
000600  7a21              LDRB     r1,[r4,#8]            ;1252
000602  4408              ADD      r0,r0,r1              ;1252
000604  eb0211c0          ADD      r1,r2,r0,LSL #7       ;1254
000608  2280              MOVS     r2,#0x80              ;1254
00060a  f1040009          ADD      r0,r4,#9              ;1254
00060e  f7fffffe          BL       SPI_FLASH_WriteWithCheck
000612  b120              CBZ      r0,|L2.1566|
000614  2100              MOVS     r1,#0                 ;1256
                  |L2.1558|
000616  2025              MOVS     r0,#0x25              ;1256
000618  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
00061c  e109              B        |L2.2098|
                  |L2.1566|
00061e  2101              MOVS     r1,#1                 ;1256
000620  e7f9              B        |L2.1558|
                  |L2.1570|
000622  f8db0004          LDR      r0,[r11,#4]           ;1262  ; recDataNum
000626  f7fffffe          BL       SPI_FlashReadForCrc8
00062a  f89b1000          LDRB     r1,[r11,#0]           ;1264  ; recCrc8
00062e  4281              CMP      r1,r0                 ;1264
000630  d115              BNE      |L2.1630|
000632  f04f402a          MOV      r0,#0xaa000000        ;1266
000636  9015              STR      r0,[sp,#0x54]         ;1266
000638  f8db0004          LDR      r0,[r11,#4]           ;1267  ; recDataNum
00063c  9016              STR      r0,[sp,#0x58]         ;1267
00063e  f44f1070          MOV      r0,#0x3c0000          ;1270
000642  9915              LDR      r1,[sp,#0x54]         ;1270
000644  f7fffffe          BL       SPI_FLASH_WriteWord
000648  4882              LDR      r0,|L2.2132|
00064a  9916              LDR      r1,[sp,#0x58]         ;1271
00064c  f7fffffe          BL       SPI_FLASH_WriteWord
000650  2101              MOVS     r1,#1                 ;1273
000652  2027              MOVS     r0,#0x27              ;1273
000654  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000658  f88871f4          STRB     r7,[r8,#0x1f4]        ;1276
00065c  e0e9              B        |L2.2098|
                  |L2.1630|
00065e  2100              MOVS     r1,#0                 ;1281
000660  2027              MOVS     r0,#0x27              ;1281
000662  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000666  e0e4              B        |L2.2098|
                  |L2.1640|
000668  7960              LDRB     r0,[r4,#5]            ;1289
00066a  2801              CMP      r0,#1                 ;1289
00066c  d004              BEQ      |L2.1656|
00066e  2802              CMP      r0,#2                 ;1294
000670  d005              BEQ      |L2.1662|
000672  2803              CMP      r0,#3                 ;1299
000674  d006              BEQ      |L2.1668|
000676  e0dc              B        |L2.2098|
                  |L2.1656|
000678  f7fffffe          BL       BLE_PROTOCOL_SendCmdSelectStatus1Ack
00067c  e0d9              B        |L2.2098|
                  |L2.1662|
00067e  f7fffffe          BL       BLE_PROTOCOL_SendCmdSelectStatus2Ack
000682  e0d6              B        |L2.2098|
                  |L2.1668|
000684  f7fffffe          BL       BLE_PROTOCOL_SendCmdSelectStatus3Ack
000688  e0d3              B        |L2.2098|
                  |L2.1674|
00068a  f7fffffe          BL       BLE_PROTOCOL_SendCmdGetRuningStateAck
00068e  e0d0              B        |L2.2098|
                  |L2.1680|
000690  f7fffffe          BL       PARAM_GetSpeed
000694  2800              CMP      r0,#0                 ;1317
000696  d102              BNE      |L2.1694|
000698  1e40              SUBS     r0,r0,#1              ;1320
00069a  f7fffffe          BL       BLE_PROTOCOL_SendHistoryData
                  |L2.1694|
00069e  e0c8              B        |L2.2098|
                  |L2.1696|
0006a0  f7fffffe          BL       PARAM_GetSpeed
0006a4  2800              CMP      r0,#0                 ;1333
0006a6  d102              BNE      |L2.1710|
0006a8  1e40              SUBS     r0,r0,#1              ;1338
0006aa  f7fffffe          BL       BLE_PROTOCOL_SendHistoryData
                  |L2.1710|
0006ae  e0c0              B        |L2.2098|
                  |L2.1712|
0006b0  7960              LDRB     r0,[r4,#5]            ;1346
0006b2  b148              CBZ      r0,|L2.1736|
0006b4  f88871fc          STRB     r7,[r8,#0x1fc]        ;1353
                  |L2.1720|
0006b8  22ff              MOVS     r2,#0xff              ;1357
0006ba  2104              MOVS     r1,#4                 ;1357
0006bc  4866              LDR      r0,|L2.2136|
0006be  f7fffffe          BL       __aeabi_memset
0006c2  2000              MOVS     r0,#0                 ;1358
0006c4  4964              LDR      r1,|L2.2136|
0006c6  e007              B        |L2.1752|
                  |L2.1736|
0006c8  f888a1fc          STRB     r10,[r8,#0x1fc]       ;1349
0006cc  e7f4              B        |L2.1720|
                  |L2.1742|
0006ce  1822              ADDS     r2,r4,r0              ;1360
0006d0  7992              LDRB     r2,[r2,#6]            ;1360
0006d2  540a              STRB     r2,[r1,r0]            ;1360
0006d4  1c40              ADDS     r0,r0,#1              ;1358
0006d6  b280              UXTH     r0,r0                 ;1358
                  |L2.1752|
0006d8  7922              LDRB     r2,[r4,#4]            ;1358
0006da  1e52              SUBS     r2,r2,#1              ;1358
0006dc  4282              CMP      r2,r0                 ;1358
0006de  dcf6              BGT      |L2.1742|
0006e0  2041              MOVS     r0,#0x41              ;1363
0006e2  f7fffffe          BL       BLE_PROTOCOL_SendCmdAck
0006e6  e0a4              B        |L2.2098|
                  |L2.1768|
0006e8  7960              LDRB     r0,[r4,#5]            ;1369
0006ea  b110              CBZ      r0,|L2.1778|
0006ec  2801              CMP      r0,#1                 ;1373
0006ee  d003              BEQ      |L2.1784|
0006f0  e004              B        |L2.1788|
                  |L2.1778|
0006f2  f8887274          STRB     r7,[r8,#0x274]        ;1371
0006f6  e001              B        |L2.1788|
                  |L2.1784|
0006f8  f888a274          STRB     r10,[r8,#0x274]       ;1375
                  |L2.1788|
0006fc  79a0              LDRB     r0,[r4,#6]            ;1383
0006fe  f888027e          STRB     r0,[r8,#0x27e]        ;1383
000702  79e0              LDRB     r0,[r4,#7]            ;1386
000704  0201              LSLS     r1,r0,#8              ;1387
000706  7a20              LDRB     r0,[r4,#8]            ;1388
000708  4308              ORRS     r0,r0,r1              ;1388
00070a  0201              LSLS     r1,r0,#8              ;1389
00070c  7a60              LDRB     r0,[r4,#9]            ;1390
00070e  4308              ORRS     r0,r0,r1              ;1390
000710  0201              LSLS     r1,r0,#8              ;1391
000712  7aa0              LDRB     r0,[r4,#0xa]          ;1392
000714  4308              ORRS     r0,r0,r1              ;1392
000716  f8985311          LDRB     r5,[r8,#0x311]        ;1395  ; paramCB
00071a  4e50              LDR      r6,|L2.2140|
00071c  b135              CBZ      r5,|L2.1836|
00071e  f7fffffe          BL       __aeabi_ui2f
000722  4631              MOV      r1,r6                 ;1397
000724  f7fffffe          BL       __aeabi_fmul
000728  f7fffffe          BL       __aeabi_f2uiz
                  |L2.1836|
00072c  f8c80278          STR      r0,[r8,#0x278]        ;1400  ; paramCB
000730  7ae0              LDRB     r0,[r4,#0xb]          ;1403
000732  f64f71ff          MOV      r1,#0xffff            ;1404
000736  ea012100          AND      r1,r1,r0,LSL #8       ;1404
00073a  7b20              LDRB     r0,[r4,#0xc]          ;1405
00073c  4308              ORRS     r0,r0,r1              ;1405
00073e  b13d              CBZ      r5,|L2.1872|
000740  f7fffffe          BL       __aeabi_ui2f
000744  4631              MOV      r1,r6                 ;1410
000746  f7fffffe          BL       __aeabi_fmul
00074a  f7fffffe          BL       __aeabi_f2uiz
00074e  b280              UXTH     r0,r0                 ;1410
                  |L2.1872|
000750  f8a8027c          STRH     r0,[r8,#0x27c]        ;1412
000754  7b60              LDRB     r0,[r4,#0xd]          ;1415
000756  f888027f          STRB     r0,[r8,#0x27f]        ;1415
00075a  7ba0              LDRB     r0,[r4,#0xe]          ;1416
00075c  f8880280          STRB     r0,[r8,#0x280]        ;1416
000760  f8980274          LDRB     r0,[r8,#0x274]        ;1419  ; paramCB
000764  b130              CBZ      r0,|L2.1908|
000766  2801              CMP      r0,#1                 ;1419
000768  d009              BEQ      |L2.1918|
00076a  2102              MOVS     r1,#2                 ;1430
00076c  203a              MOVS     r0,#0x3a              ;1430
00076e  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000772  e05e              B        |L2.2098|
                  |L2.1908|
000774  2101              MOVS     r1,#1                 ;1422
000776  203a              MOVS     r0,#0x3a              ;1422
000778  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
00077c  e059              B        |L2.2098|
                  |L2.1918|
00077e  2100              MOVS     r1,#0                 ;1426
000780  203a              MOVS     r0,#0x3a              ;1426
000782  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
000786  e054              B        |L2.2098|
                  |L2.1928|
000788  7960              LDRB     r0,[r4,#5]            ;1440
00078a  f88801ff          STRB     r0,[r8,#0x1ff]        ;1440
00078e  e050              B        |L2.2098|
                  |L2.1936|
000790  7960              LDRB     r0,[r4,#5]            ;1449
000792  2802              CMP      r0,#2                 ;1449
000794  d102              BNE      |L2.1948|
000796  79a0              LDRB     r0,[r4,#6]            ;1451
000798  f88801fd          STRB     r0,[r8,#0x1fd]        ;1451
                  |L2.1948|
00079c  f88871fe          STRB     r7,[r8,#0x1fe]        ;1454
0007a0  e047              B        |L2.2098|
                  |L2.1954|
0007a2  79a0              LDRB     r0,[r4,#6]            ;1466
0007a4  2803              CMP      r0,#3                 ;1466
0007a6  d002              BEQ      |L2.1966|
0007a8  2805              CMP      r0,#5                 ;1495
0007aa  d021              BEQ      |L2.2032|
0007ac  e041              B        |L2.2098|
                  |L2.1966|
0007ae  7960              LDRB     r0,[r4,#5]            ;1469
0007b0  b1a0              CBZ      r0,|L2.2012|
0007b2  f888a2da          STRB     r10,[r8,#0x2da]       ;1472
0007b6  7b20              LDRB     r0,[r4,#0xc]          ;1474
0007b8  7ae1              LDRB     r1,[r4,#0xb]          ;1474
0007ba  7aa2              LDRB     r2,[r4,#0xa]          ;1474
0007bc  7a63              LDRB     r3,[r4,#9]            ;1474
0007be  e9cd1002          STRD     r1,r0,[sp,#8]         ;1474
0007c2  e9cd3200          STRD     r3,r2,[sp,#0]         ;1474
0007c6  7a23              LDRB     r3,[r4,#8]            ;1474
0007c8  79e2              LDRB     r2,[r4,#7]            ;1474
0007ca  a125              ADR      r1,|L2.2144|
0007cc  482c              LDR      r0,|L2.2176|
0007ce  f7fffffe          BL       __2sprintf
0007d2  2101              MOVS     r1,#1                 ;1482
0007d4  204b              MOVS     r0,#0x4b              ;1482
0007d6  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
0007da  e005              B        |L2.2024|
                  |L2.2012|
0007dc  f88872da          STRB     r7,[r8,#0x2da]        ;1487
0007e0  2102              MOVS     r1,#2                 ;1489
0007e2  204b              MOVS     r0,#0x4b              ;1489
0007e4  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
                  |L2.2024|
0007e8  2001              MOVS     r0,#1                 ;1493
0007ea  f7fffffe          BL       NVM_SetDirtyFlag
0007ee  e020              B        |L2.2098|
                  |L2.2032|
0007f0  7960              LDRB     r0,[r4,#5]            ;1498
0007f2  b1a8              CBZ      r0,|L2.2080|
0007f4  f888a2ef          STRB     r10,[r8,#0x2ef]       ;1501
0007f8  7b22              LDRB     r2,[r4,#0xc]          ;1503
0007fa  7ae0              LDRB     r0,[r4,#0xb]          ;1503
0007fc  7aa1              LDRB     r1,[r4,#0xa]          ;1503
0007fe  7a63              LDRB     r3,[r4,#9]            ;1503
000800  e9cd0202          STRD     r0,r2,[sp,#8]         ;1503
000804  e9cd3100          STRD     r3,r1,[sp,#0]         ;1503
000808  481d              LDR      r0,|L2.2176|
00080a  7a23              LDRB     r3,[r4,#8]            ;1503
00080c  79e2              LDRB     r2,[r4,#7]            ;1503
00080e  a114              ADR      r1,|L2.2144|
000810  3015              ADDS     r0,r0,#0x15           ;1503
000812  f7fffffe          BL       __2sprintf
000816  2101              MOVS     r1,#1                 ;1511
000818  204b              MOVS     r0,#0x4b              ;1511
00081a  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
00081e  e005              B        |L2.2092|
                  |L2.2080|
000820  f88872ef          STRB     r7,[r8,#0x2ef]        ;1516
000824  2102              MOVS     r1,#2                 ;1518
000826  204b              MOVS     r0,#0x4b              ;1518
000828  f7fffffe          BL       BLE_PROTOCOL_SendCmdParamAck
                  |L2.2092|
00082c  2001              MOVS     r0,#1                 ;1522
00082e  f7fffffe          BL       NVM_SetDirtyFlag
                  |L2.2098|
000832  f7fffffe          BL       BLE_PROTOCOL_StartTimeoutCheckTask
000836  f8b90434          LDRH     r0,[r9,#0x434]        ;1533
00083a  1c40              ADDS     r0,r0,#1              ;1533
00083c  b280              UXTH     r0,r0                 ;1533
00083e  2105              MOVS     r1,#5                 ;1534
000840  fbb0f2f1          UDIV     r2,r0,r1              ;1534
000844  fb010012          MLS      r0,r1,r2,r0           ;1534
000848  f8a90434          STRH     r0,[r9,#0x434]        ;1534
00084c  e403              B        |L2.86|
;;;1536   
                          ENDP

00084e  0000              DCW      0x0000
                  |L2.2128|
                          DCD      0x00167000
                  |L2.2132|
                          DCD      0x003c0004
                  |L2.2136|
                          DCD      callringBuff
                  |L2.2140|
                          DCD      0x3f1f122b
                  |L2.2144|
000860  25303258          DCB      "%02X:%02X:%2X:%02X:%02X:%02X",0
000864  3a253032
000868  583a2532
00086c  583a2530
000870  32583a25
000874  3032583a
000878  25303258
00087c  00      
00087d  00                DCB      0
00087e  00                DCB      0
00087f  00                DCB      0
                  |L2.2176|
                          DCD      paramCB+0x2c6

                          AREA ||i.BLE_PROTOCOL_ConfirmTempCmdFrameBuff||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_ConfirmTempCmdFrameBuff PROC
;;;432    // 将临时缓冲区添加到命令帧缓冲区中，其本质操作是承认临时缓冲区数据有效
;;;433    BOOL BLE_PROTOCOL_ConfirmTempCmdFrameBuff(BLE_PROTOCOL_CB* pCB)
000000  2800              CMP      r0,#0
;;;434    {
000002  d01a              BEQ      |L3.58|
;;;435    	BLE_PROTOCOL_RX_CMD_FRAME* pCmdFrame = NULL;
;;;436    	
;;;437    	// 参数合法性检验
;;;438    	if(NULL == pCB)
;;;439    	{
;;;440    		return FALSE;
;;;441    	}
;;;442    
;;;443    	// 临时缓冲区为空，不予添加
;;;444    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
000004  f8b01436          LDRH     r1,[r0,#0x436]
000008  224d              MOVS     r2,#0x4d
00000a  434a              MULS     r2,r1,r2
00000c  eb000242          ADD      r2,r0,r2,LSL #1
;;;445    	if(0 == pCmdFrame->length)
000010  f8b221ca          LDRH     r2,[r2,#0x1ca]
000014  b19a              CBZ      r2,|L3.62|
;;;446    	{
;;;447    		return FALSE;
;;;448    	}
;;;449    
;;;450    	// 添加
;;;451    	pCB->rx.end ++;
000016  1c49              ADDS     r1,r1,#1
000018  b289              UXTH     r1,r1
;;;452    	pCB->rx.end %= BLE_PROTOCOL_RX_QUEUE_SIZE;
00001a  2205              MOVS     r2,#5
00001c  fbb1f3f2          UDIV     r3,r1,r2
000020  fb021113          MLS      r1,r2,r3,r1
000024  f8a01436          STRH     r1,[r0,#0x436]
;;;453    	pCB->rx.cmdQueue[pCB->rx.end].length = 0;	// 该行的作用是将新的添加位置有效数据个数清零，以便将这个位置当做临时帧缓冲区
000028  2200              MOVS     r2,#0
00002a  234d              MOVS     r3,#0x4d
00002c  4359              MULS     r1,r3,r1
00002e  eb000041          ADD      r0,r0,r1,LSL #1
000032  f8a021ca          STRH     r2,[r0,#0x1ca]
;;;454    	
;;;455    	return TRUE;
000036  2001              MOVS     r0,#1
;;;456    }
000038  4770              BX       lr
                  |L3.58|
00003a  2000              MOVS     r0,#0                 ;440
00003c  4770              BX       lr
                  |L3.62|
00003e  2000              MOVS     r0,#0                 ;447
000040  4770              BX       lr
;;;457    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_DataStructInit||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_DataStructInit PROC
;;;367    // 数据结构初始化
;;;368    void BLE_PROTOCOL_DataStructInit(BLE_PROTOCOL_CB* pCB)
000000  2800              CMP      r0,#0
;;;369    {
000002  d02a              BEQ      |L4.90|
;;;370    	uint16 i;
;;;371    	
;;;372    	// 参数合法性检验
;;;373    	if (NULL == pCB)
;;;374    	{
;;;375    		return;
;;;376    	}
;;;377    
;;;378    	pCB->tx.txBusy = FALSE;
000004  2200              MOVS     r2,#0
000006  f8802740          STRB     r2,[r0,#0x740]
;;;379    	pCB->tx.index = 0;
00000a  f8a0273e          STRH     r2,[r0,#0x73e]
;;;380    	pCB->tx.head = 0;
00000e  f8a0273a          STRH     r2,[r0,#0x73a]
;;;381    	pCB->tx.end = 0;
000012  f8a0273c          STRH     r2,[r0,#0x73c]
;;;382    	for(i = 0; i < BLE_PROTOCOL_TX_QUEUE_SIZE; i++)
000016  2100              MOVS     r1,#0
                  |L4.24|
;;;383    	{
;;;384    		pCB->tx.cmdQueue[i].length = 0;
000018  234d              MOVS     r3,#0x4d
00001a  434b              MULS     r3,r1,r3
00001c  eb000343          ADD      r3,r0,r3,LSL #1
000020  f8a324d0          STRH     r2,[r3,#0x4d0]
000024  1c49              ADDS     r1,r1,#1              ;382
000026  b289              UXTH     r1,r1                 ;382
000028  2905              CMP      r1,#5                 ;382
00002a  d3f5              BCC      |L4.24|
;;;385    	}
;;;386    
;;;387    	pCB->rxFIFO.head = 0;
00002c  f8a0212c          STRH     r2,[r0,#0x12c]
;;;388    	pCB->rxFIFO.end = 0;
000030  f8a0212e          STRH     r2,[r0,#0x12e]
;;;389    	pCB->rxFIFO.currentProcessIndex = 0;
000034  f8a02130          STRH     r2,[r0,#0x130]
;;;390    
;;;391    	pCB->rx.head = 0;
000038  f8a02434          STRH     r2,[r0,#0x434]
;;;392    	pCB->rx.end  = 0;
00003c  f8a02436          STRH     r2,[r0,#0x436]
;;;393    	for(i=0; i<BLE_PROTOCOL_RX_QUEUE_SIZE; i++)
000040  2100              MOVS     r1,#0
                  |L4.66|
;;;394    	{
;;;395    		pCB->rx.cmdQueue[i].length = 0;
000042  234d              MOVS     r3,#0x4d
000044  434b              MULS     r3,r1,r3
000046  eb000343          ADD      r3,r0,r3,LSL #1
00004a  f8a321ca          STRH     r2,[r3,#0x1ca]
00004e  1c49              ADDS     r1,r1,#1              ;393
000050  b289              UXTH     r1,r1                 ;393
000052  2905              CMP      r1,#5                 ;393
000054  d3f5              BCC      |L4.66|
;;;396    	}
;;;397    
;;;398    	pCB->isTimeCheck = FALSE;
000056  f880274c          STRB     r2,[r0,#0x74c]
                  |L4.90|
;;;399    }
00005a  4770              BX       lr
;;;400    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_Init||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_Init PROC
;;;233    // 协议初始化
;;;234    void BLE_PROTOCOL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;235    {
;;;236    	// 协议层数据结构初始化
;;;237    	BLE_PROTOCOL_DataStructInit(&bleProtocolCB);
000002  4805              LDR      r0,|L5.24|
000004  f7fffffe          BL       BLE_PROTOCOL_DataStructInit
;;;238    
;;;239    	// 向驱动层注册数据接收接口
;;;240    	BLE_UART_RegisterDataSendService(BLE_PROTOCOL_MacProcess);
000008  4804              LDR      r0,|L5.28|
00000a  f7fffffe          BL       BLE_UART_RegisterDataSendService
;;;241    
;;;242    	// 向驱动层注册数据发送接口
;;;243    	BLE_PROTOCOL_RegisterDataSendService(BLE_UART_AddTxArray);
00000e  e8bd4010          POP      {r4,lr}
000012  4803              LDR      r0,|L5.32|
000014  f7ffbffe          B.W      BLE_PROTOCOL_RegisterDataSendService
;;;244    
;;;245    	// 注册查询BLE的MAC地址
;;;246    //	TIMER_AddTask(TIMER_ID_BLE_CONTROL,
;;;247    //					2000,
;;;248    //					BLE_UART_CALLBALL_GetBleMacAddrRequest,
;;;249    //					TRUE,
;;;250    //					TIMER_LOOP_FOREVER,
;;;251    //					ACTION_MODE_ADD_TO_QUEUE);
;;;252    }
;;;253    
                          ENDP

                  |L5.24|
                          DCD      ||.bss||
                  |L5.28|
                          DCD      BLE_PROTOCOL_MacProcess
                  |L5.32|
                          DCD      BLE_UART_AddTxArray

                          AREA ||i.BLE_PROTOCOL_MacProcess||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_MacProcess PROC
;;;401    // UART报文接收处理函数(注意根据具体模块修改)
;;;402    void BLE_PROTOCOL_MacProcess(uint16 standarID, uint8* pData, uint16 length)
000000  b570              PUSH     {r4-r6,lr}
;;;403    {
;;;404    	uint16 end = bleProtocolCB.rxFIFO.end;
000002  480e              LDR      r0,|L6.60|
000004  f8b0212e          LDRH     r2,[r0,#0x12e]  ; bleProtocolCB
;;;405    	uint16 head = bleProtocolCB.rxFIFO.head;
000008  f8b0412c          LDRH     r4,[r0,#0x12c]  ; bleProtocolCB
;;;406    	uint8 rxdata = 0x00;
;;;407    	
;;;408    	// 接收数据
;;;409    	rxdata = *pData;
00000c  780d              LDRB     r5,[r1,#0]
;;;410    
;;;411    	// 一级缓冲区已满，不予接收
;;;412    	if((end + 1)%BLE_PROTOCOL_RX_FIFO_SIZE == head)
00000e  1c53              ADDS     r3,r2,#1
000010  f44f7196          MOV      r1,#0x12c
000014  fbb3f6f1          UDIV     r6,r3,r1
000018  fb013316          MLS      r3,r1,r6,r3
00001c  42a3              CMP      r3,r4
00001e  d00b              BEQ      |L6.56|
;;;413    	{
;;;414    		return;
;;;415    	}
;;;416    	// 一级缓冲区未满，接收 
;;;417    	else
;;;418    	{
;;;419    		// 将接收到的数据放到临时缓冲区中
;;;420    		bleProtocolCB.rxFIFO.buff[end] = rxdata;
000020  5485              STRB     r5,[r0,r2]
;;;421    		bleProtocolCB.rxFIFO.end ++;
000022  f5007097          ADD      r0,r0,#0x12e
000026  8802              LDRH     r2,[r0,#0]  ; bleProtocolCB
000028  1c52              ADDS     r2,r2,#1
00002a  8002              STRH     r2,[r0,#0]
;;;422    		bleProtocolCB.rxFIFO.end %= BLE_PROTOCOL_RX_FIFO_SIZE;
00002c  8802              LDRH     r2,[r0,#0]  ; bleProtocolCB
00002e  fbb2f3f1          UDIV     r3,r2,r1
000032  fb012113          MLS      r1,r1,r3,r2
000036  8001              STRH     r1,[r0,#0]
                  |L6.56|
;;;423    	}
;;;424    }
000038  bd70              POP      {r4-r6,pc}
;;;425    
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_Process||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_Process PROC
;;;254    // BLE协议层过程处理
;;;255    void BLE_PROTOCOL_Process(void)
000000  b510              PUSH     {r4,lr}
;;;256    {
;;;257    	// BLE接收FIFO缓冲区处理
;;;258    	BLE_PROTOCOL_RxFIFOProcess(&bleProtocolCB);
000002  4805              LDR      r0,|L7.24|
000004  f7fffffe          BL       BLE_PROTOCOL_RxFIFOProcess
;;;259    
;;;260    	// BLE接收命令缓冲区处理
;;;261    	BLE_PROTOCOL_CmdFrameProcess(&bleProtocolCB);
000008  4803              LDR      r0,|L7.24|
00000a  f7fffffe          BL       BLE_PROTOCOL_CmdFrameProcess
;;;262    	
;;;263    	// BLE协议层发送处理过程
;;;264    	BLE_PROTOCOL_TxStateProcess();
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      BLE_PROTOCOL_TxStateProcess
;;;265    }
;;;266    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_RegisterDataSendService||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_RegisterDataSendService PROC
;;;426    // UART协议层向驱动层注册数据发送接口
;;;427    void BLE_PROTOCOL_RegisterDataSendService(BOOL (*service)(uint16 id, uint8 *pData, uint16 length))
000000  4901              LDR      r1,|L8.8|
;;;428    {		
;;;429    	bleProtocolCB.sendDataThrowService = service;
000002  f8c10744          STR      r0,[r1,#0x744]  ; bleProtocolCB
;;;430    }
000006  4770              BX       lr
;;;431    
                          ENDP

                  |L8.8|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_RxFIFOProcess||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_RxFIFOProcess PROC
;;;491    // 一级接收缓冲区处理，从一级接收缓冲区中取出一个字节添加到命令帧缓冲区中
;;;492    void BLE_PROTOCOL_RxFIFOProcess(BLE_PROTOCOL_CB* pCB)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;493    {
000004  4604              MOV      r4,r0
;;;494    	uint16 end = pCB->rxFIFO.end;
000006  f8b4112e          LDRH     r1,[r4,#0x12e]
;;;495    	uint16 head = pCB->rxFIFO.head;
00000a  f8b4012c          LDRH     r0,[r4,#0x12c]
;;;496    	BLE_PROTOCOL_RX_CMD_FRAME* pCmdFrame = NULL;
;;;497    	uint16 length = 0;
;;;498    	uint8 currentData = 0;
;;;499    	
;;;500    	// 参数合法性检验
;;;501    	if(NULL == pCB)
00000e  2c00              CMP      r4,#0
000010  d024              BEQ      |L9.92|
;;;502    	{
;;;503    		return;
;;;504    	}
;;;505    	
;;;506    	// 一级缓冲区为空，退出
;;;507    	if(head == end)
000012  4288              CMP      r0,r1
000014  d022              BEQ      |L9.92|
;;;508    	{
;;;509    		return;
;;;510    	}
;;;511    
;;;512    	// 获取临时缓冲区指针
;;;513    	pCmdFrame = &pCB->rx.cmdQueue[pCB->rx.end];
000016  f8b42436          LDRH     r2,[r4,#0x436]
00001a  204d              MOVS     r0,#0x4d
00001c  4350              MULS     r0,r2,r0
00001e  eb040540          ADD      r5,r4,r0,LSL #1
000022  f5057599          ADD      r5,r5,#0x132
;;;514    	// 取出当前要处理的字节
;;;515    	currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
000026  f8b40130          LDRH     r0,[r4,#0x130]
00002a  5c20              LDRB     r0,[r4,r0]
;;;516    	
;;;517    	// 临时缓冲区长度为0时，搜索首字节
;;;518    	if(0 == pCmdFrame->length)
00002c  f8b53098          LDRH     r3,[r5,#0x98]
;;;519    	{
;;;520    		// 命令头错误，删除当前字节并退出
;;;521    		if(BLE_PROTOCOL_CMD_HEAD != currentData)
;;;522    		{
;;;523    			pCB->rxFIFO.head ++;
;;;524    			pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
000030  f44f7796          MOV      r7,#0x12c
000034  b1a3              CBZ      r3,|L9.96|
;;;525    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;526    
;;;527    			return;
;;;528    		}
;;;529    		
;;;530    		// 命令头正确，但无临时缓冲区可用，退出
;;;531    		if((pCB->rx.end + 1)%BLE_PROTOCOL_RX_QUEUE_SIZE == pCB->rx.head)
;;;532    		{
;;;533    			return;
;;;534    		}
;;;535    
;;;536    		// 添加UART通讯超时时间设置-2016.1.5增加
;;;537    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;538    		TIMER_AddTask(TIMER_ID_UART_RX_TIME_OUT_CONTROL,
;;;539    						BLE_PROTOCOL_BUS_UNIDIRECTIONAL_TIME_OUT,
;;;540    						BLE_PROTOCOL_CALLBACK_RxTimeOut,
;;;541    						0,
;;;542    						1,
;;;543    						ACTION_MODE_ADD_TO_QUEUE);
;;;544    #endif
;;;545    		
;;;546    		// 命令头正确，有临时缓冲区可用，则将其添加到命令帧临时缓冲区中
;;;547    		pCmdFrame->buff[pCmdFrame->length++]= currentData;
;;;548    		pCB->rxFIFO.currentProcessIndex ++;
;;;549    		pCB->rxFIFO.currentProcessIndex %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;550    	}
;;;551    	// 非首字节，将数据添加到命令帧临时缓冲区中，但暂不删除当前数据
;;;552    	else
;;;553    	{
;;;554    		// 临时缓冲区溢出，说明当前正在接收的命令帧是错误的，正确的命令帧不会出现长度溢出的情况
;;;555    		if(pCmdFrame->length >= BLE_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX)
000036  f04f0800          MOV      r8,#0
00003a  2b96              CMP      r3,#0x96
00003c  d37e              BCC      |L9.316|
;;;556    		{
;;;557    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;558    			// 停止RX通讯超时检测
;;;559    			BLE_PROTOCOL_StopRxTimeOutCheck();
;;;560    #endif
;;;561    
;;;562    			// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;563    			pCmdFrame->length = 0;	// 2016.1.5增加
00003e  f8a58098          STRH     r8,[r5,#0x98]
;;;564    			// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;565    			pCB->rxFIFO.head ++;
000042  f5047496          ADD      r4,r4,#0x12c
000046  8820              LDRH     r0,[r4,#0]
000048  1c40              ADDS     r0,r0,#1
00004a  8020              STRH     r0,[r4,#0]
;;;566    			pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
00004c  8820              LDRH     r0,[r4,#0]
00004e  fbb0f1f7          UDIV     r1,r0,r7
000052  fb070011          MLS      r0,r7,r1,r0
000056  8020              STRH     r0,[r4,#0]
;;;567    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
000058  8820              LDRH     r0,[r4,#0]
00005a  80a0              STRH     r0,[r4,#4]
                  |L9.92|
;;;568    
;;;569    			return;
;;;570    		}
;;;571    
;;;572    		// 一直取到末尾
;;;573    		while(end != pCB->rxFIFO.currentProcessIndex)
;;;574    		{
;;;575    			// 取出当前要处理的字节
;;;576    			currentData = pCB->rxFIFO.buff[pCB->rxFIFO.currentProcessIndex];
;;;577    			// 缓冲区未溢出，正常接收，将数据添加到临时缓冲区中
;;;578    			pCmdFrame->buff[pCmdFrame->length++] = currentData;
;;;579    			pCB->rxFIFO.currentProcessIndex ++;
;;;580    			pCB->rxFIFO.currentProcessIndex %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;581    
;;;582    			// ■■接下来，需要检查命令帧是否完整，如果完整，则将命令帧临时缓冲区扶正 ■■
;;;583    						
;;;584    			// 首先判断命令帧最小长度，一个完整的命令字至少包括4个字节: 命令帧最小长度，包含:命令头、命令字、数据长度、校验和，因此不足4个字节的必定不完整
;;;585    			if(pCmdFrame->length < BLE_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;586    			{
;;;587    				// 继续接收
;;;588    				continue;
;;;589    			}
;;;590    
;;;591    			// 命令帧长度数值越界，说明当前命令帧错误，停止接收
;;;592    			if(pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] > (BLE_PROTOCOL_RX_CMD_FRAME_LENGTH_MAX - BLE_PROTOCOL_CMD_FRAME_LENGTH_MIN))
;;;593    			{
;;;594    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;595    				// 停止RX通讯超时检测
;;;596    				BLE_PROTOCOL_StopRxTimeOutCheck();
;;;597    #endif
;;;598    			
;;;599    				// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;600    				pCmdFrame->length = 0;
;;;601    				// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;602    				pCB->rxFIFO.head ++;
;;;603    				pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;604    				pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;605    
;;;606    				return;
;;;607    			}
;;;608    
;;;609    			// 命令帧长度校验
;;;610    			length = pCmdFrame->length;
;;;611    			if(length < pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] + BLE_PROTOCOL_CMD_FRAME_LENGTH_MIN)
;;;612    			{
;;;613    				// 长度要求不一致，说明未接收完毕，退出继续
;;;614    				continue;
;;;615    			}
;;;616    
;;;617    			// 命令帧长度OK，则进行校验，失败时删除命令头
;;;618    			if(!BLE_PROTOCOL_CheckSUM(pCmdFrame))
;;;619    			{
;;;620    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;621    				// 停止RX通讯超时检测
;;;622    				BLE_PROTOCOL_StopRxTimeOutCheck();
;;;623    #endif
;;;624    				
;;;625    				// 校验失败，将命令帧长度清零，即认为抛弃该命令帧
;;;626    				pCmdFrame->length = 0;
;;;627    				// 删除当前的命令头，而不是删除已分析完的所有数据，因为数据中可能会有命令头
;;;628    				pCB->rxFIFO.head ++;
;;;629    				pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;630    				pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;631    				
;;;632    				return;
;;;633    			}
;;;634    
;;;635    #if BLE_PROTOCOL_RX_TIME_OUT_CHECK_ENABLE
;;;636    			// 停止RX通讯超时检测
;;;637    			BLE_PROTOCOL_StopRxTimeOutCheck();
;;;638    #endif
;;;639    			
;;;640    			// 执行到这里，即说明接收到了一个完整并且正确的命令帧，此时需将处理过的数据从一级缓冲区中删除，并将该命令帧扶正
;;;641    			pCB->rxFIFO.head += length;
;;;642    			pCB->rxFIFO.head %= BLE_PROTOCOL_RX_FIFO_SIZE;
;;;643    			pCB->rxFIFO.currentProcessIndex = pCB->rxFIFO.head;
;;;644    			BLE_PROTOCOL_ConfirmTempCmdFrameBuff(pCB);
;;;645    
;;;646    			return;
;;;647    		}
;;;648    	}
;;;649    }
00005c  e8bd81f0          POP      {r4-r8,pc}
                  |L9.96|
000060  2855              CMP      r0,#0x55              ;521
000062  d00d              BEQ      |L9.128|
000064  f5047496          ADD      r4,r4,#0x12c          ;523
000068  8820              LDRH     r0,[r4,#0]            ;523
00006a  1c40              ADDS     r0,r0,#1              ;523
00006c  8020              STRH     r0,[r4,#0]            ;523
00006e  8820              LDRH     r0,[r4,#0]            ;524
000070  fbb0f1f7          UDIV     r1,r0,r7              ;524
000074  fb070011          MLS      r0,r7,r1,r0           ;524
000078  8020              STRH     r0,[r4,#0]            ;524
00007a  8820              LDRH     r0,[r4,#0]            ;525
00007c  80a0              STRH     r0,[r4,#4]            ;525
00007e  e7ed              B        |L9.92|
                  |L9.128|
000080  1c52              ADDS     r2,r2,#1              ;531
000082  2105              MOVS     r1,#5                 ;531
000084  fbb2f3f1          UDIV     r3,r2,r1              ;531
000088  fb012113          MLS      r1,r1,r3,r2           ;531
00008c  f8b42434          LDRH     r2,[r4,#0x434]        ;531
000090  4291              CMP      r1,r2                 ;531
000092  d0e3              BEQ      |L9.92|
000094  2101              MOVS     r1,#1                 ;547
000096  f8a51098          STRH     r1,[r5,#0x98]         ;547
00009a  70a8              STRB     r0,[r5,#2]            ;547
00009c  f8b40130          LDRH     r0,[r4,#0x130]        ;548
0000a0  1c40              ADDS     r0,r0,#1              ;548
0000a2  b280              UXTH     r0,r0                 ;548
0000a4  fbb0f1f7          UDIV     r1,r0,r7              ;549
0000a8  fb070011          MLS      r0,r7,r1,r0           ;549
0000ac  f8a40130          STRH     r0,[r4,#0x130]        ;549
0000b0  e7d4              B        |L9.92|
                  |L9.178|
0000b2  5c22              LDRB     r2,[r4,r0]            ;576
0000b4  f8b50098          LDRH     r0,[r5,#0x98]         ;578
0000b8  1c43              ADDS     r3,r0,#1              ;578
0000ba  4428              ADD      r0,r0,r5              ;578
0000bc  f8a53098          STRH     r3,[r5,#0x98]         ;578
0000c0  7082              STRB     r2,[r0,#2]            ;578
0000c2  f8b40130          LDRH     r0,[r4,#0x130]        ;579
0000c6  1c40              ADDS     r0,r0,#1              ;579
0000c8  b280              UXTH     r0,r0                 ;579
0000ca  fbb0f2f7          UDIV     r2,r0,r7              ;580
0000ce  fb070012          MLS      r0,r7,r2,r0           ;580
0000d2  f8a40130          STRH     r0,[r4,#0x130]        ;580
0000d6  f8b56098          LDRH     r6,[r5,#0x98]         ;585
0000da  2e04              CMP      r6,#4                 ;585
0000dc  d33f              BCC      |L9.350|
0000de  7928              LDRB     r0,[r5,#4]            ;592
0000e0  2892              CMP      r0,#0x92              ;592
0000e2  d90f              BLS      |L9.260|
0000e4  f8a58098          STRH     r8,[r5,#0x98]         ;600
0000e8  f5047496          ADD      r4,r4,#0x12c          ;602
0000ec  8820              LDRH     r0,[r4,#0]            ;602
0000ee  1c40              ADDS     r0,r0,#1              ;602
0000f0  8020              STRH     r0,[r4,#0]            ;602
0000f2  8820              LDRH     r0,[r4,#0]            ;603
0000f4  fbb0f1f7          UDIV     r1,r0,r7              ;603
0000f8  fb070011          MLS      r0,r7,r1,r0           ;603
0000fc  8020              STRH     r0,[r4,#0]            ;603
0000fe  8820              LDRH     r0,[r4,#0]            ;604
000100  80a0              STRH     r0,[r4,#4]            ;604
000102  e7ab              B        |L9.92|
                  |L9.260|
000104  1d00              ADDS     r0,r0,#4              ;611
000106  42b0              CMP      r0,r6                 ;611
000108  d829              BHI      |L9.350|
00010a  4628              MOV      r0,r5                 ;618
00010c  f7fffffe          BL       BLE_PROTOCOL_CheckSUM
000110  b198              CBZ      r0,|L9.314|
000112  f5047496          ADD      r4,r4,#0x12c          ;641
000116  8820              LDRH     r0,[r4,#0]            ;641
000118  4430              ADD      r0,r0,r6              ;641
00011a  8020              STRH     r0,[r4,#0]            ;641
00011c  8820              LDRH     r0,[r4,#0]            ;642
00011e  fbb0f1f7          UDIV     r1,r0,r7              ;642
000122  fb070011          MLS      r0,r7,r1,r0           ;642
000126  8020              STRH     r0,[r4,#0]            ;642
000128  8820              LDRH     r0,[r4,#0]            ;643
00012a  80a0              STRH     r0,[r4,#4]            ;643
00012c  f5a47496          SUB      r4,r4,#0x12c          ;643
000130  4620              MOV      r0,r4                 ;644
000132  e8bd41f0          POP      {r4-r8,lr}            ;644
000136  f7ffbffe          B.W      BLE_PROTOCOL_ConfirmTempCmdFrameBuff
                  |L9.314|
00013a  e000              B        |L9.318|
                  |L9.316|
00013c  e00f              B        |L9.350|
                  |L9.318|
00013e  f8a58098          STRH     r8,[r5,#0x98]         ;626
000142  f5047496          ADD      r4,r4,#0x12c          ;628
000146  8820              LDRH     r0,[r4,#0]            ;628
000148  1c40              ADDS     r0,r0,#1              ;628
00014a  8020              STRH     r0,[r4,#0]            ;628
00014c  8820              LDRH     r0,[r4,#0]            ;629
00014e  fbb0f1f7          UDIV     r1,r0,r7              ;629
000152  fb070011          MLS      r0,r7,r1,r0           ;629
000156  8020              STRH     r0,[r4,#0]            ;629
000158  8820              LDRH     r0,[r4,#0]            ;630
00015a  80a0              STRH     r0,[r4,#4]            ;630
00015c  e77e              B        |L9.92|
                  |L9.350|
00015e  f8b40130          LDRH     r0,[r4,#0x130]        ;573
000162  4288              CMP      r0,r1                 ;573
000164  d1a5              BNE      |L9.178|
000166  e779              B        |L9.92|
;;;650    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendAssistInfor||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendAssistInfor PROC
;;;1916   // 仪表档位消息上报
;;;1917   void BLE_PROTOCOL_SendAssistInfor(uint8 param)
000000  b510              PUSH     {r4,lr}
;;;1918   {
000002  4604              MOV      r4,r0
;;;1919   
;;;1920   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1921   	BLE_PROTOCOL_TxAddData(BLE_CMD_CONTROL_UP); 	
00000a  2033              MOVS     r0,#0x33
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1922   	BLE_PROTOCOL_TxAddData(0x03);	
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1923   	
;;;1924   	BLE_PROTOCOL_TxAddData(ASSIST);	
000016  2005              MOVS     r0,#5
000018  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1925   	BLE_PROTOCOL_TxAddData(0x00);	
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1926   	BLE_PROTOCOL_TxAddData((ASSIST_ID_E)param);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1927   
;;;1928   	BLE_PROTOCOL_TxAddFrame();	
000028  e8bd4010          POP      {r4,lr}
00002c  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1929   }
;;;1930   
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendCmdAck||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendCmdAck PROC
;;;1623   // 发送命令回复
;;;1624   void BLE_PROTOCOL_SendCmdAck(uint8 ackCmd)
000000  b510              PUSH     {r4,lr}
;;;1625   {
000002  4604              MOV      r4,r0
;;;1626   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1627   	BLE_PROTOCOL_TxAddData(ackCmd); 	
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1628   	BLE_PROTOCOL_TxAddData(0x00);	
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1629   	BLE_PROTOCOL_TxAddFrame();	
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1630   }
;;;1631   
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendCmdControlAck||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_SendCmdControlAck PROC
;;;1771   // 仪表控制命令回复
;;;1772   void BLE_PROTOCOL_SendCmdControlAck(uint8 controlCmd, uint8 paramH, uint8 paramL)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1773   {
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
;;;1774   	uint8 val1,val2;
;;;1775   
;;;1776   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000008  2055              MOVS     r0,#0x55
00000a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1777   	BLE_PROTOCOL_TxAddData(BLE_CMD_CONTROL_UP); 	
00000e  2033              MOVS     r0,#0x33
000010  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1778   	BLE_PROTOCOL_TxAddData(0x03);	
000014  2003              MOVS     r0,#3
000016  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1779   
;;;1780   	switch (controlCmd)
;;;1781   	{
;;;1782   		case LIGHT:
;;;1783   			if(0x00 == paramL)
;;;1784   			{
;;;1785   				// 关灯
;;;1786   				PARAM_SetLightSwitch(FALSE);
00001a  4e4b              LDR      r6,|L12.328|
00001c  f04f0801          MOV      r8,#1                 ;1773
000020  2f08              CMP      r7,#8                 ;1780
000022  d218              BCS      |L12.86|
000024  e8dff007          TBB      [pc,r7]               ;1780
000028  8304263e          DCB      0x83,0x04,0x26,0x3e
00002c  5259777a          DCB      0x52,0x59,0x77,0x7a
;;;1787   
;;;1788   				LED_HeadLight(0);
000030  f8df9118          LDR      r9,|L12.332|
000034  2500              MOVS     r5,#0                 ;1783
000036  b17c              CBZ      r4,|L12.88|
;;;1789   				
;;;1790   				// 大灯关闭后，恢复之前的背光等级
;;;1791   				BACK_LIGHT_Start( (BACK_LIGHT_LEVEL_E)PARAM_GetBrightness() );
;;;1792   			}
;;;1793   			else
;;;1794   			{
;;;1795   				// 开灯
;;;1796   				PARAM_SetLightSwitch(TRUE);	
000038  f88681fa          STRB     r8,[r6,#0x1fa]
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       UART_PROTOCOL_SetTxAtOnceRequest
;;;1797   
;;;1798   				LED_HeadLight(1);
000042  2101              MOVS     r1,#1
000044  4648              MOV      r0,r9
000046  f7fffffe          BL       gpio_bit_set
;;;1799   				
;;;1800   				// 大灯开启后，屏幕亮度变为最暗
;;;1801   				BACK_LIGHT_Start(BACK_LIGHT_LEVEL_20_100);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       BACK_LIGHT_Start
;;;1802   
;;;1803   				paramCB.runtime.autoLight = FALSE;
000050  f8865250          STRB     r5,[r6,#0x250]
                  |L12.84|
;;;1804   			}
;;;1805   			val1 = 0;
000054  2500              MOVS     r5,#0
                  |L12.86|
;;;1806   			val2 = paramL;
;;;1807   
;;;1808   		break;
000056  e06a              B        |L12.302|
                  |L12.88|
000058  f88651fa          STRB     r5,[r6,#0x1fa]        ;1786
00005c  2001              MOVS     r0,#1                 ;1786
00005e  f7fffffe          BL       UART_PROTOCOL_SetTxAtOnceRequest
000062  2101              MOVS     r1,#1                 ;1788
000064  4648              MOV      r0,r9                 ;1788
000066  f7fffffe          BL       gpio_bit_reset
00006a  f8960318          LDRB     r0,[r6,#0x318]        ;1791  ; paramCB
00006e  f7fffffe          BL       BACK_LIGHT_Start
000072  e7ef              B        |L12.84|
;;;1809   		
;;;1810   		case AUTO_SHUTDOWN_TIME:
;;;1811   
;;;1812   			switch(paramL)
000074  2c0a              CMP      r4,#0xa
000076  d00a              BEQ      |L12.142|
000078  dc05              BGT      |L12.134|
00007a  b144              CBZ      r4,|L12.142|
00007c  2c03              CMP      r4,#3
00007e  d006              BEQ      |L12.142|
000080  2c05              CMP      r4,#5
000082  d106              BNE      |L12.146|
000084  e003              B        |L12.142|
                  |L12.134|
000086  2c1e              CMP      r4,#0x1e
000088  d001              BEQ      |L12.142|
00008a  2c3c              CMP      r4,#0x3c
00008c  d101              BNE      |L12.146|
                  |L12.142|
;;;1813   			{
;;;1814   				case 0:
;;;1815   				case 3:
;;;1816   				case 5:
;;;1817   				case 10:
;;;1818   				case 30:
;;;1819   				case 60:
;;;1820   					PARAM_SetPowerOffTime(paramL);
00008e  f8864319          STRB     r4,[r6,#0x319]
                  |L12.146|
;;;1821   					break;
;;;1822   					
;;;1823   				default:
;;;1824   					
;;;1825   					break;
;;;1826   			}
;;;1827   
;;;1828   //			TIMER_KillTask(TIMER_ID_AUTO_POWER_OFF);
;;;1829   			
;;;1830   			// 重置自动关机任务
;;;1831   			STATE_ResetAutoPowerOffControl();
000092  f7fffffe          BL       STATE_ResetAutoPowerOffControl
;;;1832   		
;;;1833   			// NVM更新，立即写入
;;;1834   			NVM_SetDirtyFlag(TRUE);
000096  2001              MOVS     r0,#1
000098  f7fffffe          BL       NVM_SetDirtyFlag
;;;1835   			val1 = 0;
00009c  2500              MOVS     r5,#0
;;;1836   			val2 = PARAM_GetPowerOffTime();
00009e  f8964319          LDRB     r4,[r6,#0x319]  ; paramCB
0000a2  e044              B        |L12.302|
;;;1837   		break;
;;;1838   		
;;;1839   		case SPEED_LIMIT:
;;;1840   			
;;;1841   	
;;;1842   			if ((paramL >= 10) && (paramL <= 41))
0000a4  f1a4000a          SUB      r0,r4,#0xa
0000a8  281f              CMP      r0,#0x1f
0000aa  d804              BHI      |L12.182|
;;;1843   			{
;;;1844   				PARAM_SetSpeedLimit((uint16)paramL * 10);
0000ac  eb040084          ADD      r0,r4,r4,LSL #2
0000b0  0040              LSLS     r0,r0,#1
0000b2  f8a6032c          STRH     r0,[r6,#0x32c]
                  |L12.182|
;;;1845   			}		
;;;1846   			
;;;1847   			// NVM更新，立即写入
;;;1848   			NVM_SetDirtyFlag(TRUE);
0000b6  2001              MOVS     r0,#1
0000b8  f7fffffe          BL       NVM_SetDirtyFlag
;;;1849   			val1 = 0;
0000bc  2500              MOVS     r5,#0
;;;1850   			val2 = paramCB.nvm.param.common.speed.limitVal / 10;
0000be  f8b6032c          LDRH     r0,[r6,#0x32c]  ; paramCB
0000c2  210a              MOVS     r1,#0xa
0000c4  fbb0f0f1          UDIV     r0,r0,r1
0000c8  b2c4              UXTB     r4,r0
;;;1851   
;;;1852   			break;
0000ca  e030              B        |L12.302|
;;;1853   		
;;;1854   		case UNIT:
;;;1855   			
;;;1856   			PARAM_SetUnit((UNIT_E)paramL);
0000cc  f8864311          STRB     r4,[r6,#0x311]
;;;1857   
;;;1858   			// NVM更新，立即写入
;;;1859   			NVM_SetDirtyFlag(TRUE);
0000d0  2001              MOVS     r0,#1
0000d2  f7fffffe          BL       NVM_SetDirtyFlag
;;;1860   			val1 = 0;
0000d6  2500              MOVS     r5,#0
;;;1861   			val2 = paramL;
;;;1862   		break;
0000d8  e029              B        |L12.302|
;;;1863   		
;;;1864   		case ASSIST:
;;;1865   			
;;;1866   			// 获取当前助力值
;;;1867   			val1 = (uint8)paramCB.runtime.assist;
0000da  f8960220          LDRB     r0,[r6,#0x220]  ; paramCB
;;;1868   		
;;;1869   			if(0 == paramL)
0000de  b17c              CBZ      r4,|L12.256|
;;;1870   			{
;;;1871   				if(val1 > 0)
;;;1872   				{
;;;1873   					val1--;
;;;1874   					PARAM_SetAssistLevel((ASSIST_ID_E)val1);
;;;1875   				}
;;;1876   			}
;;;1877   			else
;;;1878   			{
;;;1879   				if(val1 < PARAM_GetMaxAssist())
0000e0  f8961312          LDRB     r1,[r6,#0x312]  ; paramCB
0000e4  4281              CMP      r1,r0
0000e6  d907              BLS      |L12.248|
;;;1880   				{
;;;1881   					val1++;
0000e8  1c40              ADDS     r0,r0,#1
;;;1882   					PARAM_SetAssistLevel((ASSIST_ID_E)val1);
0000ea  f8860220          STRB     r0,[r6,#0x220]
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       UART_PROTOCOL_SetTxAtOnceRequest
0000f4  f886824d          STRB     r8,[r6,#0x24d]
                  |L12.248|
;;;1883   				}
;;;1884   			}
;;;1885   			val1 = 0;
0000f8  2500              MOVS     r5,#0
;;;1886   			val2 = (uint8)paramCB.runtime.assist;
0000fa  f8964220          LDRB     r4,[r6,#0x220]  ; paramCB
;;;1887   		break;
0000fe  e016              B        |L12.302|
                  |L12.256|
000100  2800              CMP      r0,#0                 ;1871
000102  d0f9              BEQ      |L12.248|
000104  1e40              SUBS     r0,r0,#1              ;1873
000106  f8860220          STRB     r0,[r6,#0x220]        ;1874
00010a  2001              MOVS     r0,#1                 ;1874
00010c  f7fffffe          BL       UART_PROTOCOL_SetTxAtOnceRequest
000110  f886824d          STRB     r8,[r6,#0x24d]        ;1874
000114  e7f0              B        |L12.248|
;;;1888   		
;;;1889   		case LOCK:
;;;1890   			val1 = 0;
000116  2500              MOVS     r5,#0
;;;1891   			val2 = 0;
000118  2400              MOVS     r4,#0
;;;1892   		break;
00011a  e008              B        |L12.302|
;;;1893   
;;;1894   		case BACKLIGHT:
;;;1895   			
;;;1896   			// 更改背光亮度
;;;1897   			BACK_LIGHT_Start((BACK_LIGHT_LEVEL_E)paramL);
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       BACK_LIGHT_Start
;;;1898   			PARAM_SetBrightness((BACK_LIGHT_LEVEL_E)paramL);
000122  f8864318          STRB     r4,[r6,#0x318]
;;;1899   			
;;;1900   			// NVM更新，立即写入
;;;1901   			NVM_SetDirtyFlag(TRUE);
000126  2001              MOVS     r0,#1
000128  f7fffffe          BL       NVM_SetDirtyFlag
;;;1902   			val1 = 0;
00012c  2500              MOVS     r5,#0
                  |L12.302|
;;;1903   			val2 = paramL;
;;;1904   		break;
;;;1905   		
;;;1906   		default:
;;;1907   			break;
;;;1908   	}
;;;1909   	BLE_PROTOCOL_TxAddData(controlCmd);	
00012e  4638              MOV      r0,r7
000130  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1910   	BLE_PROTOCOL_TxAddData(val1);	
000134  4628              MOV      r0,r5
000136  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1911   	BLE_PROTOCOL_TxAddData(val2);
00013a  4620              MOV      r0,r4
00013c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1912   
;;;1913   	BLE_PROTOCOL_TxAddFrame();	
000140  e8bd47f0          POP      {r4-r10,lr}
000144  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1914   }
;;;1915   
                          ENDP

                  |L12.328|
                          DCD      paramCB
                  |L12.332|
                          DCD      0x40011800

                          AREA ||i.BLE_PROTOCOL_SendCmdCyclingPic||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendCmdCyclingPic PROC
;;;1587   // 骑行记录仪控制指令拍照
;;;1588   void BLE_PROTOCOL_SendCmdCyclingPic(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;1589   {
000002  4604              MOV      r4,r0
;;;1590   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1591   	BLE_PROTOCOL_TxAddData(BLE_CMD_CYCLING_RECORD_UP); 	
00000a  2048              MOVS     r0,#0x48
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1592   	BLE_PROTOCOL_TxAddData(0x00);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1593   
;;;1594   	BLE_PROTOCOL_TxAddData(0x01);	// 拍照
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1595   	BLE_PROTOCOL_TxAddData(param);	
00001c  b2e0              UXTB     r0,r4
00001e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1596   	BLE_PROTOCOL_TxAddFrame();	
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1597   }
;;;1598   
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendCmdCyclingVideo||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendCmdCyclingVideo PROC
;;;1599   // 骑行记录仪控制指令录像
;;;1600   void BLE_PROTOCOL_SendCmdCyclingVideo(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;1601   {
000002  4604              MOV      r4,r0
;;;1602   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1603   	BLE_PROTOCOL_TxAddData(BLE_CMD_CYCLING_RECORD_UP); 	
00000a  2048              MOVS     r0,#0x48
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1604   	BLE_PROTOCOL_TxAddData(0x00);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1605   
;;;1606   	BLE_PROTOCOL_TxAddData(0x02);	// 录像
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1607   	BLE_PROTOCOL_TxAddData(param);	
00001c  b2e0              UXTB     r0,r4
00001e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1608   	BLE_PROTOCOL_TxAddFrame();	
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1609   }
;;;1610   
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendCmdFirmVersionAck||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_SendCmdFirmVersionAck PROC
;;;1644   // 查询固件版本回复
;;;1645   void BLE_PROTOCOL_SendCmdFirmVersionAck(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1646   {
;;;1647   	uint8 val1, val2, val3, val4;
;;;1648   	uint16 valTmp;
;;;1649   
;;;1650   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000002  2055              MOVS     r0,#0x55
000004  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1651   	BLE_PROTOCOL_TxAddData(BLE_CMD_FIRMVERSION_UP); 	
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1652   	BLE_PROTOCOL_TxAddData(0x07);	
00000e  2007              MOVS     r0,#7
000010  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1653   
;;;1654   	// 仪表型号编码
;;;1655   	BLE_PROTOCOL_TxAddData(paramCB.runtime.devVersion[0]);
000014  4c11              LDR      r4,|L15.92|
000016  7820              LDRB     r0,[r4,#0]  ; paramCB
000018  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1656   	BLE_PROTOCOL_TxAddData(paramCB.runtime.devVersion[1]);
00001c  7860              LDRB     r0,[r4,#1]  ; paramCB
00001e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1657   	BLE_PROTOCOL_TxAddData(paramCB.runtime.devVersion[2]);
000022  78a0              LDRB     r0,[r4,#2]  ; paramCB
000024  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1658   	
;;;1659   	// 固件版本
;;;1660   	val1 = PARAM_GetDevVersionRemain();
000028  7920              LDRB     r0,[r4,#4]  ; paramCB
;;;1661   	val2 = PARAM_Get_DevReleaseVersion();
00002a  7967              LDRB     r7,[r4,#5]  ; paramCB
;;;1662   	val3 = PARAM_Get_FwUpdateVersion();
00002c  79a5              LDRB     r5,[r4,#6]  ; paramCB
;;;1663   	val4 = PARAM_Get_FwDebugReleaseVersion();
00002e  79e6              LDRB     r6,[r4,#7]  ; paramCB
;;;1664   	BLE_PROTOCOL_TxAddData(val1);
000030  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1665   	BLE_PROTOCOL_TxAddData(val2);
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1666   	BLE_PROTOCOL_TxAddData(val3);
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1667   	BLE_PROTOCOL_TxAddData(val4);
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1668   
;;;1669   	// 固件版本编号
;;;1670   	valTmp = PARAM_GetFwBinNum();
000046  78e4              LDRB     r4,[r4,#3]  ; paramCB
;;;1671   	val1 = (uint8)((valTmp >> 8) & 0xFF);
000048  0a20              LSRS     r0,r4,#8
;;;1672   	val2 = (uint8)(valTmp & 0xFF);
;;;1673   	BLE_PROTOCOL_TxAddData(val1);
00004a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1674   	BLE_PROTOCOL_TxAddData(val2);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1675   	
;;;1676   	BLE_PROTOCOL_TxAddFrame();	
000054  e8bd40f0          POP      {r4-r7,lr}
000058  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1677   }
;;;1678   
                          ENDP

                  |L15.92|
                          DCD      paramCB+0x25a

                          AREA ||i.BLE_PROTOCOL_SendCmdGetRuningStateAck||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_SendCmdGetRuningStateAck PROC
;;;1932   // 仪表获取实时运动状态回复
;;;1933   void BLE_PROTOCOL_SendCmdGetRuningStateAck(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1934   {
;;;1935   	uint8 val1, val2, val3, val4;
;;;1936   	uint16 valTmp;
;;;1937   	uint32 valTemp;
;;;1938   
;;;1939   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000002  2055              MOVS     r0,#0x55
000004  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1940   	BLE_PROTOCOL_TxAddData(BLE_CMD_GETDATA_RUNNING_UP); 	
000008  2061              MOVS     r0,#0x61
00000a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1941   	BLE_PROTOCOL_TxAddData(0x0B);	
00000e  200b              MOVS     r0,#0xb
000010  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1942   
;;;1943   	// 实时功率
;;;1944   	valTmp = PARAM_GetPower();
000014  4c1c              LDR      r4,|L16.136|
000016  f8b40226          LDRH     r0,[r4,#0x226]  ; paramCB
;;;1945   	val1 = ((valTmp >> 8) & 0xFF);
00001a  0a01              LSRS     r1,r0,#8
;;;1946   	val2 = (valTmp & 0xFF);
00001c  b2c5              UXTB     r5,r0
;;;1947   	BLE_PROTOCOL_TxAddData(val1);
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1948   	BLE_PROTOCOL_TxAddData(val2);
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1949   
;;;1950   	// 额定功率
;;;1951   	valTmp = PARAM_GetPowerMax();
00002a  f8b4029e          LDRH     r0,[r4,#0x29e]  ; paramCB
;;;1952   	val1 = ((valTmp >> 8) & 0xFF);
00002e  0a01              LSRS     r1,r0,#8
;;;1953   	val2 = (valTmp & 0xFF);
000030  b2c5              UXTB     r5,r0
;;;1954   	BLE_PROTOCOL_TxAddData(val1);
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1955   	BLE_PROTOCOL_TxAddData(val2);
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1956   
;;;1957   	// 助力档位
;;;1958   	val1 = (uint8)PARAM_GetAssistLevel();
00003e  f7fffffe          BL       PARAM_GetAssistLevel
;;;1959   	BLE_PROTOCOL_TxAddData(val1);
000042  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1960   
;;;1961   	// 实时速度
;;;1962   	valTmp = paramCB.runtime.speed;
000046  f8b40210          LDRH     r0,[r4,#0x210]  ; paramCB
;;;1963   	val1 = ((valTmp >> 8) & 0xFF);
00004a  0a01              LSRS     r1,r0,#8
;;;1964   	val2 = (valTmp & 0xFF);
00004c  b2c5              UXTB     r5,r0
;;;1965   	BLE_PROTOCOL_TxAddData(val1);
00004e  4608              MOV      r0,r1
000050  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1966   	BLE_PROTOCOL_TxAddData(val2);
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1967   
;;;1968   	// 总里程
;;;1969   	valTemp = paramCB.nvm.param.common.record.total.distance;
00005a  f8d41334          LDR      r1,[r4,#0x334]  ; paramCB
;;;1970   	val1 = (uint8)((valTemp >> 24) & 0xFF);
00005e  0e08              LSRS     r0,r1,#24
;;;1971   	val2 = (uint8)((valTemp >> 16) & 0xFF);
000060  f3c14507          UBFX     r5,r1,#16,#8
;;;1972   	val3 = (uint8)((valTemp >> 8) & 0xFF);
000064  f3c12407          UBFX     r4,r1,#8,#8
;;;1973   	val4 = (uint8)(valTemp & 0xFF);
000068  b2ce              UXTB     r6,r1
;;;1974   	BLE_PROTOCOL_TxAddData(val1);
00006a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1975   	BLE_PROTOCOL_TxAddData(val2);
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1976   	BLE_PROTOCOL_TxAddData(val3);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1977   	BLE_PROTOCOL_TxAddData(val4);
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1978   
;;;1979   	BLE_PROTOCOL_TxAddFrame();	
000080  e8bd4070          POP      {r4-r6,lr}
000084  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1980   }
;;;1981   
                          ENDP

                  |L16.136|
                          DCD      paramCB

                          AREA ||i.BLE_PROTOCOL_SendCmdMicroPhone||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendCmdMicroPhone PROC
;;;1576   // 麦克风主动上报
;;;1577   void BLE_PROTOCOL_SendCmdMicroPhone(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;1578   {
000002  4604              MOV      r4,r0
;;;1579   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1580   	BLE_PROTOCOL_TxAddData(BLE_CMD_MICROPHONE_UP); 	
00000a  2046              MOVS     r0,#0x46
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1581   	BLE_PROTOCOL_TxAddData(0x00);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1582   
;;;1583   	BLE_PROTOCOL_TxAddData(param);	
000016  b2e0              UXTB     r0,r4
000018  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1584   	BLE_PROTOCOL_TxAddFrame();	
00001c  e8bd4010          POP      {r4,lr}
000020  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1585   }
;;;1586   
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendCmdParamAck||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendCmdParamAck PROC
;;;1632   // 发送命令回复，带一个参数
;;;1633   void BLE_PROTOCOL_SendCmdParamAck(uint8 ackCmd, uint8 ackParam)
000000  b530              PUSH     {r4,r5,lr}
;;;1634   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1635   
;;;1636   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000006  2055              MOVS     r0,#0x55
000008  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1637   	BLE_PROTOCOL_TxAddData(ackCmd); 	
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1638   	BLE_PROTOCOL_TxAddData(0x01);	
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1639   	
;;;1640   	BLE_PROTOCOL_TxAddData(ackParam);	
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1641   	BLE_PROTOCOL_TxAddFrame();	
00001e  e8bd4030          POP      {r4,r5,lr}
000022  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1642   }
;;;1643   
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendCmdSelectStatus1Ack||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_SendCmdSelectStatus1Ack PROC
;;;2043   // 仪表状态组1信息回复
;;;2044   void BLE_PROTOCOL_SendCmdSelectStatus1Ack(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2045   {
;;;2046   	uint8 val1, val2, val3, val4;
;;;2047   	uint16 valTmp;
;;;2048   	uint32 valTemp;
;;;2049   
;;;2050   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2051   	BLE_PROTOCOL_TxAddData(BLE_CMD_SELECT_GETSTATUS_UP); 	
00000a  2038              MOVS     r0,#0x38
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2052   	BLE_PROTOCOL_TxAddData(0x16);
000010  2016              MOVS     r0,#0x16
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2053   
;;;2054   	// 状态组1序号
;;;2055   	BLE_PROTOCOL_TxAddData(0x01);	
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2056   
;;;2057   	// 骑行总里程
;;;2058   	valTemp = paramCB.nvm.param.common.record.total.distance;
00001c  4c32              LDR      r4,|L19.232|
00001e  f8d41334          LDR      r1,[r4,#0x334]  ; paramCB
;;;2059   	val1 = (uint8)((valTemp >> 24) & 0xFF);
000022  0e08              LSRS     r0,r1,#24
;;;2060   	val2 = (uint8)((valTemp >> 16) & 0xFF);
000024  f3c14507          UBFX     r5,r1,#16,#8
;;;2061   	val3 = (uint8)((valTemp >> 8) & 0xFF);
000028  f3c12607          UBFX     r6,r1,#8,#8
;;;2062   	val4 = (uint8)(valTemp & 0xFF);
00002c  b2cf              UXTB     r7,r1
;;;2063   	BLE_PROTOCOL_TxAddData(val1);
00002e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2064   	BLE_PROTOCOL_TxAddData(val2);
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2065   	BLE_PROTOCOL_TxAddData(val3);
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2066   	BLE_PROTOCOL_TxAddData(val4);
00003e  4638              MOV      r0,r7
000040  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2067   
;;;2068   	// 总时间
;;;2069   	valTemp = PARAM_GetTotalRidingTime();
000044  f8d41340          LDR      r1,[r4,#0x340]  ; paramCB
;;;2070   	val1 = (uint8)((valTemp >> 24) & 0xFF);
000048  0e08              LSRS     r0,r1,#24
;;;2071   	val2 = (uint8)((valTemp >> 16) & 0xFF);
00004a  f3c14507          UBFX     r5,r1,#16,#8
;;;2072   	val3 = (uint8)((valTemp >> 8) & 0xFF);
00004e  f3c12607          UBFX     r6,r1,#8,#8
;;;2073   	val4 = (uint8)(valTemp & 0xFF);
000052  b2cf              UXTB     r7,r1
;;;2074   	BLE_PROTOCOL_TxAddData(val1);
000054  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2075   	BLE_PROTOCOL_TxAddData(val2);
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2076   	BLE_PROTOCOL_TxAddData(val3);
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2077   	BLE_PROTOCOL_TxAddData(val4);
000064  4638              MOV      r0,r7
000066  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2078   
;;;2079   	// 总卡路里
;;;2080   	valTemp = PARAM_GetTotalCalories();
00006a  f8d41344          LDR      r1,[r4,#0x344]  ; paramCB
;;;2081   	val1 = (uint8)((valTemp >> 24) & 0xFF);
00006e  0e08              LSRS     r0,r1,#24
;;;2082   	val2 = (uint8)((valTemp >> 16) & 0xFF);
000070  f3c14507          UBFX     r5,r1,#16,#8
;;;2083   	val3 = (uint8)((valTemp >> 8) & 0xFF);
000074  f3c12607          UBFX     r6,r1,#8,#8
;;;2084   	val4 = (uint8)(valTemp & 0xFF);
000078  b2cf              UXTB     r7,r1
;;;2085   	BLE_PROTOCOL_TxAddData(val1);
00007a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2086   	BLE_PROTOCOL_TxAddData(val2);
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2087   	BLE_PROTOCOL_TxAddData(val3);
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2088   	BLE_PROTOCOL_TxAddData(val4);
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2089   
;;;2090   	// 最大速度
;;;2091   	valTmp = paramCB.nvm.param.common.record.trip.speedMax;
000090  f8b40350          LDRH     r0,[r4,#0x350]  ; paramCB
;;;2092   	val1 = ((valTmp >> 8) & 0xFF);
000094  0a01              LSRS     r1,r0,#8
;;;2093   	val2 = (valTmp & 0xFF);
000096  b2c5              UXTB     r5,r0
;;;2094   	BLE_PROTOCOL_TxAddData(val1);
000098  4608              MOV      r0,r1
00009a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2095   	BLE_PROTOCOL_TxAddData(val2);
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2096   
;;;2097   	// 平均速度
;;;2098   	valTmp = paramCB.runtime.trip.speedAverage;
0000a4  f8b40252          LDRH     r0,[r4,#0x252]  ; paramCB
;;;2099   	val1 = ((valTmp >> 8) & 0xFF);
0000a8  0a01              LSRS     r1,r0,#8
;;;2100   	val2 = (valTmp & 0xFF);
0000aa  b2c5              UXTB     r5,r0
;;;2101   	BLE_PROTOCOL_TxAddData(val1);
0000ac  4608              MOV      r0,r1
0000ae  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2102   	BLE_PROTOCOL_TxAddData(val2);
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2103   
;;;2104   	// 电量百分比
;;;2105   	val1 = PARAM_GetBatteryPercent();
0000b8  f8940172          LDRB     r0,[r4,#0x172]  ; paramCB
;;;2106   	BLE_PROTOCOL_TxAddData(val1);
0000bc  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2107   
;;;2108   	// 助力档位
;;;2109   	val1 = (uint8)PARAM_GetAssistLevel();
0000c0  f7fffffe          BL       PARAM_GetAssistLevel
;;;2110   	BLE_PROTOCOL_TxAddData(val1);
0000c4  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2111   
;;;2112   	// 大灯状态
;;;2113   	val1 = (uint8)PARAM_GetLightSwitch();
0000c8  f89401fa          LDRB     r0,[r4,#0x1fa]  ; paramCB
;;;2114   	BLE_PROTOCOL_TxAddData(val1);
0000cc  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2115   
;;;2116   	// 显示单位
;;;2117   	val1 = PARAM_GetUnit();
0000d0  f8940311          LDRB     r0,[r4,#0x311]  ; paramCB
;;;2118   	BLE_PROTOCOL_TxAddData(val1);
0000d4  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2119   	
;;;2120   	// 锁车状态
;;;2121   	BLE_PROTOCOL_TxAddData(0x00);
0000d8  2000              MOVS     r0,#0
0000da  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2122   
;;;2123   	BLE_PROTOCOL_TxAddFrame();	
0000de  e8bd41f0          POP      {r4-r8,lr}
0000e2  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;2124   }
;;;2125   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L19.232|
                          DCD      paramCB

                          AREA ||i.BLE_PROTOCOL_SendCmdSelectStatus2Ack||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_SendCmdSelectStatus2Ack PROC
;;;2126   // 仪表状态组2信息回复
;;;2127   void BLE_PROTOCOL_SendCmdSelectStatus2Ack(void)
000000  b510              PUSH     {r4,lr}
;;;2128   {
;;;2129   	uint8 val1;
;;;2130   
;;;2131   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000002  2055              MOVS     r0,#0x55
000004  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2132   	BLE_PROTOCOL_TxAddData(BLE_CMD_SELECT_GETSTATUS_UP); 	
000008  2038              MOVS     r0,#0x38
00000a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2133   	BLE_PROTOCOL_TxAddData(0x0E);	
00000e  200e              MOVS     r0,#0xe
000010  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2134   	
;;;2135   	// 状态组2序号
;;;2136   	BLE_PROTOCOL_TxAddData(0x02);	
000014  2002              MOVS     r0,#2
000016  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2137   
;;;2138   	// 仪表背光亮度
;;;2139   	val1 = PARAM_GetBrightness();
00001a  4c0c              LDR      r4,|L20.76|
00001c  7820              LDRB     r0,[r4,#0]  ; paramCB
;;;2140   	BLE_PROTOCOL_TxAddData(val1);
00001e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2141   	
;;;2142   	// 自动关机时间
;;;2143   	val1 = PARAM_GetPowerOffTime();
000022  7860              LDRB     r0,[r4,#1]  ; paramCB
;;;2144   	BLE_PROTOCOL_TxAddData(val1);
000024  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2145   
;;;2146   	// 限速值
;;;2147   	val1 = paramCB.nvm.param.common.speed.limitVal/10;
000028  8aa0              LDRH     r0,[r4,#0x14]  ; paramCB
00002a  210a              MOVS     r1,#0xa
00002c  fbb0f0f1          UDIV     r0,r0,r1
000030  b2c0              UXTB     r0,r0
;;;2148   	BLE_PROTOCOL_TxAddData(val1);
000032  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2149   	
;;;2150   	// 启动方式
;;;2151   	BLE_PROTOCOL_TxAddData(0x01);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2152   	
;;;2153   	// 巡航模式
;;;2154   	BLE_PROTOCOL_TxAddData(0x01);
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2155   	
;;;2156   	BLE_PROTOCOL_TxAddFrame();	
000042  e8bd4010          POP      {r4,lr}
000046  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;2157   }
;;;2158   
                          ENDP

00004a  0000              DCW      0x0000
                  |L20.76|
                          DCD      paramCB+0x318

                          AREA ||i.BLE_PROTOCOL_SendCmdSelectStatus3Ack||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendCmdSelectStatus3Ack PROC
;;;2159   // 仪表状态组3信息回复
;;;2160   void BLE_PROTOCOL_SendCmdSelectStatus3Ack(void)
000000  b510              PUSH     {r4,lr}
;;;2161   {
;;;2162   	int i = 0;
000002  2400              MOVS     r4,#0
;;;2163   	
;;;2164   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2165   	BLE_PROTOCOL_TxAddData(BLE_CMD_SELECT_GETSTATUS_UP); 	
00000a  2038              MOVS     r0,#0x38
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2166   	BLE_PROTOCOL_TxAddData(0x2A);	
000010  202a              MOVS     r0,#0x2a
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2167   	
;;;2168   	// 状态组3序号
;;;2169   	BLE_PROTOCOL_TxAddData(0x03);	
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       BLE_PROTOCOL_TxAddData
                  |L21.28|
;;;2170   
;;;2171   	// 以下均是参数填充
;;;2172   	// 电池序列号
;;;2173   	for (i = 0;i < 32;i++)
;;;2174   	{
;;;2175   		BLE_PROTOCOL_TxAddData(0);
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
000022  1c64              ADDS     r4,r4,#1              ;2173
000024  2c20              CMP      r4,#0x20              ;2173
000026  dbf9              BLT      |L21.28|
;;;2176   	}
;;;2177   	
;;;2178   	// 电池充放电次数
;;;2179   	BLE_PROTOCOL_TxAddData(0);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2180   	BLE_PROTOCOL_TxAddData(0);
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2181   	
;;;2182   	// 电池损耗率
;;;2183   	BLE_PROTOCOL_TxAddData(0);
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2184   	BLE_PROTOCOL_TxAddData(0);
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2185   
;;;2186   	// 设计容量
;;;2187   	BLE_PROTOCOL_TxAddData(0);
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2188   	BLE_PROTOCOL_TxAddData(0);
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2189   
;;;2190   	// 满充容量
;;;2191   	BLE_PROTOCOL_TxAddData(0);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2192   	BLE_PROTOCOL_TxAddData(0);
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2193   
;;;2194   	// 剩余容量
;;;2195   	BLE_PROTOCOL_TxAddData(0);
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2196   	BLE_PROTOCOL_TxAddData(0);
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2197   	
;;;2198   	BLE_PROTOCOL_TxAddFrame();	
000064  e8bd4010          POP      {r4,lr}
000068  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;2199   }
;;;2200   
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendCmdStatusAck||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_SendCmdStatusAck PROC
;;;1679   // 仪表状态信息回复
;;;1680   void BLE_PROTOCOL_SendCmdStatusAck(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1681   {
;;;1682   	uint8 val1, val2, val3, val4;
;;;1683   	uint16 valTmp;
;;;1684   	uint32 valTemp;
;;;1685   	
;;;1686   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1687   	BLE_PROTOCOL_TxAddData(BLE_CMD_GETSTATUS_UP); 	
00000a  2031              MOVS     r0,#0x31
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1688   	BLE_PROTOCOL_TxAddData(0x16);	
000010  2016              MOVS     r0,#0x16
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1689   
;;;1690   	// 骑行总里程
;;;1691   	valTemp = paramCB.nvm.param.common.record.total.distance;
000016  4c3a              LDR      r4,|L22.256|
000018  f8d41334          LDR      r1,[r4,#0x334]  ; paramCB
;;;1692   	val1 = (uint8)((valTemp >> 24) & 0xFF);
00001c  0e08              LSRS     r0,r1,#24
;;;1693   	val2 = (uint8)((valTemp >> 16) & 0xFF);
00001e  f3c14507          UBFX     r5,r1,#16,#8
;;;1694   	val3 = (uint8)((valTemp >> 8) & 0xFF);
000022  f3c12607          UBFX     r6,r1,#8,#8
;;;1695   	val4 = (uint8)(valTemp & 0xFF);
000026  b2cf              UXTB     r7,r1
;;;1696   	BLE_PROTOCOL_TxAddData(val1);
000028  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1697   	BLE_PROTOCOL_TxAddData(val2);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1698   	BLE_PROTOCOL_TxAddData(val3);
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1699   	BLE_PROTOCOL_TxAddData(val4);
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1700   
;;;1701   	// 总时间
;;;1702   	valTemp = PARAM_GetTotalRidingTime();
00003e  f8d41340          LDR      r1,[r4,#0x340]  ; paramCB
;;;1703   	val1 = (uint8)((valTemp >> 24) & 0xFF);
000042  0e08              LSRS     r0,r1,#24
;;;1704   	val2 = (uint8)((valTemp >> 16) & 0xFF);
000044  f3c14507          UBFX     r5,r1,#16,#8
;;;1705   	val3 = (uint8)((valTemp >> 8) & 0xFF);
000048  f3c12607          UBFX     r6,r1,#8,#8
;;;1706   	val4 = (uint8)(valTemp & 0xFF);
00004c  b2cf              UXTB     r7,r1
;;;1707   	BLE_PROTOCOL_TxAddData(val1);
00004e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1708   	BLE_PROTOCOL_TxAddData(val2);
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1709   	BLE_PROTOCOL_TxAddData(val3);
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1710   	BLE_PROTOCOL_TxAddData(val4);
00005e  4638              MOV      r0,r7
000060  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1711   
;;;1712   	// 总卡路里
;;;1713   	valTemp = PARAM_GetTotalCalories();
000064  f8d41344          LDR      r1,[r4,#0x344]  ; paramCB
;;;1714   	val1 = (uint8)((valTemp >> 24) & 0xFF);
000068  0e08              LSRS     r0,r1,#24
;;;1715   	val2 = (uint8)((valTemp >> 16) & 0xFF);
00006a  f3c14507          UBFX     r5,r1,#16,#8
;;;1716   	val3 = (uint8)((valTemp >> 8) & 0xFF);
00006e  f3c12607          UBFX     r6,r1,#8,#8
;;;1717   	val4 = (uint8)(valTemp & 0xFF);
000072  b2cf              UXTB     r7,r1
;;;1718   	BLE_PROTOCOL_TxAddData(val1);
000074  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1719   	BLE_PROTOCOL_TxAddData(val2);
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1720   	BLE_PROTOCOL_TxAddData(val3);
00007e  4630              MOV      r0,r6
000080  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1721   	BLE_PROTOCOL_TxAddData(val4);
000084  4638              MOV      r0,r7
000086  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1722   
;;;1723   	// 最大速度
;;;1724   	valTmp = paramCB.nvm.param.common.record.trip.speedMax;
00008a  f8b40350          LDRH     r0,[r4,#0x350]  ; paramCB
;;;1725   	val1 = ((valTmp >> 8) & 0xFF);
00008e  0a01              LSRS     r1,r0,#8
;;;1726   	val2 = (valTmp & 0xFF);
000090  b2c5              UXTB     r5,r0
;;;1727   	BLE_PROTOCOL_TxAddData(val1);
000092  4608              MOV      r0,r1
000094  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1728   	BLE_PROTOCOL_TxAddData(val2);
000098  4628              MOV      r0,r5
00009a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1729   
;;;1730   	// 平均速度
;;;1731   	valTmp = paramCB.runtime.trip.speedAverage;
00009e  f8b40252          LDRH     r0,[r4,#0x252]  ; paramCB
;;;1732   	val1 = ((valTmp >> 8) & 0xFF);
0000a2  0a01              LSRS     r1,r0,#8
;;;1733   	val2 = (valTmp & 0xFF);
0000a4  b2c5              UXTB     r5,r0
;;;1734   	BLE_PROTOCOL_TxAddData(val1);
0000a6  4608              MOV      r0,r1
0000a8  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1735   	BLE_PROTOCOL_TxAddData(val2);
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1736   
;;;1737   	// 电量百分比
;;;1738   	val1 = PARAM_GetBatteryPercent();
0000b2  f8940172          LDRB     r0,[r4,#0x172]  ; paramCB
;;;1739   	BLE_PROTOCOL_TxAddData(val1);
0000b6  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1740   
;;;1741   	// 助力档位
;;;1742   	val1 = (uint8)PARAM_GetAssistLevel();
0000ba  f7fffffe          BL       PARAM_GetAssistLevel
;;;1743   	BLE_PROTOCOL_TxAddData(val1);
0000be  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1744   
;;;1745   	// 大灯状态
;;;1746   	val1 = (uint8)PARAM_GetLightSwitch();
0000c2  f89401fa          LDRB     r0,[r4,#0x1fa]  ; paramCB
;;;1747   	BLE_PROTOCOL_TxAddData(val1);
0000c6  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1748   
;;;1749   	// 自动关机时间
;;;1750   	val1 = PARAM_GetPowerOffTime();
0000ca  f8940319          LDRB     r0,[r4,#0x319]  ; paramCB
;;;1751   	BLE_PROTOCOL_TxAddData(val1);
0000ce  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1752   
;;;1753   	// 限速值
;;;1754   	val1 = paramCB.nvm.param.common.speed.limitVal/10;
0000d2  f8b4032c          LDRH     r0,[r4,#0x32c]  ; paramCB
0000d6  210a              MOVS     r1,#0xa
0000d8  fbb0f0f1          UDIV     r0,r0,r1
0000dc  b2c0              UXTB     r0,r0
;;;1755   	BLE_PROTOCOL_TxAddData(val1);
0000de  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1756   
;;;1757   	// 显示单位
;;;1758   	val1 = PARAM_GetUnit();
0000e2  f8940311          LDRB     r0,[r4,#0x311]  ; paramCB
;;;1759   	BLE_PROTOCOL_TxAddData(val1);
0000e6  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1760   	
;;;1761   	// 锁车状态
;;;1762   	BLE_PROTOCOL_TxAddData(0x00);
0000ea  2000              MOVS     r0,#0
0000ec  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1763   
;;;1764   	// 仪表背光亮度
;;;1765   	val1 = PARAM_GetBrightness();
0000f0  f8940318          LDRB     r0,[r4,#0x318]  ; paramCB
;;;1766   	BLE_PROTOCOL_TxAddData(val1);
0000f4  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1767   
;;;1768   	BLE_PROTOCOL_TxAddFrame();	
0000f8  e8bd41f0          POP      {r4-r8,lr}
0000fc  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1769   }
;;;1770   
                          ENDP

                  |L22.256|
                          DCD      paramCB

                          AREA ||i.BLE_PROTOCOL_SendCmdTrun||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendCmdTrun PROC
;;;1611   // 转向灯控制
;;;1612   void BLE_PROTOCOL_SendCmdTrun(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;1613   {
000002  4604              MOV      r4,r0
;;;1614   
;;;1615   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1616   	BLE_PROTOCOL_TxAddData(BLE_CMD_CONTROL_TURNLIGHT_UP); 	
00000a  2055              MOVS     r0,#0x55
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1617   	BLE_PROTOCOL_TxAddData(0x00);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1618   
;;;1619   	BLE_PROTOCOL_TxAddData(param);	
000016  b2e0              UXTB     r0,r4
000018  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1620   	BLE_PROTOCOL_TxAddFrame();	
00001c  e8bd4010          POP      {r4,lr}
000020  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;1621   }
;;;1622   
                          ENDP


                          AREA ||i.BLE_PROTOCOL_SendGetMacAddr||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_SendGetMacAddr PROC
;;;2030   // 发送获取MAC地址
;;;2031   void BLE_PROTOCOL_SendGetMacAddr(uint32 param)
000000  b50e              PUSH     {r1-r3,lr}
;;;2032   {
;;;2033   	uint8 bleMacStr[] = "TTM:MAC-?";
000002  a007              ADR      r0,|L24.32|
000004  e9d01200          LDRD     r1,r2,[r0,#0]
000008  6880              LDR      r0,[r0,#8]
00000a  e9cd1200          STRD     r1,r2,[sp,#0]
00000e  9002              STR      r0,[sp,#8]
;;;2034   	
;;;2035   	// 使能BLE发送
;;;2036   	BLE_BRTS_TX_REQUEST();
;;;2037   
;;;2038   	// 将待发送命令添加到物理层缓冲区
;;;2039   	BLE_UART_AddTxArray(0xFFFF, bleMacStr, sizeof(bleMacStr));
000010  220a              MOVS     r2,#0xa
000012  4669              MOV      r1,sp
000014  f64f70ff          MOV      r0,#0xffff
000018  f7fffffe          BL       BLE_UART_AddTxArray
;;;2040   }
00001c  bd0e              POP      {r1-r3,pc}
;;;2041   
                          ENDP

00001e  0000              DCW      0x0000
                  |L24.32|
000020  54544d3a          DCB      "TTM:MAC-?",0
000024  4d41432d
000028  3f00    
00002a  00                DCB      0
00002b  00                DCB      0

                          AREA ||i.BLE_PROTOCOL_SendHistoryData||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_SendHistoryData PROC
;;;1983   // 仪表上报历史数据
;;;1984   void BLE_PROTOCOL_SendHistoryData(uint32 param)
000000  e92d42f0          PUSH     {r4-r7,r9,lr}
;;;1985   {
;;;1986   	uint8 val1, val2, val3, val4;
;;;1987   	uint16 valTmp;
;;;1988   	uint32 valTemp;
;;;1989   	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1990   	BLE_PROTOCOL_TxAddData(BLE_CMD_REPORT_HISTORICAL_DATA_UP); 	
00000a  2064              MOVS     r0,#0x64
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1991   	BLE_PROTOCOL_TxAddData(0x0A);	
000010  200a              MOVS     r0,#0xa
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1992   
;;;1993   	
;;;1994   	val1 = (uint8)((valTemp >> 24) & 0xFF);
000016  0e26              LSRS     r6,r4,#24
;;;1995   	val2 = (uint8)((valTemp >> 16) & 0xFF);
000018  f3c44707          UBFX     r7,r4,#16,#8
;;;1996   	val3 = (uint8)((valTemp >> 8) & 0xFF);
00001c  f3c42507          UBFX     r5,r4,#8,#8
;;;1997   	val4 = (uint8)(valTemp & 0xFF);
000020  f00409ff          AND      r9,r4,#0xff
;;;1998   	BLE_PROTOCOL_TxAddData(val1);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;1999   	BLE_PROTOCOL_TxAddData(val2);
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2000   	BLE_PROTOCOL_TxAddData(val3);
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2001   	BLE_PROTOCOL_TxAddData(val4);
000036  4648              MOV      r0,r9
000038  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2002   	
;;;2003   	// 运动时长
;;;2004   	BLE_PROTOCOL_TxAddData(val1);
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2005   	BLE_PROTOCOL_TxAddData(val2);
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2006   
;;;2007   	// 最高速度
;;;2008   	val1 = ((valTmp >> 8) & 0xFF);
000048  ea4f2618          LSR      r6,r8,#8
;;;2009   	val2 = (valTmp & 0xFF);
00004c  f00807ff          AND      r7,r8,#0xff
;;;2010   	BLE_PROTOCOL_TxAddData(val1);
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2011   	BLE_PROTOCOL_TxAddData(val2);
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2012   
;;;2013   	// 卡路里
;;;2014   	val2 = (valTmp & 0xFF);
;;;2015   	BLE_PROTOCOL_TxAddData(val1);
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2016   	BLE_PROTOCOL_TxAddData(val2);
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2017   
;;;2018   	// 所属时间段
;;;2019   	BLE_PROTOCOL_TxAddData(val1);
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2020   
;;;2021   	// 所属时间段里程
;;;2022   	val1 = (uint8)((valTemp >> 8) & 0xFF);
00006e  4628              MOV      r0,r5
;;;2023   	val2 = (uint8)(valTemp & 0xFF);
000070  b2e4              UXTB     r4,r4
;;;2024   	BLE_PROTOCOL_TxAddData(val1);
000072  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2025   	BLE_PROTOCOL_TxAddData(val2);
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;2026   
;;;2027   	BLE_PROTOCOL_TxAddFrame();	
00007c  e8bd42f0          POP      {r4-r7,r9,lr}
000080  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;2028   }
;;;2029   
                          ENDP


                          AREA ||i.BLE_PROTOCOL_StartTimeoutCheckTask||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_StartTimeoutCheckTask PROC
;;;197    // 启动通讯超时判断任务
;;;198    void BLE_PROTOCOL_StartTimeoutCheckTask(void)
000000  4770              BX       lr
;;;199    {
;;;200    }
;;;201    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_TxAddData||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_TxAddData PROC
;;;267    // 向发送命令帧队列中添加数据
;;;268    void BLE_PROTOCOL_TxAddData(uint8 data)
000000  b530              PUSH     {r4,r5,lr}
;;;269    {
;;;270    	uint16 head = bleProtocolCB.tx.head;
000002  490f              LDR      r1,|L27.64|
000004  f8b1473a          LDRH     r4,[r1,#0x73a]  ; bleProtocolCB
;;;271    	uint16 end =  bleProtocolCB.tx.end;
000008  f8b1273c          LDRH     r2,[r1,#0x73c]  ; bleProtocolCB
;;;272    	BLE_PROTOCOL_TX_CMD_FRAME* pCmdFrame = &bleProtocolCB.tx.cmdQueue[bleProtocolCB.tx.end];
00000c  234d              MOVS     r3,#0x4d
00000e  4353              MULS     r3,r2,r3
000010  eb010143          ADD      r1,r1,r3,LSL #1
000014  f5016187          ADD      r1,r1,#0x438
;;;273    
;;;274    	// 发送缓冲区已满，不予接收
;;;275    	if((end + 1) % BLE_PROTOCOL_TX_QUEUE_SIZE == head)
000018  1c52              ADDS     r2,r2,#1
00001a  2305              MOVS     r3,#5
00001c  fbb2f5f3          UDIV     r5,r2,r3
000020  fb032215          MLS      r2,r3,r5,r2
000024  42a2              CMP      r2,r4
000026  d009              BEQ      |L27.60|
;;;276    	{
;;;277    		return;
;;;278    	}
;;;279    	
;;;280    	// 队尾命令帧已满，退出
;;;281    	if(pCmdFrame->length >= BLE_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX)
000028  f8b12098          LDRH     r2,[r1,#0x98]
00002c  2a96              CMP      r2,#0x96
00002e  d205              BCS      |L27.60|
;;;282    	{
;;;283    		return;
;;;284    	}
;;;285    
;;;286    	// 数据添加到帧末尾，并更新帧长度
;;;287    	pCmdFrame->buff[pCmdFrame->length] = data;
000030  1c8b              ADDS     r3,r1,#2
000032  54d0              STRB     r0,[r2,r3]
;;;288    	pCmdFrame->length ++;
000034  f8310f98          LDRH     r0,[r1,#0x98]!
000038  1c40              ADDS     r0,r0,#1
00003a  8008              STRH     r0,[r1,#0]
                  |L27.60|
;;;289    }
00003c  bd30              POP      {r4,r5,pc}
;;;290    
                          ENDP

00003e  0000              DCW      0x0000
                  |L27.64|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_TxAddFrame||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_TxAddFrame PROC
;;;291    // 确认添加命令帧，即承认之前填充的数据为命令帧，将其添加到发送队列中，由main进行调度发送，本函数内会自动校正命令长度，并添加校验码
;;;292    void BLE_PROTOCOL_TxAddFrame(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;293    {
;;;294    	uint16 cc = 0;
000002  2300              MOVS     r3,#0
;;;295    	uint16 i = 0;
000004  2100              MOVS     r1,#0
;;;296    	uint16 head = bleProtocolCB.tx.head;
000006  4d1c              LDR      r5,|L28.120|
000008  f8b5773a          LDRH     r7,[r5,#0x73a]  ; bleProtocolCB
;;;297    	uint16 end  = bleProtocolCB.tx.end;
00000c  f8b5473c          LDRH     r4,[r5,#0x73c]  ; bleProtocolCB
;;;298    	BLE_PROTOCOL_TX_CMD_FRAME* pCmdFrame = &bleProtocolCB.tx.cmdQueue[bleProtocolCB.tx.end];
000010  204d              MOVS     r0,#0x4d
000012  4360              MULS     r0,r4,r0
000014  eb050040          ADD      r0,r5,r0,LSL #1
000018  f5006087          ADD      r0,r0,#0x438
;;;299    	uint16 length = pCmdFrame->length;
00001c  f8b02098          LDRH     r2,[r0,#0x98]
;;;300    
;;;301    	// 发送缓冲区已满，不予接收
;;;302    	if((end + 1) % BLE_PROTOCOL_TX_QUEUE_SIZE == head)
000020  1c64              ADDS     r4,r4,#1
000022  2605              MOVS     r6,#5
000024  fbb4fcf6          UDIV     r12,r4,r6
000028  fb06441c          MLS      r4,r6,r12,r4
00002c  42bc              CMP      r4,r7
00002e  d003              BEQ      |L28.56|
;;;303    	{
;;;304    		return;
;;;305    	}
;;;306    	
;;;307    	// 命令帧长度不足，清除已填充的数据，退出
;;;308    	if(BLE_PROTOCOL_CMD_FRAME_LENGTH_MIN-1 > length)	// 减去"校验和"1个字节
000030  2a03              CMP      r2,#3
000032  d202              BCS      |L28.58|
;;;309    	{
;;;310    		pCmdFrame->length = 0;
000034  f8a01098          STRH     r1,[r0,#0x98]
                  |L28.56|
;;;311    		
;;;312    		return;
;;;313    	}
;;;314    
;;;315    	// 队尾命令帧已满，退出
;;;316    	if(length >= BLE_PROTOCOL_TX_CMD_FRAME_LENGTH_MAX)
;;;317    	{
;;;318    		return;
;;;319    	}
;;;320    
;;;321    	// 重新设置数据长度，系统在准备数据时，填充的"数据长度"可以为任意值，并且不需要添加校验码，在这里重新设置为正确的值
;;;322    	pCmdFrame->buff[BLE_PROTOCOL_CMD_LENGTH_INDEX] = length - 3;	// 重设数据长度
;;;323    
;;;324    	for(i=0; i<length; i++)
;;;325    	{
;;;326       		cc ^= pCmdFrame->buff[i];
;;;327    	}
;;;328    	pCmdFrame->buff[pCmdFrame->length++] = ~cc ;
;;;329    
;;;330    	bleProtocolCB.tx.end ++;
;;;331    	bleProtocolCB.tx.end %= BLE_PROTOCOL_TX_QUEUE_SIZE;
;;;332    	//pCB->tx.cmdQueue[pCB->tx.end].length = 0;   //2015.12.2修改
;;;333    }
000038  bdf0              POP      {r4-r7,pc}
                  |L28.58|
00003a  2a96              CMP      r2,#0x96              ;316
00003c  d2fc              BCS      |L28.56|
00003e  1ed4              SUBS     r4,r2,#3              ;322
000040  7104              STRB     r4,[r0,#4]            ;322
000042  e004              B        |L28.78|
                  |L28.68|
000044  1844              ADDS     r4,r0,r1              ;326
000046  78a4              LDRB     r4,[r4,#2]            ;326
000048  4063              EORS     r3,r3,r4              ;326
00004a  1c49              ADDS     r1,r1,#1              ;324
00004c  b289              UXTH     r1,r1                 ;324
                  |L28.78|
00004e  4291              CMP      r1,r2                 ;324
000050  d3f8              BCC      |L28.68|
000052  f8b01098          LDRH     r1,[r0,#0x98]         ;328
000056  43db              MVNS     r3,r3                 ;328
000058  1c4a              ADDS     r2,r1,#1              ;328
00005a  f8a02098          STRH     r2,[r0,#0x98]         ;328
00005e  4408              ADD      r0,r0,r1              ;328
000060  7083              STRB     r3,[r0,#2]            ;328
000062  f8b5073c          LDRH     r0,[r5,#0x73c]        ;330  ; bleProtocolCB
000066  1c40              ADDS     r0,r0,#1              ;330
000068  b280              UXTH     r0,r0                 ;330
00006a  fbb0f1f6          UDIV     r1,r0,r6              ;331
00006e  fb060011          MLS      r0,r6,r1,r0           ;331
000072  f8a5073c          STRH     r0,[r5,#0x73c]        ;331
000076  bdf0              POP      {r4-r7,pc}
;;;334    
                          ENDP

                  |L28.120|
                          DCD      ||.bss||

                          AREA ||i.BLE_PROTOCOL_TxErrorInfo||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_TxErrorInfo PROC
;;;334    
;;;335    void BLE_PROTOCOL_TxErrorInfo(uint32 param)
000000  b510              PUSH     {r4,lr}
;;;336    {
;;;337    	uint8 val1,val2;
;;;338    	uint16 valTemp = (uint16)param;
000002  b284              UXTH     r4,r0
;;;339    	// 使能BLE发送
;;;340    	BLE_BRTS_TX_REQUEST();
;;;341    
;;;342    	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000004  2055              MOVS     r0,#0x55
000006  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;343    	BLE_PROTOCOL_TxAddData(BLE_CMD_ERROR_UP); 	
00000a  2008              MOVS     r0,#8
00000c  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;344    	BLE_PROTOCOL_TxAddData(0x02);
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;345    	
;;;346    	val1 = (uint8)((valTemp >> 8) & 0xFF);
000016  0a20              LSRS     r0,r4,#8
;;;347    	val2 = (uint8)(valTemp & 0xFF);
000018  b2e4              UXTB     r4,r4
;;;348    	BLE_PROTOCOL_TxAddData(val1);
00001a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;349    	BLE_PROTOCOL_TxAddData(val2);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;350    
;;;351    	BLE_PROTOCOL_TxAddFrame();	
000024  e8bd4010          POP      {r4,lr}
000028  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;352    }
;;;353    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_TxStartHistoryData||, CODE, READONLY, ALIGN=1

                  BLE_PROTOCOL_TxStartHistoryData PROC
;;;354    // 仪表启动同步历史数据
;;;355    void BLE_PROTOCOL_TxStartHistoryData(uint32 param)
000000  b500              PUSH     {lr}
;;;356    {
;;;357    	// 使能BLE发送
;;;358    	BLE_BRTS_TX_REQUEST();
;;;359    
;;;360    	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD); 		
000002  2055              MOVS     r0,#0x55
000004  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;361    	BLE_PROTOCOL_TxAddData(BLE_CMD_START_HISTORICAL_DATA_UP); 	
000008  2062              MOVS     r0,#0x62
00000a  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;362    	BLE_PROTOCOL_TxAddData(0x00);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;363    	BLE_PROTOCOL_TxAddFrame();	
000014  f85deb04          POP      {lr}
000018  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;364    }
;;;365    
                          ENDP


                          AREA ||i.BLE_PROTOCOL_TxStateProcess||, CODE, READONLY, ALIGN=2

                  BLE_PROTOCOL_TxStateProcess PROC
;;;458    // 协议层发送处理过程
;;;459    void BLE_PROTOCOL_TxStateProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;460    {
;;;461    	uint16 head = bleProtocolCB.tx.head;
000002  4c14              LDR      r4,|L31.84|
000004  f8b4373a          LDRH     r3,[r4,#0x73a]  ; bleProtocolCB
;;;462    	uint16 end =  bleProtocolCB.tx.end;
000008  f8b4673c          LDRH     r6,[r4,#0x73c]  ; bleProtocolCB
;;;463    	uint16 length = bleProtocolCB.tx.cmdQueue[head].length;
00000c  204d              MOVS     r0,#0x4d
00000e  4358              MULS     r0,r3,r0
000010  eb040040          ADD      r0,r4,r0,LSL #1
000014  4605              MOV      r5,r0
000016  f8b024d0          LDRH     r2,[r0,#0x4d0]
;;;464    	uint8* pCmd = bleProtocolCB.tx.cmdQueue[head].buff;
00001a  f200413a          ADD      r1,r0,#0x43a
;;;465    	uint16 localDeviceID = bleProtocolCB.tx.cmdQueue[head].deviceID;
00001e  f8b00438          LDRH     r0,[r0,#0x438]
;;;466    
;;;467    	// 发送缓冲区为空，说明无数据
;;;468    	if (head == end)
000022  42b3              CMP      r3,r6
000024  d014              BEQ      |L31.80|
;;;469    	{
;;;470    		return;
;;;471    	}
;;;472    
;;;473    	// 发送函数没有注册直接返回
;;;474    	if (NULL == bleProtocolCB.sendDataThrowService)
000026  f8d43744          LDR      r3,[r4,#0x744]  ; bleProtocolCB
00002a  2b00              CMP      r3,#0
00002c  d010              BEQ      |L31.80|
;;;475    	{
;;;476    		return;
;;;477    	}
;;;478    
;;;479    	// 协议层有数据需要发送到驱动层		
;;;480    	if (!(*bleProtocolCB.sendDataThrowService)(localDeviceID, pCmd, length))
00002e  4798              BLX      r3
000030  2800              CMP      r0,#0
000032  d00d              BEQ      |L31.80|
;;;481    	{
;;;482    		return;
;;;483    	}
;;;484    
;;;485    	// 发送环形队列更新位置
;;;486    	bleProtocolCB.tx.cmdQueue[head].length = 0;
000034  2000              MOVS     r0,#0
000036  f8a504d0          STRH     r0,[r5,#0x4d0]
;;;487    	bleProtocolCB.tx.head ++;
00003a  f8b4073a          LDRH     r0,[r4,#0x73a]  ; bleProtocolCB
00003e  1c40              ADDS     r0,r0,#1
000040  b280              UXTH     r0,r0
;;;488    	bleProtocolCB.tx.head %= BLE_PROTOCOL_TX_QUEUE_SIZE;
000042  2105              MOVS     r1,#5
000044  fbb0f2f1          UDIV     r2,r0,r1
000048  fb010012          MLS      r0,r1,r2,r0
00004c  f8a4073a          STRH     r0,[r4,#0x73a]
                  |L31.80|
;;;489    }
000050  bd70              POP      {r4-r6,pc}
;;;490    
                          ENDP

000052  0000              DCW      0x0000
                  |L31.84|
                          DCD      ||.bss||

                          AREA ||i.BLE_UART_CALLBALL_GetBleMacAddrRequest||, CODE, READONLY, ALIGN=1

                  BLE_UART_CALLBALL_GetBleMacAddrRequest PROC
;;;226    // 定时器回调发送获取蓝牙地址命令
;;;227    void BLE_UART_CALLBALL_GetBleMacAddrRequest(uint32 param)
000000  2001              MOVS     r0,#1
;;;228    {
;;;229    	// 发送获取MAC地址
;;;230    	BLE_UART_SendCmdGetBleMacAddr(TRUE);
000002  f7ffbffe          B.W      BLE_UART_SendCmdGetBleMacAddr
;;;231    }
;;;232    
                          ENDP


                          AREA ||i.BLE_UART_SendCmdGetBleMacAddr||, CODE, READONLY, ALIGN=2

                  BLE_UART_SendCmdGetBleMacAddr PROC
;;;202    // 发送获取MAC地址
;;;203    void BLE_UART_SendCmdGetBleMacAddr(uint32 param)
000000  b5fe              PUSH     {r1-r7,lr}
;;;204    {
;;;205    	uint8 i;
;;;206    	uint8 bleMacStr[] = "TTM:MAC-?";
000002  a00f              ADR      r0,|L33.64|
000004  e9d01200          LDRD     r1,r2,[r0,#0]
000008  6880              LDR      r0,[r0,#8]
00000a  e9cd1200          STRD     r1,r2,[sp,#0]
00000e  9002              STR      r0,[sp,#8]
;;;207    	
;;;208    	// 使能BLE发送
;;;209    	BLE_BRTS_TX_REQUEST();
;;;210    
;;;211    	// 查询蓝牙mac指令,启动阻塞式发送
;;;212    	for (i = 0; bleMacStr[i] != '\0'; i++)
000010  2400              MOVS     r4,#0
;;;213    	{
;;;214    		// 填充数据，启动发送
;;;215    		// 防止丢失第一个字节(清除空标志位,务必加) 
;;;216    		usart_flag_get(BLE_UART_TYPE_DEF, USART_FLAG_TC);		
000012  4e0e              LDR      r6,|L33.76|
000014  466d              MOV      r5,sp                 ;206
000016  e00f              B        |L33.56|
                  |L33.24|
000018  2106              MOVS     r1,#6
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       usart_flag_get
;;;217    
;;;218    		// 填充数据
;;;219    		usart_data_transmit(BLE_UART_TYPE_DEF, bleMacStr[i]);
000020  5d29              LDRB     r1,[r5,r4]
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       usart_data_transmit
                  |L33.40|
;;;220    
;;;221    		// 未发送完，持续等待
;;;222    		while(usart_flag_get(BLE_UART_TYPE_DEF, USART_FLAG_TC) != SET);
000028  2106              MOVS     r1,#6
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       usart_flag_get
000030  2801              CMP      r0,#1
000032  d1f9              BNE      |L33.40|
000034  1c64              ADDS     r4,r4,#1              ;212
000036  b2e4              UXTB     r4,r4                 ;212
                  |L33.56|
000038  5d28              LDRB     r0,[r5,r4]            ;212
00003a  2800              CMP      r0,#0                 ;212
00003c  d1ec              BNE      |L33.24|
;;;223    	}	
;;;224    }
00003e  bdfe              POP      {r1-r7,pc}
;;;225    
                          ENDP

                  |L33.64|
000040  54544d3a          DCB      "TTM:MAC-?",0
000044  4d41432d
000048  3f00    
00004a  00                DCB      0
00004b  00                DCB      0
                  |L33.76|
                          DCD      0x40004400

                          AREA ||i.dutProgressReport||, CODE, READONLY, ALIGN=2

                  dutProgressReport PROC
;;;679    //uint8 progress[8] = {0};
;;;680    void dutProgressReport(uint32 temp)
000000  b570              PUSH     {r4-r6,lr}
;;;681    {
;;;682    	uint8 i;
;;;683    	
;;;684    	if(dut_info.APP_UP_FLAG)
000002  4d36              LDR      r5,|L34.220|
;;;685    	{
;;;686    		
;;;687    		if(dut_info.appUpFaile)//app升级失败
;;;688    		{
;;;689    			dut_info.dutProgress[3] = 102;
000004  2066              MOVS     r0,#0x66
000006  2400              MOVS     r4,#0
000008  7f69              LDRB     r1,[r5,#0x1d]         ;684  ; dut_info
00000a  2900              CMP      r1,#0                 ;684
00000c  d011              BEQ      |L34.50|
00000e  f8951033          LDRB     r1,[r5,#0x33]         ;687  ; dut_info
000012  b129              CBZ      r1,|L34.32|
000014  f885003d          STRB     r0,[r5,#0x3d]
;;;690    			TIMER_Pause(TIMER_ID_SET_DUT_PROGRESS_REPORT);
000018  2006              MOVS     r0,#6
00001a  f7fffffe          BL       TIMER_Pause
00001e  e02f              B        |L34.128|
                  |L34.32|
;;;691    		}
;;;692    		else
;;;693    		{
;;;694    			dut_info.dutProgress[3] = (dut_info.currentAppSize*100) / dut_info.appSize;
000020  8de8              LDRH     r0,[r5,#0x2e]  ; dut_info
000022  2164              MOVS     r1,#0x64
000024  4348              MULS     r0,r1,r0
000026  6a69              LDR      r1,[r5,#0x24]  ; dut_info
000028  fbb0f0f1          UDIV     r0,r0,r1
00002c  f885003d          STRB     r0,[r5,#0x3d]
000030  e026              B        |L34.128|
                  |L34.50|
;;;695    		}
;;;696    	}
;;;697    	else if(dut_info.UI_UP_FLAG)
000032  7fe9              LDRB     r1,[r5,#0x1f]  ; dut_info
000034  b189              CBZ      r1,|L34.90|
;;;698    	{
;;;699    		if(dut_info.uiUpFaile)//ui升级失败
000036  f8951034          LDRB     r1,[r5,#0x34]  ; dut_info
00003a  b129              CBZ      r1,|L34.72|
;;;700    		{
;;;701    			dut_info.dutProgress[5] = 102;
00003c  f885003f          STRB     r0,[r5,#0x3f]
;;;702    			TIMER_Pause(TIMER_ID_SET_DUT_PROGRESS_REPORT);
000040  2006              MOVS     r0,#6
000042  f7fffffe          BL       TIMER_Pause
000046  e01b              B        |L34.128|
                  |L34.72|
;;;703    		}
;;;704    		else
;;;705    		{
;;;706    			dut_info.dutProgress[5] = (dut_info.currentUiSize*100) / dut_info.uiSize;
000048  8e28              LDRH     r0,[r5,#0x30]  ; dut_info
00004a  2164              MOVS     r1,#0x64
00004c  4348              MULS     r0,r1,r0
00004e  6aa9              LDR      r1,[r5,#0x28]  ; dut_info
000050  fbb0f0f1          UDIV     r0,r0,r1
000054  f885003f          STRB     r0,[r5,#0x3f]
000058  e012              B        |L34.128|
                  |L34.90|
;;;707    		}
;;;708    	}else if(dut_info.CONFIG_UP_FLAG)
00005a  7fa9              LDRB     r1,[r5,#0x1e]  ; dut_info
00005c  b141              CBZ      r1,|L34.112|
;;;709    	{
;;;710    		if(dut_info.configUpFaile)//config升级失败
00005e  f8951035          LDRB     r1,[r5,#0x35]  ; dut_info
000062  b169              CBZ      r1,|L34.128|
;;;711    		{
;;;712    			dut_info.dutProgress[7] = 102;
000064  f8850041          STRB     r0,[r5,#0x41]
;;;713    			TIMER_Pause(TIMER_ID_SET_DUT_PROGRESS_REPORT);
000068  2006              MOVS     r0,#6
00006a  f7fffffe          BL       TIMER_Pause
00006e  e007              B        |L34.128|
                  |L34.112|
;;;714    		}
;;;715    	}else
;;;716    	{
;;;717    		//所有项升级完毕
;;;718    		TIMER_Pause(TIMER_ID_SET_DUT_PROGRESS_REPORT);
000070  2006              MOVS     r0,#6
000072  f7fffffe          BL       TIMER_Pause
;;;719    		dut_info.configUpFaile = FALSE;
000076  3533              ADDS     r5,r5,#0x33
000078  70ac              STRB     r4,[r5,#2]
;;;720    		dut_info.appUpFaile = FALSE;
00007a  702c              STRB     r4,[r5,#0]
;;;721    		dut_info.uiUpFaile = FALSE;
00007c  706c              STRB     r4,[r5,#1]
00007e  3d33              SUBS     r5,r5,#0x33
                  |L34.128|
;;;722    	}
;;;723    	
;;;724    	if(dut_info.appUpSuccesss)
;;;725    	{
;;;726    		dut_info.dutProgress[3] = 100;
000080  2064              MOVS     r0,#0x64
000082  f8951039          LDRB     r1,[r5,#0x39]         ;724  ; dut_info
000086  b119              CBZ      r1,|L34.144|
000088  f885003d          STRB     r0,[r5,#0x3d]
;;;727    		dut_info.appUpSuccesss = FALSE;
00008c  f8854039          STRB     r4,[r5,#0x39]
                  |L34.144|
;;;728    	}
;;;729    
;;;730    	if(dut_info.uiUpSuccesss)
000090  f8951038          LDRB     r1,[r5,#0x38]  ; dut_info
000094  b119              CBZ      r1,|L34.158|
;;;731    	{
;;;732    		dut_info.dutProgress[5] = 100;
000096  f885003f          STRB     r0,[r5,#0x3f]
;;;733    		dut_info.uiUpSuccesss = FALSE;
00009a  f8854038          STRB     r4,[r5,#0x38]
                  |L34.158|
;;;734    	}
;;;735    
;;;736    	if(dut_info.configUpSuccesss)
00009e  f8951037          LDRB     r1,[r5,#0x37]  ; dut_info
0000a2  b119              CBZ      r1,|L34.172|
;;;737    	{
;;;738    		dut_info.dutProgress[7] = 100;
0000a4  f8850041          STRB     r0,[r5,#0x41]
;;;739    		dut_info.configUpSuccesss = FALSE;
0000a8  f8854037          STRB     r4,[r5,#0x37]
                  |L34.172|
;;;740    	}
;;;741    	BLE_PROTOCOL_TxAddData(BLE_PROTOCOL_CMD_HEAD);			//添加命令头	
0000ac  2055              MOVS     r0,#0x55
0000ae  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;742    	BLE_PROTOCOL_TxAddData(UART_ARM_CMD_TOOL_DUT_PROCESS); 	//添加命令字0x15	
0000b2  2015              MOVS     r0,#0x15
0000b4  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;743    	BLE_PROTOCOL_TxAddData(0x00);						//数据长度临时为0
0000b8  2000              MOVS     r0,#0
0000ba  f7fffffe          BL       BLE_PROTOCOL_TxAddData
;;;744    	for(i = 0; i<8;i++)
0000be  2400              MOVS     r4,#0
                  |L34.192|
;;;745    	{
;;;746    		BLE_PROTOCOL_TxAddData(dut_info.dutProgress[i]);
0000c0  1928              ADDS     r0,r5,r4
0000c2  f890003a          LDRB     r0,[r0,#0x3a]
0000c6  f7fffffe          BL       BLE_PROTOCOL_TxAddData
0000ca  1c64              ADDS     r4,r4,#1              ;744
0000cc  b2e4              UXTB     r4,r4                 ;744
0000ce  2c08              CMP      r4,#8                 ;744
0000d0  d3f6              BCC      |L34.192|
;;;747    	}
;;;748    	BLE_PROTOCOL_TxAddFrame();							//设置数据长度和添加校验
0000d2  e8bd4070          POP      {r4-r6,lr}
0000d6  f7ffbffe          B.W      BLE_PROTOCOL_TxAddFrame
;;;749    }
;;;750    
                          ENDP

0000da  0000              DCW      0x0000
                  |L34.220|
                          DCD      dut_info

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  bleProtocolCB
                          %        1872

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Authentication_Table
000000  094cd76e          DCB      0x09,0x4c,0xd7,0x6e
000004  2e6d285f          DCB      0x2e,0x6d,0x28,0x5f
000008  03c6d159          DCB      0x03,0xc6,0xd1,0x59
00000c  abe3d597          DCB      0xab,0xe3,0xd5,0x97
000010  99373d3d          DCB      0x99,0x37,0x3d,0x3d
000014  3763e780          DCB      0x37,0x63,0xe7,0x80
000018  6953e4c9          DCB      0x69,0x53,0xe4,0xc9
00001c  1c60895c          DCB      0x1c,0x60,0x89,0x5c
000020  e819ce51          DCB      0xe8,0x19,0xce,0x51
000024  8d9bdbae          DCB      0x8d,0x9b,0xdb,0xae
000028  a43cf7f1          DCB      0xa4,0x3c,0xf7,0xf1
00002c  7ceee0ae          DCB      0x7c,0xee,0xe0,0xae
000030  7bcb07b2          DCB      0x7b,0xcb,0x07,0xb2
000034  b6449fd4          DCB      0xb6,0x44,0x9f,0xd4
000038  bfc7af9d          DCB      0xbf,0xc7,0xaf,0x9d
00003c  cb00bf09          DCB      0xcb,0x00,0xbf,0x09
000040  56839ffc          DCB      0x56,0x83,0x9f,0xfc
000044  825e2252          DCB      0x82,0x5e,0x22,0x52
000048  32f34237          DCB      0x32,0xf3,0x42,0x37
00004c  be8e5d06          DCB      0xbe,0x8e,0x5d,0x06
000050  c656acfc          DCB      0xc6,0x56,0xac,0xfc
000054  3a9508f1          DCB      0x3a,0x95,0x08,0xf1
000058  51dc69ba          DCB      0x51,0xdc,0x69,0xba
00005c  672e44ec          DCB      0x67,0x2e,0x44,0xec
000060  1b2c1591          DCB      0x1b,0x2c,0x15,0x91
000064  5c3ff2c1          DCB      0x5c,0x3f,0xf2,0xc1
000068  fdebee30          DCB      0xfd,0xeb,0xee,0x30
00006c  aa947c79          DCB      0xaa,0x94,0x7c,0x79
000070  deb8cb63          DCB      0xde,0xb8,0xcb,0x63
000074  6ef8285e          DCB      0x6e,0xf8,0x28,0x5e
000078  f5322b34          DCB      0xf5,0x32,0x2b,0x34
00007c  0fe4564e          DCB      0x0f,0xe4,0x56,0x4e
000080  f3f03ee1          DCB      0xf3,0xf0,0x3e,0xe1
000084  6853262d          DCB      0x68,0x53,0x26,0x2d
000088  70981e13          DCB      0x70,0x98,0x1e,0x13
00008c  616f5f91          DCB      0x61,0x6f,0x5f,0x91
000090  3975a211          DCB      0x39,0x75,0xa2,0x11
000094  2c3496fd          DCB      0x2c,0x34,0x96,0xfd
000098  5e2f76e6          DCB      0x5e,0x2f,0x76,0xe6
00009c  a73cf737          DCB      0xa7,0x3c,0xf7,0x37
0000a0  17886ea5          DCB      0x17,0x88,0x6e,0xa5
0000a4  9f3d249b          DCB      0x9f,0x3d,0x24,0x9b
0000a8  e6542d49          DCB      0xe6,0x54,0x2d,0x49
0000ac  f1000d77          DCB      0xf1,0x00,0x0d,0x77
0000b0  87f0aae6          DCB      0x87,0xf0,0xaa,0xe6
0000b4  cadbc1cc          DCB      0xca,0xdb,0xc1,0xcc
0000b8  97082216          DCB      0x97,0x08,0x22,0x16
0000bc  78e583f8          DCB      0x78,0xe5,0x83,0xf8
0000c0  0a637ce6          DCB      0x0a,0x63,0x7c,0xe6
0000c4  9a76c33d          DCB      0x9a,0x76,0xc3,0x3d
0000c8  c9063bae          DCB      0xc9,0x06,0x3b,0xae
0000cc  98b4ae18          DCB      0x98,0xb4,0xae,0x18
0000d0  1eeb7a84          DCB      0x1e,0xeb,0x7a,0x84
0000d4  b13073d8          DCB      0xb1,0x30,0x73,0xd8
0000d8  be148b54          DCB      0xbe,0x14,0x8b,0x54
0000dc  15db88f5          DCB      0x15,0xdb,0x88,0xf5
0000e0  a0c443b6          DCB      0xa0,0xc4,0x43,0xb6
0000e4  c8d2750c          DCB      0xc8,0xd2,0x75,0x0c
0000e8  eb15fd10          DCB      0xeb,0x15,0xfd,0x10
0000ec  45d1fc90          DCB      0x45,0xd1,0xfc,0x90
0000f0  a641e0a7          DCB      0xa6,0x41,0xe0,0xa7
0000f4  30489f7c          DCB      0x30,0x48,0x9f,0x7c
0000f8  0154039f          DCB      0x01,0x54,0x03,0x9f
0000fc  7d58deac          DCB      0x7d,0x58,0xde,0xac
000100  c8ed36ab          DCB      0xc8,0xed,0x36,0xab
000104  a6368e68          DCB      0xa6,0x36,0x8e,0x68
000108  262f4230          DCB      0x26,0x2f,0x42,0x30
00010c  b07956bc          DCB      0xb0,0x79,0x56,0xbc
000110  fdbe7e2a          DCB      0xfd,0xbe,0x7e,0x2a
000114  b8eacf3e          DCB      0xb8,0xea,0xcf,0x3e
000118  78b4224f          DCB      0x78,0xb4,0x22,0x4f
00011c  75b9fd31          DCB      0x75,0xb9,0xfd,0x31
000120  0abe0881          DCB      0x0a,0xbe,0x08,0x81
000124  87e8ec2d          DCB      0x87,0xe8,0xec,0x2d
000128  bd96b1b7          DCB      0xbd,0x96,0xb1,0xb7
00012c  115b8ac8          DCB      0x11,0x5b,0x8a,0xc8
000130  e7f353cb          DCB      0xe7,0xf3,0x53,0xcb
000134  a07bf6fa          DCB      0xa0,0x7b,0xf6,0xfa
000138  932e41f2          DCB      0x93,0x2e,0x41,0xf2
00013c  bbbfb62b          DCB      0xbb,0xbf,0xb6,0x2b
000140  311b5fea          DCB      0x31,0x1b,0x5f,0xea
000144  e3b49a14          DCB      0xe3,0xb4,0x9a,0x14
000148  5cb67826          DCB      0x5c,0xb6,0x78,0x26
00014c  e8654cd9          DCB      0xe8,0x65,0x4c,0xd9
000150  c9c69a84          DCB      0xc9,0xc6,0x9a,0x84
000154  c32dd609          DCB      0xc3,0x2d,0xd6,0x09
000158  ae84dd4c          DCB      0xae,0x84,0xdd,0x4c
00015c  71648b64          DCB      0x71,0x64,0x8b,0x64
000160  36db2c8e          DCB      0x36,0xdb,0x2c,0x8e
000164  725f30a0          DCB      0x72,0x5f,0x30,0xa0
000168  cef6fd23          DCB      0xce,0xf6,0xfd,0x23
00016c  e7bd4985          DCB      0xe7,0xbd,0x49,0x85
000170  5b0812cf          DCB      0x5b,0x08,0x12,0xcf
000174  7c07e113          DCB      0x7c,0x07,0xe1,0x13
000178  b594a667          DCB      0xb5,0x94,0xa6,0x67
00017c  8cf8479a          DCB      0x8c,0xf8,0x47,0x9a
000180  e7aea1e4          DCB      0xe7,0xae,0xa1,0xe4
000184  3e1f78e7          DCB      0x3e,0x1f,0x78,0xe7
000188  1adfc1c8          DCB      0x1a,0xdf,0xc1,0xc8
00018c  739148fc          DCB      0x73,0x91,0x48,0xfc
000190  1fbad04a          DCB      0x1f,0xba,0xd0,0x4a
000194  d3e679e8          DCB      0xd3,0xe6,0x79,0xe8
000198  0b4d411f          DCB      0x0b,0x4d,0x41,0x1f
00019c  50be54c0          DCB      0x50,0xbe,0x54,0xc0
0001a0  5feaece4          DCB      0x5f,0xea,0xec,0xe4
0001a4  e47a72ca          DCB      0xe4,0x7a,0x72,0xca
0001a8  8b02ac6b          DCB      0x8b,0x02,0xac,0x6b
0001ac  6cfbc253          DCB      0x6c,0xfb,0xc2,0x53
0001b0  f50b1a86          DCB      0xf5,0x0b,0x1a,0x86
0001b4  de7f0cdd          DCB      0xde,0x7f,0x0c,0xdd
0001b8  b7acba06          DCB      0xb7,0xac,0xba,0x06
0001bc  40f36e75          DCB      0x40,0xf3,0x6e,0x75
0001c0  baa036ff          DCB      0xba,0xa0,0x36,0xff
0001c4  175e9577          DCB      0x17,0x5e,0x95,0x77
0001c8  fa1996a2          DCB      0xfa,0x19,0x96,0xa2
0001cc  402fb41a          DCB      0x40,0x2f,0xb4,0x1a
0001d0  f8838923          DCB      0xf8,0x83,0x89,0x23
0001d4  5c917d6a          DCB      0x5c,0x91,0x7d,0x6a
0001d8  c5fd2b87          DCB      0xc5,0xfd,0x2b,0x87
0001dc  4a1d98a9          DCB      0x4a,0x1d,0x98,0xa9
0001e0  16ecdc58          DCB      0x16,0xec,0xdc,0x58
0001e4  5f7e5729          DCB      0x5f,0x7e,0x57,0x29
0001e8  5367178b          DCB      0x53,0x67,0x17,0x8b
0001ec  3ee5b320          DCB      0x3e,0xe5,0xb3,0x20
0001f0  93765f22          DCB      0x93,0x76,0x5f,0x22
0001f4  9b66c60a          DCB      0x9b,0x66,0xc6,0x0a
0001f8  f464ac52          DCB      0xf4,0x64,0xac,0x52
0001fc  3f914e92          DCB      0x3f,0x91,0x4e,0x92
000200  f58ed199          DCB      0xf5,0x8e,0xd1,0x99
000204  3625c546          DCB      0x36,0x25,0xc5,0x46
000208  48de347f          DCB      0x48,0xde,0x34,0x7f
00020c  f85b22d2          DCB      0xf8,0x5b,0x22,0xd2
000210  135781d6          DCB      0x13,0x57,0x81,0xd6
000214  2d6386a9          DCB      0x2d,0x63,0x86,0xa9
000218  1fe2e4ad          DCB      0x1f,0xe2,0xe4,0xad
00021c  6907d7b2          DCB      0x69,0x07,0xd7,0xb2
000220  8d17137c          DCB      0x8d,0x17,0x13,0x7c
000224  fae20c51          DCB      0xfa,0xe2,0x0c,0x51
000228  b821ea54          DCB      0xb8,0x21,0xea,0x54
00022c  7263cf86          DCB      0x72,0x63,0xcf,0x86
000230  d94eb4a4          DCB      0xd9,0x4e,0xb4,0xa4
000234  8f383f7f          DCB      0x8f,0x38,0x3f,0x7f
000238  008f6f24          DCB      0x00,0x8f,0x6f,0x24
00023c  a60cdace          DCB      0xa6,0x0c,0xda,0xce
000240  087999b8          DCB      0x08,0x79,0x99,0xb8
000244  e7b09bc1          DCB      0xe7,0xb0,0x9b,0xc1
000248  8e754763          DCB      0x8e,0x75,0x47,0x63
00024c  1d1ed486          DCB      0x1d,0x1e,0xd4,0x86
000250  3039a7a4          DCB      0x30,0x39,0xa7,0xa4
000254  bef9681e          DCB      0xbe,0xf9,0x68,0x1e
000258  7fcc2dc3          DCB      0x7f,0xcc,0x2d,0xc3
00025c  756c4c47          DCB      0x75,0x6c,0x4c,0x47
000260  6d8af4f5          DCB      0x6d,0x8a,0xf4,0xf5
000264  758f84d6          DCB      0x75,0x8f,0x84,0xd6
000268  35003163          DCB      0x35,0x00,0x31,0x63
00026c  3eb8043d          DCB      0x3e,0xb8,0x04,0x3d
000270  f19db262          DCB      0xf1,0x9d,0xb2,0x62
000274  ac5c2627          DCB      0xac,0x5c,0x26,0x27
000278  627ec384          DCB      0x62,0x7e,0xc3,0x84
00027c  6664a266          DCB      0x66,0x64,0xa2,0x66
000280  abd20142          DCB      0xab,0xd2,0x01,0x42
000284  1a1e2da7          DCB      0x1a,0x1e,0x2d,0xa7
000288  eab0e664          DCB      0xea,0xb0,0xe6,0x64
00028c  1227369f          DCB      0x12,0x27,0x36,0x9f
000290  08492272          DCB      0x08,0x49,0x22,0x72
000294  0d036fa7          DCB      0x0d,0x03,0x6f,0xa7
000298  1cd005c9          DCB      0x1c,0xd0,0x05,0xc9
00029c  6f35fdff          DCB      0x6f,0x35,0xfd,0xff
0002a0  42939126          DCB      0x42,0x93,0x91,0x26
0002a4  29089625          DCB      0x29,0x08,0x96,0x25
0002a8  be10f3bb          DCB      0xbe,0x10,0xf3,0xbb
0002ac  f86ce7fe          DCB      0xf8,0x6c,0xe7,0xfe
0002b0  c9008428          DCB      0xc9,0x00,0x84,0x28
0002b4  d68df6c3          DCB      0xd6,0x8d,0xf6,0xc3
0002b8  6dae89e6          DCB      0x6d,0xae,0x89,0xe6
0002bc  b4fd6be5          DCB      0xb4,0xfd,0x6b,0xe5
0002c0  3d0a4f00          DCB      0x3d,0x0a,0x4f,0x00
0002c4  e8aff15b          DCB      0xe8,0xaf,0xf1,0x5b
0002c8  d7586d2c          DCB      0xd7,0x58,0x6d,0x2c
0002cc  df0c1517          DCB      0xdf,0x0c,0x15,0x17
0002d0  815d2c91          DCB      0x81,0x5d,0x2c,0x91
0002d4  f7db5b8f          DCB      0xf7,0xdb,0x5b,0x8f
0002d8  45757de6          DCB      0x45,0x75,0x7d,0xe6
0002dc  97d76596          DCB      0x97,0xd7,0x65,0x96
0002e0  62f9e99c          DCB      0x62,0xf9,0xe9,0x9c
0002e4  ef1c6af2          DCB      0xef,0x1c,0x6a,0xf2
0002e8  fac8634e          DCB      0xfa,0xc8,0x63,0x4e
0002ec  efcf6467          DCB      0xef,0xcf,0x64,0x67
0002f0  4df7fab0          DCB      0x4d,0xf7,0xfa,0xb0
0002f4  57a79d36          DCB      0x57,0xa7,0x9d,0x36
0002f8  ebedc399          DCB      0xeb,0xed,0xc3,0x99
0002fc  02388f31          DCB      0x02,0x38,0x8f,0x31
000300  262e9204          DCB      0x26,0x2e,0x92,0x04
000304  9e3b51af          DCB      0x9e,0x3b,0x51,0xaf
000308  c9664825          DCB      0xc9,0x66,0x48,0x25
00030c  881b24ba          DCB      0x88,0x1b,0x24,0xba
000310  97ae8805          DCB      0x97,0xae,0x88,0x05
000314  6e16b559          DCB      0x6e,0x16,0xb5,0x59
000318  6c20f307          DCB      0x6c,0x20,0xf3,0x07
00031c  b38628e0          DCB      0xb3,0x86,0x28,0xe0
000320  f728a17c          DCB      0xf7,0x28,0xa1,0x7c
000324  edf77cf3          DCB      0xed,0xf7,0x7c,0xf3
000328  ec65d52c          DCB      0xec,0x65,0xd5,0x2c
00032c  d43251b7          DCB      0xd4,0x32,0x51,0xb7
000330  422a6929          DCB      0x42,0x2a,0x69,0x29
000334  aa045a43          DCB      0xaa,0x04,0x5a,0x43
000338  efe670d8          DCB      0xef,0xe6,0x70,0xd8
00033c  b9311640          DCB      0xb9,0x31,0x16,0x40
000340  d51bc247          DCB      0xd5,0x1b,0xc2,0x47
000344  a662c11b          DCB      0xa6,0x62,0xc1,0x1b
000348  c8b89151          DCB      0xc8,0xb8,0x91,0x51
00034c  c2f18841          DCB      0xc2,0xf1,0x88,0x41
000350  f2e62129          DCB      0xf2,0xe6,0x21,0x29
000354  8cd57632          DCB      0x8c,0xd5,0x76,0x32
000358  e5b44138          DCB      0xe5,0xb4,0x41,0x38
00035c  112ba875          DCB      0x11,0x2b,0xa8,0x75
000360  352c437a          DCB      0x35,0x2c,0x43,0x7a
000364  ec0eb9ba          DCB      0xec,0x0e,0xb9,0xba
000368  64ab61c5          DCB      0x64,0xab,0x61,0xc5
00036c  f8b982ad          DCB      0xf8,0xb9,0x82,0xad
000370  6c9ae497          DCB      0x6c,0x9a,0xe4,0x97
000374  0830843f          DCB      0x08,0x30,0x84,0x3f
000378  50e58966          DCB      0x50,0xe5,0x89,0x66
00037c  39e2b27f          DCB      0x39,0xe2,0xb2,0x7f
000380  58bade8d          DCB      0x58,0xba,0xde,0x8d
000384  a205683a          DCB      0xa2,0x05,0x68,0x3a
000388  08789f41          DCB      0x08,0x78,0x9f,0x41
00038c  889abbf1          DCB      0x88,0x9a,0xbb,0xf1
000390  dae3513d          DCB      0xda,0xe3,0x51,0x3d
000394  536081f3          DCB      0x53,0x60,0x81,0xf3
000398  52eda20c          DCB      0x52,0xed,0xa2,0x0c
00039c  dd26b2a1          DCB      0xdd,0x26,0xb2,0xa1
0003a0  05b93d16          DCB      0x05,0xb9,0x3d,0x16
0003a4  f333011d          DCB      0xf3,0x33,0x01,0x1d
0003a8  8fb133d7          DCB      0x8f,0xb1,0x33,0xd7
0003ac  09c5cff9          DCB      0x09,0xc5,0xcf,0xf9
0003b0  a1b813fb          DCB      0xa1,0xb8,0x13,0xfb
0003b4  83d8daaf          DCB      0x83,0xd8,0xda,0xaf
0003b8  a2e45529          DCB      0xa2,0xe4,0x55,0x29
0003bc  16b74ad8          DCB      0x16,0xb7,0x4a,0xd8
0003c0  8c53c3c6          DCB      0x8c,0x53,0xc3,0xc6
0003c4  1e05f888          DCB      0x1e,0x05,0xf8,0x88
0003c8  f7eae702          DCB      0xf7,0xea,0xe7,0x02
0003cc  f0411841          DCB      0xf0,0x41,0x18,0x41
0003d0  8b27c3e7          DCB      0x8b,0x27,0xc3,0xe7
0003d4  7df79c4d          DCB      0x7d,0xf7,0x9c,0x4d
0003d8  3a555243          DCB      0x3a,0x55,0x52,0x43
0003dc  da1cff8f          DCB      0xda,0x1c,0xff,0x8f
0003e0  05ba8bac          DCB      0x05,0xba,0x8b,0xac
0003e4  794a4b08          DCB      0x79,0x4a,0x4b,0x08
0003e8  32a1f9ef          DCB      0x32,0xa1,0xf9,0xef
0003ec  27d884a3          DCB      0x27,0xd8,0x84,0xa3
0003f0  224e10a6          DCB      0x22,0x4e,0x10,0xa6
0003f4  1d06da0c          DCB      0x1d,0x06,0xda,0x0c
0003f8  463edbd3          DCB      0x46,0x3e,0xdb,0xd3
0003fc  bdb13399          DCB      0xbd,0xb1,0x33,0x99
000400  d70eb3ef          DCB      0xd7,0x0e,0xb3,0xef
000404  d07ee338          DCB      0xd0,0x7e,0xe3,0x38
000408  1beda678          DCB      0x1b,0xed,0xa6,0x78
00040c  a0330765          DCB      0xa0,0x33,0x07,0x65
000410  f3848c16          DCB      0xf3,0x84,0x8c,0x16
000414  8a5aeb58          DCB      0x8a,0x5a,0xeb,0x58
000418  91865b83          DCB      0x91,0x86,0x5b,0x83
00041c  655816b1          DCB      0x65,0x58,0x16,0xb1
000420  fb8dd02f          DCB      0xfb,0x8d,0xd0,0x2f
000424  dab67342          DCB      0xda,0xb6,0x73,0x42
000428  3cf56c92          DCB      0x3c,0xf5,0x6c,0x92
00042c  20262c3e          DCB      0x20,0x26,0x2c,0x3e
000430  f6123c07          DCB      0xf6,0x12,0x3c,0x07
000434  5ad3900a          DCB      0x5a,0xd3,0x90,0x0a
000438  3263293e          DCB      0x32,0x63,0x29,0x3e
00043c  14324951          DCB      0x14,0x32,0x49,0x51
000440  77abb66a          DCB      0x77,0xab,0xb6,0x6a
000444  a0ea6e30          DCB      0xa0,0xea,0x6e,0x30
000448  ab145fa2          DCB      0xab,0x14,0x5f,0xa2
00044c  4d8e4878          DCB      0x4d,0x8e,0x48,0x78
000450  2fc2002f          DCB      0x2f,0xc2,0x00,0x2f
000454  b431c282          DCB      0xb4,0x31,0xc2,0x82
000458  3b77edb8          DCB      0x3b,0x77,0xed,0xb8
00045c  9817ef08          DCB      0x98,0x17,0xef,0x08
000460  7938b984          DCB      0x79,0x38,0xb9,0x84
000464  1a0916e5          DCB      0x1a,0x09,0x16,0xe5
000468  4900c842          DCB      0x49,0x00,0xc8,0x42
00046c  3e1823d6          DCB      0x3e,0x18,0x23,0xd6
000470  540b1d11          DCB      0x54,0x0b,0x1d,0x11
000474  f2c18488          DCB      0xf2,0xc1,0x84,0x88
000478  333618be          DCB      0x33,0x36,0x18,0xbe
00047c  26d1c18b          DCB      0x26,0xd1,0xc1,0x8b
000480  5c760a63          DCB      0x5c,0x76,0x0a,0x63
000484  a8785307          DCB      0xa8,0x78,0x53,0x07
000488  ae7fcdec          DCB      0xae,0x7f,0xcd,0xec
00048c  bf599b33          DCB      0xbf,0x59,0x9b,0x33
000490  2b06ce25          DCB      0x2b,0x06,0xce,0x25
000494  c59ff100          DCB      0xc5,0x9f,0xf1,0x00
000498  d7313b59          DCB      0xd7,0x31,0x3b,0x59
00049c  44571f71          DCB      0x44,0x57,0x1f,0x71
0004a0  ba3c34a4          DCB      0xba,0x3c,0x34,0xa4
0004a4  4494e08c          DCB      0x44,0x94,0xe0,0x8c
0004a8  7d53417f          DCB      0x7d,0x53,0x41,0x7f
0004ac  d6241be5          DCB      0xd6,0x24,0x1b,0xe5
0004b0  31205e27          DCB      0x31,0x20,0x5e,0x27
0004b4  0ddcfd2b          DCB      0x0d,0xdc,0xfd,0x2b
0004b8  1ba66eed          DCB      0x1b,0xa6,0x6e,0xed
0004bc  eabd2c3b          DCB      0xea,0xbd,0x2c,0x3b
0004c0  b052dc89          DCB      0xb0,0x52,0xdc,0x89
0004c4  f679b09b          DCB      0xf6,0x79,0xb0,0x9b
0004c8  0a66b2fe          DCB      0x0a,0x66,0xb2,0xfe
0004cc  881c5169          DCB      0x88,0x1c,0x51,0x69
0004d0  88208bab          DCB      0x88,0x20,0x8b,0xab
0004d4  e8e0811c          DCB      0xe8,0xe0,0x81,0x1c
0004d8  654a099b          DCB      0x65,0x4a,0x09,0x9b
0004dc  e76b1f9d          DCB      0xe7,0x6b,0x1f,0x9d
0004e0  6d0ebe2b          DCB      0x6d,0x0e,0xbe,0x2b
0004e4  890794a2          DCB      0x89,0x07,0x94,0xa2
0004e8  293db990          DCB      0x29,0x3d,0xb9,0x90
0004ec  d88e244f          DCB      0xd8,0x8e,0x24,0x4f
0004f0  1f6321ec          DCB      0x1f,0x63,0x21,0xec
0004f4  09148274          DCB      0x09,0x14,0x82,0x74
0004f8  04598ae4          DCB      0x04,0x59,0x8a,0xe4
0004fc  8694e10a          DCB      0x86,0x94,0xe1,0x0a

                          AREA ||.data||, DATA, ALIGN=2

                  recCrc8
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  recDataNum
                          DCD      0x00000000
                  allPacketSize
                          DCD      0x000003e8

;*** Start embedded assembler ***

#line 1 "User\\BleProtocol.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_BleProtocol_c_c76f1baf____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___13_BleProtocol_c_c76f1baf____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_BleProtocol_c_c76f1baf____REVSH|
#line 128
|__asm___13_BleProtocol_c_c76f1baf____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
