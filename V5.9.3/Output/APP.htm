<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\APP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\APP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Oct 10 15:04:14 2024
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; STATE_Process &rArr; STEP_Process_KaiYangUartUpgrade &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC2_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[4a]">ARM_PROTOCOL_MacProcess</a> from armprotocol.o(i.ARM_PROTOCOL_MacProcess) referenced from armprotocol.o(i.ARM_PROTOCOL_Init)
 <LI><a href="#[4b]">ARM_UART_AddTxArray</a> from armuart.o(i.ARM_UART_AddTxArray) referenced from armprotocol.o(i.ARM_PROTOCOL_Init)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32f10x_it.o(i.BusFault_Handler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[4d]">CAN_DRIVE_AddTxArray</a> from canprotocolupdt.o(i.CAN_DRIVE_AddTxArray) referenced from canprotocolupmd.o(i.CAN_MD_PROTOCOL_Init)
 <LI><a href="#[4d]">CAN_DRIVE_AddTxArray</a> from canprotocolupdt.o(i.CAN_DRIVE_AddTxArray) referenced from canprotocol_3a.o(i.CAN_PROTOCOL1_Init)
 <LI><a href="#[4d]">CAN_DRIVE_AddTxArray</a> from canprotocolupdt.o(i.CAN_DRIVE_AddTxArray) referenced from canprotocolupgb.o(i.CAN_PROTOCOL_Init)
 <LI><a href="#[4d]">CAN_DRIVE_AddTxArray</a> from canprotocolupdt.o(i.CAN_DRIVE_AddTxArray) referenced from canprotocoluptest.o(i.CAN_TEST_PROTOCOL_Init)
 <LI><a href="#[50]">CAN_PROTOCOL1_SendUpAppReuqest</a> from canprotocol_3a.o(i.CAN_PROTOCOL1_SendUpAppReuqest) referenced from state.o(i.STEP_Process_IotCanUpgrade)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from spiflash.o(i.DMA0_Channel1_IRQHandler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from spiflash.o(i.DMA0_Channel2_IRQHandler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA1_Channel0_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32f10x_it.o(i.DebugMon_Handler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[3a]">EXMC_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32f10x_it.o(i.HardFault_Handler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[49]">IAP_JumpToAppFun</a> from iap.o(i.IAP_JumpToAppFun) referenced from armprotocol.o(i.ARM_PROTOCOL_CmdFrameProcess)
 <LI><a href="#[4f]">LIME_UART_PROTOCOL_MacProcess</a> from limeuartprotocol.o(i.LIME_UART_PROTOCOL_MacProcess) referenced from limeuartprotocol.o(i.LIME_UART_PROTOCOL_Init)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32f10x_it.o(i.MemManage_Handler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32f10x_it.o(i.NMI_Handler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32f10x_it.o(i.PendSV_Handler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCU_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from canprotocolupdt.o(i.CAN_CmdFrameProcess)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced 2 times from state.o(i.STEP_Process_CmCanUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced 2 times from state.o(i.STEP_Process_CmUartUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_GaobiaoCanUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_HuaXinCanUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_HuaXinUartCbUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_IotUartUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_KaiYangCanUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_KaiYangUartUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_LiMeUartUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_MeiDiCanUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_SegCanUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_SegUartUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from state.o(i.STEP_Process_Sparrow_SegCanUpgrade)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from uartprotocol3.o(i.UART_PROTOCOL3_CmdFrameProcess)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from uartprotocol.o(i.UART_PROTOCOL_CmdFrameProcess)
 <LI><a href="#[4c]">STATE_SwitchStep</a> from state.o(i.STATE_SwitchStep) referenced from timeout.o(i.addTimeOutTimer)
 <LI><a href="#[6]">SVC_Handler</a> from gd32f10x_it.o(i.SVC_Handler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_gd32f10x.o(i.SystemInit) referenced from startup_gd32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIMER4_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIMER5_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIMER6_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[52]">TIMER_DoNothing</a> from timer.o(i.TIMER_DoNothing) referenced from timer.o(i.TIMER_Init)
 <LI><a href="#[52]">TIMER_DoNothing</a> from timer.o(i.TIMER_DoNothing) referenced from timer.o(i.TIMER_KillTask)
 <LI><a href="#[3e]">UART3_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[4e]">UART_DRIVE_AddTxArray</a> from uartdrive.o(i.UART_DRIVE_AddTxArray) referenced from dtauartprotocol.o(i.DTA_UART_PROTOCOL_Init)
 <LI><a href="#[4e]">UART_DRIVE_AddTxArray</a> from uartdrive.o(i.UART_DRIVE_AddTxArray) referenced from limeuartprotocol.o(i.LIME_UART_PROTOCOL_Init)
 <LI><a href="#[4e]">UART_DRIVE_AddTxArray</a> from uartdrive.o(i.UART_DRIVE_AddTxArray) referenced from uartprotocol3.o(i.UART_PROTOCOL3_Init)
 <LI><a href="#[4e]">UART_DRIVE_AddTxArray</a> from uartdrive.o(i.UART_DRIVE_AddTxArray) referenced from uartprotocol.o(i.UART_PROTOCOL_Init)
 <LI><a href="#[53]">UART_PROTOCOL3_MacProcess</a> from uartprotocol3.o(i.UART_PROTOCOL3_MacProcess) referenced from uartprotocol3.o(i.UART_PROTOCOL3_Init)
 <LI><a href="#[51]">UART_PROTOCOL3_SendUpAppReuqest</a> from uartprotocol3.o(i.UART_PROTOCOL3_SendUpAppReuqest) referenced from state.o(i.STEP_Process_IotUartUpgrade)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from uartdrive.o(i.USART0_IRQHandler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from armuart.o(i.USART1_IRQHandler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USBD_HP_CAN0_TX_IRQHandler</a> from canprotocolupdt.o(i.USBD_HP_CAN0_TX_IRQHandler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USBD_LP_CAN0_RX0_IRQHandler</a> from canprotocolupdt.o(i.USBD_LP_CAN0_RX0_IRQHandler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBD_WKUP_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32f10x_it.o(i.UsageFault_Handler) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f10x_hd.o(.text) referenced from startup_gd32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f10x_hd.o(.text)
 <LI><a href="#[54]">_snputc</a> from printf2.o(i._snputc) referenced from printf2.o(i.__0snprintf$2)
 <LI><a href="#[55]">dutProgressReport</a> from armprotocol.o(i.dutProgressReport) referenced from armprotocol.o(i.setDutProgressReportInfo)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[18e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[56]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[190]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[191]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[192]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[193]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[194]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_DataStructInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtaUartProtocol_SendOnePacket
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendOnePacket_Bin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_Protocol_SendOnePacket
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendOnePacket_Bin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ff]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
</UL>

<P><STRONG><a name="[57]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[198]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>ARM_PROTOCOL_CheckSUM</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, armprotocol.o(i.ARM_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[5c]"></a>ARM_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 1886 bytes, Stack size 144 bytes, armprotocol.o(i.ARM_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ARM_PROTOCOL_CmdFrameProcess &rArr; DutInfoUpdata &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FlashReadForCrc8
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWord
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseRoom
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUpItem
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDutProgressReportInfo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterState
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_TxAddFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_TxAddData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_SendCmdParamAck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_SendCmdAck
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_Process
</UL>

<P><STRONG><a name="[7a]"></a>ARM_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, armprotocol.o(i.ARM_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[73]"></a>ARM_PROTOCOL_DataStructInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, armprotocol.o(i.ARM_PROTOCOL_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_Init
</UL>

<P><STRONG><a name="[72]"></a>ARM_PROTOCOL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, armprotocol.o(i.ARM_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ARM_PROTOCOL_Init &rArr; ARM_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_RegisterDataSendService
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_RegisterDataSendService
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>ARM_PROTOCOL_MacProcess</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, armprotocol.o(i.ARM_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ARM_PROTOCOL_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> armprotocol.o(i.ARM_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[76]"></a>ARM_PROTOCOL_Process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, armprotocol.o(i.ARM_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ARM_PROTOCOL_Process &rArr; ARM_PROTOCOL_CmdFrameProcess &rArr; DutInfoUpdata &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_TxStateProcess
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_RxFIFOProcess
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>ARM_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, armprotocol.o(i.ARM_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_Init
</UL>

<P><STRONG><a name="[77]"></a>ARM_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 454 bytes, Stack size 28 bytes, armprotocol.o(i.ARM_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ARM_PROTOCOL_RxFIFOProcess &rArr; ARM_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_Process
</UL>

<P><STRONG><a name="[67]"></a>ARM_PROTOCOL_SendCmdAck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, armprotocol.o(i.ARM_PROTOCOL_SendCmdAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ARM_PROTOCOL_SendCmdAck &rArr; ARM_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_TxAddFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[62]"></a>ARM_PROTOCOL_SendCmdParamAck</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, armprotocol.o(i.ARM_PROTOCOL_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ARM_PROTOCOL_SendCmdParamAck &rArr; ARM_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_TxAddFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[5f]"></a>ARM_PROTOCOL_TxAddData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, armprotocol.o(i.ARM_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ARM_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dutProgressReport
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_SendCmdParamAck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_SendCmdAck
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[60]"></a>ARM_PROTOCOL_TxAddFrame</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, armprotocol.o(i.ARM_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ARM_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dutProgressReport
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_SendCmdParamAck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_SendCmdAck
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[78]"></a>ARM_PROTOCOL_TxStateProcess</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, armprotocol.o(i.ARM_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ARM_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_Process
</UL>

<P><STRONG><a name="[4b]"></a>ARM_UART_AddTxArray</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, armuart.o(i.ARM_UART_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ARM_UART_AddTxArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> armprotocol.o(i.ARM_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[8e]"></a>ARM_UART_DataStructureInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, armuart.o(i.ARM_UART_DataStructureInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_UART_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_Init
</UL>

<P><STRONG><a name="[7b]"></a>ARM_UART_HwInit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, armuart.o(i.ARM_UART_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ARM_UART_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_Init
</UL>

<P><STRONG><a name="[8a]"></a>ARM_UART_IR_StartSendData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, armuart.o(i.ARM_UART_IR_StartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ARM_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_TxProcess
</UL>

<P><STRONG><a name="[8d]"></a>ARM_UART_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, armuart.o(i.ARM_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ARM_UART_Init &rArr; ARM_UART_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>ARM_UART_Process</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, armuart.o(i.ARM_UART_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ARM_UART_Process &rArr; ARM_UART_TxProcess &rArr; ARM_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_TxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>ARM_UART_RegisterDataSendService</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, armuart.o(i.ARM_UART_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_Init
</UL>

<P><STRONG><a name="[90]"></a>ARM_UART_TxProcess</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, armuart.o(i.ARM_UART_TxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ARM_UART_TxProcess &rArr; ARM_UART_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_IR_StartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_Process
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>CAN_AddSum</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, canprotocolupdt.o(i.CAN_AddSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_AddSum
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddFrame
</UL>

<P><STRONG><a name="[c6]"></a>CAN_CheckSum</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, canprotocolupdt.o(i.CAN_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxFIFOProcess
</UL>

<P><STRONG><a name="[91]"></a>CAN_CmdFrameProcess</STRONG> (Thumb, 1576 bytes, Stack size 32 bytes, canprotocolupdt.o(i.CAN_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_CmdFrameProcess &rArr; TIMER_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_DT
</UL>

<P><STRONG><a name="[c7]"></a>CAN_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, canprotocolupdt.o(i.CAN_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxFIFOProcess
</UL>

<P><STRONG><a name="[4d]"></a>CAN_DRIVE_AddTxArray</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, canprotocolupdt.o(i.CAN_DRIVE_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_DRIVE_AddTxArray
</UL>
<BR>[Address Reference Count : 4]<UL><LI> canprotocolupmd.o(i.CAN_MD_PROTOCOL_Init)
<LI> canprotocolupgb.o(i.CAN_PROTOCOL_Init)
<LI> canprotocol_3a.o(i.CAN_PROTOCOL1_Init)
<LI> canprotocoluptest.o(i.CAN_TEST_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[100]"></a>CAN_DataStructureInit</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, canprotocolupdt.o(i.CAN_DataStructureInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
</UL>

<P><STRONG><a name="[94]"></a>CAN_HW_Init</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, canprotocolupdt.o(i.CAN_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN_HW_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
</UL>

<P><STRONG><a name="[9a]"></a>CAN_MD_PROTOCOL_CheckSUM</STRONG> (Thumb, 134 bytes, Stack size 188 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CAN_MD_PROTOCOL_CheckSUM &rArr; CRC32_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[9c]"></a>CAN_MD_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_MD_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_StartTimeoutCheckTask
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_Process
</UL>

<P><STRONG><a name="[a4]"></a>CAN_MD_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_MD_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[9f]"></a>CAN_MD_PROTOCOL_DataStructInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_MD_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_Init
</UL>

<P><STRONG><a name="[9e]"></a>CAN_MD_PROTOCOL_Init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_MD_PROTOCOL_Init &rArr; CAN_MD_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_RegisterDataSendService
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
</UL>

<P><STRONG><a name="[181]"></a>CAN_MD_PROTOCOL_MacProcess</STRONG> (Thumb, 168 bytes, Stack size 28 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_MD_PROTOCOL_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>CAN_MD_PROTOCOL_Process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = CAN_MD_PROTOCOL_Process &rArr; CAN_MD_PROTOCOL_RxFIFOProcess &rArr; CAN_MD_PROTOCOL_CheckSUM &rArr; CRC32_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_TxStateProcess
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_RxFIFOProcess
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[a0]"></a>CAN_MD_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_Init
</UL>

<P><STRONG><a name="[a2]"></a>CAN_MD_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 426 bytes, Stack size 28 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = CAN_MD_PROTOCOL_RxFIFOProcess &rArr; CAN_MD_PROTOCOL_CheckSUM &rArr; CRC32_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_Process
</UL>

<P><STRONG><a name="[a5]"></a>CAN_MD_PROTOCOL_SendCmdNoResult</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_SendCmdNoResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = CAN_MD_PROTOCOL_SendCmdNoResult &rArr; CAN_MD_PROTOCOL_TxAddFrame &rArr; CRC32_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_TxAddFrame
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
</UL>

<P><STRONG><a name="[a8]"></a>CAN_MD_PROTOCOL_SendUpDataPacket</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_SendUpDataPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = CAN_MD_PROTOCOL_SendUpDataPacket &rArr; CAN_MD_PROTOCOL_TxAddFrame &rArr; CRC32_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_TxAddFrame
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
</UL>

<P><STRONG><a name="[9d]"></a>CAN_MD_PROTOCOL_StartTimeoutCheckTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_StartTimeoutCheckTask))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[a6]"></a>CAN_MD_PROTOCOL_TxAddData</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_MD_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_SendUpDataPacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_SendCmdNoResult
</UL>

<P><STRONG><a name="[a7]"></a>CAN_MD_PROTOCOL_TxAddFrame</STRONG> (Thumb, 602 bytes, Stack size 200 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CAN_MD_PROTOCOL_TxAddFrame &rArr; CRC32_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_SendUpDataPacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_SendCmdNoResult
</UL>

<P><STRONG><a name="[a3]"></a>CAN_MD_PROTOCOL_TxStateProcess</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, canprotocolupmd.o(i.CAN_MD_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_MD_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_Process
</UL>

<P><STRONG><a name="[17e]"></a>CAN_MacProcess</STRONG> (Thumb, 282 bytes, Stack size 28 bytes, canprotocolupdt.o(i.CAN_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>CAN_PGN_RequestSendData</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, canprotocolupgb.o(i.CAN_PGN_RequestSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_PGN_RequestSendData &rArr; CAN_PROTOCOL_TxAddNewFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TxAddNewFrame
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TxAddFrame
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_UP_DATA
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
</UL>

<P><STRONG><a name="[b3]"></a>CAN_PROTOCOL1_CheckSUM</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_PROTOCOL1_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_RxFIFOProcess
</UL>

<P><STRONG><a name="[ad]"></a>CAN_PROTOCOL1_CmdFrameProcess</STRONG> (Thumb, 652 bytes, Stack size 32 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_PROTOCOL1_CmdFrameProcess &rArr; STATE_EnterState &rArr; DUTCTRL_PowerOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_3A
</UL>

<P><STRONG><a name="[b4]"></a>CAN_PROTOCOL1_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_PROTOCOL1_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_RxFIFOProcess
</UL>

<P><STRONG><a name="[b0]"></a>CAN_PROTOCOL1_DataStructInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_PROTOCOL1_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
</UL>

<P><STRONG><a name="[af]"></a>CAN_PROTOCOL1_Init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_PROTOCOL1_Init &rArr; CAN_PROTOCOL1_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_RegisterDataSendService
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
</UL>

<P><STRONG><a name="[182]"></a>CAN_PROTOCOL1_MacProcess</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_PROTOCOL1_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>CAN_PROTOCOL1_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
</UL>

<P><STRONG><a name="[b2]"></a>CAN_PROTOCOL1_RxFIFOProcess</STRONG> (Thumb, 414 bytes, Stack size 28 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_PROTOCOL1_RxFIFOProcess &rArr; CAN_PROTOCOL1_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_ConfirmTempCmdFrameBuff
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_3A
</UL>

<P><STRONG><a name="[b5]"></a>CAN_PROTOCOL1_SendCmdNoResult</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_SendCmdNoResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_PROTOCOL1_SendCmdNoResult &rArr; CAN_PROTOCOL1_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddFrame
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
</UL>

<P><STRONG><a name="[b8]"></a>CAN_PROTOCOL1_SendCmdUpApp</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_SendCmdUpApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_PROTOCOL1_SendCmdUpApp &rArr; CAN_PROTOCOL1_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddFrame
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
</UL>

<P><STRONG><a name="[b9]"></a>CAN_PROTOCOL1_SendCmdWithResult</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_SendCmdWithResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_PROTOCOL1_SendCmdWithResult &rArr; CAN_PROTOCOL1_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddFrame
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendUpAppReuqest
</UL>

<P><STRONG><a name="[ba]"></a>CAN_PROTOCOL1_SendOnePacket_Bin</STRONG> (Thumb, 128 bytes, Stack size 184 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_SendOnePacket_Bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CAN_PROTOCOL1_SendOnePacket_Bin &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddFrame
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
</UL>

<P><STRONG><a name="[50]"></a>CAN_PROTOCOL1_SendUpAppReuqest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_SendUpAppReuqest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_PROTOCOL1_SendUpAppReuqest &rArr; CAN_PROTOCOL1_SendCmdWithResult &rArr; CAN_PROTOCOL1_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdWithResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state.o(i.STEP_Process_IotCanUpgrade)
</UL>
<P><STRONG><a name="[b6]"></a>CAN_PROTOCOL1_TxAddData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_PROTOCOL1_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendOnePacket_Bin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdUpApp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdNoResult
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdWithResult
</UL>

<P><STRONG><a name="[b7]"></a>CAN_PROTOCOL1_TxAddFrame</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_PROTOCOL1_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendOnePacket_Bin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdUpApp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdNoResult
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdWithResult
</UL>

<P><STRONG><a name="[c0]"></a>CAN_PROTOCOL1_TxStateProcess</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, canprotocol_3a.o(i.CAN_PROTOCOL1_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_PROTOCOL1_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_3A
</UL>

<P><STRONG><a name="[bb]"></a>CAN_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_GB
</UL>

<P><STRONG><a name="[bc]"></a>CAN_PROTOCOL_DataStructInit</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Init
</UL>

<P><STRONG><a name="[bd]"></a>CAN_PROTOCOL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_PROTOCOL_Init &rArr; CAN_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_RegisterDataSendService
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_DataStructInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
</UL>

<P><STRONG><a name="[17f]"></a>CAN_PROTOCOL_MacProcess</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_PROTOCOL_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>CAN_PROTOCOL_Process_3A</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, canprotocol_3a.o(i.CAN_PROTOCOL_Process_3A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_PROTOCOL_Process_3A &rArr; CAN_PROTOCOL1_CmdFrameProcess &rArr; STATE_EnterState &rArr; DUTCTRL_PowerOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxStateProcess
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_RxFIFOProcess
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[c1]"></a>CAN_PROTOCOL_Process_DT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, canprotocolupdt.o(i.CAN_PROTOCOL_Process_DT))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CAN_PROTOCOL_Process_DT &rArr; CAN_TxStateProcess &rArr; CAN_Tx_FillAndSend &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateProcess
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxFIFOProcess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[c4]"></a>CAN_PROTOCOL_Process_GB</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_Process_GB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_PROTOCOL_Process_GB &rArr; CAN_PROTOCOL_TxStateProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TxStateProcess
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[be]"></a>CAN_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Init
</UL>

<P><STRONG><a name="[ab]"></a>CAN_PROTOCOL_TxAddData</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_UP_RESET
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RequestSendData
</UL>

<P><STRONG><a name="[ac]"></a>CAN_PROTOCOL_TxAddFrame</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_UP_RESET
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RequestSendData
</UL>

<P><STRONG><a name="[aa]"></a>CAN_PROTOCOL_TxAddNewFrame</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_TxAddNewFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_PROTOCOL_TxAddNewFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_UP_RESET
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RequestSendData
</UL>

<P><STRONG><a name="[c5]"></a>CAN_PROTOCOL_TxStateProcess</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, canprotocolupgb.o(i.CAN_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_GB
</UL>

<P><STRONG><a name="[c2]"></a>CAN_RxFIFOProcess</STRONG> (Thumb, 502 bytes, Stack size 36 bytes, canprotocolupdt.o(i.CAN_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_RxFIFOProcess &rArr; CAN_ConfirmTempCmdFrameBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfirmTempCmdFrameBuff
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_DT
</UL>

<P><STRONG><a name="[d0]"></a>CAN_TEST_PROTOCOL_CheckSUM</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_TEST_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[c8]"></a>CAN_TEST_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_TEST_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_StartTimeoutCheckTask
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_Process
</UL>

<P><STRONG><a name="[d1]"></a>CAN_TEST_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TEST_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[cb]"></a>CAN_TEST_PROTOCOL_DataStructInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TEST_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_Init
</UL>

<P><STRONG><a name="[ca]"></a>CAN_TEST_PROTOCOL_Init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_TEST_PROTOCOL_Init &rArr; CAN_TEST_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_RegisterDataSendService
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[180]"></a>CAN_TEST_PROTOCOL_MacProcess</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_TEST_PROTOCOL_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>CAN_TEST_PROTOCOL_Process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_TEST_PROTOCOL_Process &rArr; CAN_TEST_PROTOCOL_RxFIFOProcess &rArr; CAN_TEST_PROTOCOL_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_TxStateProcess
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_RxFIFOProcess
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[cc]"></a>CAN_TEST_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_Init
</UL>

<P><STRONG><a name="[ce]"></a>CAN_TEST_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 418 bytes, Stack size 28 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_TEST_PROTOCOL_RxFIFOProcess &rArr; CAN_TEST_PROTOCOL_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_Process
</UL>

<P><STRONG><a name="[d2]"></a>CAN_TEST_PROTOCOL_SendCmdNoResult</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_SendCmdNoResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_TEST_PROTOCOL_SendCmdNoResult &rArr; CAN_TEST_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_TxAddFrame
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[d5]"></a>CAN_TEST_PROTOCOL_SendCmdWithResult</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_SendCmdWithResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_TEST_PROTOCOL_SendCmdWithResult &rArr; CAN_TEST_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_TxAddFrame
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[d6]"></a>CAN_TEST_PROTOCOL_SendUpDataPacket</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_SendUpDataPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_TEST_PROTOCOL_SendUpDataPacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_TxAddFrame
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[c9]"></a>CAN_TEST_PROTOCOL_StartTimeoutCheckTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_StartTimeoutCheckTask))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[d3]"></a>CAN_TEST_PROTOCOL_TxAddData</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_TEST_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendUpDataPacket
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendCmdWithResult
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendCmdNoResult
</UL>

<P><STRONG><a name="[d4]"></a>CAN_TEST_PROTOCOL_TxAddFrame</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_TEST_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendUpDataPacket
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendCmdWithResult
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendCmdNoResult
</UL>

<P><STRONG><a name="[cf]"></a>CAN_TEST_PROTOCOL_TxStateProcess</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, canprotocoluptest.o(i.CAN_TEST_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_TEST_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_Process
</UL>

<P><STRONG><a name="[d8]"></a>CAN_TxEnterState</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, canprotocolupdt.o(i.CAN_TxEnterState))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateProcess
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateInit
</UL>

<P><STRONG><a name="[d7]"></a>CAN_TxStateInit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, canprotocolupdt.o(i.CAN_TxStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CAN_TxStateInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxEnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
</UL>

<P><STRONG><a name="[c3]"></a>CAN_TxStateProcess</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, canprotocolupdt.o(i.CAN_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAN_TxStateProcess &rArr; CAN_Tx_FillAndSend &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxEnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_DT
</UL>

<P><STRONG><a name="[d9]"></a>CAN_Tx_FillAndSend</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, canprotocolupdt.o(i.CAN_Tx_FillAndSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CAN_Tx_FillAndSend &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxEnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateProcess
</UL>

<P><STRONG><a name="[17c]"></a>CAN_Tx_NextFram</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, canprotocolupdt.o(i.CAN_Tx_NextFram))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Tx_NextFram
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>CAN_UP_DATA</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, canprotocolupgb.o(i.CAN_UP_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_UP_DATA &rArr; CAN_PGN_RequestSendData &rArr; CAN_PROTOCOL_TxAddNewFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RequestSendData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
</UL>

<P><STRONG><a name="[dc]"></a>CAN_UP_RESET</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, canprotocolupgb.o(i.CAN_UP_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_UP_RESET &rArr; CAN_PROTOCOL_TxAddNewFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TxAddNewFrame
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TxAddFrame
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
</UL>

<P><STRONG><a name="[9b]"></a>CRC32_Calculate</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, canprotocolupmd.o(i.CRC32_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC32_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_TxAddFrame
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_CheckSUM
</UL>

<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spiflash.o(i.DMA0_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA0_Channel1_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_disable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spiflash.o(i.DMA0_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA0_Channel2_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_disable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>DTA_UART_PROTOCOL_CheckSUM</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DTA_UART_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[eb]"></a>DTA_UART_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DTA_UART_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[f1]"></a>DTA_UART_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DTA_UART_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[ed]"></a>DTA_UART_PROTOCOL_DataStructInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DTA_UART_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[ec]"></a>DTA_UART_PROTOCOL_Init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DTA_UART_PROTOCOL_Init &rArr; DTA_UART_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_RegisterDataSendService
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[16a]"></a>DTA_UART_PROTOCOL_MacProcess</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DTA_UART_PROTOCOL_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_MacProcess
</UL>

<P><STRONG><a name="[ee]"></a>DTA_UART_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[ef]"></a>DTA_UART_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 414 bytes, Stack size 28 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DTA_UART_PROTOCOL_RxFIFOProcess &rArr; DTA_UART_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[f2]"></a>DTA_UART_PROTOCOL_SendCmdNoResult</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_SendCmdNoResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DTA_UART_PROTOCOL_SendCmdNoResult &rArr; DTA_UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_TxAddFrame
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[f5]"></a>DTA_UART_PROTOCOL_SendCmdParamAck</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DTA_UART_PROTOCOL_SendCmdParamAck &rArr; DTA_UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_TxAddFrame
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[f3]"></a>DTA_UART_PROTOCOL_TxAddData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DTA_UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtaUartProtocol_SendOnePacket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_SendCmdNoResult
</UL>

<P><STRONG><a name="[f4]"></a>DTA_UART_PROTOCOL_TxAddFrame</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DTA_UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtaUartProtocol_SendOnePacket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_SendCmdNoResult
</UL>

<P><STRONG><a name="[175]"></a>DTA_UART_PROTOCOL_TxStateProcess</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dtauartprotocol.o(i.DTA_UART_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DTA_UART_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[f6]"></a>DUTCTRL_BusInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dutctl.o(i.DUTCTRL_BusInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DUTCTRL_BusInit &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>DUTCTRL_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dutctl.o(i.DUTCTRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DUTCTRL_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>DUTCTRL_PowerOnOff</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dutctl.o(i.DUTCTRL_PowerOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DUTCTRL_PowerOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>Delayms</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, systick.o(i.Delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[6c]"></a>DutInfoUpdata</STRONG> (Thumb, 1478 bytes, Stack size 152 bytes, dutinfo.o(i.DutInfoUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DutInfoUpdata &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>IAP_CTRL_CAN_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxStateInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DataStructureInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[101]"></a>IAP_CTRL_CAN_SendCmdNoAck</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_SendCmdNoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IAP_CTRL_CAN_SendCmdNoAck &rArr; IAP_CTRL_CAN_TxAddFrame &rArr; CAN_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddFrame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[104]"></a>IAP_CTRL_CAN_SendUpDataPacket</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_SendUpDataPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_CTRL_CAN_SendUpDataPacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddFrame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[102]"></a>IAP_CTRL_CAN_TxAddData</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_CTRL_CAN_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
</UL>

<P><STRONG><a name="[103]"></a>IAP_CTRL_CAN_TxAddFrame</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, canprotocolupdt.o(i.IAP_CTRL_CAN_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_CTRL_CAN_TxAddFrame &rArr; CAN_AddSum
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_AddSum
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
</UL>

<P><STRONG><a name="[49]"></a>IAP_JumpToAppFun</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iap.o(i.IAP_JumpToAppFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_JumpToAppFun &rArr; IAP_RunAPP
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_RunAPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> armprotocol.o(i.ARM_PROTOCOL_CmdFrameProcess)
</UL>
<P><STRONG><a name="[106]"></a>IAP_RunAPP</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iap.o(i.IAP_RunAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_RunAPP
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_JumpToAppFun
</UL>

<P><STRONG><a name="[107]"></a>LIME_Protocol_SendOnePacket</STRONG> (Thumb, 176 bytes, Stack size 184 bytes, limeuartprotocol.o(i.LIME_Protocol_SendOnePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LIME_Protocol_SendOnePacket &rArr; LIME_UART_PROTOCOL_TxAddFrame &rArr; UART_GetCRCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_TxAddFrame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_TxAddData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
</UL>

<P><STRONG><a name="[10a]"></a>LIME_UART_PROTOCOL_CheckSUM</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LIME_UART_PROTOCOL_CheckSUM &rArr; UART_GetCRCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetCRCValue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[10c]"></a>LIME_UART_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LIME_UART_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[113]"></a>LIME_UART_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LIME_UART_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[10d]"></a>LIME_UART_PROTOCOL_DataStructInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LIME_UART_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[fa]"></a>LIME_UART_PROTOCOL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LIME_UART_PROTOCOL_Init &rArr; LIME_UART_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_RegisterDataSendService
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_RegisterDataSendService
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
</UL>

<P><STRONG><a name="[4f]"></a>LIME_UART_PROTOCOL_MacProcess</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LIME_UART_PROTOCOL_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> limeuartprotocol.o(i.LIME_UART_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[110]"></a>LIME_UART_PROTOCOL_Process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LIME_UART_PROTOCOL_Process &rArr; LIME_UART_PROTOCOL_RxFIFOProcess &rArr; LIME_UART_PROTOCOL_CheckSUM &rArr; UART_GetCRCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_TxStateProcess
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_RxFIFOProcess
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[10f]"></a>LIME_UART_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[111]"></a>LIME_UART_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 432 bytes, Stack size 28 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LIME_UART_PROTOCOL_RxFIFOProcess &rArr; LIME_UART_PROTOCOL_CheckSUM &rArr; UART_GetCRCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[114]"></a>LIME_UART_PROTOCOL_SendCmd</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LIME_UART_PROTOCOL_SendCmd &rArr; LIME_UART_PROTOCOL_TxAddFrame &rArr; UART_GetCRCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_TxAddFrame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
</UL>

<P><STRONG><a name="[115]"></a>LIME_UART_PROTOCOL_SendCmdParamAck</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LIME_UART_PROTOCOL_SendCmdParamAck &rArr; LIME_UART_PROTOCOL_TxAddFrame &rArr; UART_GetCRCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_TxAddFrame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
</UL>

<P><STRONG><a name="[108]"></a>LIME_UART_PROTOCOL_TxAddData</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LIME_UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_SendCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_Protocol_SendOnePacket
</UL>

<P><STRONG><a name="[109]"></a>LIME_UART_PROTOCOL_TxAddFrame</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LIME_UART_PROTOCOL_TxAddFrame &rArr; UART_GetCRCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetCRCValue
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_SendCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_Protocol_SendOnePacket
</UL>

<P><STRONG><a name="[112]"></a>LIME_UART_PROTOCOL_TxStateProcess</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, limeuartprotocol.o(i.LIME_UART_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LIME_UART_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>PARAM_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, param.o(i.PARAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PARAM_Init &rArr; DutInfoUpdata &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>SPI_FLASH_EraseBlock</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spiflash.o(i.SPI_FLASH_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_EraseBlock &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseRoom
</UL>

<P><STRONG><a name="[61]"></a>SPI_FLASH_EraseRoom</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, spiflash.o(i.SPI_FLASH_EraseRoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_FLASH_EraseRoom &rArr; SPI_FLASH_EraseSector &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[64]"></a>SPI_FLASH_EraseSector</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spiflash.o(i.SPI_FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_EraseSector &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseRoom
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[5e]"></a>SPI_FLASH_ReadArray</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_ReadArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadWord
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtaUartProtocol_SendOnePacket
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendOnePacket_Bin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_Protocol_SendOnePacket
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_UP_DATA
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendUpDataPacket
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendOnePacket_Bin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_SendUpDataPacket
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[6f]"></a>SPI_FLASH_ReadByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_ReadByte &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[128]"></a>SPI_FLASH_ReadWord</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_ReadWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_ReadWord &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FlashReadForCrc8
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
</UL>

<P><STRONG><a name="[126]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
</UL>

<P><STRONG><a name="[127]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spiflash.o(i.SPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
</UL>

<P><STRONG><a name="[66]"></a>SPI_FLASH_WriteArray</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, spiflash.o(i.SPI_FLASH_WriteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[65]"></a>SPI_FLASH_WriteByte</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_FLASH_WriteByte &rArr; SPI_FLASH_WriteWithErase &rArr; SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[125]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spiflash.o(i.SPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
</UL>

<P><STRONG><a name="[12b]"></a>SPI_FLASH_WritePage</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
</UL>

<P><STRONG><a name="[63]"></a>SPI_FLASH_WriteWithCheck</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, spiflash.o(i.SPI_FLASH_WriteWithCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_FLASH_WriteWithCheck &rArr; SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[12c]"></a>SPI_FLASH_WriteWithErase</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, spiflash.o(i.SPI_FLASH_WriteWithErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_FLASH_WriteWithErase &rArr; SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteArray
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWord
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteByte
</UL>

<P><STRONG><a name="[71]"></a>SPI_FLASH_WriteWord</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spiflash.o(i.SPI_FLASH_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_FLASH_WriteWord &rArr; SPI_FLASH_WriteWithErase &rArr; SPI_FLASH_WriteArray &rArr; SPI_FLASH_WritePage &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[70]"></a>SPI_FlashReadForCrc8</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, spiflash.o(i.SPI_FlashReadForCrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_FlashReadForCrc8 &rArr; SPI_FLASH_ReadWord &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[12f]"></a>SPIx_FLASH_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, spiflash.o(i.SPIx_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIx_FLASH_Init &rArr; DMAy_SPIx_Configuration &rArr; NVIC_DMAy_Configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>STATE_EnterState</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, state.o(i.STATE_EnterState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STATE_EnterState &rArr; DUTCTRL_PowerOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_CmdFrameProcess
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_CmdFrameProcess
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterState
</UL>

<P><STRONG><a name="[189]"></a>STATE_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state.o(i.STATE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>STATE_Process</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, state.o(i.STATE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = STATE_Process &rArr; STEP_Process_KaiYangUartUpgrade &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Process
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_Process
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_Process
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_GB
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_DT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Process_3A
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_Process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>STATE_SwitchStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, state.o(i.STATE_SwitchStep))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_CmdFrameProcess
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_UP_DATA
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_CmdFrameProcess
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_CmdFrameProcess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_CmdFrameProcess
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Address Reference Count : 17]<UL><LI> state.o(i.STEP_Process_CmUartUpgrade)
<LI> state.o(i.STEP_Process_GaobiaoCanUpgrade)
<LI> state.o(i.STEP_Process_HuaXinCanUpgrade)
<LI> state.o(i.STEP_Process_HuaXinUartCbUpgrade)
<LI> state.o(i.STEP_Process_IotUartUpgrade)
<LI> state.o(i.STEP_Process_KaiYangCanUpgrade)
<LI> state.o(i.STEP_Process_KaiYangUartUpgrade)
<LI> state.o(i.STEP_Process_LiMeUartUpgrade)
<LI> state.o(i.STEP_Process_MeiDiCanUpgrade)
<LI> state.o(i.STEP_Process_SegCanUpgrade)
<LI> state.o(i.STEP_Process_SegUartUpgrade)
<LI> state.o(i.STEP_Process_Sparrow_SegCanUpgrade)
<LI> uartprotocol.o(i.UART_PROTOCOL_CmdFrameProcess)
<LI> uartprotocol3.o(i.UART_PROTOCOL3_CmdFrameProcess)
<LI> canprotocolupdt.o(i.CAN_CmdFrameProcess)
<LI> state.o(i.STEP_Process_CmCanUpgrade)
<LI> timeout.o(i.addTimeOutTimer)
</UL>
<P><STRONG><a name="[137]"></a>STEP_Process_CmCanUpgrade</STRONG> (Thumb, 1918 bytes, Stack size 80 bytes, state.o(i.STEP_Process_CmCanUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STEP_Process_CmCanUpgrade &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimeOutTimer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendUpDataPacket
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendCmdWithResult
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_SendCmdNoResult
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddFrame
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[13e]"></a>STEP_Process_CmUartUpgrade</STRONG> (Thumb, 1342 bytes, Stack size 120 bytes, state.o(i.STEP_Process_CmUartUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = STEP_Process_CmUartUpgrade &rArr; uartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtaUartProtocol_SendOnePacket
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimeOutTimer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddData
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_SendCmdNoResult
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[134]"></a>STEP_Process_GaobiaoCanUpgrade</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, state.o(i.STEP_Process_GaobiaoCanUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STEP_Process_GaobiaoCanUpgrade &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_UP_RESET
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_UP_DATA
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RequestSendData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[138]"></a>STEP_Process_HuaXinCanUpgrade</STRONG> (Thumb, 868 bytes, Stack size 80 bytes, state.o(i.STEP_Process_HuaXinCanUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STEP_Process_HuaXinCanUpgrade &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddFrame
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[13f]"></a>STEP_Process_HuaXinUartCbUpgrade</STRONG> (Thumb, 642 bytes, Stack size 120 bytes, state.o(i.STEP_Process_HuaXinUartCbUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = STEP_Process_HuaXinUartCbUpgrade &rArr; uartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimeOutTimer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddData
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[13b]"></a>STEP_Process_IotCanUpgrade</STRONG> (Thumb, 362 bytes, Stack size 112 bytes, state.o(i.STEP_Process_IotCanUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = STEP_Process_IotCanUpgrade &rArr; CAN_PROTOCOL1_SendOnePacket_Bin &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadWord
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimeOutTimer
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendOnePacket_Bin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdUpApp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_SendCmdNoResult
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[143]"></a>STEP_Process_IotUartUpgrade</STRONG> (Thumb, 344 bytes, Stack size 112 bytes, state.o(i.STEP_Process_IotUartUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = STEP_Process_IotUartUpgrade &rArr; UART_PROTOCOL3_SendOnePacket_Bin &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendOnePacket_Bin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendCmdUpApp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendCmdNoResult
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[13a]"></a>STEP_Process_KaiYangCanUpgrade</STRONG> (Thumb, 992 bytes, Stack size 216 bytes, state.o(i.STEP_Process_KaiYangCanUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = STEP_Process_KaiYangCanUpgrade &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddFrame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_TxAddData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddFrame
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_TxAddData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[141]"></a>STEP_Process_KaiYangUartUpgrade</STRONG> (Thumb, 1020 bytes, Stack size 216 bytes, state.o(i.STEP_Process_KaiYangUartUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = STEP_Process_KaiYangUartUpgrade &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddFrame
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddData
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[142]"></a>STEP_Process_LiMeUartUpgrade</STRONG> (Thumb, 340 bytes, Stack size 112 bytes, state.o(i.STEP_Process_LiMeUartUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = STEP_Process_LiMeUartUpgrade &rArr; LIME_Protocol_SendOnePacket &rArr; LIME_UART_PROTOCOL_TxAddFrame &rArr; UART_GetCRCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_SendCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_Protocol_SendOnePacket
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[135]"></a>STEP_Process_MeiDiCanUpgrade</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, state.o(i.STEP_Process_MeiDiCanUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = STEP_Process_MeiDiCanUpgrade &rArr; CAN_MD_PROTOCOL_SendUpDataPacket &rArr; CAN_MD_PROTOCOL_TxAddFrame &rArr; CRC32_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_SendUpDataPacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_SendCmdNoResult
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[139]"></a>STEP_Process_SegCanUpgrade</STRONG> (Thumb, 450 bytes, Stack size 16 bytes, state.o(i.STEP_Process_SegCanUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STEP_Process_SegCanUpgrade &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[140]"></a>STEP_Process_SegUartUpgrade</STRONG> (Thumb, 494 bytes, Stack size 120 bytes, state.o(i.STEP_Process_SegUartUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = STEP_Process_SegUartUpgrade &rArr; uartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddData
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[136]"></a>STEP_Process_Sparrow_SegCanUpgrade</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, state.o(i.STEP_Process_Sparrow_SegCanUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STEP_Process_Sparrow_SegCanUpgrade &rArr; IAP_CTRL_CAN_Init &rArr; CAN_HW_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendUpDataPacket
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_SendCmdNoAck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CTRL_CAN_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>SYSTEM_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system.o(i.SYSTEM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSTEM_Init &rArr; RCC_HSE_Configuration &rArr; rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, system_gd32f10x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_gd32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER1_IRQHandler &rArr; TIMER_CALLBACK_OnTimer &rArr; TIMER_AddToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CALLBACK_OnTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIMER_AddTask</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, timer.o(i.TIMER_AddTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER_AddTask
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_CmdFrameProcess
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimeOutTimer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDutProgressReportInfo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[158]"></a>TIMER_AddToQueue</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, timer.o(i.TIMER_AddToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_AddToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CALLBACK_OnTimer
</UL>

<P><STRONG><a name="[157]"></a>TIMER_CALLBACK_OnTimer</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, timer.o(i.TIMER_CALLBACK_OnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_CALLBACK_OnTimer &rArr; TIMER_AddToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>TIMER_DoNothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.TIMER_DoNothing))
<BR>[Address Reference Count : 2]<UL><LI> timer.o(i.TIMER_Init)
<LI> timer.o(i.TIMER_KillTask)
</UL>
<P><STRONG><a name="[159]"></a>TIMER_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, timer.o(i.TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIMER_Init &rArr; TIMER_InitTimerx &rArr; TIMx_INT_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartTimerx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitTimerx
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>TIMER_InitTimerx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i.TIMER_InitTimerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER_InitTimerx &rArr; TIMx_INT_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[92]"></a>TIMER_KillTask</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, timer.o(i.TIMER_KillTask))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_CmdFrameProcess
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinCanUpgrade
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_CmdFrameProcess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dutProgressReport
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[93]"></a>TIMER_ResetTimer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TIMER_ResetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_Sparrow_SegCanUpgrade
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegCanUpgrade
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_MeiDiCanUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangCanUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_GaobiaoCanUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CmdFrameProcess
</UL>

<P><STRONG><a name="[15b]"></a>TIMER_StartTimerx</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.TIMER_StartTimerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_StartTimerx
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[18a]"></a>TIMER_TaskQueueProcess</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timer.o(i.TIMER_TaskQueueProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_TaskQueueProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>TIMx_INT_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, timer.o(i.TIMx_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMx_INT_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitTimerx
</UL>

<P><STRONG><a name="[4e]"></a>UART_DRIVE_AddTxArray</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, uartdrive.o(i.UART_DRIVE_AddTxArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DRIVE_AddTxArray
</UL>
<BR>[Address Reference Count : 4]<UL><LI> uartprotocol3.o(i.UART_PROTOCOL3_Init)
<LI> uartprotocol.o(i.UART_PROTOCOL_Init)
<LI> limeuartprotocol.o(i.LIME_UART_PROTOCOL_Init)
<LI> dtauartprotocol.o(i.DTA_UART_PROTOCOL_Init)
</UL>
<P><STRONG><a name="[164]"></a>UART_DRIVE_DataStructInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DRIVE_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
</UL>

<P><STRONG><a name="[162]"></a>UART_DRIVE_HwInit</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_InitSelect
</UL>

<P><STRONG><a name="[163]"></a>UART_DRIVE_IR_StartSendData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_IR_StartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DRIVE_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_TxProcess
</UL>

<P><STRONG><a name="[f7]"></a>UART_DRIVE_InitSelect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_InitSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[13c]"></a>UART_DRIVE_Process</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdrive.o(i.UART_DRIVE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DRIVE_Process &rArr; UART_DRIVE_TxProcess &rArr; UART_DRIVE_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_TxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[10e]"></a>UART_DRIVE_RegisterDataSendService</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uartdrive.o(i.UART_DRIVE_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[165]"></a>UART_DRIVE_TxProcess</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, uartdrive.o(i.UART_DRIVE_TxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_DRIVE_TxProcess &rArr; UART_DRIVE_IR_StartSendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_IR_StartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_Process
</UL>

<P><STRONG><a name="[10b]"></a>UART_GetCRCValue</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, limeuartprotocol.o(i.UART_GetCRCValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_GetCRCValue
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_TxAddFrame
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIME_UART_PROTOCOL_CheckSUM
</UL>

<P><STRONG><a name="[16c]"></a>UART_PROTOCOL3_CheckSUM</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, uartprotocol3.o(i.UART_PROTOCOL3_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_PROTOCOL3_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_RxFIFOProcess
</UL>

<P><STRONG><a name="[166]"></a>UART_PROTOCOL3_CmdFrameProcess</STRONG> (Thumb, 698 bytes, Stack size 40 bytes, uartprotocol3.o(i.UART_PROTOCOL3_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_PROTOCOL3_CmdFrameProcess &rArr; TIMER_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[16d]"></a>UART_PROTOCOL3_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uartprotocol3.o(i.UART_PROTOCOL3_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PROTOCOL3_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_RxFIFOProcess
</UL>

<P><STRONG><a name="[167]"></a>UART_PROTOCOL3_DataStructInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, uartprotocol3.o(i.UART_PROTOCOL3_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PROTOCOL3_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
</UL>

<P><STRONG><a name="[f9]"></a>UART_PROTOCOL3_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uartprotocol3.o(i.UART_PROTOCOL3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_PROTOCOL3_Init &rArr; UART_PROTOCOL3_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_RegisterDataSendService
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_DataStructInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_RegisterDataSendService
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[53]"></a>UART_PROTOCOL3_MacProcess</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uartprotocol3.o(i.UART_PROTOCOL3_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_PROTOCOL3_MacProcess &rArr; DTA_UART_PROTOCOL_MacProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_MacProcess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartprotocol3.o(i.UART_PROTOCOL3_Init)
</UL>
<P><STRONG><a name="[168]"></a>UART_PROTOCOL3_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uartprotocol3.o(i.UART_PROTOCOL3_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_Init
</UL>

<P><STRONG><a name="[16b]"></a>UART_PROTOCOL3_RxFIFOProcess</STRONG> (Thumb, 414 bytes, Stack size 28 bytes, uartprotocol3.o(i.UART_PROTOCOL3_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_PROTOCOL3_RxFIFOProcess &rArr; UART_PROTOCOL3_CheckSUM
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_ConfirmTempCmdFrameBuff
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[14e]"></a>UART_PROTOCOL3_SendCmdNoResult</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uartprotocol3.o(i.UART_PROTOCOL3_SendCmdNoResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_PROTOCOL3_SendCmdNoResult &rArr; UART_PROTOCOL3_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
</UL>

<P><STRONG><a name="[14c]"></a>UART_PROTOCOL3_SendCmdUpApp</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, uartprotocol3.o(i.UART_PROTOCOL3_SendCmdUpApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_PROTOCOL3_SendCmdUpApp &rArr; UART_PROTOCOL3_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
</UL>

<P><STRONG><a name="[16e]"></a>UART_PROTOCOL3_SendCmdWithResult</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, uartprotocol3.o(i.UART_PROTOCOL3_SendCmdWithResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_PROTOCOL3_SendCmdWithResult &rArr; UART_PROTOCOL3_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendUpAppReuqest
</UL>

<P><STRONG><a name="[14d]"></a>UART_PROTOCOL3_SendOnePacket_Bin</STRONG> (Thumb, 128 bytes, Stack size 184 bytes, uartprotocol3.o(i.UART_PROTOCOL3_SendOnePacket_Bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UART_PROTOCOL3_SendOnePacket_Bin &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxAddData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
</UL>

<P><STRONG><a name="[51]"></a>UART_PROTOCOL3_SendUpAppReuqest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uartprotocol3.o(i.UART_PROTOCOL3_SendUpAppReuqest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_PROTOCOL3_SendUpAppReuqest &rArr; UART_PROTOCOL3_SendCmdWithResult &rArr; UART_PROTOCOL3_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendCmdWithResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state.o(i.STEP_Process_IotUartUpgrade)
</UL>
<P><STRONG><a name="[149]"></a>UART_PROTOCOL3_TxAddData</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uartprotocol3.o(i.UART_PROTOCOL3_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_PROTOCOL3_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendCmdWithResult
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendOnePacket_Bin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendCmdUpApp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendCmdNoResult
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[14a]"></a>UART_PROTOCOL3_TxAddFrame</STRONG> (Thumb, 236 bytes, Stack size 20 bytes, uartprotocol3.o(i.UART_PROTOCOL3_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_PROTOCOL3_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendCmdWithResult
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendOnePacket_Bin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendCmdUpApp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_SendCmdNoResult
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[174]"></a>UART_PROTOCOL3_TxStateProcess</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, uartprotocol3.o(i.UART_PROTOCOL3_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_PROTOCOL3_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[176]"></a>UART_PROTOCOL_CheckSUM</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uartprotocol.o(i.UART_PROTOCOL_CheckSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[16f]"></a>UART_PROTOCOL_CmdFrameProcess</STRONG> (Thumb, 1162 bytes, Stack size 32 bytes, uartprotocol.o(i.UART_PROTOCOL_CmdFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_PROTOCOL_CmdFrameProcess &rArr; TIMER_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_SwitchStep
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[177]"></a>UART_PROTOCOL_ConfirmTempCmdFrameBuff</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uartprotocol.o(i.UART_PROTOCOL_ConfirmTempCmdFrameBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_RxFIFOProcess
</UL>

<P><STRONG><a name="[170]"></a>UART_PROTOCOL_DataStructInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uartprotocol.o(i.UART_PROTOCOL_DataStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[f8]"></a>UART_PROTOCOL_Init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, uartprotocol.o(i.UART_PROTOCOL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_PROTOCOL_Init &rArr; UART_PROTOCOL_DataStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_RegisterDataSendService
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_DataStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_LiMeUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotUartUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[169]"></a>UART_PROTOCOL_MacProcess</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, uartprotocol.o(i.UART_PROTOCOL_MacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_PROTOCOL_MacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_MacProcess
</UL>

<P><STRONG><a name="[13d]"></a>UART_PROTOCOL_Process</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uartprotocol.o(i.UART_PROTOCOL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_PROTOCOL_Process &rArr; UART_PROTOCOL3_CmdFrameProcess &rArr; TIMER_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_TxStateProcess
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_RxFIFOProcess
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL3_CmdFrameProcess
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_TxStateProcess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_RxFIFOProcess
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_CmdFrameProcess
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxStateProcess
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_RxFIFOProcess
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CmdFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
</UL>

<P><STRONG><a name="[171]"></a>UART_PROTOCOL_RegisterDataSendService</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uartprotocol.o(i.UART_PROTOCOL_RegisterDataSendService))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Init
</UL>

<P><STRONG><a name="[172]"></a>UART_PROTOCOL_RxFIFOProcess</STRONG> (Thumb, 414 bytes, Stack size 28 bytes, uartprotocol.o(i.UART_PROTOCOL_RxFIFOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_PROTOCOL_RxFIFOProcess &rArr; UART_PROTOCOL_ConfirmTempCmdFrameBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_ConfirmTempCmdFrameBuff
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_CheckSUM
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[146]"></a>UART_PROTOCOL_SendCmdParamAck</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, uartprotocol.o(i.UART_PROTOCOL_SendCmdParamAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_PROTOCOL_SendCmdParamAck &rArr; UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddFrame
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[14f]"></a>UART_PROTOCOL_TxAddData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uartprotocol.o(i.UART_PROTOCOL_TxAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_PROTOCOL_TxAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
</UL>

<P><STRONG><a name="[150]"></a>UART_PROTOCOL_TxAddFrame</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, uartprotocol.o(i.UART_PROTOCOL_TxAddFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_PROTOCOL_TxAddFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket_Hex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartProtocol_SendOnePacket
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_SendCmdParamAck
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_KaiYangUartUpgrade
</UL>

<P><STRONG><a name="[173]"></a>UART_PROTOCOL_TxStateProcess</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, uartprotocol.o(i.UART_PROTOCOL_TxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_PROTOCOL_TxStateProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_Process
</UL>

<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, uartdrive.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, armuart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, canprotocolupdt.o(i.USBD_HP_CAN0_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_HP_CAN0_TX_IRQHandler &rArr; CAN_Tx_FillAndSend &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_NextFram
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, canprotocolupdt.o(i.USBD_LP_CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LP_CAN0_RX0_IRQHandler &rArr; CAN_MD_PROTOCOL_MacProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_message_length_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TEST_PROTOCOL_MacProcess
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL_MacProcess
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PROTOCOL1_MacProcess
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MD_PROTOCOL_MacProcess
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[184]"></a>__0snprintf$2</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printf2.o(i.__0snprintf$2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[199]"></a>__1snprintf$2</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printf2.o(i.__0snprintf$2), UNUSED)

<P><STRONG><a name="[fe]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printf2.o(i.__0snprintf$2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutInfoUpdata
</UL>

<P><STRONG><a name="[19a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[19b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[19c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[144]"></a>addTimeOutTimer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timeout.o(i.addTimeOutTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = addTimeOutTimer &rArr; TIMER_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_IotCanUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmCanUpgrade
</UL>

<P><STRONG><a name="[96]"></a>can_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32f10x_can.o(i.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[98]"></a>can_filter_init</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, gd32f10x_can.o(i.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[97]"></a>can_init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, gd32f10x_can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[17b]"></a>can_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_can.o(i.can_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_can.o(i.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[17d]"></a>can_message_receive</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, gd32f10x_can.o(i.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>can_message_transmit</STRONG> (Thumb, 332 bytes, Stack size 12 bytes, gd32f10x_can.o(i.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_FillAndSend
</UL>

<P><STRONG><a name="[183]"></a>can_receive_message_length_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_can.o(i.can_receive_message_length_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>can_struct_para_init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, gd32f10x_can.o(i.can_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
</UL>

<P><STRONG><a name="[df]"></a>dma_channel_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>dma_circulation_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_circulation_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_circulation_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[e4]"></a>dma_deinit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[e8]"></a>dma_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f10x_dma.o(i.dma_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[e7]"></a>dma_init</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, gd32f10x_dma.o(i.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[e0]"></a>dma_interrupt_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[de]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f10x_dma.o(i.dma_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>dma_memory_to_memory_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f10x_dma.o(i.dma_memory_to_memory_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_to_memory_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[14b]"></a>dtaUartProtocol_SendOnePacket</STRONG> (Thumb, 116 bytes, Stack size 184 bytes, dtauartprotocol.o(i.dtaUartProtocol_SendOnePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dtaUartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_TxAddFrame
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTA_UART_PROTOCOL_TxAddData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[55]"></a>dutProgressReport</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, armprotocol.o(i.dutProgressReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dutProgressReport &rArr; ARM_PROTOCOL_TxAddFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_KillTask
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_TxAddFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_TxAddData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> armprotocol.o(i.setDutProgressReportInfo)
</UL>
<P><STRONG><a name="[6b]"></a>enterState</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, armprotocol.o(i.enterState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enterState &rArr; STATE_EnterState &rArr; DUTCTRL_PowerOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_EnterState
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[12e]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
</UL>

<P><STRONG><a name="[6e]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[6d]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WritePage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseSector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_EraseBlock
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[7d]"></a>gpio_init</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f10x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = main &rArr; STATE_Process &rArr; STEP_Process_KaiYangUartUpgrade &rArr; UART_DRIVE_InitSelect &rArr; UART_DRIVE_HwInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TaskQueueProcess
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Process
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_PowerOnOff
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_BusInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_Process
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_Process
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[12d]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithErase
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteWithCheck
</UL>

<P><STRONG><a name="[87]"></a>nvic_irq_enable</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32f10x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DMAy_Configuration
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[117]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[153]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[11d]"></a>rcu_ahb_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_ahb_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[11e]"></a>rcu_apb1_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_apb1_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[11f]"></a>rcu_apb2_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_apb2_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[18d]"></a>rcu_clock_freq_get</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, gd32f10x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[11a]"></a>rcu_deinit</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, gd32f10x_rcu.o(i.rcu_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[18b]"></a>rcu_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[11b]"></a>rcu_osci_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[11c]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 218 bytes, Stack size 20 bytes, gd32f10x_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[7c]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUTCTRL_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HW_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[187]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[186]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[121]"></a>rcu_pll_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_pll_config))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[120]"></a>rcu_predv0_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_predv0_config))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[122]"></a>rcu_system_clock_source_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_system_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[123]"></a>rcu_system_clock_source_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_system_clock_source_get))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[6a]"></a>setDutProgressReportInfo</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, armprotocol.o(i.setDutProgressReportInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = setDutProgressReportInfo &rArr; TIMER_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_AddTask
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[69]"></a>setUpItem</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, armprotocol.o(i.setUpItem))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PROTOCOL_CmdFrameProcess
</UL>

<P><STRONG><a name="[e2]"></a>spi_dma_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_dma_disable))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[e9]"></a>spi_dma_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_dma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[132]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
</UL>

<P><STRONG><a name="[12a]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[129]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[130]"></a>spi_i2s_deinit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32f10x_spi.o(i.spi_i2s_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
</UL>

<P><STRONG><a name="[e1]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
</UL>

<P><STRONG><a name="[15e]"></a>timer_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f10x_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[15d]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartTimerx
</UL>

<P><STRONG><a name="[160]"></a>timer_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[15f]"></a>timer_init</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[161]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_INT_Init
</UL>

<P><STRONG><a name="[156]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>uartProtocol_SendOnePacket</STRONG> (Thumb, 136 bytes, Stack size 184 bytes, uartprotocol.o(i.uartProtocol_SendOnePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = uartProtocol_SendOnePacket &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddFrame
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_SegUartUpgrade
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_HuaXinUartCbUpgrade
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[147]"></a>uartProtocol_SendOnePacket_Hex</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, uartprotocol.o(i.uartProtocol_SendOnePacket_Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uartProtocol_SendOnePacket_Hex &rArr; SPI_FLASH_ReadArray &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadArray
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddFrame
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PROTOCOL_TxAddData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Process_CmUartUpgrade
</UL>

<P><STRONG><a name="[7f]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f10x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[179]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_IR_StartSendData
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_IR_StartSendData
</UL>

<P><STRONG><a name="[7e]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[89]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[8b]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_IR_StartSendData
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_IR_StartSendData
</UL>

<P><STRONG><a name="[84]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[83]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[17a]"></a>usart_interrupt_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_IR_StartSendData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_IR_StartSendData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[178]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f10x_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[86]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[81]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[85]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>

<P><STRONG><a name="[80]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVE_HwInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_UART_HwInit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e3]"></a>DMAy_SPIx_Configuration</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, spiflash.o(i.DMAy_SPIx_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMAy_SPIx_Configuration &rArr; NVIC_DMAy_Configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_enable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_disable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_disable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DMAy_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_FLASH_Init
</UL>

<P><STRONG><a name="[ea]"></a>NVIC_DMAy_Configuration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spiflash.o(i.NVIC_DMAy_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_DMAy_Configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAy_SPIx_Configuration
</UL>

<P><STRONG><a name="[116]"></a>NVIC_Configuration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[119]"></a>RCC_HSE_Configuration</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, system.o(i.RCC_HSE_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_HSE_Configuration &rArr; rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_get
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_config
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_predv0_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_pll_config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_apb2_clock_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_apb1_clock_config
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ahb_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[188]"></a>dma_periph_and_channel_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_dma.o(i.dma_periph_and_channel_check))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_disable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>

<P><STRONG><a name="[18c]"></a>system_clock_108m_hxtal</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, system_gd32f10x.o(i.system_clock_108m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[154]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f10x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_108m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[185]"></a>_printf_core</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, printf2.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$2
</UL>

<P><STRONG><a name="[54]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf2.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(i.__0snprintf$2)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
