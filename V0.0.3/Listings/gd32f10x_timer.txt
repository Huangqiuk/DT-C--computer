; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_timer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_timer.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_timer.crf Libraries\src\gd32f10x_timer.c]
                          THUMB

                          AREA ||i.timer_auto_reload_shadow_disable||, CODE, READONLY, ALIGN=1

                  timer_auto_reload_shadow_disable PROC
;;;233    */
;;;234    void timer_auto_reload_shadow_disable(uint32_t timer_periph)
000000  6801              LDR      r1,[r0,#0]
;;;235    {
;;;236        TIMER_CTL0(timer_periph) &= ~(uint32_t)TIMER_CTL0_ARSE;
000002  f0210180          BIC      r1,r1,#0x80
000006  6001              STR      r1,[r0,#0]
;;;237    }
000008  4770              BX       lr
;;;238    
                          ENDP


                          AREA ||i.timer_auto_reload_shadow_enable||, CODE, READONLY, ALIGN=1

                  timer_auto_reload_shadow_enable PROC
;;;222    */
;;;223    void timer_auto_reload_shadow_enable(uint32_t timer_periph)
000000  6801              LDR      r1,[r0,#0]
;;;224    {
;;;225        TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_ARSE;
000002  f0410180          ORR      r1,r1,#0x80
000006  6001              STR      r1,[r0,#0]
;;;226    }
000008  4770              BX       lr
;;;227    
                          ENDP


                          AREA ||i.timer_automatic_output_disable||, CODE, READONLY, ALIGN=1

                  timer_automatic_output_disable PROC
;;;625    */
;;;626    void timer_automatic_output_disable(uint32_t timer_periph)
000000  6c41              LDR      r1,[r0,#0x44]
;;;627    {
;;;628        TIMER_CCHP(timer_periph) &= ~(uint32_t)TIMER_CCHP_OAEN;
000002  f4214180          BIC      r1,r1,#0x4000
000006  6441              STR      r1,[r0,#0x44]
;;;629    }
000008  4770              BX       lr
;;;630    
                          ENDP


                          AREA ||i.timer_automatic_output_enable||, CODE, READONLY, ALIGN=1

                  timer_automatic_output_enable PROC
;;;614    */
;;;615    void timer_automatic_output_enable(uint32_t timer_periph)
000000  6c41              LDR      r1,[r0,#0x44]
;;;616    {
;;;617        TIMER_CCHP(timer_periph) |= (uint32_t)TIMER_CCHP_OAEN;
000002  f4414180          ORR      r1,r1,#0x4000
000006  6441              STR      r1,[r0,#0x44]
;;;618    }
000008  4770              BX       lr
;;;619    
                          ENDP


                          AREA ||i.timer_autoreload_value_config||, CODE, READONLY, ALIGN=1

                  timer_autoreload_value_config PROC
;;;339    */         
;;;340    void timer_autoreload_value_config(uint32_t timer_periph, uint32_t autoreload)
000000  62c1              STR      r1,[r0,#0x2c]
;;;341    {
;;;342        TIMER_CAR(timer_periph) = (uint32_t)autoreload;
;;;343    }
000002  4770              BX       lr
;;;344    
                          ENDP


                          AREA ||i.timer_break_config||, CODE, READONLY, ALIGN=1

                  timer_break_config PROC
;;;575    */
;;;576    void timer_break_config(uint32_t timer_periph, timer_break_parameter_struct* breakpara)
000000  b510              PUSH     {r4,lr}
;;;577    {
;;;578        TIMER_CCHP(timer_periph) = (uint32_t)(((uint32_t)(breakpara->runoffstate)) |
000002  880a              LDRH     r2,[r1,#0]
000004  884b              LDRH     r3,[r1,#2]
000006  88cc              LDRH     r4,[r1,#6]
000008  431a              ORRS     r2,r2,r3
00000a  888b              LDRH     r3,[r1,#4]
00000c  4323              ORRS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  890b              LDRH     r3,[r1,#8]
000012  431a              ORRS     r2,r2,r3
000014  894b              LDRH     r3,[r1,#0xa]
000016  8989              LDRH     r1,[r1,#0xc]
000018  431a              ORRS     r2,r2,r3
00001a  430a              ORRS     r2,r2,r1
00001c  6442              STR      r2,[r0,#0x44]
;;;579                                              ((uint32_t)(breakpara->ideloffstate)) |
;;;580                                              ((uint32_t)(breakpara->deadtime)) |
;;;581                                              ((uint32_t)(breakpara->breakpolarity)) |
;;;582                                              ((uint32_t)(breakpara->outputautostate)) |
;;;583                                              ((uint32_t)(breakpara->protectmode)) |
;;;584                                              ((uint32_t)(breakpara->breakstate))) ;
;;;585    }
00001e  bd10              POP      {r4,pc}
;;;586    
                          ENDP


                          AREA ||i.timer_break_disable||, CODE, READONLY, ALIGN=1

                  timer_break_disable PROC
;;;603    */
;;;604    void timer_break_disable(uint32_t timer_periph)
000000  6c41              LDR      r1,[r0,#0x44]
;;;605    {
;;;606        TIMER_CCHP(timer_periph) &= ~(uint32_t)TIMER_CCHP_BRKEN;
000002  f4215180          BIC      r1,r1,#0x1000
000006  6441              STR      r1,[r0,#0x44]
;;;607    }
000008  4770              BX       lr
;;;608    
                          ENDP


                          AREA ||i.timer_break_enable||, CODE, READONLY, ALIGN=1

                  timer_break_enable PROC
;;;592    */
;;;593    void timer_break_enable(uint32_t timer_periph)
000000  6c41              LDR      r1,[r0,#0x44]
;;;594    {
;;;595        TIMER_CCHP(timer_periph) |= (uint32_t)TIMER_CCHP_BRKEN;
000002  f4415180          ORR      r1,r1,#0x1000
000006  6441              STR      r1,[r0,#0x44]
;;;596    }
000008  4770              BX       lr
;;;597    
                          ENDP


                          AREA ||i.timer_break_struct_para_init||, CODE, READONLY, ALIGN=1

                  timer_break_struct_para_init PROC
;;;549    */
;;;550    void timer_break_struct_para_init(timer_break_parameter_struct* breakpara)
000000  2100              MOVS     r1,#0
;;;551    {
;;;552        /* initialize the break parameter struct member with the default value */
;;;553        breakpara->runoffstate     = TIMER_ROS_STATE_DISABLE;
000002  8001              STRH     r1,[r0,#0]
;;;554        breakpara->ideloffstate    = TIMER_IOS_STATE_DISABLE;
000004  8041              STRH     r1,[r0,#2]
;;;555        breakpara->deadtime        = 0U;
000006  8081              STRH     r1,[r0,#4]
;;;556        breakpara->breakpolarity   = TIMER_BREAK_POLARITY_LOW;
000008  80c1              STRH     r1,[r0,#6]
;;;557        breakpara->outputautostate = TIMER_OUTAUTO_DISABLE;
00000a  8101              STRH     r1,[r0,#8]
;;;558        breakpara->protectmode     = TIMER_CCHP_PROT_OFF;
00000c  8141              STRH     r1,[r0,#0xa]
;;;559        breakpara->breakstate      = TIMER_BREAK_DISABLE;
00000e  8181              STRH     r1,[r0,#0xc]
;;;560    }
000010  4770              BX       lr
;;;561    
                          ENDP


                          AREA ||i.timer_channel_capture_value_register_read||, CODE, READONLY, ALIGN=1

                  timer_channel_capture_value_register_read PROC
;;;1402   */
;;;1403   uint32_t timer_channel_capture_value_register_read(uint32_t timer_periph, uint16_t channel)
000000  4602              MOV      r2,r0
;;;1404   {
;;;1405       uint32_t count_value = 0U;
000002  2000              MOVS     r0,#0
;;;1406   
;;;1407       switch(channel){
000004  2900              CMP      r1,#0
000006  d007              BEQ      |L10.24|
000008  2901              CMP      r1,#1
00000a  d007              BEQ      |L10.28|
00000c  2902              CMP      r1,#2
00000e  d007              BEQ      |L10.32|
000010  2903              CMP      r1,#3
000012  d100              BNE      |L10.22|
;;;1408       case TIMER_CH_0:
;;;1409           /* read TIMER channel 0 capture compare register value */
;;;1410           count_value = TIMER_CH0CV(timer_periph);
;;;1411           break;
;;;1412       case TIMER_CH_1:
;;;1413           /* read TIMER channel 1 capture compare register value */
;;;1414           count_value = TIMER_CH1CV(timer_periph);
;;;1415           break;
;;;1416       case TIMER_CH_2:
;;;1417           /* read TIMER channel 2 capture compare register value */
;;;1418           count_value = TIMER_CH2CV(timer_periph);
;;;1419           break;
;;;1420       case TIMER_CH_3:
;;;1421           /* read TIMER channel 3 capture compare register value */
;;;1422           count_value = TIMER_CH3CV(timer_periph);
000014  6c10              LDR      r0,[r2,#0x40]
                  |L10.22|
;;;1423           break;
;;;1424       default:
;;;1425           break;
;;;1426       }
;;;1427       return (count_value);
;;;1428   }
000016  4770              BX       lr
                  |L10.24|
000018  6b50              LDR      r0,[r2,#0x34]         ;1410
00001a  4770              BX       lr
                  |L10.28|
00001c  6b90              LDR      r0,[r2,#0x38]         ;1414
00001e  4770              BX       lr
                  |L10.32|
000020  6bd0              LDR      r0,[r2,#0x3c]         ;1418
000022  4770              BX       lr
;;;1429   
                          ENDP


                          AREA ||i.timer_channel_complementary_output_polarity_config||, CODE, READONLY, ALIGN=1

                  timer_channel_complementary_output_polarity_config PROC
;;;1117   */
;;;1118   void timer_channel_complementary_output_polarity_config(uint32_t timer_periph, uint16_t channel, uint16_t ocnpolarity)
000000  2900              CMP      r1,#0
;;;1119   {
000002  d00c              BEQ      |L11.30|
;;;1120       switch(channel){
000004  2901              CMP      r1,#1
000006  d012              BEQ      |L11.46|
000008  2902              CMP      r1,#2
00000a  d107              BNE      |L11.28|
;;;1121       /* configure TIMER_CH_0 */
;;;1122       case TIMER_CH_0:
;;;1123           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NP);
;;;1124           TIMER_CHCTL2(timer_periph) |= (uint32_t)ocnpolarity;
;;;1125           break;
;;;1126       /* configure TIMER_CH_1 */
;;;1127       case TIMER_CH_1:
;;;1128           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NP);
;;;1129           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)ocnpolarity << 4U);
;;;1130           break;
;;;1131       /* configure TIMER_CH_2 */
;;;1132       case TIMER_CH_2:
;;;1133           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NP);
00000c  6a01              LDR      r1,[r0,#0x20]
00000e  f4216100          BIC      r1,r1,#0x800
000012  6201              STR      r1,[r0,#0x20]
;;;1134           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)ocnpolarity << 8U);
000014  6a01              LDR      r1,[r0,#0x20]
000016  ea412102          ORR      r1,r1,r2,LSL #8
00001a  6201              STR      r1,[r0,#0x20]
                  |L11.28|
;;;1135           break;
;;;1136       default:
;;;1137           break;
;;;1138       }
;;;1139   }
00001c  4770              BX       lr
                  |L11.30|
00001e  6a01              LDR      r1,[r0,#0x20]         ;1123
000020  f0210108          BIC      r1,r1,#8              ;1123
000024  6201              STR      r1,[r0,#0x20]         ;1123
000026  6a01              LDR      r1,[r0,#0x20]         ;1124
000028  4311              ORRS     r1,r1,r2              ;1124
00002a  6201              STR      r1,[r0,#0x20]         ;1124
00002c  4770              BX       lr
                  |L11.46|
00002e  6a01              LDR      r1,[r0,#0x20]         ;1128
000030  f0210180          BIC      r1,r1,#0x80           ;1128
000034  6201              STR      r1,[r0,#0x20]         ;1128
000036  6a01              LDR      r1,[r0,#0x20]         ;1129
000038  ea411102          ORR      r1,r1,r2,LSL #4       ;1129
00003c  6201              STR      r1,[r0,#0x20]         ;1129
00003e  4770              BX       lr
;;;1140   
                          ENDP


                          AREA ||i.timer_channel_complementary_output_state_config||, CODE, READONLY, ALIGN=1

                  timer_channel_complementary_output_state_config PROC
;;;1199   */
;;;1200   void timer_channel_complementary_output_state_config(uint32_t timer_periph, uint16_t channel, uint16_t ocnstate)
000000  2900              CMP      r1,#0
;;;1201   {
000002  d00c              BEQ      |L12.30|
;;;1202       switch(channel){
000004  2901              CMP      r1,#1
000006  d012              BEQ      |L12.46|
000008  2902              CMP      r1,#2
00000a  d107              BNE      |L12.28|
;;;1203       /* configure TIMER_CH_0 */
;;;1204       case TIMER_CH_0:
;;;1205           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NEN);
;;;1206           TIMER_CHCTL2(timer_periph) |= (uint32_t)ocnstate;
;;;1207           break;
;;;1208       /* configure TIMER_CH_1 */
;;;1209       case TIMER_CH_1:
;;;1210           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NEN);
;;;1211           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)ocnstate << 4U);
;;;1212           break;
;;;1213       /* configure TIMER_CH_2 */
;;;1214       case TIMER_CH_2:
;;;1215           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NEN);
00000c  6a01              LDR      r1,[r0,#0x20]
00000e  f4216180          BIC      r1,r1,#0x400
000012  6201              STR      r1,[r0,#0x20]
;;;1216           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)ocnstate << 8U);
000014  6a01              LDR      r1,[r0,#0x20]
000016  ea412102          ORR      r1,r1,r2,LSL #8
00001a  6201              STR      r1,[r0,#0x20]
                  |L12.28|
;;;1217           break;
;;;1218       default:
;;;1219           break;
;;;1220       }
;;;1221   }
00001c  4770              BX       lr
                  |L12.30|
00001e  6a01              LDR      r1,[r0,#0x20]         ;1205
000020  f0210104          BIC      r1,r1,#4              ;1205
000024  6201              STR      r1,[r0,#0x20]         ;1205
000026  6a01              LDR      r1,[r0,#0x20]         ;1206
000028  4311              ORRS     r1,r1,r2              ;1206
00002a  6201              STR      r1,[r0,#0x20]         ;1206
00002c  4770              BX       lr
                  |L12.46|
00002e  6a01              LDR      r1,[r0,#0x20]         ;1210
000030  f0210140          BIC      r1,r1,#0x40           ;1210
000034  6201              STR      r1,[r0,#0x20]         ;1210
000036  6a01              LDR      r1,[r0,#0x20]         ;1211
000038  ea411102          ORR      r1,r1,r2,LSL #4       ;1211
00003c  6201              STR      r1,[r0,#0x20]         ;1211
00003e  4770              BX       lr
;;;1222   
                          ENDP


                          AREA ||i.timer_channel_control_shadow_config||, CODE, READONLY, ALIGN=1

                  timer_channel_control_shadow_config PROC
;;;653    */
;;;654    void timer_channel_control_shadow_config(uint32_t timer_periph, ControlStatus newvalue)
000000  2901              CMP      r1,#1
;;;655    {
000002  d004              BEQ      |L13.14|
;;;656         if(ENABLE == newvalue){
;;;657            TIMER_CTL1(timer_periph) |= (uint32_t)TIMER_CTL1_CCSE;
;;;658        }else{
;;;659            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_CCSE);
000004  6841              LDR      r1,[r0,#4]
000006  f0210101          BIC      r1,r1,#1
00000a  6041              STR      r1,[r0,#4]
;;;660        }
;;;661    }
00000c  4770              BX       lr
                  |L13.14|
00000e  6841              LDR      r1,[r0,#4]            ;657
000010  f0410101          ORR      r1,r1,#1              ;657
000014  6041              STR      r1,[r0,#4]            ;657
000016  4770              BX       lr
;;;662    
                          ENDP


                          AREA ||i.timer_channel_control_shadow_update_config||, CODE, READONLY, ALIGN=1

                  timer_channel_control_shadow_update_config PROC
;;;672    */              
;;;673    void timer_channel_control_shadow_update_config(uint32_t timer_periph, uint32_t ccuctl)
000000  2900              CMP      r1,#0
;;;674    {
000002  d006              BEQ      |L14.18|
;;;675        if(TIMER_UPDATECTL_CCU == ccuctl){
;;;676            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_CCUC);
;;;677        }else if(TIMER_UPDATECTL_CCUTRI == ccuctl){
000004  2904              CMP      r1,#4
000006  d103              BNE      |L14.16|
;;;678            TIMER_CTL1(timer_periph) |= (uint32_t)TIMER_CTL1_CCUC;
000008  6841              LDR      r1,[r0,#4]
00000a  f0410104          ORR      r1,r1,#4
00000e  6041              STR      r1,[r0,#4]
                  |L14.16|
;;;679        }else{
;;;680            /* illegal parameters */        
;;;681        }
;;;682    }
000010  4770              BX       lr
                  |L14.18|
000012  6841              LDR      r1,[r0,#4]            ;676
000014  f0210104          BIC      r1,r1,#4              ;676
000018  6041              STR      r1,[r0,#4]            ;676
00001a  4770              BX       lr
;;;683    
                          ENDP


                          AREA ||i.timer_channel_dma_request_source_select||, CODE, READONLY, ALIGN=1

                  timer_channel_dma_request_source_select PROC
;;;475    */
;;;476    void timer_channel_dma_request_source_select(uint32_t timer_periph, uint32_t dma_request)
000000  2908              CMP      r1,#8
;;;477    {
000002  d006              BEQ      |L15.18|
;;;478        if(TIMER_DMAREQUEST_UPDATEEVENT == dma_request){
;;;479            TIMER_CTL1(timer_periph) |= (uint32_t)TIMER_CTL1_DMAS;
;;;480        }else if(TIMER_DMAREQUEST_CHANNELEVENT == dma_request){
000004  2900              CMP      r1,#0
000006  d103              BNE      |L15.16|
;;;481            TIMER_CTL1(timer_periph) &= ~(uint32_t)TIMER_CTL1_DMAS;
000008  6841              LDR      r1,[r0,#4]
00000a  f0210108          BIC      r1,r1,#8
00000e  6041              STR      r1,[r0,#4]
                  |L15.16|
;;;482        }else{
;;;483            /* illegal parameters */        
;;;484        }
;;;485    }
000010  4770              BX       lr
                  |L15.18|
000012  6841              LDR      r1,[r0,#4]            ;479
000014  f0410108          ORR      r1,r1,#8              ;479
000018  6041              STR      r1,[r0,#4]            ;479
00001a  4770              BX       lr
;;;486    
                          ENDP


                          AREA ||i.timer_channel_input_capture_prescaler_config||, CODE, READONLY, ALIGN=1

                  timer_channel_input_capture_prescaler_config PROC
;;;1362   */
;;;1363   void timer_channel_input_capture_prescaler_config(uint32_t timer_periph, uint16_t channel, uint16_t prescaler)
000000  2900              CMP      r1,#0
;;;1364   {
000002  d00e              BEQ      |L16.34|
;;;1365       switch(channel){
000004  2901              CMP      r1,#1
000006  d014              BEQ      |L16.50|
000008  2902              CMP      r1,#2
00000a  d01b              BEQ      |L16.68|
00000c  2903              CMP      r1,#3
00000e  d107              BNE      |L16.32|
;;;1366       /* configure TIMER_CH_0 */
;;;1367       case TIMER_CH_0:
;;;1368           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0CAPPSC);
;;;1369           TIMER_CHCTL0(timer_periph) |= (uint32_t)prescaler;
;;;1370           break;
;;;1371       /* configure TIMER_CH_1 */
;;;1372       case TIMER_CH_1:
;;;1373           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1CAPPSC);
;;;1374           TIMER_CHCTL0(timer_periph) |= ((uint32_t)prescaler << 8U);
;;;1375           break;
;;;1376       /* configure TIMER_CH_2 */
;;;1377       case TIMER_CH_2:
;;;1378           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2CAPPSC);
;;;1379           TIMER_CHCTL1(timer_periph) |= (uint32_t)prescaler;
;;;1380           break;
;;;1381       /* configure TIMER_CH_3 */
;;;1382       case TIMER_CH_3:
;;;1383           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3CAPPSC);
000010  69c1              LDR      r1,[r0,#0x1c]
000012  f4216140          BIC      r1,r1,#0xc00
000016  61c1              STR      r1,[r0,#0x1c]
;;;1384           TIMER_CHCTL1(timer_periph) |= ((uint32_t)prescaler << 8U);
000018  69c1              LDR      r1,[r0,#0x1c]
00001a  ea412102          ORR      r1,r1,r2,LSL #8
00001e  61c1              STR      r1,[r0,#0x1c]
                  |L16.32|
;;;1385           break;
;;;1386       default:
;;;1387           break;
;;;1388       }
;;;1389   }
000020  4770              BX       lr
                  |L16.34|
000022  6981              LDR      r1,[r0,#0x18]         ;1368
000024  f021010c          BIC      r1,r1,#0xc            ;1368
000028  6181              STR      r1,[r0,#0x18]         ;1368
00002a  6981              LDR      r1,[r0,#0x18]         ;1369
00002c  4311              ORRS     r1,r1,r2              ;1369
00002e  6181              STR      r1,[r0,#0x18]         ;1369
000030  4770              BX       lr
                  |L16.50|
000032  6981              LDR      r1,[r0,#0x18]         ;1373
000034  f4216140          BIC      r1,r1,#0xc00          ;1373
000038  6181              STR      r1,[r0,#0x18]         ;1373
00003a  6981              LDR      r1,[r0,#0x18]         ;1374
00003c  ea412102          ORR      r1,r1,r2,LSL #8       ;1374
000040  6181              STR      r1,[r0,#0x18]         ;1374
000042  4770              BX       lr
                  |L16.68|
000044  69c1              LDR      r1,[r0,#0x1c]         ;1378
000046  f021010c          BIC      r1,r1,#0xc            ;1378
00004a  61c1              STR      r1,[r0,#0x1c]         ;1378
00004c  69c1              LDR      r1,[r0,#0x1c]         ;1379
00004e  4311              ORRS     r1,r1,r2              ;1379
000050  61c1              STR      r1,[r0,#0x1c]         ;1379
000052  4770              BX       lr
;;;1390   
                          ENDP


                          AREA ||i.timer_channel_input_struct_para_init||, CODE, READONLY, ALIGN=1

                  timer_channel_input_struct_para_init PROC
;;;1228   */
;;;1229   void timer_channel_input_struct_para_init(timer_ic_parameter_struct* icpara)
000000  2100              MOVS     r1,#0
;;;1230   {
;;;1231       /* initialize the channel input parameter struct member with the default value */
;;;1232       icpara->icpolarity  = TIMER_IC_POLARITY_RISING;
000002  8001              STRH     r1,[r0,#0]
;;;1233       icpara->icselection = TIMER_IC_SELECTION_DIRECTTI;
000004  2201              MOVS     r2,#1
000006  8042              STRH     r2,[r0,#2]
;;;1234       icpara->icprescaler = TIMER_IC_PSC_DIV1;
000008  8081              STRH     r1,[r0,#4]
;;;1235       icpara->icfilter    = 0U;
00000a  80c1              STRH     r1,[r0,#6]
;;;1236   }
00000c  4770              BX       lr
;;;1237   
                          ENDP


                          AREA ||i.timer_channel_output_clear_config||, CODE, READONLY, ALIGN=1

                  timer_channel_output_clear_config PROC
;;;1030   */
;;;1031   void timer_channel_output_clear_config(uint32_t timer_periph, uint16_t channel, uint16_t occlear)
000000  2900              CMP      r1,#0
;;;1032   {
000002  d00e              BEQ      |L18.34|
;;;1033       switch(channel){
000004  2901              CMP      r1,#1
000006  d014              BEQ      |L18.50|
000008  2902              CMP      r1,#2
00000a  d01b              BEQ      |L18.68|
00000c  2903              CMP      r1,#3
00000e  d107              BNE      |L18.32|
;;;1034       /* configure TIMER_CH_0 */
;;;1035       case TIMER_CH_0:
;;;1036           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMCEN);
;;;1037           TIMER_CHCTL0(timer_periph) |= (uint32_t)occlear;
;;;1038           break;
;;;1039       /* configure TIMER_CH_1 */
;;;1040       case TIMER_CH_1:
;;;1041           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCEN);
;;;1042           TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)occlear << 8U);
;;;1043           break;
;;;1044       /* configure TIMER_CH_2 */
;;;1045       case TIMER_CH_2:
;;;1046           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMCEN);
;;;1047           TIMER_CHCTL1(timer_periph) |= (uint32_t)occlear;
;;;1048           break;
;;;1049       /* configure TIMER_CH_3 */
;;;1050       case TIMER_CH_3:
;;;1051           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCEN);
000010  69c1              LDR      r1,[r0,#0x1c]
000012  f4214100          BIC      r1,r1,#0x8000
000016  61c1              STR      r1,[r0,#0x1c]
;;;1052           TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)occlear << 8U);
000018  69c1              LDR      r1,[r0,#0x1c]
00001a  ea412102          ORR      r1,r1,r2,LSL #8
00001e  61c1              STR      r1,[r0,#0x1c]
                  |L18.32|
;;;1053           break;
;;;1054       default:
;;;1055           break;
;;;1056       }
;;;1057   }
000020  4770              BX       lr
                  |L18.34|
000022  6981              LDR      r1,[r0,#0x18]         ;1036
000024  f0210180          BIC      r1,r1,#0x80           ;1036
000028  6181              STR      r1,[r0,#0x18]         ;1036
00002a  6981              LDR      r1,[r0,#0x18]         ;1037
00002c  4311              ORRS     r1,r1,r2              ;1037
00002e  6181              STR      r1,[r0,#0x18]         ;1037
000030  4770              BX       lr
                  |L18.50|
000032  6981              LDR      r1,[r0,#0x18]         ;1041
000034  f4214100          BIC      r1,r1,#0x8000         ;1041
000038  6181              STR      r1,[r0,#0x18]         ;1041
00003a  6981              LDR      r1,[r0,#0x18]         ;1042
00003c  ea412102          ORR      r1,r1,r2,LSL #8       ;1042
000040  6181              STR      r1,[r0,#0x18]         ;1042
000042  4770              BX       lr
                  |L18.68|
000044  69c1              LDR      r1,[r0,#0x1c]         ;1046
000046  f0210180          BIC      r1,r1,#0x80           ;1046
00004a  61c1              STR      r1,[r0,#0x1c]         ;1046
00004c  69c1              LDR      r1,[r0,#0x1c]         ;1047
00004e  4311              ORRS     r1,r1,r2              ;1047
000050  61c1              STR      r1,[r0,#0x1c]         ;1047
000052  4770              BX       lr
;;;1058   
                          ENDP


                          AREA ||i.timer_channel_output_config||, CODE, READONLY, ALIGN=2

                  timer_channel_output_config PROC
;;;719    */
;;;720    void timer_channel_output_config(uint32_t timer_periph, uint16_t channel, timer_oc_parameter_struct* ocpara)
000000  b530              PUSH     {r4,r5,lr}
;;;721    {
;;;722        switch(channel){
;;;723        /* configure TIMER_CH_0 */
;;;724        case TIMER_CH_0:
;;;725            /* reset the CH0EN bit */
;;;726            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
;;;727            TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH0MS;
;;;728            /* set the CH0EN bit */
;;;729            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputstate;
;;;730            /* reset the CH0P bit */
;;;731            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0P);
;;;732            /* set the CH0P bit */
;;;733            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocpolarity;
;;;734    
;;;735            if((TIMER0 == timer_periph) || (TIMER7 == timer_periph)){
000002  4b73              LDR      r3,|L19.464|
000004  4c73              LDR      r4,|L19.468|
000006  2900              CMP      r1,#0                 ;722
000008  d029              BEQ      |L19.94|
00000a  2901              CMP      r1,#1                 ;722
00000c  d060              BEQ      |L19.208|
00000e  2902              CMP      r1,#2                 ;722
000010  d07e              BEQ      |L19.272|
000012  2903              CMP      r1,#3                 ;722
000014  d122              BNE      |L19.92|
;;;736                /* reset the CH0NEN bit */
;;;737                TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NEN);
;;;738                /* set the CH0NEN bit */
;;;739                TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputnstate;
;;;740                /* reset the CH0NP bit */
;;;741                TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NP);
;;;742                /* set the CH0NP bit */
;;;743                TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocnpolarity;
;;;744                /* reset the ISO0 bit */
;;;745                TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0);
;;;746                /* set the ISO0 bit */
;;;747                TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocidlestate;
;;;748                /* reset the ISO0N bit */
;;;749                TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0N);
;;;750                /* set the ISO0N bit */
;;;751                TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocnidlestate;
;;;752            }
;;;753            break;
;;;754        /* configure TIMER_CH_1 */
;;;755        case TIMER_CH_1:
;;;756            /* reset the CH1EN bit */
;;;757            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
;;;758            TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
;;;759            /* set the CH1EN bit */
;;;760            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 4U);
;;;761            /* reset the CH1P bit */
;;;762            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1P);
;;;763            /* set the CH1P bit */
;;;764            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity)<< 4U);
;;;765    
;;;766            if((TIMER0 == timer_periph) || (TIMER7 == timer_periph)){
;;;767                /* reset the CH1NEN bit */
;;;768                TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NEN);
;;;769                /* set the CH1NEN bit */
;;;770                TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate)<< 4U);
;;;771                /* reset the CH1NP bit */
;;;772                TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NP);
;;;773                /* set the CH1NP bit */
;;;774                TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity)<< 4U);
;;;775                /* reset the ISO1 bit */
;;;776                TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1);
;;;777                /* set the ISO1 bit */
;;;778                TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate)<< 2U);
;;;779                /* reset the ISO1N bit */
;;;780                TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
;;;781                /* set the ISO1N bit */
;;;782                TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate)<< 2U);
;;;783            }
;;;784            break;
;;;785        /* configure TIMER_CH_2 */
;;;786        case TIMER_CH_2:
;;;787            /* reset the CH2EN bit */
;;;788            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2EN);
;;;789            TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH2MS;
;;;790            /* set the CH2EN bit */
;;;791            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 8U);
;;;792            /* reset the CH2P bit */
;;;793            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2P);
;;;794            /* set the CH2P bit */
;;;795            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity)<< 8U);
;;;796    
;;;797            if((TIMER0 == timer_periph) || (TIMER7 == timer_periph)){
;;;798                /* reset the CH2NEN bit */
;;;799                TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NEN);
;;;800                /* set the CH2NEN bit */
;;;801                TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate)<< 8U);
;;;802                /* reset the CH2NP bit */
;;;803                TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NP);
;;;804                /* set the CH2NP bit */
;;;805                TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity)<< 8U);
;;;806                /* reset the ISO2 bit */
;;;807                TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
;;;808                /* set the ISO2 bit */
;;;809                TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate)<< 4U);
;;;810                /* reset the ISO2N bit */
;;;811                TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2N);
;;;812                /* set the ISO2N bit */
;;;813                TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate)<< 4U);
;;;814            }
;;;815            break;
;;;816        /* configure TIMER_CH_3 */
;;;817        case TIMER_CH_3:
;;;818            /* reset the CH3EN bit */
;;;819            TIMER_CHCTL2(timer_periph) &=(~(uint32_t)TIMER_CHCTL2_CH3EN);
000016  6a01              LDR      r1,[r0,#0x20]
000018  f4215180          BIC      r1,r1,#0x1000
00001c  6201              STR      r1,[r0,#0x20]
;;;820            TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
00001e  69c1              LDR      r1,[r0,#0x1c]
000020  f4217140          BIC      r1,r1,#0x300
000024  61c1              STR      r1,[r0,#0x1c]
;;;821            /* set the CH3EN bit */
;;;822            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 12U);
000026  6a01              LDR      r1,[r0,#0x20]
000028  8815              LDRH     r5,[r2,#0]
00002a  ea413105          ORR      r1,r1,r5,LSL #12
00002e  6201              STR      r1,[r0,#0x20]
;;;823            /* reset the CH3P bit */
;;;824            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH3P);
000030  6a01              LDR      r1,[r0,#0x20]
000032  f4215100          BIC      r1,r1,#0x2000
000036  6201              STR      r1,[r0,#0x20]
;;;825            /* set the CH3P bit */
;;;826            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity)<< 12U);
000038  6a01              LDR      r1,[r0,#0x20]
00003a  8895              LDRH     r5,[r2,#4]
00003c  ea413105          ORR      r1,r1,r5,LSL #12
000040  6201              STR      r1,[r0,#0x20]
;;;827    
;;;828            if((TIMER0 == timer_periph) || (TIMER7 == timer_periph)){
000042  4298              CMP      r0,r3
000044  d001              BEQ      |L19.74|
000046  42a0              CMP      r0,r4
000048  d108              BNE      |L19.92|
                  |L19.74|
;;;829                /* reset the ISO3 bit */
;;;830                TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
00004a  6841              LDR      r1,[r0,#4]
00004c  f4214180          BIC      r1,r1,#0x4000
000050  6041              STR      r1,[r0,#4]
;;;831                /* set the ISO3 bit */
;;;832                TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate)<< 6U);
000052  6841              LDR      r1,[r0,#4]
000054  8912              LDRH     r2,[r2,#8]
000056  ea411182          ORR      r1,r1,r2,LSL #6
00005a  6041              STR      r1,[r0,#4]
                  |L19.92|
;;;833            }
;;;834            break;
;;;835        default:
;;;836            break;
;;;837        }
;;;838    }
00005c  bd30              POP      {r4,r5,pc}
                  |L19.94|
00005e  6a01              LDR      r1,[r0,#0x20]         ;726
000060  f0210101          BIC      r1,r1,#1              ;726
000064  6201              STR      r1,[r0,#0x20]         ;726
000066  6981              LDR      r1,[r0,#0x18]         ;727
000068  f0210103          BIC      r1,r1,#3              ;727
00006c  6181              STR      r1,[r0,#0x18]         ;727
00006e  6a01              LDR      r1,[r0,#0x20]         ;729
000070  8815              LDRH     r5,[r2,#0]            ;729
000072  4329              ORRS     r1,r1,r5              ;729
000074  6201              STR      r1,[r0,#0x20]         ;729
000076  6a01              LDR      r1,[r0,#0x20]         ;731
000078  f0210102          BIC      r1,r1,#2              ;731
00007c  6201              STR      r1,[r0,#0x20]         ;731
00007e  6a01              LDR      r1,[r0,#0x20]         ;733
000080  8895              LDRH     r5,[r2,#4]            ;733
000082  4329              ORRS     r1,r1,r5              ;733
000084  6201              STR      r1,[r0,#0x20]         ;733
000086  4298              CMP      r0,r3                 ;735
000088  d001              BEQ      |L19.142|
00008a  42a0              CMP      r0,r4                 ;735
00008c  d1e6              BNE      |L19.92|
                  |L19.142|
00008e  6a01              LDR      r1,[r0,#0x20]         ;737
000090  f0210104          BIC      r1,r1,#4              ;737
000094  6201              STR      r1,[r0,#0x20]         ;737
000096  6a01              LDR      r1,[r0,#0x20]         ;739
000098  8853              LDRH     r3,[r2,#2]            ;739
00009a  4319              ORRS     r1,r1,r3              ;739
00009c  6201              STR      r1,[r0,#0x20]         ;739
00009e  6a01              LDR      r1,[r0,#0x20]         ;741
0000a0  f0210108          BIC      r1,r1,#8              ;741
0000a4  6201              STR      r1,[r0,#0x20]         ;741
0000a6  6a01              LDR      r1,[r0,#0x20]         ;743
0000a8  88d3              LDRH     r3,[r2,#6]            ;743
0000aa  4319              ORRS     r1,r1,r3              ;743
0000ac  6201              STR      r1,[r0,#0x20]         ;743
0000ae  6841              LDR      r1,[r0,#4]            ;745
0000b0  f4217180          BIC      r1,r1,#0x100          ;745
0000b4  6041              STR      r1,[r0,#4]            ;745
0000b6  6841              LDR      r1,[r0,#4]            ;747
0000b8  8913              LDRH     r3,[r2,#8]            ;747
0000ba  4319              ORRS     r1,r1,r3              ;747
0000bc  6041              STR      r1,[r0,#4]            ;747
0000be  6841              LDR      r1,[r0,#4]            ;749
0000c0  f4217100          BIC      r1,r1,#0x200          ;749
0000c4  6041              STR      r1,[r0,#4]            ;749
0000c6  6841              LDR      r1,[r0,#4]            ;751
0000c8  8952              LDRH     r2,[r2,#0xa]          ;751
0000ca  4311              ORRS     r1,r1,r2              ;751
0000cc  6041              STR      r1,[r0,#4]            ;751
                  |L19.206|
0000ce  bd30              POP      {r4,r5,pc}
                  |L19.208|
0000d0  6a01              LDR      r1,[r0,#0x20]         ;757
0000d2  f0210110          BIC      r1,r1,#0x10           ;757
0000d6  6201              STR      r1,[r0,#0x20]         ;757
0000d8  6981              LDR      r1,[r0,#0x18]         ;758
0000da  f4217140          BIC      r1,r1,#0x300          ;758
0000de  6181              STR      r1,[r0,#0x18]         ;758
0000e0  6a01              LDR      r1,[r0,#0x20]         ;760
0000e2  8815              LDRH     r5,[r2,#0]            ;760
0000e4  ea411105          ORR      r1,r1,r5,LSL #4       ;760
0000e8  6201              STR      r1,[r0,#0x20]         ;760
0000ea  6a01              LDR      r1,[r0,#0x20]         ;762
0000ec  f0210120          BIC      r1,r1,#0x20           ;762
0000f0  6201              STR      r1,[r0,#0x20]         ;762
0000f2  6a01              LDR      r1,[r0,#0x20]         ;764
0000f4  8895              LDRH     r5,[r2,#4]            ;764
0000f6  ea411105          ORR      r1,r1,r5,LSL #4       ;764
0000fa  6201              STR      r1,[r0,#0x20]         ;764
0000fc  4298              CMP      r0,r3                 ;766
0000fe  d001              BEQ      |L19.260|
000100  42a0              CMP      r0,r4                 ;766
000102  d1e4              BNE      |L19.206|
                  |L19.260|
000104  6a01              LDR      r1,[r0,#0x20]         ;768
000106  f0210140          BIC      r1,r1,#0x40           ;768
00010a  6201              STR      r1,[r0,#0x20]         ;768
00010c  6a01              LDR      r1,[r0,#0x20]         ;770
00010e  e000              B        |L19.274|
                  |L19.272|
000110  e01f              B        |L19.338|
                  |L19.274|
000112  8853              LDRH     r3,[r2,#2]            ;770
000114  ea411103          ORR      r1,r1,r3,LSL #4       ;770
000118  6201              STR      r1,[r0,#0x20]         ;770
00011a  6a01              LDR      r1,[r0,#0x20]         ;772
00011c  f0210180          BIC      r1,r1,#0x80           ;772
000120  6201              STR      r1,[r0,#0x20]         ;772
000122  6a01              LDR      r1,[r0,#0x20]         ;774
000124  88d3              LDRH     r3,[r2,#6]            ;774
000126  ea411103          ORR      r1,r1,r3,LSL #4       ;774
00012a  6201              STR      r1,[r0,#0x20]         ;774
00012c  6841              LDR      r1,[r0,#4]            ;776
00012e  f4216180          BIC      r1,r1,#0x400          ;776
000132  6041              STR      r1,[r0,#4]            ;776
000134  6841              LDR      r1,[r0,#4]            ;778
000136  8913              LDRH     r3,[r2,#8]            ;778
000138  ea410183          ORR      r1,r1,r3,LSL #2       ;778
00013c  6041              STR      r1,[r0,#4]            ;778
00013e  6841              LDR      r1,[r0,#4]            ;780
000140  f4216100          BIC      r1,r1,#0x800          ;780
000144  6041              STR      r1,[r0,#4]            ;780
000146  6841              LDR      r1,[r0,#4]            ;782
000148  8952              LDRH     r2,[r2,#0xa]          ;782
00014a  ea410182          ORR      r1,r1,r2,LSL #2       ;782
00014e  6041              STR      r1,[r0,#4]            ;782
                  |L19.336|
000150  bd30              POP      {r4,r5,pc}
                  |L19.338|
000152  6a01              LDR      r1,[r0,#0x20]         ;788
000154  f4217180          BIC      r1,r1,#0x100          ;788
000158  6201              STR      r1,[r0,#0x20]         ;788
00015a  69c1              LDR      r1,[r0,#0x1c]         ;789
00015c  f0210103          BIC      r1,r1,#3              ;789
000160  61c1              STR      r1,[r0,#0x1c]         ;789
000162  6a01              LDR      r1,[r0,#0x20]         ;791
000164  8815              LDRH     r5,[r2,#0]            ;791
000166  ea412105          ORR      r1,r1,r5,LSL #8       ;791
00016a  6201              STR      r1,[r0,#0x20]         ;791
00016c  6a01              LDR      r1,[r0,#0x20]         ;793
00016e  f4217100          BIC      r1,r1,#0x200          ;793
000172  6201              STR      r1,[r0,#0x20]         ;793
000174  6a01              LDR      r1,[r0,#0x20]         ;795
000176  8895              LDRH     r5,[r2,#4]            ;795
000178  ea412105          ORR      r1,r1,r5,LSL #8       ;795
00017c  6201              STR      r1,[r0,#0x20]         ;795
00017e  4298              CMP      r0,r3                 ;797
000180  d001              BEQ      |L19.390|
000182  42a0              CMP      r0,r4                 ;797
000184  d1e4              BNE      |L19.336|
                  |L19.390|
000186  6a01              LDR      r1,[r0,#0x20]         ;799
000188  f4216180          BIC      r1,r1,#0x400          ;799
00018c  6201              STR      r1,[r0,#0x20]         ;799
00018e  6a01              LDR      r1,[r0,#0x20]         ;801
000190  8853              LDRH     r3,[r2,#2]            ;801
000192  ea412103          ORR      r1,r1,r3,LSL #8       ;801
000196  6201              STR      r1,[r0,#0x20]         ;801
000198  6a01              LDR      r1,[r0,#0x20]         ;803
00019a  f4216100          BIC      r1,r1,#0x800          ;803
00019e  6201              STR      r1,[r0,#0x20]         ;803
0001a0  6a01              LDR      r1,[r0,#0x20]         ;805
0001a2  88d3              LDRH     r3,[r2,#6]            ;805
0001a4  ea412103          ORR      r1,r1,r3,LSL #8       ;805
0001a8  6201              STR      r1,[r0,#0x20]         ;805
0001aa  6841              LDR      r1,[r0,#4]            ;807
0001ac  f4215180          BIC      r1,r1,#0x1000         ;807
0001b0  6041              STR      r1,[r0,#4]            ;807
0001b2  6841              LDR      r1,[r0,#4]            ;809
0001b4  8913              LDRH     r3,[r2,#8]            ;809
0001b6  ea411103          ORR      r1,r1,r3,LSL #4       ;809
0001ba  6041              STR      r1,[r0,#4]            ;809
0001bc  6841              LDR      r1,[r0,#4]            ;811
0001be  f4215100          BIC      r1,r1,#0x2000         ;811
0001c2  6041              STR      r1,[r0,#4]            ;811
0001c4  6841              LDR      r1,[r0,#4]            ;813
0001c6  8952              LDRH     r2,[r2,#0xa]          ;813
0001c8  ea411102          ORR      r1,r1,r2,LSL #4       ;813
0001cc  6041              STR      r1,[r0,#4]            ;813
0001ce  bd30              POP      {r4,r5,pc}
;;;839    
                          ENDP

                  |L19.464|
                          DCD      0x40012c00
                  |L19.468|
                          DCD      0x40013400

                          AREA ||i.timer_channel_output_fast_config||, CODE, READONLY, ALIGN=1

                  timer_channel_output_fast_config PROC
;;;986    */
;;;987    void timer_channel_output_fast_config(uint32_t timer_periph, uint16_t channel, uint16_t ocfast)
000000  2900              CMP      r1,#0
;;;988    {
000002  d00e              BEQ      |L20.34|
;;;989        switch(channel){
000004  2901              CMP      r1,#1
000006  d014              BEQ      |L20.50|
000008  2902              CMP      r1,#2
00000a  d01b              BEQ      |L20.68|
00000c  2903              CMP      r1,#3
00000e  d107              BNE      |L20.32|
;;;990        /* configure TIMER_CH_0 */
;;;991        case TIMER_CH_0:
;;;992            TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMFEN);
;;;993            TIMER_CHCTL0(timer_periph) |= (uint32_t)ocfast;
;;;994            break;
;;;995        /* configure TIMER_CH_1 */
;;;996        case TIMER_CH_1:
;;;997            TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMFEN);
;;;998            TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)ocfast << 8U);
;;;999            break;
;;;1000       /* configure TIMER_CH_2 */
;;;1001       case TIMER_CH_2:
;;;1002           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMFEN);
;;;1003           TIMER_CHCTL1(timer_periph) |= (uint32_t)ocfast;
;;;1004           break;
;;;1005       /* configure TIMER_CH_3 */
;;;1006       case TIMER_CH_3:
;;;1007           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMFEN);
000010  69c1              LDR      r1,[r0,#0x1c]
000012  f4216180          BIC      r1,r1,#0x400
000016  61c1              STR      r1,[r0,#0x1c]
;;;1008           TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)ocfast << 8U);
000018  69c1              LDR      r1,[r0,#0x1c]
00001a  ea412102          ORR      r1,r1,r2,LSL #8
00001e  61c1              STR      r1,[r0,#0x1c]
                  |L20.32|
;;;1009           break;
;;;1010       default:
;;;1011           break;
;;;1012       }
;;;1013   }
000020  4770              BX       lr
                  |L20.34|
000022  6981              LDR      r1,[r0,#0x18]         ;992
000024  f0210104          BIC      r1,r1,#4              ;992
000028  6181              STR      r1,[r0,#0x18]         ;992
00002a  6981              LDR      r1,[r0,#0x18]         ;993
00002c  4311              ORRS     r1,r1,r2              ;993
00002e  6181              STR      r1,[r0,#0x18]         ;993
000030  4770              BX       lr
                  |L20.50|
000032  6981              LDR      r1,[r0,#0x18]         ;997
000034  f4216180          BIC      r1,r1,#0x400          ;997
000038  6181              STR      r1,[r0,#0x18]         ;997
00003a  6981              LDR      r1,[r0,#0x18]         ;998
00003c  ea412102          ORR      r1,r1,r2,LSL #8       ;998
000040  6181              STR      r1,[r0,#0x18]         ;998
000042  4770              BX       lr
                  |L20.68|
000044  69c1              LDR      r1,[r0,#0x1c]         ;1002
000046  f0210104          BIC      r1,r1,#4              ;1002
00004a  61c1              STR      r1,[r0,#0x1c]         ;1002
00004c  69c1              LDR      r1,[r0,#0x1c]         ;1003
00004e  4311              ORRS     r1,r1,r2              ;1003
000050  61c1              STR      r1,[r0,#0x1c]         ;1003
000052  4770              BX       lr
;;;1014   
                          ENDP


                          AREA ||i.timer_channel_output_mode_config||, CODE, READONLY, ALIGN=1

                  timer_channel_output_mode_config PROC
;;;861    */
;;;862    void timer_channel_output_mode_config(uint32_t timer_periph, uint16_t channel, uint16_t ocmode)
000000  2900              CMP      r1,#0
;;;863    {
000002  d00e              BEQ      |L21.34|
;;;864        switch(channel){
000004  2901              CMP      r1,#1
000006  d014              BEQ      |L21.50|
000008  2902              CMP      r1,#2
00000a  d01b              BEQ      |L21.68|
00000c  2903              CMP      r1,#3
00000e  d107              BNE      |L21.32|
;;;865        /* configure TIMER_CH_0 */
;;;866        case TIMER_CH_0:
;;;867            TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMCTL);
;;;868            TIMER_CHCTL0(timer_periph) |= (uint32_t)ocmode;
;;;869            break;
;;;870        /* configure TIMER_CH_1 */
;;;871        case TIMER_CH_1:
;;;872            TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
;;;873            TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode)<< 8U);
;;;874            break;
;;;875        /* configure TIMER_CH_2 */
;;;876        case TIMER_CH_2:
;;;877            TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMCTL);
;;;878            TIMER_CHCTL1(timer_periph) |= (uint32_t)ocmode;
;;;879            break;
;;;880        /* configure TIMER_CH_3 */
;;;881        case TIMER_CH_3:
;;;882            TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
000010  69c1              LDR      r1,[r0,#0x1c]
000012  f42141e0          BIC      r1,r1,#0x7000
000016  61c1              STR      r1,[r0,#0x1c]
;;;883            TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode)<< 8U);
000018  69c1              LDR      r1,[r0,#0x1c]
00001a  ea412102          ORR      r1,r1,r2,LSL #8
00001e  61c1              STR      r1,[r0,#0x1c]
                  |L21.32|
;;;884            break;
;;;885        default:
;;;886            break;
;;;887        }
;;;888    }
000020  4770              BX       lr
                  |L21.34|
000022  6981              LDR      r1,[r0,#0x18]         ;867
000024  f0210170          BIC      r1,r1,#0x70           ;867
000028  6181              STR      r1,[r0,#0x18]         ;867
00002a  6981              LDR      r1,[r0,#0x18]         ;868
00002c  4311              ORRS     r1,r1,r2              ;868
00002e  6181              STR      r1,[r0,#0x18]         ;868
000030  4770              BX       lr
                  |L21.50|
000032  6981              LDR      r1,[r0,#0x18]         ;872
000034  f42141e0          BIC      r1,r1,#0x7000         ;872
000038  6181              STR      r1,[r0,#0x18]         ;872
00003a  6981              LDR      r1,[r0,#0x18]         ;873
00003c  ea412102          ORR      r1,r1,r2,LSL #8       ;873
000040  6181              STR      r1,[r0,#0x18]         ;873
000042  4770              BX       lr
                  |L21.68|
000044  69c1              LDR      r1,[r0,#0x1c]         ;877
000046  f0210170          BIC      r1,r1,#0x70           ;877
00004a  61c1              STR      r1,[r0,#0x1c]         ;877
00004c  69c1              LDR      r1,[r0,#0x1c]         ;878
00004e  4311              ORRS     r1,r1,r2              ;878
000050  61c1              STR      r1,[r0,#0x1c]         ;878
000052  4770              BX       lr
;;;889    
                          ENDP


                          AREA ||i.timer_channel_output_polarity_config||, CODE, READONLY, ALIGN=1

                  timer_channel_output_polarity_config PROC
;;;1074   */
;;;1075   void timer_channel_output_polarity_config(uint32_t timer_periph, uint16_t channel, uint16_t ocpolarity)
000000  2900              CMP      r1,#0
;;;1076   {
000002  d00e              BEQ      |L22.34|
;;;1077       switch(channel){
000004  2901              CMP      r1,#1
000006  d014              BEQ      |L22.50|
000008  2902              CMP      r1,#2
00000a  d01b              BEQ      |L22.68|
00000c  2903              CMP      r1,#3
00000e  d107              BNE      |L22.32|
;;;1078       /* configure TIMER_CH_0 */
;;;1079       case TIMER_CH_0:
;;;1080           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0P);
;;;1081           TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpolarity;
;;;1082           break;
;;;1083       /* configure TIMER_CH_1 */
;;;1084       case TIMER_CH_1:
;;;1085           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1P);
;;;1086           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)ocpolarity << 4U);
;;;1087           break;
;;;1088       /* configure TIMER_CH_2 */
;;;1089       case TIMER_CH_2:
;;;1090           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2P);
;;;1091           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)ocpolarity << 8U);
;;;1092           break;
;;;1093       /* configure TIMER_CH_3 */
;;;1094       case TIMER_CH_3:
;;;1095           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH3P);
000010  6a01              LDR      r1,[r0,#0x20]
000012  f4215100          BIC      r1,r1,#0x2000
000016  6201              STR      r1,[r0,#0x20]
;;;1096           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)ocpolarity << 12U);
000018  6a01              LDR      r1,[r0,#0x20]
00001a  ea413102          ORR      r1,r1,r2,LSL #12
00001e  6201              STR      r1,[r0,#0x20]
                  |L22.32|
;;;1097           break;
;;;1098       default:
;;;1099           break;
;;;1100       }
;;;1101   }
000020  4770              BX       lr
                  |L22.34|
000022  6a01              LDR      r1,[r0,#0x20]         ;1080
000024  f0210102          BIC      r1,r1,#2              ;1080
000028  6201              STR      r1,[r0,#0x20]         ;1080
00002a  6a01              LDR      r1,[r0,#0x20]         ;1081
00002c  4311              ORRS     r1,r1,r2              ;1081
00002e  6201              STR      r1,[r0,#0x20]         ;1081
000030  4770              BX       lr
                  |L22.50|
000032  6a01              LDR      r1,[r0,#0x20]         ;1085
000034  f0210120          BIC      r1,r1,#0x20           ;1085
000038  6201              STR      r1,[r0,#0x20]         ;1085
00003a  6a01              LDR      r1,[r0,#0x20]         ;1086
00003c  ea411102          ORR      r1,r1,r2,LSL #4       ;1086
000040  6201              STR      r1,[r0,#0x20]         ;1086
000042  4770              BX       lr
                  |L22.68|
000044  6a01              LDR      r1,[r0,#0x20]         ;1090
000046  f4217100          BIC      r1,r1,#0x200          ;1090
00004a  6201              STR      r1,[r0,#0x20]         ;1090
00004c  6a01              LDR      r1,[r0,#0x20]         ;1091
00004e  ea412102          ORR      r1,r1,r2,LSL #8       ;1091
000052  6201              STR      r1,[r0,#0x20]         ;1091
000054  4770              BX       lr
;;;1102   
                          ENDP


                          AREA ||i.timer_channel_output_pulse_value_config||, CODE, READONLY, ALIGN=1

                  timer_channel_output_pulse_value_config PROC
;;;902    */
;;;903    void timer_channel_output_pulse_value_config(uint32_t timer_periph, uint16_t channel, uint16_t pulse)
000000  2900              CMP      r1,#0
;;;904    {
000002  d007              BEQ      |L23.20|
;;;905        switch(channel){
000004  2901              CMP      r1,#1
000006  d007              BEQ      |L23.24|
000008  2902              CMP      r1,#2
00000a  d007              BEQ      |L23.28|
00000c  2903              CMP      r1,#3
00000e  d100              BNE      |L23.18|
;;;906        /* configure TIMER_CH_0 */
;;;907        case TIMER_CH_0:
;;;908            TIMER_CH0CV(timer_periph) = (uint32_t)pulse;
;;;909            break;
;;;910        /* configure TIMER_CH_1 */
;;;911        case TIMER_CH_1:
;;;912            TIMER_CH1CV(timer_periph) = (uint32_t)pulse;
;;;913            break;
;;;914        /* configure TIMER_CH_2 */
;;;915        case TIMER_CH_2:
;;;916            TIMER_CH2CV(timer_periph) = (uint32_t)pulse;
;;;917            break;
;;;918        /* configure TIMER_CH_3 */
;;;919        case TIMER_CH_3:
;;;920             TIMER_CH3CV(timer_periph) = (uint32_t)pulse;
000010  6402              STR      r2,[r0,#0x40]
                  |L23.18|
;;;921            break;
;;;922        default:
;;;923            break;
;;;924        }
;;;925    }
000012  4770              BX       lr
                  |L23.20|
000014  6342              STR      r2,[r0,#0x34]         ;908
000016  4770              BX       lr
                  |L23.24|
000018  6382              STR      r2,[r0,#0x38]         ;912
00001a  4770              BX       lr
                  |L23.28|
00001c  63c2              STR      r2,[r0,#0x3c]         ;916
00001e  4770              BX       lr
;;;926    
                          ENDP


                          AREA ||i.timer_channel_output_shadow_config||, CODE, READONLY, ALIGN=1

                  timer_channel_output_shadow_config PROC
;;;942    */
;;;943    void timer_channel_output_shadow_config(uint32_t timer_periph, uint16_t channel, uint16_t ocshadow)
000000  2900              CMP      r1,#0
;;;944    {
000002  d00e              BEQ      |L24.34|
;;;945        switch(channel){
000004  2901              CMP      r1,#1
000006  d014              BEQ      |L24.50|
000008  2902              CMP      r1,#2
00000a  d01b              BEQ      |L24.68|
00000c  2903              CMP      r1,#3
00000e  d107              BNE      |L24.32|
;;;946        /* configure TIMER_CH_0 */
;;;947        case TIMER_CH_0:
;;;948            TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMSEN);
;;;949            TIMER_CHCTL0(timer_periph) |= (uint32_t)ocshadow;
;;;950            break;
;;;951        /* configure TIMER_CH_1 */
;;;952        case TIMER_CH_1:
;;;953            TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
;;;954            TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
;;;955            break;
;;;956        /* configure TIMER_CH_2 */
;;;957        case TIMER_CH_2:
;;;958            TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMSEN);
;;;959            TIMER_CHCTL1(timer_periph) |= (uint32_t)ocshadow;
;;;960            break;
;;;961        /* configure TIMER_CH_3 */
;;;962        case TIMER_CH_3:
;;;963            TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
000010  69c1              LDR      r1,[r0,#0x1c]
000012  f4216100          BIC      r1,r1,#0x800
000016  61c1              STR      r1,[r0,#0x1c]
;;;964            TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
000018  69c1              LDR      r1,[r0,#0x1c]
00001a  ea412102          ORR      r1,r1,r2,LSL #8
00001e  61c1              STR      r1,[r0,#0x1c]
                  |L24.32|
;;;965            break;
;;;966        default:
;;;967            break;
;;;968        }
;;;969    }
000020  4770              BX       lr
                  |L24.34|
000022  6981              LDR      r1,[r0,#0x18]         ;948
000024  f0210108          BIC      r1,r1,#8              ;948
000028  6181              STR      r1,[r0,#0x18]         ;948
00002a  6981              LDR      r1,[r0,#0x18]         ;949
00002c  4311              ORRS     r1,r1,r2              ;949
00002e  6181              STR      r1,[r0,#0x18]         ;949
000030  4770              BX       lr
                  |L24.50|
000032  6981              LDR      r1,[r0,#0x18]         ;953
000034  f4216100          BIC      r1,r1,#0x800          ;953
000038  6181              STR      r1,[r0,#0x18]         ;953
00003a  6981              LDR      r1,[r0,#0x18]         ;954
00003c  ea412102          ORR      r1,r1,r2,LSL #8       ;954
000040  6181              STR      r1,[r0,#0x18]         ;954
000042  4770              BX       lr
                  |L24.68|
000044  69c1              LDR      r1,[r0,#0x1c]         ;958
000046  f0210108          BIC      r1,r1,#8              ;958
00004a  61c1              STR      r1,[r0,#0x1c]         ;958
00004c  69c1              LDR      r1,[r0,#0x1c]         ;959
00004e  4311              ORRS     r1,r1,r2              ;959
000050  61c1              STR      r1,[r0,#0x1c]         ;959
000052  4770              BX       lr
;;;970    
                          ENDP


                          AREA ||i.timer_channel_output_state_config||, CODE, READONLY, ALIGN=1

                  timer_channel_output_state_config PROC
;;;1156   */
;;;1157   void timer_channel_output_state_config(uint32_t timer_periph, uint16_t channel, uint32_t state)
000000  2900              CMP      r1,#0
;;;1158   {
000002  d00e              BEQ      |L25.34|
;;;1159       switch(channel){
000004  2901              CMP      r1,#1
000006  d014              BEQ      |L25.50|
000008  2902              CMP      r1,#2
00000a  d01b              BEQ      |L25.68|
00000c  2903              CMP      r1,#3
00000e  d107              BNE      |L25.32|
;;;1160       /* configure TIMER_CH_0 */
;;;1161       case TIMER_CH_0:
;;;1162           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
;;;1163           TIMER_CHCTL2(timer_periph) |= (uint32_t)state;
;;;1164           break;
;;;1165       /* configure TIMER_CH_1 */
;;;1166       case TIMER_CH_1:
;;;1167           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
;;;1168           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)state << 4U);
;;;1169           break;
;;;1170       /* configure TIMER_CH_2 */
;;;1171       case TIMER_CH_2:
;;;1172           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2EN);
;;;1173           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)state << 8U);
;;;1174           break;
;;;1175       /* configure TIMER_CH_3 */
;;;1176       case TIMER_CH_3:
;;;1177           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH3EN);
000010  6a01              LDR      r1,[r0,#0x20]
000012  f4215180          BIC      r1,r1,#0x1000
000016  6201              STR      r1,[r0,#0x20]
;;;1178           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)state << 12U);
000018  6a01              LDR      r1,[r0,#0x20]
00001a  ea413102          ORR      r1,r1,r2,LSL #12
00001e  6201              STR      r1,[r0,#0x20]
                  |L25.32|
;;;1179           break;
;;;1180       default:
;;;1181           break;
;;;1182       }
;;;1183   }
000020  4770              BX       lr
                  |L25.34|
000022  6a01              LDR      r1,[r0,#0x20]         ;1162
000024  f0210101          BIC      r1,r1,#1              ;1162
000028  6201              STR      r1,[r0,#0x20]         ;1162
00002a  6a01              LDR      r1,[r0,#0x20]         ;1163
00002c  4311              ORRS     r1,r1,r2              ;1163
00002e  6201              STR      r1,[r0,#0x20]         ;1163
000030  4770              BX       lr
                  |L25.50|
000032  6a01              LDR      r1,[r0,#0x20]         ;1167
000034  f0210110          BIC      r1,r1,#0x10           ;1167
000038  6201              STR      r1,[r0,#0x20]         ;1167
00003a  6a01              LDR      r1,[r0,#0x20]         ;1168
00003c  ea411102          ORR      r1,r1,r2,LSL #4       ;1168
000040  6201              STR      r1,[r0,#0x20]         ;1168
000042  4770              BX       lr
                  |L25.68|
000044  6a01              LDR      r1,[r0,#0x20]         ;1172
000046  f4217180          BIC      r1,r1,#0x100          ;1172
00004a  6201              STR      r1,[r0,#0x20]         ;1172
00004c  6a01              LDR      r1,[r0,#0x20]         ;1173
00004e  ea412102          ORR      r1,r1,r2,LSL #8       ;1173
000052  6201              STR      r1,[r0,#0x20]         ;1173
000054  4770              BX       lr
;;;1184   
                          ENDP


                          AREA ||i.timer_channel_output_struct_para_init||, CODE, READONLY, ALIGN=1

                  timer_channel_output_struct_para_init PROC
;;;689    */
;;;690    void timer_channel_output_struct_para_init(timer_oc_parameter_struct* ocpara)
000000  2100              MOVS     r1,#0
;;;691    {
;;;692        /* initialize the channel output parameter struct member with the default value */
;;;693        ocpara->outputstate  = TIMER_CCX_DISABLE;
000002  8001              STRH     r1,[r0,#0]
;;;694        ocpara->outputnstate = TIMER_CCXN_DISABLE;
000004  8041              STRH     r1,[r0,#2]
;;;695        ocpara->ocpolarity   = TIMER_OC_POLARITY_HIGH;
000006  8081              STRH     r1,[r0,#4]
;;;696        ocpara->ocnpolarity  = TIMER_OCN_POLARITY_HIGH;
000008  80c1              STRH     r1,[r0,#6]
;;;697        ocpara->ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
00000a  8101              STRH     r1,[r0,#8]
;;;698        ocpara->ocnidlestate = TIMER_OCN_IDLE_STATE_LOW;
00000c  8141              STRH     r1,[r0,#0xa]
;;;699    }
00000e  4770              BX       lr
;;;700    
                          ENDP


                          AREA ||i.timer_counter_alignment||, CODE, READONLY, ALIGN=1

                  timer_counter_alignment PROC
;;;272    */
;;;273    void timer_counter_alignment(uint32_t timer_periph, uint16_t aligned)
000000  6802              LDR      r2,[r0,#0]
;;;274    {
;;;275        TIMER_CTL0(timer_periph) &= ~(uint32_t)TIMER_CTL0_CAM;
000002  f0220260          BIC      r2,r2,#0x60
000006  6002              STR      r2,[r0,#0]
;;;276        TIMER_CTL0(timer_periph) |= (uint32_t)aligned;
000008  6802              LDR      r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  6002              STR      r2,[r0,#0]
;;;277    }
00000e  4770              BX       lr
;;;278    
                          ENDP


                          AREA ||i.timer_counter_down_direction||, CODE, READONLY, ALIGN=1

                  timer_counter_down_direction PROC
;;;295    */
;;;296    void timer_counter_down_direction(uint32_t timer_periph)
000000  6801              LDR      r1,[r0,#0]
;;;297    {
;;;298        TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_DIR;
000002  f0410110          ORR      r1,r1,#0x10
000006  6001              STR      r1,[r0,#0]
;;;299    }
000008  4770              BX       lr
;;;300    
                          ENDP


                          AREA ||i.timer_counter_read||, CODE, READONLY, ALIGN=1

                  timer_counter_read PROC
;;;362    */         
;;;363    uint32_t timer_counter_read(uint32_t timer_periph)
000000  6a40              LDR      r0,[r0,#0x24]
;;;364    {
;;;365        uint32_t count_value = 0U;
;;;366        count_value = TIMER_CNT(timer_periph);
;;;367        return (count_value);
;;;368    }
000002  4770              BX       lr
;;;369    
                          ENDP


                          AREA ||i.timer_counter_up_direction||, CODE, READONLY, ALIGN=1

                  timer_counter_up_direction PROC
;;;284    */
;;;285    void timer_counter_up_direction(uint32_t timer_periph)
000000  6801              LDR      r1,[r0,#0]
;;;286    {
;;;287        TIMER_CTL0(timer_periph) &= ~(uint32_t)TIMER_CTL0_DIR;
000002  f0210110          BIC      r1,r1,#0x10
000006  6001              STR      r1,[r0,#0]
;;;288    }
000008  4770              BX       lr
;;;289    
                          ENDP


                          AREA ||i.timer_counter_value_config||, CODE, READONLY, ALIGN=1

                  timer_counter_value_config PROC
;;;351    */         
;;;352    void timer_counter_value_config(uint32_t timer_periph, uint32_t counter)
000000  6241              STR      r1,[r0,#0x24]
;;;353    {
;;;354        TIMER_CNT(timer_periph) = (uint32_t)counter;
;;;355    }
000002  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.timer_deinit||, CODE, READONLY, ALIGN=2

                  timer_deinit PROC
;;;51     */
;;;52     void timer_deinit(uint32_t timer_periph)
000000  b510              PUSH     {r4,lr}
;;;53     {
;;;54         switch(timer_periph){
000002  4a5e              LDR      r2,|L32.380|
000004  1a81              SUBS     r1,r0,r2
000006  1514              ASRS     r4,r2,#20
000008  4290              CMP      r0,r2
00000a  d07d              BEQ      |L32.264|
00000c  dc29              BGT      |L32.98|
00000e  4a5c              LDR      r2,|L32.384|
000010  eba00102          SUB      r1,r0,r2
000014  4290              CMP      r0,r2
000016  d066              BEQ      |L32.230|
000018  dc11              BGT      |L32.62|
00001a  f1b04f80          CMP      r0,#0x40000000
00001e  d050              BEQ      |L32.194|
000020  4958              LDR      r1,|L32.388|
000022  1840              ADDS     r0,r0,r1
000024  d055              BEQ      |L32.210|
000026  42a0              CMP      r0,r4
000028  d16f              BNE      |L32.266|
;;;55         case TIMER0:
;;;56             /* reset TIMER0 */
;;;57             rcu_periph_reset_enable(RCU_TIMER0RST);
;;;58             rcu_periph_reset_disable(RCU_TIMER0RST);
;;;59             break;
;;;60         case TIMER1:
;;;61             /* reset TIMER1 */
;;;62             rcu_periph_reset_enable(RCU_TIMER1RST);
;;;63             rcu_periph_reset_disable(RCU_TIMER1RST);
;;;64             break;
;;;65         case TIMER2:
;;;66             /* reset TIMER2 */
;;;67             rcu_periph_reset_enable(RCU_TIMER2RST);
;;;68             rcu_periph_reset_disable(RCU_TIMER2RST);
;;;69             break;
;;;70         case TIMER3:
;;;71             /* reset TIMER3 */
;;;72             rcu_periph_reset_enable(RCU_TIMER3RST);
00002a  f2404402          MOV      r4,#0x402
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       rcu_periph_reset_enable
;;;73             rcu_periph_reset_disable(RCU_TIMER3RST);
000034  4620              MOV      r0,r4
000036  e8bd4010          POP      {r4,lr}
00003a  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.62|
00003e  42a1              CMP      r1,r4                 ;54
000040  d05b              BEQ      |L32.250|
000042  f5b16f00          CMP      r1,#0x800             ;54
000046  d065              BEQ      |L32.276|
000048  f5b16f40          CMP      r1,#0xc00             ;54
00004c  d15d              BNE      |L32.266|
;;;74             break;
;;;75         case TIMER4:
;;;76             /* reset TIMER4 */
;;;77             rcu_periph_reset_enable(RCU_TIMER4RST);
;;;78             rcu_periph_reset_disable(RCU_TIMER4RST);
;;;79             break;
;;;80         case TIMER5:
;;;81             /* reset TIMER5 */
;;;82             rcu_periph_reset_enable(RCU_TIMER5RST);
;;;83             rcu_periph_reset_disable(RCU_TIMER5RST);
;;;84             break;
;;;85         case TIMER6:
;;;86             /* reset TIMER6 */
;;;87             rcu_periph_reset_enable(RCU_TIMER6RST);
;;;88             rcu_periph_reset_disable(RCU_TIMER6RST);
;;;89             break;
;;;90         case TIMER7:
;;;91             /* reset TIMER7 */
;;;92             rcu_periph_reset_enable(RCU_TIMER7RST);
;;;93             rcu_periph_reset_disable(RCU_TIMER7RST);
;;;94             break;
;;;95     #ifdef GD32F10X_XD
;;;96         case TIMER8:
;;;97             /* reset TIMER8 */
;;;98             rcu_periph_reset_enable(RCU_TIMER8RST);
;;;99             rcu_periph_reset_disable(RCU_TIMER8RST);
;;;100            break;
;;;101        case TIMER9:
;;;102            /* reset TIMER9 */
;;;103            rcu_periph_reset_enable(RCU_TIMER9RST);
;;;104            rcu_periph_reset_disable(RCU_TIMER9RST);
;;;105            break;
;;;106        case TIMER10:
;;;107            /* reset TIMER10 */
;;;108            rcu_periph_reset_enable(RCU_TIMER10RST);
;;;109            rcu_periph_reset_disable(RCU_TIMER10RST);
;;;110            break;
;;;111        case TIMER11:
;;;112            /* reset TIMER11 */
;;;113            rcu_periph_reset_enable(RCU_TIMER11RST);
00004e  f2404406          MOV      r4,#0x406
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       rcu_periph_reset_enable
;;;114            rcu_periph_reset_disable(RCU_TIMER11RST);
000058  4620              MOV      r0,r4
00005a  e8bd4010          POP      {r4,lr}
00005e  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.98|
000062  f5b13f98          CMP      r1,#0x13000           ;54
000066  d05f              BEQ      |L32.296|
000068  dc11              BGT      |L32.142|
00006a  42a1              CMP      r1,r4                 ;54
00006c  d07a              BEQ      |L32.356|
00006e  f5b13f88          CMP      r1,#0x11000           ;54
000072  d01c              BEQ      |L32.174|
000074  f5b13f8c          CMP      r1,#0x11800           ;54
000078  d17e              BNE      |L32.376|
00007a  f240340d          MOV      r4,#0x30d             ;92
00007e  4620              MOV      r0,r4                 ;92
000080  f7fffffe          BL       rcu_periph_reset_enable
000084  4620              MOV      r0,r4                 ;93
000086  e8bd4010          POP      {r4,lr}               ;93
00008a  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.142|
00008e  f5b13f9a          CMP      r1,#0x13400           ;54
000092  d053              BEQ      |L32.316|
000094  f5b13f9c          CMP      r1,#0x13800           ;54
000098  d16e              BNE      |L32.376|
00009a  f2403415          MOV      r4,#0x315             ;108
00009e  4620              MOV      r0,r4                 ;108
0000a0  f7fffffe          BL       rcu_periph_reset_enable
0000a4  4620              MOV      r0,r4                 ;109
0000a6  e8bd4010          POP      {r4,lr}               ;109
0000aa  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.174|
0000ae  f240340b          MOV      r4,#0x30b             ;57
0000b2  4620              MOV      r0,r4                 ;57
0000b4  f7fffffe          BL       rcu_periph_reset_enable
0000b8  4620              MOV      r0,r4                 ;58
0000ba  e8bd4010          POP      {r4,lr}               ;58
0000be  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.194|
0000c2  4620              MOV      r0,r4                 ;62
0000c4  f7fffffe          BL       rcu_periph_reset_enable
0000c8  4620              MOV      r0,r4                 ;63
0000ca  e8bd4010          POP      {r4,lr}               ;63
0000ce  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.210|
0000d2  f2404401          MOV      r4,#0x401             ;67
0000d6  4620              MOV      r0,r4                 ;67
0000d8  f7fffffe          BL       rcu_periph_reset_enable
0000dc  4620              MOV      r0,r4                 ;68
0000de  e8bd4010          POP      {r4,lr}               ;68
0000e2  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.230|
0000e6  f2404403          MOV      r4,#0x403             ;77
0000ea  4620              MOV      r0,r4                 ;77
0000ec  f7fffffe          BL       rcu_periph_reset_enable
0000f0  4620              MOV      r0,r4                 ;78
0000f2  e8bd4010          POP      {r4,lr}               ;78
0000f6  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.250|
0000fa  f2404404          MOV      r4,#0x404             ;82
0000fe  4620              MOV      r0,r4                 ;82
000100  f7fffffe          BL       rcu_periph_reset_enable
000104  4620              MOV      r0,r4                 ;83
000106  e001              B        |L32.268|
                  |L32.264|
000108  e022              B        |L32.336|
                  |L32.266|
00010a  e035              B        |L32.376|
                  |L32.268|
00010c  e8bd4010          POP      {r4,lr}               ;83
000110  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.276|
000114  f2404405          MOV      r4,#0x405             ;87
000118  4620              MOV      r0,r4                 ;87
00011a  f7fffffe          BL       rcu_periph_reset_enable
00011e  4620              MOV      r0,r4                 ;88
000120  e8bd4010          POP      {r4,lr}               ;88
000124  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.296|
000128  f2403413          MOV      r4,#0x313             ;98
00012c  4620              MOV      r0,r4                 ;98
00012e  f7fffffe          BL       rcu_periph_reset_enable
000132  4620              MOV      r0,r4                 ;99
000134  e8bd4010          POP      {r4,lr}               ;99
000138  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.316|
00013c  f44f7445          MOV      r4,#0x314             ;103
000140  4620              MOV      r0,r4                 ;103
000142  f7fffffe          BL       rcu_periph_reset_enable
000146  4620              MOV      r0,r4                 ;104
000148  e8bd4010          POP      {r4,lr}               ;104
00014c  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.336|
;;;115            break;
;;;116        case TIMER12:
;;;117            /* reset TIMER12 */
;;;118            rcu_periph_reset_enable(RCU_TIMER12RST);
000150  f2404407          MOV      r4,#0x407
000154  4620              MOV      r0,r4
000156  f7fffffe          BL       rcu_periph_reset_enable
;;;119            rcu_periph_reset_disable(RCU_TIMER12RST);
00015a  4620              MOV      r0,r4
00015c  e8bd4010          POP      {r4,lr}
000160  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.356|
;;;120            break;
;;;121        case TIMER13:
;;;122            /* reset TIMER13 */
;;;123            rcu_periph_reset_enable(RCU_TIMER13RST);
000164  f44f6481          MOV      r4,#0x408
000168  4620              MOV      r0,r4
00016a  f7fffffe          BL       rcu_periph_reset_enable
;;;124            rcu_periph_reset_disable(RCU_TIMER13RST);
00016e  4620              MOV      r0,r4
000170  e8bd4010          POP      {r4,lr}
000174  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L32.376|
;;;125            break;
;;;126    #endif /* GD32F10X_XD */
;;;127        default:
;;;128            break;
;;;129        }
;;;130    }
000178  bd10              POP      {r4,pc}
;;;131    
                          ENDP

00017a  0000              DCW      0x0000
                  |L32.380|
                          DCD      0x40001c00
                  |L32.384|
                          DCD      0x40000c00
                  |L32.388|
                          DCD      0xbffffc00

                          AREA ||i.timer_disable||, CODE, READONLY, ALIGN=1

                  timer_disable PROC
;;;211    */
;;;212    void timer_disable(uint32_t timer_periph)
000000  6801              LDR      r1,[r0,#0]
;;;213    {
;;;214        TIMER_CTL0(timer_periph) &= ~(uint32_t)TIMER_CTL0_CEN;
000002  f0210101          BIC      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;215    }
000008  4770              BX       lr
;;;216    
                          ENDP


                          AREA ||i.timer_dma_disable||, CODE, READONLY, ALIGN=1

                  timer_dma_disable PROC
;;;460    */
;;;461    void timer_dma_disable(uint32_t timer_periph, uint16_t dma)
000000  68c2              LDR      r2,[r0,#0xc]
;;;462    {
;;;463        TIMER_DMAINTEN(timer_periph) &= (~(uint32_t)(dma)); 
000002  438a              BICS     r2,r2,r1
000004  60c2              STR      r2,[r0,#0xc]
;;;464    }
000006  4770              BX       lr
;;;465    
                          ENDP


                          AREA ||i.timer_dma_enable||, CODE, READONLY, ALIGN=1

                  timer_dma_enable PROC
;;;440    */
;;;441    void timer_dma_enable(uint32_t timer_periph, uint16_t dma)
000000  68c2              LDR      r2,[r0,#0xc]
;;;442    {
;;;443        TIMER_DMAINTEN(timer_periph) |= (uint32_t) dma; 
000002  430a              ORRS     r2,r2,r1
000004  60c2              STR      r2,[r0,#0xc]
;;;444    }
000006  4770              BX       lr
;;;445    
                          ENDP


                          AREA ||i.timer_dma_transfer_config||, CODE, READONLY, ALIGN=1

                  timer_dma_transfer_config PROC
;;;516    */
;;;517    void timer_dma_transfer_config(uint32_t timer_periph, uint32_t dma_baseaddr, uint32_t dma_lenth)
000000  b510              PUSH     {r4,lr}
;;;518    {
;;;519        TIMER_DMACFG(timer_periph) &= (~(uint32_t)(TIMER_DMACFG_DMATA | TIMER_DMACFG_DMATC));
000002  6c83              LDR      r3,[r0,#0x48]
000004  f641741f          MOV      r4,#0x1f1f
000008  43a3              BICS     r3,r3,r4
00000a  6483              STR      r3,[r0,#0x48]
;;;520        TIMER_DMACFG(timer_periph) |= (uint32_t)(dma_baseaddr | dma_lenth);
00000c  6c83              LDR      r3,[r0,#0x48]
00000e  4311              ORRS     r1,r1,r2
000010  430b              ORRS     r3,r3,r1
000012  6483              STR      r3,[r0,#0x48]
;;;521    }
000014  bd10              POP      {r4,pc}
;;;522    
                          ENDP


                          AREA ||i.timer_enable||, CODE, READONLY, ALIGN=1

                  timer_enable PROC
;;;200    */
;;;201    void timer_enable(uint32_t timer_periph)
000000  6801              LDR      r1,[r0,#0]
;;;202    {
;;;203        TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_CEN;
000002  f0410101          ORR      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;204    }
000008  4770              BX       lr
;;;205    
                          ENDP


                          AREA ||i.timer_event_software_generate||, CODE, READONLY, ALIGN=1

                  timer_event_software_generate PROC
;;;538    */
;;;539    void timer_event_software_generate(uint32_t timer_periph, uint16_t event)
000000  6942              LDR      r2,[r0,#0x14]
;;;540    {
;;;541        TIMER_SWEVG(timer_periph) |= (uint32_t)event;
000002  430a              ORRS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;542    }
000006  4770              BX       lr
;;;543    
                          ENDP


                          AREA ||i.timer_external_clock_mode0_config||, CODE, READONLY, ALIGN=1

                  timer_external_clock_mode0_config PROC
;;;1816   */
;;;1817   void timer_external_clock_mode0_config(uint32_t timer_periph, uint32_t extprescaler, uint32_t extpolarity, uint8_t extfilter)
000000  b510              PUSH     {r4,lr}
;;;1818   {
000002  4604              MOV      r4,r0
;;;1819       /* configure TIMER external trigger input */
;;;1820       timer_external_trigger_config(timer_periph, extprescaler, extpolarity, extfilter);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       timer_external_trigger_config
;;;1821       /* reset the SMC bit,TRGS bit */
;;;1822       TIMER_SMCFG(timer_periph) &= (~(uint32_t)(TIMER_SMCFG_SMC | TIMER_SMCFG_TRGS));
00000a  68a0              LDR      r0,[r4,#8]
00000c  f0200077          BIC      r0,r0,#0x77
000010  60a0              STR      r0,[r4,#8]
;;;1823       /* set the SMC bit,TRGS bit */
;;;1824       TIMER_SMCFG(timer_periph) |= (uint32_t)(TIMER_SLAVE_MODE_EXTERNAL0 | TIMER_SMCFG_TRGSEL_ETIFP);
000012  68a0              LDR      r0,[r4,#8]
000014  f0400077          ORR      r0,r0,#0x77
000018  60a0              STR      r0,[r4,#8]
;;;1825   }
00001a  bd10              POP      {r4,pc}
;;;1826   
                          ENDP


                          AREA ||i.timer_external_clock_mode1_config||, CODE, READONLY, ALIGN=1

                  timer_external_clock_mode1_config PROC
;;;1843   */
;;;1844   void timer_external_clock_mode1_config(uint32_t timer_periph, uint32_t extprescaler, uint32_t extpolarity, uint8_t extfilter)
000000  b510              PUSH     {r4,lr}
;;;1845   {
000002  4604              MOV      r4,r0
;;;1846       /* configure TIMER external trigger input */
;;;1847       timer_external_trigger_config(timer_periph, extprescaler, extpolarity, extfilter);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       timer_external_trigger_config
;;;1848       TIMER_SMCFG(timer_periph) |= (uint32_t)TIMER_SMCFG_SMC1;
00000a  68a0              LDR      r0,[r4,#8]
00000c  f4404080          ORR      r0,r0,#0x4000
000010  60a0              STR      r0,[r4,#8]
;;;1849   }
000012  bd10              POP      {r4,pc}
;;;1850   
                          ENDP


                          AREA ||i.timer_external_clock_mode1_disable||, CODE, READONLY, ALIGN=1

                  timer_external_clock_mode1_disable PROC
;;;1856   */
;;;1857   void timer_external_clock_mode1_disable(uint32_t timer_periph)
000000  6881              LDR      r1,[r0,#8]
;;;1858   {
;;;1859       TIMER_SMCFG(timer_periph) &= ~(uint32_t)TIMER_SMCFG_SMC1;
000002  f4214180          BIC      r1,r1,#0x4000
000006  6081              STR      r1,[r0,#8]
;;;1860   }
000008  4770              BX       lr
;;;1861   
                          ENDP


                          AREA ||i.timer_external_trigger_as_external_clock_config||, CODE, READONLY, ALIGN=1

                  timer_external_trigger_as_external_clock_config PROC
;;;1754   */
;;;1755   void timer_external_trigger_as_external_clock_config(uint32_t timer_periph, uint32_t extrigger, uint16_t extpolarity, uint8_t extfilter)
000000  b510              PUSH     {r4,lr}
;;;1756   {
000002  4604              MOV      r4,r0
;;;1757       if(TIMER_SMCFG_TRGSEL_CI1FE1 == extrigger){
000004  2960              CMP      r1,#0x60
000006  d02a              BEQ      |L42.94|
;;;1758           /* reset the CH1EN bit */
;;;1759           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
;;;1760           /* reset the CH1NP bit */
;;;1761           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH1P|TIMER_CHCTL2_CH1NP));
;;;1762           /* set the CH1NP bit */
;;;1763           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)extpolarity << 4U);
;;;1764           /* reset the CH1MS bit */
;;;1765           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1MS);
;;;1766           /* set the CH1MS bit */
;;;1767           TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)TIMER_IC_SELECTION_DIRECTTI<< 8U);
;;;1768           /* reset the CH1CAPFLT bit */
;;;1769           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1CAPFLT);
;;;1770           /* set the CH1CAPFLT bit */
;;;1771           TIMER_CHCTL0(timer_periph) |= (uint32_t)(extfilter << 12U);
;;;1772           /* set the CH1EN bit */
;;;1773           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH1EN;
;;;1774       }else{
;;;1775           /* reset the CH0EN bit */
;;;1776           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
000008  6a20              LDR      r0,[r4,#0x20]
00000a  f0200001          BIC      r0,r0,#1
00000e  6220              STR      r0,[r4,#0x20]
;;;1777           /* reset the CH0P and CH0NP bits */
;;;1778           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH0P|TIMER_CHCTL2_CH0NP));
000010  6a20              LDR      r0,[r4,#0x20]
000012  f020000a          BIC      r0,r0,#0xa
000016  6220              STR      r0,[r4,#0x20]
;;;1779           /* set the CH0P and CH0NP bits */
;;;1780           TIMER_CHCTL2(timer_periph) |= (uint32_t)extpolarity;
000018  6a20              LDR      r0,[r4,#0x20]
00001a  4310              ORRS     r0,r0,r2
00001c  6220              STR      r0,[r4,#0x20]
;;;1781           /* reset the CH0MS bit */
;;;1782           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0MS);
00001e  69a0              LDR      r0,[r4,#0x18]
000020  f0200003          BIC      r0,r0,#3
000024  61a0              STR      r0,[r4,#0x18]
;;;1783           /* set the CH0MS bit */
;;;1784           TIMER_CHCTL0(timer_periph) |= (uint32_t)TIMER_IC_SELECTION_DIRECTTI;
000026  69a0              LDR      r0,[r4,#0x18]
000028  f0400001          ORR      r0,r0,#1
00002c  61a0              STR      r0,[r4,#0x18]
;;;1785           /* reset the CH0CAPFLT bit */
;;;1786           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0CAPFLT);
00002e  69a0              LDR      r0,[r4,#0x18]
000030  f02000f0          BIC      r0,r0,#0xf0
000034  61a0              STR      r0,[r4,#0x18]
;;;1787           /* reset the CH0CAPFLT bit */
;;;1788           TIMER_CHCTL0(timer_periph) |= (uint32_t)(extfilter << 4U);
000036  69a0              LDR      r0,[r4,#0x18]
000038  ea401003          ORR      r0,r0,r3,LSL #4
00003c  61a0              STR      r0,[r4,#0x18]
;;;1789           /* set the CH0EN bit */
;;;1790           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH0EN;
00003e  6a20              LDR      r0,[r4,#0x20]
000040  f0400001          ORR      r0,r0,#1
000044  6220              STR      r0,[r4,#0x20]
                  |L42.70|
;;;1791       }
;;;1792       /* select TIMER input trigger source */
;;;1793       timer_input_trigger_source_select(timer_periph,extrigger);
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       timer_input_trigger_source_select
;;;1794       /* reset the SMC bit */
;;;1795       TIMER_SMCFG(timer_periph) &= (~(uint32_t)TIMER_SMCFG_SMC);
00004c  68a0              LDR      r0,[r4,#8]
00004e  f0200007          BIC      r0,r0,#7
000052  60a0              STR      r0,[r4,#8]
;;;1796       /* set the SMC bit */
;;;1797       TIMER_SMCFG(timer_periph) |= (uint32_t)TIMER_SLAVE_MODE_EXTERNAL0;
000054  68a0              LDR      r0,[r4,#8]
000056  f0400007          ORR      r0,r0,#7
00005a  60a0              STR      r0,[r4,#8]
;;;1798   }
00005c  bd10              POP      {r4,pc}
                  |L42.94|
00005e  6a20              LDR      r0,[r4,#0x20]         ;1759
000060  f0200010          BIC      r0,r0,#0x10           ;1759
000064  6220              STR      r0,[r4,#0x20]         ;1759
000066  6a20              LDR      r0,[r4,#0x20]         ;1761
000068  f02000a0          BIC      r0,r0,#0xa0           ;1761
00006c  6220              STR      r0,[r4,#0x20]         ;1761
00006e  6a20              LDR      r0,[r4,#0x20]         ;1763
000070  ea401002          ORR      r0,r0,r2,LSL #4       ;1763
000074  6220              STR      r0,[r4,#0x20]         ;1763
000076  69a0              LDR      r0,[r4,#0x18]         ;1765
000078  f4207040          BIC      r0,r0,#0x300          ;1765
00007c  61a0              STR      r0,[r4,#0x18]         ;1765
00007e  69a0              LDR      r0,[r4,#0x18]         ;1767
000080  f4407080          ORR      r0,r0,#0x100          ;1767
000084  61a0              STR      r0,[r4,#0x18]         ;1767
000086  69a0              LDR      r0,[r4,#0x18]         ;1769
000088  f4204070          BIC      r0,r0,#0xf000         ;1769
00008c  61a0              STR      r0,[r4,#0x18]         ;1769
00008e  69a0              LDR      r0,[r4,#0x18]         ;1771
000090  ea403003          ORR      r0,r0,r3,LSL #12      ;1771
000094  61a0              STR      r0,[r4,#0x18]         ;1771
000096  6a20              LDR      r0,[r4,#0x20]         ;1773
000098  f0400010          ORR      r0,r0,#0x10           ;1773
00009c  6220              STR      r0,[r4,#0x20]         ;1773
00009e  e7d2              B        |L42.70|
;;;1799   
                          ENDP


                          AREA ||i.timer_external_trigger_config||, CODE, READONLY, ALIGN=1

                  timer_external_trigger_config PROC
;;;1668   */
;;;1669   void timer_external_trigger_config(uint32_t timer_periph, uint32_t extprescaler, uint32_t extpolarity, uint8_t extfilter)
000000  b510              PUSH     {r4,lr}
;;;1670   {
;;;1671       TIMER_SMCFG(timer_periph) &= (~(uint32_t)(TIMER_SMCFG_ETP | TIMER_SMCFG_ETPSC | TIMER_SMCFG_ETFC));
000002  6884              LDR      r4,[r0,#8]
000004  f424443f          BIC      r4,r4,#0xbf00
000008  6084              STR      r4,[r0,#8]
;;;1672       TIMER_SMCFG(timer_periph) |= (uint32_t)(extprescaler | extpolarity);
00000a  6884              LDR      r4,[r0,#8]
00000c  4311              ORRS     r1,r1,r2
00000e  430c              ORRS     r4,r4,r1
000010  6084              STR      r4,[r0,#8]
;;;1673       TIMER_SMCFG(timer_periph) |= (uint32_t)(extfilter << 8U);
000012  6881              LDR      r1,[r0,#8]
000014  ea412103          ORR      r1,r1,r3,LSL #8
000018  6081              STR      r1,[r0,#8]
;;;1674   }
00001a  bd10              POP      {r4,pc}
;;;1675   
                          ENDP


                          AREA ||i.timer_flag_clear||, CODE, READONLY, ALIGN=1

                  timer_flag_clear PROC
;;;2000   */
;;;2001   void timer_flag_clear(uint32_t timer_periph, uint32_t flag)
000000  43c9              MVNS     r1,r1
;;;2002   {
;;;2003       TIMER_INTF(timer_periph) = (~(uint32_t)flag);
000002  6101              STR      r1,[r0,#0x10]
;;;2004   }
000004  4770              BX       lr
                          ENDP


                          AREA ||i.timer_flag_get||, CODE, READONLY, ALIGN=1

                  timer_flag_get PROC
;;;1971   */
;;;1972   FlagStatus timer_flag_get(uint32_t timer_periph, uint32_t flag)
000000  6900              LDR      r0,[r0,#0x10]
;;;1973   {
;;;1974       if(RESET != (TIMER_INTF(timer_periph) & flag)){
000002  4208              TST      r0,r1
000004  d001              BEQ      |L45.10|
;;;1975           return SET;
000006  2001              MOVS     r0,#1
;;;1976       }else{
;;;1977           return RESET;
;;;1978       }
;;;1979   }
000008  4770              BX       lr
                  |L45.10|
00000a  2000              MOVS     r0,#0                 ;1977
00000c  4770              BX       lr
;;;1980   
                          ENDP


                          AREA ||i.timer_hall_mode_config||, CODE, READONLY, ALIGN=1

                  timer_hall_mode_config PROC
;;;1551   */
;;;1552   void timer_hall_mode_config(uint32_t timer_periph, uint32_t hallmode)    
000000  2980              CMP      r1,#0x80
;;;1553   {
000002  d006              BEQ      |L46.18|
;;;1554       if(TIMER_HALLINTERFACE_ENABLE == hallmode){
;;;1555           TIMER_CTL1(timer_periph) |= (uint32_t)TIMER_CTL1_TI0S;
;;;1556       }else if(TIMER_HALLINTERFACE_DISABLE == hallmode){
000004  2900              CMP      r1,#0
000006  d103              BNE      |L46.16|
;;;1557           TIMER_CTL1(timer_periph) &= ~(uint32_t)TIMER_CTL1_TI0S;
000008  6841              LDR      r1,[r0,#4]
00000a  f0210180          BIC      r1,r1,#0x80
00000e  6041              STR      r1,[r0,#4]
                  |L46.16|
;;;1558       }else{
;;;1559           /* illegal parameters */        
;;;1560       }
;;;1561   }
000010  4770              BX       lr
                  |L46.18|
000012  6841              LDR      r1,[r0,#4]            ;1555
000014  f0410180          ORR      r1,r1,#0x80           ;1555
000018  6041              STR      r1,[r0,#4]            ;1555
00001a  4770              BX       lr
;;;1562   
                          ENDP


                          AREA ||i.timer_init||, CODE, READONLY, ALIGN=2

                  timer_init PROC
;;;162    */
;;;163    void timer_init(uint32_t timer_periph, timer_parameter_struct* initpara)
000000  b530              PUSH     {r4,r5,lr}
;;;164    {
;;;165        /* configure the counter prescaler value */
;;;166        TIMER_PSC(timer_periph) = (uint16_t)initpara->prescaler;
000002  880a              LDRH     r2,[r1,#0]
000004  6282              STR      r2,[r0,#0x28]
;;;167    
;;;168        /* configure the counter direction and aligned mode */
;;;169        if((TIMER0 == timer_periph) || (TIMER1 == timer_periph) || (TIMER2 == timer_periph) || (TIMER3 == timer_periph) ||
000006  4a28              LDR      r2,|L47.168|
;;;170           (TIMER4 == timer_periph) || (TIMER7 == timer_periph) || (TIMER8 == timer_periph) || (TIMER9 == timer_periph) ||
000008  4b28              LDR      r3,|L47.172|
00000a  4290              CMP      r0,r2                 ;169
00000c  d01f              BEQ      |L47.78|
00000e  f1b04f80          CMP      r0,#0x40000000        ;169
000012  d01c              BEQ      |L47.78|
000014  4c26              LDR      r4,|L47.176|
000016  42a0              CMP      r0,r4                 ;169
000018  d019              BEQ      |L47.78|
00001a  4c26              LDR      r4,|L47.180|
00001c  42a0              CMP      r0,r4                 ;169
00001e  d016              BEQ      |L47.78|
000020  4c25              LDR      r4,|L47.184|
000022  42a0              CMP      r0,r4
000024  d013              BEQ      |L47.78|
000026  4298              CMP      r0,r3
000028  d011              BEQ      |L47.78|
00002a  4c24              LDR      r4,|L47.188|
00002c  42a0              CMP      r0,r4
00002e  d00e              BEQ      |L47.78|
000030  4c23              LDR      r4,|L47.192|
000032  42a0              CMP      r0,r4
000034  d00b              BEQ      |L47.78|
;;;171           (TIMER10 == timer_periph) || (TIMER11 == timer_periph) || (TIMER12 == timer_periph) || (TIMER13 == timer_periph)){
000036  4c23              LDR      r4,|L47.196|
000038  42a0              CMP      r0,r4
00003a  d008              BEQ      |L47.78|
00003c  4c22              LDR      r4,|L47.200|
00003e  42a0              CMP      r0,r4
000040  d005              BEQ      |L47.78|
000042  4c22              LDR      r4,|L47.204|
000044  42a0              CMP      r0,r4
000046  d002              BEQ      |L47.78|
000048  4c21              LDR      r4,|L47.208|
00004a  42a0              CMP      r0,r4
00004c  d10f              BNE      |L47.110|
                  |L47.78|
;;;172            TIMER_CTL0(timer_periph) &= (~(uint32_t)(TIMER_CTL0_DIR | TIMER_CTL0_CAM));
00004e  6804              LDR      r4,[r0,#0]
000050  f0240470          BIC      r4,r4,#0x70
000054  6004              STR      r4,[r0,#0]
;;;173            TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->alignedmode & ALIGNEDMODE_MASK);
000056  6804              LDR      r4,[r0,#0]
000058  788d              LDRB     r5,[r1,#2]
00005a  f0050560          AND      r5,r5,#0x60
00005e  432c              ORRS     r4,r4,r5
000060  6004              STR      r4,[r0,#0]
;;;174            TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK);
000062  6804              LDR      r4,[r0,#0]
000064  790d              LDRB     r5,[r1,#4]
000066  f0050510          AND      r5,r5,#0x10
00006a  432c              ORRS     r4,r4,r5
00006c  6004              STR      r4,[r0,#0]
                  |L47.110|
;;;175        }
;;;176    
;;;177        /* configure the autoreload value */
;;;178        TIMER_CAR(timer_periph) = (uint32_t)initpara->period;
00006e  688c              LDR      r4,[r1,#8]
000070  62c4              STR      r4,[r0,#0x2c]
;;;179    
;;;180        if((TIMER5 != timer_periph) && (TIMER6 != timer_periph)){
000072  4c18              LDR      r4,|L47.212|
000074  42a0              CMP      r0,r4
000076  d00c              BEQ      |L47.146|
000078  4c17              LDR      r4,|L47.216|
00007a  42a0              CMP      r0,r4
00007c  d009              BEQ      |L47.146|
;;;181            /* reset the CKDIV bit */
;;;182            TIMER_CTL0(timer_periph) &= (~(uint32_t)TIMER_CTL0_CKDIV);
00007e  6804              LDR      r4,[r0,#0]
000080  f4247440          BIC      r4,r4,#0x300
000084  6004              STR      r4,[r0,#0]
;;;183            TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->clockdivision & CLOCKDIVISION_MASK);
000086  6804              LDR      r4,[r0,#0]
000088  898d              LDRH     r5,[r1,#0xc]
00008a  f4057540          AND      r5,r5,#0x300
00008e  432c              ORRS     r4,r4,r5
000090  6004              STR      r4,[r0,#0]
                  |L47.146|
;;;184        }
;;;185    
;;;186        if((TIMER0 == timer_periph) || (TIMER7 == timer_periph)){
000092  4290              CMP      r0,r2
000094  d001              BEQ      |L47.154|
000096  4298              CMP      r0,r3
000098  d101              BNE      |L47.158|
                  |L47.154|
;;;187            /* configure the repetition counter value */
;;;188            TIMER_CREP(timer_periph) = (uint32_t)initpara->repetitioncounter;
00009a  7b89              LDRB     r1,[r1,#0xe]
00009c  6301              STR      r1,[r0,#0x30]
                  |L47.158|
;;;189        }
;;;190    
;;;191        /* generate an update event */
;;;192        TIMER_SWEVG(timer_periph) |= (uint32_t)TIMER_SWEVG_UPG;
00009e  6941              LDR      r1,[r0,#0x14]
0000a0  f0410101          ORR      r1,r1,#1
0000a4  6141              STR      r1,[r0,#0x14]
;;;193    }
0000a6  bd30              POP      {r4,r5,pc}
;;;194    
                          ENDP

                  |L47.168|
                          DCD      0x40012c00
                  |L47.172|
                          DCD      0x40013400
                  |L47.176|
                          DCD      0x40000400
                  |L47.180|
                          DCD      0x40000800
                  |L47.184|
                          DCD      0x40000c00
                  |L47.188|
                          DCD      0x40014c00
                  |L47.192|
                          DCD      0x40015000
                  |L47.196|
                          DCD      0x40015400
                  |L47.200|
                          DCD      0x40001800
                  |L47.204|
                          DCD      0x40001c00
                  |L47.208|
                          DCD      0x40002000
                  |L47.212|
                          DCD      0x40001000
                  |L47.216|
                          DCD      0x40001400

                          AREA ||i.timer_input_capture_config||, CODE, READONLY, ALIGN=1

                  timer_input_capture_config PROC
;;;1257   */
;;;1258   void timer_input_capture_config(uint32_t timer_periph, uint16_t channel, timer_ic_parameter_struct* icpara)
000000  b410              PUSH     {r4}
;;;1259   {
;;;1260       switch(channel){
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L48.20|
000006  2901              CMP      r1,#1
000008  d026              BEQ      |L48.88|
00000a  2902              CMP      r1,#2
00000c  d048              BEQ      |L48.160|
00000e  2903              CMP      r1,#3
000010  d121              BNE      |L48.86|
000012  e068              B        |L48.230|
                  |L48.20|
;;;1261       /* configure TIMER_CH_0 */
;;;1262       case TIMER_CH_0:
;;;1263           /* reset the CH0EN bit */
;;;1264           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
000014  6a03              LDR      r3,[r0,#0x20]
000016  f0230301          BIC      r3,r3,#1
00001a  6203              STR      r3,[r0,#0x20]
;;;1265   
;;;1266           /* reset the CH0P and CH0NP bits */
;;;1267           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH0P | TIMER_CHCTL2_CH0NP));
00001c  6a03              LDR      r3,[r0,#0x20]
00001e  f023030a          BIC      r3,r3,#0xa
000022  6203              STR      r3,[r0,#0x20]
;;;1268           TIMER_CHCTL2(timer_periph) |= (uint32_t)(icpara->icpolarity);
000024  6a03              LDR      r3,[r0,#0x20]
000026  8814              LDRH     r4,[r2,#0]
000028  4323              ORRS     r3,r3,r4
00002a  6203              STR      r3,[r0,#0x20]
;;;1269           /* reset the CH0MS bit */
;;;1270           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0MS);
00002c  6983              LDR      r3,[r0,#0x18]
00002e  f0230303          BIC      r3,r3,#3
000032  6183              STR      r3,[r0,#0x18]
;;;1271           TIMER_CHCTL0(timer_periph) |= (uint32_t)(icpara->icselection);
000034  6983              LDR      r3,[r0,#0x18]
000036  8854              LDRH     r4,[r2,#2]
000038  4323              ORRS     r3,r3,r4
00003a  6183              STR      r3,[r0,#0x18]
;;;1272           /* reset the CH0CAPFLT bit */
;;;1273           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0CAPFLT);
00003c  6983              LDR      r3,[r0,#0x18]
00003e  f02303f0          BIC      r3,r3,#0xf0
000042  6183              STR      r3,[r0,#0x18]
;;;1274           TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(icpara->icfilter) << 4U);
000044  6983              LDR      r3,[r0,#0x18]
000046  88d4              LDRH     r4,[r2,#6]
000048  ea431304          ORR      r3,r3,r4,LSL #4
00004c  6183              STR      r3,[r0,#0x18]
;;;1275   
;;;1276           /* set the CH0EN bit */
;;;1277           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH0EN;
00004e  6a03              LDR      r3,[r0,#0x20]
000050  f0430301          ORR      r3,r3,#1
000054  6203              STR      r3,[r0,#0x20]
                  |L48.86|
;;;1278           break;
000056  e069              B        |L48.300|
                  |L48.88|
;;;1279       
;;;1280       /* configure TIMER_CH_1 */
;;;1281       case TIMER_CH_1:
;;;1282           /* reset the CH1EN bit */
;;;1283           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
000058  6a03              LDR      r3,[r0,#0x20]
00005a  f0230310          BIC      r3,r3,#0x10
00005e  6203              STR      r3,[r0,#0x20]
;;;1284   
;;;1285           /* reset the CH1P and CH1NP bits */
;;;1286           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH1P | TIMER_CHCTL2_CH1NP));
000060  6a03              LDR      r3,[r0,#0x20]
000062  f02303a0          BIC      r3,r3,#0xa0
000066  6203              STR      r3,[r0,#0x20]
;;;1287           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(icpara->icpolarity) << 4U);
000068  6a03              LDR      r3,[r0,#0x20]
00006a  8814              LDRH     r4,[r2,#0]
00006c  ea431304          ORR      r3,r3,r4,LSL #4
000070  6203              STR      r3,[r0,#0x20]
;;;1288           /* reset the CH1MS bit */
;;;1289           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1MS);
000072  6983              LDR      r3,[r0,#0x18]
000074  f4237340          BIC      r3,r3,#0x300
000078  6183              STR      r3,[r0,#0x18]
;;;1290           TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(icpara->icselection) << 8U);
00007a  6983              LDR      r3,[r0,#0x18]
00007c  8854              LDRH     r4,[r2,#2]
00007e  ea432304          ORR      r3,r3,r4,LSL #8
000082  6183              STR      r3,[r0,#0x18]
;;;1291           /* reset the CH1CAPFLT bit */
;;;1292           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1CAPFLT);
000084  6983              LDR      r3,[r0,#0x18]
000086  f4234370          BIC      r3,r3,#0xf000
00008a  6183              STR      r3,[r0,#0x18]
;;;1293           TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(icpara->icfilter) << 12U);
00008c  6983              LDR      r3,[r0,#0x18]
00008e  88d4              LDRH     r4,[r2,#6]
000090  ea433304          ORR      r3,r3,r4,LSL #12
000094  6183              STR      r3,[r0,#0x18]
;;;1294   
;;;1295           /* set the CH1EN bit */
;;;1296           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH1EN;
000096  6a03              LDR      r3,[r0,#0x20]
000098  f0430310          ORR      r3,r3,#0x10
00009c  6203              STR      r3,[r0,#0x20]
;;;1297           break;
00009e  e045              B        |L48.300|
                  |L48.160|
;;;1298       /* configure TIMER_CH_2 */
;;;1299       case TIMER_CH_2:
;;;1300           /* reset the CH2EN bit */
;;;1301           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2EN);
0000a0  6a03              LDR      r3,[r0,#0x20]
0000a2  f4237380          BIC      r3,r3,#0x100
0000a6  6203              STR      r3,[r0,#0x20]
;;;1302   
;;;1303           /* reset the CH2P and CH2NP bits */
;;;1304           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH2P | TIMER_CHCTL2_CH2NP));
0000a8  6a03              LDR      r3,[r0,#0x20]
0000aa  f4236320          BIC      r3,r3,#0xa00
0000ae  6203              STR      r3,[r0,#0x20]
;;;1305           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(icpara->icpolarity) << 8U);
0000b0  6a03              LDR      r3,[r0,#0x20]
0000b2  8814              LDRH     r4,[r2,#0]
0000b4  ea432304          ORR      r3,r3,r4,LSL #8
0000b8  6203              STR      r3,[r0,#0x20]
;;;1306   
;;;1307           /* reset the CH2MS bit */
;;;1308           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2MS);
0000ba  69c3              LDR      r3,[r0,#0x1c]
0000bc  f0230303          BIC      r3,r3,#3
0000c0  61c3              STR      r3,[r0,#0x1c]
;;;1309           TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(icpara->icselection));
0000c2  69c3              LDR      r3,[r0,#0x1c]
0000c4  8854              LDRH     r4,[r2,#2]
0000c6  4323              ORRS     r3,r3,r4
0000c8  61c3              STR      r3,[r0,#0x1c]
;;;1310   
;;;1311           /* reset the CH2CAPFLT bit */
;;;1312           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2CAPFLT);
0000ca  69c3              LDR      r3,[r0,#0x1c]
0000cc  f02303f0          BIC      r3,r3,#0xf0
0000d0  61c3              STR      r3,[r0,#0x1c]
;;;1313           TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(icpara->icfilter) << 4U);
0000d2  69c3              LDR      r3,[r0,#0x1c]
0000d4  88d4              LDRH     r4,[r2,#6]
0000d6  ea431304          ORR      r3,r3,r4,LSL #4
0000da  61c3              STR      r3,[r0,#0x1c]
;;;1314   
;;;1315           /* set the CH2EN bit */
;;;1316           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH2EN;
0000dc  6a03              LDR      r3,[r0,#0x20]
0000de  f4437380          ORR      r3,r3,#0x100
0000e2  6203              STR      r3,[r0,#0x20]
;;;1317           break;
0000e4  e022              B        |L48.300|
                  |L48.230|
;;;1318       /* configure TIMER_CH_3 */
;;;1319       case TIMER_CH_3:
;;;1320           /* reset the CH3EN bit */
;;;1321           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH3EN);
0000e6  6a03              LDR      r3,[r0,#0x20]
0000e8  f4235380          BIC      r3,r3,#0x1000
0000ec  6203              STR      r3,[r0,#0x20]
;;;1322   
;;;1323           /* reset the CH3P bits */
;;;1324           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH3P));
0000ee  6a03              LDR      r3,[r0,#0x20]
0000f0  f4235300          BIC      r3,r3,#0x2000
0000f4  6203              STR      r3,[r0,#0x20]
;;;1325           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(icpara->icpolarity) << 12U);
0000f6  6a03              LDR      r3,[r0,#0x20]
0000f8  8814              LDRH     r4,[r2,#0]
0000fa  ea433304          ORR      r3,r3,r4,LSL #12
0000fe  6203              STR      r3,[r0,#0x20]
;;;1326   
;;;1327           /* reset the CH3MS bit */
;;;1328           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3MS);
000100  69c3              LDR      r3,[r0,#0x1c]
000102  f4237340          BIC      r3,r3,#0x300
000106  61c3              STR      r3,[r0,#0x1c]
;;;1329           TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(icpara->icselection) << 8U);
000108  69c3              LDR      r3,[r0,#0x1c]
00010a  8854              LDRH     r4,[r2,#2]
00010c  ea432304          ORR      r3,r3,r4,LSL #8
000110  61c3              STR      r3,[r0,#0x1c]
;;;1330   
;;;1331           /* reset the CH3CAPFLT bit */
;;;1332           TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3CAPFLT);
000112  69c3              LDR      r3,[r0,#0x1c]
000114  f4234370          BIC      r3,r3,#0xf000
000118  61c3              STR      r3,[r0,#0x1c]
;;;1333           TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(icpara->icfilter) << 12U);
00011a  69c3              LDR      r3,[r0,#0x1c]
00011c  88d4              LDRH     r4,[r2,#6]
00011e  ea433304          ORR      r3,r3,r4,LSL #12
000122  61c3              STR      r3,[r0,#0x1c]
;;;1334   
;;;1335           /* set the CH3EN bit */
;;;1336           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH3EN;
000124  6a03              LDR      r3,[r0,#0x20]
000126  f4435380          ORR      r3,r3,#0x1000
00012a  6203              STR      r3,[r0,#0x20]
                  |L48.300|
;;;1337           break;
;;;1338       default:
;;;1339           break;
;;;1340       }
;;;1341       /* configure TIMER channel input capture prescaler value */
;;;1342       timer_channel_input_capture_prescaler_config(timer_periph,channel,(uint16_t)(icpara->icprescaler));
00012c  8892              LDRH     r2,[r2,#4]
00012e  bc10              POP      {r4}
000130  f7ffbffe          B.W      timer_channel_input_capture_prescaler_config
;;;1343   }
;;;1344   
                          ENDP


                          AREA ||i.timer_input_pwm_capture_config||, CODE, READONLY, ALIGN=1

                  timer_input_pwm_capture_config PROC
;;;1444   */
;;;1445   void timer_input_pwm_capture_config(uint32_t timer_periph, uint16_t channel, timer_ic_parameter_struct* icpwm)
000000  b570              PUSH     {r4-r6,lr}
;;;1446   {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;1447       uint16_t icpolarity  = 0x0U;
000006  2500              MOVS     r5,#0
;;;1448       uint16_t icselection = 0x0U;
;;;1449   
;;;1450       /* Set channel input polarity */
;;;1451       if(TIMER_IC_POLARITY_RISING == icpwm->icpolarity){
000008  8820              LDRH     r0,[r4,#0]
00000a  2800              CMP      r0,#0
00000c  d100              BNE      |L49.16|
;;;1452           icpolarity = TIMER_IC_POLARITY_FALLING;
00000e  2502              MOVS     r5,#2
                  |L49.16|
;;;1453       }else{
;;;1454           icpolarity = TIMER_IC_POLARITY_RISING;
;;;1455       }
;;;1456       /* Set channel input mode selection */
;;;1457       if(TIMER_IC_SELECTION_DIRECTTI == icpwm->icselection){
000010  8860              LDRH     r0,[r4,#2]
000012  2801              CMP      r0,#1
000014  d051              BEQ      |L49.186|
;;;1458           icselection = TIMER_IC_SELECTION_INDIRECTTI;
;;;1459       }else{
;;;1460           icselection = TIMER_IC_SELECTION_DIRECTTI;
000016  2601              MOVS     r6,#1
                  |L49.24|
;;;1461       }
;;;1462   
;;;1463       if(TIMER_CH_0 == channel){
000018  b3f1              CBZ      r1,|L49.152|
;;;1464           /* reset the CH0EN bit */
;;;1465           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
;;;1466           /* reset the CH0P and CH0NP bits */
;;;1467           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH0P | TIMER_CHCTL2_CH0NP));
;;;1468           /* set the CH0P and CH0NP bits */
;;;1469           TIMER_CHCTL2(timer_periph) |= (uint32_t)(icpwm->icpolarity);
;;;1470           /* reset the CH0MS bit */
;;;1471           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0MS);
;;;1472           /* set the CH0MS bit */
;;;1473           TIMER_CHCTL0(timer_periph) |= (uint32_t)(icpwm->icselection);
;;;1474           /* reset the CH0CAPFLT bit */
;;;1475           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0CAPFLT);
;;;1476           /* set the CH0CAPFLT bit */
;;;1477           TIMER_CHCTL0(timer_periph) |= ((uint32_t)(icpwm->icfilter) << 4U);
;;;1478           /* set the CH0EN bit */
;;;1479           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH0EN;
;;;1480           /* configure TIMER channel input capture prescaler value */
;;;1481           timer_channel_input_capture_prescaler_config(timer_periph,TIMER_CH_0,(uint16_t)(icpwm->icprescaler));
;;;1482   
;;;1483           /* reset the CH1EN bit */
;;;1484           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
;;;1485           /* reset the CH1P and CH1NP bits */
;;;1486           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH1P|TIMER_CHCTL2_CH1NP));
;;;1487           /* set the CH1P and CH1NP bits */
;;;1488           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)icpolarity<< 4U);
;;;1489           /* reset the CH1MS bit */
;;;1490           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1MS);
;;;1491           /* set the CH1MS bit */
;;;1492           TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)icselection<< 8U);
;;;1493           /* reset the CH1CAPFLT bit */
;;;1494           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1CAPFLT);
;;;1495           /* set the CH1CAPFLT bit */
;;;1496           TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(icpwm->icfilter)<< 12U);
;;;1497           /* set the CH1EN bit */
;;;1498           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH1EN;
;;;1499           /* configure TIMER channel input capture prescaler value */
;;;1500           timer_channel_input_capture_prescaler_config(timer_periph,TIMER_CH_1,(uint16_t)(icpwm->icprescaler));
;;;1501       }else{
;;;1502           /* reset the CH1EN bit */
;;;1503           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
00001a  6a18              LDR      r0,[r3,#0x20]
00001c  f0200010          BIC      r0,r0,#0x10
000020  6218              STR      r0,[r3,#0x20]
;;;1504           /* reset the CH1P and CH1NP bits */
;;;1505           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH1P|TIMER_CHCTL2_CH1NP));
000022  6a18              LDR      r0,[r3,#0x20]
000024  f02000a0          BIC      r0,r0,#0xa0
000028  6218              STR      r0,[r3,#0x20]
;;;1506           /* set the CH1P and CH1NP bits */
;;;1507           TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(icpwm->icpolarity)<< 4U);
00002a  6a18              LDR      r0,[r3,#0x20]
00002c  8821              LDRH     r1,[r4,#0]
00002e  ea401001          ORR      r0,r0,r1,LSL #4
000032  6218              STR      r0,[r3,#0x20]
;;;1508           /* reset the CH1MS bit */
;;;1509           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1MS);
000034  6998              LDR      r0,[r3,#0x18]
000036  f4207040          BIC      r0,r0,#0x300
00003a  6198              STR      r0,[r3,#0x18]
;;;1510           /* set the CH1MS bit */
;;;1511           TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(icpwm->icselection)<< 8U);
00003c  6998              LDR      r0,[r3,#0x18]
00003e  8861              LDRH     r1,[r4,#2]
000040  ea402001          ORR      r0,r0,r1,LSL #8
000044  6198              STR      r0,[r3,#0x18]
;;;1512           /* reset the CH1CAPFLT bit */
;;;1513           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1CAPFLT);
000046  6998              LDR      r0,[r3,#0x18]
000048  f4204070          BIC      r0,r0,#0xf000
00004c  6198              STR      r0,[r3,#0x18]
;;;1514           /* set the CH1CAPFLT bit */
;;;1515           TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(icpwm->icfilter)<< 12U);
00004e  6998              LDR      r0,[r3,#0x18]
000050  88e1              LDRH     r1,[r4,#6]
000052  ea403001          ORR      r0,r0,r1,LSL #12
000056  6198              STR      r0,[r3,#0x18]
;;;1516           /* set the CH1EN bit */
;;;1517           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH1EN;
000058  6a18              LDR      r0,[r3,#0x20]
00005a  f0400010          ORR      r0,r0,#0x10
00005e  6218              STR      r0,[r3,#0x20]
;;;1518           /* configure TIMER channel input capture prescaler value */
;;;1519           timer_channel_input_capture_prescaler_config(timer_periph,TIMER_CH_1,(uint16_t)(icpwm->icprescaler));
000060  88a2              LDRH     r2,[r4,#4]
000062  2101              MOVS     r1,#1
000064  4618              MOV      r0,r3
000066  f7fffffe          BL       timer_channel_input_capture_prescaler_config
;;;1520   
;;;1521           /* reset the CH0EN bit */
;;;1522           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
00006a  6a18              LDR      r0,[r3,#0x20]
00006c  f0200001          BIC      r0,r0,#1
000070  6218              STR      r0,[r3,#0x20]
;;;1523           /* reset the CH0P and CH0NP bits */
;;;1524           TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH0P|TIMER_CHCTL2_CH0NP));
000072  6a18              LDR      r0,[r3,#0x20]
000074  f020000a          BIC      r0,r0,#0xa
000078  6218              STR      r0,[r3,#0x20]
;;;1525           /* set the CH0P and CH0NP bits */
;;;1526           TIMER_CHCTL2(timer_periph) |= (uint32_t)icpolarity;
00007a  6a18              LDR      r0,[r3,#0x20]
00007c  4328              ORRS     r0,r0,r5
00007e  6218              STR      r0,[r3,#0x20]
;;;1527           /* reset the CH0MS bit */
;;;1528           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0MS);
000080  6998              LDR      r0,[r3,#0x18]
000082  f0200003          BIC      r0,r0,#3
000086  6198              STR      r0,[r3,#0x18]
;;;1529           /* set the CH0MS bit */
;;;1530           TIMER_CHCTL0(timer_periph) |= (uint32_t)icselection;
000088  6998              LDR      r0,[r3,#0x18]
00008a  4330              ORRS     r0,r0,r6
00008c  6198              STR      r0,[r3,#0x18]
;;;1531           /* reset the CH0CAPFLT bit */
;;;1532           TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0CAPFLT);
00008e  6998              LDR      r0,[r3,#0x18]
000090  f02000f0          BIC      r0,r0,#0xf0
000094  6198              STR      r0,[r3,#0x18]
;;;1533           /* set the CH0CAPFLT bit */
;;;1534           TIMER_CHCTL0(timer_periph) |= ((uint32_t)(icpwm->icfilter) << 4U);
000096  e000              B        |L49.154|
                  |L49.152|
000098  e011              B        |L49.190|
                  |L49.154|
00009a  6998              LDR      r0,[r3,#0x18]
00009c  88e1              LDRH     r1,[r4,#6]
00009e  ea401001          ORR      r0,r0,r1,LSL #4
0000a2  6198              STR      r0,[r3,#0x18]
;;;1535           /* set the CH0EN bit */
;;;1536           TIMER_CHCTL2(timer_periph) |= (uint32_t)TIMER_CHCTL2_CH0EN;
0000a4  6a18              LDR      r0,[r3,#0x20]
0000a6  f0400001          ORR      r0,r0,#1
0000aa  6218              STR      r0,[r3,#0x20]
;;;1537           /* configure TIMER channel input capture prescaler value */
;;;1538           timer_channel_input_capture_prescaler_config(timer_periph,TIMER_CH_0,(uint16_t)(icpwm->icprescaler));
0000ac  88a2              LDRH     r2,[r4,#4]
0000ae  e8bd4070          POP      {r4-r6,lr}
0000b2  2100              MOVS     r1,#0
0000b4  4618              MOV      r0,r3
0000b6  f7ffbffe          B.W      timer_channel_input_capture_prescaler_config
                  |L49.186|
0000ba  2602              MOVS     r6,#2                 ;1458
0000bc  e7ac              B        |L49.24|
                  |L49.190|
0000be  6a18              LDR      r0,[r3,#0x20]         ;1465
0000c0  f0200001          BIC      r0,r0,#1              ;1465
0000c4  6218              STR      r0,[r3,#0x20]         ;1465
0000c6  6a18              LDR      r0,[r3,#0x20]         ;1467
0000c8  f020000a          BIC      r0,r0,#0xa            ;1467
0000cc  6218              STR      r0,[r3,#0x20]         ;1467
0000ce  6a18              LDR      r0,[r3,#0x20]         ;1469
0000d0  8821              LDRH     r1,[r4,#0]            ;1469
0000d2  4308              ORRS     r0,r0,r1              ;1469
0000d4  6218              STR      r0,[r3,#0x20]         ;1469
0000d6  6998              LDR      r0,[r3,#0x18]         ;1471
0000d8  f0200003          BIC      r0,r0,#3              ;1471
0000dc  6198              STR      r0,[r3,#0x18]         ;1471
0000de  6998              LDR      r0,[r3,#0x18]         ;1473
0000e0  8861              LDRH     r1,[r4,#2]            ;1473
0000e2  4308              ORRS     r0,r0,r1              ;1473
0000e4  6198              STR      r0,[r3,#0x18]         ;1473
0000e6  6998              LDR      r0,[r3,#0x18]         ;1475
0000e8  f02000f0          BIC      r0,r0,#0xf0           ;1475
0000ec  6198              STR      r0,[r3,#0x18]         ;1475
0000ee  6998              LDR      r0,[r3,#0x18]         ;1477
0000f0  88e1              LDRH     r1,[r4,#6]            ;1477
0000f2  ea401001          ORR      r0,r0,r1,LSL #4       ;1477
0000f6  6198              STR      r0,[r3,#0x18]         ;1477
0000f8  6a18              LDR      r0,[r3,#0x20]         ;1479
0000fa  f0400001          ORR      r0,r0,#1              ;1479
0000fe  6218              STR      r0,[r3,#0x20]         ;1479
000100  88a2              LDRH     r2,[r4,#4]            ;1481
000102  2100              MOVS     r1,#0                 ;1481
000104  4618              MOV      r0,r3                 ;1481
000106  f7fffffe          BL       timer_channel_input_capture_prescaler_config
00010a  6a18              LDR      r0,[r3,#0x20]         ;1484
00010c  f0200010          BIC      r0,r0,#0x10           ;1484
000110  6218              STR      r0,[r3,#0x20]         ;1484
000112  6a18              LDR      r0,[r3,#0x20]         ;1486
000114  f02000a0          BIC      r0,r0,#0xa0           ;1486
000118  6218              STR      r0,[r3,#0x20]         ;1486
00011a  6a18              LDR      r0,[r3,#0x20]         ;1488
00011c  ea401005          ORR      r0,r0,r5,LSL #4       ;1488
000120  6218              STR      r0,[r3,#0x20]         ;1488
000122  6998              LDR      r0,[r3,#0x18]         ;1490
000124  f4207040          BIC      r0,r0,#0x300          ;1490
000128  6198              STR      r0,[r3,#0x18]         ;1490
00012a  6998              LDR      r0,[r3,#0x18]         ;1492
00012c  ea402006          ORR      r0,r0,r6,LSL #8       ;1492
000130  6198              STR      r0,[r3,#0x18]         ;1492
000132  6998              LDR      r0,[r3,#0x18]         ;1494
000134  f4204070          BIC      r0,r0,#0xf000         ;1494
000138  6198              STR      r0,[r3,#0x18]         ;1494
00013a  6998              LDR      r0,[r3,#0x18]         ;1496
00013c  88e1              LDRH     r1,[r4,#6]            ;1496
00013e  ea403001          ORR      r0,r0,r1,LSL #12      ;1496
000142  6198              STR      r0,[r3,#0x18]         ;1496
000144  6a18              LDR      r0,[r3,#0x20]         ;1498
000146  f0400010          ORR      r0,r0,#0x10           ;1498
00014a  6218              STR      r0,[r3,#0x20]         ;1498
00014c  88a2              LDRH     r2,[r4,#4]            ;1500
00014e  e8bd4070          POP      {r4-r6,lr}            ;1500
000152  2101              MOVS     r1,#1                 ;1500
000154  4618              MOV      r0,r3                 ;1500
000156  f7ffbffe          B.W      timer_channel_input_capture_prescaler_config
;;;1539       }
;;;1540   }
;;;1541   
                          ENDP


                          AREA ||i.timer_input_trigger_source_select||, CODE, READONLY, ALIGN=1

                  timer_input_trigger_source_select PROC
;;;1578   */
;;;1579   void timer_input_trigger_source_select(uint32_t timer_periph, uint32_t intrigger)
000000  6882              LDR      r2,[r0,#8]
;;;1580   {
;;;1581       TIMER_SMCFG(timer_periph) &= (~(uint32_t)TIMER_SMCFG_TRGS);
000002  f0220270          BIC      r2,r2,#0x70
000006  6082              STR      r2,[r0,#8]
;;;1582       TIMER_SMCFG(timer_periph) |= (uint32_t)intrigger;
000008  6882              LDR      r2,[r0,#8]
00000a  430a              ORRS     r2,r2,r1
00000c  6082              STR      r2,[r0,#8]
;;;1583   }
00000e  4770              BX       lr
;;;1584   
                          ENDP


                          AREA ||i.timer_internal_clock_config||, CODE, READONLY, ALIGN=1

                  timer_internal_clock_config PROC
;;;1714   */
;;;1715   void timer_internal_clock_config(uint32_t timer_periph)
000000  6881              LDR      r1,[r0,#8]
;;;1716   {
;;;1717       TIMER_SMCFG(timer_periph) &= ~(uint32_t)TIMER_SMCFG_SMC;
000002  f0210107          BIC      r1,r1,#7
000006  6081              STR      r1,[r0,#8]
;;;1718   }
000008  4770              BX       lr
;;;1719   
                          ENDP


                          AREA ||i.timer_internal_trigger_as_external_clock_config||, CODE, READONLY, ALIGN=1

                  timer_internal_trigger_as_external_clock_config PROC
;;;1731   */
;;;1732   void timer_internal_trigger_as_external_clock_config(uint32_t timer_periph, uint32_t intrigger)
000000  b500              PUSH     {lr}
;;;1733   {
000002  4603              MOV      r3,r0
;;;1734       timer_input_trigger_source_select(timer_periph,intrigger);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       timer_input_trigger_source_select
;;;1735       TIMER_SMCFG(timer_periph) &= ~(uint32_t)TIMER_SMCFG_SMC;
00000a  6898              LDR      r0,[r3,#8]
00000c  f0200007          BIC      r0,r0,#7
000010  6098              STR      r0,[r3,#8]
;;;1736       TIMER_SMCFG(timer_periph) |= (uint32_t)TIMER_SLAVE_MODE_EXTERNAL0;
000012  6898              LDR      r0,[r3,#8]
000014  f0400007          ORR      r0,r0,#7
000018  6098              STR      r0,[r3,#8]
;;;1737   }
00001a  bd00              POP      {pc}
;;;1738   
                          ENDP


                          AREA ||i.timer_interrupt_disable||, CODE, READONLY, ALIGN=1

                  timer_interrupt_disable PROC
;;;1898   */
;;;1899   void timer_interrupt_disable(uint32_t timer_periph, uint32_t interrupt)
000000  68c2              LDR      r2,[r0,#0xc]
;;;1900   {
;;;1901       TIMER_DMAINTEN(timer_periph) &= (~(uint32_t)interrupt); 
000002  438a              BICS     r2,r2,r1
000004  60c2              STR      r2,[r0,#0xc]
;;;1902   }
000006  4770              BX       lr
;;;1903   
                          ENDP


                          AREA ||i.timer_interrupt_enable||, CODE, READONLY, ALIGN=1

                  timer_interrupt_enable PROC
;;;1877   */
;;;1878   void timer_interrupt_enable(uint32_t timer_periph, uint32_t interrupt)
000000  68c2              LDR      r2,[r0,#0xc]
;;;1879   {
;;;1880       TIMER_DMAINTEN(timer_periph) |= (uint32_t) interrupt; 
000002  430a              ORRS     r2,r2,r1
000004  60c2              STR      r2,[r0,#0xc]
;;;1881   }
000006  4770              BX       lr
;;;1882   
                          ENDP


                          AREA ||i.timer_interrupt_flag_clear||, CODE, READONLY, ALIGN=1

                  timer_interrupt_flag_clear PROC
;;;1946   */
;;;1947   void timer_interrupt_flag_clear(uint32_t timer_periph, uint32_t interrupt)
000000  43c9              MVNS     r1,r1
;;;1948   {
;;;1949       TIMER_INTF(timer_periph) = (~(uint32_t)interrupt);
000002  6101              STR      r1,[r0,#0x10]
;;;1950   }
000004  4770              BX       lr
;;;1951   
                          ENDP


                          AREA ||i.timer_interrupt_flag_get||, CODE, READONLY, ALIGN=1

                  timer_interrupt_flag_get PROC
;;;1919   */
;;;1920   FlagStatus timer_interrupt_flag_get(uint32_t timer_periph, uint32_t interrupt)
000000  68c2              LDR      r2,[r0,#0xc]
;;;1921   {
;;;1922       uint32_t val;
;;;1923       val = (TIMER_DMAINTEN(timer_periph) & interrupt);
000002  400a              ANDS     r2,r2,r1
;;;1924       if((RESET != (TIMER_INTF(timer_periph) & interrupt) ) && (RESET != val)){
000004  6900              LDR      r0,[r0,#0x10]
000006  4208              TST      r0,r1
000008  d002              BEQ      |L56.16|
00000a  b10a              CBZ      r2,|L56.16|
;;;1925           return SET;
00000c  2001              MOVS     r0,#1
;;;1926       }else{
;;;1927           return RESET;
;;;1928       }
;;;1929   }
00000e  4770              BX       lr
                  |L56.16|
000010  2000              MOVS     r0,#0                 ;1927
000012  4770              BX       lr
;;;1930   
                          ENDP


                          AREA ||i.timer_master_output_trigger_source_select||, CODE, READONLY, ALIGN=1

                  timer_master_output_trigger_source_select PROC
;;;1600   */
;;;1601   void timer_master_output_trigger_source_select(uint32_t timer_periph, uint32_t outrigger)
000000  6842              LDR      r2,[r0,#4]
;;;1602   {
;;;1603       TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_MMC);
000002  f0220270          BIC      r2,r2,#0x70
000006  6042              STR      r2,[r0,#4]
;;;1604       TIMER_CTL1(timer_periph) |= (uint32_t)outrigger;
000008  6842              LDR      r2,[r0,#4]
00000a  430a              ORRS     r2,r2,r1
00000c  6042              STR      r2,[r0,#4]
;;;1605   }
00000e  4770              BX       lr
;;;1606   
                          ENDP


                          AREA ||i.timer_master_slave_mode_config||, CODE, READONLY, ALIGN=1

                  timer_master_slave_mode_config PROC
;;;1640   */ 
;;;1641   void timer_master_slave_mode_config(uint32_t timer_periph, uint32_t masterslave)
000000  2980              CMP      r1,#0x80
;;;1642   {
000002  d006              BEQ      |L58.18|
;;;1643       if(TIMER_MASTER_SLAVE_MODE_ENABLE == masterslave){
;;;1644           TIMER_SMCFG(timer_periph) |= (uint32_t)TIMER_SMCFG_MSM;
;;;1645       }else if(TIMER_MASTER_SLAVE_MODE_DISABLE == masterslave){
000004  2900              CMP      r1,#0
000006  d103              BNE      |L58.16|
;;;1646           TIMER_SMCFG(timer_periph) &= ~(uint32_t)TIMER_SMCFG_MSM;
000008  6881              LDR      r1,[r0,#8]
00000a  f0210180          BIC      r1,r1,#0x80
00000e  6081              STR      r1,[r0,#8]
                  |L58.16|
;;;1647       }else{
;;;1648           /* illegal parameters */        
;;;1649       }
;;;1650   }
000010  4770              BX       lr
                  |L58.18|
000012  6881              LDR      r1,[r0,#8]            ;1644
000014  f0410180          ORR      r1,r1,#0x80           ;1644
000018  6081              STR      r1,[r0,#8]            ;1644
00001a  4770              BX       lr
;;;1651   
                          ENDP


                          AREA ||i.timer_prescaler_config||, CODE, READONLY, ALIGN=1

                  timer_prescaler_config PROC
;;;311    */
;;;312    void timer_prescaler_config(uint32_t timer_periph, uint16_t prescaler, uint32_t pscreload)
000000  6281              STR      r1,[r0,#0x28]
;;;313    {
;;;314        TIMER_PSC(timer_periph) = (uint32_t)prescaler;
;;;315        
;;;316        if(TIMER_PSC_RELOAD_NOW == pscreload){
000002  2a01              CMP      r2,#1
000004  d103              BNE      |L59.14|
;;;317            TIMER_SWEVG(timer_periph) |= (uint32_t)TIMER_SWEVG_UPG;
000006  6941              LDR      r1,[r0,#0x14]
000008  f0410101          ORR      r1,r1,#1
00000c  6141              STR      r1,[r0,#0x14]
                  |L59.14|
;;;318        }
;;;319    }
00000e  4770              BX       lr
;;;320    
                          ENDP


                          AREA ||i.timer_prescaler_read||, CODE, READONLY, ALIGN=1

                  timer_prescaler_read PROC
;;;375    */         
;;;376    uint16_t timer_prescaler_read(uint32_t timer_periph)
000000  6a80              LDR      r0,[r0,#0x28]
;;;377    {
;;;378        uint16_t prescaler_value = 0U;
;;;379        prescaler_value = (uint16_t)(TIMER_PSC(timer_periph));
000002  b280              UXTH     r0,r0
;;;380        return (prescaler_value);
;;;381    }
000004  4770              BX       lr
;;;382    
                          ENDP


                          AREA ||i.timer_primary_output_config||, CODE, READONLY, ALIGN=1

                  timer_primary_output_config PROC
;;;637    */
;;;638    void timer_primary_output_config(uint32_t timer_periph, ControlStatus newvalue)
000000  2901              CMP      r1,#1
;;;639    {
000002  d004              BEQ      |L61.14|
;;;640        if(ENABLE == newvalue){
;;;641            TIMER_CCHP(timer_periph) |= (uint32_t)TIMER_CCHP_POEN;
;;;642        }else{
;;;643            TIMER_CCHP(timer_periph) &= (~(uint32_t)TIMER_CCHP_POEN);
000004  6c41              LDR      r1,[r0,#0x44]
000006  f4214100          BIC      r1,r1,#0x8000
00000a  6441              STR      r1,[r0,#0x44]
;;;644        }
;;;645    }
00000c  4770              BX       lr
                  |L61.14|
00000e  6c41              LDR      r1,[r0,#0x44]         ;641
000010  f4414100          ORR      r1,r1,#0x8000         ;641
000014  6441              STR      r1,[r0,#0x44]         ;641
000016  4770              BX       lr
;;;646    
                          ENDP


                          AREA ||i.timer_quadrature_decoder_mode_config||, CODE, READONLY, ALIGN=1

                  timer_quadrature_decoder_mode_config PROC
;;;1694   */
;;;1695   void timer_quadrature_decoder_mode_config(uint32_t timer_periph, uint32_t decomode, uint16_t ic0polarity, uint16_t ic1polarity)
000000  b510              PUSH     {r4,lr}
;;;1696   {
;;;1697       /* configure the quadrature decoder mode */
;;;1698       TIMER_SMCFG(timer_periph) &= (~(uint32_t)TIMER_SMCFG_SMC);
000002  6884              LDR      r4,[r0,#8]
000004  f0240407          BIC      r4,r4,#7
000008  6084              STR      r4,[r0,#8]
;;;1699       TIMER_SMCFG(timer_periph) |= (uint32_t)decomode;
00000a  6884              LDR      r4,[r0,#8]
00000c  430c              ORRS     r4,r4,r1
00000e  6084              STR      r4,[r0,#8]
;;;1700       /* configure input capture selection */
;;;1701       TIMER_CHCTL0(timer_periph) &= (uint32_t)(((~(uint32_t)TIMER_CHCTL0_CH0MS)) & ((~(uint32_t)TIMER_CHCTL0_CH1MS)));
000010  6981              LDR      r1,[r0,#0x18]
000012  f2403403          MOV      r4,#0x303
000016  43a1              BICS     r1,r1,r4
000018  6181              STR      r1,[r0,#0x18]
;;;1702       TIMER_CHCTL0(timer_periph) |= (uint32_t)(TIMER_IC_SELECTION_DIRECTTI | ((uint32_t)TIMER_IC_SELECTION_DIRECTTI << 8U));
00001a  6981              LDR      r1,[r0,#0x18]
00001c  f2401401          MOV      r4,#0x101
000020  4321              ORRS     r1,r1,r4
000022  6181              STR      r1,[r0,#0x18]
;;;1703       /* configure channel input capture polarity */
;;;1704       TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH0P | TIMER_CHCTL2_CH0NP));
000024  6a01              LDR      r1,[r0,#0x20]
000026  f021010a          BIC      r1,r1,#0xa
00002a  6201              STR      r1,[r0,#0x20]
;;;1705       TIMER_CHCTL2(timer_periph) &= (~(uint32_t)(TIMER_CHCTL2_CH1P | TIMER_CHCTL2_CH1NP));
00002c  6a01              LDR      r1,[r0,#0x20]
00002e  f02101a0          BIC      r1,r1,#0xa0
000032  6201              STR      r1,[r0,#0x20]
;;;1706       TIMER_CHCTL2(timer_periph) |= ((uint32_t)ic0polarity | ((uint32_t)ic1polarity << 4U));
000034  6a01              LDR      r1,[r0,#0x20]
000036  ea421203          ORR      r2,r2,r3,LSL #4
00003a  4311              ORRS     r1,r1,r2
00003c  6201              STR      r1,[r0,#0x20]
;;;1707   }
00003e  bd10              POP      {r4,pc}
;;;1708   
                          ENDP


                          AREA ||i.timer_repetition_value_config||, CODE, READONLY, ALIGN=1

                  timer_repetition_value_config PROC
;;;327    */
;;;328    void timer_repetition_value_config(uint32_t timer_periph, uint8_t repetition)
000000  6301              STR      r1,[r0,#0x30]
;;;329    {
;;;330        TIMER_CREP(timer_periph) = (uint32_t)repetition;
;;;331    } 
000002  4770              BX       lr
;;;332     
                          ENDP


                          AREA ||i.timer_single_pulse_mode_config||, CODE, READONLY, ALIGN=1

                  timer_single_pulse_mode_config PROC
;;;392    */
;;;393    void timer_single_pulse_mode_config(uint32_t timer_periph, uint32_t spmode)
000000  2908              CMP      r1,#8
;;;394    {
000002  d006              BEQ      |L64.18|
;;;395        if(TIMER_SP_MODE_SINGLE == spmode){
;;;396            TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_SPM;
;;;397        }else if(TIMER_SP_MODE_REPETITIVE == spmode){
000004  2900              CMP      r1,#0
000006  d103              BNE      |L64.16|
;;;398            TIMER_CTL0(timer_periph) &= ~((uint32_t)TIMER_CTL0_SPM);
000008  6801              LDR      r1,[r0,#0]
00000a  f0210108          BIC      r1,r1,#8
00000e  6001              STR      r1,[r0,#0]
                  |L64.16|
;;;399        }else{
;;;400            /* illegal parameters */        
;;;401        }
;;;402    }
000010  4770              BX       lr
                  |L64.18|
000012  6801              LDR      r1,[r0,#0]            ;396
000014  f0410108          ORR      r1,r1,#8              ;396
000018  6001              STR      r1,[r0,#0]            ;396
00001a  4770              BX       lr
;;;403    
                          ENDP


                          AREA ||i.timer_slave_mode_select||, CODE, READONLY, ALIGN=1

                  timer_slave_mode_select PROC
;;;1623   
;;;1624   void timer_slave_mode_select(uint32_t timer_periph, uint32_t slavemode)
000000  6882              LDR      r2,[r0,#8]
;;;1625   {
;;;1626       TIMER_SMCFG(timer_periph) &= (~(uint32_t)TIMER_SMCFG_SMC);
000002  f0220207          BIC      r2,r2,#7
000006  6082              STR      r2,[r0,#8]
;;;1627   
;;;1628       TIMER_SMCFG(timer_periph) |= (uint32_t)slavemode;
000008  6882              LDR      r2,[r0,#8]
00000a  430a              ORRS     r2,r2,r1
00000c  6082              STR      r2,[r0,#8]
;;;1629   }
00000e  4770              BX       lr
;;;1630   
                          ENDP


                          AREA ||i.timer_struct_para_init||, CODE, READONLY, ALIGN=1

                  timer_struct_para_init PROC
;;;137    */
;;;138    void timer_struct_para_init(timer_parameter_struct* initpara)
000000  2100              MOVS     r1,#0
;;;139    {
;;;140        /* initialize the init parameter struct member with the default value */
;;;141        initpara->prescaler         = 0U;
000002  8001              STRH     r1,[r0,#0]
;;;142        initpara->alignedmode       = TIMER_COUNTER_EDGE;
000004  8041              STRH     r1,[r0,#2]
;;;143        initpara->counterdirection  = TIMER_COUNTER_UP;
000006  8081              STRH     r1,[r0,#4]
;;;144        initpara->period            = 65535U;
000008  f64f72ff          MOV      r2,#0xffff
00000c  6082              STR      r2,[r0,#8]
;;;145        initpara->clockdivision     = TIMER_CKDIV_DIV1;
00000e  8181              STRH     r1,[r0,#0xc]
;;;146        initpara->repetitioncounter = 0U;
000010  7381              STRB     r1,[r0,#0xe]
;;;147    }
000012  4770              BX       lr
;;;148    
                          ENDP


                          AREA ||i.timer_update_event_disable||, CODE, READONLY, ALIGN=1

                  timer_update_event_disable PROC
;;;255    */
;;;256    void timer_update_event_disable(uint32_t timer_periph)
000000  6801              LDR      r1,[r0,#0]
;;;257    {
;;;258        TIMER_CTL0(timer_periph) |= (uint32_t) TIMER_CTL0_UPDIS;
000002  f0410102          ORR      r1,r1,#2
000006  6001              STR      r1,[r0,#0]
;;;259    }
000008  4770              BX       lr
;;;260    
                          ENDP


                          AREA ||i.timer_update_event_enable||, CODE, READONLY, ALIGN=1

                  timer_update_event_enable PROC
;;;244    */
;;;245    void timer_update_event_enable(uint32_t timer_periph)
000000  6801              LDR      r1,[r0,#0]
;;;246    {
;;;247        TIMER_CTL0(timer_periph) &= ~(uint32_t)TIMER_CTL0_UPDIS;
000002  f0210102          BIC      r1,r1,#2
000006  6001              STR      r1,[r0,#0]
;;;248    }
000008  4770              BX       lr
;;;249    
                          ENDP


                          AREA ||i.timer_update_source_config||, CODE, READONLY, ALIGN=1

                  timer_update_source_config PROC
;;;414    */
;;;415    void timer_update_source_config(uint32_t timer_periph, uint32_t update)
000000  2904              CMP      r1,#4
;;;416    {
000002  d006              BEQ      |L69.18|
;;;417        if(TIMER_UPDATE_SRC_REGULAR == update){
;;;418            TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_UPS;
;;;419        }else if(TIMER_UPDATE_SRC_GLOBAL == update){
000004  2900              CMP      r1,#0
000006  d103              BNE      |L69.16|
;;;420            TIMER_CTL0(timer_periph) &= ~(uint32_t)TIMER_CTL0_UPS;
000008  6801              LDR      r1,[r0,#0]
00000a  f0210104          BIC      r1,r1,#4
00000e  6001              STR      r1,[r0,#0]
                  |L69.16|
;;;421        }else{
;;;422            /* illegal parameters */
;;;423        }
;;;424    }
000010  4770              BX       lr
                  |L69.18|
000012  6801              LDR      r1,[r0,#0]            ;418
000014  f0410104          ORR      r1,r1,#4              ;418
000018  6001              STR      r1,[r0,#0]            ;418
00001a  4770              BX       lr
;;;425    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_gd32f10x_timer_c_5b821ed8____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___16_gd32f10x_timer_c_5b821ed8____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_gd32f10x_timer_c_5b821ed8____REVSH|
#line 128
|__asm___16_gd32f10x_timer_c_5b821ed8____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
