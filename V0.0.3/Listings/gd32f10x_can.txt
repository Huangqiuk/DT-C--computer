; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\gd32f10x_can.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\gd32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\gd32f10x_can.crf Libraries\src\gd32f10x_can.c]
                          THUMB

                          AREA ||i.can1_filter_start_bank||, CODE, READONLY, ALIGN=2

                  can1_filter_start_bank PROC
;;;327    */
;;;328    void can1_filter_start_bank(uint8_t start_bank)
000000  490a              LDR      r1,|L1.44|
;;;329    {
;;;330        /* filter lock disable */
;;;331        CAN_FCTL(CAN0) |= CAN_FCTL_FLD;
000002  680a              LDR      r2,[r1,#0]
000004  f0420201          ORR      r2,r2,#1
000008  600a              STR      r2,[r1,#0]
;;;332        /* set CAN1 filter start number */
;;;333        CAN_FCTL(CAN0) &= ~(uint32_t)CAN_FCTL_HBC1F;
00000a  680a              LDR      r2,[r1,#0]
00000c  f422527c          BIC      r2,r2,#0x3f00
000010  600a              STR      r2,[r1,#0]
;;;334        CAN_FCTL(CAN0) |= FCTL_HBC1F(start_bank);
000012  680a              LDR      r2,[r1,#0]
000014  f44f537c          MOV      r3,#0x3f00
000018  ea032000          AND      r0,r3,r0,LSL #8
00001c  4302              ORRS     r2,r2,r0
00001e  600a              STR      r2,[r1,#0]
;;;335        /* filter lock enaable */
;;;336        CAN_FCTL(CAN0) &= ~CAN_FCTL_FLD;
000020  6808              LDR      r0,[r1,#0]
000022  f0200001          BIC      r0,r0,#1
000026  6008              STR      r0,[r1,#0]
;;;337    }
000028  4770              BX       lr
;;;338    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x40006600

                          AREA ||i.can_debug_freeze_disable||, CODE, READONLY, ALIGN=2

                  can_debug_freeze_disable PROC
;;;369    */
;;;370    void can_debug_freeze_disable(uint32_t can_periph)
000000  6801              LDR      r1,[r0,#0]
;;;371    {
;;;372        /* set DFZ bit */
;;;373        CAN_CTL(can_periph) &= ~CAN_CTL_DFZ;
000002  f4213180          BIC      r1,r1,#0x10000
000006  6001              STR      r1,[r0,#0]
;;;374    #ifdef GD32F10x_CL
;;;375        if(CAN0 == can_periph){
;;;376            dbg_periph_disable(DBG_CAN0_HOLD);
;;;377        }else{
;;;378            dbg_periph_disable(DBG_CAN1_HOLD);
;;;379        }
;;;380    #else
;;;381        if(CAN0 == can_periph){
000008  4903              LDR      r1,|L2.24|
00000a  4288              CMP      r0,r1
00000c  d102              BNE      |L2.20|
;;;382            dbg_periph_enable(DBG_CAN0_HOLD);
00000e  1400              ASRS     r0,r0,#16
000010  f7ffbffe          B.W      dbg_periph_enable
                  |L2.20|
;;;383        }
;;;384    #endif
;;;385    }
000014  4770              BX       lr
;;;386    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40006400

                          AREA ||i.can_debug_freeze_enable||, CODE, READONLY, ALIGN=2

                  can_debug_freeze_enable PROC
;;;345    */
;;;346    void can_debug_freeze_enable(uint32_t can_periph)
000000  6801              LDR      r1,[r0,#0]
;;;347    {
;;;348        /* set DFZ bit */
;;;349        CAN_CTL(can_periph) |= CAN_CTL_DFZ;
000002  f4413180          ORR      r1,r1,#0x10000
000006  6001              STR      r1,[r0,#0]
;;;350    #ifdef GD32F10x_CL
;;;351        if(CAN0 == can_periph){
;;;352            dbg_periph_enable(DBG_CAN0_HOLD);
;;;353        }else{
;;;354            dbg_periph_enable(DBG_CAN1_HOLD);
;;;355        }
;;;356    #else
;;;357        if(CAN0 == can_periph){
000008  4903              LDR      r1,|L3.24|
00000a  4288              CMP      r0,r1
00000c  d102              BNE      |L3.20|
;;;358            dbg_periph_enable(DBG_CAN0_HOLD);
00000e  1400              ASRS     r0,r0,#16
000010  f7ffbffe          B.W      dbg_periph_enable
                  |L3.20|
;;;359        }
;;;360    #endif
;;;361    }
000014  4770              BX       lr
;;;362    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x40006400

                          AREA ||i.can_deinit||, CODE, READONLY, ALIGN=2

                  can_deinit PROC
;;;48     */
;;;49     void can_deinit(uint32_t can_periph)
000000  b510              PUSH     {r4,lr}
;;;50     {
;;;51     #ifdef GD32F10x_CL
;;;52         if(CAN0 == can_periph){
;;;53             rcu_periph_reset_enable(RCU_CAN0RST);
;;;54             rcu_periph_reset_disable(RCU_CAN0RST);
;;;55         }else{
;;;56             rcu_periph_reset_enable(RCU_CAN1RST);
;;;57             rcu_periph_reset_disable(RCU_CAN1RST);
;;;58         }
;;;59     #else
;;;60         if(CAN0 == can_periph){
000002  4907              LDR      r1,|L4.32|
000004  4288              CMP      r0,r1
000006  d109              BNE      |L4.28|
;;;61             rcu_periph_reset_enable(RCU_CAN0RST);
000008  f2404419          MOV      r4,#0x419
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       rcu_periph_reset_enable
;;;62             rcu_periph_reset_disable(RCU_CAN0RST);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  f7ffbffe          B.W      rcu_periph_reset_disable
                  |L4.28|
;;;63         }
;;;64     #endif
;;;65     }
00001c  bd10              POP      {r4,pc}
;;;66     
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      0x40006400

                          AREA ||i.can_error_get||, CODE, READONLY, ALIGN=1

                  can_error_get PROC
;;;781    */
;;;782    can_error_enum can_error_get(uint32_t can_periph)
000000  6980              LDR      r0,[r0,#0x18]
;;;783    {
;;;784        can_error_enum error;
;;;785        error = CAN_ERROR_NONE;
;;;786        
;;;787        /* get error type */
;;;788        error = (can_error_enum)(GET_ERR_ERRN(CAN_ERR(can_periph)));
000002  f3c01002          UBFX     r0,r0,#4,#3
;;;789        return error;
;;;790    }
000006  4770              BX       lr
;;;791    
                          ENDP


                          AREA ||i.can_fifo_release||, CODE, READONLY, ALIGN=1

                  can_fifo_release PROC
;;;637    */
;;;638    void can_fifo_release(uint32_t can_periph, uint8_t fifo_number)
000000  2900              CMP      r1,#0
;;;639    {
000002  d002              BEQ      |L6.10|
;;;640        if(CAN_FIFO0 == fifo_number){
;;;641            CAN_RFIFO0(can_periph) |= CAN_RFIFO0_RFD0;
;;;642        }else if(CAN_FIFO1 == fifo_number){
000004  2901              CMP      r1,#1
000006  d005              BEQ      |L6.20|
                  |L6.8|
;;;643            CAN_RFIFO1(can_periph) |= CAN_RFIFO1_RFD1;
;;;644        }else{
;;;645            /* illegal parameters */
;;;646            CAN_ERROR_HANDLE("CAN FIFO NUM is invalid \r\n");
000008  e7fe              B        |L6.8|
                  |L6.10|
00000a  68c1              LDR      r1,[r0,#0xc]          ;641
00000c  f0410120          ORR      r1,r1,#0x20           ;641
000010  60c1              STR      r1,[r0,#0xc]          ;641
;;;647        }
;;;648    }
000012  4770              BX       lr
                  |L6.20|
000014  6901              LDR      r1,[r0,#0x10]         ;643
000016  f0410120          ORR      r1,r1,#0x20           ;643
00001a  6101              STR      r1,[r0,#0x10]         ;643
00001c  4770              BX       lr
;;;649    
                          ENDP


                          AREA ||i.can_filter_init||, CODE, READONLY, ALIGN=2

                  can_filter_init PROC
;;;254    */
;;;255    void can_filter_init(can_filter_parameter_struct* can_filter_parameter_init)
000000  b5f0              PUSH     {r4-r7,lr}
;;;256    {
;;;257        uint32_t val = 0U;
;;;258        
;;;259        val = ((uint32_t)1) << (can_filter_parameter_init->filter_number);
000002  7a82              LDRB     r2,[r0,#0xa]
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
;;;260        /* filter lock disable */
;;;261        CAN_FCTL(CAN0) |= CAN_FCTL_FLD;
000008  4c2f              LDR      r4,|L7.200|
00000a  6822              LDR      r2,[r4,#0]
00000c  f0420201          ORR      r2,r2,#1
000010  6022              STR      r2,[r4,#0]
;;;262        /* disable filter */
;;;263        CAN_FW(CAN0) &= ~(uint32_t)val;
000012  4d2d              LDR      r5,|L7.200|
000014  351c              ADDS     r5,r5,#0x1c
000016  682a              LDR      r2,[r5,#0]
000018  438a              BICS     r2,r2,r1
00001a  602a              STR      r2,[r5,#0]
;;;264        
;;;265        /* filter 16 bits */
;;;266        if(CAN_FILTERBITS_16BIT == can_filter_parameter_init->filter_bits){
;;;267            /* set filter 16 bits */
;;;268            CAN_FSCFG(CAN0) &= ~(uint32_t)val;
00001c  4a2a              LDR      r2,|L7.200|
00001e  89c6              LDRH     r6,[r0,#0xe]          ;266
000020  320c              ADDS     r2,r2,#0xc
;;;269            /* first 16 bits list and first 16 bits mask or first 16 bits list and second 16 bits list */
;;;270            CAN_FDATA0(CAN0, can_filter_parameter_init->filter_number) = \
000022  4b2a              LDR      r3,|L7.204|
000024  2e00              CMP      r6,#0                 ;266
000026  d114              BNE      |L7.82|
000028  6816              LDR      r6,[r2,#0]            ;268
00002a  438e              BICS     r6,r6,r1              ;268
00002c  6016              STR      r6,[r2,#0]            ;268
00002e  8846              LDRH     r6,[r0,#2]
000030  88c7              LDRH     r7,[r0,#6]
000032  ea464607          ORR      r6,r6,r7,LSL #16
000036  8947              LDRH     r7,[r0,#0xa]
000038  eb0307c7          ADD      r7,r3,r7,LSL #3
00003c  f8c76640          STR      r6,[r7,#0x640]
;;;271                                    FDATA_MASK_HIGH((can_filter_parameter_init->filter_mask_low) & CAN_FILTER_MASK_16BITS) | \
;;;272                                    FDATA_MASK_LOW((can_filter_parameter_init->filter_list_low) & CAN_FILTER_MASK_16BITS);
;;;273            /* second 16 bits list and second 16 bits mask or third 16 bits list and fourth 16 bits list */
;;;274            CAN_FDATA1(CAN0, can_filter_parameter_init->filter_number) = \
000040  8806              LDRH     r6,[r0,#0]
000042  8887              LDRH     r7,[r0,#4]
000044  ea464607          ORR      r6,r6,r7,LSL #16
000048  8947              LDRH     r7,[r0,#0xa]
00004a  eb0307c7          ADD      r7,r3,r7,LSL #3
00004e  f8c76644          STR      r6,[r7,#0x644]
                  |L7.82|
;;;275                                    FDATA_MASK_HIGH((can_filter_parameter_init->filter_mask_high) & CAN_FILTER_MASK_16BITS) | \
;;;276                                    FDATA_MASK_LOW((can_filter_parameter_init->filter_list_high) & CAN_FILTER_MASK_16BITS);
;;;277        }
;;;278        /* filter 32 bits */
;;;279        if(CAN_FILTERBITS_32BIT == can_filter_parameter_init->filter_bits){
000052  89c6              LDRH     r6,[r0,#0xe]
000054  2e01              CMP      r6,#1
000056  d114              BNE      |L7.130|
;;;280            /* set filter 32 bits */
;;;281            CAN_FSCFG(CAN0) |= (uint32_t)val;
000058  6816              LDR      r6,[r2,#0]
00005a  430e              ORRS     r6,r6,r1
00005c  6016              STR      r6,[r2,#0]
;;;282            /* 32 bits list or first 32 bits list */
;;;283            CAN_FDATA0(CAN0, can_filter_parameter_init->filter_number) = \
00005e  8842              LDRH     r2,[r0,#2]
000060  8806              LDRH     r6,[r0,#0]
000062  ea424206          ORR      r2,r2,r6,LSL #16
000066  8946              LDRH     r6,[r0,#0xa]
000068  eb0306c6          ADD      r6,r3,r6,LSL #3
00006c  f8c62640          STR      r2,[r6,#0x640]
;;;284                                    FDATA_MASK_HIGH((can_filter_parameter_init->filter_list_high) & CAN_FILTER_MASK_16BITS) |
;;;285                                    FDATA_MASK_LOW((can_filter_parameter_init->filter_list_low) & CAN_FILTER_MASK_16BITS);
;;;286            /* 32 bits mask or second 32 bits list */
;;;287            CAN_FDATA1(CAN0, can_filter_parameter_init->filter_number) = \
000070  88c2              LDRH     r2,[r0,#6]
000072  8886              LDRH     r6,[r0,#4]
000074  ea424206          ORR      r2,r2,r6,LSL #16
000078  8946              LDRH     r6,[r0,#0xa]
00007a  eb0303c6          ADD      r3,r3,r6,LSL #3
00007e  f8c32644          STR      r2,[r3,#0x644]
                  |L7.130|
;;;288                                    FDATA_MASK_HIGH((can_filter_parameter_init->filter_mask_high) & CAN_FILTER_MASK_16BITS) |
;;;289                                    FDATA_MASK_LOW((can_filter_parameter_init->filter_mask_low) & CAN_FILTER_MASK_16BITS);
;;;290        }
;;;291        
;;;292        /* filter mode */
;;;293        if(CAN_FILTERMODE_MASK == can_filter_parameter_init->filter_mode){
;;;294            /* mask mode */
;;;295            CAN_FMCFG(CAN0) &= ~(uint32_t)val;
000082  4a11              LDR      r2,|L7.200|
000084  8983              LDRH     r3,[r0,#0xc]          ;293
000086  1d12              ADDS     r2,r2,#4
000088  b16b              CBZ      r3,|L7.166|
;;;296        }else{
;;;297            /* list mode */
;;;298            CAN_FMCFG(CAN0) |= (uint32_t)val;
00008a  6813              LDR      r3,[r2,#0]
00008c  430b              ORRS     r3,r3,r1
00008e  6013              STR      r3,[r2,#0]
                  |L7.144|
;;;299        }
;;;300        
;;;301        /* filter FIFO */
;;;302        if(CAN_FIFO0 == (can_filter_parameter_init->filter_fifo_number)){
;;;303            /* FIFO0 */
;;;304            CAN_FAFIFO(CAN0) &= ~(uint32_t)val;
000090  4a0d              LDR      r2,|L7.200|
000092  8903              LDRH     r3,[r0,#8]            ;302
000094  3214              ADDS     r2,r2,#0x14
000096  b153              CBZ      r3,|L7.174|
;;;305        }else{
;;;306            /* FIFO1 */
;;;307            CAN_FAFIFO(CAN0) |= (uint32_t)val;
000098  6813              LDR      r3,[r2,#0]
00009a  430b              ORRS     r3,r3,r1
00009c  6013              STR      r3,[r2,#0]
                  |L7.158|
;;;308        }
;;;309        
;;;310        /* filter working */
;;;311        if(ENABLE == can_filter_parameter_init->filter_enable){
00009e  7c00              LDRB     r0,[r0,#0x10]
0000a0  2801              CMP      r0,#1
0000a2  d008              BEQ      |L7.182|
0000a4  e00a              B        |L7.188|
                  |L7.166|
0000a6  6813              LDR      r3,[r2,#0]            ;295
0000a8  438b              BICS     r3,r3,r1              ;295
0000aa  6013              STR      r3,[r2,#0]            ;295
0000ac  e7f0              B        |L7.144|
                  |L7.174|
0000ae  6813              LDR      r3,[r2,#0]            ;304
0000b0  438b              BICS     r3,r3,r1              ;304
0000b2  6013              STR      r3,[r2,#0]            ;304
0000b4  e7f3              B        |L7.158|
                  |L7.182|
;;;312            
;;;313            CAN_FW(CAN0) |= (uint32_t)val;
0000b6  6828              LDR      r0,[r5,#0]
0000b8  4308              ORRS     r0,r0,r1
0000ba  6028              STR      r0,[r5,#0]
                  |L7.188|
;;;314        }
;;;315        
;;;316        /* filter lock enable */
;;;317        CAN_FCTL(CAN0) &= ~CAN_FCTL_FLD;
0000bc  6820              LDR      r0,[r4,#0]
0000be  f0200001          BIC      r0,r0,#1
0000c2  6020              STR      r0,[r4,#0]
;;;318    }
0000c4  bdf0              POP      {r4-r7,pc}
;;;319    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L7.200|
                          DCD      0x40006600
                  |L7.204|
                          DCD      0x40006000

                          AREA ||i.can_flag_clear||, CODE, READONLY, ALIGN=1

                  can_flag_clear PROC
;;;959    */
;;;960    void can_flag_clear(uint32_t can_periph, can_flag_enum flag)
000000  b510              PUSH     {r4,lr}
;;;961    {
;;;962        if (flag == CAN_FLAG_RFO1){
;;;963            CAN_REG_VAL(can_periph, flag) &= ~BIT(CAN_BIT_POS(flag));
000002  f001031f          AND      r3,r1,#0x1f
000006  2201              MOVS     r2,#1
000008  409a              LSLS     r2,r2,r3
00000a  f5a16480          SUB      r4,r1,#0x400          ;962
00000e  eb001091          ADD      r0,r0,r1,LSR #6
000012  3c04              SUBS     r4,#4                 ;962
000014  d003              BEQ      |L8.30|
;;;964        } else {
;;;965            CAN_REG_VAL(can_periph, flag) |= BIT(CAN_BIT_POS(flag));
000016  6801              LDR      r1,[r0,#0]
000018  4311              ORRS     r1,r1,r2
00001a  6001              STR      r1,[r0,#0]
;;;966        }
;;;967    }
00001c  bd10              POP      {r4,pc}
                  |L8.30|
00001e  6801              LDR      r1,[r0,#0]            ;963
000020  4391              BICS     r1,r1,r2              ;963
000022  6001              STR      r1,[r0,#0]            ;963
000024  bd10              POP      {r4,pc}
;;;968    
                          ENDP


                          AREA ||i.can_flag_get||, CODE, READONLY, ALIGN=1

                  can_flag_get PROC
;;;921    */
;;;922    FlagStatus can_flag_get(uint32_t can_periph, can_flag_enum flag)
000000  eb001091          ADD      r0,r0,r1,LSR #6
;;;923    {  
;;;924        /* get flag and interrupt enable state */
;;;925        if(RESET != (CAN_REG_VAL(can_periph, flag) & BIT(CAN_BIT_POS(flag)))){
000004  6800              LDR      r0,[r0,#0]
000006  f001021f          AND      r2,r1,#0x1f
00000a  2101              MOVS     r1,#1
00000c  4091              LSLS     r1,r1,r2
00000e  4208              TST      r0,r1
000010  d001              BEQ      |L9.22|
;;;926            return SET;
000012  2001              MOVS     r0,#1
;;;927        }else{
;;;928            return RESET;
;;;929        }
;;;930    }
000014  4770              BX       lr
                  |L9.22|
000016  2000              MOVS     r0,#0                 ;928
000018  4770              BX       lr
;;;931    
                          ENDP


                          AREA ||i.can_init||, CODE, READONLY, ALIGN=1

                  can_init PROC
;;;164    */
;;;165    ErrStatus can_init(uint32_t can_periph, can_parameter_struct* can_parameter_init)
000000  b570              PUSH     {r4-r6,lr}
;;;166    {
;;;167        uint32_t timeout = CAN_TIMEOUT;
000002  f64f72ff          MOV      r2,#0xffff
000006  4613              MOV      r3,r2
;;;168        ErrStatus flag = ERROR;
000008  2400              MOVS     r4,#0
;;;169        
;;;170        /* disable sleep mode */
;;;171        CAN_CTL(can_periph) &= ~CAN_CTL_SLPWMOD;
00000a  6805              LDR      r5,[r0,#0]
00000c  f0250502          BIC      r5,r5,#2
000010  6005              STR      r5,[r0,#0]
;;;172        /* enable initialize mode */
;;;173        CAN_CTL(can_periph) |= CAN_CTL_IWMOD;
000012  6805              LDR      r5,[r0,#0]
000014  f0450501          ORR      r5,r5,#1
000018  6005              STR      r5,[r0,#0]
00001a  e000              B        |L10.30|
                  |L10.28|
;;;174        /* wait ACK */
;;;175        while((CAN_STAT_IWS != (CAN_STAT(can_periph) & CAN_STAT_IWS)) && (0U != timeout)){
;;;176            timeout--;
00001c  1e5b              SUBS     r3,r3,#1
                  |L10.30|
00001e  6845              LDR      r5,[r0,#4]            ;175
000020  07ed              LSLS     r5,r5,#31             ;175
000022  d101              BNE      |L10.40|
000024  2b00              CMP      r3,#0                 ;175
000026  d1f9              BNE      |L10.28|
                  |L10.40|
;;;177        }
;;;178        /* check initialize working success */
;;;179        if(CAN_STAT_IWS != (CAN_STAT(can_periph) & CAN_STAT_IWS)){
000028  6843              LDR      r3,[r0,#4]
00002a  07db              LSLS     r3,r3,#31
00002c  d048              BEQ      |L10.192|
;;;180            flag = ERROR;
;;;181        }else{
;;;182            /* set the bit timing register */
;;;183            CAN_BT(can_periph) = (BT_MODE((uint32_t)can_parameter_init->working_mode) | \
00002e  784b              LDRB     r3,[r1,#1]
000030  f04f7540          MOV      r5,#0x3000000
000034  ea056303          AND      r3,r5,r3,LSL #24
000038  780d              LDRB     r5,[r1,#0]
00003a  f44f2670          MOV      r6,#0xf0000
00003e  ea437385          ORR      r3,r3,r5,LSL #30
000042  788d              LDRB     r5,[r1,#2]
000044  ea064505          AND      r5,r6,r5,LSL #16
000048  432b              ORRS     r3,r3,r5
00004a  78cd              LDRB     r5,[r1,#3]
00004c  f44f06e0          MOV      r6,#0x700000
000050  ea065505          AND      r5,r6,r5,LSL #20
000054  432b              ORRS     r3,r3,r5
000056  894d              LDRH     r5,[r1,#0xa]
000058  1e6d              SUBS     r5,r5,#1
00005a  f3c50509          UBFX     r5,r5,#0,#10
00005e  432b              ORRS     r3,r3,r5
000060  61c3              STR      r3,[r0,#0x1c]
;;;184                                  BT_SJW((uint32_t)can_parameter_init->resync_jump_width) | \
;;;185                                  BT_BS1((uint32_t)can_parameter_init->time_segment_1) | \
;;;186                                  BT_BS2((uint32_t)can_parameter_init->time_segment_2) | \
;;;187                                  BT_BAUDPSC(((uint32_t)(can_parameter_init->prescaler) - 1U)));
;;;188    
;;;189            /* time trigger communication mode */
;;;190            if(ENABLE == can_parameter_init->time_triggered){
000062  790b              LDRB     r3,[r1,#4]
000064  2b01              CMP      r3,#1
000066  d02d              BEQ      |L10.196|
;;;191                CAN_CTL(can_periph) |= CAN_CTL_TTC;
;;;192            }else{
;;;193                CAN_CTL(can_periph) &= ~CAN_CTL_TTC;
000068  6803              LDR      r3,[r0,#0]
00006a  f0230380          BIC      r3,r3,#0x80
00006e  6003              STR      r3,[r0,#0]
                  |L10.112|
;;;194            }
;;;195            /* automatic bus-off managment */
;;;196            if(ENABLE == can_parameter_init->auto_bus_off_recovery){
000070  794b              LDRB     r3,[r1,#5]
000072  2b01              CMP      r3,#1
000074  d02b              BEQ      |L10.206|
;;;197                CAN_CTL(can_periph) |= CAN_CTL_ABOR;
;;;198            }else{
;;;199                CAN_CTL(can_periph) &= ~CAN_CTL_ABOR;
000076  6803              LDR      r3,[r0,#0]
000078  f0230340          BIC      r3,r3,#0x40
00007c  6003              STR      r3,[r0,#0]
                  |L10.126|
;;;200            }
;;;201            /* automatic wakeup mode */
;;;202            if(ENABLE == can_parameter_init->auto_wake_up){
00007e  798b              LDRB     r3,[r1,#6]
000080  2b01              CMP      r3,#1
000082  d029              BEQ      |L10.216|
;;;203                CAN_CTL(can_periph) |= CAN_CTL_AWU;
;;;204            }else{
;;;205                CAN_CTL(can_periph) &= ~CAN_CTL_AWU;
000084  6803              LDR      r3,[r0,#0]
000086  f0230320          BIC      r3,r3,#0x20
00008a  6003              STR      r3,[r0,#0]
                  |L10.140|
;;;206            }
;;;207            /* automatic retransmission mode disable */
;;;208            if(ENABLE == can_parameter_init->no_auto_retrans){
00008c  79cb              LDRB     r3,[r1,#7]
00008e  2b01              CMP      r3,#1
000090  d027              BEQ      |L10.226|
;;;209                CAN_CTL(can_periph) |= CAN_CTL_ARD;
;;;210            }else{
;;;211                CAN_CTL(can_periph) &= ~CAN_CTL_ARD;
000092  6803              LDR      r3,[r0,#0]
000094  f0230310          BIC      r3,r3,#0x10
000098  6003              STR      r3,[r0,#0]
                  |L10.154|
;;;212            }
;;;213            /* receive fifo overwrite mode */        
;;;214            if(ENABLE == can_parameter_init->rec_fifo_overwrite){
00009a  7a0b              LDRB     r3,[r1,#8]
00009c  2b01              CMP      r3,#1
00009e  d025              BEQ      |L10.236|
;;;215                CAN_CTL(can_periph) |= CAN_CTL_RFOD;
;;;216            }else{
;;;217                CAN_CTL(can_periph) &= ~CAN_CTL_RFOD;
0000a0  6803              LDR      r3,[r0,#0]
0000a2  f0230308          BIC      r3,r3,#8
0000a6  6003              STR      r3,[r0,#0]
                  |L10.168|
;;;218            } 
;;;219            /* transmit fifo order */
;;;220            if(ENABLE == can_parameter_init->trans_fifo_order){
0000a8  7a49              LDRB     r1,[r1,#9]
0000aa  2901              CMP      r1,#1
0000ac  d023              BEQ      |L10.246|
;;;221                CAN_CTL(can_periph) |= CAN_CTL_TFO;
;;;222            }else{
;;;223                CAN_CTL(can_periph) &= ~CAN_CTL_TFO;
0000ae  6801              LDR      r1,[r0,#0]
0000b0  f0210104          BIC      r1,r1,#4
0000b4  6001              STR      r1,[r0,#0]
                  |L10.182|
;;;224            }  
;;;225            /* disable initialize mode */
;;;226            CAN_CTL(can_periph) &= ~CAN_CTL_IWMOD;
0000b6  6801              LDR      r1,[r0,#0]
0000b8  f0210101          BIC      r1,r1,#1
0000bc  6001              STR      r1,[r0,#0]
;;;227            timeout = CAN_TIMEOUT;
;;;228            /* wait the ACK */
;;;229            while((CAN_STAT_IWS == (CAN_STAT(can_periph) & CAN_STAT_IWS)) && (0U != timeout)){
0000be  e020              B        |L10.258|
                  |L10.192|
0000c0  2400              MOVS     r4,#0                 ;180
0000c2  e025              B        |L10.272|
                  |L10.196|
0000c4  6803              LDR      r3,[r0,#0]            ;191
0000c6  f0430380          ORR      r3,r3,#0x80           ;191
0000ca  6003              STR      r3,[r0,#0]            ;191
0000cc  e7d0              B        |L10.112|
                  |L10.206|
0000ce  6803              LDR      r3,[r0,#0]            ;197
0000d0  f0430340          ORR      r3,r3,#0x40           ;197
0000d4  6003              STR      r3,[r0,#0]            ;197
0000d6  e7d2              B        |L10.126|
                  |L10.216|
0000d8  6803              LDR      r3,[r0,#0]            ;203
0000da  f0430320          ORR      r3,r3,#0x20           ;203
0000de  6003              STR      r3,[r0,#0]            ;203
0000e0  e7d4              B        |L10.140|
                  |L10.226|
0000e2  6803              LDR      r3,[r0,#0]            ;209
0000e4  f0430310          ORR      r3,r3,#0x10           ;209
0000e8  6003              STR      r3,[r0,#0]            ;209
0000ea  e7d6              B        |L10.154|
                  |L10.236|
0000ec  6803              LDR      r3,[r0,#0]            ;215
0000ee  f0430308          ORR      r3,r3,#8              ;215
0000f2  6003              STR      r3,[r0,#0]            ;215
0000f4  e7d8              B        |L10.168|
                  |L10.246|
0000f6  6801              LDR      r1,[r0,#0]            ;221
0000f8  f0410104          ORR      r1,r1,#4              ;221
0000fc  6001              STR      r1,[r0,#0]            ;221
0000fe  e7da              B        |L10.182|
                  |L10.256|
;;;230                timeout--;
000100  1e52              SUBS     r2,r2,#1
                  |L10.258|
000102  6841              LDR      r1,[r0,#4]            ;229
000104  07c9              LSLS     r1,r1,#31             ;229
000106  d001              BEQ      |L10.268|
000108  2a00              CMP      r2,#0                 ;229
00010a  d1f9              BNE      |L10.256|
                  |L10.268|
;;;231            }
;;;232            /* check exit initialize mode */
;;;233            if(0U != timeout){
00010c  b102              CBZ      r2,|L10.272|
;;;234                flag = SUCCESS;
00010e  2401              MOVS     r4,#1
                  |L10.272|
;;;235            }
;;;236        }  
;;;237        return flag;
000110  4620              MOV      r0,r4
;;;238    }
000112  bd70              POP      {r4-r6,pc}
;;;239    
                          ENDP


                          AREA ||i.can_interrupt_disable||, CODE, READONLY, ALIGN=1

                  can_interrupt_disable PROC
;;;873    */
;;;874    void can_interrupt_disable(uint32_t can_periph, uint32_t interrupt)
000000  6942              LDR      r2,[r0,#0x14]
;;;875    {
;;;876        CAN_INTEN(can_periph) &= ~interrupt;
000002  438a              BICS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;877    }
000006  4770              BX       lr
;;;878    
                          ENDP


                          AREA ||i.can_interrupt_enable||, CODE, READONLY, ALIGN=1

                  can_interrupt_enable PROC
;;;845    */
;;;846    void can_interrupt_enable(uint32_t can_periph, uint32_t interrupt)
000000  6942              LDR      r2,[r0,#0x14]
;;;847    {
;;;848        CAN_INTEN(can_periph) |= interrupt;
000002  430a              ORRS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;849    }
000006  4770              BX       lr
;;;850    
                          ENDP


                          AREA ||i.can_interrupt_flag_clear||, CODE, READONLY, ALIGN=2

                  can_interrupt_flag_clear PROC
;;;1036   */
;;;1037   void can_interrupt_flag_clear(uint32_t can_periph, can_interrupt_flag_enum flag)
000000  b510              PUSH     {r4,lr}
;;;1038   {
;;;1039       if (flag == CAN_INT_FLAG_RFO1){
000002  4c08              LDR      r4,|L13.36|
;;;1040           CAN_REG_VALS(can_periph, flag) &= ~BIT(CAN_BIT_POS0(flag));
000004  f3c11384          UBFX     r3,r1,#6,#5
000008  2201              MOVS     r2,#1
00000a  409a              LSLS     r2,r2,r3
00000c  eb003011          ADD      r0,r0,r1,LSR #12
000010  42a1              CMP      r1,r4                 ;1039
000012  d103              BNE      |L13.28|
000014  6801              LDR      r1,[r0,#0]
000016  4391              BICS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;1041       } else {
;;;1042           CAN_REG_VALS(can_periph, flag) |= BIT(CAN_BIT_POS0(flag));
;;;1043       }
;;;1044   }
00001a  bd10              POP      {r4,pc}
                  |L13.28|
00001c  6801              LDR      r1,[r0,#0]            ;1042
00001e  4311              ORRS     r1,r1,r2              ;1042
000020  6001              STR      r1,[r0,#0]            ;1042
000022  bd10              POP      {r4,pc}
                          ENDP

                  |L13.36|
                          DCD      0x00010106

                          AREA ||i.can_interrupt_flag_get||, CODE, READONLY, ALIGN=1

                  can_interrupt_flag_get PROC
;;;993    */
;;;994    FlagStatus can_interrupt_flag_get(uint32_t can_periph, can_interrupt_flag_enum flag)
000000  b530              PUSH     {r4,r5,lr}
;;;995    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;996        uint32_t ret1 = RESET;
;;;997        uint32_t ret2 = RESET;
;;;998        
;;;999        /* get the staus of interrupt flag */
;;;1000       if (flag == CAN_INT_FLAG_RFF0) {
;;;1001           ret1 = can_receive_message_length_get(can_periph, CAN_FIFO0);
;;;1002       } else if (flag == CAN_INT_FLAG_RFF1) {
;;;1003           ret1 = can_receive_message_length_get(can_periph, CAN_FIFO1);
000006  2501              MOVS     r5,#1
000008  f5a34040          SUB      r0,r3,#0xc000         ;1000
00000c  38c2              SUBS     r0,r0,#0xc2           ;1000
00000e  d018              BEQ      |L14.66|
000010  f5a33080          SUB      r0,r3,#0x10000        ;1002
000014  38c5              SUBS     r0,r0,#0xc5           ;1002
000016  d019              BEQ      |L14.76|
;;;1004       } else if (flag == CAN_INT_FLAG_ERRN) {
000018  f5a330c0          SUB      r0,r3,#0x18000
00001c  38cb              SUBS     r0,r0,#0xcb
00001e  d01a              BEQ      |L14.86|
;;;1005           ret1 = can_error_get(can_periph);
;;;1006       } else {
;;;1007           ret1 = CAN_REG_VALS(can_periph, flag) & BIT(CAN_BIT_POS0(flag));
000020  eb043013          ADD      r0,r4,r3,LSR #12
000024  6800              LDR      r0,[r0,#0]
000026  f3c31184          UBFX     r1,r3,#6,#5
00002a  fa05f101          LSL      r1,r5,r1
00002e  4008              ANDS     r0,r0,r1
                  |L14.48|
;;;1008       }
;;;1009       /* get the staus of interrupt enale bit */
;;;1010       ret2 = CAN_INTEN(can_periph) & BIT(CAN_BIT_POS1(flag));
000030  6961              LDR      r1,[r4,#0x14]
000032  f003021f          AND      r2,r3,#0x1f
000036  4095              LSLS     r5,r5,r2
000038  4029              ANDS     r1,r1,r5
;;;1011       if(ret1 && ret2){
00003a  b180              CBZ      r0,|L14.94|
00003c  b179              CBZ      r1,|L14.94|
;;;1012           return SET;
00003e  2001              MOVS     r0,#1
;;;1013       }else{
;;;1014           return RESET;
;;;1015       }
;;;1016   }
000040  bd30              POP      {r4,r5,pc}
                  |L14.66|
000042  2100              MOVS     r1,#0                 ;1001
000044  4620              MOV      r0,r4                 ;1001
000046  f7fffffe          BL       can_receive_message_length_get
00004a  e7f1              B        |L14.48|
                  |L14.76|
00004c  2101              MOVS     r1,#1                 ;1003
00004e  4620              MOV      r0,r4                 ;1003
000050  f7fffffe          BL       can_receive_message_length_get
000054  e7ec              B        |L14.48|
                  |L14.86|
000056  4620              MOV      r0,r4                 ;1005
000058  f7fffffe          BL       can_error_get
00005c  e7e8              B        |L14.48|
                  |L14.94|
00005e  2000              MOVS     r0,#0                 ;1014
000060  bd30              POP      {r4,r5,pc}
;;;1017   
                          ENDP


                          AREA ||i.can_message_receive||, CODE, READONLY, ALIGN=1

                  can_message_receive PROC
;;;590    */
;;;591    void can_message_receive(uint32_t can_periph, uint8_t fifo_number, can_receive_message_struct* receive_message)
000000  b510              PUSH     {r4,lr}
;;;592    {
;;;593        /* get the frame format */
;;;594        receive_message->rx_ff = (uint8_t)(CAN_RFIFOMI_FF & CAN_RFIFOMI(can_periph, fifo_number));
000002  eb001301          ADD      r3,r0,r1,LSL #4
000006  f8d341b0          LDR      r4,[r3,#0x1b0]
00000a  f0040404          AND      r4,r4,#4
00000e  7214              STRB     r4,[r2,#8]
;;;595        if(CAN_FF_STANDARD == receive_message->rx_ff){
000010  2c00              CMP      r4,#0
000012  d02c              BEQ      |L15.110|
;;;596            /* get standard identifier */
;;;597            receive_message->rx_sfid = (uint32_t)(GET_RFIFOMI_SFID(CAN_RFIFOMI(can_periph, fifo_number)));
;;;598        }else{
;;;599            /* get extended identifier */
;;;600            receive_message->rx_efid = (uint32_t)(GET_RFIFOMI_EFID(CAN_RFIFOMI(can_periph, fifo_number)));
000014  f8d341b0          LDR      r4,[r3,#0x1b0]
000018  08e4              LSRS     r4,r4,#3
00001a  6054              STR      r4,[r2,#4]
                  |L15.28|
;;;601        }
;;;602        
;;;603        /* get frame type */
;;;604        receive_message->rx_ft = (uint8_t)(CAN_RFIFOMI_FT & CAN_RFIFOMI(can_periph, fifo_number));        
00001c  f50373d8          ADD      r3,r3,#0x1b0
000020  681c              LDR      r4,[r3,#0]
000022  f0040402          AND      r4,r4,#2
000026  7254              STRB     r4,[r2,#9]
;;;605        /* filtering index */
;;;606        receive_message->rx_fi = (uint8_t)(GET_RFIFOMP_FI(CAN_RFIFOMP(can_periph, fifo_number)));
000028  685c              LDR      r4,[r3,#4]
00002a  0a24              LSRS     r4,r4,#8
00002c  74d4              STRB     r4,[r2,#0x13]
;;;607        /* get recevie data length */
;;;608        receive_message->rx_dlen = (uint8_t)(GET_RFIFOMP_DLENC(CAN_RFIFOMP(can_periph, fifo_number)));
00002e  685c              LDR      r4,[r3,#4]
000030  f004040f          AND      r4,r4,#0xf
000034  7294              STRB     r4,[r2,#0xa]
;;;609        
;;;610        /* receive data */
;;;611        receive_message -> rx_data[0] = (uint8_t)(GET_RFIFOMDATA0_DB0(CAN_RFIFOMDATA0(can_periph, fifo_number)));
000036  689c              LDR      r4,[r3,#8]
000038  72d4              STRB     r4,[r2,#0xb]
;;;612        receive_message -> rx_data[1] = (uint8_t)(GET_RFIFOMDATA0_DB1(CAN_RFIFOMDATA0(can_periph, fifo_number)));
00003a  689c              LDR      r4,[r3,#8]
00003c  0a24              LSRS     r4,r4,#8
00003e  7314              STRB     r4,[r2,#0xc]
;;;613        receive_message -> rx_data[2] = (uint8_t)(GET_RFIFOMDATA0_DB2(CAN_RFIFOMDATA0(can_periph, fifo_number)));
000040  689c              LDR      r4,[r3,#8]
000042  0c24              LSRS     r4,r4,#16
000044  7354              STRB     r4,[r2,#0xd]
;;;614        receive_message -> rx_data[3] = (uint8_t)(GET_RFIFOMDATA0_DB3(CAN_RFIFOMDATA0(can_periph, fifo_number)));
000046  689c              LDR      r4,[r3,#8]
000048  0e24              LSRS     r4,r4,#24
00004a  7394              STRB     r4,[r2,#0xe]
;;;615        receive_message -> rx_data[4] = (uint8_t)(GET_RFIFOMDATA1_DB4(CAN_RFIFOMDATA1(can_periph, fifo_number)));
00004c  68dc              LDR      r4,[r3,#0xc]
00004e  73d4              STRB     r4,[r2,#0xf]
;;;616        receive_message -> rx_data[5] = (uint8_t)(GET_RFIFOMDATA1_DB5(CAN_RFIFOMDATA1(can_periph, fifo_number)));
000050  68dc              LDR      r4,[r3,#0xc]
000052  0a24              LSRS     r4,r4,#8
000054  7414              STRB     r4,[r2,#0x10]
;;;617        receive_message -> rx_data[6] = (uint8_t)(GET_RFIFOMDATA1_DB6(CAN_RFIFOMDATA1(can_periph, fifo_number)));
000056  68dc              LDR      r4,[r3,#0xc]
000058  0c24              LSRS     r4,r4,#16
00005a  7454              STRB     r4,[r2,#0x11]
;;;618        receive_message -> rx_data[7] = (uint8_t)(GET_RFIFOMDATA1_DB7(CAN_RFIFOMDATA1(can_periph, fifo_number)));
00005c  68db              LDR      r3,[r3,#0xc]
00005e  0e1b              LSRS     r3,r3,#24
000060  7493              STRB     r3,[r2,#0x12]
;;;619        
;;;620        /* release FIFO */
;;;621        if(CAN_FIFO0 == fifo_number){
000062  b149              CBZ      r1,|L15.120|
;;;622            CAN_RFIFO0(can_periph) |= CAN_RFIFO0_RFD0;
;;;623        }else{
;;;624            CAN_RFIFO1(can_periph) |= CAN_RFIFO1_RFD1;
000064  6901              LDR      r1,[r0,#0x10]
000066  f0410120          ORR      r1,r1,#0x20
00006a  6101              STR      r1,[r0,#0x10]
;;;625        }
;;;626    }
00006c  bd10              POP      {r4,pc}
                  |L15.110|
00006e  f8d341b0          LDR      r4,[r3,#0x1b0]        ;597
000072  0d64              LSRS     r4,r4,#21             ;597
000074  6014              STR      r4,[r2,#0]            ;597
000076  e7d1              B        |L15.28|
                  |L15.120|
000078  68c1              LDR      r1,[r0,#0xc]          ;622
00007a  f0410120          ORR      r1,r1,#0x20           ;622
00007e  60c1              STR      r1,[r0,#0xc]          ;622
000080  bd10              POP      {r4,pc}
;;;627    
                          ENDP


                          AREA ||i.can_message_transmit||, CODE, READONLY, ALIGN=1

                  can_message_transmit PROC
;;;438    */
;;;439    uint8_t can_message_transmit(uint32_t can_periph, can_trasnmit_message_struct* transmit_message)
000000  b530              PUSH     {r4,r5,lr}
;;;440    {
000002  4602              MOV      r2,r0
;;;441        uint8_t mailbox_number = CAN_MAILBOX0;
000004  2000              MOVS     r0,#0
;;;442    
;;;443        /* select one empty mailbox */
;;;444        if(CAN_TSTAT_TME0 == (CAN_TSTAT(can_periph)&CAN_TSTAT_TME0)){
000006  6893              LDR      r3,[r2,#8]
000008  015b              LSLS     r3,r3,#5
00000a  d40a              BMI      |L16.34|
;;;445            mailbox_number = CAN_MAILBOX0;
;;;446        }else if(CAN_TSTAT_TME1 == (CAN_TSTAT(can_periph)&CAN_TSTAT_TME1)){
00000c  6890              LDR      r0,[r2,#8]
00000e  0100              LSLS     r0,r0,#4
000010  d501              BPL      |L16.22|
;;;447            mailbox_number = CAN_MAILBOX1;
000012  2001              MOVS     r0,#1
000014  e005              B        |L16.34|
                  |L16.22|
;;;448        }else if(CAN_TSTAT_TME2 == (CAN_TSTAT(can_periph)&CAN_TSTAT_TME2)){
000016  6890              LDR      r0,[r2,#8]
000018  00c0              LSLS     r0,r0,#3
00001a  d501              BPL      |L16.32|
;;;449            mailbox_number = CAN_MAILBOX2;
00001c  2002              MOVS     r0,#2
00001e  e000              B        |L16.34|
                  |L16.32|
;;;450        }else{
;;;451            mailbox_number = CAN_NOMAILBOX;
000020  2003              MOVS     r0,#3
                  |L16.34|
;;;452        }
;;;453        /* return no mailbox empty */
;;;454        if(CAN_NOMAILBOX == mailbox_number){
000022  2803              CMP      r0,#3
000024  d038              BEQ      |L16.152|
;;;455            return CAN_NOMAILBOX;
;;;456        }
;;;457        
;;;458        CAN_TMI(can_periph, mailbox_number) &= CAN_TMI_TEN;
000026  eb021200          ADD      r2,r2,r0,LSL #4
00002a  f8d23180          LDR      r3,[r2,#0x180]
00002e  f0030301          AND      r3,r3,#1
000032  f8c23180          STR      r3,[r2,#0x180]
;;;459        if(CAN_FF_STANDARD == transmit_message->tx_ff){
000036  7a0b              LDRB     r3,[r1,#8]
000038  b383              CBZ      r3,|L16.156|
;;;460            /* set transmit mailbox standard identifier */
;;;461            CAN_TMI(can_periph, mailbox_number) |= (uint32_t)(TMI_SFID(transmit_message->tx_sfid) | \
;;;462                                                    transmit_message->tx_ft);
;;;463        }else{
;;;464            /* set transmit mailbox extended identifier */
;;;465            CAN_TMI(can_periph, mailbox_number) |= (uint32_t)(TMI_EFID(transmit_message->tx_efid) | \
00003a  f8d24180          LDR      r4,[r2,#0x180]
00003e  684d              LDR      r5,[r1,#4]
000040  431c              ORRS     r4,r4,r3
000042  7a4b              LDRB     r3,[r1,#9]
000044  ea4303c5          ORR      r3,r3,r5,LSL #3
000048  431c              ORRS     r4,r4,r3
00004a  f8c24180          STR      r4,[r2,#0x180]
                  |L16.78|
;;;466                                                    transmit_message->tx_ff | \
;;;467                                                    transmit_message->tx_ft);
;;;468        }
;;;469        /* set the data length */
;;;470        CAN_TMP(can_periph, mailbox_number) &= ~CAN_TMP_DLENC;
00004e  f50272c0          ADD      r2,r2,#0x180
000052  6853              LDR      r3,[r2,#4]
000054  f023030f          BIC      r3,r3,#0xf
000058  6053              STR      r3,[r2,#4]
;;;471        CAN_TMP(can_periph, mailbox_number) |= transmit_message->tx_dlen;
00005a  6853              LDR      r3,[r2,#4]
00005c  7a8c              LDRB     r4,[r1,#0xa]
00005e  4323              ORRS     r3,r3,r4
000060  6053              STR      r3,[r2,#4]
;;;472        /* set the data */
;;;473        CAN_TMDATA0(can_periph, mailbox_number) = TMDATA0_DB3(transmit_message->tx_data[3]) | \
000062  7acb              LDRB     r3,[r1,#0xb]
000064  7b8c              LDRB     r4,[r1,#0xe]
000066  7b0d              LDRB     r5,[r1,#0xc]
000068  ea436304          ORR      r3,r3,r4,LSL #24
00006c  7b4c              LDRB     r4,[r1,#0xd]
00006e  0424              LSLS     r4,r4,#16
000070  ea442405          ORR      r4,r4,r5,LSL #8
000074  4323              ORRS     r3,r3,r4
000076  6093              STR      r3,[r2,#8]
;;;474                                                  TMDATA0_DB2(transmit_message->tx_data[2]) | \
;;;475                                                  TMDATA0_DB1(transmit_message->tx_data[1]) | \
;;;476                                                  TMDATA0_DB0(transmit_message->tx_data[0]);
;;;477        CAN_TMDATA1(can_periph, mailbox_number) = TMDATA1_DB7(transmit_message->tx_data[7]) | \
000078  7bcb              LDRB     r3,[r1,#0xf]
00007a  7c8c              LDRB     r4,[r1,#0x12]
00007c  ea436304          ORR      r3,r3,r4,LSL #24
000080  7c4c              LDRB     r4,[r1,#0x11]
000082  7c09              LDRB     r1,[r1,#0x10]
000084  0424              LSLS     r4,r4,#16
000086  ea442101          ORR      r1,r4,r1,LSL #8
00008a  430b              ORRS     r3,r3,r1
00008c  60d3              STR      r3,[r2,#0xc]
;;;478                                                  TMDATA1_DB6(transmit_message->tx_data[6]) | \
;;;479                                                  TMDATA1_DB5(transmit_message->tx_data[5]) | \
;;;480                                                  TMDATA1_DB4(transmit_message->tx_data[4]);
;;;481        /* enable transmission */
;;;482        CAN_TMI(can_periph, mailbox_number) |= CAN_TMI_TEN;
00008e  6811              LDR      r1,[r2,#0]
000090  f0410101          ORR      r1,r1,#1
000094  6011              STR      r1,[r2,#0]
;;;483    
;;;484        return mailbox_number;
;;;485    }
000096  bd30              POP      {r4,r5,pc}
                  |L16.152|
000098  2003              MOVS     r0,#3                 ;455
00009a  bd30              POP      {r4,r5,pc}
                  |L16.156|
00009c  e7ff              B        |L16.158|
                  |L16.158|
00009e  f8d23180          LDR      r3,[r2,#0x180]        ;461
0000a2  7a4c              LDRB     r4,[r1,#9]            ;461
0000a4  4323              ORRS     r3,r3,r4              ;461
0000a6  880c              LDRH     r4,[r1,#0]            ;461
0000a8  ea435344          ORR      r3,r3,r4,LSL #21      ;461
0000ac  f8c23180          STR      r3,[r2,#0x180]        ;461
0000b0  e7cd              B        |L16.78|
;;;486    
                          ENDP


                          AREA ||i.can_receive_error_number_get||, CODE, READONLY, ALIGN=1

                  can_receive_error_number_get PROC
;;;798    */
;;;799    uint8_t can_receive_error_number_get(uint32_t can_periph)
000000  6980              LDR      r0,[r0,#0x18]
;;;800    {
;;;801        uint8_t val;
;;;802        
;;;803        /* get error count */
;;;804        val = (uint8_t)(GET_ERR_RECNT(CAN_ERR(can_periph)));
000002  0e00              LSRS     r0,r0,#24
;;;805        return val;
;;;806    }
000004  4770              BX       lr
;;;807    
                          ENDP


                          AREA ||i.can_receive_message_length_get||, CODE, READONLY, ALIGN=1

                  can_receive_message_length_get PROC
;;;659    */
;;;660    uint8_t can_receive_message_length_get(uint32_t can_periph, uint8_t fifo_number)
000000  4602              MOV      r2,r0
;;;661    {
;;;662        uint8_t val = 0U;
000002  2000              MOVS     r0,#0
;;;663        
;;;664        if(CAN_FIFO0 == fifo_number){
000004  2900              CMP      r1,#0
000006  d005              BEQ      |L18.20|
;;;665            /* FIFO0 */
;;;666            val = (uint8_t)(CAN_RFIFO0(can_periph) & CAN_RFIF_RFL_MASK);
;;;667        }else if(CAN_FIFO1 == fifo_number){
000008  2901              CMP      r1,#1
00000a  d102              BNE      |L18.18|
;;;668            /* FIFO1 */
;;;669            val = (uint8_t)(CAN_RFIFO1(can_periph) & CAN_RFIF_RFL_MASK);
00000c  6910              LDR      r0,[r2,#0x10]
00000e  f0000003          AND      r0,r0,#3
                  |L18.18|
;;;670        }else{
;;;671            /* illegal parameters */
;;;672        }
;;;673        return val;
;;;674    }
000012  4770              BX       lr
                  |L18.20|
000014  68d0              LDR      r0,[r2,#0xc]          ;666
000016  f0000003          AND      r0,r0,#3              ;666
00001a  4770              BX       lr
;;;675    
                          ENDP


                          AREA ||i.can_struct_para_init||, CODE, READONLY, ALIGN=1

                  can_struct_para_init PROC
;;;78     */
;;;79     void can_struct_para_init(can_struct_type_enum type, void* p_struct)
000000  2200              MOVS     r2,#0
;;;80     {
;;;81         uint8_t i;
;;;82         
;;;83         /* get type of the struct */
;;;84         switch(type){
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L19.20|
000006  2801              CMP      r0,#1
000008  d013              BEQ      |L19.50|
00000a  2802              CMP      r0,#2
00000c  d01c              BEQ      |L19.72|
00000e  2803              CMP      r0,#3
000010  d027              BEQ      |L19.98|
                  |L19.18|
;;;85             /* used for can_init() */
;;;86             case CAN_INIT_STRUCT:
;;;87                 ((can_parameter_struct*)p_struct)->auto_bus_off_recovery = DISABLE;
;;;88                 ((can_parameter_struct*)p_struct)->no_auto_retrans = DISABLE;
;;;89                 ((can_parameter_struct*)p_struct)->auto_wake_up = DISABLE;
;;;90                 ((can_parameter_struct*)p_struct)->prescaler = 0x03FFU; 
;;;91                 ((can_parameter_struct*)p_struct)->rec_fifo_overwrite = DISABLE; 
;;;92                 ((can_parameter_struct*)p_struct)->resync_jump_width = CAN_BT_SJW_1TQ;
;;;93                 ((can_parameter_struct*)p_struct)->time_segment_1 = CAN_BT_BS1_3TQ;
;;;94                 ((can_parameter_struct*)p_struct)->time_segment_2 = CAN_BT_BS2_1TQ;
;;;95                 ((can_parameter_struct*)p_struct)->time_triggered = DISABLE;
;;;96                 ((can_parameter_struct*)p_struct)->trans_fifo_order = DISABLE;
;;;97                 ((can_parameter_struct*)p_struct)->working_mode = CAN_NORMAL_MODE;
;;;98                 
;;;99                 break;
;;;100            /* used for can_filter_init() */
;;;101            case CAN_FILTER_STRUCT:
;;;102                ((can_filter_parameter_struct*)p_struct)->filter_bits = CAN_FILTERBITS_32BIT;
;;;103                ((can_filter_parameter_struct*)p_struct)->filter_enable = DISABLE;
;;;104                ((can_filter_parameter_struct*)p_struct)->filter_fifo_number = CAN_FIFO0;
;;;105                ((can_filter_parameter_struct*)p_struct)->filter_list_high = 0x0000U;
;;;106                ((can_filter_parameter_struct*)p_struct)->filter_list_low = 0x0000U;
;;;107                ((can_filter_parameter_struct*)p_struct)->filter_mask_high = 0x0000U;
;;;108                ((can_filter_parameter_struct*)p_struct)->filter_mask_low = 0x0000U;
;;;109                ((can_filter_parameter_struct*)p_struct)->filter_mode = CAN_FILTERMODE_MASK;
;;;110                ((can_filter_parameter_struct*)p_struct)->filter_number = 0U;
;;;111    
;;;112                break;
;;;113            /* used for can_message_transmit() */
;;;114            case CAN_TX_MESSAGE_STRUCT:
;;;115                for(i = 0U; i < 8U; i++){
;;;116                    ((can_trasnmit_message_struct*)p_struct)->tx_data[i] = 0U;
;;;117                }
;;;118                
;;;119                ((can_trasnmit_message_struct*)p_struct)->tx_dlen = 0u;
;;;120                ((can_trasnmit_message_struct*)p_struct)->tx_efid = 0U;
;;;121                ((can_trasnmit_message_struct*)p_struct)->tx_ff = (uint8_t)CAN_FF_STANDARD;
;;;122                ((can_trasnmit_message_struct*)p_struct)->tx_ft = (uint8_t)CAN_FT_DATA;
;;;123                ((can_trasnmit_message_struct*)p_struct)->tx_sfid = 0U;
;;;124                
;;;125                break;
;;;126            /* used for can_message_receive() */
;;;127            case CAN_RX_MESSAGE_STRUCT:
;;;128                for(i = 0U; i < 8U; i++){
;;;129                    ((can_receive_message_struct*)p_struct)->rx_data[i] = 0U;
;;;130                }
;;;131                
;;;132                ((can_receive_message_struct*)p_struct)->rx_dlen = 0U;
;;;133                ((can_receive_message_struct*)p_struct)->rx_efid = 0U;
;;;134                ((can_receive_message_struct*)p_struct)->rx_ff = (uint8_t)CAN_FF_STANDARD;
;;;135                ((can_receive_message_struct*)p_struct)->rx_fi = 0U;
;;;136                ((can_receive_message_struct*)p_struct)->rx_ft = (uint8_t)CAN_FT_DATA;
;;;137                ((can_receive_message_struct*)p_struct)->rx_sfid = 0U;
;;;138                
;;;139                break;
;;;140    
;;;141            default:
;;;142                CAN_ERROR_HANDLE("parameter is invalid \r\n");
000012  e7fe              B        |L19.18|
                  |L19.20|
000014  714a              STRB     r2,[r1,#5]            ;87
000016  71ca              STRB     r2,[r1,#7]            ;88
000018  718a              STRB     r2,[r1,#6]            ;89
00001a  f24030ff          MOV      r0,#0x3ff             ;90
00001e  8148              STRH     r0,[r1,#0xa]          ;90
000020  720a              STRB     r2,[r1,#8]            ;91
000022  704a              STRB     r2,[r1,#1]            ;92
000024  2002              MOVS     r0,#2                 ;93
000026  7088              STRB     r0,[r1,#2]            ;93
000028  70ca              STRB     r2,[r1,#3]            ;94
00002a  710a              STRB     r2,[r1,#4]            ;95
00002c  724a              STRB     r2,[r1,#9]            ;96
00002e  700a              STRB     r2,[r1,#0]            ;97
;;;143        }
;;;144    }
000030  4770              BX       lr
                  |L19.50|
000032  2001              MOVS     r0,#1                 ;102
000034  81c8              STRH     r0,[r1,#0xe]          ;102
000036  740a              STRB     r2,[r1,#0x10]         ;103
000038  810a              STRH     r2,[r1,#8]            ;104
00003a  800a              STRH     r2,[r1,#0]            ;105
00003c  804a              STRH     r2,[r1,#2]            ;106
00003e  808a              STRH     r2,[r1,#4]            ;107
000040  80ca              STRH     r2,[r1,#6]            ;108
000042  818a              STRH     r2,[r1,#0xc]          ;109
000044  814a              STRH     r2,[r1,#0xa]          ;110
000046  4770              BX       lr
                  |L19.72|
000048  2000              MOVS     r0,#0                 ;115
                  |L19.74|
00004a  180b              ADDS     r3,r1,r0              ;116
00004c  72da              STRB     r2,[r3,#0xb]          ;116
00004e  1c40              ADDS     r0,r0,#1              ;115
000050  b2c0              UXTB     r0,r0                 ;115
000052  2808              CMP      r0,#8                 ;115
000054  d3f9              BCC      |L19.74|
000056  728a              STRB     r2,[r1,#0xa]          ;119
000058  604a              STR      r2,[r1,#4]            ;120
00005a  720a              STRB     r2,[r1,#8]            ;121
00005c  724a              STRB     r2,[r1,#9]            ;122
00005e  600a              STR      r2,[r1,#0]            ;123
000060  4770              BX       lr
                  |L19.98|
000062  2000              MOVS     r0,#0                 ;128
                  |L19.100|
000064  180b              ADDS     r3,r1,r0              ;129
000066  72da              STRB     r2,[r3,#0xb]          ;129
000068  1c40              ADDS     r0,r0,#1              ;128
00006a  b2c0              UXTB     r0,r0                 ;128
00006c  2808              CMP      r0,#8                 ;128
00006e  d3f9              BCC      |L19.100|
000070  728a              STRB     r2,[r1,#0xa]          ;132
000072  604a              STR      r2,[r1,#4]            ;133
000074  720a              STRB     r2,[r1,#8]            ;134
000076  74ca              STRB     r2,[r1,#0x13]         ;135
000078  724a              STRB     r2,[r1,#9]            ;136
00007a  600a              STR      r2,[r1,#0]            ;137
00007c  4770              BX       lr
;;;145    
                          ENDP


                          AREA ||i.can_time_trigger_mode_disable||, CODE, READONLY, ALIGN=1

                  can_time_trigger_mode_disable PROC
;;;412    */
;;;413    void can_time_trigger_mode_disable(uint32_t can_periph)
000000  6801              LDR      r1,[r0,#0]
;;;414    {
;;;415        uint8_t mailbox_number; 
;;;416        
;;;417        /* disable the TCC mode */
;;;418        CAN_CTL(can_periph) &= ~CAN_CTL_TTC;
000002  f0210180          BIC      r1,r1,#0x80
000006  6001              STR      r1,[r0,#0]
;;;419        /* reset TSEN bits */
;;;420        for(mailbox_number = 0U; mailbox_number < 3U; mailbox_number++){
000008  2100              MOVS     r1,#0
                  |L20.10|
;;;421            CAN_TMP(can_periph, mailbox_number) &= ~CAN_TMP_TSEN;
00000a  eb001201          ADD      r2,r0,r1,LSL #4
00000e  f8d23184          LDR      r3,[r2,#0x184]
000012  f4237380          BIC      r3,r3,#0x100
000016  f8c23184          STR      r3,[r2,#0x184]
00001a  1c49              ADDS     r1,r1,#1              ;420
00001c  b2c9              UXTB     r1,r1                 ;420
00001e  2903              CMP      r1,#3                 ;420
000020  d3f3              BCC      |L20.10|
;;;422        }
;;;423    }
000022  4770              BX       lr
;;;424    
                          ENDP


                          AREA ||i.can_time_trigger_mode_enable||, CODE, READONLY, ALIGN=1

                  can_time_trigger_mode_enable PROC
;;;393    */
;;;394    void can_time_trigger_mode_enable(uint32_t can_periph)
000000  6801              LDR      r1,[r0,#0]
;;;395    {
;;;396        uint8_t mailbox_number;
;;;397        
;;;398        /* enable the tcc mode */
;;;399        CAN_CTL(can_periph) |= CAN_CTL_TTC;
000002  f0410180          ORR      r1,r1,#0x80
000006  6001              STR      r1,[r0,#0]
;;;400        /* enable time stamp */
;;;401        for(mailbox_number = 0U; mailbox_number < 3U; mailbox_number++){
000008  2100              MOVS     r1,#0
                  |L21.10|
;;;402            CAN_TMP(can_periph, mailbox_number) |= CAN_TMP_TSEN;
00000a  eb001201          ADD      r2,r0,r1,LSL #4
00000e  f8d23184          LDR      r3,[r2,#0x184]
000012  f4437380          ORR      r3,r3,#0x100
000016  f8c23184          STR      r3,[r2,#0x184]
00001a  1c49              ADDS     r1,r1,#1              ;401
00001c  b2c9              UXTB     r1,r1                 ;401
00001e  2903              CMP      r1,#3                 ;401
000020  d3f3              BCC      |L21.10|
;;;403        }
;;;404    }
000022  4770              BX       lr
;;;405    
                          ENDP


                          AREA ||i.can_transmission_stop||, CODE, READONLY, ALIGN=1

                  can_transmission_stop PROC
;;;555    */
;;;556    void can_transmission_stop(uint32_t can_periph, uint8_t mailbox_number)
000000  2900              CMP      r1,#0
;;;557    {
000002  d00b              BEQ      |L22.28|
;;;558        if(CAN_MAILBOX0 == mailbox_number){
;;;559            CAN_TSTAT(can_periph) |= CAN_TSTAT_MST0;
;;;560            while(CAN_TSTAT_MST0 == (CAN_TSTAT(can_periph) & CAN_TSTAT_MST0)){
;;;561            }
;;;562        }else if(CAN_MAILBOX1 == mailbox_number){
000004  2901              CMP      r1,#1
000006  d011              BEQ      |L22.44|
;;;563            CAN_TSTAT(can_periph) |= CAN_TSTAT_MST1;
;;;564            while(CAN_TSTAT_MST1 == (CAN_TSTAT(can_periph) & CAN_TSTAT_MST1)){
;;;565            }
;;;566        }else if(CAN_MAILBOX2 == mailbox_number){
000008  2902              CMP      r1,#2
00000a  d106              BNE      |L22.26|
;;;567            CAN_TSTAT(can_periph) |= CAN_TSTAT_MST2;
00000c  6881              LDR      r1,[r0,#8]
00000e  f4410100          ORR      r1,r1,#0x800000
000012  6081              STR      r1,[r0,#8]
                  |L22.20|
;;;568            while(CAN_TSTAT_MST2 == (CAN_TSTAT(can_periph) & CAN_TSTAT_MST2)){
000014  6881              LDR      r1,[r0,#8]
000016  0209              LSLS     r1,r1,#8
000018  d4fc              BMI      |L22.20|
                  |L22.26|
;;;569            }
;;;570        }else{
;;;571            /* illegal parameters */
;;;572        }
;;;573    }
00001a  4770              BX       lr
                  |L22.28|
00001c  6881              LDR      r1,[r0,#8]            ;559
00001e  f0410180          ORR      r1,r1,#0x80           ;559
000022  6081              STR      r1,[r0,#8]            ;559
                  |L22.36|
000024  6881              LDR      r1,[r0,#8]            ;560
000026  0609              LSLS     r1,r1,#24             ;560
000028  d4fc              BMI      |L22.36|
00002a  4770              BX       lr
                  |L22.44|
00002c  6881              LDR      r1,[r0,#8]            ;563
00002e  f4414100          ORR      r1,r1,#0x8000         ;563
000032  6081              STR      r1,[r0,#8]            ;563
                  |L22.52|
000034  6881              LDR      r1,[r0,#8]            ;564
000036  0409              LSLS     r1,r1,#16             ;564
000038  d4fc              BMI      |L22.52|
00003a  4770              BX       lr
;;;574    
                          ENDP


                          AREA ||i.can_transmit_error_number_get||, CODE, READONLY, ALIGN=1

                  can_transmit_error_number_get PROC
;;;814    */
;;;815    uint8_t can_transmit_error_number_get(uint32_t can_periph)
000000  6980              LDR      r0,[r0,#0x18]
;;;816    {
;;;817        uint8_t val;
;;;818        
;;;819        val = (uint8_t)(GET_ERR_TECNT(CAN_ERR(can_periph)));
000002  f3c04007          UBFX     r0,r0,#16,#8
;;;820        return val;
;;;821    }
000006  4770              BX       lr
;;;822    
                          ENDP


                          AREA ||i.can_transmit_states||, CODE, READONLY, ALIGN=2

                  can_transmit_states PROC
;;;496    */
;;;497    can_transmit_state_enum can_transmit_states(uint32_t can_periph, uint8_t mailbox_number)
000000  4603              MOV      r3,r0
;;;498    {
;;;499        can_transmit_state_enum state = CAN_TRANSMIT_FAILED;
000002  2000              MOVS     r0,#0
;;;500        uint32_t val = 0U;
000004  2200              MOVS     r2,#0
;;;501        
;;;502        /* check selected mailbox state */    
;;;503        switch(mailbox_number){
000006  2900              CMP      r1,#0
000008  d004              BEQ      |L24.20|
00000a  2901              CMP      r1,#1
00000c  d006              BEQ      |L24.28|
00000e  2902              CMP      r1,#2
000010  d10b              BNE      |L24.42|
000012  e007              B        |L24.36|
                  |L24.20|
;;;504        /* mailbox0 */
;;;505        case CAN_MAILBOX0:
;;;506            val = CAN_TSTAT(can_periph) & (CAN_TSTAT_MTF0 | CAN_TSTAT_MTFNERR0 | CAN_TSTAT_TME0);
000014  689a              LDR      r2,[r3,#8]
000016  490e              LDR      r1,|L24.80|
000018  400a              ANDS     r2,r2,r1
;;;507            break;
00001a  e006              B        |L24.42|
                  |L24.28|
;;;508        /* mailbox1 */
;;;509        case CAN_MAILBOX1:
;;;510            val = CAN_TSTAT(can_periph) & (CAN_TSTAT_MTF1 | CAN_TSTAT_MTFNERR1 | CAN_TSTAT_TME1);
00001c  689a              LDR      r2,[r3,#8]
00001e  490d              LDR      r1,|L24.84|
000020  400a              ANDS     r2,r2,r1
;;;511            break;
000022  e002              B        |L24.42|
                  |L24.36|
;;;512        /* mailbox2 */
;;;513        case CAN_MAILBOX2:
;;;514            val = CAN_TSTAT(can_periph) & (CAN_TSTAT_MTF2 | CAN_TSTAT_MTFNERR2 | CAN_TSTAT_TME2);
000024  689a              LDR      r2,[r3,#8]
000026  490c              LDR      r1,|L24.88|
000028  400a              ANDS     r2,r2,r1
                  |L24.42|
;;;515            break;
;;;516        default:
;;;517            val = CAN_TRANSMIT_FAILED;
;;;518            break;
;;;519        }
;;;520        
;;;521        switch(val){
00002a  b15a              CBZ      r2,|L24.68|
00002c  f1a26280          SUB      r2,r2,#0x4000000
000030  1ed2              SUBS     r2,r2,#3
000032  d009              BEQ      |L24.72|
000034  4909              LDR      r1,|L24.92|
000036  1851              ADDS     r1,r2,r1
000038  d008              BEQ      |L24.76|
00003a  4a09              LDR      r2,|L24.96|
00003c  42d1              CMN      r1,r2
00003e  d100              BNE      |L24.66|
;;;522            /* transmit pending */
;;;523        case (CAN_STATE_PENDING): 
;;;524            state = CAN_TRANSMIT_PENDING;
;;;525            break;
;;;526            /* mailbox0 transmit succeeded */
;;;527        case (CAN_TSTAT_MTF0 | CAN_TSTAT_MTFNERR0 | CAN_TSTAT_TME0):
;;;528            state = CAN_TRANSMIT_OK;
;;;529            break;
;;;530            /* mailbox1 transmit succeeded */
;;;531        case (CAN_TSTAT_MTF1 | CAN_TSTAT_MTFNERR1 | CAN_TSTAT_TME1):
;;;532            state = CAN_TRANSMIT_OK;
;;;533            break;
;;;534            /* mailbox2 transmit succeeded */
;;;535        case (CAN_TSTAT_MTF2 | CAN_TSTAT_MTFNERR2 | CAN_TSTAT_TME2):
;;;536            state = CAN_TRANSMIT_OK;
000040  2001              MOVS     r0,#1
                  |L24.66|
;;;537            break;
;;;538            /* transmit failed */
;;;539        default: 
;;;540            state = CAN_TRANSMIT_FAILED;
;;;541            break;
;;;542        }
;;;543        return state;
;;;544    }
000042  4770              BX       lr
                  |L24.68|
000044  2002              MOVS     r0,#2                 ;524
000046  4770              BX       lr
                  |L24.72|
000048  2001              MOVS     r0,#1                 ;528
00004a  4770              BX       lr
                  |L24.76|
00004c  2001              MOVS     r0,#1                 ;532
00004e  4770              BX       lr
;;;545    
                          ENDP

                  |L24.80|
                          DCD      0x04000003
                  |L24.84|
                          DCD      0x08000300
                  |L24.88|
                          DCD      0x10030000
                  |L24.92|
                          DCD      0xfbfffd03
                  |L24.96|
                          DCD      0xf7fd0300

                          AREA ||i.can_wakeup||, CODE, READONLY, ALIGN=1

                  can_wakeup PROC
;;;746    */
;;;747    ErrStatus can_wakeup(uint32_t can_periph)
000000  f64f71ff          MOV      r1,#0xffff
;;;748    {
;;;749        ErrStatus flag = ERROR;
;;;750        uint32_t timeout = CAN_TIMEOUT;
;;;751        
;;;752        /* wakeup */
;;;753        CAN_CTL(can_periph) &= ~CAN_CTL_SLPWMOD;
000004  6802              LDR      r2,[r0,#0]
000006  f0220202          BIC      r2,r2,#2
00000a  6002              STR      r2,[r0,#0]
00000c  e000              B        |L25.16|
                  |L25.14|
;;;754        
;;;755        while((0U != (CAN_STAT(can_periph) & CAN_STAT_SLPWS)) && (0x00U != timeout)){
;;;756            timeout--;
00000e  1e49              SUBS     r1,r1,#1
                  |L25.16|
000010  6842              LDR      r2,[r0,#4]            ;755
000012  0792              LSLS     r2,r2,#30             ;755
000014  d501              BPL      |L25.26|
000016  2900              CMP      r1,#0                 ;755
000018  d1f9              BNE      |L25.14|
                  |L25.26|
;;;757        }
;;;758        /* check state */
;;;759        if(0U != (CAN_STAT(can_periph) & CAN_STAT_SLPWS)){
00001a  6840              LDR      r0,[r0,#4]
00001c  0780              LSLS     r0,r0,#30
00001e  d501              BPL      |L25.36|
;;;760            flag = ERROR;
000020  2000              MOVS     r0,#0
;;;761        }else{
;;;762            flag = SUCCESS;
;;;763        }
;;;764        return flag;
;;;765    }
000022  4770              BX       lr
                  |L25.36|
000024  2001              MOVS     r0,#1                 ;762
000026  4770              BX       lr
;;;766    
                          ENDP


                          AREA ||i.can_working_mode_set||, CODE, READONLY, ALIGN=1

                  can_working_mode_set PROC
;;;687    */
;;;688    ErrStatus can_working_mode_set(uint32_t can_periph, uint8_t working_mode)
000000  2300              MOVS     r3,#0
;;;689    {
;;;690        ErrStatus flag = ERROR;
;;;691        /* timeout for IWS or also for SLPWS bits */
;;;692        uint32_t timeout = CAN_TIMEOUT; 
000002  f64f72ff          MOV      r2,#0xffff
;;;693        
;;;694        if(CAN_MODE_INITIALIZE == working_mode){
000006  2901              CMP      r1,#1
000008  d004              BEQ      |L26.20|
;;;695            /* disable sleep mode */
;;;696            CAN_CTL(can_periph) &= (~(uint32_t)CAN_CTL_SLPWMOD);
;;;697            /* set initialize mode */
;;;698            CAN_CTL(can_periph) |= (uint8_t)CAN_CTL_IWMOD;
;;;699            /* wait the acknowledge */
;;;700            while((CAN_STAT_IWS != (CAN_STAT(can_periph) & CAN_STAT_IWS)) && (0U != timeout)){
;;;701                timeout--;
;;;702            }
;;;703            if(CAN_STAT_IWS != (CAN_STAT(can_periph) & CAN_STAT_IWS)){
;;;704                flag = ERROR;
;;;705            }else{
;;;706                flag = SUCCESS;
;;;707            }
;;;708        }else if(CAN_MODE_NORMAL == working_mode){
00000a  2902              CMP      r1,#2
00000c  d018              BEQ      |L26.64|
;;;709            /* enter normal mode */
;;;710            CAN_CTL(can_periph) &= ~(uint32_t)(CAN_CTL_SLPWMOD | CAN_CTL_IWMOD);
;;;711            /* wait the acknowledge */
;;;712            while((0U != (CAN_STAT(can_periph) & (CAN_STAT_IWS | CAN_STAT_SLPWS))) && (0U != timeout)){
;;;713                timeout--;
;;;714            }
;;;715            if(0U != (CAN_STAT(can_periph) & (CAN_STAT_IWS | CAN_STAT_SLPWS))){
;;;716                flag = ERROR;
;;;717            }else{
;;;718                flag = SUCCESS;
;;;719            }
;;;720        }else if(CAN_MODE_SLEEP == working_mode){
00000e  2904              CMP      r1,#4
000010  d028              BEQ      |L26.100|
000012  e03c              B        |L26.142|
                  |L26.20|
000014  6801              LDR      r1,[r0,#0]            ;696
000016  f0210102          BIC      r1,r1,#2              ;696
00001a  6001              STR      r1,[r0,#0]            ;696
00001c  6801              LDR      r1,[r0,#0]            ;698
00001e  f0410101          ORR      r1,r1,#1              ;698
000022  6001              STR      r1,[r0,#0]            ;698
000024  e000              B        |L26.40|
                  |L26.38|
000026  1e52              SUBS     r2,r2,#1              ;701
                  |L26.40|
000028  6841              LDR      r1,[r0,#4]            ;700
00002a  07c9              LSLS     r1,r1,#31             ;700
00002c  d101              BNE      |L26.50|
00002e  2a00              CMP      r2,#0                 ;700
000030  d1f9              BNE      |L26.38|
                  |L26.50|
000032  6840              LDR      r0,[r0,#4]            ;703
000034  07c0              LSLS     r0,r0,#31             ;703
000036  d001              BEQ      |L26.60|
000038  2301              MOVS     r3,#1                 ;706
00003a  e028              B        |L26.142|
                  |L26.60|
00003c  2300              MOVS     r3,#0                 ;704
00003e  e026              B        |L26.142|
                  |L26.64|
000040  6801              LDR      r1,[r0,#0]            ;710
000042  f0210103          BIC      r1,r1,#3              ;710
000046  6001              STR      r1,[r0,#0]            ;710
000048  e000              B        |L26.76|
                  |L26.74|
00004a  1e52              SUBS     r2,r2,#1              ;713
                  |L26.76|
00004c  6841              LDR      r1,[r0,#4]            ;712
00004e  0789              LSLS     r1,r1,#30             ;712
000050  d001              BEQ      |L26.86|
000052  2a00              CMP      r2,#0                 ;712
000054  d1f9              BNE      |L26.74|
                  |L26.86|
000056  6840              LDR      r0,[r0,#4]            ;715
000058  0780              LSLS     r0,r0,#30             ;715
00005a  d001              BEQ      |L26.96|
00005c  2300              MOVS     r3,#0                 ;716
00005e  e016              B        |L26.142|
                  |L26.96|
000060  2301              MOVS     r3,#1                 ;718
000062  e014              B        |L26.142|
                  |L26.100|
;;;721            /* disable initialize mode */
;;;722            CAN_CTL(can_periph) &= (~(uint32_t)CAN_CTL_IWMOD);
000064  6801              LDR      r1,[r0,#0]
000066  f0210101          BIC      r1,r1,#1
00006a  6001              STR      r1,[r0,#0]
;;;723            /* set sleep mode */
;;;724            CAN_CTL(can_periph) |= (uint8_t)CAN_CTL_SLPWMOD;
00006c  6801              LDR      r1,[r0,#0]
00006e  f0410102          ORR      r1,r1,#2
000072  6001              STR      r1,[r0,#0]
;;;725            /* wait the acknowledge */
;;;726            while((CAN_STAT_SLPWS != (CAN_STAT(can_periph) & CAN_STAT_SLPWS)) && (0U != timeout)){
000074  e000              B        |L26.120|
                  |L26.118|
;;;727                timeout--;
000076  1e52              SUBS     r2,r2,#1
                  |L26.120|
000078  6841              LDR      r1,[r0,#4]            ;726
00007a  0789              LSLS     r1,r1,#30             ;726
00007c  d401              BMI      |L26.130|
00007e  2a00              CMP      r2,#0                 ;726
000080  d1f9              BNE      |L26.118|
                  |L26.130|
;;;728            }
;;;729            if(CAN_STAT_SLPWS != (CAN_STAT(can_periph) & CAN_STAT_SLPWS)){
000082  6840              LDR      r0,[r0,#4]
000084  0780              LSLS     r0,r0,#30
000086  d401              BMI      |L26.140|
;;;730                flag = ERROR;
000088  2300              MOVS     r3,#0
00008a  e000              B        |L26.142|
                  |L26.140|
;;;731            }else{
;;;732                flag = SUCCESS;
00008c  2301              MOVS     r3,#1
                  |L26.142|
;;;733            }
;;;734        }else{
;;;735            flag = ERROR;
;;;736        }
;;;737        return flag;
00008e  4618              MOV      r0,r3
;;;738    }
000090  4770              BX       lr
;;;739    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\src\\gd32f10x_can.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_can_c_a739e72c____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___14_gd32f10x_can_c_a739e72c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_gd32f10x_can_c_a739e72c____REVSH|
#line 128
|__asm___14_gd32f10x_can_c_a739e72c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
