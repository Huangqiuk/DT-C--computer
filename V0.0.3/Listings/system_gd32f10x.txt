; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\system_gd32f10x.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\output\system_gd32f10x.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I.\User -I.\Libraries\inc -I.\Libraries\src -I.\CMSIS -I.\Startup -ID:\Keil_v5\Packs\GigaDevice\GD32F10x_DFP\2.0.3\Device\Include -D__MICROLIB -D__UVISION_VERSION=539 -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER -DGD32F10X_XD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\system_gd32f10x.crf CMSIS\system_gd32f10x.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;194    */
;;;195    void SystemCoreClockUpdate(void)
000000  b510              PUSH     {r4,lr}
;;;196    {
;;;197        uint32_t scss;
;;;198        uint32_t pllsel, predv0sel, pllmf, ck_src;
;;;199    #ifdef  GD32F10X_CL
;;;200        uint32_t predv0, predv1, pll1mf;
;;;201    #endif /* GD32F10X_CL */
;;;202    
;;;203        scss = GET_BITS(RCU_CFG0, 2, 3);
000002  4b18              LDR      r3,|L1.100|
000004  6858              LDR      r0,[r3,#4]
000006  f3c00081          UBFX     r0,r0,#2,#2
;;;204    
;;;205        switch (scss)
;;;206        {
;;;207            /* IRC8M is selected as CK_SYS */
;;;208            case SEL_IRC8M:
;;;209                SystemCoreClock = IRC8M_VALUE;
00000a  4917              LDR      r1,|L1.104|
00000c  4a17              LDR      r2,|L1.108|
00000e  2800              CMP      r0,#0                 ;205
000010  d005              BEQ      |L1.30|
000012  2801              CMP      r0,#1                 ;205
000014  d005              BEQ      |L1.34|
000016  2802              CMP      r0,#2                 ;205
000018  d005              BEQ      |L1.38|
;;;210                break;
;;;211                
;;;212            /* HXTAL is selected as CK_SYS */
;;;213            case SEL_HXTAL:
;;;214                SystemCoreClock = HXTAL_VALUE;
;;;215                break;
;;;216                
;;;217            /* PLL is selected as CK_SYS */
;;;218            case SEL_PLL:
;;;219                /* PLL clock source selection, HXTAL or IRC8M/2 */
;;;220                pllsel = (RCU_CFG0 & RCU_CFG0_PLLSEL);
;;;221    
;;;222    
;;;223                if(RCU_PLLSRC_IRC8M_DIV2 == pllsel){
;;;224                    /* PLL clock source is IRC8M/2 */
;;;225                    ck_src = IRC8M_VALUE / 2U;
;;;226                }else{
;;;227                    /* PLL clock source is HXTAL */
;;;228                    ck_src = HXTAL_VALUE;
;;;229                
;;;230    #if (defined(GD32F10X_MD) || defined(GD32F10X_HD) || defined(GD32F10X_XD))
;;;231                    predv0sel = (RCU_CFG0 & RCU_CFG0_PREDV0);
;;;232    
;;;233                    /* PREDV0 input source clock divided by 2 */
;;;234                    if(RCU_CFG0_PREDV0 == predv0sel){
;;;235                        ck_src = HXTAL_VALUE / 2U;
;;;236                    }
;;;237    #elif defined(GD32F10X_CL)
;;;238                    predv0sel = (RCU_CFG1 & RCU_CFG1_PREDV0SEL);
;;;239    
;;;240                    /* source clock use PLL1 */
;;;241                    if(RCU_PREDV0SRC_CKPLL1 == predv0sel){
;;;242                        predv1 = ((RCU_CFG1 & RCU_CFG1_PREDV1) >> 4) + 1U;
;;;243                        pll1mf = ((RCU_CFG1 & RCU_CFG1_PLL1MF) >> 8) + 2U;
;;;244                        if(17U == pll1mf){
;;;245                            pll1mf = 20U;
;;;246                        }
;;;247                        ck_src = (ck_src / predv1) * pll1mf;
;;;248                    }
;;;249                    predv0 = (RCU_CFG1 & RCU_CFG1_PREDV0) + 1U;
;;;250                    ck_src /= predv0;
;;;251    #endif /* GD32F10X_MD and GD32F10X_HD and GD32F10X_XD */
;;;252                }
;;;253    
;;;254                /* PLL multiplication factor */
;;;255                pllmf = GET_BITS(RCU_CFG0, 18, 21);
;;;256    
;;;257                if((RCU_CFG0 & RCU_CFG0_PLLMF_4)){
;;;258                    pllmf |= 0x10U;
;;;259                }
;;;260    
;;;261                if(pllmf >= 15U){
;;;262                    pllmf += 1U;
;;;263                }else{
;;;264                    pllmf += 2U;
;;;265                }
;;;266    
;;;267                SystemCoreClock = ck_src * pllmf;
;;;268    
;;;269    #ifdef GD32F10X_CL
;;;270                if(15U == pllmf){
;;;271                    /* PLL source clock multiply by 6.5 */
;;;272                    SystemCoreClock = ck_src * 6U + ck_src / 2U;
;;;273                }
;;;274    #endif /* GD32F10X_CL */
;;;275    
;;;276                break;
;;;277    
;;;278            /* IRC8M is selected as CK_SYS */
;;;279            default:
;;;280                SystemCoreClock = IRC8M_VALUE;
00001a  6011              STR      r1,[r2,#0]  ; SystemCoreClock
;;;281                break;
;;;282        }
;;;283    }
00001c  bd10              POP      {r4,pc}
                  |L1.30|
00001e  6011              STR      r1,[r2,#0]            ;209  ; SystemCoreClock
000020  bd10              POP      {r4,pc}
                  |L1.34|
000022  6011              STR      r1,[r2,#0]            ;214  ; SystemCoreClock
000024  bd10              POP      {r4,pc}
                  |L1.38|
000026  6858              LDR      r0,[r3,#4]            ;220
000028  f4003080          AND      r0,r0,#0x10000        ;220
00002c  4c10              LDR      r4,|L1.112|
00002e  b130              CBZ      r0,|L1.62|
000030  6858              LDR      r0,[r3,#4]            ;231
000032  f4003000          AND      r0,r0,#0x20000        ;231
000036  f5b03f00          CMP      r0,#0x20000           ;234
00003a  d002              BEQ      |L1.66|
00003c  e002              B        |L1.68|
                  |L1.62|
00003e  4621              MOV      r1,r4                 ;225
000040  e000              B        |L1.68|
                  |L1.66|
000042  4621              MOV      r1,r4                 ;235
                  |L1.68|
000044  6858              LDR      r0,[r3,#4]            ;255
000046  f3c04083          UBFX     r0,r0,#18,#4          ;255
00004a  685b              LDR      r3,[r3,#4]            ;257
00004c  011b              LSLS     r3,r3,#4              ;257
00004e  d501              BPL      |L1.84|
000050  f0400010          ORR      r0,r0,#0x10           ;258
                  |L1.84|
000054  280f              CMP      r0,#0xf               ;261
000056  d301              BCC      |L1.92|
000058  1c40              ADDS     r0,r0,#1              ;262
00005a  e000              B        |L1.94|
                  |L1.92|
00005c  1c80              ADDS     r0,r0,#2              ;264
                  |L1.94|
00005e  4341              MULS     r1,r0,r1              ;267
000060  6011              STR      r1,[r2,#0]            ;267  ; SystemCoreClock
000062  bd10              POP      {r4,pc}
;;;284    
                          ENDP

                  |L1.100|
                          DCD      0x40021000
                  |L1.104|
                          DCD      0x007a1200
                  |L1.108|
                          DCD      ||.data||
                  |L1.112|
                          DCD      0x003d0900

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;144    */
;;;145    void SystemInit(void)
000000  480e              LDR      r0,|L2.60|
;;;146    {
;;;147        /* reset the RCC clock configuration to the default reset state */
;;;148        /* enable IRC8M */
;;;149        RCU_CTL |= RCU_CTL_IRC8MEN;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;150        
;;;151        /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
;;;152        RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
00000a  6841              LDR      r1,[r0,#4]
00000c  4a0c              LDR      r2,|L2.64|
00000e  4011              ANDS     r1,r1,r2
000010  6041              STR      r1,[r0,#4]
;;;153                      RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);
;;;154    
;;;155        /* reset HXTALEN, CKMEN, PLLEN bits */
;;;156        RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
000012  6802              LDR      r2,[r0,#0]
000014  490b              LDR      r1,|L2.68|
000016  400a              ANDS     r2,r2,r1
000018  6002              STR      r2,[r0,#0]
;;;157    
;;;158        /* Reset HXTALBPS bit */
;;;159        RCU_CTL &= ~(RCU_CTL_HXTALBPS);
00001a  6802              LDR      r2,[r0,#0]
00001c  f4222280          BIC      r2,r2,#0x40000
000020  6002              STR      r2,[r0,#0]
;;;160    
;;;161        /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
;;;162        
;;;163    #ifdef GD32F10X_CL
;;;164        RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
;;;165                      RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
;;;166    
;;;167        RCU_CFG1 = 0x00000000U;
;;;168    #else
;;;169        RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0 | RCU_CFG0_PLLMF |
000022  6842              LDR      r2,[r0,#4]
000024  4b08              LDR      r3,|L2.72|
000026  401a              ANDS     r2,r2,r3
000028  6042              STR      r2,[r0,#4]
;;;170                      RCU_CFG0_USBDPSC | RCU_CFG0_PLLMF_4);
;;;171    #endif /* GD32F10X_CL */
;;;172    
;;;173    #if (defined(GD32F10X_MD) || defined(GD32F10X_HD) || defined(GD32F10X_XD))
;;;174        /* reset HXTALEN, CKMEN and PLLEN bits */
;;;175        RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
00002a  6802              LDR      r2,[r0,#0]
00002c  400a              ANDS     r2,r2,r1
00002e  6002              STR      r2,[r0,#0]
;;;176        /* disable all interrupts */
;;;177        RCU_INT = 0x009F0000U;
000030  f44f011f          MOV      r1,#0x9f0000
000034  6081              STR      r1,[r0,#8]
;;;178    #elif defined(GD32F10X_CL)
;;;179        /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
;;;180        RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
;;;181        /* disable all interrupts */
;;;182        RCU_INT = 0x00FF0000U;
;;;183    #endif
;;;184    
;;;185        /* Configure the System clock source, PLL Multiplier, AHB/APBx prescalers and Flash settings */
;;;186        system_clock_config();
000036  f7ffbffe          B.W      system_clock_config
;;;187    }
;;;188    
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      0x40021000
                  |L2.64|
                          DCD      0xe8ff000c
                  |L2.68|
                          DCD      0xfef6ffff
                  |L2.72|
                          DCD      0xf700ffff

                          AREA ||i.system_clock_108m_hxtal||, CODE, READONLY, ALIGN=2

                  system_clock_108m_hxtal PROC
;;;790    */
;;;791    static void system_clock_108m_hxtal(void)
000000  2100              MOVS     r1,#0
;;;792    {
;;;793        uint32_t timeout   = 0U;
;;;794        uint32_t stab_flag = 0U;
;;;795    
;;;796        /* enable HXTAL */
;;;797        RCU_CTL |= RCU_CTL_HXTALEN;
000002  481e              LDR      r0,|L3.124|
000004  6802              LDR      r2,[r0,#0]
000006  f4423280          ORR      r2,r2,#0x10000
00000a  6002              STR      r2,[r0,#0]
;;;798    
;;;799        /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
;;;800        do{
;;;801            timeout++;
;;;802            stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
;;;803        }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
00000c  f64f73ff          MOV      r3,#0xffff
                  |L3.16|
000010  1c49              ADDS     r1,r1,#1              ;801
000012  6802              LDR      r2,[r0,#0]            ;802
000014  f4023200          AND      r2,r2,#0x20000        ;802
000018  b90a              CBNZ     r2,|L3.30|
00001a  4299              CMP      r1,r3
00001c  d1f8              BNE      |L3.16|
                  |L3.30|
;;;804    
;;;805        /* if fail */
;;;806        if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
00001e  6801              LDR      r1,[r0,#0]
000020  0389              LSLS     r1,r1,#14
000022  d400              BMI      |L3.38|
                  |L3.36|
;;;807            while(1){
000024  e7fe              B        |L3.36|
                  |L3.38|
;;;808            }
;;;809        }
;;;810    
;;;811        /* HXTAL is stable */
;;;812        /* AHB = SYSCLK */
;;;813        RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
000026  6841              LDR      r1,[r0,#4]
000028  6041              STR      r1,[r0,#4]
;;;814        /* APB2 = AHB/1 */
;;;815        RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
00002a  6841              LDR      r1,[r0,#4]
00002c  6041              STR      r1,[r0,#4]
;;;816        /* APB1 = AHB/2 */
;;;817        RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
00002e  6841              LDR      r1,[r0,#4]
000030  f4416180          ORR      r1,r1,#0x400
000034  6041              STR      r1,[r0,#4]
;;;818    
;;;819    #if (defined(GD32F10X_MD) || defined(GD32F10X_HD) || defined(GD32F10X_XD))
;;;820        /* select HXTAL/2 as clock source */
;;;821        RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0);
000036  6841              LDR      r1,[r0,#4]
000038  f4213140          BIC      r1,r1,#0x30000
00003c  6041              STR      r1,[r0,#4]
;;;822        RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_CFG0_PREDV0);
00003e  6841              LDR      r1,[r0,#4]
000040  f4413140          ORR      r1,r1,#0x30000
000044  6041              STR      r1,[r0,#4]
;;;823    
;;;824        /* CK_PLL = (CK_HXTAL/2) * 27 = 108 MHz */
;;;825        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
000046  6841              LDR      r1,[r0,#4]
000048  4a0d              LDR      r2,|L3.128|
00004a  4011              ANDS     r1,r1,r2
00004c  6041              STR      r1,[r0,#4]
;;;826        RCU_CFG0 |= RCU_PLL_MUL27;
00004e  6841              LDR      r1,[r0,#4]
000050  4a0c              LDR      r2,|L3.132|
000052  4311              ORRS     r1,r1,r2
000054  6041              STR      r1,[r0,#4]
;;;827    
;;;828    #elif defined(GD32F10X_CL)
;;;829        /* CK_PLL = (CK_PREDIV0) * 27 = 108 MHz */ 
;;;830        RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
;;;831        RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL27);
;;;832    
;;;833        /* CK_PREDIV0 = (CK_HXTAL)/5 *8 /10 = 4 MHz */ 
;;;834        RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV1 | RCU_CFG1_PREDV0);
;;;835        RCU_CFG1 |= (RCU_PREDV0SRC_CKPLL1 | RCU_PLL1_MUL8 | RCU_PREDV1_DIV5 | RCU_PREDV0_DIV10);
;;;836    
;;;837        /* enable PLL1 */
;;;838        RCU_CTL |= RCU_CTL_PLL1EN;
;;;839        /* wait till PLL1 is ready */
;;;840        while(0U == (RCU_CTL & RCU_CTL_PLL1STB)){
;;;841        }
;;;842    #endif /* GD32F10X_MD and GD32F10X_HD and GD32F10X_XD */
;;;843    
;;;844        /* enable PLL */
;;;845        RCU_CTL |= RCU_CTL_PLLEN;
000056  6801              LDR      r1,[r0,#0]
000058  f0417180          ORR      r1,r1,#0x1000000
00005c  6001              STR      r1,[r0,#0]
                  |L3.94|
;;;846    
;;;847        /* wait until PLL is stable */
;;;848        while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
00005e  6801              LDR      r1,[r0,#0]
000060  0189              LSLS     r1,r1,#6
000062  d5fc              BPL      |L3.94|
;;;849        }
;;;850    
;;;851        /* select PLL as system clock */
;;;852        RCU_CFG0 &= ~RCU_CFG0_SCS;
000064  6841              LDR      r1,[r0,#4]
000066  f0210103          BIC      r1,r1,#3
00006a  6041              STR      r1,[r0,#4]
;;;853        RCU_CFG0 |= RCU_CKSYSSRC_PLL;
00006c  6841              LDR      r1,[r0,#4]
00006e  f0410102          ORR      r1,r1,#2
000072  6041              STR      r1,[r0,#4]
                  |L3.116|
;;;854    
;;;855        /* wait until PLL is selected as system clock */
;;;856        while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
000074  6841              LDR      r1,[r0,#4]
000076  0709              LSLS     r1,r1,#28
000078  d5fc              BPL      |L3.116|
;;;857        }
;;;858    }
00007a  4770              BX       lr
;;;859    
                          ENDP

                  |L3.124|
                          DCD      0x40021000
                  |L3.128|
                          DCD      0xf7c3ffff
                  |L3.132|
                          DCD      0x08280000

                          AREA ||i.system_clock_config||, CODE, READONLY, ALIGN=1

                  system_clock_config PROC
;;;110    */
;;;111    static void system_clock_config(void)
000000  f7ffbffe          B.W      system_clock_108m_hxtal
;;;112    {
;;;113    #ifdef __SYSTEM_CLOCK_HXTAL
;;;114        system_clock_hxtal();
;;;115    #elif defined (__SYSTEM_CLOCK_24M_PLL_HXTAL)
;;;116        system_clock_24m_hxtal();
;;;117    #elif defined (__SYSTEM_CLOCK_36M_PLL_HXTAL)
;;;118        system_clock_36m_hxtal();
;;;119    #elif defined (__SYSTEM_CLOCK_48M_PLL_HXTAL)
;;;120        system_clock_48m_hxtal();
;;;121    #elif defined (__SYSTEM_CLOCK_56M_PLL_HXTAL)
;;;122        system_clock_56m_hxtal();
;;;123    #elif defined (__SYSTEM_CLOCK_72M_PLL_HXTAL)
;;;124        system_clock_72m_hxtal();
;;;125    #elif defined (__SYSTEM_CLOCK_96M_PLL_HXTAL)
;;;126        system_clock_96m_hxtal();
;;;127    #elif defined (__SYSTEM_CLOCK_108M_PLL_HXTAL)
;;;128        system_clock_108m_hxtal();
;;;129    
;;;130    #elif defined (__SYSTEM_CLOCK_48M_PLL_IRC8M)
;;;131        system_clock_48m_irc8m();
;;;132    #elif defined (__SYSTEM_CLOCK_72M_PLL_IRC8M)
;;;133        system_clock_72m_irc8m();
;;;134    #elif defined (__SYSTEM_CLOCK_108M_PLL_IRC8M)
;;;135        system_clock_108m_irc8m();
;;;136    #endif /* __SYSTEM_CLOCK_HXTAL */
;;;137    }
;;;138    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x066ff300

;*** Start embedded assembler ***

#line 1 "CMSIS\\system_gd32f10x.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_system_gd32f10x_c_5d646a67____REV16|
#line 114 ".\\CMSIS\\core_cmInstr.h"
|__asm___17_system_gd32f10x_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_system_gd32f10x_c_5d646a67____REVSH|
#line 128
|__asm___17_system_gd32f10x_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
